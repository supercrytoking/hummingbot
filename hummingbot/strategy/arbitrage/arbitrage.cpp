/* Generated by Cython 3.0a7 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "hummingbot\\core\\cpp\\LimitOrder.h",
            "hummingbot\\core\\cpp\\OrderBookEntry.h",
            "hummingbot\\core\\cpp\\PyRef.h"
        ],
        "include_dirs": [
            ".\\hummingbot\\core\\data_type",
            ".\\hummingbot\\core"
        ],
        "language": "c++",
        "name": "hummingbot.strategy.arbitrage.arbitrage",
        "sources": [
            "hummingbot\\strategy\\arbitrage\\arbitrage.pyx"
        ]
    },
    "module_name": "hummingbot.strategy.arbitrage.arbitrage"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#define CYTHON_ABI "3_0a7"
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030000A7
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP487_INIT_SUBCLASS
  #define CYTHON_PEP487_INIT_SUBCLASS 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(CYTHON_LIMITED_API)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030800B2
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#elif PY_VERSION_HEX >= 0x030800A4
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#elif CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static inline void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
#else
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__hummingbot__strategy__arbitrage__arbitrage
#define __PYX_HAVE_API__hummingbot__strategy__arbitrage__arbitrage
/* Early includes */
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <set>
#include <vector>
#include "../cpp/OrderBookEntry.h"
#include <unordered_map>
#include <unordered_set>
#include "cpp/PyRef.h"
#include <string.h>
#include <stdio.h>

    /* Using NumPy API declarations from "numpy/__init__.cython-30.pxd" */
    
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"
#include <string>
#include "../cpp/LimitOrder.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "hummingbot\\\\strategy\\\\arbitrage\\\\arbitrage.pyx",
  "stringsource",
  "__init__.cython-30.pxd",
  "hummingbot\\\\core\\\\event\\\\event_listener.pxd",
  "hummingbot\\\\core\\\\pubsub.pxd",
  "hummingbot\\\\core\\\\data_type\\\\order_book_query_result.pxd",
  "type.pxd",
  "hummingbot\\\\core\\\\data_type\\\\order_book.pxd",
  "hummingbot\\\\core\\\\clock.pxd",
  "hummingbot\\\\core\\\\time_iterator.pxd",
  "hummingbot\\\\core\\\\data_type\\\\limit_order.pxd",
  "hummingbot\\\\strategy\\\\order_tracker.pxd",
  "hummingbot\\\\core\\\\event\\\\event_reporter.pxd",
  "hummingbot\\\\core\\\\event\\\\event_logger.pxd",
  "hummingbot\\\\core\\\\network_iterator.pxd",
  "hummingbot\\\\connector\\\\connector_base.pxd",
  "hummingbot\\\\connector\\\\exchange_base.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* #### Code section: numeric_typedefs ### */

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":732
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":733
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":734
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":735
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":739
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":740
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":741
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":742
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":746
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":747
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":756
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":757
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":758
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":760
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":761
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":762
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":764
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":765
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":767
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":768
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":769
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* #### Code section: complex_type_declarations ### */
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener;
struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub;
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult;
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult;
struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook;
struct __pyx_obj_10hummingbot_4core_5clock_Clock;
struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator;
struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder;
struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker;
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase;
struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter;
struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger;
struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator;
struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase;
struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase;
struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy;

/* "hummingbot/core/pubsub.pxd":10
 * from hummingbot.core.event.event_listener cimport EventListener
 * 
 * ctypedef unordered_set[PyRef] EventListenersCollection             # <<<<<<<<<<<<<<
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 */
typedef std::unordered_set<PyRef>  __pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection;

/* "hummingbot/core/pubsub.pxd":11
 * 
 * ctypedef unordered_set[PyRef] EventListenersCollection
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 */
typedef std::unordered_set<PyRef> ::iterator __pyx_t_10hummingbot_4core_6pubsub_EventListenersIterator;

/* "hummingbot/core/pubsub.pxd":12
 * ctypedef unordered_set[PyRef] EventListenersCollection
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair
 */
typedef std::unordered_map<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection>  __pyx_t_10hummingbot_4core_6pubsub_Events;

/* "hummingbot/core/pubsub.pxd":13
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator             # <<<<<<<<<<<<<<
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair
 * 
 */
typedef std::unordered_map<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection> ::iterator __pyx_t_10hummingbot_4core_6pubsub_EventsIterator;

/* "hummingbot/core/pubsub.pxd":14
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::pair<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection>  __pyx_t_10hummingbot_4core_6pubsub_EventsPair;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":771
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":772
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":773
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":775
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market;
struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market;

/* "hummingbot/strategy/strategy_base.pxd":45
 *     cdef c_did_complete_sell_order_tracker(self, object order_completed_event)
 * 
 *     cdef str c_buy_with_specific_market(self, object market_trading_pair_tuple, object amount, object order_type = *,             # <<<<<<<<<<<<<<
 *                                         object price = *, double expiration_seconds = *, position_action = *)
 *     cdef str c_sell_with_specific_market(self, object market_trading_pair_tuple, object amount, object order_type = *,
 */
struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  double expiration_seconds;
  PyObject *position_action;
};

/* "hummingbot/strategy/strategy_base.pxd":47
 *     cdef str c_buy_with_specific_market(self, object market_trading_pair_tuple, object amount, object order_type = *,
 *                                         object price = *, double expiration_seconds = *, position_action = *)
 *     cdef str c_sell_with_specific_market(self, object market_trading_pair_tuple, object amount, object order_type = *,             # <<<<<<<<<<<<<<
 *                                          object price = *, double expiration_seconds = *, position_action = *, )
 *     cdef c_cancel_order(self, object market_pair, str order_id)
 */
struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  double expiration_seconds;
  PyObject *position_action;
};
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount;

/* "hummingbot/connector/connector_base.pxd":18
 *         public dict _exchange_order_ids
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/connector_base.pxd":19
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 *     cdef c_stop_tracking_order(self, str order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/connector_base.pxd":28
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object order_size)
 *     cdef object c_quantize_order_price(self, str trading_pair, object price)
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price=*)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount {
  int __pyx_n;
  PyObject *price;
};
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_buy;
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_sell;

/* "hummingbot/connector/exchange_base.pxd":14
 *         object _order_book_tracker
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_buy {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/exchange_base.pxd":15
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 *     cdef c_stop_tracking_order(self, str order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_sell {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/core/event/event_listener.pxd":6
 * 
 * 
 * cdef class EventListener:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object __weakref__
 */
struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener *__pyx_vtab;
  PyObject *__weakref__;
  int64_t _current_event_tag;
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *_current_event_caller;
};


/* "hummingbot/core/pubsub.pxd":17
 * 
 * 
 * cdef class PubSub:             # <<<<<<<<<<<<<<
 *     cdef:
 *         Events _events
 */
struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub *__pyx_vtab;
  __pyx_t_10hummingbot_4core_6pubsub_Events _events;
  PyObject *__weakref__;
};


/* "order_book_query_result.pxd":3
 * # distutils: language=c++
 * 
 * cdef class OrderBookQueryResult:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public double query_price
 */
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult {
  PyObject_HEAD
  double query_price;
  double query_volume;
  double result_price;
  double result_volume;
};


/* "order_book_query_result.pxd":11
 * 
 * 
 * cdef class ClientOrderBookQueryResult:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public object query_price
 */
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult {
  PyObject_HEAD
  PyObject *query_price;
  PyObject *query_volume;
  PyObject *result_price;
  PyObject *result_volume;
};


/* "hummingbot/core/data_type/order_book.pxd":12
 * 
 * 
 * cdef class OrderBook(PubSub):             # <<<<<<<<<<<<<<
 *     cdef set[OrderBookEntry] _bid_book
 *     cdef set[OrderBookEntry] _ask_book
 */
struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook {
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  std::set<OrderBookEntry>  _bid_book;
  std::set<OrderBookEntry>  _ask_book;
  int64_t _snapshot_uid;
  int64_t _last_diff_uid;
  double _best_bid;
  double _best_ask;
  double _last_trade_price;
  double _last_applied_trade;
  double _last_trade_price_rest_updated;
  int _dex;
};


/* "hummingbot/core/clock.pxd":3
 * # distutils: language=c++
 * 
 * cdef class Clock:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _clock_mode
 */
struct __pyx_obj_10hummingbot_4core_5clock_Clock {
  PyObject_HEAD
  PyObject *_clock_mode;
  double _tick_size;
  double _start_time;
  double _end_time;
  PyObject *_child_iterators;
  PyObject *_current_context;
  double _current_tick;
  int _started;
};


/* "hummingbot/core/time_iterator.pxd":7
 * 
 * 
 * cdef class TimeIterator(PubSub):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double _current_timestamp
 */
struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator {
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  double _current_timestamp;
  struct __pyx_obj_10hummingbot_4core_5clock_Clock *_clock;
};


/* "hummingbot/core/data_type/limit_order.pxd":6
 * 
 * 
 * cdef class LimitOrder:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CPPLimitOrder _cpp_limit_order
 */
struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_vtab;
  LimitOrder _cpp_limit_order;
};


/* "order_tracker.pxd":7
 * 
 * 
 * cdef class OrderTracker(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         dict _tracked_limit_orders
 */
struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_tracked_limit_orders;
  PyObject *_tracked_market_orders;
  PyObject *_order_id_to_market_pair;
  PyObject *_shadow_tracked_limit_orders;
  PyObject *_shadow_order_id_to_market_pair;
  PyObject *_shadow_gc_requests;
  PyObject *_in_flight_cancels;
  PyObject *_in_flight_pending_created;
};


/* "hummingbot/strategy/strategy_base.pxd":8
 * from .order_tracker cimport OrderTracker
 * 
 * cdef class StrategyBase(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         set _sb_markets
 */
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_sb_markets;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_create_buy_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_create_sell_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_fill_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_fail_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_cancel_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_expire_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_complete_buy_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_complete_sell_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_complete_funding_payment_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_create_range_position_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_remove_range_position_order_listener;
  int _sb_delegate_lock;
  struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *_sb_order_tracker;
};


/* "hummingbot/core/event/event_reporter.pxd":4
 * 
 * 
 * cdef class EventReporter(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str event_source
 */
struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter {
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
  PyObject *event_source;
};


/* "hummingbot/core/event/event_logger.pxd":4
 * 
 * 
 * cdef class EventLogger(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str _event_source
 */
struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger {
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
  PyObject *_event_source;
  PyObject *_logged_events;
  PyObject *_waiting;
  PyObject *_wait_returns;
};


/* "hummingbot/core/network_iterator.pxd":6
 * 
 * 
 * cdef class NetworkIterator(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _network_status
 */
struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_network_status;
  double _last_connected_timestamp;
  double _check_network_interval;
  double _check_network_timeout;
  double _network_error_wait_time;
  PyObject *_check_network_task;
};


/* "hummingbot/connector/connector_base.pxd":5
 * from hummingbot.core.network_iterator cimport NetworkIterator
 * 
 * cdef class ConnectorBase(NetworkIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         EventReporter _event_reporter
 */
struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase {
  struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_base;
  struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter *_event_reporter;
  struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger *_event_logger;
  int _trading_required;
  PyObject *_account_available_balances;
  PyObject *_account_balances;
  int _real_time_balance_update;
  PyObject *_in_flight_orders_snapshot;
  double _in_flight_orders_snapshot_timestamp;
  PyObject *_current_trade_fills;
  PyObject *_exchange_order_ids;
};


/* "hummingbot/connector/exchange_base.pxd":10
 * )
 * 
 * cdef class ExchangeBase(ConnectorBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _order_book_tracker
 */
struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase {
  struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase __pyx_base;
  PyObject *_order_book_tracker;
};


/* "hummingbot/strategy/arbitrage/arbitrage.pxd":8
 * 
 * 
 * cdef class ArbitrageStrategy(StrategyBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         list _market_pairs
 */
struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase __pyx_base;
  PyObject *_market_pairs;
  int _all_markets_ready;
  PyObject *_order_id_to_market;
  PyObject *_min_profitability;
  PyObject *_max_order_size;
  PyObject *_min_order_size;
  double _status_report_interval;
  double _last_timestamp;
  PyObject *_last_trade_timestamps;
  double _next_trade_delay;
  PyObject *_sell_markets;
  PyObject *_buy_markets;
  int64_t _logging_options;
  PyObject *_exchange_rate_conversion;
  int _failed_order_tolerance;
  int _cool_off_logged;
  int _use_oracle_conversion_rate;
  PyObject *_secondary_to_primary_base_conversion_rate;
  PyObject *_secondary_to_primary_quote_conversion_rate;
  int _hb_app_notification;
  PyObject *_current_profitability;
  double _last_conv_rates_logged;
};



/* "hummingbot/core/event/event_listener.pxd":6
 * 
 * 
 * cdef class EventListener:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object __weakref__
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener {
  PyObject *(*c_set_event_info)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, int64_t, struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *);
  PyObject *(*c_call)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener *__pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener;


/* "hummingbot/core/pubsub.pxd":17
 * 
 * 
 * cdef class PubSub:             # <<<<<<<<<<<<<<
 *     cdef:
 *         Events _events
 */

struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub {
  PyObject *(*c_log_exception)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, PyObject *);
  PyObject *(*c_add_listener)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *);
  PyObject *(*c_remove_listener)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *);
  PyObject *(*c_remove_dead_listeners)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t);
  PyObject *(*c_get_listeners)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t);
  PyObject *(*c_trigger_event)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub *__pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub;


/* "hummingbot/core/data_type/order_book.pxd":12
 * 
 * 
 * cdef class OrderBook(PubSub):             # <<<<<<<<<<<<<<
 *     cdef set[OrderBookEntry] _bid_book
 *     cdef set[OrderBookEntry] _ask_book
 */

struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook {
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  PyObject *(*c_apply_diffs)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, std::vector<OrderBookEntry> , std::vector<OrderBookEntry> , int64_t);
  PyObject *(*c_apply_snapshot)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, std::vector<OrderBookEntry> , std::vector<OrderBookEntry> , int64_t);
  PyObject *(*c_apply_trade)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyObject *);
  PyObject *(*c_apply_numpy_diffs)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyArrayObject *, PyArrayObject *);
  PyObject *(*c_apply_numpy_snapshot)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyArrayObject *, PyArrayObject *);
  double (*c_get_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_price_for_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_price_for_quote_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_volume_for_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_quote_volume_for_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_vwap_for_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_quote_volume_for_base_amount)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
};
static struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook;


/* "hummingbot/core/time_iterator.pxd":7
 * 
 * 
 * cdef class TimeIterator(PubSub):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double _current_timestamp
 */

struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator {
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  PyObject *(*c_start)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *, double);
  PyObject *(*c_stop)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *);
  PyObject *(*c_tick)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, double);
};
static struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator *__pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator;


/* "hummingbot/core/data_type/limit_order.pxd":6
 * 
 * 
 * cdef class LimitOrder:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CPPLimitOrder _cpp_limit_order
 */

struct __pyx_vtabstruct_10hummingbot_4core_9data_type_11limit_order_LimitOrder {
  long (*c_age)(struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *);
  long (*c_age_til)(struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *, long);
};
static struct __pyx_vtabstruct_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_vtabptr_10hummingbot_4core_9data_type_11limit_order_LimitOrder;


/* "order_tracker.pxd":7
 * 
 * 
 * cdef class OrderTracker(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         dict _tracked_limit_orders
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *(*c_get_limit_orders)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *);
  PyObject *(*c_get_market_orders)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *);
  PyObject *(*c_get_shadow_limit_orders)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *);
  int (*c_has_in_flight_cancel)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  int (*c_check_and_track_cancel)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  PyObject *(*c_get_market_pair_from_order_id)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  PyObject *(*c_get_shadow_market_pair_from_order_id)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *(*c_get_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *);
  PyObject *(*c_get_market_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *(*c_get_shadow_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  PyObject *(*c_start_tracking_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *, int, PyObject *, PyObject *);
  PyObject *(*c_stop_tracking_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *);
  PyObject *(*c_start_tracking_market_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *, int, PyObject *);
  PyObject *(*c_stop_tracking_market_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *);
  PyObject *(*c_check_and_cleanup_shadow_records)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *);
  PyObject *(*c_add_create_order_pending)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  PyObject *(*c_remove_create_order_pending)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *__pyx_vtabptr_10hummingbot_8strategy_13order_tracker_OrderTracker;


/* "hummingbot/strategy/strategy_base.pxd":8
 * from .order_tracker cimport OrderTracker
 * 
 * cdef class StrategyBase(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         set _sb_markets
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *(*c_add_markets)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_remove_markets)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_create_buy_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_create_sell_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_fill_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_fail_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_cancel_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_expire_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_buy_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_sell_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_funding_payment)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_create_range_position_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_remove_range_position_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_fail_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_cancel_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_expire_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_buy_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_sell_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_buy_with_specific_market)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market *__pyx_optional_args);
  PyObject *(*c_sell_with_specific_market)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market *__pyx_optional_args);
  PyObject *(*c_cancel_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *);
  PyObject *(*c_start_tracking_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, int, PyObject *, PyObject *);
  PyObject *(*c_stop_tracking_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *);
  PyObject *(*c_start_tracking_market_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, int, PyObject *);
  PyObject *(*c_stop_tracking_market_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *);
  PyObject *(*c_track_restored_orders)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_sum_flat_fees)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase;


/* "hummingbot/core/event/event_reporter.pxd":4
 * 
 * 
 * cdef class EventReporter(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str event_source
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter {
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter *__pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter;


/* "hummingbot/core/event/event_logger.pxd":4
 * 
 * 
 * cdef class EventLogger(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str _event_source
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger {
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger *__pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger;


/* "hummingbot/core/network_iterator.pxd":6
 * 
 * 
 * cdef class NetworkIterator(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _network_status
 */

struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator *__pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator;


/* "hummingbot/connector/connector_base.pxd":5
 * from hummingbot.core.network_iterator cimport NetworkIterator
 * 
 * cdef class ConnectorBase(NetworkIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         EventReporter _event_reporter
 */

struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase {
  struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_base;
  PyObject *(*c_buy)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy *__pyx_optional_args);
  PyObject *(*c_sell)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell *__pyx_optional_args);
  PyObject *(*c_cancel)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_stop_tracking_order)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_balance)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_available_balance)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_price)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, int);
  PyObject *(*c_get_order_price_quantum)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_get_order_size_quantum)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_quantize_order_price)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_quantize_order_amount)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount *__pyx_optional_args);
};
static struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *__pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase;


/* "hummingbot/connector/exchange_base.pxd":10
 * )
 * 
 * cdef class ExchangeBase(ConnectorBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _order_book_tracker
 */

struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase {
  struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase __pyx_base;
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *(*c_get_order_book)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_quote_volume_for_base_amount)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_volume_for_price)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_quote_volume_for_price)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_vwap_for_volume)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_price_for_volume)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  PyObject *(*c_get_fee)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase;


/* "hummingbot/strategy/arbitrage/arbitrage.pyx":31
 * 
 * 
 * cdef class ArbitrageStrategy(StrategyBase):             # <<<<<<<<<<<<<<
 *     OPTION_LOG_STATUS_REPORT = 1 << 0
 *     OPTION_LOG_CREATE_ORDER = 1 << 1
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy {
  struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase __pyx_base;
  PyObject *(*c_calculate_arbitrage_top_order_profitability)(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *, PyObject *);
  PyObject *(*c_process_market_pair)(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *, PyObject *);
  PyObject *(*c_process_market_pair_inner)(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *, PyObject *, PyObject *);
  PyObject *(*c_find_best_profitable_amount)(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *, PyObject *, PyObject *);
  int (*c_ready_for_new_orders)(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_vtabptr_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) (&args[nargs])
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* PyObject_Str.proto */
#define __Pyx_PyObject_Str(obj)\
    (likely(PyString_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_MultiplyObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_MultiplyObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceMultiply(op1, op2) : PyNumber_Multiply(op1, op2))
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* set_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set);
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyObjectFormat.proto */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* s, PyObject* f);
#else
#define __Pyx_PyObject_Format(s, f) PyObject_Format(s, f)
#endif

/* PyUnicode_Unicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* RaiseMappingExpected.proto */
static void __Pyx_RaiseMappingExpectedError(PyObject* arg);

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* PyIntFromDouble.proto */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value);
#else
#define __Pyx_PyInt_FromDouble(value) PyLong_FromDouble(value)
#endif

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* IterNext.proto */
#define __Pyx_PyIter_Next(obj) __Pyx_PyIter_Next2(obj, NULL)
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject *, PyObject *);

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* PyType_Ready.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_PyType_Ready(PyTypeObject *t);
#else
#define __Pyx_PyType_Ready(t) PyType_Ready(t)
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* pybytes_as_double.proto */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj);
static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length);
static CYTHON_INLINE double __Pyx_PyBytes_AsDouble(PyObject *obj) {
    return __Pyx__PyBytes_AsDouble(obj, PyBytes_AS_STRING(obj), PyBytes_GET_SIZE(obj));
}
static CYTHON_INLINE double __Pyx_PyByteArray_AsDouble(PyObject *obj) {
    return __Pyx__PyBytes_AsDouble(obj, PyByteArray_AS_STRING(obj), PyByteArray_GET_SIZE(obj));
}

/* pyunicode_as_double.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static const char* __Pyx__PyUnicode_AsDouble_Copy(const void* data, const int kind, char* buffer, Py_ssize_t start, Py_ssize_t end) {
    int last_was_punctuation;
    Py_ssize_t i;
    last_was_punctuation = 1;
    for (i=start; i <= end; i++) {
        Py_UCS4 chr = PyUnicode_READ(kind, data, i);
        int is_punctuation = (chr == '_') | (chr == '.');
        *buffer = (char)chr;
        buffer += (chr != '_');
        if (unlikely(chr > 127)) goto parse_failure;
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyUnicode_AsDouble_inf_nan(const void* data, int kind, Py_ssize_t start, Py_ssize_t length) {
    int matches = 1;
    Py_UCS4 chr;
    Py_UCS4 sign = PyUnicode_READ(kind, data, start);
    int is_signed = (sign == '-') | (sign == '+');
    start += is_signed;
    length -= is_signed;
    switch (PyUnicode_READ(kind, data, start)) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'a') | (chr == 'A');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'n') | (chr == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'f') | (chr == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+3);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+4);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+5);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+6);
            matches &= (chr == 't') | (chr == 'T');
            chr = PyUnicode_READ(kind, data, start+7);
            matches &= (chr == 'y') | (chr == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static double __Pyx_PyUnicode_AsDouble_WithSpaces(PyObject *obj) {
    double value;
    const char *last;
    char *end;
    Py_ssize_t start, length = PyUnicode_GET_LENGTH(obj);
    const int kind = PyUnicode_KIND(obj);
    const void* data = PyUnicode_DATA(obj);
    start = 0;
    while (Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, start)))
        start++;
    while (start < length - 1 && Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, length - 1)))
        length--;
    length -= start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyUnicode_AsDouble_inf_nan(data, kind, start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    if (length < 40) {
        char number[40];
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((length + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}
#endif
static CYTHON_INLINE double __Pyx_PyUnicode_AsDouble(PyObject *obj) {
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    if (unlikely(__Pyx_PyUnicode_READY(obj) == -1))
        return (double)-1;
    if (likely(PyUnicode_IS_ASCII(obj))) {
        const char *s;
        Py_ssize_t length;
        s = PyUnicode_AsUTF8AndSize(obj, &length);
        return __Pyx__PyBytes_AsDouble(obj, s, length);
    }
    return __Pyx_PyUnicode_AsDouble_WithSpaces(obj);
#else
    return __Pyx_SlowPyString_AsDouble(obj);
#endif
}

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#if CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_CyFunctionType = 0;
#endif
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_IsCyOrPyCFunction(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func.vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* None.proto */
#include <new>

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_Occurred(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* FunctionExport.proto */
static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig);

/* InitStrings.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str);
#else
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);
#endif

/* #### Code section: module_declarations ### */
static PyObject *__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_tick(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, double __pyx_v_timestamp); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_did_complete_buy_order(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_buy_order_completed_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_did_complete_sell_order(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_sell_order_completed_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_did_cancel_order(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_cancel_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_calculate_arbitrage_top_order_profitability(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto*/
static int __pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_ready_for_new_orders(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuples); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_process_market_pair(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_process_market_pair_inner(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_buy_market_trading_pair_tuple, PyObject *__pyx_v_sell_market_trading_pair_tuple); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_find_best_profitable_amount(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_buy_market_trading_pair_tuple, PyObject *__pyx_v_sell_market_trading_pair_tuple); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self); /* proto*/

/* Module declarations from "libc.stdint" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.utility" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.set" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.vector" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.data_type.OrderBookEntry" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.unordered_map" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.unordered_set" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.PyRef" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.event.event_listener" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener = 0;
#endif

/* Module declarations from "hummingbot.core.pubsub" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_6pubsub_PubSub = 0;
#endif

/* Module declarations from "hummingbot.core.data_type.order_book_query_result" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult = 0;
#endif

/* Module declarations from "libc.string" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libc.stdio" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "__builtin__" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cpython.type" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;
#endif

/* Module declarations from "cpython" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cpython.object" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cpython.ref" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "numpy" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "numpy" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
#endif

/* Module declarations from "hummingbot.core.data_type.order_book" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook = 0;
#endif

/* Module declarations from "hummingbot.core.clock" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5clock_Clock = 0;
#endif

/* Module declarations from "hummingbot.core.time_iterator" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator = 0;
#endif

/* Module declarations from "libcpp" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.string" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.data_type.LimitOrder" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.data_type.limit_order" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder = 0;
#endif

/* Module declarations from "hummingbot.strategy.order_tracker" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker = 0;
#endif

/* Module declarations from "hummingbot.strategy.strategy_base" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase = 0;
#endif

/* Module declarations from "hummingbot.core.event.event_reporter" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter = 0;
#endif

/* Module declarations from "hummingbot.core.event.event_logger" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger = 0;
#endif

/* Module declarations from "hummingbot.core.network_iterator" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator = 0;
#endif

/* Module declarations from "hummingbot.connector.connector_base" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase = 0;
#endif

/* Module declarations from "hummingbot.connector.exchange_base" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase = 0;
#endif

/* Module declarations from "hummingbot.strategy.arbitrage.arbitrage" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy = 0;
#endif
static PyObject *__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_c_find_profitable_arbitrage_orders(PyObject *, PyObject *, PyObject *, PyObject *, PyObject *); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "hummingbot.strategy.arbitrage.arbitrage"
extern int __pyx_module_is_main_hummingbot__strategy__arbitrage__arbitrage;
int __pyx_module_is_main_hummingbot__strategy__arbitrage__arbitrage = 0;

/* Implementation of "hummingbot.strategy.arbitrage.arbitrage" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_round;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_all;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_ImportError;
/* #### Code section: string_decls ### */
static const char __pyx_k_1[] = "1";
static const char __pyx_k_8f[] = ".8f";
static const char __pyx_k__5[] = "-";
static const char __pyx_k__6[] = " (";
static const char __pyx_k__7[] = "";
static const char __pyx_k__8[] = "\n";
static const char __pyx_k__9[] = "    ";
static const char __pyx_k_at[] = " at ";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_pd[] = "pd";
static const char __pyx_k_BUY[] = "BUY";
static const char __pyx_k_NaN[] = "NaN";
static const char __pyx_k__10[] = ": ";
static const char __pyx_k__11[] = " %";
static const char __pyx_k__12[] = " ";
static const char __pyx_k__13[] = ". ";
static const char __pyx_k__16[] = "*";
static const char __pyx_k__35[] = "_";
static const char __pyx_k__46[] = "?";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_cls[] = "cls";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_int[] = "int";
static const char __pyx_k_msg[] = "msg";
static const char __pyx_k_nan[] = "nan";
static const char __pyx_k_str[] = "str";
static const char __pyx_k_INFO[] = "INFO";
static const char __pyx_k_List[] = "List";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_Pair[] = "Pair";
static const char __pyx_k_Rate[] = "Rate";
static const char __pyx_k_SELL[] = "SELL";
static const char __pyx_k_bool[] = "bool";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_info[] = "info";
static const char __pyx_k_line[] = "line";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_rate[] = "rate";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_DEBUG[] = "DEBUG";
static const char __pyx_k_Tuple[] = "Tuple";
static const char __pyx_k_empty[] = "empty";
static const char __pyx_k_first[] = "first";
static const char __pyx_k_fixed[] = "fixed";
static const char __pyx_k_float[] = "float";
static const char __pyx_k_lines[] = "lines";
static const char __pyx_k_price[] = "price";
static const char __pyx_k_ready[] = "ready";
static const char __pyx_k_round[] = "round";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_Assets[] = "  Assets:";
static const char __pyx_k_Source[] = "Source";
static const char __pyx_k_amount[] = "amount";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_logger[] = "logger";
static const char __pyx_k_market[] = "market";
static const char __pyx_k_name_2[] = "name";
static const char __pyx_k_pandas[] = "pandas";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_return[] = "return";
static const char __pyx_k_second[] = "second";
static const char __pyx_k_source[] = "source";
static const char __pyx_k_typing[] = "typing";
static const char __pyx_k_Decimal[] = "Decimal";
static const char __pyx_k_Markets[] = "  Markets:";
static const char __pyx_k_columns[] = "columns";
static const char __pyx_k_decimal[] = "decimal";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_percent[] = "percent";
static const char __pyx_k_seconds[] = " seconds.";
static const char __pyx_k_warning[] = "warning";
static const char __pyx_k_WARNINGS[] = "  *** WARNINGS ***";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_order_id[] = "order_id";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_CONNECTED[] = "CONNECTED";
static const char __pyx_k_DataFrame[] = "DataFrame";
static const char __pyx_k_OrderBook[] = "OrderBook";
static const char __pyx_k_OrderType[] = "OrderType";
static const char __pyx_k_TradeType[] = "TradeType";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_as_logger[] = "as_logger";
static const char __pyx_k_ask_price[] = "ask_price";
static const char __pyx_k_assets_df[] = "assets_df";
static const char __pyx_k_base_pair[] = "base_pair";
static const char __pyx_k_base_rate[] = "base_rate";
static const char __pyx_k_bid_price[] = "bid_price";
static const char __pyx_k_flat_fees[] = "flat_fees";
static const char __pyx_k_getLogger[] = "getLogger";
static const char __pyx_k_get_price[] = "get_price";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_oracle_df[] = "oracle_df";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_to_string[] = "to_string";
static const char __pyx_k_LimitOrder[] = "LimitOrder";
static const char __pyx_k_RateOracle[] = "RateOracle";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_base_asset[] = "base_asset";
static const char __pyx_k_buy_market[] = "buy_market";
static const char __pyx_k_markets_df[] = "markets_df";
static const char __pyx_k_order_book[] = "order_book";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_quote_pair[] = "quote_pair";
static const char __pyx_k_quote_rate[] = "quote_rate";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_MarketOrder[] = "MarketOrder";
static const char __pyx_k_Resuming_in[] = ". Resuming in ";
static const char __pyx_k_all_markets[] = "all_markets";
static const char __pyx_k_and_sell_of[] = " and sell of ";
static const char __pyx_k_init_params[] = "init_params";
static const char __pyx_k_market_info[] = "market_info";
static const char __pyx_k_market_pair[] = "market_pair";
static const char __pyx_k_quote_asset[] = "quote_asset";
static const char __pyx_k_s_decimal_0[] = "s_decimal_0";
static const char __pyx_k_sell_market[] = "sell_market";
static const char __pyx_k_smart_round[] = "smart_round";
static const char __pyx_k_step_amount[] = "step_amount";
static const char __pyx_k_take_ask_on[] = ", take ask on ";
static const char __pyx_k_take_bid_on[] = "    take bid on ";
static const char __pyx_k_with_amount[] = " with amount ";
static const char __pyx_k_ExchangeBase[] = "ExchangeBase";
static const char __pyx_k_StrategyBase[] = "StrategyBase";
static const char __pyx_k_get_instance[] = "get_instance";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_market_pairs[] = "market_pairs";
static const char __pyx_k_staticmethod[] = "staticmethod";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_trading_pair[] = "trading_pair";
static const char __pyx_k_NetworkStatus[] = "NetworkStatus";
static const char __pyx_k_StopIteration[] = "StopIteration";
static const char __pyx_k_format_status[] = "format_status";
static const char __pyx_k_notify_hb_app[] = "notify_hb_app";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_take_ask_on_2[] = "    take ask on ";
static const char __pyx_k_take_bid_on_2[] = ", take bid on ";
static const char __pyx_k_warning_lines[] = "warning_lines";
static const char __pyx_k_OPTION_LOG_ALL[] = "OPTION_LOG_ALL";
static const char __pyx_k_df_limit_lines[] = "df_limit_lines";
static const char __pyx_k_log_with_clock[] = "log_with_clock";
static const char __pyx_k_network_status[] = "network_status";
static const char __pyx_k_Rate_conversion[] = "  Rate conversion:";
static const char __pyx_k_balance_warning[] = "balance_warning";
static const char __pyx_k_conversion_rate[] = ") conversion rate: ";
static const char __pyx_k_df_market_lines[] = "df_market_lines";
static const char __pyx_k_logging_options[] = "logging_options";
static const char __pyx_k_network_warning[] = "network_warning";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_base_rate_source[] = "base_rate_source";
static const char __pyx_k_oracle_status_df[] = "oracle_status_df";
static const char __pyx_k_ArbitrageStrategy[] = "ArbitrageStrategy";
static const char __pyx_k_Base_asset_needed[] = ". Base asset needed: ";
static const char __pyx_k_and_profitability[] = ", and profitability ";
static const char __pyx_k_base_asset_amount[] = "base_asset_amount";
static const char __pyx_k_min_profitability[] = "min_profitability";
static const char __pyx_k_quote_rate_source[] = "quote_rate_source";
static const char __pyx_k_raw_profitability[] = "raw_profitability";
static const char __pyx_k_PerformanceMetrics[] = "PerformanceMetrics";
static const char __pyx_k_ask_price_adjusted[] = "ask_price_adjusted";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_bid_price_adjusted[] = "bid_price_adjusted";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_ArbitrageMarketPair[] = "ArbitrageMarketPair";
static const char __pyx_k_hb_app_notification[] = "hb_app_notification";
static const char __pyx_k_Pending_limit_orders[] = "  Pending limit orders:";
static const char __pyx_k_bid_ask_price_amount[] = ",bid, ask price, amount: ";
static const char __pyx_k_get_taker_order_type[] = "get_taker_order_type";
static const char __pyx_k_log_conversion_rates[] = "log_conversion_rates";
static const char __pyx_k_ready_for_new_orders[] = "ready_for_new_orders";
static const char __pyx_k_tracked_limit_orders[] = "tracked_limit_orders";
static const char __pyx_k_tracked_market_orders[] = "tracked_market_orders";
static const char __pyx_k_MarketTradingPairTuple[] = "MarketTradingPairTuple";
static const char __pyx_k_failed_order_tolerance[] = "failed_order_tolerance";
static const char __pyx_k_market_conversion_rate[] = "market_conversion_rate";
static const char __pyx_k_order_book_ask_entries[] = "order_book_ask_entries";
static const char __pyx_k_order_book_bid_entries[] = "order_book_bid_entries";
static const char __pyx_k_status_report_interval[] = "status_report_interval";
static const char __pyx_k_No_pending_limit_orders[] = "  No pending limit orders.";
static const char __pyx_k_OPTION_LOG_CREATE_ORDER[] = "OPTION_LOG_CREATE_ORDER";
static const char __pyx_k_buy_market_trading_pair[] = "buy_market_trading_pair";
static const char __pyx_k_tracked_limit_orders_df[] = "tracked_limit_orders_df";
static const char __pyx_k_ArbitrageStrategy_logger[] = "ArbitrageStrategy.logger";
static const char __pyx_k_Limit_order_completed_on[] = "Limit order completed on ";
static const char __pyx_k_List_ArbitrageMarketPair[] = "List[ArbitrageMarketPair]";
static const char __pyx_k_Market_order_canceled_on[] = "Market order canceled on ";
static const char __pyx_k_OPTION_LOG_STATUS_REPORT[] = "OPTION_LOG_STATUS_REPORT";
static const char __pyx_k_market_status_data_frame[] = "market_status_data_frame";
static const char __pyx_k_sell_market_trading_pair[] = "sell_market_trading_pair";
static const char __pyx_k_tracked_market_orders_df[] = "tracked_market_orders_df";
static const char __pyx_k_next_trade_delay_interval[] = "next_trade_delay_interval";
static const char __pyx_k_wallet_balance_data_frame[] = "wallet_balance_data_frame";
static const char __pyx_k_Current_step_profitability[] = ", Current step profitability: ";
static const char __pyx_k_OPTION_LOG_ORDER_COMPLETED[] = "OPTION_LOG_ORDER_COMPLETED";
static const char __pyx_k_Profitability_without_fees[] = "  Profitability(without fees):";
static const char __pyx_k_buy_market_conversion_rate[] = "buy_market_conversion_rate";
static const char __pyx_k_use_oracle_conversion_rate[] = "use_oracle_conversion_rate";
static const char __pyx_k_find_best_profitable_amount[] = "find_best_profitable_amount";
static const char __pyx_k_sell_market_conversion_rate[] = "sell_market_conversion_rate";
static const char __pyx_k_Base_asset_available_balance[] = ". Base asset available balance: ";
static const char __pyx_k_Executing_limit_order_buy_of[] = "Executing limit order buy of ";
static const char __pyx_k_buy_limit_order_completed_on[] = " buy limit order completed on ";
static const char __pyx_k_hummingbot_core_event_events[] = "hummingbot.core.event.events";
static const char __pyx_k_notify_hb_app_with_timestamp[] = "notify_hb_app_with_timestamp";
static const char __pyx_k_ArbitrageStrategy_init_params[] = "ArbitrageStrategy.init_params";
static const char __pyx_k_OPTION_LOG_INSUFFICIENT_ASSET[] = "OPTION_LOG_INSUFFICIENT_ASSET";
static const char __pyx_k_OPTION_LOG_PROFITABILITY_STEP[] = "OPTION_LOG_PROFITABILITY_STEP";
static const char __pyx_k_Quote_asset_available_balance[] = ". Quote asset available balance: ";
static const char __pyx_k_Total_profitability_with_fees[] = "Total profitability with fees: ";
static const char __pyx_k_Tuple_str_Decimal_str_Decimal[] = "Tuple[str, Decimal, str, Decimal]";
static const char __pyx_k_hummingbot_client_performance[] = "hummingbot.client.performance";
static const char __pyx_k_sell_limit_order_completed_on[] = " sell limit order completed on ";
static const char __pyx_k_market_pairs_must_not_be_empty[] = "market_pairs must not be empty.";
static const char __pyx_k_ArbitrageStrategy_format_status[] = "ArbitrageStrategy.format_status";
static const char __pyx_k_ArbitrageStrategy_get_second_to[] = "ArbitrageStrategy.get_second_to_first_conversion_rate";
static const char __pyx_k_ArbitrageStrategy_notify_hb_app[] = "ArbitrageStrategy.notify_hb_app";
static const char __pyx_k_ArbitrageStrategy_oracle_status[] = "ArbitrageStrategy.oracle_status_df";
static const char __pyx_k_ArbitrageStrategy_ready_for_new[] = "ArbitrageStrategy.ready_for_new_orders";
static const char __pyx_k_Cooling_off_from_previous_trade[] = "Cooling off from previous trade on ";
static const char __pyx_k_hummingbot_core_data_type_limit[] = "hummingbot.core.data_type.limit_order";
static const char __pyx_k_hummingbot_core_data_type_order[] = "hummingbot.core.data_type.order_book";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_tracked_limit_orders_data_frame[] = "tracked_limit_orders_data_frame";
static const char __pyx_k_ArbitrageStrategy___reduce_cytho[] = "ArbitrageStrategy.__reduce_cython__";
static const char __pyx_k_ArbitrageStrategy___setstate_cyt[] = "ArbitrageStrategy.__setstate_cython__";
static const char __pyx_k_ArbitrageStrategy_find_best_prof[] = "ArbitrageStrategy.find_best_profitable_amount";
static const char __pyx_k_ArbitrageStrategy_find_profitabl[] = "ArbitrageStrategy.find_profitable_arbitrage_orders";
static const char __pyx_k_ArbitrageStrategy_log_conversion[] = "ArbitrageStrategy.log_conversion_rates";
static const char __pyx_k_ArbitrageStrategy_market_convers[] = "ArbitrageStrategy.market_conversion_rate";
static const char __pyx_k_Cool_off_completed_Arbitrage_str[] = "Cool off completed. Arbitrage strategy is now ready for new orders.";
static const char __pyx_k_Markets_are_not_all_online_No_ar[] = "Markets are not all online. No arbitrage trading is permitted.";
static const char __pyx_k_Markets_are_not_ready_No_arbitra[] = "Markets are not ready. No arbitrage trading is permitted.";
static const char __pyx_k_Markets_are_ready_Trading_starte[] = "Markets are ready. Trading started.";
static const char __pyx_k_Not_enough_asset_to_complete_thi[] = "Not enough asset to complete this step. Quote asset needed: ";
static const char __pyx_k_OPTION_LOG_FULL_PROFITABILITY_ST[] = "OPTION_LOG_FULL_PROFITABILITY_STEP";
static const char __pyx_k_find_profitable_arbitrage_orders[] = "find_profitable_arbitrage_orders";
static const char __pyx_k_get_second_to_first_conversion_r[] = "get_second_to_first_conversion_rate";
static const char __pyx_k_hummingbot_connector_exchange_ba[] = "hummingbot.connector.exchange_base";
static const char __pyx_k_hummingbot_core_data_type_market[] = "hummingbot.core.data_type.market_order";
static const char __pyx_k_hummingbot_core_network_iterator[] = "hummingbot.core.network_iterator";
static const char __pyx_k_hummingbot_core_rate_oracle_rate[] = "hummingbot.core.rate_oracle.rate_oracle";
static const char __pyx_k_hummingbot_strategy_arbitrage_ar[] = "hummingbot.strategy.arbitrage.arbitrage_market_pair";
static const char __pyx_k_hummingbot_strategy_market_tradi[] = "hummingbot.strategy.market_trading_pair_tuple";
static const char __pyx_k_hummingbot_strategy_strategy_bas[] = "hummingbot.strategy.strategy_base";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_secondary_to_primary_base_conver[] = "secondary_to_primary_base_conversion_rate";
static const char __pyx_k_secondary_to_primary_quote_conve[] = "secondary_to_primary_quote_conversion_rate";
static const char __pyx_k_self__events_cannot_be_converted[] = "self._events cannot be converted to a Python object for pickling";
static const char __pyx_k_tracked_market_orders_data_frame[] = "tracked_market_orders_data_frame";
static const char __pyx_k_hummingbot_strategy_arbitrage_ar_2[] = "hummingbot\\strategy\\arbitrage\\arbitrage.pyx";
static const char __pyx_k_hummingbot_strategy_arbitrage_ar_3[] = "hummingbot.strategy.arbitrage.arbitrage";
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_kp_u_1;
static PyObject *__pyx_kp_u_8f;
static PyObject *__pyx_n_s_ArbitrageMarketPair;
static PyObject *__pyx_n_s_ArbitrageStrategy;
static PyObject *__pyx_n_s_ArbitrageStrategy___reduce_cytho;
static PyObject *__pyx_n_s_ArbitrageStrategy___setstate_cyt;
static PyObject *__pyx_n_s_ArbitrageStrategy_find_best_prof;
static PyObject *__pyx_n_s_ArbitrageStrategy_find_profitabl;
static PyObject *__pyx_n_s_ArbitrageStrategy_format_status;
static PyObject *__pyx_n_s_ArbitrageStrategy_get_second_to;
static PyObject *__pyx_n_s_ArbitrageStrategy_init_params;
static PyObject *__pyx_n_s_ArbitrageStrategy_log_conversion;
static PyObject *__pyx_n_s_ArbitrageStrategy_logger;
static PyObject *__pyx_n_s_ArbitrageStrategy_market_convers;
static PyObject *__pyx_n_s_ArbitrageStrategy_notify_hb_app;
static PyObject *__pyx_n_s_ArbitrageStrategy_oracle_status;
static PyObject *__pyx_n_s_ArbitrageStrategy_ready_for_new;
static PyObject *__pyx_kp_u_Assets;
static PyObject *__pyx_n_s_BUY;
static PyObject *__pyx_kp_u_Base_asset_available_balance;
static PyObject *__pyx_kp_u_Base_asset_needed;
static PyObject *__pyx_n_s_CONNECTED;
static PyObject *__pyx_kp_u_Cool_off_completed_Arbitrage_str;
static PyObject *__pyx_kp_u_Cooling_off_from_previous_trade;
static PyObject *__pyx_kp_u_Current_step_profitability;
static PyObject *__pyx_n_s_DEBUG;
static PyObject *__pyx_n_s_DataFrame;
static PyObject *__pyx_n_s_Decimal;
static PyObject *__pyx_n_s_ExchangeBase;
static PyObject *__pyx_kp_u_Executing_limit_order_buy_of;
static PyObject *__pyx_n_s_INFO;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_s_LimitOrder;
static PyObject *__pyx_kp_u_Limit_order_completed_on;
static PyObject *__pyx_n_s_List;
static PyObject *__pyx_kp_s_List_ArbitrageMarketPair;
static PyObject *__pyx_n_s_MarketOrder;
static PyObject *__pyx_n_s_MarketTradingPairTuple;
static PyObject *__pyx_kp_u_Market_order_canceled_on;
static PyObject *__pyx_kp_u_Markets;
static PyObject *__pyx_kp_u_Markets_are_not_all_online_No_ar;
static PyObject *__pyx_kp_u_Markets_are_not_ready_No_arbitra;
static PyObject *__pyx_kp_u_Markets_are_ready_Trading_starte;
static PyObject *__pyx_n_s_NaN;
static PyObject *__pyx_n_s_NetworkStatus;
static PyObject *__pyx_kp_u_No_pending_limit_orders;
static PyObject *__pyx_kp_u_None;
static PyObject *__pyx_kp_u_Not_enough_asset_to_complete_thi;
static PyObject *__pyx_n_s_OPTION_LOG_ALL;
static PyObject *__pyx_n_s_OPTION_LOG_CREATE_ORDER;
static PyObject *__pyx_n_s_OPTION_LOG_FULL_PROFITABILITY_ST;
static PyObject *__pyx_n_s_OPTION_LOG_INSUFFICIENT_ASSET;
static PyObject *__pyx_n_s_OPTION_LOG_ORDER_COMPLETED;
static PyObject *__pyx_n_s_OPTION_LOG_PROFITABILITY_STEP;
static PyObject *__pyx_n_s_OPTION_LOG_STATUS_REPORT;
static PyObject *__pyx_n_s_OrderBook;
static PyObject *__pyx_n_s_OrderType;
static PyObject *__pyx_n_u_Pair;
static PyObject *__pyx_kp_u_Pending_limit_orders;
static PyObject *__pyx_n_s_PerformanceMetrics;
static PyObject *__pyx_kp_u_Profitability_without_fees;
static PyObject *__pyx_kp_u_Quote_asset_available_balance;
static PyObject *__pyx_n_u_Rate;
static PyObject *__pyx_n_s_RateOracle;
static PyObject *__pyx_kp_u_Rate_conversion;
static PyObject *__pyx_kp_u_Resuming_in;
static PyObject *__pyx_n_s_SELL;
static PyObject *__pyx_n_u_Source;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_n_s_StrategyBase;
static PyObject *__pyx_kp_u_Total_profitability_with_fees;
static PyObject *__pyx_n_s_TradeType;
static PyObject *__pyx_n_s_Tuple;
static PyObject *__pyx_kp_s_Tuple_str_Decimal_str_Decimal;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u_WARNINGS;
static PyObject *__pyx_kp_u__10;
static PyObject *__pyx_kp_u__11;
static PyObject *__pyx_kp_u__12;
static PyObject *__pyx_kp_u__13;
static PyObject *__pyx_n_s__16;
static PyObject *__pyx_n_s__35;
static PyObject *__pyx_n_s__46;
static PyObject *__pyx_kp_u__5;
static PyObject *__pyx_kp_u__6;
static PyObject *__pyx_kp_u__7;
static PyObject *__pyx_kp_u__8;
static PyObject *__pyx_kp_u__9;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_all_markets;
static PyObject *__pyx_n_s_amount;
static PyObject *__pyx_kp_u_and_profitability;
static PyObject *__pyx_kp_u_and_sell_of;
static PyObject *__pyx_n_s_as_logger;
static PyObject *__pyx_n_u_ask_price;
static PyObject *__pyx_n_u_ask_price_adjusted;
static PyObject *__pyx_n_s_assets_df;
static PyObject *__pyx_n_s_asyncio_coroutines;
static PyObject *__pyx_kp_u_at;
static PyObject *__pyx_n_s_balance_warning;
static PyObject *__pyx_n_s_base_asset;
static PyObject *__pyx_n_s_base_asset_amount;
static PyObject *__pyx_n_s_base_pair;
static PyObject *__pyx_n_s_base_rate;
static PyObject *__pyx_n_s_base_rate_source;
static PyObject *__pyx_kp_u_bid_ask_price_amount;
static PyObject *__pyx_n_u_bid_price;
static PyObject *__pyx_n_u_bid_price_adjusted;
static PyObject *__pyx_n_s_bool;
static PyObject *__pyx_kp_u_buy_limit_order_completed_on;
static PyObject *__pyx_n_s_buy_market;
static PyObject *__pyx_n_s_buy_market_conversion_rate;
static PyObject *__pyx_n_s_buy_market_trading_pair;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_cls;
static PyObject *__pyx_n_s_columns;
static PyObject *__pyx_kp_u_conversion_rate;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_decimal;
static PyObject *__pyx_n_s_df_limit_lines;
static PyObject *__pyx_n_s_df_market_lines;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_kp_u_disable;
static PyObject *__pyx_n_s_empty;
static PyObject *__pyx_kp_u_enable;
static PyObject *__pyx_n_s_failed_order_tolerance;
static PyObject *__pyx_n_s_find_best_profitable_amount;
static PyObject *__pyx_n_s_find_profitable_arbitrage_orders;
static PyObject *__pyx_n_s_first;
static PyObject *__pyx_n_u_fixed;
static PyObject *__pyx_n_s_flat_fees;
static PyObject *__pyx_n_s_float;
static PyObject *__pyx_n_s_format_status;
static PyObject *__pyx_kp_u_gc;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_n_s_get_instance;
static PyObject *__pyx_n_s_get_price;
static PyObject *__pyx_n_s_get_second_to_first_conversion_r;
static PyObject *__pyx_n_s_get_taker_order_type;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_hb_app_notification;
static PyObject *__pyx_n_s_hummingbot_client_performance;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_ba;
static PyObject *__pyx_n_s_hummingbot_core_data_type_limit;
static PyObject *__pyx_n_s_hummingbot_core_data_type_market;
static PyObject *__pyx_n_s_hummingbot_core_data_type_order;
static PyObject *__pyx_n_s_hummingbot_core_event_events;
static PyObject *__pyx_n_s_hummingbot_core_network_iterator;
static PyObject *__pyx_n_s_hummingbot_core_rate_oracle_rate;
static PyObject *__pyx_n_s_hummingbot_strategy_arbitrage_ar;
static PyObject *__pyx_kp_s_hummingbot_strategy_arbitrage_ar_2;
static PyObject *__pyx_n_s_hummingbot_strategy_arbitrage_ar_3;
static PyObject *__pyx_n_s_hummingbot_strategy_market_tradi;
static PyObject *__pyx_n_s_hummingbot_strategy_strategy_bas;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_info;
static PyObject *__pyx_n_s_init_params;
static PyObject *__pyx_n_s_initializing;
static PyObject *__pyx_n_s_int;
static PyObject *__pyx_n_s_is_coroutine;
static PyObject *__pyx_kp_u_isenabled;
static PyObject *__pyx_n_s_line;
static PyObject *__pyx_n_s_lines;
static PyObject *__pyx_n_s_log_conversion_rates;
static PyObject *__pyx_n_s_log_with_clock;
static PyObject *__pyx_n_s_logger;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_logging_options;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_market;
static PyObject *__pyx_n_s_market_conversion_rate;
static PyObject *__pyx_n_s_market_info;
static PyObject *__pyx_n_s_market_pair;
static PyObject *__pyx_n_s_market_pairs;
static PyObject *__pyx_kp_u_market_pairs_must_not_be_empty;
static PyObject *__pyx_n_s_market_status_data_frame;
static PyObject *__pyx_n_s_markets_df;
static PyObject *__pyx_n_s_min_profitability;
static PyObject *__pyx_n_s_msg;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_u_nan;
static PyObject *__pyx_n_s_network_status;
static PyObject *__pyx_n_s_network_warning;
static PyObject *__pyx_n_s_next_trade_delay_interval;
static PyObject *__pyx_n_s_notify_hb_app;
static PyObject *__pyx_n_s_notify_hb_app_with_timestamp;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_oracle_df;
static PyObject *__pyx_n_s_oracle_status_df;
static PyObject *__pyx_n_s_order_book;
static PyObject *__pyx_n_s_order_book_ask_entries;
static PyObject *__pyx_n_s_order_book_bid_entries;
static PyObject *__pyx_n_s_order_id;
static PyObject *__pyx_n_s_pandas;
static PyObject *__pyx_n_s_pd;
static PyObject *__pyx_n_s_percent;
static PyObject *__pyx_n_s_price;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_quote_asset;
static PyObject *__pyx_n_s_quote_pair;
static PyObject *__pyx_n_s_quote_rate;
static PyObject *__pyx_n_s_quote_rate_source;
static PyObject *__pyx_n_s_rate;
static PyObject *__pyx_n_u_raw_profitability;
static PyObject *__pyx_n_s_ready;
static PyObject *__pyx_n_s_ready_for_new_orders;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_return;
static PyObject *__pyx_n_s_round;
static PyObject *__pyx_n_s_s_decimal_0;
static PyObject *__pyx_n_s_second;
static PyObject *__pyx_n_s_secondary_to_primary_base_conver;
static PyObject *__pyx_n_s_secondary_to_primary_quote_conve;
static PyObject *__pyx_kp_u_seconds;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_kp_s_self__events_cannot_be_converted;
static PyObject *__pyx_kp_u_sell_limit_order_completed_on;
static PyObject *__pyx_n_s_sell_market;
static PyObject *__pyx_n_s_sell_market_conversion_rate;
static PyObject *__pyx_n_s_sell_market_trading_pair;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_smart_round;
static PyObject *__pyx_n_s_source;
static PyObject *__pyx_n_s_spec;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_status_report_interval;
static PyObject *__pyx_n_u_step_amount;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_kp_u_take_ask_on;
static PyObject *__pyx_kp_u_take_ask_on_2;
static PyObject *__pyx_kp_u_take_bid_on;
static PyObject *__pyx_kp_u_take_bid_on_2;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_to_string;
static PyObject *__pyx_n_s_tracked_limit_orders;
static PyObject *__pyx_n_s_tracked_limit_orders_data_frame;
static PyObject *__pyx_n_s_tracked_limit_orders_df;
static PyObject *__pyx_n_s_tracked_market_orders;
static PyObject *__pyx_n_s_tracked_market_orders_data_frame;
static PyObject *__pyx_n_s_tracked_market_orders_df;
static PyObject *__pyx_n_s_trading_pair;
static PyObject *__pyx_n_s_typing;
static PyObject *__pyx_n_s_use_oracle_conversion_rate;
static PyObject *__pyx_n_s_wallet_balance_data_frame;
static PyObject *__pyx_n_s_warning;
static PyObject *__pyx_n_s_warning_lines;
static PyObject *__pyx_kp_u_with_amount;
#endif
/* #### Code section: decls ### */
static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_logger(CYTHON_UNUSED PyTypeObject *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_2init_params(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_market_pairs, PyObject *__pyx_v_min_profitability, PyObject *__pyx_v_logging_options, double __pyx_v_status_report_interval, double __pyx_v_next_trade_delay_interval, PyObject *__pyx_v_failed_order_tolerance, PyObject *__pyx_v_use_oracle_conversion_rate, PyObject *__pyx_v_secondary_to_primary_base_conversion_rate, PyObject *__pyx_v_secondary_to_primary_quote_conversion_rate, PyObject *__pyx_v_hb_app_notification); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_17min_profitability___get__(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_26use_oracle_conversion_rate___get__(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_20tracked_limit_orders___get__(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_21tracked_market_orders___get__(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_31tracked_limit_orders_data_frame___get__(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_32tracked_market_orders_data_frame___get__(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_4get_second_to_first_conversion_rate(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_6log_conversion_rates(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_8oracle_status_df(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_10format_status(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_12notify_hb_app(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_msg); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_14find_profitable_arbitrage_orders(PyObject *__pyx_v_min_profitability, PyObject *__pyx_v_buy_market_trading_pair, PyObject *__pyx_v_sell_market_trading_pair, PyObject *__pyx_v_buy_market_conversion_rate, PyObject *__pyx_v_sell_market_conversion_rate); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_16market_conversion_rate(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_market_info); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_18find_best_profitable_amount(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_buy_market, PyObject *__pyx_v_sell_market); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_20ready_for_new_orders(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, 0, 0, 0, 0};
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_float_15_0;
static PyObject *__pyx_float_60_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_16;
static PyObject *__pyx_int_32;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_1152921504606846975;
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_k_;
static PyObject *__pyx_k__2;
static PyObject *__pyx_k__3;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__24;
static PyObject *__pyx_codeobj__26;
static PyObject *__pyx_codeobj__28;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
#endif
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_6pubsub_PubSub;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult;
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  PyTypeObject *__pyx_ptype_5numpy_dtype;
  PyTypeObject *__pyx_ptype_5numpy_flatiter;
  PyTypeObject *__pyx_ptype_5numpy_broadcast;
  PyTypeObject *__pyx_ptype_5numpy_ndarray;
  PyTypeObject *__pyx_ptype_5numpy_generic;
  PyTypeObject *__pyx_ptype_5numpy_number;
  PyTypeObject *__pyx_ptype_5numpy_integer;
  PyTypeObject *__pyx_ptype_5numpy_signedinteger;
  PyTypeObject *__pyx_ptype_5numpy_unsignedinteger;
  PyTypeObject *__pyx_ptype_5numpy_inexact;
  PyTypeObject *__pyx_ptype_5numpy_floating;
  PyTypeObject *__pyx_ptype_5numpy_complexfloating;
  PyTypeObject *__pyx_ptype_5numpy_flexible;
  PyTypeObject *__pyx_ptype_5numpy_character;
  PyTypeObject *__pyx_ptype_5numpy_ufunc;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5clock_Clock;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy;
  PyObject *__pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy;
  PyObject *__pyx_kp_u_1;
  PyObject *__pyx_kp_u_8f;
  PyObject *__pyx_n_s_ArbitrageMarketPair;
  PyObject *__pyx_n_s_ArbitrageStrategy;
  PyObject *__pyx_n_s_ArbitrageStrategy___reduce_cytho;
  PyObject *__pyx_n_s_ArbitrageStrategy___setstate_cyt;
  PyObject *__pyx_n_s_ArbitrageStrategy_find_best_prof;
  PyObject *__pyx_n_s_ArbitrageStrategy_find_profitabl;
  PyObject *__pyx_n_s_ArbitrageStrategy_format_status;
  PyObject *__pyx_n_s_ArbitrageStrategy_get_second_to;
  PyObject *__pyx_n_s_ArbitrageStrategy_init_params;
  PyObject *__pyx_n_s_ArbitrageStrategy_log_conversion;
  PyObject *__pyx_n_s_ArbitrageStrategy_logger;
  PyObject *__pyx_n_s_ArbitrageStrategy_market_convers;
  PyObject *__pyx_n_s_ArbitrageStrategy_notify_hb_app;
  PyObject *__pyx_n_s_ArbitrageStrategy_oracle_status;
  PyObject *__pyx_n_s_ArbitrageStrategy_ready_for_new;
  PyObject *__pyx_kp_u_Assets;
  PyObject *__pyx_n_s_BUY;
  PyObject *__pyx_kp_u_Base_asset_available_balance;
  PyObject *__pyx_kp_u_Base_asset_needed;
  PyObject *__pyx_n_s_CONNECTED;
  PyObject *__pyx_kp_u_Cool_off_completed_Arbitrage_str;
  PyObject *__pyx_kp_u_Cooling_off_from_previous_trade;
  PyObject *__pyx_kp_u_Current_step_profitability;
  PyObject *__pyx_n_s_DEBUG;
  PyObject *__pyx_n_s_DataFrame;
  PyObject *__pyx_n_s_Decimal;
  PyObject *__pyx_n_s_ExchangeBase;
  PyObject *__pyx_kp_u_Executing_limit_order_buy_of;
  PyObject *__pyx_n_s_INFO;
  PyObject *__pyx_n_s_ImportError;
  PyObject *__pyx_n_s_LimitOrder;
  PyObject *__pyx_kp_u_Limit_order_completed_on;
  PyObject *__pyx_n_s_List;
  PyObject *__pyx_kp_s_List_ArbitrageMarketPair;
  PyObject *__pyx_n_s_MarketOrder;
  PyObject *__pyx_n_s_MarketTradingPairTuple;
  PyObject *__pyx_kp_u_Market_order_canceled_on;
  PyObject *__pyx_kp_u_Markets;
  PyObject *__pyx_kp_u_Markets_are_not_all_online_No_ar;
  PyObject *__pyx_kp_u_Markets_are_not_ready_No_arbitra;
  PyObject *__pyx_kp_u_Markets_are_ready_Trading_starte;
  PyObject *__pyx_n_s_NaN;
  PyObject *__pyx_n_s_NetworkStatus;
  PyObject *__pyx_kp_u_No_pending_limit_orders;
  PyObject *__pyx_kp_u_None;
  PyObject *__pyx_kp_u_Not_enough_asset_to_complete_thi;
  PyObject *__pyx_n_s_OPTION_LOG_ALL;
  PyObject *__pyx_n_s_OPTION_LOG_CREATE_ORDER;
  PyObject *__pyx_n_s_OPTION_LOG_FULL_PROFITABILITY_ST;
  PyObject *__pyx_n_s_OPTION_LOG_INSUFFICIENT_ASSET;
  PyObject *__pyx_n_s_OPTION_LOG_ORDER_COMPLETED;
  PyObject *__pyx_n_s_OPTION_LOG_PROFITABILITY_STEP;
  PyObject *__pyx_n_s_OPTION_LOG_STATUS_REPORT;
  PyObject *__pyx_n_s_OrderBook;
  PyObject *__pyx_n_s_OrderType;
  PyObject *__pyx_n_u_Pair;
  PyObject *__pyx_kp_u_Pending_limit_orders;
  PyObject *__pyx_n_s_PerformanceMetrics;
  PyObject *__pyx_kp_u_Profitability_without_fees;
  PyObject *__pyx_kp_u_Quote_asset_available_balance;
  PyObject *__pyx_n_u_Rate;
  PyObject *__pyx_n_s_RateOracle;
  PyObject *__pyx_kp_u_Rate_conversion;
  PyObject *__pyx_kp_u_Resuming_in;
  PyObject *__pyx_n_s_SELL;
  PyObject *__pyx_n_u_Source;
  PyObject *__pyx_n_s_StopIteration;
  PyObject *__pyx_n_s_StrategyBase;
  PyObject *__pyx_kp_u_Total_profitability_with_fees;
  PyObject *__pyx_n_s_TradeType;
  PyObject *__pyx_n_s_Tuple;
  PyObject *__pyx_kp_s_Tuple_str_Decimal_str_Decimal;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_kp_u_WARNINGS;
  PyObject *__pyx_kp_u__10;
  PyObject *__pyx_kp_u__11;
  PyObject *__pyx_kp_u__12;
  PyObject *__pyx_kp_u__13;
  PyObject *__pyx_n_s__16;
  PyObject *__pyx_n_s__35;
  PyObject *__pyx_n_s__46;
  PyObject *__pyx_kp_u__5;
  PyObject *__pyx_kp_u__6;
  PyObject *__pyx_kp_u__7;
  PyObject *__pyx_kp_u__8;
  PyObject *__pyx_kp_u__9;
  PyObject *__pyx_n_s_all;
  PyObject *__pyx_n_s_all_markets;
  PyObject *__pyx_n_s_amount;
  PyObject *__pyx_kp_u_and_profitability;
  PyObject *__pyx_kp_u_and_sell_of;
  PyObject *__pyx_n_s_as_logger;
  PyObject *__pyx_n_u_ask_price;
  PyObject *__pyx_n_u_ask_price_adjusted;
  PyObject *__pyx_n_s_assets_df;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_kp_u_at;
  PyObject *__pyx_n_s_balance_warning;
  PyObject *__pyx_n_s_base_asset;
  PyObject *__pyx_n_s_base_asset_amount;
  PyObject *__pyx_n_s_base_pair;
  PyObject *__pyx_n_s_base_rate;
  PyObject *__pyx_n_s_base_rate_source;
  PyObject *__pyx_kp_u_bid_ask_price_amount;
  PyObject *__pyx_n_u_bid_price;
  PyObject *__pyx_n_u_bid_price_adjusted;
  PyObject *__pyx_n_s_bool;
  PyObject *__pyx_kp_u_buy_limit_order_completed_on;
  PyObject *__pyx_n_s_buy_market;
  PyObject *__pyx_n_s_buy_market_conversion_rate;
  PyObject *__pyx_n_s_buy_market_trading_pair;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_cls;
  PyObject *__pyx_n_s_columns;
  PyObject *__pyx_kp_u_conversion_rate;
  PyObject *__pyx_n_s_data;
  PyObject *__pyx_n_s_decimal;
  PyObject *__pyx_n_s_df_limit_lines;
  PyObject *__pyx_n_s_df_market_lines;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_empty;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_failed_order_tolerance;
  PyObject *__pyx_n_s_find_best_profitable_amount;
  PyObject *__pyx_n_s_find_profitable_arbitrage_orders;
  PyObject *__pyx_n_s_first;
  PyObject *__pyx_n_u_fixed;
  PyObject *__pyx_n_s_flat_fees;
  PyObject *__pyx_n_s_float;
  PyObject *__pyx_n_s_format_status;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_get;
  PyObject *__pyx_n_s_getLogger;
  PyObject *__pyx_n_s_get_instance;
  PyObject *__pyx_n_s_get_price;
  PyObject *__pyx_n_s_get_second_to_first_conversion_r;
  PyObject *__pyx_n_s_get_taker_order_type;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_hb_app_notification;
  PyObject *__pyx_n_s_hummingbot_client_performance;
  PyObject *__pyx_n_s_hummingbot_connector_exchange_ba;
  PyObject *__pyx_n_s_hummingbot_core_data_type_limit;
  PyObject *__pyx_n_s_hummingbot_core_data_type_market;
  PyObject *__pyx_n_s_hummingbot_core_data_type_order;
  PyObject *__pyx_n_s_hummingbot_core_event_events;
  PyObject *__pyx_n_s_hummingbot_core_network_iterator;
  PyObject *__pyx_n_s_hummingbot_core_rate_oracle_rate;
  PyObject *__pyx_n_s_hummingbot_strategy_arbitrage_ar;
  PyObject *__pyx_kp_s_hummingbot_strategy_arbitrage_ar_2;
  PyObject *__pyx_n_s_hummingbot_strategy_arbitrage_ar_3;
  PyObject *__pyx_n_s_hummingbot_strategy_market_tradi;
  PyObject *__pyx_n_s_hummingbot_strategy_strategy_bas;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_info;
  PyObject *__pyx_n_s_init_params;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_int;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_line;
  PyObject *__pyx_n_s_lines;
  PyObject *__pyx_n_s_log_conversion_rates;
  PyObject *__pyx_n_s_log_with_clock;
  PyObject *__pyx_n_s_logger;
  PyObject *__pyx_n_s_logging;
  PyObject *__pyx_n_s_logging_options;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_market;
  PyObject *__pyx_n_s_market_conversion_rate;
  PyObject *__pyx_n_s_market_info;
  PyObject *__pyx_n_s_market_pair;
  PyObject *__pyx_n_s_market_pairs;
  PyObject *__pyx_kp_u_market_pairs_must_not_be_empty;
  PyObject *__pyx_n_s_market_status_data_frame;
  PyObject *__pyx_n_s_markets_df;
  PyObject *__pyx_n_s_min_profitability;
  PyObject *__pyx_n_s_msg;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_name_2;
  PyObject *__pyx_n_u_nan;
  PyObject *__pyx_n_s_network_status;
  PyObject *__pyx_n_s_network_warning;
  PyObject *__pyx_n_s_next_trade_delay_interval;
  PyObject *__pyx_n_s_notify_hb_app;
  PyObject *__pyx_n_s_notify_hb_app_with_timestamp;
  PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
  PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
  PyObject *__pyx_n_s_oracle_df;
  PyObject *__pyx_n_s_oracle_status_df;
  PyObject *__pyx_n_s_order_book;
  PyObject *__pyx_n_s_order_book_ask_entries;
  PyObject *__pyx_n_s_order_book_bid_entries;
  PyObject *__pyx_n_s_order_id;
  PyObject *__pyx_n_s_pandas;
  PyObject *__pyx_n_s_pd;
  PyObject *__pyx_n_s_percent;
  PyObject *__pyx_n_s_price;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_quote_asset;
  PyObject *__pyx_n_s_quote_pair;
  PyObject *__pyx_n_s_quote_rate;
  PyObject *__pyx_n_s_quote_rate_source;
  PyObject *__pyx_n_s_rate;
  PyObject *__pyx_n_u_raw_profitability;
  PyObject *__pyx_n_s_ready;
  PyObject *__pyx_n_s_ready_for_new_orders;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_return;
  PyObject *__pyx_n_s_round;
  PyObject *__pyx_n_s_s_decimal_0;
  PyObject *__pyx_n_s_second;
  PyObject *__pyx_n_s_secondary_to_primary_base_conver;
  PyObject *__pyx_n_s_secondary_to_primary_quote_conve;
  PyObject *__pyx_kp_u_seconds;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_self__events_cannot_be_converted;
  PyObject *__pyx_kp_u_sell_limit_order_completed_on;
  PyObject *__pyx_n_s_sell_market;
  PyObject *__pyx_n_s_sell_market_conversion_rate;
  PyObject *__pyx_n_s_sell_market_trading_pair;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_smart_round;
  PyObject *__pyx_n_s_source;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_split;
  PyObject *__pyx_n_s_staticmethod;
  PyObject *__pyx_n_s_status_report_interval;
  PyObject *__pyx_n_u_step_amount;
  PyObject *__pyx_n_s_str;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_kp_u_take_ask_on;
  PyObject *__pyx_kp_u_take_ask_on_2;
  PyObject *__pyx_kp_u_take_bid_on;
  PyObject *__pyx_kp_u_take_bid_on_2;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_to_string;
  PyObject *__pyx_n_s_tracked_limit_orders;
  PyObject *__pyx_n_s_tracked_limit_orders_data_frame;
  PyObject *__pyx_n_s_tracked_limit_orders_df;
  PyObject *__pyx_n_s_tracked_market_orders;
  PyObject *__pyx_n_s_tracked_market_orders_data_frame;
  PyObject *__pyx_n_s_tracked_market_orders_df;
  PyObject *__pyx_n_s_trading_pair;
  PyObject *__pyx_n_s_typing;
  PyObject *__pyx_n_s_use_oracle_conversion_rate;
  PyObject *__pyx_n_s_wallet_balance_data_frame;
  PyObject *__pyx_n_s_warning;
  PyObject *__pyx_n_s_warning_lines;
  PyObject *__pyx_kp_u_with_amount;
  PyObject *__pyx_float_15_0;
  PyObject *__pyx_float_60_0;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_2;
  PyObject *__pyx_int_4;
  PyObject *__pyx_int_8;
  PyObject *__pyx_int_16;
  PyObject *__pyx_int_32;
  PyObject *__pyx_int_100;
  PyObject *__pyx_int_1152921504606846975;
  PyObject *__pyx_k_;
  PyObject *__pyx_k__2;
  PyObject *__pyx_k__3;
  PyObject *__pyx_tuple__4;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__15;
  PyObject *__pyx_tuple__17;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__21;
  PyObject *__pyx_tuple__23;
  PyObject *__pyx_tuple__25;
  PyObject *__pyx_tuple__27;
  PyObject *__pyx_tuple__29;
  PyObject *__pyx_tuple__31;
  PyObject *__pyx_tuple__33;
  PyObject *__pyx_tuple__36;
  PyObject *__pyx_tuple__38;
  PyObject *__pyx_tuple__40;
  PyObject *__pyx_tuple__42;
  PyObject *__pyx_tuple__44;
  PyObject *__pyx_codeobj__19;
  PyObject *__pyx_codeobj__22;
  PyObject *__pyx_codeobj__24;
  PyObject *__pyx_codeobj__26;
  PyObject *__pyx_codeobj__28;
  PyObject *__pyx_codeobj__30;
  PyObject *__pyx_codeobj__32;
  PyObject *__pyx_codeobj__34;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__39;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__43;
  PyObject *__pyx_codeobj__45;
} __pyx_mstate;

#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_6pubsub_PubSub);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_dtype);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flatiter);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_broadcast);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ndarray);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_generic);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_number);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_integer);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_inexact);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_floating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flexible);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_character);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ufunc);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5clock_Clock);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_1);
  Py_CLEAR(clear_module_state->__pyx_kp_u_8f);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArbitrageMarketPair);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArbitrageStrategy);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArbitrageStrategy___reduce_cytho);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArbitrageStrategy___setstate_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArbitrageStrategy_find_best_prof);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArbitrageStrategy_find_profitabl);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArbitrageStrategy_format_status);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArbitrageStrategy_get_second_to);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArbitrageStrategy_init_params);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArbitrageStrategy_log_conversion);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArbitrageStrategy_logger);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArbitrageStrategy_market_convers);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArbitrageStrategy_notify_hb_app);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArbitrageStrategy_oracle_status);
  Py_CLEAR(clear_module_state->__pyx_n_s_ArbitrageStrategy_ready_for_new);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Assets);
  Py_CLEAR(clear_module_state->__pyx_n_s_BUY);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Base_asset_available_balance);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Base_asset_needed);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONNECTED);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Cool_off_completed_Arbitrage_str);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Cooling_off_from_previous_trade);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Current_step_profitability);
  Py_CLEAR(clear_module_state->__pyx_n_s_DEBUG);
  Py_CLEAR(clear_module_state->__pyx_n_s_DataFrame);
  Py_CLEAR(clear_module_state->__pyx_n_s_Decimal);
  Py_CLEAR(clear_module_state->__pyx_n_s_ExchangeBase);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Executing_limit_order_buy_of);
  Py_CLEAR(clear_module_state->__pyx_n_s_INFO);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImportError);
  Py_CLEAR(clear_module_state->__pyx_n_s_LimitOrder);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Limit_order_completed_on);
  Py_CLEAR(clear_module_state->__pyx_n_s_List);
  Py_CLEAR(clear_module_state->__pyx_kp_s_List_ArbitrageMarketPair);
  Py_CLEAR(clear_module_state->__pyx_n_s_MarketOrder);
  Py_CLEAR(clear_module_state->__pyx_n_s_MarketTradingPairTuple);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Market_order_canceled_on);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Markets);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Markets_are_not_all_online_No_ar);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Markets_are_not_ready_No_arbitra);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Markets_are_ready_Trading_starte);
  Py_CLEAR(clear_module_state->__pyx_n_s_NaN);
  Py_CLEAR(clear_module_state->__pyx_n_s_NetworkStatus);
  Py_CLEAR(clear_module_state->__pyx_kp_u_No_pending_limit_orders);
  Py_CLEAR(clear_module_state->__pyx_kp_u_None);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Not_enough_asset_to_complete_thi);
  Py_CLEAR(clear_module_state->__pyx_n_s_OPTION_LOG_ALL);
  Py_CLEAR(clear_module_state->__pyx_n_s_OPTION_LOG_CREATE_ORDER);
  Py_CLEAR(clear_module_state->__pyx_n_s_OPTION_LOG_FULL_PROFITABILITY_ST);
  Py_CLEAR(clear_module_state->__pyx_n_s_OPTION_LOG_INSUFFICIENT_ASSET);
  Py_CLEAR(clear_module_state->__pyx_n_s_OPTION_LOG_ORDER_COMPLETED);
  Py_CLEAR(clear_module_state->__pyx_n_s_OPTION_LOG_PROFITABILITY_STEP);
  Py_CLEAR(clear_module_state->__pyx_n_s_OPTION_LOG_STATUS_REPORT);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderBook);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderType);
  Py_CLEAR(clear_module_state->__pyx_n_u_Pair);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Pending_limit_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_PerformanceMetrics);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Profitability_without_fees);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Quote_asset_available_balance);
  Py_CLEAR(clear_module_state->__pyx_n_u_Rate);
  Py_CLEAR(clear_module_state->__pyx_n_s_RateOracle);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Rate_conversion);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Resuming_in);
  Py_CLEAR(clear_module_state->__pyx_n_s_SELL);
  Py_CLEAR(clear_module_state->__pyx_n_u_Source);
  Py_CLEAR(clear_module_state->__pyx_n_s_StopIteration);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Total_profitability_with_fees);
  Py_CLEAR(clear_module_state->__pyx_n_s_TradeType);
  Py_CLEAR(clear_module_state->__pyx_n_s_Tuple);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Tuple_str_Decimal_str_Decimal);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_WARNINGS);
  Py_CLEAR(clear_module_state->__pyx_kp_u__10);
  Py_CLEAR(clear_module_state->__pyx_kp_u__11);
  Py_CLEAR(clear_module_state->__pyx_kp_u__12);
  Py_CLEAR(clear_module_state->__pyx_kp_u__13);
  Py_CLEAR(clear_module_state->__pyx_n_s__16);
  Py_CLEAR(clear_module_state->__pyx_n_s__35);
  Py_CLEAR(clear_module_state->__pyx_n_s__46);
  Py_CLEAR(clear_module_state->__pyx_kp_u__5);
  Py_CLEAR(clear_module_state->__pyx_kp_u__6);
  Py_CLEAR(clear_module_state->__pyx_kp_u__7);
  Py_CLEAR(clear_module_state->__pyx_kp_u__8);
  Py_CLEAR(clear_module_state->__pyx_kp_u__9);
  Py_CLEAR(clear_module_state->__pyx_n_s_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_all_markets);
  Py_CLEAR(clear_module_state->__pyx_n_s_amount);
  Py_CLEAR(clear_module_state->__pyx_kp_u_and_profitability);
  Py_CLEAR(clear_module_state->__pyx_kp_u_and_sell_of);
  Py_CLEAR(clear_module_state->__pyx_n_s_as_logger);
  Py_CLEAR(clear_module_state->__pyx_n_u_ask_price);
  Py_CLEAR(clear_module_state->__pyx_n_u_ask_price_adjusted);
  Py_CLEAR(clear_module_state->__pyx_n_s_assets_df);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_kp_u_at);
  Py_CLEAR(clear_module_state->__pyx_n_s_balance_warning);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_asset);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_asset_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_pair);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_rate);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_rate_source);
  Py_CLEAR(clear_module_state->__pyx_kp_u_bid_ask_price_amount);
  Py_CLEAR(clear_module_state->__pyx_n_u_bid_price);
  Py_CLEAR(clear_module_state->__pyx_n_u_bid_price_adjusted);
  Py_CLEAR(clear_module_state->__pyx_n_s_bool);
  Py_CLEAR(clear_module_state->__pyx_kp_u_buy_limit_order_completed_on);
  Py_CLEAR(clear_module_state->__pyx_n_s_buy_market);
  Py_CLEAR(clear_module_state->__pyx_n_s_buy_market_conversion_rate);
  Py_CLEAR(clear_module_state->__pyx_n_s_buy_market_trading_pair);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_cls);
  Py_CLEAR(clear_module_state->__pyx_n_s_columns);
  Py_CLEAR(clear_module_state->__pyx_kp_u_conversion_rate);
  Py_CLEAR(clear_module_state->__pyx_n_s_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_decimal);
  Py_CLEAR(clear_module_state->__pyx_n_s_df_limit_lines);
  Py_CLEAR(clear_module_state->__pyx_n_s_df_market_lines);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_empty);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_failed_order_tolerance);
  Py_CLEAR(clear_module_state->__pyx_n_s_find_best_profitable_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_find_profitable_arbitrage_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_first);
  Py_CLEAR(clear_module_state->__pyx_n_u_fixed);
  Py_CLEAR(clear_module_state->__pyx_n_s_flat_fees);
  Py_CLEAR(clear_module_state->__pyx_n_s_float);
  Py_CLEAR(clear_module_state->__pyx_n_s_format_status);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_getLogger);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_instance);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_second_to_first_conversion_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_taker_order_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_hb_app_notification);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_client_performance);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_connector_exchange_ba);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_data_type_limit);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_data_type_market);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_data_type_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_event_events);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_network_iterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_rate_oracle_rate);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_strategy_arbitrage_ar);
  Py_CLEAR(clear_module_state->__pyx_kp_s_hummingbot_strategy_arbitrage_ar_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_strategy_arbitrage_ar_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_strategy_market_tradi);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_strategy_strategy_bas);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_init_params);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_int);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_line);
  Py_CLEAR(clear_module_state->__pyx_n_s_lines);
  Py_CLEAR(clear_module_state->__pyx_n_s_log_conversion_rates);
  Py_CLEAR(clear_module_state->__pyx_n_s_log_with_clock);
  Py_CLEAR(clear_module_state->__pyx_n_s_logger);
  Py_CLEAR(clear_module_state->__pyx_n_s_logging);
  Py_CLEAR(clear_module_state->__pyx_n_s_logging_options);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_market);
  Py_CLEAR(clear_module_state->__pyx_n_s_market_conversion_rate);
  Py_CLEAR(clear_module_state->__pyx_n_s_market_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_market_pair);
  Py_CLEAR(clear_module_state->__pyx_n_s_market_pairs);
  Py_CLEAR(clear_module_state->__pyx_kp_u_market_pairs_must_not_be_empty);
  Py_CLEAR(clear_module_state->__pyx_n_s_market_status_data_frame);
  Py_CLEAR(clear_module_state->__pyx_n_s_markets_df);
  Py_CLEAR(clear_module_state->__pyx_n_s_min_profitability);
  Py_CLEAR(clear_module_state->__pyx_n_s_msg);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_name_2);
  Py_CLEAR(clear_module_state->__pyx_n_u_nan);
  Py_CLEAR(clear_module_state->__pyx_n_s_network_status);
  Py_CLEAR(clear_module_state->__pyx_n_s_network_warning);
  Py_CLEAR(clear_module_state->__pyx_n_s_next_trade_delay_interval);
  Py_CLEAR(clear_module_state->__pyx_n_s_notify_hb_app);
  Py_CLEAR(clear_module_state->__pyx_n_s_notify_hb_app_with_timestamp);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy_core_multiarray_failed_to);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy_core_umath_failed_to_impor);
  Py_CLEAR(clear_module_state->__pyx_n_s_oracle_df);
  Py_CLEAR(clear_module_state->__pyx_n_s_oracle_status_df);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_book);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_book_ask_entries);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_book_bid_entries);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_pandas);
  Py_CLEAR(clear_module_state->__pyx_n_s_pd);
  Py_CLEAR(clear_module_state->__pyx_n_s_percent);
  Py_CLEAR(clear_module_state->__pyx_n_s_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_asset);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_pair);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_rate);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_rate_source);
  Py_CLEAR(clear_module_state->__pyx_n_s_rate);
  Py_CLEAR(clear_module_state->__pyx_n_u_raw_profitability);
  Py_CLEAR(clear_module_state->__pyx_n_s_ready);
  Py_CLEAR(clear_module_state->__pyx_n_s_ready_for_new_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_return);
  Py_CLEAR(clear_module_state->__pyx_n_s_round);
  Py_CLEAR(clear_module_state->__pyx_n_s_s_decimal_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_second);
  Py_CLEAR(clear_module_state->__pyx_n_s_secondary_to_primary_base_conver);
  Py_CLEAR(clear_module_state->__pyx_n_s_secondary_to_primary_quote_conve);
  Py_CLEAR(clear_module_state->__pyx_kp_u_seconds);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self__events_cannot_be_converted);
  Py_CLEAR(clear_module_state->__pyx_kp_u_sell_limit_order_completed_on);
  Py_CLEAR(clear_module_state->__pyx_n_s_sell_market);
  Py_CLEAR(clear_module_state->__pyx_n_s_sell_market_conversion_rate);
  Py_CLEAR(clear_module_state->__pyx_n_s_sell_market_trading_pair);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_smart_round);
  Py_CLEAR(clear_module_state->__pyx_n_s_source);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_split);
  Py_CLEAR(clear_module_state->__pyx_n_s_staticmethod);
  Py_CLEAR(clear_module_state->__pyx_n_s_status_report_interval);
  Py_CLEAR(clear_module_state->__pyx_n_u_step_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_str);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_super);
  Py_CLEAR(clear_module_state->__pyx_kp_u_take_ask_on);
  Py_CLEAR(clear_module_state->__pyx_kp_u_take_ask_on_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_take_bid_on);
  Py_CLEAR(clear_module_state->__pyx_kp_u_take_bid_on_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_to_string);
  Py_CLEAR(clear_module_state->__pyx_n_s_tracked_limit_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_tracked_limit_orders_data_frame);
  Py_CLEAR(clear_module_state->__pyx_n_s_tracked_limit_orders_df);
  Py_CLEAR(clear_module_state->__pyx_n_s_tracked_market_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_tracked_market_orders_data_frame);
  Py_CLEAR(clear_module_state->__pyx_n_s_tracked_market_orders_df);
  Py_CLEAR(clear_module_state->__pyx_n_s_trading_pair);
  Py_CLEAR(clear_module_state->__pyx_n_s_typing);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_oracle_conversion_rate);
  Py_CLEAR(clear_module_state->__pyx_n_s_wallet_balance_data_frame);
  Py_CLEAR(clear_module_state->__pyx_n_s_warning);
  Py_CLEAR(clear_module_state->__pyx_n_s_warning_lines);
  Py_CLEAR(clear_module_state->__pyx_kp_u_with_amount);
  Py_CLEAR(clear_module_state->__pyx_float_15_0);
  Py_CLEAR(clear_module_state->__pyx_float_60_0);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_2);
  Py_CLEAR(clear_module_state->__pyx_int_4);
  Py_CLEAR(clear_module_state->__pyx_int_8);
  Py_CLEAR(clear_module_state->__pyx_int_16);
  Py_CLEAR(clear_module_state->__pyx_int_32);
  Py_CLEAR(clear_module_state->__pyx_int_100);
  Py_CLEAR(clear_module_state->__pyx_int_1152921504606846975);
  Py_CLEAR(clear_module_state->__pyx_k_);
  Py_CLEAR(clear_module_state->__pyx_k__2);
  Py_CLEAR(clear_module_state->__pyx_k__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__4);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__15);
  Py_CLEAR(clear_module_state->__pyx_tuple__17);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__21);
  Py_CLEAR(clear_module_state->__pyx_tuple__23);
  Py_CLEAR(clear_module_state->__pyx_tuple__25);
  Py_CLEAR(clear_module_state->__pyx_tuple__27);
  Py_CLEAR(clear_module_state->__pyx_tuple__29);
  Py_CLEAR(clear_module_state->__pyx_tuple__31);
  Py_CLEAR(clear_module_state->__pyx_tuple__33);
  Py_CLEAR(clear_module_state->__pyx_tuple__36);
  Py_CLEAR(clear_module_state->__pyx_tuple__38);
  Py_CLEAR(clear_module_state->__pyx_tuple__40);
  Py_CLEAR(clear_module_state->__pyx_tuple__42);
  Py_CLEAR(clear_module_state->__pyx_tuple__44);
  Py_CLEAR(clear_module_state->__pyx_codeobj__19);
  Py_CLEAR(clear_module_state->__pyx_codeobj__22);
  Py_CLEAR(clear_module_state->__pyx_codeobj__24);
  Py_CLEAR(clear_module_state->__pyx_codeobj__26);
  Py_CLEAR(clear_module_state->__pyx_codeobj__28);
  Py_CLEAR(clear_module_state->__pyx_codeobj__30);
  Py_CLEAR(clear_module_state->__pyx_codeobj__32);
  Py_CLEAR(clear_module_state->__pyx_codeobj__34);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__43);
  Py_CLEAR(clear_module_state->__pyx_codeobj__45);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_6pubsub_PubSub);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_dtype);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flatiter);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_broadcast);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ndarray);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_generic);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_number);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_integer);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_inexact);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_floating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flexible);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_character);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ufunc);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5clock_Clock);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_1);
  Py_VISIT(traverse_module_state->__pyx_kp_u_8f);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArbitrageMarketPair);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArbitrageStrategy);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArbitrageStrategy___reduce_cytho);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArbitrageStrategy___setstate_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArbitrageStrategy_find_best_prof);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArbitrageStrategy_find_profitabl);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArbitrageStrategy_format_status);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArbitrageStrategy_get_second_to);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArbitrageStrategy_init_params);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArbitrageStrategy_log_conversion);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArbitrageStrategy_logger);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArbitrageStrategy_market_convers);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArbitrageStrategy_notify_hb_app);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArbitrageStrategy_oracle_status);
  Py_VISIT(traverse_module_state->__pyx_n_s_ArbitrageStrategy_ready_for_new);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Assets);
  Py_VISIT(traverse_module_state->__pyx_n_s_BUY);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Base_asset_available_balance);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Base_asset_needed);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONNECTED);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Cool_off_completed_Arbitrage_str);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Cooling_off_from_previous_trade);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Current_step_profitability);
  Py_VISIT(traverse_module_state->__pyx_n_s_DEBUG);
  Py_VISIT(traverse_module_state->__pyx_n_s_DataFrame);
  Py_VISIT(traverse_module_state->__pyx_n_s_Decimal);
  Py_VISIT(traverse_module_state->__pyx_n_s_ExchangeBase);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Executing_limit_order_buy_of);
  Py_VISIT(traverse_module_state->__pyx_n_s_INFO);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImportError);
  Py_VISIT(traverse_module_state->__pyx_n_s_LimitOrder);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Limit_order_completed_on);
  Py_VISIT(traverse_module_state->__pyx_n_s_List);
  Py_VISIT(traverse_module_state->__pyx_kp_s_List_ArbitrageMarketPair);
  Py_VISIT(traverse_module_state->__pyx_n_s_MarketOrder);
  Py_VISIT(traverse_module_state->__pyx_n_s_MarketTradingPairTuple);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Market_order_canceled_on);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Markets);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Markets_are_not_all_online_No_ar);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Markets_are_not_ready_No_arbitra);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Markets_are_ready_Trading_starte);
  Py_VISIT(traverse_module_state->__pyx_n_s_NaN);
  Py_VISIT(traverse_module_state->__pyx_n_s_NetworkStatus);
  Py_VISIT(traverse_module_state->__pyx_kp_u_No_pending_limit_orders);
  Py_VISIT(traverse_module_state->__pyx_kp_u_None);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Not_enough_asset_to_complete_thi);
  Py_VISIT(traverse_module_state->__pyx_n_s_OPTION_LOG_ALL);
  Py_VISIT(traverse_module_state->__pyx_n_s_OPTION_LOG_CREATE_ORDER);
  Py_VISIT(traverse_module_state->__pyx_n_s_OPTION_LOG_FULL_PROFITABILITY_ST);
  Py_VISIT(traverse_module_state->__pyx_n_s_OPTION_LOG_INSUFFICIENT_ASSET);
  Py_VISIT(traverse_module_state->__pyx_n_s_OPTION_LOG_ORDER_COMPLETED);
  Py_VISIT(traverse_module_state->__pyx_n_s_OPTION_LOG_PROFITABILITY_STEP);
  Py_VISIT(traverse_module_state->__pyx_n_s_OPTION_LOG_STATUS_REPORT);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderBook);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderType);
  Py_VISIT(traverse_module_state->__pyx_n_u_Pair);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Pending_limit_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_PerformanceMetrics);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Profitability_without_fees);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Quote_asset_available_balance);
  Py_VISIT(traverse_module_state->__pyx_n_u_Rate);
  Py_VISIT(traverse_module_state->__pyx_n_s_RateOracle);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Rate_conversion);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Resuming_in);
  Py_VISIT(traverse_module_state->__pyx_n_s_SELL);
  Py_VISIT(traverse_module_state->__pyx_n_u_Source);
  Py_VISIT(traverse_module_state->__pyx_n_s_StopIteration);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Total_profitability_with_fees);
  Py_VISIT(traverse_module_state->__pyx_n_s_TradeType);
  Py_VISIT(traverse_module_state->__pyx_n_s_Tuple);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Tuple_str_Decimal_str_Decimal);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_WARNINGS);
  Py_VISIT(traverse_module_state->__pyx_kp_u__10);
  Py_VISIT(traverse_module_state->__pyx_kp_u__11);
  Py_VISIT(traverse_module_state->__pyx_kp_u__12);
  Py_VISIT(traverse_module_state->__pyx_kp_u__13);
  Py_VISIT(traverse_module_state->__pyx_n_s__16);
  Py_VISIT(traverse_module_state->__pyx_n_s__35);
  Py_VISIT(traverse_module_state->__pyx_n_s__46);
  Py_VISIT(traverse_module_state->__pyx_kp_u__5);
  Py_VISIT(traverse_module_state->__pyx_kp_u__6);
  Py_VISIT(traverse_module_state->__pyx_kp_u__7);
  Py_VISIT(traverse_module_state->__pyx_kp_u__8);
  Py_VISIT(traverse_module_state->__pyx_kp_u__9);
  Py_VISIT(traverse_module_state->__pyx_n_s_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_all_markets);
  Py_VISIT(traverse_module_state->__pyx_n_s_amount);
  Py_VISIT(traverse_module_state->__pyx_kp_u_and_profitability);
  Py_VISIT(traverse_module_state->__pyx_kp_u_and_sell_of);
  Py_VISIT(traverse_module_state->__pyx_n_s_as_logger);
  Py_VISIT(traverse_module_state->__pyx_n_u_ask_price);
  Py_VISIT(traverse_module_state->__pyx_n_u_ask_price_adjusted);
  Py_VISIT(traverse_module_state->__pyx_n_s_assets_df);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_kp_u_at);
  Py_VISIT(traverse_module_state->__pyx_n_s_balance_warning);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_asset);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_asset_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_pair);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_rate);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_rate_source);
  Py_VISIT(traverse_module_state->__pyx_kp_u_bid_ask_price_amount);
  Py_VISIT(traverse_module_state->__pyx_n_u_bid_price);
  Py_VISIT(traverse_module_state->__pyx_n_u_bid_price_adjusted);
  Py_VISIT(traverse_module_state->__pyx_n_s_bool);
  Py_VISIT(traverse_module_state->__pyx_kp_u_buy_limit_order_completed_on);
  Py_VISIT(traverse_module_state->__pyx_n_s_buy_market);
  Py_VISIT(traverse_module_state->__pyx_n_s_buy_market_conversion_rate);
  Py_VISIT(traverse_module_state->__pyx_n_s_buy_market_trading_pair);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_cls);
  Py_VISIT(traverse_module_state->__pyx_n_s_columns);
  Py_VISIT(traverse_module_state->__pyx_kp_u_conversion_rate);
  Py_VISIT(traverse_module_state->__pyx_n_s_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_decimal);
  Py_VISIT(traverse_module_state->__pyx_n_s_df_limit_lines);
  Py_VISIT(traverse_module_state->__pyx_n_s_df_market_lines);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_empty);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_failed_order_tolerance);
  Py_VISIT(traverse_module_state->__pyx_n_s_find_best_profitable_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_find_profitable_arbitrage_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_first);
  Py_VISIT(traverse_module_state->__pyx_n_u_fixed);
  Py_VISIT(traverse_module_state->__pyx_n_s_flat_fees);
  Py_VISIT(traverse_module_state->__pyx_n_s_float);
  Py_VISIT(traverse_module_state->__pyx_n_s_format_status);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_getLogger);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_instance);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_second_to_first_conversion_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_taker_order_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_hb_app_notification);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_client_performance);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_connector_exchange_ba);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_data_type_limit);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_data_type_market);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_data_type_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_event_events);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_network_iterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_rate_oracle_rate);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_strategy_arbitrage_ar);
  Py_VISIT(traverse_module_state->__pyx_kp_s_hummingbot_strategy_arbitrage_ar_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_strategy_arbitrage_ar_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_strategy_market_tradi);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_strategy_strategy_bas);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_init_params);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_int);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_line);
  Py_VISIT(traverse_module_state->__pyx_n_s_lines);
  Py_VISIT(traverse_module_state->__pyx_n_s_log_conversion_rates);
  Py_VISIT(traverse_module_state->__pyx_n_s_log_with_clock);
  Py_VISIT(traverse_module_state->__pyx_n_s_logger);
  Py_VISIT(traverse_module_state->__pyx_n_s_logging);
  Py_VISIT(traverse_module_state->__pyx_n_s_logging_options);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_market);
  Py_VISIT(traverse_module_state->__pyx_n_s_market_conversion_rate);
  Py_VISIT(traverse_module_state->__pyx_n_s_market_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_market_pair);
  Py_VISIT(traverse_module_state->__pyx_n_s_market_pairs);
  Py_VISIT(traverse_module_state->__pyx_kp_u_market_pairs_must_not_be_empty);
  Py_VISIT(traverse_module_state->__pyx_n_s_market_status_data_frame);
  Py_VISIT(traverse_module_state->__pyx_n_s_markets_df);
  Py_VISIT(traverse_module_state->__pyx_n_s_min_profitability);
  Py_VISIT(traverse_module_state->__pyx_n_s_msg);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_name_2);
  Py_VISIT(traverse_module_state->__pyx_n_u_nan);
  Py_VISIT(traverse_module_state->__pyx_n_s_network_status);
  Py_VISIT(traverse_module_state->__pyx_n_s_network_warning);
  Py_VISIT(traverse_module_state->__pyx_n_s_next_trade_delay_interval);
  Py_VISIT(traverse_module_state->__pyx_n_s_notify_hb_app);
  Py_VISIT(traverse_module_state->__pyx_n_s_notify_hb_app_with_timestamp);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy_core_multiarray_failed_to);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy_core_umath_failed_to_impor);
  Py_VISIT(traverse_module_state->__pyx_n_s_oracle_df);
  Py_VISIT(traverse_module_state->__pyx_n_s_oracle_status_df);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_book);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_book_ask_entries);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_book_bid_entries);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_pandas);
  Py_VISIT(traverse_module_state->__pyx_n_s_pd);
  Py_VISIT(traverse_module_state->__pyx_n_s_percent);
  Py_VISIT(traverse_module_state->__pyx_n_s_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_asset);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_pair);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_rate);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_rate_source);
  Py_VISIT(traverse_module_state->__pyx_n_s_rate);
  Py_VISIT(traverse_module_state->__pyx_n_u_raw_profitability);
  Py_VISIT(traverse_module_state->__pyx_n_s_ready);
  Py_VISIT(traverse_module_state->__pyx_n_s_ready_for_new_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_return);
  Py_VISIT(traverse_module_state->__pyx_n_s_round);
  Py_VISIT(traverse_module_state->__pyx_n_s_s_decimal_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_second);
  Py_VISIT(traverse_module_state->__pyx_n_s_secondary_to_primary_base_conver);
  Py_VISIT(traverse_module_state->__pyx_n_s_secondary_to_primary_quote_conve);
  Py_VISIT(traverse_module_state->__pyx_kp_u_seconds);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self__events_cannot_be_converted);
  Py_VISIT(traverse_module_state->__pyx_kp_u_sell_limit_order_completed_on);
  Py_VISIT(traverse_module_state->__pyx_n_s_sell_market);
  Py_VISIT(traverse_module_state->__pyx_n_s_sell_market_conversion_rate);
  Py_VISIT(traverse_module_state->__pyx_n_s_sell_market_trading_pair);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_smart_round);
  Py_VISIT(traverse_module_state->__pyx_n_s_source);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_split);
  Py_VISIT(traverse_module_state->__pyx_n_s_staticmethod);
  Py_VISIT(traverse_module_state->__pyx_n_s_status_report_interval);
  Py_VISIT(traverse_module_state->__pyx_n_u_step_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_str);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_super);
  Py_VISIT(traverse_module_state->__pyx_kp_u_take_ask_on);
  Py_VISIT(traverse_module_state->__pyx_kp_u_take_ask_on_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_take_bid_on);
  Py_VISIT(traverse_module_state->__pyx_kp_u_take_bid_on_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_to_string);
  Py_VISIT(traverse_module_state->__pyx_n_s_tracked_limit_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_tracked_limit_orders_data_frame);
  Py_VISIT(traverse_module_state->__pyx_n_s_tracked_limit_orders_df);
  Py_VISIT(traverse_module_state->__pyx_n_s_tracked_market_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_tracked_market_orders_data_frame);
  Py_VISIT(traverse_module_state->__pyx_n_s_tracked_market_orders_df);
  Py_VISIT(traverse_module_state->__pyx_n_s_trading_pair);
  Py_VISIT(traverse_module_state->__pyx_n_s_typing);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_oracle_conversion_rate);
  Py_VISIT(traverse_module_state->__pyx_n_s_wallet_balance_data_frame);
  Py_VISIT(traverse_module_state->__pyx_n_s_warning);
  Py_VISIT(traverse_module_state->__pyx_n_s_warning_lines);
  Py_VISIT(traverse_module_state->__pyx_kp_u_with_amount);
  Py_VISIT(traverse_module_state->__pyx_float_15_0);
  Py_VISIT(traverse_module_state->__pyx_float_60_0);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_2);
  Py_VISIT(traverse_module_state->__pyx_int_4);
  Py_VISIT(traverse_module_state->__pyx_int_8);
  Py_VISIT(traverse_module_state->__pyx_int_16);
  Py_VISIT(traverse_module_state->__pyx_int_32);
  Py_VISIT(traverse_module_state->__pyx_int_100);
  Py_VISIT(traverse_module_state->__pyx_int_1152921504606846975);
  Py_VISIT(traverse_module_state->__pyx_k_);
  Py_VISIT(traverse_module_state->__pyx_k__2);
  Py_VISIT(traverse_module_state->__pyx_k__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__4);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__15);
  Py_VISIT(traverse_module_state->__pyx_tuple__17);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__21);
  Py_VISIT(traverse_module_state->__pyx_tuple__23);
  Py_VISIT(traverse_module_state->__pyx_tuple__25);
  Py_VISIT(traverse_module_state->__pyx_tuple__27);
  Py_VISIT(traverse_module_state->__pyx_tuple__29);
  Py_VISIT(traverse_module_state->__pyx_tuple__31);
  Py_VISIT(traverse_module_state->__pyx_tuple__33);
  Py_VISIT(traverse_module_state->__pyx_tuple__36);
  Py_VISIT(traverse_module_state->__pyx_tuple__38);
  Py_VISIT(traverse_module_state->__pyx_tuple__40);
  Py_VISIT(traverse_module_state->__pyx_tuple__42);
  Py_VISIT(traverse_module_state->__pyx_tuple__44);
  Py_VISIT(traverse_module_state->__pyx_codeobj__19);
  Py_VISIT(traverse_module_state->__pyx_codeobj__22);
  Py_VISIT(traverse_module_state->__pyx_codeobj__24);
  Py_VISIT(traverse_module_state->__pyx_codeobj__26);
  Py_VISIT(traverse_module_state->__pyx_codeobj__28);
  Py_VISIT(traverse_module_state->__pyx_codeobj__30);
  Py_VISIT(traverse_module_state->__pyx_codeobj__32);
  Py_VISIT(traverse_module_state->__pyx_codeobj__34);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__43);
  Py_VISIT(traverse_module_state->__pyx_codeobj__45);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#if CYTHON_COMPILING_IN_LIMITED_API
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#define __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener
#define __pyx_ptype_10hummingbot_4core_6pubsub_PubSub __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_6pubsub_PubSub
#define __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult
#define __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#define __pyx_ptype_5numpy_dtype __pyx_mstate_global->__pyx_ptype_5numpy_dtype
#define __pyx_ptype_5numpy_flatiter __pyx_mstate_global->__pyx_ptype_5numpy_flatiter
#define __pyx_ptype_5numpy_broadcast __pyx_mstate_global->__pyx_ptype_5numpy_broadcast
#define __pyx_ptype_5numpy_ndarray __pyx_mstate_global->__pyx_ptype_5numpy_ndarray
#define __pyx_ptype_5numpy_generic __pyx_mstate_global->__pyx_ptype_5numpy_generic
#define __pyx_ptype_5numpy_number __pyx_mstate_global->__pyx_ptype_5numpy_number
#define __pyx_ptype_5numpy_integer __pyx_mstate_global->__pyx_ptype_5numpy_integer
#define __pyx_ptype_5numpy_signedinteger __pyx_mstate_global->__pyx_ptype_5numpy_signedinteger
#define __pyx_ptype_5numpy_unsignedinteger __pyx_mstate_global->__pyx_ptype_5numpy_unsignedinteger
#define __pyx_ptype_5numpy_inexact __pyx_mstate_global->__pyx_ptype_5numpy_inexact
#define __pyx_ptype_5numpy_floating __pyx_mstate_global->__pyx_ptype_5numpy_floating
#define __pyx_ptype_5numpy_complexfloating __pyx_mstate_global->__pyx_ptype_5numpy_complexfloating
#define __pyx_ptype_5numpy_flexible __pyx_mstate_global->__pyx_ptype_5numpy_flexible
#define __pyx_ptype_5numpy_character __pyx_mstate_global->__pyx_ptype_5numpy_character
#define __pyx_ptype_5numpy_ufunc __pyx_mstate_global->__pyx_ptype_5numpy_ufunc
#define __pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook
#define __pyx_ptype_10hummingbot_4core_5clock_Clock __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5clock_Clock
#define __pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator
#define __pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder
#define __pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker
#define __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase
#define __pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter
#define __pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger
#define __pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator
#define __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase
#define __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase
#define __pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy
#define __pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy
#define __pyx_kp_u_1 __pyx_mstate_global->__pyx_kp_u_1
#define __pyx_kp_u_8f __pyx_mstate_global->__pyx_kp_u_8f
#define __pyx_n_s_ArbitrageMarketPair __pyx_mstate_global->__pyx_n_s_ArbitrageMarketPair
#define __pyx_n_s_ArbitrageStrategy __pyx_mstate_global->__pyx_n_s_ArbitrageStrategy
#define __pyx_n_s_ArbitrageStrategy___reduce_cytho __pyx_mstate_global->__pyx_n_s_ArbitrageStrategy___reduce_cytho
#define __pyx_n_s_ArbitrageStrategy___setstate_cyt __pyx_mstate_global->__pyx_n_s_ArbitrageStrategy___setstate_cyt
#define __pyx_n_s_ArbitrageStrategy_find_best_prof __pyx_mstate_global->__pyx_n_s_ArbitrageStrategy_find_best_prof
#define __pyx_n_s_ArbitrageStrategy_find_profitabl __pyx_mstate_global->__pyx_n_s_ArbitrageStrategy_find_profitabl
#define __pyx_n_s_ArbitrageStrategy_format_status __pyx_mstate_global->__pyx_n_s_ArbitrageStrategy_format_status
#define __pyx_n_s_ArbitrageStrategy_get_second_to __pyx_mstate_global->__pyx_n_s_ArbitrageStrategy_get_second_to
#define __pyx_n_s_ArbitrageStrategy_init_params __pyx_mstate_global->__pyx_n_s_ArbitrageStrategy_init_params
#define __pyx_n_s_ArbitrageStrategy_log_conversion __pyx_mstate_global->__pyx_n_s_ArbitrageStrategy_log_conversion
#define __pyx_n_s_ArbitrageStrategy_logger __pyx_mstate_global->__pyx_n_s_ArbitrageStrategy_logger
#define __pyx_n_s_ArbitrageStrategy_market_convers __pyx_mstate_global->__pyx_n_s_ArbitrageStrategy_market_convers
#define __pyx_n_s_ArbitrageStrategy_notify_hb_app __pyx_mstate_global->__pyx_n_s_ArbitrageStrategy_notify_hb_app
#define __pyx_n_s_ArbitrageStrategy_oracle_status __pyx_mstate_global->__pyx_n_s_ArbitrageStrategy_oracle_status
#define __pyx_n_s_ArbitrageStrategy_ready_for_new __pyx_mstate_global->__pyx_n_s_ArbitrageStrategy_ready_for_new
#define __pyx_kp_u_Assets __pyx_mstate_global->__pyx_kp_u_Assets
#define __pyx_n_s_BUY __pyx_mstate_global->__pyx_n_s_BUY
#define __pyx_kp_u_Base_asset_available_balance __pyx_mstate_global->__pyx_kp_u_Base_asset_available_balance
#define __pyx_kp_u_Base_asset_needed __pyx_mstate_global->__pyx_kp_u_Base_asset_needed
#define __pyx_n_s_CONNECTED __pyx_mstate_global->__pyx_n_s_CONNECTED
#define __pyx_kp_u_Cool_off_completed_Arbitrage_str __pyx_mstate_global->__pyx_kp_u_Cool_off_completed_Arbitrage_str
#define __pyx_kp_u_Cooling_off_from_previous_trade __pyx_mstate_global->__pyx_kp_u_Cooling_off_from_previous_trade
#define __pyx_kp_u_Current_step_profitability __pyx_mstate_global->__pyx_kp_u_Current_step_profitability
#define __pyx_n_s_DEBUG __pyx_mstate_global->__pyx_n_s_DEBUG
#define __pyx_n_s_DataFrame __pyx_mstate_global->__pyx_n_s_DataFrame
#define __pyx_n_s_Decimal __pyx_mstate_global->__pyx_n_s_Decimal
#define __pyx_n_s_ExchangeBase __pyx_mstate_global->__pyx_n_s_ExchangeBase
#define __pyx_kp_u_Executing_limit_order_buy_of __pyx_mstate_global->__pyx_kp_u_Executing_limit_order_buy_of
#define __pyx_n_s_INFO __pyx_mstate_global->__pyx_n_s_INFO
#define __pyx_n_s_ImportError __pyx_mstate_global->__pyx_n_s_ImportError
#define __pyx_n_s_LimitOrder __pyx_mstate_global->__pyx_n_s_LimitOrder
#define __pyx_kp_u_Limit_order_completed_on __pyx_mstate_global->__pyx_kp_u_Limit_order_completed_on
#define __pyx_n_s_List __pyx_mstate_global->__pyx_n_s_List
#define __pyx_kp_s_List_ArbitrageMarketPair __pyx_mstate_global->__pyx_kp_s_List_ArbitrageMarketPair
#define __pyx_n_s_MarketOrder __pyx_mstate_global->__pyx_n_s_MarketOrder
#define __pyx_n_s_MarketTradingPairTuple __pyx_mstate_global->__pyx_n_s_MarketTradingPairTuple
#define __pyx_kp_u_Market_order_canceled_on __pyx_mstate_global->__pyx_kp_u_Market_order_canceled_on
#define __pyx_kp_u_Markets __pyx_mstate_global->__pyx_kp_u_Markets
#define __pyx_kp_u_Markets_are_not_all_online_No_ar __pyx_mstate_global->__pyx_kp_u_Markets_are_not_all_online_No_ar
#define __pyx_kp_u_Markets_are_not_ready_No_arbitra __pyx_mstate_global->__pyx_kp_u_Markets_are_not_ready_No_arbitra
#define __pyx_kp_u_Markets_are_ready_Trading_starte __pyx_mstate_global->__pyx_kp_u_Markets_are_ready_Trading_starte
#define __pyx_n_s_NaN __pyx_mstate_global->__pyx_n_s_NaN
#define __pyx_n_s_NetworkStatus __pyx_mstate_global->__pyx_n_s_NetworkStatus
#define __pyx_kp_u_No_pending_limit_orders __pyx_mstate_global->__pyx_kp_u_No_pending_limit_orders
#define __pyx_kp_u_None __pyx_mstate_global->__pyx_kp_u_None
#define __pyx_kp_u_Not_enough_asset_to_complete_thi __pyx_mstate_global->__pyx_kp_u_Not_enough_asset_to_complete_thi
#define __pyx_n_s_OPTION_LOG_ALL __pyx_mstate_global->__pyx_n_s_OPTION_LOG_ALL
#define __pyx_n_s_OPTION_LOG_CREATE_ORDER __pyx_mstate_global->__pyx_n_s_OPTION_LOG_CREATE_ORDER
#define __pyx_n_s_OPTION_LOG_FULL_PROFITABILITY_ST __pyx_mstate_global->__pyx_n_s_OPTION_LOG_FULL_PROFITABILITY_ST
#define __pyx_n_s_OPTION_LOG_INSUFFICIENT_ASSET __pyx_mstate_global->__pyx_n_s_OPTION_LOG_INSUFFICIENT_ASSET
#define __pyx_n_s_OPTION_LOG_ORDER_COMPLETED __pyx_mstate_global->__pyx_n_s_OPTION_LOG_ORDER_COMPLETED
#define __pyx_n_s_OPTION_LOG_PROFITABILITY_STEP __pyx_mstate_global->__pyx_n_s_OPTION_LOG_PROFITABILITY_STEP
#define __pyx_n_s_OPTION_LOG_STATUS_REPORT __pyx_mstate_global->__pyx_n_s_OPTION_LOG_STATUS_REPORT
#define __pyx_n_s_OrderBook __pyx_mstate_global->__pyx_n_s_OrderBook
#define __pyx_n_s_OrderType __pyx_mstate_global->__pyx_n_s_OrderType
#define __pyx_n_u_Pair __pyx_mstate_global->__pyx_n_u_Pair
#define __pyx_kp_u_Pending_limit_orders __pyx_mstate_global->__pyx_kp_u_Pending_limit_orders
#define __pyx_n_s_PerformanceMetrics __pyx_mstate_global->__pyx_n_s_PerformanceMetrics
#define __pyx_kp_u_Profitability_without_fees __pyx_mstate_global->__pyx_kp_u_Profitability_without_fees
#define __pyx_kp_u_Quote_asset_available_balance __pyx_mstate_global->__pyx_kp_u_Quote_asset_available_balance
#define __pyx_n_u_Rate __pyx_mstate_global->__pyx_n_u_Rate
#define __pyx_n_s_RateOracle __pyx_mstate_global->__pyx_n_s_RateOracle
#define __pyx_kp_u_Rate_conversion __pyx_mstate_global->__pyx_kp_u_Rate_conversion
#define __pyx_kp_u_Resuming_in __pyx_mstate_global->__pyx_kp_u_Resuming_in
#define __pyx_n_s_SELL __pyx_mstate_global->__pyx_n_s_SELL
#define __pyx_n_u_Source __pyx_mstate_global->__pyx_n_u_Source
#define __pyx_n_s_StopIteration __pyx_mstate_global->__pyx_n_s_StopIteration
#define __pyx_n_s_StrategyBase __pyx_mstate_global->__pyx_n_s_StrategyBase
#define __pyx_kp_u_Total_profitability_with_fees __pyx_mstate_global->__pyx_kp_u_Total_profitability_with_fees
#define __pyx_n_s_TradeType __pyx_mstate_global->__pyx_n_s_TradeType
#define __pyx_n_s_Tuple __pyx_mstate_global->__pyx_n_s_Tuple
#define __pyx_kp_s_Tuple_str_Decimal_str_Decimal __pyx_mstate_global->__pyx_kp_s_Tuple_str_Decimal_str_Decimal
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_kp_u_WARNINGS __pyx_mstate_global->__pyx_kp_u_WARNINGS
#define __pyx_kp_u__10 __pyx_mstate_global->__pyx_kp_u__10
#define __pyx_kp_u__11 __pyx_mstate_global->__pyx_kp_u__11
#define __pyx_kp_u__12 __pyx_mstate_global->__pyx_kp_u__12
#define __pyx_kp_u__13 __pyx_mstate_global->__pyx_kp_u__13
#define __pyx_n_s__16 __pyx_mstate_global->__pyx_n_s__16
#define __pyx_n_s__35 __pyx_mstate_global->__pyx_n_s__35
#define __pyx_n_s__46 __pyx_mstate_global->__pyx_n_s__46
#define __pyx_kp_u__5 __pyx_mstate_global->__pyx_kp_u__5
#define __pyx_kp_u__6 __pyx_mstate_global->__pyx_kp_u__6
#define __pyx_kp_u__7 __pyx_mstate_global->__pyx_kp_u__7
#define __pyx_kp_u__8 __pyx_mstate_global->__pyx_kp_u__8
#define __pyx_kp_u__9 __pyx_mstate_global->__pyx_kp_u__9
#define __pyx_n_s_all __pyx_mstate_global->__pyx_n_s_all
#define __pyx_n_s_all_markets __pyx_mstate_global->__pyx_n_s_all_markets
#define __pyx_n_s_amount __pyx_mstate_global->__pyx_n_s_amount
#define __pyx_kp_u_and_profitability __pyx_mstate_global->__pyx_kp_u_and_profitability
#define __pyx_kp_u_and_sell_of __pyx_mstate_global->__pyx_kp_u_and_sell_of
#define __pyx_n_s_as_logger __pyx_mstate_global->__pyx_n_s_as_logger
#define __pyx_n_u_ask_price __pyx_mstate_global->__pyx_n_u_ask_price
#define __pyx_n_u_ask_price_adjusted __pyx_mstate_global->__pyx_n_u_ask_price_adjusted
#define __pyx_n_s_assets_df __pyx_mstate_global->__pyx_n_s_assets_df
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_kp_u_at __pyx_mstate_global->__pyx_kp_u_at
#define __pyx_n_s_balance_warning __pyx_mstate_global->__pyx_n_s_balance_warning
#define __pyx_n_s_base_asset __pyx_mstate_global->__pyx_n_s_base_asset
#define __pyx_n_s_base_asset_amount __pyx_mstate_global->__pyx_n_s_base_asset_amount
#define __pyx_n_s_base_pair __pyx_mstate_global->__pyx_n_s_base_pair
#define __pyx_n_s_base_rate __pyx_mstate_global->__pyx_n_s_base_rate
#define __pyx_n_s_base_rate_source __pyx_mstate_global->__pyx_n_s_base_rate_source
#define __pyx_kp_u_bid_ask_price_amount __pyx_mstate_global->__pyx_kp_u_bid_ask_price_amount
#define __pyx_n_u_bid_price __pyx_mstate_global->__pyx_n_u_bid_price
#define __pyx_n_u_bid_price_adjusted __pyx_mstate_global->__pyx_n_u_bid_price_adjusted
#define __pyx_n_s_bool __pyx_mstate_global->__pyx_n_s_bool
#define __pyx_kp_u_buy_limit_order_completed_on __pyx_mstate_global->__pyx_kp_u_buy_limit_order_completed_on
#define __pyx_n_s_buy_market __pyx_mstate_global->__pyx_n_s_buy_market
#define __pyx_n_s_buy_market_conversion_rate __pyx_mstate_global->__pyx_n_s_buy_market_conversion_rate
#define __pyx_n_s_buy_market_trading_pair __pyx_mstate_global->__pyx_n_s_buy_market_trading_pair
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_cls __pyx_mstate_global->__pyx_n_s_cls
#define __pyx_n_s_columns __pyx_mstate_global->__pyx_n_s_columns
#define __pyx_kp_u_conversion_rate __pyx_mstate_global->__pyx_kp_u_conversion_rate
#define __pyx_n_s_data __pyx_mstate_global->__pyx_n_s_data
#define __pyx_n_s_decimal __pyx_mstate_global->__pyx_n_s_decimal
#define __pyx_n_s_df_limit_lines __pyx_mstate_global->__pyx_n_s_df_limit_lines
#define __pyx_n_s_df_market_lines __pyx_mstate_global->__pyx_n_s_df_market_lines
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_empty __pyx_mstate_global->__pyx_n_s_empty
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_failed_order_tolerance __pyx_mstate_global->__pyx_n_s_failed_order_tolerance
#define __pyx_n_s_find_best_profitable_amount __pyx_mstate_global->__pyx_n_s_find_best_profitable_amount
#define __pyx_n_s_find_profitable_arbitrage_orders __pyx_mstate_global->__pyx_n_s_find_profitable_arbitrage_orders
#define __pyx_n_s_first __pyx_mstate_global->__pyx_n_s_first
#define __pyx_n_u_fixed __pyx_mstate_global->__pyx_n_u_fixed
#define __pyx_n_s_flat_fees __pyx_mstate_global->__pyx_n_s_flat_fees
#define __pyx_n_s_float __pyx_mstate_global->__pyx_n_s_float
#define __pyx_n_s_format_status __pyx_mstate_global->__pyx_n_s_format_status
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_get __pyx_mstate_global->__pyx_n_s_get
#define __pyx_n_s_getLogger __pyx_mstate_global->__pyx_n_s_getLogger
#define __pyx_n_s_get_instance __pyx_mstate_global->__pyx_n_s_get_instance
#define __pyx_n_s_get_price __pyx_mstate_global->__pyx_n_s_get_price
#define __pyx_n_s_get_second_to_first_conversion_r __pyx_mstate_global->__pyx_n_s_get_second_to_first_conversion_r
#define __pyx_n_s_get_taker_order_type __pyx_mstate_global->__pyx_n_s_get_taker_order_type
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_hb_app_notification __pyx_mstate_global->__pyx_n_s_hb_app_notification
#define __pyx_n_s_hummingbot_client_performance __pyx_mstate_global->__pyx_n_s_hummingbot_client_performance
#define __pyx_n_s_hummingbot_connector_exchange_ba __pyx_mstate_global->__pyx_n_s_hummingbot_connector_exchange_ba
#define __pyx_n_s_hummingbot_core_data_type_limit __pyx_mstate_global->__pyx_n_s_hummingbot_core_data_type_limit
#define __pyx_n_s_hummingbot_core_data_type_market __pyx_mstate_global->__pyx_n_s_hummingbot_core_data_type_market
#define __pyx_n_s_hummingbot_core_data_type_order __pyx_mstate_global->__pyx_n_s_hummingbot_core_data_type_order
#define __pyx_n_s_hummingbot_core_event_events __pyx_mstate_global->__pyx_n_s_hummingbot_core_event_events
#define __pyx_n_s_hummingbot_core_network_iterator __pyx_mstate_global->__pyx_n_s_hummingbot_core_network_iterator
#define __pyx_n_s_hummingbot_core_rate_oracle_rate __pyx_mstate_global->__pyx_n_s_hummingbot_core_rate_oracle_rate
#define __pyx_n_s_hummingbot_strategy_arbitrage_ar __pyx_mstate_global->__pyx_n_s_hummingbot_strategy_arbitrage_ar
#define __pyx_kp_s_hummingbot_strategy_arbitrage_ar_2 __pyx_mstate_global->__pyx_kp_s_hummingbot_strategy_arbitrage_ar_2
#define __pyx_n_s_hummingbot_strategy_arbitrage_ar_3 __pyx_mstate_global->__pyx_n_s_hummingbot_strategy_arbitrage_ar_3
#define __pyx_n_s_hummingbot_strategy_market_tradi __pyx_mstate_global->__pyx_n_s_hummingbot_strategy_market_tradi
#define __pyx_n_s_hummingbot_strategy_strategy_bas __pyx_mstate_global->__pyx_n_s_hummingbot_strategy_strategy_bas
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_info __pyx_mstate_global->__pyx_n_s_info
#define __pyx_n_s_init_params __pyx_mstate_global->__pyx_n_s_init_params
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_int __pyx_mstate_global->__pyx_n_s_int
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_line __pyx_mstate_global->__pyx_n_s_line
#define __pyx_n_s_lines __pyx_mstate_global->__pyx_n_s_lines
#define __pyx_n_s_log_conversion_rates __pyx_mstate_global->__pyx_n_s_log_conversion_rates
#define __pyx_n_s_log_with_clock __pyx_mstate_global->__pyx_n_s_log_with_clock
#define __pyx_n_s_logger __pyx_mstate_global->__pyx_n_s_logger
#define __pyx_n_s_logging __pyx_mstate_global->__pyx_n_s_logging
#define __pyx_n_s_logging_options __pyx_mstate_global->__pyx_n_s_logging_options
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_market __pyx_mstate_global->__pyx_n_s_market
#define __pyx_n_s_market_conversion_rate __pyx_mstate_global->__pyx_n_s_market_conversion_rate
#define __pyx_n_s_market_info __pyx_mstate_global->__pyx_n_s_market_info
#define __pyx_n_s_market_pair __pyx_mstate_global->__pyx_n_s_market_pair
#define __pyx_n_s_market_pairs __pyx_mstate_global->__pyx_n_s_market_pairs
#define __pyx_kp_u_market_pairs_must_not_be_empty __pyx_mstate_global->__pyx_kp_u_market_pairs_must_not_be_empty
#define __pyx_n_s_market_status_data_frame __pyx_mstate_global->__pyx_n_s_market_status_data_frame
#define __pyx_n_s_markets_df __pyx_mstate_global->__pyx_n_s_markets_df
#define __pyx_n_s_min_profitability __pyx_mstate_global->__pyx_n_s_min_profitability
#define __pyx_n_s_msg __pyx_mstate_global->__pyx_n_s_msg
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_name_2 __pyx_mstate_global->__pyx_n_s_name_2
#define __pyx_n_u_nan __pyx_mstate_global->__pyx_n_u_nan
#define __pyx_n_s_network_status __pyx_mstate_global->__pyx_n_s_network_status
#define __pyx_n_s_network_warning __pyx_mstate_global->__pyx_n_s_network_warning
#define __pyx_n_s_next_trade_delay_interval __pyx_mstate_global->__pyx_n_s_next_trade_delay_interval
#define __pyx_n_s_notify_hb_app __pyx_mstate_global->__pyx_n_s_notify_hb_app
#define __pyx_n_s_notify_hb_app_with_timestamp __pyx_mstate_global->__pyx_n_s_notify_hb_app_with_timestamp
#define __pyx_kp_u_numpy_core_multiarray_failed_to __pyx_mstate_global->__pyx_kp_u_numpy_core_multiarray_failed_to
#define __pyx_kp_u_numpy_core_umath_failed_to_impor __pyx_mstate_global->__pyx_kp_u_numpy_core_umath_failed_to_impor
#define __pyx_n_s_oracle_df __pyx_mstate_global->__pyx_n_s_oracle_df
#define __pyx_n_s_oracle_status_df __pyx_mstate_global->__pyx_n_s_oracle_status_df
#define __pyx_n_s_order_book __pyx_mstate_global->__pyx_n_s_order_book
#define __pyx_n_s_order_book_ask_entries __pyx_mstate_global->__pyx_n_s_order_book_ask_entries
#define __pyx_n_s_order_book_bid_entries __pyx_mstate_global->__pyx_n_s_order_book_bid_entries
#define __pyx_n_s_order_id __pyx_mstate_global->__pyx_n_s_order_id
#define __pyx_n_s_pandas __pyx_mstate_global->__pyx_n_s_pandas
#define __pyx_n_s_pd __pyx_mstate_global->__pyx_n_s_pd
#define __pyx_n_s_percent __pyx_mstate_global->__pyx_n_s_percent
#define __pyx_n_s_price __pyx_mstate_global->__pyx_n_s_price
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_quote_asset __pyx_mstate_global->__pyx_n_s_quote_asset
#define __pyx_n_s_quote_pair __pyx_mstate_global->__pyx_n_s_quote_pair
#define __pyx_n_s_quote_rate __pyx_mstate_global->__pyx_n_s_quote_rate
#define __pyx_n_s_quote_rate_source __pyx_mstate_global->__pyx_n_s_quote_rate_source
#define __pyx_n_s_rate __pyx_mstate_global->__pyx_n_s_rate
#define __pyx_n_u_raw_profitability __pyx_mstate_global->__pyx_n_u_raw_profitability
#define __pyx_n_s_ready __pyx_mstate_global->__pyx_n_s_ready
#define __pyx_n_s_ready_for_new_orders __pyx_mstate_global->__pyx_n_s_ready_for_new_orders
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_return __pyx_mstate_global->__pyx_n_s_return
#define __pyx_n_s_round __pyx_mstate_global->__pyx_n_s_round
#define __pyx_n_s_s_decimal_0 __pyx_mstate_global->__pyx_n_s_s_decimal_0
#define __pyx_n_s_second __pyx_mstate_global->__pyx_n_s_second
#define __pyx_n_s_secondary_to_primary_base_conver __pyx_mstate_global->__pyx_n_s_secondary_to_primary_base_conver
#define __pyx_n_s_secondary_to_primary_quote_conve __pyx_mstate_global->__pyx_n_s_secondary_to_primary_quote_conve
#define __pyx_kp_u_seconds __pyx_mstate_global->__pyx_kp_u_seconds
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_s_self__events_cannot_be_converted __pyx_mstate_global->__pyx_kp_s_self__events_cannot_be_converted
#define __pyx_kp_u_sell_limit_order_completed_on __pyx_mstate_global->__pyx_kp_u_sell_limit_order_completed_on
#define __pyx_n_s_sell_market __pyx_mstate_global->__pyx_n_s_sell_market
#define __pyx_n_s_sell_market_conversion_rate __pyx_mstate_global->__pyx_n_s_sell_market_conversion_rate
#define __pyx_n_s_sell_market_trading_pair __pyx_mstate_global->__pyx_n_s_sell_market_trading_pair
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_smart_round __pyx_mstate_global->__pyx_n_s_smart_round
#define __pyx_n_s_source __pyx_mstate_global->__pyx_n_s_source
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_split __pyx_mstate_global->__pyx_n_s_split
#define __pyx_n_s_staticmethod __pyx_mstate_global->__pyx_n_s_staticmethod
#define __pyx_n_s_status_report_interval __pyx_mstate_global->__pyx_n_s_status_report_interval
#define __pyx_n_u_step_amount __pyx_mstate_global->__pyx_n_u_step_amount
#define __pyx_n_s_str __pyx_mstate_global->__pyx_n_s_str
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_super __pyx_mstate_global->__pyx_n_s_super
#define __pyx_kp_u_take_ask_on __pyx_mstate_global->__pyx_kp_u_take_ask_on
#define __pyx_kp_u_take_ask_on_2 __pyx_mstate_global->__pyx_kp_u_take_ask_on_2
#define __pyx_kp_u_take_bid_on __pyx_mstate_global->__pyx_kp_u_take_bid_on
#define __pyx_kp_u_take_bid_on_2 __pyx_mstate_global->__pyx_kp_u_take_bid_on_2
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_to_string __pyx_mstate_global->__pyx_n_s_to_string
#define __pyx_n_s_tracked_limit_orders __pyx_mstate_global->__pyx_n_s_tracked_limit_orders
#define __pyx_n_s_tracked_limit_orders_data_frame __pyx_mstate_global->__pyx_n_s_tracked_limit_orders_data_frame
#define __pyx_n_s_tracked_limit_orders_df __pyx_mstate_global->__pyx_n_s_tracked_limit_orders_df
#define __pyx_n_s_tracked_market_orders __pyx_mstate_global->__pyx_n_s_tracked_market_orders
#define __pyx_n_s_tracked_market_orders_data_frame __pyx_mstate_global->__pyx_n_s_tracked_market_orders_data_frame
#define __pyx_n_s_tracked_market_orders_df __pyx_mstate_global->__pyx_n_s_tracked_market_orders_df
#define __pyx_n_s_trading_pair __pyx_mstate_global->__pyx_n_s_trading_pair
#define __pyx_n_s_typing __pyx_mstate_global->__pyx_n_s_typing
#define __pyx_n_s_use_oracle_conversion_rate __pyx_mstate_global->__pyx_n_s_use_oracle_conversion_rate
#define __pyx_n_s_wallet_balance_data_frame __pyx_mstate_global->__pyx_n_s_wallet_balance_data_frame
#define __pyx_n_s_warning __pyx_mstate_global->__pyx_n_s_warning
#define __pyx_n_s_warning_lines __pyx_mstate_global->__pyx_n_s_warning_lines
#define __pyx_kp_u_with_amount __pyx_mstate_global->__pyx_kp_u_with_amount
#define __pyx_float_15_0 __pyx_mstate_global->__pyx_float_15_0
#define __pyx_float_60_0 __pyx_mstate_global->__pyx_float_60_0
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_2 __pyx_mstate_global->__pyx_int_2
#define __pyx_int_4 __pyx_mstate_global->__pyx_int_4
#define __pyx_int_8 __pyx_mstate_global->__pyx_int_8
#define __pyx_int_16 __pyx_mstate_global->__pyx_int_16
#define __pyx_int_32 __pyx_mstate_global->__pyx_int_32
#define __pyx_int_100 __pyx_mstate_global->__pyx_int_100
#define __pyx_int_1152921504606846975 __pyx_mstate_global->__pyx_int_1152921504606846975
#define __pyx_k_ __pyx_mstate_global->__pyx_k_
#define __pyx_k__2 __pyx_mstate_global->__pyx_k__2
#define __pyx_k__3 __pyx_mstate_global->__pyx_k__3
#define __pyx_tuple__4 __pyx_mstate_global->__pyx_tuple__4
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__15 __pyx_mstate_global->__pyx_tuple__15
#define __pyx_tuple__17 __pyx_mstate_global->__pyx_tuple__17
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__21 __pyx_mstate_global->__pyx_tuple__21
#define __pyx_tuple__23 __pyx_mstate_global->__pyx_tuple__23
#define __pyx_tuple__25 __pyx_mstate_global->__pyx_tuple__25
#define __pyx_tuple__27 __pyx_mstate_global->__pyx_tuple__27
#define __pyx_tuple__29 __pyx_mstate_global->__pyx_tuple__29
#define __pyx_tuple__31 __pyx_mstate_global->__pyx_tuple__31
#define __pyx_tuple__33 __pyx_mstate_global->__pyx_tuple__33
#define __pyx_tuple__36 __pyx_mstate_global->__pyx_tuple__36
#define __pyx_tuple__38 __pyx_mstate_global->__pyx_tuple__38
#define __pyx_tuple__40 __pyx_mstate_global->__pyx_tuple__40
#define __pyx_tuple__42 __pyx_mstate_global->__pyx_tuple__42
#define __pyx_tuple__44 __pyx_mstate_global->__pyx_tuple__44
#define __pyx_codeobj__19 __pyx_mstate_global->__pyx_codeobj__19
#define __pyx_codeobj__22 __pyx_mstate_global->__pyx_codeobj__22
#define __pyx_codeobj__24 __pyx_mstate_global->__pyx_codeobj__24
#define __pyx_codeobj__26 __pyx_mstate_global->__pyx_codeobj__26
#define __pyx_codeobj__28 __pyx_mstate_global->__pyx_codeobj__28
#define __pyx_codeobj__30 __pyx_mstate_global->__pyx_codeobj__30
#define __pyx_codeobj__32 __pyx_mstate_global->__pyx_codeobj__32
#define __pyx_codeobj__34 __pyx_mstate_global->__pyx_codeobj__34
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__39 __pyx_mstate_global->__pyx_codeobj__39
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__43 __pyx_mstate_global->__pyx_codeobj__43
#define __pyx_codeobj__45 __pyx_mstate_global->__pyx_codeobj__45
#endif
/* #### Code section: module_code ### */

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":40
 *     OPTION_LOG_ALL = 0xfffffffffffffff
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls):
 *         global as_logger
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_1logger(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_1logger = {"logger", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_1logger, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_1logger(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logger (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("logger", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "logger", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_logger(((PyTypeObject*)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_logger(CYTHON_UNUSED PyTypeObject *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("logger", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":43
 *     def logger(cls):
 *         global as_logger
 *         if as_logger is None:             # <<<<<<<<<<<<<<
 *             as_logger = logging.getLogger(__name__)
 *         return as_logger
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_as_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":44
 *         global as_logger
 *         if as_logger is None:
 *             as_logger = logging.getLogger(__name__)             # <<<<<<<<<<<<<<
 *         return as_logger
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logging); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_as_logger, __pyx_t_1) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":43
 *     def logger(cls):
 *         global as_logger
 *         if as_logger is None:             # <<<<<<<<<<<<<<
 *             as_logger = logging.getLogger(__name__)
 *         return as_logger
 */
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":45
 *         if as_logger is None:
 *             as_logger = logging.getLogger(__name__)
 *         return as_logger             # <<<<<<<<<<<<<<
 * 
 *     def init_params(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_as_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":40
 *     OPTION_LOG_ALL = 0xfffffffffffffff
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls):
 *         global as_logger
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.logger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":47
 *         return as_logger
 * 
 *     def init_params(self,             # <<<<<<<<<<<<<<
 *                     market_pairs: List[ArbitrageMarketPair],
 *                     min_profitability: Decimal,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_3init_params(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_2init_params, "\n        :param market_pairs: list of arbitrage market pairs\n        :param min_profitability: minimum profitability limit, for calculating arbitrage order sizes\n        :param logging_options: select the types of logs to output\n        :param status_report_interval: how often to report network connection related warnings, if any\n        :param next_trade_delay_interval: cool off period between trades\n        :param failed_order_tolerance: number of failed orders to force stop the strategy when exceeded\n        :param use_oracle_conversion_rate: Enables the use of the Oracle to get the price in ETH of each quote token to\n        compare the trading pairs in between markets.\n        If true the Oracle will be used. If false the reates will be fetched from uniswap. The default is false.\n        :param secondary_to_primary_base_conversion_rate: Conversion rate of base token between markets. The default is 1\n        :param secondary_to_primary_quote_conversion_rate: Conversion rate of quote token between markets. The default is 1\n        :param hb_app_notification: Enables sending notifications to the client application. The default is false.\n        ");
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_3init_params = {"init_params", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_3init_params, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_2init_params};
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_3init_params(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_market_pairs = 0;
  PyObject *__pyx_v_min_profitability = 0;
  PyObject *__pyx_v_logging_options = 0;
  double __pyx_v_status_report_interval;
  double __pyx_v_next_trade_delay_interval;
  PyObject *__pyx_v_failed_order_tolerance = 0;
  PyObject *__pyx_v_use_oracle_conversion_rate = 0;
  PyObject *__pyx_v_secondary_to_primary_base_conversion_rate = 0;
  PyObject *__pyx_v_secondary_to_primary_quote_conversion_rate = 0;
  PyObject *__pyx_v_hb_app_notification = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_params (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pairs,&__pyx_n_s_min_profitability,&__pyx_n_s_logging_options,&__pyx_n_s_status_report_interval,&__pyx_n_s_next_trade_delay_interval,&__pyx_n_s_failed_order_tolerance,&__pyx_n_s_use_oracle_conversion_rate,&__pyx_n_s_secondary_to_primary_base_conver,&__pyx_n_s_secondary_to_primary_quote_conve,&__pyx_n_s_hb_app_notification,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pairs,&__pyx_n_s_min_profitability,&__pyx_n_s_logging_options,&__pyx_n_s_status_report_interval,&__pyx_n_s_next_trade_delay_interval,&__pyx_n_s_failed_order_tolerance,&__pyx_n_s_use_oracle_conversion_rate,&__pyx_n_s_secondary_to_primary_base_conver,&__pyx_n_s_secondary_to_primary_quote_conve,&__pyx_n_s_hb_app_notification,0};
    #endif
    PyObject* values[10] = {0,0,0,0,0,0,0,0,0,0};
    values[2] = __pyx_k_;
    values[5] = ((PyObject *)__pyx_int_1);

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":54
 *                     next_trade_delay_interval: float = 15.0,
 *                     failed_order_tolerance: int = 1,
 *                     use_oracle_conversion_rate: bool = False,             # <<<<<<<<<<<<<<
 *                     secondary_to_primary_base_conversion_rate: Decimal = Decimal("1"),
 *                     secondary_to_primary_quote_conversion_rate: Decimal = Decimal("1"),
 */
    values[6] = ((PyObject *)Py_False);
    values[7] = __pyx_k__2;
    values[8] = __pyx_k__3;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":57
 *                     secondary_to_primary_base_conversion_rate: Decimal = Decimal("1"),
 *                     secondary_to_primary_quote_conversion_rate: Decimal = Decimal("1"),
 *                     hb_app_notification: bool = False):             # <<<<<<<<<<<<<<
 *         """
 *         :param market_pairs: list of arbitrage market pairs
 */
    values[9] = ((PyObject *)Py_False);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 10: values[9] = __Pyx_Arg_FASTCALL(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_market_pairs)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_min_profitability)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("init_params", 0, 2, 10, 1); __PYX_ERR(0, 47, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_logging_options);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_status_report_interval);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_next_trade_delay_interval);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_failed_order_tolerance);
          if (value) { values[5] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_use_oracle_conversion_rate);
          if (value) { values[6] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_secondary_to_primary_base_conver);
          if (value) { values[7] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_secondary_to_primary_quote_conve);
          if (value) { values[8] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hb_app_notification);
          if (value) { values[9] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 47, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "init_params") < 0)) __PYX_ERR(0, 47, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case 10: values[9] = __Pyx_Arg_FASTCALL(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_market_pairs = values[0];
    __pyx_v_min_profitability = values[1];
    __pyx_v_logging_options = values[2];
    if (values[3]) {
      __pyx_v_status_report_interval = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_status_report_interval == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 51, __pyx_L3_error)
    } else {
      __pyx_v_status_report_interval = ((double)60.0);
    }
    if (values[4]) {
      __pyx_v_next_trade_delay_interval = __pyx_PyFloat_AsDouble(values[4]); if (unlikely((__pyx_v_next_trade_delay_interval == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 52, __pyx_L3_error)
    } else {
      __pyx_v_next_trade_delay_interval = ((double)15.0);
    }
    __pyx_v_failed_order_tolerance = values[5];
    __pyx_v_use_oracle_conversion_rate = values[6];
    __pyx_v_secondary_to_primary_base_conversion_rate = values[7];
    __pyx_v_secondary_to_primary_quote_conversion_rate = values[8];
    __pyx_v_hb_app_notification = values[9];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_params", 0, 2, 10, __pyx_nargs); __PYX_ERR(0, 47, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.init_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_2init_params(((struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self), __pyx_v_market_pairs, __pyx_v_min_profitability, __pyx_v_logging_options, __pyx_v_status_report_interval, __pyx_v_next_trade_delay_interval, __pyx_v_failed_order_tolerance, __pyx_v_use_oracle_conversion_rate, __pyx_v_secondary_to_primary_base_conversion_rate, __pyx_v_secondary_to_primary_quote_conversion_rate, __pyx_v_hb_app_notification);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":47
 *         return as_logger
 * 
 *     def init_params(self,             # <<<<<<<<<<<<<<
 *                     market_pairs: List[ArbitrageMarketPair],
 *                     min_profitability: Decimal,
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_2init_params(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_market_pairs, PyObject *__pyx_v_min_profitability, PyObject *__pyx_v_logging_options, double __pyx_v_status_report_interval, double __pyx_v_next_trade_delay_interval, PyObject *__pyx_v_failed_order_tolerance, PyObject *__pyx_v_use_oracle_conversion_rate, PyObject *__pyx_v_secondary_to_primary_base_conversion_rate, PyObject *__pyx_v_secondary_to_primary_quote_conversion_rate, PyObject *__pyx_v_hb_app_notification) {
  PyObject *__pyx_v_all_markets = 0;
  PyObject *__pyx_7genexpr__pyx_v_market_pair = NULL;
  PyObject *__pyx_7genexpr__pyx_v_market = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int64_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init_params", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":72
 *         :param hb_app_notification: Enables sending notifications to the client application. The default is false.
 *         """
 *         if len(market_pairs) < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"market_pairs must not be empty.")
 *         self._logging_options = logging_options
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_market_pairs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 72, __pyx_L1_error)
  __pyx_t_2 = ((__pyx_t_1 < 0) != 0);
  if (unlikely(__pyx_t_2)) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":73
 *         """
 *         if len(market_pairs) < 0:
 *             raise ValueError(f"market_pairs must not be empty.")             # <<<<<<<<<<<<<<
 *         self._logging_options = logging_options
 *         self._market_pairs = market_pairs
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(0, 73, __pyx_L1_error)

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":72
 *         :param hb_app_notification: Enables sending notifications to the client application. The default is false.
 *         """
 *         if len(market_pairs) < 0:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"market_pairs must not be empty.")
 *         self._logging_options = logging_options
 */
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":74
 *         if len(market_pairs) < 0:
 *             raise ValueError(f"market_pairs must not be empty.")
 *         self._logging_options = logging_options             # <<<<<<<<<<<<<<
 *         self._market_pairs = market_pairs
 *         self._min_profitability = min_profitability
 */
  __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_v_logging_options); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_v_self->_logging_options = __pyx_t_4;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":75
 *             raise ValueError(f"market_pairs must not be empty.")
 *         self._logging_options = logging_options
 *         self._market_pairs = market_pairs             # <<<<<<<<<<<<<<
 *         self._min_profitability = min_profitability
 *         self._all_markets_ready = False
 */
  if (!(likely(PyList_CheckExact(__pyx_v_market_pairs))||((__pyx_v_market_pairs) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_v_market_pairs))) __PYX_ERR(0, 75, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_market_pairs;
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_market_pairs);
  __Pyx_DECREF(__pyx_v_self->_market_pairs);
  __pyx_v_self->_market_pairs = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":76
 *         self._logging_options = logging_options
 *         self._market_pairs = market_pairs
 *         self._min_profitability = min_profitability             # <<<<<<<<<<<<<<
 *         self._all_markets_ready = False
 *         self._status_report_interval = status_report_interval
 */
  __Pyx_INCREF(__pyx_v_min_profitability);
  __Pyx_GIVEREF(__pyx_v_min_profitability);
  __Pyx_GOTREF(__pyx_v_self->_min_profitability);
  __Pyx_DECREF(__pyx_v_self->_min_profitability);
  __pyx_v_self->_min_profitability = __pyx_v_min_profitability;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":77
 *         self._market_pairs = market_pairs
 *         self._min_profitability = min_profitability
 *         self._all_markets_ready = False             # <<<<<<<<<<<<<<
 *         self._status_report_interval = status_report_interval
 *         self._last_timestamp = 0
 */
  __pyx_v_self->_all_markets_ready = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":78
 *         self._min_profitability = min_profitability
 *         self._all_markets_ready = False
 *         self._status_report_interval = status_report_interval             # <<<<<<<<<<<<<<
 *         self._last_timestamp = 0
 *         self._next_trade_delay = next_trade_delay_interval
 */
  __pyx_v_self->_status_report_interval = __pyx_v_status_report_interval;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":79
 *         self._all_markets_ready = False
 *         self._status_report_interval = status_report_interval
 *         self._last_timestamp = 0             # <<<<<<<<<<<<<<
 *         self._next_trade_delay = next_trade_delay_interval
 *         self._last_trade_timestamps = {}
 */
  __pyx_v_self->_last_timestamp = 0.0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":80
 *         self._status_report_interval = status_report_interval
 *         self._last_timestamp = 0
 *         self._next_trade_delay = next_trade_delay_interval             # <<<<<<<<<<<<<<
 *         self._last_trade_timestamps = {}
 *         self._failed_order_tolerance = failed_order_tolerance
 */
  __pyx_v_self->_next_trade_delay = __pyx_v_next_trade_delay_interval;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":81
 *         self._last_timestamp = 0
 *         self._next_trade_delay = next_trade_delay_interval
 *         self._last_trade_timestamps = {}             # <<<<<<<<<<<<<<
 *         self._failed_order_tolerance = failed_order_tolerance
 *         self._cool_off_logged = False
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_last_trade_timestamps);
  __Pyx_DECREF(__pyx_v_self->_last_trade_timestamps);
  __pyx_v_self->_last_trade_timestamps = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":82
 *         self._next_trade_delay = next_trade_delay_interval
 *         self._last_trade_timestamps = {}
 *         self._failed_order_tolerance = failed_order_tolerance             # <<<<<<<<<<<<<<
 *         self._cool_off_logged = False
 *         self._current_profitability = ()
 */
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_failed_order_tolerance); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 82, __pyx_L1_error)
  __pyx_v_self->_failed_order_tolerance = __pyx_t_5;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":83
 *         self._last_trade_timestamps = {}
 *         self._failed_order_tolerance = failed_order_tolerance
 *         self._cool_off_logged = False             # <<<<<<<<<<<<<<
 *         self._current_profitability = ()
 *         self._use_oracle_conversion_rate = use_oracle_conversion_rate
 */
  __pyx_v_self->_cool_off_logged = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":84
 *         self._failed_order_tolerance = failed_order_tolerance
 *         self._cool_off_logged = False
 *         self._current_profitability = ()             # <<<<<<<<<<<<<<
 *         self._use_oracle_conversion_rate = use_oracle_conversion_rate
 *         self._secondary_to_primary_base_conversion_rate = secondary_to_primary_base_conversion_rate
 */
  __Pyx_INCREF(__pyx_empty_tuple);
  __Pyx_GIVEREF(__pyx_empty_tuple);
  __Pyx_GOTREF(__pyx_v_self->_current_profitability);
  __Pyx_DECREF(__pyx_v_self->_current_profitability);
  __pyx_v_self->_current_profitability = __pyx_empty_tuple;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":85
 *         self._cool_off_logged = False
 *         self._current_profitability = ()
 *         self._use_oracle_conversion_rate = use_oracle_conversion_rate             # <<<<<<<<<<<<<<
 *         self._secondary_to_primary_base_conversion_rate = secondary_to_primary_base_conversion_rate
 *         self._secondary_to_primary_quote_conversion_rate = secondary_to_primary_quote_conversion_rate
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_use_oracle_conversion_rate); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 85, __pyx_L1_error)
  __pyx_v_self->_use_oracle_conversion_rate = __pyx_t_2;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":86
 *         self._current_profitability = ()
 *         self._use_oracle_conversion_rate = use_oracle_conversion_rate
 *         self._secondary_to_primary_base_conversion_rate = secondary_to_primary_base_conversion_rate             # <<<<<<<<<<<<<<
 *         self._secondary_to_primary_quote_conversion_rate = secondary_to_primary_quote_conversion_rate
 *         self._last_conv_rates_logged = 0
 */
  __Pyx_INCREF(__pyx_v_secondary_to_primary_base_conversion_rate);
  __Pyx_GIVEREF(__pyx_v_secondary_to_primary_base_conversion_rate);
  __Pyx_GOTREF(__pyx_v_self->_secondary_to_primary_base_conversion_rate);
  __Pyx_DECREF(__pyx_v_self->_secondary_to_primary_base_conversion_rate);
  __pyx_v_self->_secondary_to_primary_base_conversion_rate = __pyx_v_secondary_to_primary_base_conversion_rate;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":87
 *         self._use_oracle_conversion_rate = use_oracle_conversion_rate
 *         self._secondary_to_primary_base_conversion_rate = secondary_to_primary_base_conversion_rate
 *         self._secondary_to_primary_quote_conversion_rate = secondary_to_primary_quote_conversion_rate             # <<<<<<<<<<<<<<
 *         self._last_conv_rates_logged = 0
 * 
 */
  __Pyx_INCREF(__pyx_v_secondary_to_primary_quote_conversion_rate);
  __Pyx_GIVEREF(__pyx_v_secondary_to_primary_quote_conversion_rate);
  __Pyx_GOTREF(__pyx_v_self->_secondary_to_primary_quote_conversion_rate);
  __Pyx_DECREF(__pyx_v_self->_secondary_to_primary_quote_conversion_rate);
  __pyx_v_self->_secondary_to_primary_quote_conversion_rate = __pyx_v_secondary_to_primary_quote_conversion_rate;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":88
 *         self._secondary_to_primary_base_conversion_rate = secondary_to_primary_base_conversion_rate
 *         self._secondary_to_primary_quote_conversion_rate = secondary_to_primary_quote_conversion_rate
 *         self._last_conv_rates_logged = 0             # <<<<<<<<<<<<<<
 * 
 *         self._hb_app_notification = hb_app_notification
 */
  __pyx_v_self->_last_conv_rates_logged = 0.0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":90
 *         self._last_conv_rates_logged = 0
 * 
 *         self._hb_app_notification = hb_app_notification             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_hb_app_notification); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 90, __pyx_L1_error)
  __pyx_v_self->_hb_app_notification = __pyx_t_2;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":93
 * 
 *         cdef:
 *             set all_markets = {             # <<<<<<<<<<<<<<
 *                 market
 *                 for market_pair in self._market_pairs
 */
  { /* enter inner scope */
    __pyx_t_3 = PySet_New(NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 93, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":95
 *             set all_markets = {
 *                 market
 *                 for market_pair in self._market_pairs             # <<<<<<<<<<<<<<
 *                 for market in [market_pair.first.market, market_pair.second.market]
 *             }
 */
    if (unlikely(__pyx_v_self->_market_pairs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 95, __pyx_L6_error)
    }
    __pyx_t_6 = __pyx_v_self->_market_pairs; __Pyx_INCREF(__pyx_t_6); __pyx_t_1 = 0;
    for (;;) {
      if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_6)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_7 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_1); __Pyx_INCREF(__pyx_t_7); __pyx_t_1++; if (unlikely((0 < 0))) __PYX_ERR(0, 95, __pyx_L6_error)
      #else
      __pyx_t_7 = PySequence_ITEM(__pyx_t_6, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 95, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_market_pair, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":96
 *                 market
 *                 for market_pair in self._market_pairs
 *                 for market in [market_pair.first.market, market_pair.second.market]             # <<<<<<<<<<<<<<
 *             }
 * 
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_7genexpr__pyx_v_market_pair, __pyx_n_s_first); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 96, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_market); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 96, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_7genexpr__pyx_v_market_pair, __pyx_n_s_second); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 96, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_market); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 96, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 96, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_9);
      __pyx_t_8 = 0;
      __pyx_t_9 = 0;
      __pyx_t_9 = __pyx_t_7; __Pyx_INCREF(__pyx_t_9); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      for (;;) {
        if (__pyx_t_10 >= 2) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_10); __Pyx_INCREF(__pyx_t_7); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 96, __pyx_L6_error)
        #else
        __pyx_t_7 = PySequence_ITEM(__pyx_t_9, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 96, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_7);
        #endif
        __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_market, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":94
 *         cdef:
 *             set all_markets = {
 *                 market             # <<<<<<<<<<<<<<
 *                 for market_pair in self._market_pairs
 *                 for market in [market_pair.first.market, market_pair.second.market]
 */
        if (unlikely(PySet_Add(__pyx_t_3, (PyObject*)__pyx_7genexpr__pyx_v_market))) __PYX_ERR(0, 94, __pyx_L6_error)

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":96
 *                 market
 *                 for market_pair in self._market_pairs
 *                 for market in [market_pair.first.market, market_pair.second.market]             # <<<<<<<<<<<<<<
 *             }
 * 
 */
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":95
 *             set all_markets = {
 *                 market
 *                 for market_pair in self._market_pairs             # <<<<<<<<<<<<<<
 *                 for market in [market_pair.first.market, market_pair.second.market]
 *             }
 */
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_market); __pyx_7genexpr__pyx_v_market = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_market_pair); __pyx_7genexpr__pyx_v_market_pair = 0;
    goto __pyx_L11_exit_scope;
    __pyx_L6_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_market); __pyx_7genexpr__pyx_v_market = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_market_pair); __pyx_7genexpr__pyx_v_market_pair = 0;
    goto __pyx_L1_error;
    __pyx_L11_exit_scope:;
  } /* exit inner scope */
  __pyx_v_all_markets = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":99
 *             }
 * 
 *         self.c_add_markets(list(all_markets))             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_3 = PySequence_List(__pyx_v_all_markets); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_add_markets(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), ((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":47
 *         return as_logger
 * 
 *     def init_params(self,             # <<<<<<<<<<<<<<
 *                     market_pairs: List[ArbitrageMarketPair],
 *                     min_profitability: Decimal,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.init_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_all_markets);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_market_pair);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_market);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":101
 *         self.c_add_markets(list(all_markets))
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def min_profitability(self) -> Decimal:
 *         return self._min_profitability
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_17min_profitability_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_17min_profitability_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_17min_profitability___get__(((struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_17min_profitability___get__(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":103
 *     @property
 *     def min_profitability(self) -> Decimal:
 *         return self._min_profitability             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_min_profitability);
  __pyx_r = __pyx_v_self->_min_profitability;
  goto __pyx_L0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":101
 *         self.c_add_markets(list(all_markets))
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def min_profitability(self) -> Decimal:
 *         return self._min_profitability
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":105
 *         return self._min_profitability
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def use_oracle_conversion_rate(self) -> Decimal:
 *         return self._use_oracle_conversion_rate
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_26use_oracle_conversion_rate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_26use_oracle_conversion_rate_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_26use_oracle_conversion_rate___get__(((struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_26use_oracle_conversion_rate___get__(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":107
 *     @property
 *     def use_oracle_conversion_rate(self) -> Decimal:
 *         return self._use_oracle_conversion_rate             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_use_oracle_conversion_rate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":105
 *         return self._min_profitability
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def use_oracle_conversion_rate(self) -> Decimal:
 *         return self._use_oracle_conversion_rate
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.use_oracle_conversion_rate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":109
 *         return self._use_oracle_conversion_rate
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def tracked_limit_orders(self) -> List[Tuple[ExchangeBase, LimitOrder]]:
 *         return self._sb_order_tracker.tracked_limit_orders
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_20tracked_limit_orders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_20tracked_limit_orders_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_20tracked_limit_orders___get__(((struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_20tracked_limit_orders___get__(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":111
 *     @property
 *     def tracked_limit_orders(self) -> List[Tuple[ExchangeBase, LimitOrder]]:
 *         return self._sb_order_tracker.tracked_limit_orders             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base._sb_order_tracker), __pyx_n_s_tracked_limit_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":109
 *         return self._use_oracle_conversion_rate
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def tracked_limit_orders(self) -> List[Tuple[ExchangeBase, LimitOrder]]:
 *         return self._sb_order_tracker.tracked_limit_orders
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.tracked_limit_orders.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":113
 *         return self._sb_order_tracker.tracked_limit_orders
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def tracked_market_orders(self) -> List[Tuple[ExchangeBase, MarketOrder]]:
 *         return self._sb_order_tracker.tracked_market_orders
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_21tracked_market_orders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_21tracked_market_orders_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_21tracked_market_orders___get__(((struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_21tracked_market_orders___get__(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":115
 *     @property
 *     def tracked_market_orders(self) -> List[Tuple[ExchangeBase, MarketOrder]]:
 *         return self._sb_order_tracker.tracked_market_orders             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base._sb_order_tracker), __pyx_n_s_tracked_market_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":113
 *         return self._sb_order_tracker.tracked_limit_orders
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def tracked_market_orders(self) -> List[Tuple[ExchangeBase, MarketOrder]]:
 *         return self._sb_order_tracker.tracked_market_orders
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.tracked_market_orders.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":117
 *         return self._sb_order_tracker.tracked_market_orders
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def tracked_limit_orders_data_frame(self) -> List[pd.DataFrame]:
 *         return self._sb_order_tracker.tracked_limit_orders_data_frame
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_31tracked_limit_orders_data_frame_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_31tracked_limit_orders_data_frame_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_31tracked_limit_orders_data_frame___get__(((struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_31tracked_limit_orders_data_frame___get__(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":119
 *     @property
 *     def tracked_limit_orders_data_frame(self) -> List[pd.DataFrame]:
 *         return self._sb_order_tracker.tracked_limit_orders_data_frame             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base._sb_order_tracker), __pyx_n_s_tracked_limit_orders_data_frame); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":117
 *         return self._sb_order_tracker.tracked_market_orders
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def tracked_limit_orders_data_frame(self) -> List[pd.DataFrame]:
 *         return self._sb_order_tracker.tracked_limit_orders_data_frame
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.tracked_limit_orders_data_frame.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":121
 *         return self._sb_order_tracker.tracked_limit_orders_data_frame
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def tracked_market_orders_data_frame(self) -> List[pd.DataFrame]:
 *         return self._sb_order_tracker.tracked_market_orders_data_frame
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_32tracked_market_orders_data_frame_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_32tracked_market_orders_data_frame_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_32tracked_market_orders_data_frame___get__(((struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_32tracked_market_orders_data_frame___get__(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":123
 *     @property
 *     def tracked_market_orders_data_frame(self) -> List[pd.DataFrame]:
 *         return self._sb_order_tracker.tracked_market_orders_data_frame             # <<<<<<<<<<<<<<
 * 
 *     def get_second_to_first_conversion_rate(self) -> Tuple[str, Decimal, str, Decimal]:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base._sb_order_tracker), __pyx_n_s_tracked_market_orders_data_frame); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":121
 *         return self._sb_order_tracker.tracked_limit_orders_data_frame
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def tracked_market_orders_data_frame(self) -> List[pd.DataFrame]:
 *         return self._sb_order_tracker.tracked_market_orders_data_frame
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.tracked_market_orders_data_frame.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":125
 *         return self._sb_order_tracker.tracked_market_orders_data_frame
 * 
 *     def get_second_to_first_conversion_rate(self) -> Tuple[str, Decimal, str, Decimal]:             # <<<<<<<<<<<<<<
 *         """
 *         Find conversion rates from secondary market to primary market
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_5get_second_to_first_conversion_rate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_4get_second_to_first_conversion_rate, "\n        Find conversion rates from secondary market to primary market\n        :return: A tuple of quote pair symbol, quote conversion rate source, quote conversion rate,\n        base pair symbol, base conversion rate source, base conversion rate\n        ");
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_5get_second_to_first_conversion_rate = {"get_second_to_first_conversion_rate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_5get_second_to_first_conversion_rate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_4get_second_to_first_conversion_rate};
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_5get_second_to_first_conversion_rate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_second_to_first_conversion_rate (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_second_to_first_conversion_rate", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_second_to_first_conversion_rate", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_4get_second_to_first_conversion_rate(((struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_4get_second_to_first_conversion_rate(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self) {
  PyObject *__pyx_v_quote_rate = NULL;
  PyObject *__pyx_v_quote_pair = NULL;
  PyObject *__pyx_v_quote_rate_source = NULL;
  PyObject *__pyx_v_base_rate = NULL;
  PyObject *__pyx_v_base_pair = NULL;
  PyObject *__pyx_v_base_rate_source = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_UCS4 __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_second_to_first_conversion_rate", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":131
 *         base pair symbol, base conversion rate source, base conversion rate
 *         """
 *         quote_rate = Decimal("1")             # <<<<<<<<<<<<<<
 *         quote_pair = f"{self._market_pairs[0].second.quote_asset}-{self._market_pairs[0].first.quote_asset}"
 *         quote_rate_source = "fixed"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_u_1};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_quote_rate = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":132
 *         """
 *         quote_rate = Decimal("1")
 *         quote_pair = f"{self._market_pairs[0].second.quote_asset}-{self._market_pairs[0].first.quote_asset}"             # <<<<<<<<<<<<<<
 *         quote_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:
 */
  __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = 0;
  __pyx_t_6 = 127;
  if (unlikely(__pyx_v_self->_market_pairs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 132, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_self->_market_pairs, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_second); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_kp_u__5);
  __pyx_t_5 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__5);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u__5);
  if (unlikely(__pyx_v_self->_market_pairs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 132, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_self->_market_pairs, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_first); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_quote_pair = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":133
 *         quote_rate = Decimal("1")
 *         quote_pair = f"{self._market_pairs[0].second.quote_asset}-{self._market_pairs[0].first.quote_asset}"
 *         quote_rate_source = "fixed"             # <<<<<<<<<<<<<<
 *         if self._use_oracle_conversion_rate:
 *             if self._market_pairs[0].second.quote_asset != self._market_pairs[0].first.quote_asset:
 */
  __Pyx_INCREF(__pyx_n_u_fixed);
  __pyx_v_quote_rate_source = __pyx_n_u_fixed;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":134
 *         quote_pair = f"{self._market_pairs[0].second.quote_asset}-{self._market_pairs[0].first.quote_asset}"
 *         quote_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:             # <<<<<<<<<<<<<<
 *             if self._market_pairs[0].second.quote_asset != self._market_pairs[0].first.quote_asset:
 *                 quote_rate_source = RateOracle.source.name
 */
  __pyx_t_7 = (__pyx_v_self->_use_oracle_conversion_rate != 0);
  if (__pyx_t_7) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":135
 *         quote_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:
 *             if self._market_pairs[0].second.quote_asset != self._market_pairs[0].first.quote_asset:             # <<<<<<<<<<<<<<
 *                 quote_rate_source = RateOracle.source.name
 *                 quote_rate = RateOracle.get_instance().rate(quote_pair)
 */
    if (unlikely(__pyx_v_self->_market_pairs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 135, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_self->_market_pairs, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_second); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(__pyx_v_self->_market_pairs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 135, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->_market_pairs, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_first); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 135, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_7) {

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":136
 *         if self._use_oracle_conversion_rate:
 *             if self._market_pairs[0].second.quote_asset != self._market_pairs[0].first.quote_asset:
 *                 quote_rate_source = RateOracle.source.name             # <<<<<<<<<<<<<<
 *                 quote_rate = RateOracle.get_instance().rate(quote_pair)
 *         else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_RateOracle); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_source); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_name_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 136, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_quote_rate_source, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":137
 *             if self._market_pairs[0].second.quote_asset != self._market_pairs[0].first.quote_asset:
 *                 quote_rate_source = RateOracle.source.name
 *                 quote_rate = RateOracle.get_instance().rate(quote_pair)             # <<<<<<<<<<<<<<
 *         else:
 *             quote_rate = self._secondary_to_primary_quote_conversion_rate
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_RateOracle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_instance); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_4 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_2, };
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 137, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_rate); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_4 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_quote_pair};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 137, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF_SET(__pyx_v_quote_rate, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":135
 *         quote_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:
 *             if self._market_pairs[0].second.quote_asset != self._market_pairs[0].first.quote_asset:             # <<<<<<<<<<<<<<
 *                 quote_rate_source = RateOracle.source.name
 *                 quote_rate = RateOracle.get_instance().rate(quote_pair)
 */
    }

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":134
 *         quote_pair = f"{self._market_pairs[0].second.quote_asset}-{self._market_pairs[0].first.quote_asset}"
 *         quote_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:             # <<<<<<<<<<<<<<
 *             if self._market_pairs[0].second.quote_asset != self._market_pairs[0].first.quote_asset:
 *                 quote_rate_source = RateOracle.source.name
 */
    goto __pyx_L3;
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":139
 *                 quote_rate = RateOracle.get_instance().rate(quote_pair)
 *         else:
 *             quote_rate = self._secondary_to_primary_quote_conversion_rate             # <<<<<<<<<<<<<<
 *         base_rate = Decimal("1")
 *         base_pair = f"{self._market_pairs[0].second.base_asset}-{self._market_pairs[0].first.base_asset}"
 */
  /*else*/ {
    __pyx_t_3 = __pyx_v_self->_secondary_to_primary_quote_conversion_rate;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_quote_rate, __pyx_t_3);
    __pyx_t_3 = 0;
  }
  __pyx_L3:;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":140
 *         else:
 *             quote_rate = self._secondary_to_primary_quote_conversion_rate
 *         base_rate = Decimal("1")             # <<<<<<<<<<<<<<
 *         base_pair = f"{self._market_pairs[0].second.base_asset}-{self._market_pairs[0].first.base_asset}"
 *         base_rate_source = "fixed"
 */
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_kp_u_1};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __pyx_v_base_rate = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":141
 *             quote_rate = self._secondary_to_primary_quote_conversion_rate
 *         base_rate = Decimal("1")
 *         base_pair = f"{self._market_pairs[0].second.base_asset}-{self._market_pairs[0].first.base_asset}"             # <<<<<<<<<<<<<<
 *         base_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:
 */
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = 0;
  __pyx_t_6 = 127;
  if (unlikely(__pyx_v_self->_market_pairs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 141, __pyx_L1_error)
  }
  __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_self->_market_pairs, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_second); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __Pyx_INCREF(__pyx_kp_u__5);
  __pyx_t_5 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__5);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_kp_u__5);
  if (unlikely(__pyx_v_self->_market_pairs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 141, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->_market_pairs, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_first); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_6) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_6;
  __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_base_pair = ((PyObject*)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":142
 *         base_rate = Decimal("1")
 *         base_pair = f"{self._market_pairs[0].second.base_asset}-{self._market_pairs[0].first.base_asset}"
 *         base_rate_source = "fixed"             # <<<<<<<<<<<<<<
 *         if self._use_oracle_conversion_rate:
 *             if self._market_pairs[0].second.base_asset != self._market_pairs[0].first.base_asset:
 */
  __Pyx_INCREF(__pyx_n_u_fixed);
  __pyx_v_base_rate_source = __pyx_n_u_fixed;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":143
 *         base_pair = f"{self._market_pairs[0].second.base_asset}-{self._market_pairs[0].first.base_asset}"
 *         base_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:             # <<<<<<<<<<<<<<
 *             if self._market_pairs[0].second.base_asset != self._market_pairs[0].first.base_asset:
 *                 base_rate_source = RateOracle.source.name
 */
  __pyx_t_7 = (__pyx_v_self->_use_oracle_conversion_rate != 0);
  if (__pyx_t_7) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":144
 *         base_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:
 *             if self._market_pairs[0].second.base_asset != self._market_pairs[0].first.base_asset:             # <<<<<<<<<<<<<<
 *                 base_rate_source = RateOracle.source.name
 *                 base_rate = RateOracle.get_instance().rate(base_pair)
 */
    if (unlikely(__pyx_v_self->_market_pairs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 144, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_GetItemInt_List(__pyx_v_self->_market_pairs, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_second); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(__pyx_v_self->_market_pairs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 144, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_GetItemInt_List(__pyx_v_self->_market_pairs, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_first); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_8, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 144, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_7) {

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":145
 *         if self._use_oracle_conversion_rate:
 *             if self._market_pairs[0].second.base_asset != self._market_pairs[0].first.base_asset:
 *                 base_rate_source = RateOracle.source.name             # <<<<<<<<<<<<<<
 *                 base_rate = RateOracle.get_instance().rate(base_pair)
 *         else:
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_RateOracle); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_source); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_name_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF_SET(__pyx_v_base_rate_source, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":146
 *             if self._market_pairs[0].second.base_asset != self._market_pairs[0].first.base_asset:
 *                 base_rate_source = RateOracle.source.name
 *                 base_rate = RateOracle.get_instance().rate(base_pair)             # <<<<<<<<<<<<<<
 *         else:
 *             base_rate = self._secondary_to_primary_base_conversion_rate
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_RateOracle); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_get_instance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_4 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_8, };
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 146, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_4 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_base_pair};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 146, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF_SET(__pyx_v_base_rate, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":144
 *         base_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:
 *             if self._market_pairs[0].second.base_asset != self._market_pairs[0].first.base_asset:             # <<<<<<<<<<<<<<
 *                 base_rate_source = RateOracle.source.name
 *                 base_rate = RateOracle.get_instance().rate(base_pair)
 */
    }

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":143
 *         base_pair = f"{self._market_pairs[0].second.base_asset}-{self._market_pairs[0].first.base_asset}"
 *         base_rate_source = "fixed"
 *         if self._use_oracle_conversion_rate:             # <<<<<<<<<<<<<<
 *             if self._market_pairs[0].second.base_asset != self._market_pairs[0].first.base_asset:
 *                 base_rate_source = RateOracle.source.name
 */
    goto __pyx_L5;
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":148
 *                 base_rate = RateOracle.get_instance().rate(base_pair)
 *         else:
 *             base_rate = self._secondary_to_primary_base_conversion_rate             # <<<<<<<<<<<<<<
 *         return quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate
 * 
 */
  /*else*/ {
    __pyx_t_1 = __pyx_v_self->_secondary_to_primary_base_conversion_rate;
    __Pyx_INCREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_base_rate, __pyx_t_1);
    __pyx_t_1 = 0;
  }
  __pyx_L5:;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":149
 *         else:
 *             base_rate = self._secondary_to_primary_base_conversion_rate
 *         return quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate             # <<<<<<<<<<<<<<
 * 
 *     def log_conversion_rates(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_quote_pair);
  __Pyx_GIVEREF(__pyx_v_quote_pair);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_quote_pair);
  __Pyx_INCREF(__pyx_v_quote_rate_source);
  __Pyx_GIVEREF(__pyx_v_quote_rate_source);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_quote_rate_source);
  __Pyx_INCREF(__pyx_v_quote_rate);
  __Pyx_GIVEREF(__pyx_v_quote_rate);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_quote_rate);
  __Pyx_INCREF(__pyx_v_base_pair);
  __Pyx_GIVEREF(__pyx_v_base_pair);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_base_pair);
  __Pyx_INCREF(__pyx_v_base_rate_source);
  __Pyx_GIVEREF(__pyx_v_base_rate_source);
  PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_v_base_rate_source);
  __Pyx_INCREF(__pyx_v_base_rate);
  __Pyx_GIVEREF(__pyx_v_base_rate);
  PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_v_base_rate);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":125
 *         return self._sb_order_tracker.tracked_market_orders_data_frame
 * 
 *     def get_second_to_first_conversion_rate(self) -> Tuple[str, Decimal, str, Decimal]:             # <<<<<<<<<<<<<<
 *         """
 *         Find conversion rates from secondary market to primary market
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.get_second_to_first_conversion_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_quote_rate);
  __Pyx_XDECREF(__pyx_v_quote_pair);
  __Pyx_XDECREF(__pyx_v_quote_rate_source);
  __Pyx_XDECREF(__pyx_v_base_rate);
  __Pyx_XDECREF(__pyx_v_base_pair);
  __Pyx_XDECREF(__pyx_v_base_rate_source);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":151
 *         return quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate
 * 
 *     def log_conversion_rates(self):             # <<<<<<<<<<<<<<
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_second_to_first_conversion_rate()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_7log_conversion_rates(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_7log_conversion_rates = {"log_conversion_rates", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_7log_conversion_rates, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_7log_conversion_rates(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("log_conversion_rates (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("log_conversion_rates", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "log_conversion_rates", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_6log_conversion_rates(((struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_6log_conversion_rates(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self) {
  PyObject *__pyx_v_quote_pair = NULL;
  PyObject *__pyx_v_quote_rate_source = NULL;
  PyObject *__pyx_v_quote_rate = NULL;
  PyObject *__pyx_v_base_pair = NULL;
  PyObject *__pyx_v_base_rate_source = NULL;
  PyObject *__pyx_v_base_rate = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  Py_UCS4 __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("log_conversion_rates", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":153
 *     def log_conversion_rates(self):
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_second_to_first_conversion_rate()             # <<<<<<<<<<<<<<
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:
 *             self.logger().info(f"{quote_pair} ({quote_rate_source}) conversion rate: {PerformanceMetrics.smart_round(quote_rate)}")
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_second_to_first_conversion_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 6)) {
      if (size > 6) __Pyx_RaiseTooManyValuesError(6);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 152, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 5); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 5); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_8);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
      for (i=0; i < 6; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 152, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
    __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_9);
    for (index=0; index < 6; index++) {
      PyObject* item = __pyx_t_10(__pyx_t_9); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 6) < 0) __PYX_ERR(0, 152, __pyx_L1_error)
    __pyx_t_10 = NULL;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 152, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":152
 * 
 *     def log_conversion_rates(self):
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \             # <<<<<<<<<<<<<<
 *             self.get_second_to_first_conversion_rate()
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:
 */
  __pyx_v_quote_pair = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_quote_rate_source = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_quote_rate = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_base_pair = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_base_rate_source = __pyx_t_7;
  __pyx_t_7 = 0;
  __pyx_v_base_rate = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":154
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_second_to_first_conversion_rate()
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:             # <<<<<<<<<<<<<<
 *             self.logger().info(f"{quote_pair} ({quote_rate_source}) conversion rate: {PerformanceMetrics.smart_round(quote_rate)}")
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_quote_pair, __pyx_n_s_split); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_kp_u__5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_quote_pair, __pyx_n_s_split); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_kp_u__5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_8, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_11) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":155
 *             self.get_second_to_first_conversion_rate()
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:
 *             self.logger().info(f"{quote_pair} ({quote_rate_source}) conversion rate: {PerformanceMetrics.smart_round(quote_rate)}")             # <<<<<<<<<<<<<<
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:
 *             self.logger().info(f"{base_pair} ({base_rate_source}) conversion rate: {PerformanceMetrics.smart_round(base_rate)}")
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_6, };
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = 0;
    __pyx_t_13 = 127;
    __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_quote_pair, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u__6);
    __pyx_t_12 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__6);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_kp_u__6);
    __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_quote_rate_source, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u_conversion_rate);
    __pyx_t_12 += 19;
    __Pyx_GIVEREF(__pyx_kp_u_conversion_rate);
    PyTuple_SET_ITEM(__pyx_t_7, 3, __pyx_kp_u_conversion_rate);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_smart_round); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_quote_rate};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_7, 4, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_7, 5, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":154
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_second_to_first_conversion_rate()
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:             # <<<<<<<<<<<<<<
 *             self.logger().info(f"{quote_pair} ({quote_rate_source}) conversion rate: {PerformanceMetrics.smart_round(quote_rate)}")
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:
 */
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":156
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:
 *             self.logger().info(f"{quote_pair} ({quote_rate_source}) conversion rate: {PerformanceMetrics.smart_round(quote_rate)}")
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:             # <<<<<<<<<<<<<<
 *             self.logger().info(f"{base_pair} ({base_rate_source}) conversion rate: {PerformanceMetrics.smart_round(base_rate)}")
 * 
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_base_pair, __pyx_n_s_split); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_u__5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_base_pair, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_kp_u__5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_8, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_11) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":157
 *             self.logger().info(f"{quote_pair} ({quote_rate_source}) conversion rate: {PerformanceMetrics.smart_round(quote_rate)}")
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:
 *             self.logger().info(f"{base_pair} ({base_rate_source}) conversion rate: {PerformanceMetrics.smart_round(base_rate)}")             # <<<<<<<<<<<<<<
 * 
 *     def oracle_status_df(self):
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_7, };
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyTuple_New(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_12 = 0;
    __pyx_t_13 = 127;
    __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_base_pair, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u__6);
    __pyx_t_12 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__6);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_kp_u__6);
    __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_v_base_rate_source, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u_conversion_rate);
    __pyx_t_12 += 19;
    __Pyx_GIVEREF(__pyx_kp_u_conversion_rate);
    PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_kp_u_conversion_rate);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_smart_round); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_base_rate};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_3, 5, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":156
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:
 *             self.logger().info(f"{quote_pair} ({quote_rate_source}) conversion rate: {PerformanceMetrics.smart_round(quote_rate)}")
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:             # <<<<<<<<<<<<<<
 *             self.logger().info(f"{base_pair} ({base_rate_source}) conversion rate: {PerformanceMetrics.smart_round(base_rate)}")
 * 
 */
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":151
 *         return quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate
 * 
 *     def log_conversion_rates(self):             # <<<<<<<<<<<<<<
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_second_to_first_conversion_rate()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.log_conversion_rates", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_quote_pair);
  __Pyx_XDECREF(__pyx_v_quote_rate_source);
  __Pyx_XDECREF(__pyx_v_quote_rate);
  __Pyx_XDECREF(__pyx_v_base_pair);
  __Pyx_XDECREF(__pyx_v_base_rate_source);
  __Pyx_XDECREF(__pyx_v_base_rate);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":159
 *             self.logger().info(f"{base_pair} ({base_rate_source}) conversion rate: {PerformanceMetrics.smart_round(base_rate)}")
 * 
 *     def oracle_status_df(self):             # <<<<<<<<<<<<<<
 *         columns = ["Source", "Pair", "Rate"]
 *         data = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_9oracle_status_df(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_9oracle_status_df = {"oracle_status_df", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_9oracle_status_df, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_9oracle_status_df(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("oracle_status_df (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("oracle_status_df", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "oracle_status_df", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_8oracle_status_df(((struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_8oracle_status_df(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self) {
  PyObject *__pyx_v_columns = NULL;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_v_quote_pair = NULL;
  PyObject *__pyx_v_quote_rate_source = NULL;
  PyObject *__pyx_v_quote_rate = NULL;
  PyObject *__pyx_v_base_pair = NULL;
  PyObject *__pyx_v_base_rate_source = NULL;
  PyObject *__pyx_v_base_rate = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("oracle_status_df", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":160
 * 
 *     def oracle_status_df(self):
 *         columns = ["Source", "Pair", "Rate"]             # <<<<<<<<<<<<<<
 *         data = []
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 */
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_Source);
  __Pyx_GIVEREF(__pyx_n_u_Source);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_Source);
  __Pyx_INCREF(__pyx_n_u_Pair);
  __Pyx_GIVEREF(__pyx_n_u_Pair);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_Pair);
  __Pyx_INCREF(__pyx_n_u_Rate);
  __Pyx_GIVEREF(__pyx_n_u_Rate);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_u_Rate);
  __pyx_v_columns = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":161
 *     def oracle_status_df(self):
 *         columns = ["Source", "Pair", "Rate"]
 *         data = []             # <<<<<<<<<<<<<<
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_second_to_first_conversion_rate()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":163
 *         data = []
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_second_to_first_conversion_rate()             # <<<<<<<<<<<<<<
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:
 *             data.extend([
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_second_to_first_conversion_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 6)) {
      if (size > 6) __Pyx_RaiseTooManyValuesError(6);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 162, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyTuple_GET_ITEM(sequence, 3); 
      __pyx_t_7 = PyTuple_GET_ITEM(sequence, 4); 
      __pyx_t_8 = PyTuple_GET_ITEM(sequence, 5); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_6 = PyList_GET_ITEM(sequence, 3); 
      __pyx_t_7 = PyList_GET_ITEM(sequence, 4); 
      __pyx_t_8 = PyList_GET_ITEM(sequence, 5); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_8);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
      for (i=0; i < 6; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 162, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
    __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_9);
    for (index=0; index < 6; index++) {
      PyObject* item = __pyx_t_10(__pyx_t_9); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 6) < 0) __PYX_ERR(0, 162, __pyx_L1_error)
    __pyx_t_10 = NULL;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_10 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 162, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":162
 *         columns = ["Source", "Pair", "Rate"]
 *         data = []
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \             # <<<<<<<<<<<<<<
 *             self.get_second_to_first_conversion_rate()
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:
 */
  __pyx_v_quote_pair = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_quote_rate_source = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_quote_rate = __pyx_t_5;
  __pyx_t_5 = 0;
  __pyx_v_base_pair = __pyx_t_6;
  __pyx_t_6 = 0;
  __pyx_v_base_rate_source = __pyx_t_7;
  __pyx_t_7 = 0;
  __pyx_v_base_rate = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":164
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_second_to_first_conversion_rate()
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:             # <<<<<<<<<<<<<<
 *             data.extend([
 *                 [quote_rate_source, quote_pair, PerformanceMetrics.smart_round(quote_rate)],
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_quote_pair, __pyx_n_s_split); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_7 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_kp_u__5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __pyx_t_8 = __Pyx_GetItemInt(__pyx_t_1, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_quote_pair, __pyx_n_s_split); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_kp_u__5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_8, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_11) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":166
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:
 *             data.extend([
 *                 [quote_rate_source, quote_pair, PerformanceMetrics.smart_round(quote_rate)],             # <<<<<<<<<<<<<<
 *             ])
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_smart_round); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_quote_rate};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_t_8 = PyList_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(__pyx_v_quote_rate_source);
    __Pyx_GIVEREF(__pyx_v_quote_rate_source);
    PyList_SET_ITEM(__pyx_t_8, 0, __pyx_v_quote_rate_source);
    __Pyx_INCREF(__pyx_v_quote_pair);
    __Pyx_GIVEREF(__pyx_v_quote_pair);
    PyList_SET_ITEM(__pyx_t_8, 1, __pyx_v_quote_pair);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_8, 2, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":165
 *             self.get_second_to_first_conversion_rate()
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:
 *             data.extend([             # <<<<<<<<<<<<<<
 *                 [quote_rate_source, quote_pair, PerformanceMetrics.smart_round(quote_rate)],
 *             ])
 */
    __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_data, __pyx_t_8); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 165, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":164
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_second_to_first_conversion_rate()
 *         if quote_pair.split("-")[0] != quote_pair.split("-")[1]:             # <<<<<<<<<<<<<<
 *             data.extend([
 *                 [quote_rate_source, quote_pair, PerformanceMetrics.smart_round(quote_rate)],
 */
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":168
 *                 [quote_rate_source, quote_pair, PerformanceMetrics.smart_round(quote_rate)],
 *             ])
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:             # <<<<<<<<<<<<<<
 *             data.extend([
 *                 [base_rate_source, base_pair, PerformanceMetrics.smart_round(base_rate)],
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_base_pair, __pyx_n_s_split); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_7 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_kp_u__5};
    __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_8, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_base_pair, __pyx_n_s_split); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_kp_u__5};
    __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_8, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyObject_RichCompare(__pyx_t_1, __pyx_t_7, Py_NE); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (__pyx_t_11) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":170
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:
 *             data.extend([
 *                 [base_rate_source, base_pair, PerformanceMetrics.smart_round(base_rate)],             # <<<<<<<<<<<<<<
 *             ])
 *         return pd.DataFrame(data=data, columns=columns)
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_smart_round); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_base_rate};
      __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 170, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_base_rate_source);
    __Pyx_GIVEREF(__pyx_v_base_rate_source);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_v_base_rate_source);
    __Pyx_INCREF(__pyx_v_base_pair);
    __Pyx_GIVEREF(__pyx_v_base_pair);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_v_base_pair);
    __Pyx_GIVEREF(__pyx_t_8);
    PyList_SET_ITEM(__pyx_t_1, 2, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":169
 *             ])
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:
 *             data.extend([             # <<<<<<<<<<<<<<
 *                 [base_rate_source, base_pair, PerformanceMetrics.smart_round(base_rate)],
 *             ])
 */
    __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_data, __pyx_t_1); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 169, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":168
 *                 [quote_rate_source, quote_pair, PerformanceMetrics.smart_round(quote_rate)],
 *             ])
 *         if base_pair.split("-")[0] != base_pair.split("-")[1]:             # <<<<<<<<<<<<<<
 *             data.extend([
 *                 [base_rate_source, base_pair, PerformanceMetrics.smart_round(base_rate)],
 */
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":172
 *                 [base_rate_source, base_pair, PerformanceMetrics.smart_round(base_rate)],
 *             ])
 *         return pd.DataFrame(data=data, columns=columns)             # <<<<<<<<<<<<<<
 * 
 *     def format_status(self) -> str:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_data, __pyx_v_data) < 0) __PYX_ERR(0, 172, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_columns, __pyx_v_columns) < 0) __PYX_ERR(0, 172, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":159
 *             self.logger().info(f"{base_pair} ({base_rate_source}) conversion rate: {PerformanceMetrics.smart_round(base_rate)}")
 * 
 *     def oracle_status_df(self):             # <<<<<<<<<<<<<<
 *         columns = ["Source", "Pair", "Rate"]
 *         data = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.oracle_status_df", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_columns);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_quote_pair);
  __Pyx_XDECREF(__pyx_v_quote_rate_source);
  __Pyx_XDECREF(__pyx_v_quote_rate);
  __Pyx_XDECREF(__pyx_v_base_pair);
  __Pyx_XDECREF(__pyx_v_base_rate_source);
  __Pyx_XDECREF(__pyx_v_base_rate);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":174
 *         return pd.DataFrame(data=data, columns=columns)
 * 
 *     def format_status(self) -> str:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list lines = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_11format_status(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_11format_status = {"format_status", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_11format_status, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_11format_status(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("format_status (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("format_status", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "format_status", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_10format_status(((struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_10format_status(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self) {
  PyObject *__pyx_v_lines = 0;
  PyObject *__pyx_v_warning_lines = 0;
  PyObject *__pyx_v_market_pair = NULL;
  PyObject *__pyx_v_markets_df = NULL;
  PyObject *__pyx_v_oracle_df = NULL;
  PyObject *__pyx_v_assets_df = NULL;
  PyObject *__pyx_v_tracked_limit_orders = NULL;
  PyObject *__pyx_v_tracked_market_orders = NULL;
  PyObject *__pyx_v_tracked_limit_orders_df = NULL;
  PyObject *__pyx_v_tracked_market_orders_df = NULL;
  PyObject *__pyx_v_df_limit_lines = NULL;
  PyObject *__pyx_v_df_market_lines = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_line = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_line = NULL;
  PyObject *__pyx_8genexpr3__pyx_v_line = NULL;
  PyObject *__pyx_8genexpr4__pyx_v_line = NULL;
  PyObject *__pyx_8genexpr5__pyx_v_line = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  int __pyx_t_13;
  Py_UCS4 __pyx_t_14;
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("format_status", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":176
 *     def format_status(self) -> str:
 *         cdef:
 *             list lines = []             # <<<<<<<<<<<<<<
 *             list warning_lines = []
 *         for market_pair in self._market_pairs:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_lines = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":177
 *         cdef:
 *             list lines = []
 *             list warning_lines = []             # <<<<<<<<<<<<<<
 *         for market_pair in self._market_pairs:
 *             warning_lines.extend(self.network_warning([market_pair.first, market_pair.second]))
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_warning_lines = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":178
 *             list lines = []
 *             list warning_lines = []
 *         for market_pair in self._market_pairs:             # <<<<<<<<<<<<<<
 *             warning_lines.extend(self.network_warning([market_pair.first, market_pair.second]))
 * 
 */
  if (unlikely(__pyx_v_self->_market_pairs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 178, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_self->_market_pairs; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 178, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_market_pair, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":179
 *             list warning_lines = []
 *         for market_pair in self._market_pairs:
 *             warning_lines.extend(self.network_warning([market_pair.first, market_pair.second]))             # <<<<<<<<<<<<<<
 * 
 *             markets_df = self.market_status_data_frame([market_pair.first, market_pair.second])
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_network_warning); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_first); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_second); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyList_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_7, 1, __pyx_t_6);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_7};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 179, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_warning_lines, __pyx_t_3); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 179, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":181
 *             warning_lines.extend(self.network_warning([market_pair.first, market_pair.second]))
 * 
 *             markets_df = self.market_status_data_frame([market_pair.first, market_pair.second])             # <<<<<<<<<<<<<<
 *             lines.extend(["", "  Markets:"] +
 *                          ["    " + line for line in str(markets_df).split("\n")])
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_status_data_frame); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_first); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_second); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
    __pyx_t_7 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 181, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_markets_df, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":182
 * 
 *             markets_df = self.market_status_data_frame([market_pair.first, market_pair.second])
 *             lines.extend(["", "  Markets:"] +             # <<<<<<<<<<<<<<
 *                          ["    " + line for line in str(markets_df).split("\n")])
 * 
 */
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_kp_u__7);
    __Pyx_GIVEREF(__pyx_kp_u__7);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u__7);
    __Pyx_INCREF(__pyx_kp_u_Markets);
    __Pyx_GIVEREF(__pyx_kp_u_Markets);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_kp_u_Markets);
    { /* enter inner scope */

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":183
 *             markets_df = self.market_status_data_frame([market_pair.first, market_pair.second])
 *             lines.extend(["", "  Markets:"] +
 *                          ["    " + line for line in str(markets_df).split("\n")])             # <<<<<<<<<<<<<<
 * 
 *             oracle_df = self.oracle_status_df()
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 183, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = __Pyx_PyObject_Str(__pyx_v_markets_df); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 183, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_split); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 183, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_8 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_kp_u__8};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 183, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_7 = __pyx_t_5; __Pyx_INCREF(__pyx_t_7); __pyx_t_10 = 0;
        __pyx_t_11 = NULL;
      } else {
        __pyx_t_10 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 183, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 183, __pyx_L7_error)
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (likely(!__pyx_t_11)) {
          if (likely(PyList_CheckExact(__pyx_t_7))) {
            if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_10); __Pyx_INCREF(__pyx_t_5); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 183, __pyx_L7_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_7, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 183, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          } else {
            if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_10); __Pyx_INCREF(__pyx_t_5); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 183, __pyx_L7_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_7, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 183, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          }
        } else {
          __pyx_t_5 = __pyx_t_11(__pyx_t_7);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 183, __pyx_L7_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_line, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = PyNumber_Add(__pyx_kp_u__9, __pyx_8genexpr1__pyx_v_line); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 183, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 183, __pyx_L7_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_line); __pyx_8genexpr1__pyx_v_line = 0;
      goto __pyx_L10_exit_scope;
      __pyx_L7_error:;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_line); __pyx_8genexpr1__pyx_v_line = 0;
      goto __pyx_L1_error;
      __pyx_L10_exit_scope:;
    } /* exit inner scope */

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":182
 * 
 *             markets_df = self.market_status_data_frame([market_pair.first, market_pair.second])
 *             lines.extend(["", "  Markets:"] +             # <<<<<<<<<<<<<<
 *                          ["    " + line for line in str(markets_df).split("\n")])
 * 
 */
    __pyx_t_7 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_lines, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 182, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":185
 *                          ["    " + line for line in str(markets_df).split("\n")])
 * 
 *             oracle_df = self.oracle_status_df()             # <<<<<<<<<<<<<<
 *             if not oracle_df.empty:
 *                 lines.extend(["", "  Rate conversion:"] +
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_oracle_status_df); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_3, };
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 185, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_oracle_df, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":186
 * 
 *             oracle_df = self.oracle_status_df()
 *             if not oracle_df.empty:             # <<<<<<<<<<<<<<
 *                 lines.extend(["", "  Rate conversion:"] +
 *                              ["    " + line for line in str(oracle_df).split("\n")])
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_oracle_df, __pyx_n_s_empty); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 186, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_13 = ((!__pyx_t_12) != 0);
    if (__pyx_t_13) {

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":187
 *             oracle_df = self.oracle_status_df()
 *             if not oracle_df.empty:
 *                 lines.extend(["", "  Rate conversion:"] +             # <<<<<<<<<<<<<<
 *                              ["    " + line for line in str(oracle_df).split("\n")])
 * 
 */
      __pyx_t_7 = PyList_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 187, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_kp_u__7);
      __Pyx_GIVEREF(__pyx_kp_u__7);
      PyList_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u__7);
      __Pyx_INCREF(__pyx_kp_u_Rate_conversion);
      __Pyx_GIVEREF(__pyx_kp_u_Rate_conversion);
      PyList_SET_ITEM(__pyx_t_7, 1, __pyx_kp_u_Rate_conversion);
      { /* enter inner scope */

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":188
 *             if not oracle_df.empty:
 *                 lines.extend(["", "  Rate conversion:"] +
 *                              ["    " + line for line in str(oracle_df).split("\n")])             # <<<<<<<<<<<<<<
 * 
 *             assets_df = self.wallet_balance_data_frame([market_pair.first, market_pair.second])
 */
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 188, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_Str(__pyx_v_oracle_df); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 188, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 188, __pyx_L14_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_kp_u__8};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 188, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
          __pyx_t_6 = __pyx_t_3; __Pyx_INCREF(__pyx_t_6); __pyx_t_10 = 0;
          __pyx_t_11 = NULL;
        } else {
          __pyx_t_10 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 188, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 188, __pyx_L14_error)
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        for (;;) {
          if (likely(!__pyx_t_11)) {
            if (likely(PyList_CheckExact(__pyx_t_6))) {
              if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_6)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_3 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_10); __Pyx_INCREF(__pyx_t_3); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 188, __pyx_L14_error)
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_6, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 188, __pyx_L14_error)
              __Pyx_GOTREF(__pyx_t_3);
              #endif
            } else {
              if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_10); __Pyx_INCREF(__pyx_t_3); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 188, __pyx_L14_error)
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_6, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 188, __pyx_L14_error)
              __Pyx_GOTREF(__pyx_t_3);
              #endif
            }
          } else {
            __pyx_t_3 = __pyx_t_11(__pyx_t_6);
            if (unlikely(!__pyx_t_3)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 188, __pyx_L14_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_3);
          }
          __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_line, __pyx_t_3);
          __pyx_t_3 = 0;
          __pyx_t_3 = PyNumber_Add(__pyx_kp_u__9, __pyx_8genexpr2__pyx_v_line); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 188, __pyx_L14_error)
          __Pyx_GOTREF(__pyx_t_3);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 188, __pyx_L14_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_line); __pyx_8genexpr2__pyx_v_line = 0;
        goto __pyx_L17_exit_scope;
        __pyx_L14_error:;
        __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_line); __pyx_8genexpr2__pyx_v_line = 0;
        goto __pyx_L1_error;
        __pyx_L17_exit_scope:;
      } /* exit inner scope */

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":187
 *             oracle_df = self.oracle_status_df()
 *             if not oracle_df.empty:
 *                 lines.extend(["", "  Rate conversion:"] +             # <<<<<<<<<<<<<<
 *                              ["    " + line for line in str(oracle_df).split("\n")])
 * 
 */
      __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 187, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_lines, __pyx_t_6); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 187, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":186
 * 
 *             oracle_df = self.oracle_status_df()
 *             if not oracle_df.empty:             # <<<<<<<<<<<<<<
 *                 lines.extend(["", "  Rate conversion:"] +
 *                              ["    " + line for line in str(oracle_df).split("\n")])
 */
    }

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":190
 *                              ["    " + line for line in str(oracle_df).split("\n")])
 * 
 *             assets_df = self.wallet_balance_data_frame([market_pair.first, market_pair.second])             # <<<<<<<<<<<<<<
 *             lines.extend(["", "  Assets:"] +
 *                          ["    " + line for line in str(assets_df).split("\n")])
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_wallet_balance_data_frame); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_first); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_second); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_3);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __pyx_t_7 = 0;
    __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 190, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_assets_df, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":191
 * 
 *             assets_df = self.wallet_balance_data_frame([market_pair.first, market_pair.second])
 *             lines.extend(["", "  Assets:"] +             # <<<<<<<<<<<<<<
 *                          ["    " + line for line in str(assets_df).split("\n")])
 * 
 */
    __pyx_t_6 = PyList_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_kp_u__7);
    __Pyx_GIVEREF(__pyx_kp_u__7);
    PyList_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u__7);
    __Pyx_INCREF(__pyx_kp_u_Assets);
    __Pyx_GIVEREF(__pyx_kp_u_Assets);
    PyList_SET_ITEM(__pyx_t_6, 1, __pyx_kp_u_Assets);
    { /* enter inner scope */

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":192
 *             assets_df = self.wallet_balance_data_frame([market_pair.first, market_pair.second])
 *             lines.extend(["", "  Assets:"] +
 *                          ["    " + line for line in str(assets_df).split("\n")])             # <<<<<<<<<<<<<<
 * 
 *             lines.extend(
 */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 192, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_Str(__pyx_v_assets_df); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 192, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_split); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 192, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_8 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_u__8};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 192, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_7 = __pyx_t_5; __Pyx_INCREF(__pyx_t_7); __pyx_t_10 = 0;
        __pyx_t_11 = NULL;
      } else {
        __pyx_t_10 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 192, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 192, __pyx_L20_error)
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (likely(!__pyx_t_11)) {
          if (likely(PyList_CheckExact(__pyx_t_7))) {
            if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_10); __Pyx_INCREF(__pyx_t_5); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 192, __pyx_L20_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_7, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 192, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          } else {
            if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_10); __Pyx_INCREF(__pyx_t_5); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 192, __pyx_L20_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_7, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 192, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          }
        } else {
          __pyx_t_5 = __pyx_t_11(__pyx_t_7);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 192, __pyx_L20_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_line, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = PyNumber_Add(__pyx_kp_u__9, __pyx_8genexpr3__pyx_v_line); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 192, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_5);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 192, __pyx_L20_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_line); __pyx_8genexpr3__pyx_v_line = 0;
      goto __pyx_L23_exit_scope;
      __pyx_L20_error:;
      __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_line); __pyx_8genexpr3__pyx_v_line = 0;
      goto __pyx_L1_error;
      __pyx_L23_exit_scope:;
    } /* exit inner scope */

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":191
 * 
 *             assets_df = self.wallet_balance_data_frame([market_pair.first, market_pair.second])
 *             lines.extend(["", "  Assets:"] +             # <<<<<<<<<<<<<<
 *                          ["    " + line for line in str(assets_df).split("\n")])
 * 
 */
    __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_lines, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 191, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":195
 * 
 *             lines.extend(
 *                 ["", "  Profitability(without fees):"] +             # <<<<<<<<<<<<<<
 *                 [f"    take bid on {market_pair.first.market.name}, "
 *                  f"take ask on {market_pair.second.market.name}: {round(self._current_profitability[0] * 100, 4)} %"] +
 */
    __pyx_t_7 = PyList_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_INCREF(__pyx_kp_u__7);
    __Pyx_GIVEREF(__pyx_kp_u__7);
    PyList_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u__7);
    __Pyx_INCREF(__pyx_kp_u_Profitability_without_fees);
    __Pyx_GIVEREF(__pyx_kp_u_Profitability_without_fees);
    PyList_SET_ITEM(__pyx_t_7, 1, __pyx_kp_u_Profitability_without_fees);

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":196
 *             lines.extend(
 *                 ["", "  Profitability(without fees):"] +
 *                 [f"    take bid on {market_pair.first.market.name}, "             # <<<<<<<<<<<<<<
 *                  f"take ask on {market_pair.second.market.name}: {round(self._current_profitability[0] * 100, 4)} %"] +
 *                 [f"    take ask on {market_pair.first.market.name}, "
 */
    __pyx_t_4 = PyTuple_New(7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = 0;
    __pyx_t_14 = 127;
    __Pyx_INCREF(__pyx_kp_u_take_bid_on);
    __pyx_t_10 += 16;
    __Pyx_GIVEREF(__pyx_kp_u_take_bid_on);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_take_bid_on);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_first); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_market); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_14;
    __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_take_ask_on);
    __pyx_t_10 += 14;
    __Pyx_GIVEREF(__pyx_kp_u_take_ask_on);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_take_ask_on);

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":197
 *                 ["", "  Profitability(without fees):"] +
 *                 [f"    take bid on {market_pair.first.market.name}, "
 *                  f"take ask on {market_pair.second.market.name}: {round(self._current_profitability[0] * 100, 4)} %"] +             # <<<<<<<<<<<<<<
 *                 [f"    take ask on {market_pair.first.market.name}, "
 *                  f"take bid on {market_pair.second.market.name}: {round(self._current_profitability[1] * 100, 4)} %"])
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_second); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_market); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_name_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_14;
    __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u__10);
    __pyx_t_10 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__10);
    PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u__10);
    if (unlikely(__pyx_v_self->_current_profitability == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 197, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v_self->_current_profitability, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyInt_MultiplyObjC(__pyx_t_6, __pyx_int_100, 0x64, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __Pyx_INCREF(__pyx_int_4);
    __Pyx_GIVEREF(__pyx_int_4);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_4);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_14;
    __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u__11);
    __pyx_t_10 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__11);
    PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u__11);

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":196
 *             lines.extend(
 *                 ["", "  Profitability(without fees):"] +
 *                 [f"    take bid on {market_pair.first.market.name}, "             # <<<<<<<<<<<<<<
 *                  f"take ask on {market_pair.second.market.name}: {round(self._current_profitability[0] * 100, 4)} %"] +
 *                 [f"    take ask on {market_pair.first.market.name}, "
 */
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_4, 7, __pyx_t_10, __pyx_t_14); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":195
 * 
 *             lines.extend(
 *                 ["", "  Profitability(without fees):"] +             # <<<<<<<<<<<<<<
 *                 [f"    take bid on {market_pair.first.market.name}, "
 *                  f"take ask on {market_pair.second.market.name}: {round(self._current_profitability[0] * 100, 4)} %"] +
 */
    __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 195, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":198
 *                 [f"    take bid on {market_pair.first.market.name}, "
 *                  f"take ask on {market_pair.second.market.name}: {round(self._current_profitability[0] * 100, 4)} %"] +
 *                 [f"    take ask on {market_pair.first.market.name}, "             # <<<<<<<<<<<<<<
 *                  f"take bid on {market_pair.second.market.name}: {round(self._current_profitability[1] * 100, 4)} %"])
 * 
 */
    __pyx_t_4 = PyTuple_New(7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = 0;
    __pyx_t_14 = 127;
    __Pyx_INCREF(__pyx_kp_u_take_ask_on_2);
    __pyx_t_10 += 16;
    __Pyx_GIVEREF(__pyx_kp_u_take_ask_on_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_take_ask_on_2);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_first); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_market); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_14;
    __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_take_bid_on_2);
    __pyx_t_10 += 14;
    __Pyx_GIVEREF(__pyx_kp_u_take_bid_on_2);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_take_bid_on_2);

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":199
 *                  f"take ask on {market_pair.second.market.name}: {round(self._current_profitability[0] * 100, 4)} %"] +
 *                 [f"    take ask on {market_pair.first.market.name}, "
 *                  f"take bid on {market_pair.second.market.name}: {round(self._current_profitability[1] * 100, 4)} %"])             # <<<<<<<<<<<<<<
 * 
 *             # See if there're any pending limit orders.
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_second); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_market); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_name_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_14;
    __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u__10);
    __pyx_t_10 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__10);
    PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u__10);
    if (unlikely(__pyx_v_self->_current_profitability == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 199, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v_self->_current_profitability, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = __Pyx_PyInt_MultiplyObjC(__pyx_t_7, __pyx_int_100, 0x64, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
    __Pyx_INCREF(__pyx_int_4);
    __Pyx_GIVEREF(__pyx_int_4);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_int_4);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_14;
    __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_INCREF(__pyx_kp_u__11);
    __pyx_t_10 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__11);
    PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u__11);

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":198
 *                 [f"    take bid on {market_pair.first.market.name}, "
 *                  f"take ask on {market_pair.second.market.name}: {round(self._current_profitability[0] * 100, 4)} %"] +
 *                 [f"    take ask on {market_pair.first.market.name}, "             # <<<<<<<<<<<<<<
 *                  f"take bid on {market_pair.second.market.name}: {round(self._current_profitability[1] * 100, 4)} %"])
 * 
 */
    __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_4, 7, __pyx_t_10, __pyx_t_14); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":197
 *                 ["", "  Profitability(without fees):"] +
 *                 [f"    take bid on {market_pair.first.market.name}, "
 *                  f"take ask on {market_pair.second.market.name}: {round(self._current_profitability[0] * 100, 4)} %"] +             # <<<<<<<<<<<<<<
 *                 [f"    take ask on {market_pair.first.market.name}, "
 *                  f"take bid on {market_pair.second.market.name}: {round(self._current_profitability[1] * 100, 4)} %"])
 */
    __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":194
 *                          ["    " + line for line in str(assets_df).split("\n")])
 * 
 *             lines.extend(             # <<<<<<<<<<<<<<
 *                 ["", "  Profitability(without fees):"] +
 *                 [f"    take bid on {market_pair.first.market.name}, "
 */
    __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_lines, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 194, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":202
 * 
 *             # See if there're any pending limit orders.
 *             tracked_limit_orders = self.tracked_limit_orders             # <<<<<<<<<<<<<<
 *             tracked_market_orders = self.tracked_market_orders
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_tracked_limit_orders); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 202, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XDECREF_SET(__pyx_v_tracked_limit_orders, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":203
 *             # See if there're any pending limit orders.
 *             tracked_limit_orders = self.tracked_limit_orders
 *             tracked_market_orders = self.tracked_market_orders             # <<<<<<<<<<<<<<
 * 
 *             if len(tracked_limit_orders) > 0 or len(tracked_market_orders) > 0:
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_tracked_market_orders); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 203, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XDECREF_SET(__pyx_v_tracked_market_orders, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":205
 *             tracked_market_orders = self.tracked_market_orders
 * 
 *             if len(tracked_limit_orders) > 0 or len(tracked_market_orders) > 0:             # <<<<<<<<<<<<<<
 *                 tracked_limit_orders_df = self.tracked_limit_orders_data_frame
 *                 tracked_market_orders_df = self.tracked_market_orders_data_frame
 */
    __pyx_t_10 = PyObject_Length(__pyx_v_tracked_limit_orders); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 205, __pyx_L1_error)
    __pyx_t_12 = ((__pyx_t_10 > 0) != 0);
    if (!__pyx_t_12) {
    } else {
      __pyx_t_13 = __pyx_t_12;
      goto __pyx_L25_bool_binop_done;
    }
    __pyx_t_10 = PyObject_Length(__pyx_v_tracked_market_orders); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 205, __pyx_L1_error)
    __pyx_t_12 = ((__pyx_t_10 > 0) != 0);
    __pyx_t_13 = __pyx_t_12;
    __pyx_L25_bool_binop_done:;
    if (__pyx_t_13) {

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":206
 * 
 *             if len(tracked_limit_orders) > 0 or len(tracked_market_orders) > 0:
 *                 tracked_limit_orders_df = self.tracked_limit_orders_data_frame             # <<<<<<<<<<<<<<
 *                 tracked_market_orders_df = self.tracked_market_orders_data_frame
 *                 df_limit_lines = (str(tracked_limit_orders_df).split("\n")
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_tracked_limit_orders_data_frame); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 206, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XDECREF_SET(__pyx_v_tracked_limit_orders_df, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":207
 *             if len(tracked_limit_orders) > 0 or len(tracked_market_orders) > 0:
 *                 tracked_limit_orders_df = self.tracked_limit_orders_data_frame
 *                 tracked_market_orders_df = self.tracked_market_orders_data_frame             # <<<<<<<<<<<<<<
 *                 df_limit_lines = (str(tracked_limit_orders_df).split("\n")
 *                                   if len(tracked_limit_orders) > 0
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_tracked_market_orders_data_frame); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 207, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XDECREF_SET(__pyx_v_tracked_market_orders_df, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":209
 *                 tracked_market_orders_df = self.tracked_market_orders_data_frame
 *                 df_limit_lines = (str(tracked_limit_orders_df).split("\n")
 *                                   if len(tracked_limit_orders) > 0             # <<<<<<<<<<<<<<
 *                                   else list())
 *                 df_market_lines = (str(tracked_market_orders_df).split("\n")
 */
      __pyx_t_10 = PyObject_Length(__pyx_v_tracked_limit_orders); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 209, __pyx_L1_error)
      if (((__pyx_t_10 > 0) != 0)) {

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":208
 *                 tracked_limit_orders_df = self.tracked_limit_orders_data_frame
 *                 tracked_market_orders_df = self.tracked_market_orders_data_frame
 *                 df_limit_lines = (str(tracked_limit_orders_df).split("\n")             # <<<<<<<<<<<<<<
 *                                   if len(tracked_limit_orders) > 0
 *                                   else list())
 */
        __pyx_t_6 = __Pyx_PyObject_Str(__pyx_v_tracked_limit_orders_df); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_split); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 208, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_kp_u__8};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 208, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __pyx_t_7 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":210
 *                 df_limit_lines = (str(tracked_limit_orders_df).split("\n")
 *                                   if len(tracked_limit_orders) > 0
 *                                   else list())             # <<<<<<<<<<<<<<
 *                 df_market_lines = (str(tracked_market_orders_df).split("\n")
 *                                    if len(tracked_market_orders) > 0
 */
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 210, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = __pyx_t_4;
        __pyx_t_4 = 0;
      }
      __Pyx_XDECREF_SET(__pyx_v_df_limit_lines, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":212
 *                                   else list())
 *                 df_market_lines = (str(tracked_market_orders_df).split("\n")
 *                                    if len(tracked_market_orders) > 0             # <<<<<<<<<<<<<<
 *                                    else list())
 *                 lines.extend(["", "  Pending limit orders:"] +
 */
      __pyx_t_10 = PyObject_Length(__pyx_v_tracked_market_orders); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 212, __pyx_L1_error)
      if (((__pyx_t_10 > 0) != 0)) {

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":211
 *                                   if len(tracked_limit_orders) > 0
 *                                   else list())
 *                 df_market_lines = (str(tracked_market_orders_df).split("\n")             # <<<<<<<<<<<<<<
 *                                    if len(tracked_market_orders) > 0
 *                                    else list())
 */
        __pyx_t_5 = __Pyx_PyObject_Str(__pyx_v_tracked_market_orders_df); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 211, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_split); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 211, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_kp_u__8};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 211, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __pyx_t_7 = __pyx_t_4;
        __pyx_t_4 = 0;
      } else {

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":213
 *                 df_market_lines = (str(tracked_market_orders_df).split("\n")
 *                                    if len(tracked_market_orders) > 0
 *                                    else list())             # <<<<<<<<<<<<<<
 *                 lines.extend(["", "  Pending limit orders:"] +
 *                              ["    " + line for line in df_limit_lines] +
 */
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 213, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = __pyx_t_4;
        __pyx_t_4 = 0;
      }
      __Pyx_XDECREF_SET(__pyx_v_df_market_lines, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":214
 *                                    if len(tracked_market_orders) > 0
 *                                    else list())
 *                 lines.extend(["", "  Pending limit orders:"] +             # <<<<<<<<<<<<<<
 *                              ["    " + line for line in df_limit_lines] +
 *                              ["    " + line for line in df_market_lines])
 */
      __pyx_t_7 = PyList_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_kp_u__7);
      __Pyx_GIVEREF(__pyx_kp_u__7);
      PyList_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u__7);
      __Pyx_INCREF(__pyx_kp_u_Pending_limit_orders);
      __Pyx_GIVEREF(__pyx_kp_u_Pending_limit_orders);
      PyList_SET_ITEM(__pyx_t_7, 1, __pyx_kp_u_Pending_limit_orders);
      { /* enter inner scope */

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":215
 *                                    else list())
 *                 lines.extend(["", "  Pending limit orders:"] +
 *                              ["    " + line for line in df_limit_lines] +             # <<<<<<<<<<<<<<
 *                              ["    " + line for line in df_market_lines])
 *             else:
 */
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 215, __pyx_L29_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (likely(PyList_CheckExact(__pyx_v_df_limit_lines)) || PyTuple_CheckExact(__pyx_v_df_limit_lines)) {
          __pyx_t_6 = __pyx_v_df_limit_lines; __Pyx_INCREF(__pyx_t_6); __pyx_t_10 = 0;
          __pyx_t_11 = NULL;
        } else {
          __pyx_t_10 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_v_df_limit_lines); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 215, __pyx_L29_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 215, __pyx_L29_error)
        }
        for (;;) {
          if (likely(!__pyx_t_11)) {
            if (likely(PyList_CheckExact(__pyx_t_6))) {
              if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_6)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_10); __Pyx_INCREF(__pyx_t_5); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 215, __pyx_L29_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 215, __pyx_L29_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            } else {
              if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_10); __Pyx_INCREF(__pyx_t_5); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 215, __pyx_L29_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_6, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 215, __pyx_L29_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            }
          } else {
            __pyx_t_5 = __pyx_t_11(__pyx_t_6);
            if (unlikely(!__pyx_t_5)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 215, __pyx_L29_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_5);
          }
          __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_line, __pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_5 = PyNumber_Add(__pyx_kp_u__9, __pyx_8genexpr4__pyx_v_line); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 215, __pyx_L29_error)
          __Pyx_GOTREF(__pyx_t_5);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 215, __pyx_L29_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_line); __pyx_8genexpr4__pyx_v_line = 0;
        goto __pyx_L32_exit_scope;
        __pyx_L29_error:;
        __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_line); __pyx_8genexpr4__pyx_v_line = 0;
        goto __pyx_L1_error;
        __pyx_L32_exit_scope:;
      } /* exit inner scope */

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":214
 *                                    if len(tracked_market_orders) > 0
 *                                    else list())
 *                 lines.extend(["", "  Pending limit orders:"] +             # <<<<<<<<<<<<<<
 *                              ["    " + line for line in df_limit_lines] +
 *                              ["    " + line for line in df_market_lines])
 */
      __pyx_t_6 = PyNumber_Add(__pyx_t_7, __pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      { /* enter inner scope */

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":216
 *                 lines.extend(["", "  Pending limit orders:"] +
 *                              ["    " + line for line in df_limit_lines] +
 *                              ["    " + line for line in df_market_lines])             # <<<<<<<<<<<<<<
 *             else:
 *                 lines.extend(["", "  No pending limit orders."])
 */
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 216, __pyx_L35_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (likely(PyList_CheckExact(__pyx_v_df_market_lines)) || PyTuple_CheckExact(__pyx_v_df_market_lines)) {
          __pyx_t_7 = __pyx_v_df_market_lines; __Pyx_INCREF(__pyx_t_7); __pyx_t_10 = 0;
          __pyx_t_11 = NULL;
        } else {
          __pyx_t_10 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_v_df_market_lines); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 216, __pyx_L35_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_7); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 216, __pyx_L35_error)
        }
        for (;;) {
          if (likely(!__pyx_t_11)) {
            if (likely(PyList_CheckExact(__pyx_t_7))) {
              if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_7)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_10); __Pyx_INCREF(__pyx_t_5); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 216, __pyx_L35_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_7, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 216, __pyx_L35_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            } else {
              if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_10); __Pyx_INCREF(__pyx_t_5); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 216, __pyx_L35_error)
              #else
              __pyx_t_5 = PySequence_ITEM(__pyx_t_7, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 216, __pyx_L35_error)
              __Pyx_GOTREF(__pyx_t_5);
              #endif
            }
          } else {
            __pyx_t_5 = __pyx_t_11(__pyx_t_7);
            if (unlikely(!__pyx_t_5)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 216, __pyx_L35_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_5);
          }
          __Pyx_XDECREF_SET(__pyx_8genexpr5__pyx_v_line, __pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_5 = PyNumber_Add(__pyx_kp_u__9, __pyx_8genexpr5__pyx_v_line); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 216, __pyx_L35_error)
          __Pyx_GOTREF(__pyx_t_5);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 216, __pyx_L35_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_line); __pyx_8genexpr5__pyx_v_line = 0;
        goto __pyx_L38_exit_scope;
        __pyx_L35_error:;
        __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_line); __pyx_8genexpr5__pyx_v_line = 0;
        goto __pyx_L1_error;
        __pyx_L38_exit_scope:;
      } /* exit inner scope */

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":215
 *                                    else list())
 *                 lines.extend(["", "  Pending limit orders:"] +
 *                              ["    " + line for line in df_limit_lines] +             # <<<<<<<<<<<<<<
 *                              ["    " + line for line in df_market_lines])
 *             else:
 */
      __pyx_t_7 = PyNumber_Add(__pyx_t_6, __pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 215, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":214
 *                                    if len(tracked_market_orders) > 0
 *                                    else list())
 *                 lines.extend(["", "  Pending limit orders:"] +             # <<<<<<<<<<<<<<
 *                              ["    " + line for line in df_limit_lines] +
 *                              ["    " + line for line in df_market_lines])
 */
      __pyx_t_9 = __Pyx_PyList_Extend(__pyx_v_lines, __pyx_t_7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":205
 *             tracked_market_orders = self.tracked_market_orders
 * 
 *             if len(tracked_limit_orders) > 0 or len(tracked_market_orders) > 0:             # <<<<<<<<<<<<<<
 *                 tracked_limit_orders_df = self.tracked_limit_orders_data_frame
 *                 tracked_market_orders_df = self.tracked_market_orders_data_frame
 */
      goto __pyx_L24;
    }

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":218
 *                              ["    " + line for line in df_market_lines])
 *             else:
 *                 lines.extend(["", "  No pending limit orders."])             # <<<<<<<<<<<<<<
 * 
 *             warning_lines.extend(self.balance_warning([market_pair.first, market_pair.second]))
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_ListComp_Append(__pyx_v_lines, __pyx_kp_u__7); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 218, __pyx_L1_error)
      __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_lines, __pyx_kp_u_No_pending_limit_orders); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 218, __pyx_L1_error)
      (void)((__pyx_t_9 | __pyx_t_15));
    }
    __pyx_L24:;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":220
 *                 lines.extend(["", "  No pending limit orders."])
 * 
 *             warning_lines.extend(self.balance_warning([market_pair.first, market_pair.second]))             # <<<<<<<<<<<<<<
 * 
 *         if len(warning_lines) > 0:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_balance_warning); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_first); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_second); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 220, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_15 = __Pyx_PyList_Extend(__pyx_v_warning_lines, __pyx_t_7); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":178
 *             list lines = []
 *             list warning_lines = []
 *         for market_pair in self._market_pairs:             # <<<<<<<<<<<<<<
 *             warning_lines.extend(self.network_warning([market_pair.first, market_pair.second]))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":222
 *             warning_lines.extend(self.balance_warning([market_pair.first, market_pair.second]))
 * 
 *         if len(warning_lines) > 0:             # <<<<<<<<<<<<<<
 *             lines.extend(["", "  *** WARNINGS ***"] + warning_lines)
 * 
 */
  __pyx_t_2 = PyList_GET_SIZE(__pyx_v_warning_lines); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 222, __pyx_L1_error)
  __pyx_t_13 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_13) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":223
 * 
 *         if len(warning_lines) > 0:
 *             lines.extend(["", "  *** WARNINGS ***"] + warning_lines)             # <<<<<<<<<<<<<<
 * 
 *         return "\n".join(lines)
 */
    __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_kp_u__7);
    __Pyx_GIVEREF(__pyx_kp_u__7);
    PyList_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u__7);
    __Pyx_INCREF(__pyx_kp_u_WARNINGS);
    __Pyx_GIVEREF(__pyx_kp_u_WARNINGS);
    PyList_SET_ITEM(__pyx_t_1, 1, __pyx_kp_u_WARNINGS);
    __pyx_t_7 = PyNumber_Add(__pyx_t_1, __pyx_v_warning_lines); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_15 = __Pyx_PyList_Extend(__pyx_v_lines, __pyx_t_7); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 223, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":222
 *             warning_lines.extend(self.balance_warning([market_pair.first, market_pair.second]))
 * 
 *         if len(warning_lines) > 0:             # <<<<<<<<<<<<<<
 *             lines.extend(["", "  *** WARNINGS ***"] + warning_lines)
 * 
 */
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":225
 *             lines.extend(["", "  *** WARNINGS ***"] + warning_lines)
 * 
 *         return "\n".join(lines)             # <<<<<<<<<<<<<<
 * 
 *     def notify_hb_app(self, msg: str):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_7 = PyUnicode_Join(__pyx_kp_u__8, __pyx_v_lines); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 225, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_r = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":174
 *         return pd.DataFrame(data=data, columns=columns)
 * 
 *     def format_status(self) -> str:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list lines = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.format_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lines);
  __Pyx_XDECREF(__pyx_v_warning_lines);
  __Pyx_XDECREF(__pyx_v_market_pair);
  __Pyx_XDECREF(__pyx_v_markets_df);
  __Pyx_XDECREF(__pyx_v_oracle_df);
  __Pyx_XDECREF(__pyx_v_assets_df);
  __Pyx_XDECREF(__pyx_v_tracked_limit_orders);
  __Pyx_XDECREF(__pyx_v_tracked_market_orders);
  __Pyx_XDECREF(__pyx_v_tracked_limit_orders_df);
  __Pyx_XDECREF(__pyx_v_tracked_market_orders_df);
  __Pyx_XDECREF(__pyx_v_df_limit_lines);
  __Pyx_XDECREF(__pyx_v_df_market_lines);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_line);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_line);
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_line);
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_line);
  __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_line);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":227
 *         return "\n".join(lines)
 * 
 *     def notify_hb_app(self, msg: str):             # <<<<<<<<<<<<<<
 *         if self._hb_app_notification:
 *             super().notify_hb_app(msg)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_13notify_hb_app(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_13notify_hb_app = {"notify_hb_app", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_13notify_hb_app, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_13notify_hb_app(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_msg = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("notify_hb_app (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_msg,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_msg,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_msg)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 227, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "notify_hb_app") < 0)) __PYX_ERR(0, 227, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_msg = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("notify_hb_app", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 227, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.notify_hb_app", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_msg), (&PyUnicode_Type), 1, "msg", 1))) __PYX_ERR(0, 227, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_12notify_hb_app(((struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self), __pyx_v_msg);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_12notify_hb_app(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_msg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("notify_hb_app", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":228
 * 
 *     def notify_hb_app(self, msg: str):
 *         if self._hb_app_notification:             # <<<<<<<<<<<<<<
 *             super().notify_hb_app(msg)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_hb_app_notification != 0);
  if (__pyx_t_1) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":229
 *     def notify_hb_app(self, msg: str):
 *         if self._hb_app_notification:
 *             super().notify_hb_app(msg)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_tick(self, double timestamp):
 */
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);
    __Pyx_GIVEREF((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy));
    __Pyx_INCREF((PyObject *)__pyx_v_self);
    __Pyx_GIVEREF((PyObject *)__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_self));
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_notify_hb_app); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_msg};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":228
 * 
 *     def notify_hb_app(self, msg: str):
 *         if self._hb_app_notification:             # <<<<<<<<<<<<<<
 *             super().notify_hb_app(msg)
 * 
 */
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":227
 *         return "\n".join(lines)
 * 
 *     def notify_hb_app(self, msg: str):             # <<<<<<<<<<<<<<
 *         if self._hb_app_notification:
 *             super().notify_hb_app(msg)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.notify_hb_app", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":231
 *             super().notify_hb_app(msg)
 * 
 *     cdef c_tick(self, double timestamp):             # <<<<<<<<<<<<<<
 *         """
 *         Clock tick entry point.
 */

static PyObject *__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_tick(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, double __pyx_v_timestamp) {
  int64_t __pyx_v_current_tick;
  int64_t __pyx_v_last_tick;
  int __pyx_v_should_report_warnings;
  PyObject *__pyx_v_market_pair = NULL;
  PyObject *__pyx_8genexpr6__pyx_v_market = NULL;
  PyObject *__pyx_8genexpr7__pyx_v_market = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  double __pyx_t_12;
  char const *__pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_tick", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":240
 *         :param timestamp: current tick timestamp
 *         """
 *         StrategyBase.c_tick(self, timestamp)             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase->__pyx_base.c_tick(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self), __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":243
 * 
 *         cdef:
 *             int64_t current_tick = <int64_t>(timestamp // self._status_report_interval)             # <<<<<<<<<<<<<<
 *             int64_t last_tick = <int64_t>(self._last_timestamp // self._status_report_interval)
 *             bint should_report_warnings = ((current_tick > last_tick) and
 */
  if (unlikely(__pyx_v_self->_status_report_interval == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 243, __pyx_L1_error)
  }
  __pyx_v_current_tick = ((int64_t)floor(__pyx_v_timestamp / __pyx_v_self->_status_report_interval));

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":244
 *         cdef:
 *             int64_t current_tick = <int64_t>(timestamp // self._status_report_interval)
 *             int64_t last_tick = <int64_t>(self._last_timestamp // self._status_report_interval)             # <<<<<<<<<<<<<<
 *             bint should_report_warnings = ((current_tick > last_tick) and
 *                                            (self._logging_options & self.OPTION_LOG_STATUS_REPORT))
 */
  if (unlikely(__pyx_v_self->_status_report_interval == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 244, __pyx_L1_error)
  }
  __pyx_v_last_tick = ((int64_t)floor(__pyx_v_self->_last_timestamp / __pyx_v_self->_status_report_interval));

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":245
 *             int64_t current_tick = <int64_t>(timestamp // self._status_report_interval)
 *             int64_t last_tick = <int64_t>(self._last_timestamp // self._status_report_interval)
 *             bint should_report_warnings = ((current_tick > last_tick) and             # <<<<<<<<<<<<<<
 *                                            (self._logging_options & self.OPTION_LOG_STATUS_REPORT))
 *         try:
 */
  __pyx_t_3 = ((__pyx_v_current_tick > __pyx_v_last_tick) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L3_bool_binop_done;
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":246
 *             int64_t last_tick = <int64_t>(self._last_timestamp // self._status_report_interval)
 *             bint should_report_warnings = ((current_tick > last_tick) and
 *                                            (self._logging_options & self.OPTION_LOG_STATUS_REPORT))             # <<<<<<<<<<<<<<
 *         try:
 *             if not self._all_markets_ready:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_STATUS_REPORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_And(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 246, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __pyx_t_3;
  __pyx_L3_bool_binop_done:;
  __pyx_v_should_report_warnings = __pyx_t_2;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":247
 *             bint should_report_warnings = ((current_tick > last_tick) and
 *                                            (self._logging_options & self.OPTION_LOG_STATUS_REPORT))
 *         try:             # <<<<<<<<<<<<<<
 *             if not self._all_markets_ready:
 *                 self._all_markets_ready = all([market.ready for market in self._sb_markets])
 */
  /*try:*/ {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":248
 *                                            (self._logging_options & self.OPTION_LOG_STATUS_REPORT))
 *         try:
 *             if not self._all_markets_ready:             # <<<<<<<<<<<<<<
 *                 self._all_markets_ready = all([market.ready for market in self._sb_markets])
 *                 if not self._all_markets_ready:
 */
    __pyx_t_2 = ((!(__pyx_v_self->_all_markets_ready != 0)) != 0);
    if (__pyx_t_2) {

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":249
 *         try:
 *             if not self._all_markets_ready:
 *                 self._all_markets_ready = all([market.ready for market in self._sb_markets])             # <<<<<<<<<<<<<<
 *                 if not self._all_markets_ready:
 *                     # Markets not ready yet. Don't do anything.
 */
      { /* enter inner scope */
        __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 249, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_set_iterator(__pyx_v_self->__pyx_base._sb_markets, 1, (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_4);
        __pyx_t_4 = __pyx_t_1;
        __pyx_t_1 = 0;
        while (1) {
          __pyx_t_9 = __Pyx_set_iter_next(__pyx_t_4, __pyx_t_7, &__pyx_t_6, &__pyx_t_1, __pyx_t_8);
          if (unlikely(__pyx_t_9 == 0)) break;
          if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 249, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_XDECREF_SET(__pyx_8genexpr6__pyx_v_market, __pyx_t_1);
          __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr6__pyx_v_market, __pyx_n_s_ready); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 249, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 249, __pyx_L11_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_market); __pyx_8genexpr6__pyx_v_market = 0;
        goto __pyx_L14_exit_scope;
        __pyx_L11_error:;
        __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_market); __pyx_8genexpr6__pyx_v_market = 0;
        goto __pyx_L6_error;
        __pyx_L14_exit_scope:;
      } /* exit inner scope */
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_all, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 249, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 249, __pyx_L6_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_self->_all_markets_ready = __pyx_t_2;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":250
 *             if not self._all_markets_ready:
 *                 self._all_markets_ready = all([market.ready for market in self._sb_markets])
 *                 if not self._all_markets_ready:             # <<<<<<<<<<<<<<
 *                     # Markets not ready yet. Don't do anything.
 *                     if should_report_warnings:
 */
      __pyx_t_2 = ((!(__pyx_v_self->_all_markets_ready != 0)) != 0);
      if (__pyx_t_2) {

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":252
 *                 if not self._all_markets_ready:
 *                     # Markets not ready yet. Don't do anything.
 *                     if should_report_warnings:             # <<<<<<<<<<<<<<
 *                         self.logger().warning(f"Markets are not ready. No arbitrage trading is permitted.")
 *                     return
 */
        __pyx_t_2 = (__pyx_v_should_report_warnings != 0);
        if (__pyx_t_2) {

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":253
 *                     # Markets not ready yet. Don't do anything.
 *                     if should_report_warnings:
 *                         self.logger().warning(f"Markets are not ready. No arbitrage trading is permitted.")             # <<<<<<<<<<<<<<
 *                     return
 *                 else:
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_10 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
              __pyx_t_8 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_10, };
            __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 253, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_warning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
              __pyx_t_8 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_kp_u_Markets_are_not_ready_No_arbitra};
            __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 253, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":252
 *                 if not self._all_markets_ready:
 *                     # Markets not ready yet. Don't do anything.
 *                     if should_report_warnings:             # <<<<<<<<<<<<<<
 *                         self.logger().warning(f"Markets are not ready. No arbitrage trading is permitted.")
 *                     return
 */
        }

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":254
 *                     if should_report_warnings:
 *                         self.logger().warning(f"Markets are not ready. No arbitrage trading is permitted.")
 *                     return             # <<<<<<<<<<<<<<
 *                 else:
 *                     if self.OPTION_LOG_STATUS_REPORT:
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        goto __pyx_L5_return;

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":250
 *             if not self._all_markets_ready:
 *                 self._all_markets_ready = all([market.ready for market in self._sb_markets])
 *                 if not self._all_markets_ready:             # <<<<<<<<<<<<<<
 *                     # Markets not ready yet. Don't do anything.
 *                     if should_report_warnings:
 */
      }

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":256
 *                     return
 *                 else:
 *                     if self.OPTION_LOG_STATUS_REPORT:             # <<<<<<<<<<<<<<
 *                         self.logger().info(f"Markets are ready. Trading started.")
 * 
 */
      /*else*/ {
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_STATUS_REPORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 256, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 256, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (__pyx_t_2) {

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":257
 *                 else:
 *                     if self.OPTION_LOG_STATUS_REPORT:
 *                         self.logger().info(f"Markets are ready. Trading started.")             # <<<<<<<<<<<<<<
 * 
 *             if not all([market.network_status is NetworkStatus.CONNECTED for market in self._sb_markets]):
 */
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 257, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_10 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
              __pyx_t_8 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_10, };
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 257, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
            __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
            if (likely(__pyx_t_1)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
              __Pyx_INCREF(__pyx_t_1);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_5, function);
              __pyx_t_8 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_kp_u_Markets_are_ready_Trading_starte};
            __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 257, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":256
 *                     return
 *                 else:
 *                     if self.OPTION_LOG_STATUS_REPORT:             # <<<<<<<<<<<<<<
 *                         self.logger().info(f"Markets are ready. Trading started.")
 * 
 */
        }
      }

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":248
 *                                            (self._logging_options & self.OPTION_LOG_STATUS_REPORT))
 *         try:
 *             if not self._all_markets_ready:             # <<<<<<<<<<<<<<
 *                 self._all_markets_ready = all([market.ready for market in self._sb_markets])
 *                 if not self._all_markets_ready:
 */
    }

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":259
 *                         self.logger().info(f"Markets are ready. Trading started.")
 * 
 *             if not all([market.network_status is NetworkStatus.CONNECTED for market in self._sb_markets]):             # <<<<<<<<<<<<<<
 *                 if should_report_warnings:
 *                     self.logger().warning(f"Markets are not all online. No arbitrage trading is permitted.")
 */
    { /* enter inner scope */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 259, __pyx_L21_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = 0;
      __pyx_t_1 = __Pyx_set_iterator(__pyx_v_self->__pyx_base._sb_markets, 1, (&__pyx_t_6), (&__pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L21_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF(__pyx_t_5);
      __pyx_t_5 = __pyx_t_1;
      __pyx_t_1 = 0;
      while (1) {
        __pyx_t_9 = __Pyx_set_iter_next(__pyx_t_5, __pyx_t_6, &__pyx_t_7, &__pyx_t_1, __pyx_t_8);
        if (unlikely(__pyx_t_9 == 0)) break;
        if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 259, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_XDECREF_SET(__pyx_8genexpr7__pyx_v_market, __pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr7__pyx_v_market, __pyx_n_s_network_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 259, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_CONNECTED); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 259, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_2 = (__pyx_t_1 == __pyx_t_11);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 259, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_11);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 259, __pyx_L21_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_market); __pyx_8genexpr7__pyx_v_market = 0;
      goto __pyx_L24_exit_scope;
      __pyx_L21_error:;
      __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_market); __pyx_8genexpr7__pyx_v_market = 0;
      goto __pyx_L6_error;
      __pyx_L24_exit_scope:;
    } /* exit inner scope */
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_builtin_all, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 259, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 259, __pyx_L6_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = ((!__pyx_t_2) != 0);
    if (__pyx_t_3) {

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":260
 * 
 *             if not all([market.network_status is NetworkStatus.CONNECTED for market in self._sb_markets]):
 *                 if should_report_warnings:             # <<<<<<<<<<<<<<
 *                     self.logger().warning(f"Markets are not all online. No arbitrage trading is permitted.")
 *                 return
 */
      __pyx_t_3 = (__pyx_v_should_report_warnings != 0);
      if (__pyx_t_3) {

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":261
 *             if not all([market.network_status is NetworkStatus.CONNECTED for market in self._sb_markets]):
 *                 if should_report_warnings:
 *                     self.logger().warning(f"Markets are not all online. No arbitrage trading is permitted.")             # <<<<<<<<<<<<<<
 *                 return
 * 
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 261, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_1 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_1, };
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 261, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_warning); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 261, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_u_Markets_are_not_all_online_No_ar};
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 261, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":260
 * 
 *             if not all([market.network_status is NetworkStatus.CONNECTED for market in self._sb_markets]):
 *                 if should_report_warnings:             # <<<<<<<<<<<<<<
 *                     self.logger().warning(f"Markets are not all online. No arbitrage trading is permitted.")
 *                 return
 */
      }

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":262
 *                 if should_report_warnings:
 *                     self.logger().warning(f"Markets are not all online. No arbitrage trading is permitted.")
 *                 return             # <<<<<<<<<<<<<<
 * 
 *             for market_pair in self._market_pairs:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L5_return;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":259
 *                         self.logger().info(f"Markets are ready. Trading started.")
 * 
 *             if not all([market.network_status is NetworkStatus.CONNECTED for market in self._sb_markets]):             # <<<<<<<<<<<<<<
 *                 if should_report_warnings:
 *                     self.logger().warning(f"Markets are not all online. No arbitrage trading is permitted.")
 */
    }

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":264
 *                 return
 * 
 *             for market_pair in self._market_pairs:             # <<<<<<<<<<<<<<
 *                 self.c_process_market_pair(market_pair)
 *             # log conversion rates every 5 minutes
 */
    if (unlikely(__pyx_v_self->_market_pairs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 264, __pyx_L6_error)
    }
    __pyx_t_5 = __pyx_v_self->_market_pairs; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
    for (;;) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_11 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_11); __pyx_t_6++; if (unlikely((0 < 0))) __PYX_ERR(0, 264, __pyx_L6_error)
      #else
      __pyx_t_11 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 264, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_11);
      #endif
      __Pyx_XDECREF_SET(__pyx_v_market_pair, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":265
 * 
 *             for market_pair in self._market_pairs:
 *                 self.c_process_market_pair(market_pair)             # <<<<<<<<<<<<<<
 *             # log conversion rates every 5 minutes
 *             if self._last_conv_rates_logged + (60. * 5) < self._current_timestamp:
 */
      __pyx_t_11 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_process_market_pair(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 265, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":264
 *                 return
 * 
 *             for market_pair in self._market_pairs:             # <<<<<<<<<<<<<<
 *                 self.c_process_market_pair(market_pair)
 *             # log conversion rates every 5 minutes
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":267
 *                 self.c_process_market_pair(market_pair)
 *             # log conversion rates every 5 minutes
 *             if self._last_conv_rates_logged + (60. * 5) < self._current_timestamp:             # <<<<<<<<<<<<<<
 *                 self.log_conversion_rates()
 *                 self._last_conv_rates_logged = self._current_timestamp
 */
    __pyx_t_3 = (((__pyx_v_self->_last_conv_rates_logged + (60. * 5.0)) < __pyx_v_self->__pyx_base.__pyx_base._current_timestamp) != 0);
    if (__pyx_t_3) {

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":268
 *             # log conversion rates every 5 minutes
 *             if self._last_conv_rates_logged + (60. * 5) < self._current_timestamp:
 *                 self.log_conversion_rates()             # <<<<<<<<<<<<<<
 *                 self._last_conv_rates_logged = self._current_timestamp
 *         finally:
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_conversion_rates); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 268, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_4 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_8 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_4, };
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 268, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":269
 *             if self._last_conv_rates_logged + (60. * 5) < self._current_timestamp:
 *                 self.log_conversion_rates()
 *                 self._last_conv_rates_logged = self._current_timestamp             # <<<<<<<<<<<<<<
 *         finally:
 *             self._last_timestamp = timestamp
 */
      __pyx_t_12 = __pyx_v_self->__pyx_base.__pyx_base._current_timestamp;
      __pyx_v_self->_last_conv_rates_logged = __pyx_t_12;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":267
 *                 self.c_process_market_pair(market_pair)
 *             # log conversion rates every 5 minutes
 *             if self._last_conv_rates_logged + (60. * 5) < self._current_timestamp:             # <<<<<<<<<<<<<<
 *                 self.log_conversion_rates()
 *                 self._last_conv_rates_logged = self._current_timestamp
 */
    }
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":271
 *                 self._last_conv_rates_logged = self._current_timestamp
 *         finally:
 *             self._last_timestamp = timestamp             # <<<<<<<<<<<<<<
 * 
 *     cdef c_did_complete_buy_order(self, object buy_order_completed_event):
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_v_self->_last_timestamp = __pyx_v_timestamp;
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_17, &__pyx_t_18, &__pyx_t_19);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16) < 0)) __Pyx_ErrFetch(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_14);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __pyx_t_8 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_13 = __pyx_filename;
      {
        __pyx_v_self->_last_timestamp = __pyx_v_timestamp;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_17);
        __Pyx_XGIVEREF(__pyx_t_18);
        __Pyx_XGIVEREF(__pyx_t_19);
        __Pyx_ExceptionReset(__pyx_t_17, __pyx_t_18, __pyx_t_19);
      }
      __Pyx_XGIVEREF(__pyx_t_14);
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_ErrRestore(__pyx_t_14, __pyx_t_15, __pyx_t_16);
      __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0;
      __pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_13;
      goto __pyx_L1_error;
    }
    __pyx_L5_return: {
      __pyx_t_19 = __pyx_r;
      __pyx_r = 0;
      __pyx_v_self->_last_timestamp = __pyx_v_timestamp;
      __pyx_r = __pyx_t_19;
      __pyx_t_19 = 0;
      goto __pyx_L0;
    }
    __pyx_L7:;
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":231
 *             super().notify_hb_app(msg)
 * 
 *     cdef c_tick(self, double timestamp):             # <<<<<<<<<<<<<<
 *         """
 *         Clock tick entry point.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.c_tick", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_market_pair);
  __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_market);
  __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_market);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":273
 *             self._last_timestamp = timestamp
 * 
 *     cdef c_did_complete_buy_order(self, object buy_order_completed_event):             # <<<<<<<<<<<<<<
 *         """
 *         Output log for completed buy order.
 */

static PyObject *__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_did_complete_buy_order(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_buy_order_completed_event) {
  PyObject *__pyx_v_buy_order = 0;
  PyObject *__pyx_v_market_trading_pair_tuple = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  Py_UCS4 __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_complete_buy_order", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":280
 *         """
 *         cdef:
 *             object buy_order = buy_order_completed_event             # <<<<<<<<<<<<<<
 *             object market_trading_pair_tuple = self._sb_order_tracker.c_get_market_pair_from_order_id(buy_order.order_id)
 *         if market_trading_pair_tuple is not None:
 */
  __Pyx_INCREF(__pyx_v_buy_order_completed_event);
  __pyx_v_buy_order = __pyx_v_buy_order_completed_event;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":281
 *         cdef:
 *             object buy_order = buy_order_completed_event
 *             object market_trading_pair_tuple = self._sb_order_tracker.c_get_market_pair_from_order_id(buy_order.order_id)             # <<<<<<<<<<<<<<
 *         if market_trading_pair_tuple is not None:
 *             self._last_trade_timestamps[market_trading_pair_tuple] = self._current_timestamp
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_order, __pyx_n_s_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 281, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_pair_from_order_id(__pyx_v_self->__pyx_base._sb_order_tracker, ((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_market_trading_pair_tuple = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":282
 *             object buy_order = buy_order_completed_event
 *             object market_trading_pair_tuple = self._sb_order_tracker.c_get_market_pair_from_order_id(buy_order.order_id)
 *         if market_trading_pair_tuple is not None:             # <<<<<<<<<<<<<<
 *             self._last_trade_timestamps[market_trading_pair_tuple] = self._current_timestamp
 *             if self._logging_options & self.OPTION_LOG_ORDER_COMPLETED:
 */
  __pyx_t_3 = (__pyx_v_market_trading_pair_tuple != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":283
 *             object market_trading_pair_tuple = self._sb_order_tracker.c_get_market_pair_from_order_id(buy_order.order_id)
 *         if market_trading_pair_tuple is not None:
 *             self._last_trade_timestamps[market_trading_pair_tuple] = self._current_timestamp             # <<<<<<<<<<<<<<
 *             if self._logging_options & self.OPTION_LOG_ORDER_COMPLETED:
 *                 self.log_with_clock(logging.INFO,
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_v_self->_last_trade_timestamps == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 283, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__pyx_v_self->_last_trade_timestamps, __pyx_v_market_trading_pair_tuple, __pyx_t_2) < 0))) __PYX_ERR(0, 283, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":284
 *         if market_trading_pair_tuple is not None:
 *             self._last_trade_timestamps[market_trading_pair_tuple] = self._current_timestamp
 *             if self._logging_options & self.OPTION_LOG_ORDER_COMPLETED:             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(logging.INFO,
 *                                     f"Limit order completed on {market_trading_pair_tuple[0].name}: {buy_order.order_id}")
 */
    __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_ORDER_COMPLETED); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyNumber_And(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_4) {

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":285
 *             self._last_trade_timestamps[market_trading_pair_tuple] = self._current_timestamp
 *             if self._logging_options & self.OPTION_LOG_ORDER_COMPLETED:
 *                 self.log_with_clock(logging.INFO,             # <<<<<<<<<<<<<<
 *                                     f"Limit order completed on {market_trading_pair_tuple[0].name}: {buy_order.order_id}")
 *                 self.notify_hb_app_with_timestamp(f"{buy_order.base_asset_amount:.8f} {buy_order.base_asset}-{buy_order.quote_asset} buy limit order completed on {market_trading_pair_tuple[0].name}")
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logging); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_INFO); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":286
 *             if self._logging_options & self.OPTION_LOG_ORDER_COMPLETED:
 *                 self.log_with_clock(logging.INFO,
 *                                     f"Limit order completed on {market_trading_pair_tuple[0].name}: {buy_order.order_id}")             # <<<<<<<<<<<<<<
 *                 self.notify_hb_app_with_timestamp(f"{buy_order.base_asset_amount:.8f} {buy_order.base_asset}-{buy_order.quote_asset} buy limit order completed on {market_trading_pair_tuple[0].name}")
 * 
 */
      __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = 0;
      __pyx_t_8 = 127;
      __Pyx_INCREF(__pyx_kp_u_Limit_order_completed_on);
      __pyx_t_7 += 25;
      __Pyx_GIVEREF(__pyx_kp_u_Limit_order_completed_on);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Limit_order_completed_on);
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_market_trading_pair_tuple, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_name_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_INCREF(__pyx_kp_u__10);
      __pyx_t_7 += 2;
      __Pyx_GIVEREF(__pyx_kp_u__10);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u__10);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_order, __pyx_n_s_order_id); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyUnicode_Join(__pyx_t_2, 4, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 286, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_11 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_6, __pyx_t_10};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_11, 2+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":287
 *                 self.log_with_clock(logging.INFO,
 *                                     f"Limit order completed on {market_trading_pair_tuple[0].name}: {buy_order.order_id}")
 *                 self.notify_hb_app_with_timestamp(f"{buy_order.base_asset_amount:.8f} {buy_order.base_asset}-{buy_order.quote_asset} buy limit order completed on {market_trading_pair_tuple[0].name}")             # <<<<<<<<<<<<<<
 * 
 *     cdef c_did_complete_sell_order(self, object sell_order_completed_event):
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_notify_hb_app_with_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = PyTuple_New(7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_7 = 0;
      __pyx_t_8 = 127;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_order, __pyx_n_s_base_asset_amount); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = __Pyx_PyObject_Format(__pyx_t_6, __pyx_kp_u_8f); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_kp_u__12);
      __pyx_t_7 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__12);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_kp_u__12);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_order, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u__5);
      __pyx_t_7 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__5);
      PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_kp_u__5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_order, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_kp_u_buy_limit_order_completed_on);
      __pyx_t_7 += 30;
      __Pyx_GIVEREF(__pyx_kp_u_buy_limit_order_completed_on);
      PyTuple_SET_ITEM(__pyx_t_10, 5, __pyx_kp_u_buy_limit_order_completed_on);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_market_trading_pair_tuple, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_10, 6, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_10, 7, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_11 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_2};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 287, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":284
 *         if market_trading_pair_tuple is not None:
 *             self._last_trade_timestamps[market_trading_pair_tuple] = self._current_timestamp
 *             if self._logging_options & self.OPTION_LOG_ORDER_COMPLETED:             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(logging.INFO,
 *                                     f"Limit order completed on {market_trading_pair_tuple[0].name}: {buy_order.order_id}")
 */
    }

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":282
 *             object buy_order = buy_order_completed_event
 *             object market_trading_pair_tuple = self._sb_order_tracker.c_get_market_pair_from_order_id(buy_order.order_id)
 *         if market_trading_pair_tuple is not None:             # <<<<<<<<<<<<<<
 *             self._last_trade_timestamps[market_trading_pair_tuple] = self._current_timestamp
 *             if self._logging_options & self.OPTION_LOG_ORDER_COMPLETED:
 */
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":273
 *             self._last_timestamp = timestamp
 * 
 *     cdef c_did_complete_buy_order(self, object buy_order_completed_event):             # <<<<<<<<<<<<<<
 *         """
 *         Output log for completed buy order.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.c_did_complete_buy_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_buy_order);
  __Pyx_XDECREF(__pyx_v_market_trading_pair_tuple);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":289
 *                 self.notify_hb_app_with_timestamp(f"{buy_order.base_asset_amount:.8f} {buy_order.base_asset}-{buy_order.quote_asset} buy limit order completed on {market_trading_pair_tuple[0].name}")
 * 
 *     cdef c_did_complete_sell_order(self, object sell_order_completed_event):             # <<<<<<<<<<<<<<
 *         """
 *         Output log for completed sell order.
 */

static PyObject *__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_did_complete_sell_order(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_sell_order_completed_event) {
  PyObject *__pyx_v_sell_order = 0;
  PyObject *__pyx_v_market_trading_pair_tuple = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  Py_UCS4 __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_complete_sell_order", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":296
 *         """
 *         cdef:
 *             object sell_order = sell_order_completed_event             # <<<<<<<<<<<<<<
 *             object market_trading_pair_tuple = self._sb_order_tracker.c_get_market_pair_from_order_id(sell_order.order_id)
 *         if market_trading_pair_tuple is not None:
 */
  __Pyx_INCREF(__pyx_v_sell_order_completed_event);
  __pyx_v_sell_order = __pyx_v_sell_order_completed_event;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":297
 *         cdef:
 *             object sell_order = sell_order_completed_event
 *             object market_trading_pair_tuple = self._sb_order_tracker.c_get_market_pair_from_order_id(sell_order.order_id)             # <<<<<<<<<<<<<<
 *         if market_trading_pair_tuple is not None:
 *             self._last_trade_timestamps[market_trading_pair_tuple] = self._current_timestamp
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_order, __pyx_n_s_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 297, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_pair_from_order_id(__pyx_v_self->__pyx_base._sb_order_tracker, ((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_market_trading_pair_tuple = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":298
 *             object sell_order = sell_order_completed_event
 *             object market_trading_pair_tuple = self._sb_order_tracker.c_get_market_pair_from_order_id(sell_order.order_id)
 *         if market_trading_pair_tuple is not None:             # <<<<<<<<<<<<<<
 *             self._last_trade_timestamps[market_trading_pair_tuple] = self._current_timestamp
 *             if self._logging_options & self.OPTION_LOG_ORDER_COMPLETED:
 */
  __pyx_t_3 = (__pyx_v_market_trading_pair_tuple != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":299
 *             object market_trading_pair_tuple = self._sb_order_tracker.c_get_market_pair_from_order_id(sell_order.order_id)
 *         if market_trading_pair_tuple is not None:
 *             self._last_trade_timestamps[market_trading_pair_tuple] = self._current_timestamp             # <<<<<<<<<<<<<<
 *             if self._logging_options & self.OPTION_LOG_ORDER_COMPLETED:
 *                 self.log_with_clock(logging.INFO,
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (unlikely(__pyx_v_self->_last_trade_timestamps == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 299, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__pyx_v_self->_last_trade_timestamps, __pyx_v_market_trading_pair_tuple, __pyx_t_2) < 0))) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":300
 *         if market_trading_pair_tuple is not None:
 *             self._last_trade_timestamps[market_trading_pair_tuple] = self._current_timestamp
 *             if self._logging_options & self.OPTION_LOG_ORDER_COMPLETED:             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(logging.INFO,
 *                                     f"Limit order completed on {market_trading_pair_tuple[0].name}: {sell_order.order_id}")
 */
    __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_ORDER_COMPLETED); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyNumber_And(__pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 300, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_4) {

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":301
 *             self._last_trade_timestamps[market_trading_pair_tuple] = self._current_timestamp
 *             if self._logging_options & self.OPTION_LOG_ORDER_COMPLETED:
 *                 self.log_with_clock(logging.INFO,             # <<<<<<<<<<<<<<
 *                                     f"Limit order completed on {market_trading_pair_tuple[0].name}: {sell_order.order_id}")
 *                 self.notify_hb_app_with_timestamp(f"{sell_order.base_asset_amount:.8f} {sell_order.base_asset}-{sell_order.quote_asset} sell limit order completed on {market_trading_pair_tuple[0].name}")
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logging); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 301, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_INFO); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 301, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":302
 *             if self._logging_options & self.OPTION_LOG_ORDER_COMPLETED:
 *                 self.log_with_clock(logging.INFO,
 *                                     f"Limit order completed on {market_trading_pair_tuple[0].name}: {sell_order.order_id}")             # <<<<<<<<<<<<<<
 *                 self.notify_hb_app_with_timestamp(f"{sell_order.base_asset_amount:.8f} {sell_order.base_asset}-{sell_order.quote_asset} sell limit order completed on {market_trading_pair_tuple[0].name}")
 * 
 */
      __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = 0;
      __pyx_t_8 = 127;
      __Pyx_INCREF(__pyx_kp_u_Limit_order_completed_on);
      __pyx_t_7 += 25;
      __Pyx_GIVEREF(__pyx_kp_u_Limit_order_completed_on);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Limit_order_completed_on);
      __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_market_trading_pair_tuple, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_name_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_9);
      __pyx_t_9 = 0;
      __Pyx_INCREF(__pyx_kp_u__10);
      __pyx_t_7 += 2;
      __Pyx_GIVEREF(__pyx_kp_u__10);
      PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u__10);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_order, __pyx_n_s_order_id); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_10);
      __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyUnicode_Join(__pyx_t_2, 4, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 302, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_11 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_6, __pyx_t_10};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_11, 2+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 301, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":303
 *                 self.log_with_clock(logging.INFO,
 *                                     f"Limit order completed on {market_trading_pair_tuple[0].name}: {sell_order.order_id}")
 *                 self.notify_hb_app_with_timestamp(f"{sell_order.base_asset_amount:.8f} {sell_order.base_asset}-{sell_order.quote_asset} sell limit order completed on {market_trading_pair_tuple[0].name}")             # <<<<<<<<<<<<<<
 * 
 *     cdef c_did_cancel_order(self, object cancel_event):
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_notify_hb_app_with_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = PyTuple_New(7); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_7 = 0;
      __pyx_t_8 = 127;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_order, __pyx_n_s_base_asset_amount); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = __Pyx_PyObject_Format(__pyx_t_6, __pyx_kp_u_8f); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_kp_u__12);
      __pyx_t_7 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__12);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_kp_u__12);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_order, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u__5);
      __pyx_t_7 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__5);
      PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_kp_u__5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_order, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_kp_u_sell_limit_order_completed_on);
      __pyx_t_7 += 31;
      __Pyx_GIVEREF(__pyx_kp_u_sell_limit_order_completed_on);
      PyTuple_SET_ITEM(__pyx_t_10, 5, __pyx_kp_u_sell_limit_order_completed_on);
      __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_market_trading_pair_tuple, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_8;
      __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_10, 6, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_10, 7, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 303, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_11 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_2};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 303, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":300
 *         if market_trading_pair_tuple is not None:
 *             self._last_trade_timestamps[market_trading_pair_tuple] = self._current_timestamp
 *             if self._logging_options & self.OPTION_LOG_ORDER_COMPLETED:             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(logging.INFO,
 *                                     f"Limit order completed on {market_trading_pair_tuple[0].name}: {sell_order.order_id}")
 */
    }

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":298
 *             object sell_order = sell_order_completed_event
 *             object market_trading_pair_tuple = self._sb_order_tracker.c_get_market_pair_from_order_id(sell_order.order_id)
 *         if market_trading_pair_tuple is not None:             # <<<<<<<<<<<<<<
 *             self._last_trade_timestamps[market_trading_pair_tuple] = self._current_timestamp
 *             if self._logging_options & self.OPTION_LOG_ORDER_COMPLETED:
 */
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":289
 *                 self.notify_hb_app_with_timestamp(f"{buy_order.base_asset_amount:.8f} {buy_order.base_asset}-{buy_order.quote_asset} buy limit order completed on {market_trading_pair_tuple[0].name}")
 * 
 *     cdef c_did_complete_sell_order(self, object sell_order_completed_event):             # <<<<<<<<<<<<<<
 *         """
 *         Output log for completed sell order.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.c_did_complete_sell_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_sell_order);
  __Pyx_XDECREF(__pyx_v_market_trading_pair_tuple);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":305
 *                 self.notify_hb_app_with_timestamp(f"{sell_order.base_asset_amount:.8f} {sell_order.base_asset}-{sell_order.quote_asset} sell limit order completed on {market_trading_pair_tuple[0].name}")
 * 
 *     cdef c_did_cancel_order(self, object cancel_event):             # <<<<<<<<<<<<<<
 *         """
 *         Output log for cancelled order.
 */

static PyObject *__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_did_cancel_order(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_cancel_event) {
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_market_trading_pair_tuple = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  Py_UCS4 __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_cancel_order", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":312
 *         """
 *         cdef:
 *             str order_id = cancel_event.order_id             # <<<<<<<<<<<<<<
 *             object market_trading_pair_tuple = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)
 *         if market_trading_pair_tuple is not None:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_cancel_event, __pyx_n_s_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 312, __pyx_L1_error)
  __pyx_v_order_id = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":313
 *         cdef:
 *             str order_id = cancel_event.order_id
 *             object market_trading_pair_tuple = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)             # <<<<<<<<<<<<<<
 *         if market_trading_pair_tuple is not None:
 *             self.log_with_clock(logging.INFO,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_pair_from_order_id(__pyx_v_self->__pyx_base._sb_order_tracker, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_market_trading_pair_tuple = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":314
 *             str order_id = cancel_event.order_id
 *             object market_trading_pair_tuple = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)
 *         if market_trading_pair_tuple is not None:             # <<<<<<<<<<<<<<
 *             self.log_with_clock(logging.INFO,
 *                                 f"Market order canceled on {market_trading_pair_tuple[0].name}: {order_id}")
 */
  __pyx_t_2 = (__pyx_v_market_trading_pair_tuple != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":315
 *             object market_trading_pair_tuple = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)
 *         if market_trading_pair_tuple is not None:
 *             self.log_with_clock(logging.INFO,             # <<<<<<<<<<<<<<
 *                                 f"Market order canceled on {market_trading_pair_tuple[0].name}: {order_id}")
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_logging); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_INFO); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":316
 *         if market_trading_pair_tuple is not None:
 *             self.log_with_clock(logging.INFO,
 *                                 f"Market order canceled on {market_trading_pair_tuple[0].name}: {order_id}")             # <<<<<<<<<<<<<<
 * 
 *     cdef tuple c_calculate_arbitrage_top_order_profitability(self, object market_pair):
 */
    __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = 0;
    __pyx_t_8 = 127;
    __Pyx_INCREF(__pyx_kp_u_Market_order_canceled_on);
    __pyx_t_7 += 25;
    __Pyx_GIVEREF(__pyx_kp_u_Market_order_canceled_on);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Market_order_canceled_on);
    __pyx_t_9 = __Pyx_GetItemInt(__pyx_v_market_trading_pair_tuple, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_name_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
    __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_kp_u__10);
    __pyx_t_7 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__10);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u__10);
    __pyx_t_9 = __Pyx_PyUnicode_Unicode(__pyx_v_order_id); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
    __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_9);
    __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_5, 4, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_11 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_t_6, __pyx_t_9};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_11, 2+__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":314
 *             str order_id = cancel_event.order_id
 *             object market_trading_pair_tuple = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)
 *         if market_trading_pair_tuple is not None:             # <<<<<<<<<<<<<<
 *             self.log_with_clock(logging.INFO,
 *                                 f"Market order canceled on {market_trading_pair_tuple[0].name}: {order_id}")
 */
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":305
 *                 self.notify_hb_app_with_timestamp(f"{sell_order.base_asset_amount:.8f} {sell_order.base_asset}-{sell_order.quote_asset} sell limit order completed on {market_trading_pair_tuple[0].name}")
 * 
 *     cdef c_did_cancel_order(self, object cancel_event):             # <<<<<<<<<<<<<<
 *         """
 *         Output log for cancelled order.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.c_did_cancel_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF(__pyx_v_market_trading_pair_tuple);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":318
 *                                 f"Market order canceled on {market_trading_pair_tuple[0].name}: {order_id}")
 * 
 *     cdef tuple c_calculate_arbitrage_top_order_profitability(self, object market_pair):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the profitability of crossing the exchanges in both directions (buy on exchange 2 + sell
 */

static PyObject *__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_calculate_arbitrage_top_order_profitability(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  PyObject *__pyx_v_market_1_bid_price = 0;
  PyObject *__pyx_v_market_1_ask_price = 0;
  PyObject *__pyx_v_market_2_bid_price = 0;
  PyObject *__pyx_v_market_2_ask_price = 0;
  PyObject *__pyx_v_profitability_buy_2_sell_1 = NULL;
  PyObject *__pyx_v_profitability_buy_1_sell_2 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_calculate_arbitrage_top_order_profitability", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":328
 * 
 *         cdef:
 *             object market_1_bid_price = market_pair.first.get_price(False)             # <<<<<<<<<<<<<<
 *             object market_1_ask_price = market_pair.first.get_price(True)
 *             object market_2_bid_price = self.market_conversion_rate(market_pair.second) * \
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_first); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, Py_False};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_market_1_bid_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":329
 *         cdef:
 *             object market_1_bid_price = market_pair.first.get_price(False)
 *             object market_1_ask_price = market_pair.first.get_price(True)             # <<<<<<<<<<<<<<
 *             object market_2_bid_price = self.market_conversion_rate(market_pair.second) * \
 *                 market_pair.second.get_price(False)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_first); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, Py_True};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 329, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_market_1_ask_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":330
 *             object market_1_bid_price = market_pair.first.get_price(False)
 *             object market_1_ask_price = market_pair.first.get_price(True)
 *             object market_2_bid_price = self.market_conversion_rate(market_pair.second) * \             # <<<<<<<<<<<<<<
 *                 market_pair.second.get_price(False)
 *             object market_2_ask_price = self.market_conversion_rate(market_pair.second) * \
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_conversion_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_second); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":331
 *             object market_1_ask_price = market_pair.first.get_price(True)
 *             object market_2_bid_price = self.market_conversion_rate(market_pair.second) * \
 *                 market_pair.second.get_price(False)             # <<<<<<<<<<<<<<
 *             object market_2_ask_price = self.market_conversion_rate(market_pair.second) * \
 *                 market_pair.second.get_price(True)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_second); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get_price); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, Py_False};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":330
 *             object market_1_bid_price = market_pair.first.get_price(False)
 *             object market_1_ask_price = market_pair.first.get_price(True)
 *             object market_2_bid_price = self.market_conversion_rate(market_pair.second) * \             # <<<<<<<<<<<<<<
 *                 market_pair.second.get_price(False)
 *             object market_2_ask_price = self.market_conversion_rate(market_pair.second) * \
 */
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_market_2_bid_price = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":332
 *             object market_2_bid_price = self.market_conversion_rate(market_pair.second) * \
 *                 market_pair.second.get_price(False)
 *             object market_2_ask_price = self.market_conversion_rate(market_pair.second) * \             # <<<<<<<<<<<<<<
 *                 market_pair.second.get_price(True)
 *         profitability_buy_2_sell_1 = market_1_bid_price / market_2_ask_price - 1
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_conversion_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_second); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_1};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":333
 *                 market_pair.second.get_price(False)
 *             object market_2_ask_price = self.market_conversion_rate(market_pair.second) * \
 *                 market_pair.second.get_price(True)             # <<<<<<<<<<<<<<
 *         profitability_buy_2_sell_1 = market_1_bid_price / market_2_ask_price - 1
 *         profitability_buy_1_sell_2 = market_2_bid_price / market_1_ask_price - 1
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_second); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_get_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, Py_True};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":332
 *             object market_2_bid_price = self.market_conversion_rate(market_pair.second) * \
 *                 market_pair.second.get_price(False)
 *             object market_2_ask_price = self.market_conversion_rate(market_pair.second) * \             # <<<<<<<<<<<<<<
 *                 market_pair.second.get_price(True)
 *         profitability_buy_2_sell_1 = market_1_bid_price / market_2_ask_price - 1
 */
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_market_2_ask_price = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":334
 *             object market_2_ask_price = self.market_conversion_rate(market_pair.second) * \
 *                 market_pair.second.get_price(True)
 *         profitability_buy_2_sell_1 = market_1_bid_price / market_2_ask_price - 1             # <<<<<<<<<<<<<<
 *         profitability_buy_1_sell_2 = market_2_bid_price / market_1_ask_price - 1
 *         return profitability_buy_2_sell_1, profitability_buy_1_sell_2
 */
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_market_1_bid_price, __pyx_v_market_2_ask_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_t_3, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_profitability_buy_2_sell_1 = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":335
 *                 market_pair.second.get_price(True)
 *         profitability_buy_2_sell_1 = market_1_bid_price / market_2_ask_price - 1
 *         profitability_buy_1_sell_2 = market_2_bid_price / market_1_ask_price - 1             # <<<<<<<<<<<<<<
 *         return profitability_buy_2_sell_1, profitability_buy_1_sell_2
 * 
 */
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_market_2_bid_price, __pyx_v_market_1_ask_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_profitability_buy_1_sell_2 = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":336
 *         profitability_buy_2_sell_1 = market_1_bid_price / market_2_ask_price - 1
 *         profitability_buy_1_sell_2 = market_2_bid_price / market_1_ask_price - 1
 *         return profitability_buy_2_sell_1, profitability_buy_1_sell_2             # <<<<<<<<<<<<<<
 * 
 *     cdef bint c_ready_for_new_orders(self, list market_trading_pair_tuples):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_profitability_buy_2_sell_1);
  __Pyx_GIVEREF(__pyx_v_profitability_buy_2_sell_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_profitability_buy_2_sell_1);
  __Pyx_INCREF(__pyx_v_profitability_buy_1_sell_2);
  __Pyx_GIVEREF(__pyx_v_profitability_buy_1_sell_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_profitability_buy_1_sell_2);
  __pyx_r = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":318
 *                                 f"Market order canceled on {market_trading_pair_tuple[0].name}: {order_id}")
 * 
 *     cdef tuple c_calculate_arbitrage_top_order_profitability(self, object market_pair):             # <<<<<<<<<<<<<<
 *         """
 *         Calculate the profitability of crossing the exchanges in both directions (buy on exchange 2 + sell
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.c_calculate_arbitrage_top_order_profitability", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_market_1_bid_price);
  __Pyx_XDECREF(__pyx_v_market_1_ask_price);
  __Pyx_XDECREF(__pyx_v_market_2_bid_price);
  __Pyx_XDECREF(__pyx_v_market_2_ask_price);
  __Pyx_XDECREF(__pyx_v_profitability_buy_2_sell_1);
  __Pyx_XDECREF(__pyx_v_profitability_buy_1_sell_2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":338
 *         return profitability_buy_2_sell_1, profitability_buy_1_sell_2
 * 
 *     cdef bint c_ready_for_new_orders(self, list market_trading_pair_tuples):             # <<<<<<<<<<<<<<
 *         """
 *         Check whether we are ready for making new arbitrage orders or not. Conditions where we should not make further
 */

static int __pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_ready_for_new_orders(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuples) {
  double __pyx_v_time_left;
  PyObject *__pyx_v_tracked_taker_orders = 0;
  PyObject *__pyx_v_market_trading_pair_tuple = NULL;
  PyObject *__pyx_v_ready_to_trade_time = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  double __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  Py_UCS4 __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_ready_for_new_orders", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":354
 *         cdef:
 *             double time_left
 *             dict tracked_taker_orders = {**self._sb_order_tracker.c_get_limit_orders(), ** self._sb_order_tracker.c_get_market_orders()}             # <<<<<<<<<<<<<<
 * 
 *         for market_trading_pair_tuple in market_trading_pair_tuples:
 */
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_limit_orders(__pyx_v_self->__pyx_base._sb_order_tracker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
    __PYX_ERR(0, 354, __pyx_L1_error)
  }
  __pyx_t_1 = PyDict_Copy(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_orders(__pyx_v_self->__pyx_base._sb_order_tracker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
    __PYX_ERR(0, 354, __pyx_L1_error)
  }
  if (unlikely(PyDict_Update(__pyx_t_1, __pyx_t_2) < 0)) {
    if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseMappingExpectedError(__pyx_t_2);
    __PYX_ERR(0, 354, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_tracked_taker_orders = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":356
 *             dict tracked_taker_orders = {**self._sb_order_tracker.c_get_limit_orders(), ** self._sb_order_tracker.c_get_market_orders()}
 * 
 *         for market_trading_pair_tuple in market_trading_pair_tuples:             # <<<<<<<<<<<<<<
 *             # Do not continue if there are pending limit order
 *             if len(tracked_taker_orders.get(market_trading_pair_tuple, {})) > 0:
 */
  if (unlikely(__pyx_v_market_trading_pair_tuples == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 356, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_market_trading_pair_tuples; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 356, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 356, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_market_trading_pair_tuple, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":358
 *         for market_trading_pair_tuple in market_trading_pair_tuples:
 *             # Do not continue if there are pending limit order
 *             if len(tracked_taker_orders.get(market_trading_pair_tuple, {})) > 0:             # <<<<<<<<<<<<<<
 *                 return False
 *             # Wait for the cool off interval before the next trade, so wallet balance is up to date
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyDict_GetItemDefault(__pyx_v_tracked_taker_orders, __pyx_v_market_trading_pair_tuple, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_5 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 358, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = ((__pyx_t_5 > 0) != 0);
    if (__pyx_t_6) {

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":359
 *             # Do not continue if there are pending limit order
 *             if len(tracked_taker_orders.get(market_trading_pair_tuple, {})) > 0:
 *                 return False             # <<<<<<<<<<<<<<
 *             # Wait for the cool off interval before the next trade, so wallet balance is up to date
 *             ready_to_trade_time = self._last_trade_timestamps.get(market_trading_pair_tuple, 0) + self._next_trade_delay
 */
      __pyx_r = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":358
 *         for market_trading_pair_tuple in market_trading_pair_tuples:
 *             # Do not continue if there are pending limit order
 *             if len(tracked_taker_orders.get(market_trading_pair_tuple, {})) > 0:             # <<<<<<<<<<<<<<
 *                 return False
 *             # Wait for the cool off interval before the next trade, so wallet balance is up to date
 */
    }

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":361
 *                 return False
 *             # Wait for the cool off interval before the next trade, so wallet balance is up to date
 *             ready_to_trade_time = self._last_trade_timestamps.get(market_trading_pair_tuple, 0) + self._next_trade_delay             # <<<<<<<<<<<<<<
 *             if market_trading_pair_tuple in self._last_trade_timestamps and ready_to_trade_time > self._current_timestamp:
 *                 time_left = self._current_timestamp - self._last_trade_timestamps[market_trading_pair_tuple] - self._next_trade_delay
 */
    if (unlikely(__pyx_v_self->_last_trade_timestamps == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
      __PYX_ERR(0, 361, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyDict_GetItemDefault(__pyx_v_self->_last_trade_timestamps, __pyx_v_market_trading_pair_tuple, __pyx_int_0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->_next_trade_delay); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ready_to_trade_time, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":362
 *             # Wait for the cool off interval before the next trade, so wallet balance is up to date
 *             ready_to_trade_time = self._last_trade_timestamps.get(market_trading_pair_tuple, 0) + self._next_trade_delay
 *             if market_trading_pair_tuple in self._last_trade_timestamps and ready_to_trade_time > self._current_timestamp:             # <<<<<<<<<<<<<<
 *                 time_left = self._current_timestamp - self._last_trade_timestamps[market_trading_pair_tuple] - self._next_trade_delay
 *                 if not self._cool_off_logged:
 */
    if (unlikely(__pyx_v_self->_last_trade_timestamps == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 362, __pyx_L1_error)
    }
    __pyx_t_8 = (__Pyx_PyDict_ContainsTF(__pyx_v_market_trading_pair_tuple, __pyx_v_self->_last_trade_timestamps, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 362, __pyx_L1_error)
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {
    } else {
      __pyx_t_6 = __pyx_t_9;
      goto __pyx_L7_bool_binop_done;
    }
    __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_ready_to_trade_time, __pyx_t_7, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 362, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __pyx_t_9;
    __pyx_L7_bool_binop_done:;
    if (__pyx_t_6) {

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":363
 *             ready_to_trade_time = self._last_trade_timestamps.get(market_trading_pair_tuple, 0) + self._next_trade_delay
 *             if market_trading_pair_tuple in self._last_trade_timestamps and ready_to_trade_time > self._current_timestamp:
 *                 time_left = self._current_timestamp - self._last_trade_timestamps[market_trading_pair_tuple] - self._next_trade_delay             # <<<<<<<<<<<<<<
 *                 if not self._cool_off_logged:
 *                     self.log_with_clock(
 */
      __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(__pyx_v_self->_last_trade_timestamps == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 363, __pyx_L1_error)
      }
      __pyx_t_7 = __Pyx_PyDict_GetItem(__pyx_v_self->_last_trade_timestamps, __pyx_v_market_trading_pair_tuple); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_4 = PyNumber_Subtract(__pyx_t_2, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyFloat_FromDouble(__pyx_v_self->_next_trade_delay); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_2 = PyNumber_Subtract(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 363, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_v_time_left = __pyx_t_10;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":364
 *             if market_trading_pair_tuple in self._last_trade_timestamps and ready_to_trade_time > self._current_timestamp:
 *                 time_left = self._current_timestamp - self._last_trade_timestamps[market_trading_pair_tuple] - self._next_trade_delay
 *                 if not self._cool_off_logged:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(
 *                         logging.INFO,
 */
      __pyx_t_6 = ((!(__pyx_v_self->_cool_off_logged != 0)) != 0);
      if (__pyx_t_6) {

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":365
 *                 time_left = self._current_timestamp - self._last_trade_timestamps[market_trading_pair_tuple] - self._next_trade_delay
 *                 if not self._cool_off_logged:
 *                     self.log_with_clock(             # <<<<<<<<<<<<<<
 *                         logging.INFO,
 *                         f"Cooling off from previous trade on {market_trading_pair_tuple.market.name}. "
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 365, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":366
 *                 if not self._cool_off_logged:
 *                     self.log_with_clock(
 *                         logging.INFO,             # <<<<<<<<<<<<<<
 *                         f"Cooling off from previous trade on {market_trading_pair_tuple.market.name}. "
 *                         f"Resuming in {int(time_left)} seconds."
 */
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logging); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 366, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_INFO); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 366, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":367
 *                     self.log_with_clock(
 *                         logging.INFO,
 *                         f"Cooling off from previous trade on {market_trading_pair_tuple.market.name}. "             # <<<<<<<<<<<<<<
 *                         f"Resuming in {int(time_left)} seconds."
 *                     )
 */
        __pyx_t_4 = PyTuple_New(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 367, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = 0;
        __pyx_t_12 = 127;
        __Pyx_INCREF(__pyx_kp_u_Cooling_off_from_previous_trade);
        __pyx_t_5 += 35;
        __Pyx_GIVEREF(__pyx_kp_u_Cooling_off_from_previous_trade);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Cooling_off_from_previous_trade);
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 367, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_name_2); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 367, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = __Pyx_PyObject_FormatSimple(__pyx_t_14, __pyx_empty_unicode); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 367, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_12;
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_13);
        __pyx_t_13 = 0;
        __Pyx_INCREF(__pyx_kp_u_Resuming_in);
        __pyx_t_5 += 14;
        __Pyx_GIVEREF(__pyx_kp_u_Resuming_in);
        PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_Resuming_in);

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":368
 *                         logging.INFO,
 *                         f"Cooling off from previous trade on {market_trading_pair_tuple.market.name}. "
 *                         f"Resuming in {int(time_left)} seconds."             # <<<<<<<<<<<<<<
 *                     )
 *                     self._cool_off_logged = True
 */
        __pyx_t_13 = __Pyx_PyInt_FromDouble(__pyx_v_time_left); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 368, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_14 = __Pyx_PyObject_FormatSimple(__pyx_t_13, __pyx_empty_unicode); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 368, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) : __pyx_t_12;
        __pyx_t_5 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_14);
        PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_14);
        __pyx_t_14 = 0;
        __Pyx_INCREF(__pyx_kp_u_seconds);
        __pyx_t_5 += 9;
        __Pyx_GIVEREF(__pyx_kp_u_seconds);
        PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_seconds);

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":367
 *                     self.log_with_clock(
 *                         logging.INFO,
 *                         f"Cooling off from previous trade on {market_trading_pair_tuple.market.name}. "             # <<<<<<<<<<<<<<
 *                         f"Resuming in {int(time_left)} seconds."
 *                     )
 */
        __pyx_t_14 = __Pyx_PyUnicode_Join(__pyx_t_4, 5, __pyx_t_5, __pyx_t_12); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 367, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        __pyx_t_15 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_7);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_7, function);
            __pyx_t_15 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_11, __pyx_t_14};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_15, 2+__pyx_t_15);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 365, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":370
 *                         f"Resuming in {int(time_left)} seconds."
 *                     )
 *                     self._cool_off_logged = True             # <<<<<<<<<<<<<<
 *                 return False
 * 
 */
        __pyx_v_self->_cool_off_logged = 1;

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":364
 *             if market_trading_pair_tuple in self._last_trade_timestamps and ready_to_trade_time > self._current_timestamp:
 *                 time_left = self._current_timestamp - self._last_trade_timestamps[market_trading_pair_tuple] - self._next_trade_delay
 *                 if not self._cool_off_logged:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(
 *                         logging.INFO,
 */
      }

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":371
 *                     )
 *                     self._cool_off_logged = True
 *                 return False             # <<<<<<<<<<<<<<
 * 
 *         if self._cool_off_logged:
 */
      __pyx_r = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":362
 *             # Wait for the cool off interval before the next trade, so wallet balance is up to date
 *             ready_to_trade_time = self._last_trade_timestamps.get(market_trading_pair_tuple, 0) + self._next_trade_delay
 *             if market_trading_pair_tuple in self._last_trade_timestamps and ready_to_trade_time > self._current_timestamp:             # <<<<<<<<<<<<<<
 *                 time_left = self._current_timestamp - self._last_trade_timestamps[market_trading_pair_tuple] - self._next_trade_delay
 *                 if not self._cool_off_logged:
 */
    }

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":356
 *             dict tracked_taker_orders = {**self._sb_order_tracker.c_get_limit_orders(), ** self._sb_order_tracker.c_get_market_orders()}
 * 
 *         for market_trading_pair_tuple in market_trading_pair_tuples:             # <<<<<<<<<<<<<<
 *             # Do not continue if there are pending limit order
 *             if len(tracked_taker_orders.get(market_trading_pair_tuple, {})) > 0:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":373
 *                 return False
 * 
 *         if self._cool_off_logged:             # <<<<<<<<<<<<<<
 *             self.log_with_clock(
 *                 logging.INFO,
 */
  __pyx_t_6 = (__pyx_v_self->_cool_off_logged != 0);
  if (__pyx_t_6) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":374
 * 
 *         if self._cool_off_logged:
 *             self.log_with_clock(             # <<<<<<<<<<<<<<
 *                 logging.INFO,
 *                 f"Cool off completed. Arbitrage strategy is now ready for new orders."
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":375
 *         if self._cool_off_logged:
 *             self.log_with_clock(
 *                 logging.INFO,             # <<<<<<<<<<<<<<
 *                 f"Cool off completed. Arbitrage strategy is now ready for new orders."
 *             )
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_logging); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_INFO); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_15 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_15 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_7, __pyx_t_14, __pyx_kp_u_Cool_off_completed_Arbitrage_str};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_15, 2+__pyx_t_15);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":379
 *             )
 *             # reset cool off log tag when strategy is ready for new orders
 *             self._cool_off_logged = False             # <<<<<<<<<<<<<<
 * 
 *         return True
 */
    __pyx_v_self->_cool_off_logged = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":373
 *                 return False
 * 
 *         if self._cool_off_logged:             # <<<<<<<<<<<<<<
 *             self.log_with_clock(
 *                 logging.INFO,
 */
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":381
 *             self._cool_off_logged = False
 * 
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     cdef c_process_market_pair(self, object market_pair):
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":338
 *         return profitability_buy_2_sell_1, profitability_buy_1_sell_2
 * 
 *     cdef bint c_ready_for_new_orders(self, list market_trading_pair_tuples):             # <<<<<<<<<<<<<<
 *         """
 *         Check whether we are ready for making new arbitrage orders or not. Conditions where we should not make further
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_WriteUnraisable("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.c_ready_for_new_orders", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_tracked_taker_orders);
  __Pyx_XDECREF(__pyx_v_market_trading_pair_tuple);
  __Pyx_XDECREF(__pyx_v_ready_to_trade_time);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":383
 *         return True
 * 
 *     cdef c_process_market_pair(self, object market_pair):             # <<<<<<<<<<<<<<
 *         """
 *         Checks which direction is more profitable (buy/sell on exchange 2/1 or 1/2) and sends the more profitable
 */

static PyObject *__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_process_market_pair(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_process_market_pair", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":390
 *         :param market_pair: arbitrage market pair
 *         """
 *         if not self.c_ready_for_new_orders([market_pair.first, market_pair.second]):             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_first); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_second); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = ((!(((struct __pyx_vtabstruct_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_ready_for_new_orders(__pyx_v_self, ((PyObject*)__pyx_t_3)) != 0)) != 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":391
 *         """
 *         if not self.c_ready_for_new_orders([market_pair.first, market_pair.second]):
 *             return             # <<<<<<<<<<<<<<
 * 
 *         self._current_profitability = \
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":390
 *         :param market_pair: arbitrage market pair
 *         """
 *         if not self.c_ready_for_new_orders([market_pair.first, market_pair.second]):             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":394
 * 
 *         self._current_profitability = \
 *             self.c_calculate_arbitrage_top_order_profitability(market_pair)             # <<<<<<<<<<<<<<
 * 
 *         if (self._current_profitability[1] < self._min_profitability and
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_arbitrage_top_order_profitability(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 394, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":393
 *             return
 * 
 *         self._current_profitability = \             # <<<<<<<<<<<<<<
 *             self.c_calculate_arbitrage_top_order_profitability(market_pair)
 * 
 */
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_current_profitability);
  __Pyx_DECREF(__pyx_v_self->_current_profitability);
  __pyx_v_self->_current_profitability = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":396
 *             self.c_calculate_arbitrage_top_order_profitability(market_pair)
 * 
 *         if (self._current_profitability[1] < self._min_profitability and             # <<<<<<<<<<<<<<
 *                 self._current_profitability[0] < self._min_profitability):
 *             return
 */
  if (unlikely(__pyx_v_self->_current_profitability == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 396, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_self->_current_profitability, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_v_self->_min_profitability, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 396, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":397
 * 
 *         if (self._current_profitability[1] < self._min_profitability and
 *                 self._current_profitability[0] < self._min_profitability):             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  if (unlikely(__pyx_v_self->_current_profitability == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 397, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_GetItemInt_Tuple(__pyx_v_self->_current_profitability, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_2, __pyx_v_self->_min_profitability, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __pyx_t_5;
  __pyx_L5_bool_binop_done:;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":396
 *             self.c_calculate_arbitrage_top_order_profitability(market_pair)
 * 
 *         if (self._current_profitability[1] < self._min_profitability and             # <<<<<<<<<<<<<<
 *                 self._current_profitability[0] < self._min_profitability):
 *             return
 */
  if (__pyx_t_4) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":398
 *         if (self._current_profitability[1] < self._min_profitability and
 *                 self._current_profitability[0] < self._min_profitability):
 *             return             # <<<<<<<<<<<<<<
 * 
 *         if self._current_profitability[1] > self._current_profitability[0]:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":396
 *             self.c_calculate_arbitrage_top_order_profitability(market_pair)
 * 
 *         if (self._current_profitability[1] < self._min_profitability and             # <<<<<<<<<<<<<<
 *                 self._current_profitability[0] < self._min_profitability):
 *             return
 */
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":400
 *             return
 * 
 *         if self._current_profitability[1] > self._current_profitability[0]:             # <<<<<<<<<<<<<<
 *             # it is more profitable to buy on market_1 and sell on market_2
 *             self.c_process_market_pair_inner(market_pair.first, market_pair.second)
 */
  if (unlikely(__pyx_v_self->_current_profitability == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 400, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_self->_current_profitability, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(__pyx_v_self->_current_profitability == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 400, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_GetItemInt_Tuple(__pyx_v_self->_current_profitability, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 400, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":402
 *         if self._current_profitability[1] > self._current_profitability[0]:
 *             # it is more profitable to buy on market_1 and sell on market_2
 *             self.c_process_market_pair_inner(market_pair.first, market_pair.second)             # <<<<<<<<<<<<<<
 *         else:
 *             self.c_process_market_pair_inner(market_pair.second, market_pair.first)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_first); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_second); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_process_market_pair_inner(__pyx_v_self, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":400
 *             return
 * 
 *         if self._current_profitability[1] > self._current_profitability[0]:             # <<<<<<<<<<<<<<
 *             # it is more profitable to buy on market_1 and sell on market_2
 *             self.c_process_market_pair_inner(market_pair.first, market_pair.second)
 */
    goto __pyx_L7;
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":404
 *             self.c_process_market_pair_inner(market_pair.first, market_pair.second)
 *         else:
 *             self.c_process_market_pair_inner(market_pair.second, market_pair.first)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_process_market_pair_inner(self, object buy_market_trading_pair_tuple, object sell_market_trading_pair_tuple):
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_second); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_first); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_process_market_pair_inner(__pyx_v_self, __pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L7:;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":383
 *         return True
 * 
 *     cdef c_process_market_pair(self, object market_pair):             # <<<<<<<<<<<<<<
 *         """
 *         Checks which direction is more profitable (buy/sell on exchange 2/1 or 1/2) and sends the more profitable
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.c_process_market_pair", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":406
 *             self.c_process_market_pair_inner(market_pair.second, market_pair.first)
 * 
 *     cdef c_process_market_pair_inner(self, object buy_market_trading_pair_tuple, object sell_market_trading_pair_tuple):             # <<<<<<<<<<<<<<
 *         """
 *         Executes arbitrage trades for the input market pair.
 */

static PyObject *__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_process_market_pair_inner(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_buy_market_trading_pair_tuple, PyObject *__pyx_v_sell_market_trading_pair_tuple) {
  PyObject *__pyx_v_quantized_buy_amount = 0;
  PyObject *__pyx_v_quantized_sell_amount = 0;
  PyObject *__pyx_v_quantized_order_amount = 0;
  PyObject *__pyx_v_best_amount = 0;
  PyObject *__pyx_v_best_profitability = 0;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_buy_market = 0;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_sell_market = 0;
  PyObject *__pyx_v_sell_price = NULL;
  PyObject *__pyx_v_buy_price = NULL;
  PyObject *__pyx_v_buy_order_type = NULL;
  PyObject *__pyx_v_sell_order_type = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_UCS4 __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market __pyx_t_11;
  struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_process_market_pair_inner", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":417
 *             object quantized_sell_amount
 *             object quantized_order_amount
 *             object best_amount = s_decimal_0  # best profitable order amount             # <<<<<<<<<<<<<<
 *             object best_profitability = s_decimal_0  # best profitable order amount
 *             ExchangeBase buy_market = buy_market_trading_pair_tuple.market
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_best_amount = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":418
 *             object quantized_order_amount
 *             object best_amount = s_decimal_0  # best profitable order amount
 *             object best_profitability = s_decimal_0  # best profitable order amount             # <<<<<<<<<<<<<<
 *             ExchangeBase buy_market = buy_market_trading_pair_tuple.market
 *             ExchangeBase sell_market = sell_market_trading_pair_tuple.market
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_best_profitability = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":419
 *             object best_amount = s_decimal_0  # best profitable order amount
 *             object best_profitability = s_decimal_0  # best profitable order amount
 *             ExchangeBase buy_market = buy_market_trading_pair_tuple.market             # <<<<<<<<<<<<<<
 *             ExchangeBase sell_market = sell_market_trading_pair_tuple.market
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 419, __pyx_L1_error)
  __pyx_v_buy_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":420
 *             object best_profitability = s_decimal_0  # best profitable order amount
 *             ExchangeBase buy_market = buy_market_trading_pair_tuple.market
 *             ExchangeBase sell_market = sell_market_trading_pair_tuple.market             # <<<<<<<<<<<<<<
 * 
 *         best_amount, best_profitability, sell_price, buy_price = self.c_find_best_profitable_amount(
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 420, __pyx_L1_error)
  __pyx_v_sell_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":422
 *             ExchangeBase sell_market = sell_market_trading_pair_tuple.market
 * 
 *         best_amount, best_profitability, sell_price, buy_price = self.c_find_best_profitable_amount(             # <<<<<<<<<<<<<<
 *             buy_market_trading_pair_tuple, sell_market_trading_pair_tuple
 *         )
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_find_best_profitable_amount(__pyx_v_self, __pyx_v_buy_market_trading_pair_tuple, __pyx_v_sell_market_trading_pair_tuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(__pyx_t_1 != Py_None)) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 422, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
    __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
    __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 422, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    __Pyx_RaiseNoneNotIterableError(); __PYX_ERR(0, 422, __pyx_L1_error)
  }
  __Pyx_DECREF_SET(__pyx_v_best_amount, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_best_profitability, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_v_sell_price = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_buy_price = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":425
 *             buy_market_trading_pair_tuple, sell_market_trading_pair_tuple
 *         )
 *         quantized_buy_amount = buy_market.c_quantize_order_amount(buy_market_trading_pair_tuple.trading_pair, Decimal(best_amount))             # <<<<<<<<<<<<<<
 *         quantized_sell_amount = sell_market.c_quantize_order_amount(sell_market_trading_pair_tuple.trading_pair, Decimal(best_amount))
 *         quantized_order_amount = min(quantized_buy_amount, quantized_sell_amount)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_market_trading_pair_tuple, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_best_amount};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_buy_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_buy_market), ((PyObject*)__pyx_t_1), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 425, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_quantized_buy_amount = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":426
 *         )
 *         quantized_buy_amount = buy_market.c_quantize_order_amount(buy_market_trading_pair_tuple.trading_pair, Decimal(best_amount))
 *         quantized_sell_amount = sell_market.c_quantize_order_amount(sell_market_trading_pair_tuple.trading_pair, Decimal(best_amount))             # <<<<<<<<<<<<<<
 *         quantized_order_amount = min(quantized_buy_amount, quantized_sell_amount)
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_market_trading_pair_tuple, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_4))) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_best_amount};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 426, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_sell_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_sell_market), ((PyObject*)__pyx_t_4), __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 426, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_quantized_sell_amount = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":427
 *         quantized_buy_amount = buy_market.c_quantize_order_amount(buy_market_trading_pair_tuple.trading_pair, Decimal(best_amount))
 *         quantized_sell_amount = sell_market.c_quantize_order_amount(sell_market_trading_pair_tuple.trading_pair, Decimal(best_amount))
 *         quantized_order_amount = min(quantized_buy_amount, quantized_sell_amount)             # <<<<<<<<<<<<<<
 * 
 *         if quantized_order_amount:
 */
  __Pyx_INCREF(__pyx_v_quantized_sell_amount);
  __pyx_t_1 = __pyx_v_quantized_sell_amount;
  __Pyx_INCREF(__pyx_v_quantized_buy_amount);
  __pyx_t_5 = __pyx_v_quantized_buy_amount;
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_5, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 427, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 427, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_7) {
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_4 = __pyx_t_1;
  } else {
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_4 = __pyx_t_5;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_t_4;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_quantized_order_amount = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":429
 *         quantized_order_amount = min(quantized_buy_amount, quantized_sell_amount)
 * 
 *         if quantized_order_amount:             # <<<<<<<<<<<<<<
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                 self.log_with_clock(logging.INFO,
 */
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_v_quantized_order_amount); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 429, __pyx_L1_error)
  if (__pyx_t_7) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":430
 * 
 *         if quantized_order_amount:
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(logging.INFO,
 *                                     f"Executing limit order buy of {buy_market_trading_pair_tuple.trading_pair} "
 */
    __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_CREATE_ORDER); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyNumber_And(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 430, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_7) {

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":431
 *         if quantized_order_amount:
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                 self.log_with_clock(logging.INFO,             # <<<<<<<<<<<<<<
 *                                     f"Executing limit order buy of {buy_market_trading_pair_tuple.trading_pair} "
 *                                     f"at {buy_market_trading_pair_tuple.market.name} "
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 431, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logging); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 431, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_INFO); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 431, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":432
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                 self.log_with_clock(logging.INFO,
 *                                     f"Executing limit order buy of {buy_market_trading_pair_tuple.trading_pair} "             # <<<<<<<<<<<<<<
 *                                     f"at {buy_market_trading_pair_tuple.market.name} "
 *                                     f"and sell of {sell_market_trading_pair_tuple.trading_pair} "
 */
      __pyx_t_1 = PyTuple_New(12); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 432, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = 0;
      __pyx_t_9 = 127;
      __Pyx_INCREF(__pyx_kp_u_Executing_limit_order_buy_of);
      __pyx_t_8 += 29;
      __Pyx_GIVEREF(__pyx_kp_u_Executing_limit_order_buy_of);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Executing_limit_order_buy_of);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_market_trading_pair_tuple, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 432, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 432, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_9;
      __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_10);
      __pyx_t_10 = 0;
      __Pyx_INCREF(__pyx_kp_u_at);
      __pyx_t_8 += 4;
      __Pyx_GIVEREF(__pyx_kp_u_at);
      PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_at);

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":433
 *                 self.log_with_clock(logging.INFO,
 *                                     f"Executing limit order buy of {buy_market_trading_pair_tuple.trading_pair} "
 *                                     f"at {buy_market_trading_pair_tuple.market.name} "             # <<<<<<<<<<<<<<
 *                                     f"and sell of {sell_market_trading_pair_tuple.trading_pair} "
 *                                     f"at {sell_market_trading_pair_tuple.market.name} "
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 433, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 433, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_9;
      __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_10);
      PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_10);
      __pyx_t_10 = 0;
      __Pyx_INCREF(__pyx_kp_u_and_sell_of);
      __pyx_t_8 += 13;
      __Pyx_GIVEREF(__pyx_kp_u_and_sell_of);
      PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_and_sell_of);

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":434
 *                                     f"Executing limit order buy of {buy_market_trading_pair_tuple.trading_pair} "
 *                                     f"at {buy_market_trading_pair_tuple.market.name} "
 *                                     f"and sell of {sell_market_trading_pair_tuple.trading_pair} "             # <<<<<<<<<<<<<<
 *                                     f"at {sell_market_trading_pair_tuple.market.name} "
 *                                     f"with amount {quantized_order_amount}, "
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_market_trading_pair_tuple, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 434, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_9;
      __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_kp_u_at);
      __pyx_t_8 += 4;
      __Pyx_GIVEREF(__pyx_kp_u_at);
      PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u_at);

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":435
 *                                     f"at {buy_market_trading_pair_tuple.market.name} "
 *                                     f"and sell of {sell_market_trading_pair_tuple.trading_pair} "
 *                                     f"at {sell_market_trading_pair_tuple.market.name} "             # <<<<<<<<<<<<<<
 *                                     f"with amount {quantized_order_amount}, "
 *                                     f"and profitability {best_profitability}")
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 435, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name_2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 435, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 435, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_9;
      __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_kp_u_with_amount);
      __pyx_t_8 += 13;
      __Pyx_GIVEREF(__pyx_kp_u_with_amount);
      PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_kp_u_with_amount);

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":436
 *                                     f"and sell of {sell_market_trading_pair_tuple.trading_pair} "
 *                                     f"at {sell_market_trading_pair_tuple.market.name} "
 *                                     f"with amount {quantized_order_amount}, "             # <<<<<<<<<<<<<<
 *                                     f"and profitability {best_profitability}")
 *             # get OrderTypes
 */
      __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_quantized_order_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_9;
      __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 9, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_kp_u_and_profitability);
      __pyx_t_8 += 20;
      __Pyx_GIVEREF(__pyx_kp_u_and_profitability);
      PyTuple_SET_ITEM(__pyx_t_1, 10, __pyx_kp_u_and_profitability);

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":437
 *                                     f"at {sell_market_trading_pair_tuple.market.name} "
 *                                     f"with amount {quantized_order_amount}, "
 *                                     f"and profitability {best_profitability}")             # <<<<<<<<<<<<<<
 *             # get OrderTypes
 *             buy_order_type = buy_market_trading_pair_tuple.market.get_taker_order_type()
 */
      __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_best_profitability, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 437, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_9) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_9;
      __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_1, 11, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":432
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                 self.log_with_clock(logging.INFO,
 *                                     f"Executing limit order buy of {buy_market_trading_pair_tuple.trading_pair} "             # <<<<<<<<<<<<<<
 *                                     f"at {buy_market_trading_pair_tuple.market.name} "
 *                                     f"and sell of {sell_market_trading_pair_tuple.trading_pair} "
 */
      __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_1, 12, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 432, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_6 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_1, __pyx_t_3, __pyx_t_2};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 431, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":430
 * 
 *         if quantized_order_amount:
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(logging.INFO,
 *                                     f"Executing limit order buy of {buy_market_trading_pair_tuple.trading_pair} "
 */
    }

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":439
 *                                     f"and profitability {best_profitability}")
 *             # get OrderTypes
 *             buy_order_type = buy_market_trading_pair_tuple.market.get_taker_order_type()             # <<<<<<<<<<<<<<
 *             sell_order_type = sell_market_trading_pair_tuple.market.get_taker_order_type()
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get_taker_order_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_4, };
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 439, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_v_buy_order_type = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":440
 *             # get OrderTypes
 *             buy_order_type = buy_market_trading_pair_tuple.market.get_taker_order_type()
 *             sell_order_type = sell_market_trading_pair_tuple.market.get_taker_order_type()             # <<<<<<<<<<<<<<
 * 
 *             # Set limit order expiration_seconds to _next_trade_delay for connectors that require order expiration for limit orders
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_taker_order_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_2, };
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 440, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_v_sell_order_type = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":443
 * 
 *             # Set limit order expiration_seconds to _next_trade_delay for connectors that require order expiration for limit orders
 *             self.c_buy_with_specific_market(buy_market_trading_pair_tuple, quantized_order_amount,             # <<<<<<<<<<<<<<
 *                                             order_type=buy_order_type, price=buy_price, expiration_seconds=self._next_trade_delay)
 *             self.c_sell_with_specific_market(sell_market_trading_pair_tuple, quantized_order_amount,
 */
    __pyx_t_11.__pyx_n = 3;
    __pyx_t_11.order_type = __pyx_v_buy_order_type;
    __pyx_t_11.price = __pyx_v_buy_price;
    __pyx_t_11.expiration_seconds = __pyx_v_self->_next_trade_delay;
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_buy_with_specific_market(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_buy_market_trading_pair_tuple, __pyx_v_quantized_order_amount, &__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 443, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":445
 *             self.c_buy_with_specific_market(buy_market_trading_pair_tuple, quantized_order_amount,
 *                                             order_type=buy_order_type, price=buy_price, expiration_seconds=self._next_trade_delay)
 *             self.c_sell_with_specific_market(sell_market_trading_pair_tuple, quantized_order_amount,             # <<<<<<<<<<<<<<
 *                                              order_type=sell_order_type, price=sell_price, expiration_seconds=self._next_trade_delay)
 *             self.logger().info(self.format_status())
 */
    __pyx_t_12.__pyx_n = 3;
    __pyx_t_12.order_type = __pyx_v_sell_order_type;
    __pyx_t_12.price = __pyx_v_sell_price;
    __pyx_t_12.expiration_seconds = __pyx_v_self->_next_trade_delay;
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_sell_with_specific_market(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_sell_market_trading_pair_tuple, __pyx_v_quantized_order_amount, &__pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":447
 *             self.c_sell_with_specific_market(sell_market_trading_pair_tuple, quantized_order_amount,
 *                                              order_type=sell_order_type, price=sell_price, expiration_seconds=self._next_trade_delay)
 *             self.logger().info(self.format_status())             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_3, };
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_format_status); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 447, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_1, };
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_4};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":429
 *         quantized_order_amount = min(quantized_buy_amount, quantized_sell_amount)
 * 
 *         if quantized_order_amount:             # <<<<<<<<<<<<<<
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                 self.log_with_clock(logging.INFO,
 */
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":406
 *             self.c_process_market_pair_inner(market_pair.second, market_pair.first)
 * 
 *     cdef c_process_market_pair_inner(self, object buy_market_trading_pair_tuple, object sell_market_trading_pair_tuple):             # <<<<<<<<<<<<<<
 *         """
 *         Executes arbitrage trades for the input market pair.
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.c_process_market_pair_inner", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_quantized_buy_amount);
  __Pyx_XDECREF(__pyx_v_quantized_sell_amount);
  __Pyx_XDECREF(__pyx_v_quantized_order_amount);
  __Pyx_XDECREF(__pyx_v_best_amount);
  __Pyx_XDECREF(__pyx_v_best_profitability);
  __Pyx_XDECREF((PyObject *)__pyx_v_buy_market);
  __Pyx_XDECREF((PyObject *)__pyx_v_sell_market);
  __Pyx_XDECREF(__pyx_v_sell_price);
  __Pyx_XDECREF(__pyx_v_buy_price);
  __Pyx_XDECREF(__pyx_v_buy_order_type);
  __Pyx_XDECREF(__pyx_v_sell_order_type);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":449
 *             self.logger().info(self.format_status())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def find_profitable_arbitrage_orders(min_profitability: Decimal,
 *                                          buy_market_trading_pair: MarketTradingPairTuple,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_15find_profitable_arbitrage_orders(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_15find_profitable_arbitrage_orders = {"find_profitable_arbitrage_orders", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_15find_profitable_arbitrage_orders, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_15find_profitable_arbitrage_orders(CYTHON_UNUSED PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_min_profitability = 0;
  PyObject *__pyx_v_buy_market_trading_pair = 0;
  PyObject *__pyx_v_sell_market_trading_pair = 0;
  PyObject *__pyx_v_buy_market_conversion_rate = 0;
  PyObject *__pyx_v_sell_market_conversion_rate = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_profitable_arbitrage_orders (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_min_profitability,&__pyx_n_s_buy_market_trading_pair,&__pyx_n_s_sell_market_trading_pair,&__pyx_n_s_buy_market_conversion_rate,&__pyx_n_s_sell_market_conversion_rate,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_min_profitability,&__pyx_n_s_buy_market_trading_pair,&__pyx_n_s_sell_market_trading_pair,&__pyx_n_s_buy_market_conversion_rate,&__pyx_n_s_sell_market_conversion_rate,0};
    #endif
    PyObject* values[5] = {0,0,0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_min_profitability)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 449, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_buy_market_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 449, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("find_profitable_arbitrage_orders", 1, 5, 5, 1); __PYX_ERR(0, 449, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_sell_market_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 449, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("find_profitable_arbitrage_orders", 1, 5, 5, 2); __PYX_ERR(0, 449, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_buy_market_conversion_rate)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 449, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("find_profitable_arbitrage_orders", 1, 5, 5, 3); __PYX_ERR(0, 449, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_sell_market_conversion_rate)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 449, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("find_profitable_arbitrage_orders", 1, 5, 5, 4); __PYX_ERR(0, 449, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "find_profitable_arbitrage_orders") < 0)) __PYX_ERR(0, 449, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
    }
    __pyx_v_min_profitability = values[0];
    __pyx_v_buy_market_trading_pair = values[1];
    __pyx_v_sell_market_trading_pair = values[2];
    __pyx_v_buy_market_conversion_rate = values[3];
    __pyx_v_sell_market_conversion_rate = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_profitable_arbitrage_orders", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 449, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.find_profitable_arbitrage_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_14find_profitable_arbitrage_orders(__pyx_v_min_profitability, __pyx_v_buy_market_trading_pair, __pyx_v_sell_market_trading_pair, __pyx_v_buy_market_conversion_rate, __pyx_v_sell_market_conversion_rate);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_14find_profitable_arbitrage_orders(PyObject *__pyx_v_min_profitability, PyObject *__pyx_v_buy_market_trading_pair, PyObject *__pyx_v_sell_market_trading_pair, PyObject *__pyx_v_buy_market_conversion_rate, PyObject *__pyx_v_sell_market_conversion_rate) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_profitable_arbitrage_orders", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":456
 *                                          sell_market_conversion_rate):
 * 
 *         return c_find_profitable_arbitrage_orders(min_profitability,             # <<<<<<<<<<<<<<
 *                                                   buy_market_trading_pair,
 *                                                   sell_market_trading_pair,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":460
 *                                                   sell_market_trading_pair,
 *                                                   buy_market_conversion_rate,
 *                                                   sell_market_conversion_rate)             # <<<<<<<<<<<<<<
 * 
 *     def market_conversion_rate(self, market_info: MarketTradingPairTuple) -> Decimal:
 */
  __pyx_t_1 = __pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_c_find_profitable_arbitrage_orders(__pyx_v_min_profitability, __pyx_v_buy_market_trading_pair, __pyx_v_sell_market_trading_pair, __pyx_v_buy_market_conversion_rate, __pyx_v_sell_market_conversion_rate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":449
 *             self.logger().info(self.format_status())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def find_profitable_arbitrage_orders(min_profitability: Decimal,
 *                                          buy_market_trading_pair: MarketTradingPairTuple,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.find_profitable_arbitrage_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":462
 *                                                   sell_market_conversion_rate)
 * 
 *     def market_conversion_rate(self, market_info: MarketTradingPairTuple) -> Decimal:             # <<<<<<<<<<<<<<
 *         if market_info == self._market_pairs[0].first:
 *             return Decimal("1")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_17market_conversion_rate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_17market_conversion_rate = {"market_conversion_rate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_17market_conversion_rate, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_17market_conversion_rate(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_market_info = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("market_conversion_rate (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_info,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_info,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_market_info)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 462, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "market_conversion_rate") < 0)) __PYX_ERR(0, 462, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_market_info = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("market_conversion_rate", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 462, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.market_conversion_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_16market_conversion_rate(((struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self), __pyx_v_market_info);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_16market_conversion_rate(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_market_info) {
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_quote_rate = NULL;
  PyObject *__pyx_v_base_rate = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("market_conversion_rate", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":463
 * 
 *     def market_conversion_rate(self, market_info: MarketTradingPairTuple) -> Decimal:
 *         if market_info == self._market_pairs[0].first:             # <<<<<<<<<<<<<<
 *             return Decimal("1")
 *         elif market_info == self._market_pairs[0].second:
 */
  if (unlikely(__pyx_v_self->_market_pairs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 463, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->_market_pairs, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_first); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_market_info, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":464
 *     def market_conversion_rate(self, market_info: MarketTradingPairTuple) -> Decimal:
 *         if market_info == self._market_pairs[0].first:
 *             return Decimal("1")             # <<<<<<<<<<<<<<
 *         elif market_info == self._market_pairs[0].second:
 *             _, _, quote_rate, _, _, base_rate = self.get_second_to_first_conversion_rate()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 464, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_u_1};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":463
 * 
 *     def market_conversion_rate(self, market_info: MarketTradingPairTuple) -> Decimal:
 *         if market_info == self._market_pairs[0].first:             # <<<<<<<<<<<<<<
 *             return Decimal("1")
 *         elif market_info == self._market_pairs[0].second:
 */
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":465
 *         if market_info == self._market_pairs[0].first:
 *             return Decimal("1")
 *         elif market_info == self._market_pairs[0].second:             # <<<<<<<<<<<<<<
 *             _, _, quote_rate, _, _, base_rate = self.get_second_to_first_conversion_rate()
 *             return quote_rate / base_rate
 */
  if (unlikely(__pyx_v_self->_market_pairs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 465, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_List(__pyx_v_self->_market_pairs, 0, long, 1, __Pyx_PyInt_From_long, 1, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_second); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_market_info, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":466
 *             return Decimal("1")
 *         elif market_info == self._market_pairs[0].second:
 *             _, _, quote_rate, _, _, base_rate = self.get_second_to_first_conversion_rate()             # <<<<<<<<<<<<<<
 *             return quote_rate / base_rate
 *             # if not self._use_oracle_conversion_rate:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_second_to_first_conversion_r); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 466, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_4, };
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 466, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 6)) {
        if (size > 6) __Pyx_RaiseTooManyValuesError(6);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 466, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 4); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 5); 
      } else {
        __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 4); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 5); 
      }
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_4,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
        for (i=0; i < 6; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 466, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[6] = {&__pyx_t_2,&__pyx_t_4,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
      __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 466, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10);
      for (index=0; index < 6; index++) {
        PyObject* item = __pyx_t_11(__pyx_t_10); if (unlikely(!item)) goto __pyx_L4_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 6) < 0) __PYX_ERR(0, 466, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 466, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_v__ = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v__, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_v_quote_rate = __pyx_t_6;
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v__, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v__, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_v_base_rate = __pyx_t_9;
    __pyx_t_9 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":467
 *         elif market_info == self._market_pairs[0].second:
 *             _, _, quote_rate, _, _, base_rate = self.get_second_to_first_conversion_rate()
 *             return quote_rate / base_rate             # <<<<<<<<<<<<<<
 *             # if not self._use_oracle_conversion_rate:
 *             #     return self._secondary_to_primary_quote_conversion_rate / self._secondary_to_primary_base_conversion_rate
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_quote_rate, __pyx_v_base_rate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":465
 *         if market_info == self._market_pairs[0].first:
 *             return Decimal("1")
 *         elif market_info == self._market_pairs[0].second:             # <<<<<<<<<<<<<<
 *             _, _, quote_rate, _, _, base_rate = self.get_second_to_first_conversion_rate()
 *             return quote_rate / base_rate
 */
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":462
 *                                                   sell_market_conversion_rate)
 * 
 *     def market_conversion_rate(self, market_info: MarketTradingPairTuple) -> Decimal:             # <<<<<<<<<<<<<<
 *         if market_info == self._market_pairs[0].first:
 *             return Decimal("1")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.market_conversion_rate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_quote_rate);
  __Pyx_XDECREF(__pyx_v_base_rate);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":481
 *             #     return quote_rate / base_rate
 * 
 *     cdef tuple c_find_best_profitable_amount(self, object buy_market_trading_pair_tuple, object sell_market_trading_pair_tuple):             # <<<<<<<<<<<<<<
 *         """
 *         Given a buy market and a sell market, calculate the optimal order size for the buy and sell orders on both
 */

static PyObject *__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_find_best_profitable_amount(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_buy_market_trading_pair_tuple, PyObject *__pyx_v_sell_market_trading_pair_tuple) {
  PyObject *__pyx_v_total_bid_value = 0;
  PyObject *__pyx_v_total_ask_value = 0;
  PyObject *__pyx_v_total_bid_value_adjusted = 0;
  PyObject *__pyx_v_total_ask_value_adjusted = 0;
  PyObject *__pyx_v_total_previous_step_base_amount = 0;
  PyObject *__pyx_v_bid_price = 0;
  PyObject *__pyx_v_ask_price = 0;
  PyObject *__pyx_v_profitability = 0;
  PyObject *__pyx_v_best_profitable_order_amount = 0;
  PyObject *__pyx_v_best_profitable_order_profitability = 0;
  PyObject *__pyx_v_buy_fee = 0;
  PyObject *__pyx_v_sell_fee = 0;
  PyObject *__pyx_v_total_sell_flat_fees = 0;
  PyObject *__pyx_v_total_buy_flat_fees = 0;
  PyObject *__pyx_v_net_sell_proceeds = 0;
  PyObject *__pyx_v_net_buy_costs = 0;
  PyObject *__pyx_v_buy_market_quote_balance = 0;
  PyObject *__pyx_v_sell_market_base_balance = 0;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_buy_market = 0;
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_sell_market = 0;
  CYTHON_UNUSED struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_v_buy_order_book = 0;
  CYTHON_UNUSED struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_v_sell_order_book = 0;
  PyObject *__pyx_v_buy_market_conversion_rate = NULL;
  PyObject *__pyx_v_sell_market_conversion_rate = NULL;
  PyObject *__pyx_v_profitable_orders = NULL;
  PyObject *__pyx_v_bid_price_adjusted = NULL;
  PyObject *__pyx_v_ask_price_adjusted = NULL;
  PyObject *__pyx_v_amount = NULL;
  PyObject *__pyx_v_buy_market_adjusted_order_size = NULL;
  PyObject *__pyx_8genexpr8__pyx_v_b_price_adjusted = NULL;
  PyObject *__pyx_8genexpr8__pyx_v_a_price_adjusted = NULL;
  PyObject *__pyx_8genexpr8__pyx_v_b_price = NULL;
  PyObject *__pyx_8genexpr8__pyx_v_a_price = NULL;
  PyObject *__pyx_8genexpr8__pyx_v_amount = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_UCS4 __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_find_best_profitable_amount", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":493
 *         """
 *         cdef:
 *             object total_bid_value = s_decimal_0  # total revenue             # <<<<<<<<<<<<<<
 *             object total_ask_value = s_decimal_0  # total cost
 *             object total_bid_value_adjusted = s_decimal_0  # total revenue adjusted with exchange rate conversion
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_total_bid_value = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":494
 *         cdef:
 *             object total_bid_value = s_decimal_0  # total revenue
 *             object total_ask_value = s_decimal_0  # total cost             # <<<<<<<<<<<<<<
 *             object total_bid_value_adjusted = s_decimal_0  # total revenue adjusted with exchange rate conversion
 *             object total_ask_value_adjusted = s_decimal_0  # total cost adjusted with exchange rate conversion
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_total_ask_value = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":495
 *             object total_bid_value = s_decimal_0  # total revenue
 *             object total_ask_value = s_decimal_0  # total cost
 *             object total_bid_value_adjusted = s_decimal_0  # total revenue adjusted with exchange rate conversion             # <<<<<<<<<<<<<<
 *             object total_ask_value_adjusted = s_decimal_0  # total cost adjusted with exchange rate conversion
 *             object total_previous_step_base_amount = s_decimal_0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_total_bid_value_adjusted = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":496
 *             object total_ask_value = s_decimal_0  # total cost
 *             object total_bid_value_adjusted = s_decimal_0  # total revenue adjusted with exchange rate conversion
 *             object total_ask_value_adjusted = s_decimal_0  # total cost adjusted with exchange rate conversion             # <<<<<<<<<<<<<<
 *             object total_previous_step_base_amount = s_decimal_0
 *             object bid_price = s_decimal_0  # bid price
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_total_ask_value_adjusted = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":497
 *             object total_bid_value_adjusted = s_decimal_0  # total revenue adjusted with exchange rate conversion
 *             object total_ask_value_adjusted = s_decimal_0  # total cost adjusted with exchange rate conversion
 *             object total_previous_step_base_amount = s_decimal_0             # <<<<<<<<<<<<<<
 *             object bid_price = s_decimal_0  # bid price
 *             object ask_price = s_decimal_0  # ask price
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_total_previous_step_base_amount = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":498
 *             object total_ask_value_adjusted = s_decimal_0  # total cost adjusted with exchange rate conversion
 *             object total_previous_step_base_amount = s_decimal_0
 *             object bid_price = s_decimal_0  # bid price             # <<<<<<<<<<<<<<
 *             object ask_price = s_decimal_0  # ask price
 *             object profitability
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bid_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":499
 *             object total_previous_step_base_amount = s_decimal_0
 *             object bid_price = s_decimal_0  # bid price
 *             object ask_price = s_decimal_0  # ask price             # <<<<<<<<<<<<<<
 *             object profitability
 *             object best_profitable_order_amount = s_decimal_0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 499, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ask_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":501
 *             object ask_price = s_decimal_0  # ask price
 *             object profitability
 *             object best_profitable_order_amount = s_decimal_0             # <<<<<<<<<<<<<<
 *             object best_profitable_order_profitability = s_decimal_0
 *             object buy_fee
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_best_profitable_order_amount = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":502
 *             object profitability
 *             object best_profitable_order_amount = s_decimal_0
 *             object best_profitable_order_profitability = s_decimal_0             # <<<<<<<<<<<<<<
 *             object buy_fee
 *             object sell_fee
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_best_profitable_order_profitability = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":512
 *             object buy_market_quote_balance
 *             object sell_market_base_balance
 *             ExchangeBase buy_market = buy_market_trading_pair_tuple.market             # <<<<<<<<<<<<<<
 *             ExchangeBase sell_market = sell_market_trading_pair_tuple.market
 *             OrderBook buy_order_book = buy_market_trading_pair_tuple.order_book
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 512, __pyx_L1_error)
  __pyx_v_buy_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":513
 *             object sell_market_base_balance
 *             ExchangeBase buy_market = buy_market_trading_pair_tuple.market
 *             ExchangeBase sell_market = sell_market_trading_pair_tuple.market             # <<<<<<<<<<<<<<
 *             OrderBook buy_order_book = buy_market_trading_pair_tuple.order_book
 *             OrderBook sell_order_book = sell_market_trading_pair_tuple.order_book
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 513, __pyx_L1_error)
  __pyx_v_sell_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":514
 *             ExchangeBase buy_market = buy_market_trading_pair_tuple.market
 *             ExchangeBase sell_market = sell_market_trading_pair_tuple.market
 *             OrderBook buy_order_book = buy_market_trading_pair_tuple.order_book             # <<<<<<<<<<<<<<
 *             OrderBook sell_order_book = sell_market_trading_pair_tuple.order_book
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_market_trading_pair_tuple, __pyx_n_s_order_book); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook))))) __PYX_ERR(0, 514, __pyx_L1_error)
  __pyx_v_buy_order_book = ((struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":515
 *             ExchangeBase sell_market = sell_market_trading_pair_tuple.market
 *             OrderBook buy_order_book = buy_market_trading_pair_tuple.order_book
 *             OrderBook sell_order_book = sell_market_trading_pair_tuple.order_book             # <<<<<<<<<<<<<<
 * 
 *         buy_market_conversion_rate = self.market_conversion_rate(buy_market_trading_pair_tuple)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_market_trading_pair_tuple, __pyx_n_s_order_book); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook))))) __PYX_ERR(0, 515, __pyx_L1_error)
  __pyx_v_sell_order_book = ((struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":517
 *             OrderBook sell_order_book = sell_market_trading_pair_tuple.order_book
 * 
 *         buy_market_conversion_rate = self.market_conversion_rate(buy_market_trading_pair_tuple)             # <<<<<<<<<<<<<<
 *         sell_market_conversion_rate = self.market_conversion_rate(sell_market_trading_pair_tuple)
 *         profitable_orders = c_find_profitable_arbitrage_orders(self._min_profitability,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_conversion_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_buy_market_trading_pair_tuple};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_buy_market_conversion_rate = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":518
 * 
 *         buy_market_conversion_rate = self.market_conversion_rate(buy_market_trading_pair_tuple)
 *         sell_market_conversion_rate = self.market_conversion_rate(sell_market_trading_pair_tuple)             # <<<<<<<<<<<<<<
 *         profitable_orders = c_find_profitable_arbitrage_orders(self._min_profitability,
 *                                                                buy_market_trading_pair_tuple,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_conversion_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_sell_market_trading_pair_tuple};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_sell_market_conversion_rate = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":519
 *         buy_market_conversion_rate = self.market_conversion_rate(buy_market_trading_pair_tuple)
 *         sell_market_conversion_rate = self.market_conversion_rate(sell_market_trading_pair_tuple)
 *         profitable_orders = c_find_profitable_arbitrage_orders(self._min_profitability,             # <<<<<<<<<<<<<<
 *                                                                buy_market_trading_pair_tuple,
 *                                                                sell_market_trading_pair_tuple,
 */
  __pyx_t_1 = __pyx_v_self->_min_profitability;
  __Pyx_INCREF(__pyx_t_1);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":523
 *                                                                sell_market_trading_pair_tuple,
 *                                                                buy_market_conversion_rate,
 *                                                                sell_market_conversion_rate)             # <<<<<<<<<<<<<<
 * 
 *         # check if each step meets the profit level after fees, and is within the wallet balance
 */
  __pyx_t_2 = __pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_c_find_profitable_arbitrage_orders(__pyx_t_1, __pyx_v_buy_market_trading_pair_tuple, __pyx_v_sell_market_trading_pair_tuple, __pyx_v_buy_market_conversion_rate, __pyx_v_sell_market_conversion_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_profitable_orders = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":531
 *         # "flat_fees" returns list of additional fees ie: [("ETH", 0.01), ("BNB", 2.5)]
 *         # typically most exchanges will only have 1 flat fee (ie: gas cost of transaction in ETH)
 *         for bid_price_adjusted, ask_price_adjusted, bid_price, ask_price, amount in profitable_orders:             # <<<<<<<<<<<<<<
 *             buy_fee = buy_market.c_get_fee(
 *                 buy_market_trading_pair_tuple.base_asset,
 */
  if (unlikely(__pyx_v_profitable_orders == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 531, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_profitable_orders; __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 531, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 5)) {
        if (size > 5) __Pyx_RaiseTooManyValuesError(5);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 531, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 3); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 4); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 2); 
        __pyx_t_8 = PyList_GET_ITEM(sequence, 3); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 4); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      #else
      {
        Py_ssize_t i;
        PyObject** temps[5] = {&__pyx_t_3,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
        for (i=0; i < 5; i++) {
          PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 531, __pyx_L1_error)
          __Pyx_GOTREF(item);
          *(temps[i]) = item;
        }
      }
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      PyObject** temps[5] = {&__pyx_t_3,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
      __pyx_t_10 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 531, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10);
      for (index=0; index < 5; index++) {
        PyObject* item = __pyx_t_11(__pyx_t_10); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(item);
        *(temps[index]) = item;
      }
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 5) < 0) __PYX_ERR(0, 531, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 531, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_bid_price_adjusted, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_ask_price_adjusted, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_bid_price, __pyx_t_7);
    __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_ask_price, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_amount, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":533
 *         for bid_price_adjusted, ask_price_adjusted, bid_price, ask_price, amount in profitable_orders:
 *             buy_fee = buy_market.c_get_fee(
 *                 buy_market_trading_pair_tuple.base_asset,             # <<<<<<<<<<<<<<
 *                 buy_market_trading_pair_tuple.quote_asset,
 *                 buy_market_trading_pair_tuple.market.get_taker_order_type(),
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_market_trading_pair_tuple, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 533, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 533, __pyx_L1_error)

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":534
 *             buy_fee = buy_market.c_get_fee(
 *                 buy_market_trading_pair_tuple.base_asset,
 *                 buy_market_trading_pair_tuple.quote_asset,             # <<<<<<<<<<<<<<
 *                 buy_market_trading_pair_tuple.market.get_taker_order_type(),
 *                 TradeType.BUY,
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_market_trading_pair_tuple, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_9))||((__pyx_t_9) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_9))) __PYX_ERR(0, 534, __pyx_L1_error)

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":535
 *                 buy_market_trading_pair_tuple.base_asset,
 *                 buy_market_trading_pair_tuple.quote_asset,
 *                 buy_market_trading_pair_tuple.market.get_taker_order_type(),             # <<<<<<<<<<<<<<
 *                 TradeType.BUY,
 *                 total_previous_step_base_amount + amount,
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 535, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_get_taker_order_type); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 535, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_7, };
      __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 535, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":536
 *                 buy_market_trading_pair_tuple.quote_asset,
 *                 buy_market_trading_pair_tuple.market.get_taker_order_type(),
 *                 TradeType.BUY,             # <<<<<<<<<<<<<<
 *                 total_previous_step_base_amount + amount,
 *                 ask_price
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_BUY); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 536, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":537
 *                 buy_market_trading_pair_tuple.market.get_taker_order_type(),
 *                 TradeType.BUY,
 *                 total_previous_step_base_amount + amount,             # <<<<<<<<<<<<<<
 *                 ask_price
 *             )
 */
    __pyx_t_6 = PyNumber_Add(__pyx_v_total_previous_step_base_amount, __pyx_v_amount); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 537, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":532
 *         # typically most exchanges will only have 1 flat fee (ie: gas cost of transaction in ETH)
 *         for bid_price_adjusted, ask_price_adjusted, bid_price, ask_price, amount in profitable_orders:
 *             buy_fee = buy_market.c_get_fee(             # <<<<<<<<<<<<<<
 *                 buy_market_trading_pair_tuple.base_asset,
 *                 buy_market_trading_pair_tuple.quote_asset,
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_buy_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_fee(__pyx_v_buy_market, ((PyObject*)__pyx_t_1), ((PyObject*)__pyx_t_9), __pyx_t_8, __pyx_t_7, __pyx_t_6, __pyx_v_ask_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_buy_fee, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":541
 *             )
 *             sell_fee = sell_market.c_get_fee(
 *                 sell_market_trading_pair_tuple.base_asset,             # <<<<<<<<<<<<<<
 *                 sell_market_trading_pair_tuple.quote_asset,
 *                 sell_market_trading_pair_tuple.market.get_taker_order_type(),
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_market_trading_pair_tuple, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 541, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_3))) __PYX_ERR(0, 541, __pyx_L1_error)

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":542
 *             sell_fee = sell_market.c_get_fee(
 *                 sell_market_trading_pair_tuple.base_asset,
 *                 sell_market_trading_pair_tuple.quote_asset,             # <<<<<<<<<<<<<<
 *                 sell_market_trading_pair_tuple.market.get_taker_order_type(),
 *                 TradeType.SELL,
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_market_trading_pair_tuple, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 542, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_6))) __PYX_ERR(0, 542, __pyx_L1_error)

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":543
 *                 sell_market_trading_pair_tuple.base_asset,
 *                 sell_market_trading_pair_tuple.quote_asset,
 *                 sell_market_trading_pair_tuple.market.get_taker_order_type(),             # <<<<<<<<<<<<<<
 *                 TradeType.SELL,
 *                 total_previous_step_base_amount + amount,
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_get_taker_order_type); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 543, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_8, };
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 543, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":544
 *                 sell_market_trading_pair_tuple.quote_asset,
 *                 sell_market_trading_pair_tuple.market.get_taker_order_type(),
 *                 TradeType.SELL,             # <<<<<<<<<<<<<<
 *                 total_previous_step_base_amount + amount,
 *                 bid_price
 */
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_SELL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 544, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":545
 *                 sell_market_trading_pair_tuple.market.get_taker_order_type(),
 *                 TradeType.SELL,
 *                 total_previous_step_base_amount + amount,             # <<<<<<<<<<<<<<
 *                 bid_price
 *             )
 */
    __pyx_t_9 = PyNumber_Add(__pyx_v_total_previous_step_base_amount, __pyx_v_amount); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 545, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":540
 *                 ask_price
 *             )
 *             sell_fee = sell_market.c_get_fee(             # <<<<<<<<<<<<<<
 *                 sell_market_trading_pair_tuple.base_asset,
 *                 sell_market_trading_pair_tuple.quote_asset,
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_sell_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_fee(__pyx_v_sell_market, ((PyObject*)__pyx_t_3), ((PyObject*)__pyx_t_6), __pyx_t_7, __pyx_t_8, __pyx_t_9, __pyx_v_bid_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_sell_fee, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":549
 *             )
 *             # accumulated flat fees of exchange
 *             total_buy_flat_fees = self.c_sum_flat_fees(buy_market_trading_pair_tuple.quote_asset, buy_fee.flat_fees)             # <<<<<<<<<<<<<<
 *             total_sell_flat_fees = self.c_sum_flat_fees(sell_market_trading_pair_tuple.quote_asset, sell_fee.flat_fees)
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_market_trading_pair_tuple, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 549, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_fee, __pyx_n_s_flat_fees); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (!(likely(PyList_CheckExact(__pyx_t_9))||((__pyx_t_9) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_t_9))) __PYX_ERR(0, 549, __pyx_L1_error)
    __pyx_t_8 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_sum_flat_fees(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), ((PyObject*)__pyx_t_1), ((PyObject*)__pyx_t_9)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_total_buy_flat_fees, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":550
 *             # accumulated flat fees of exchange
 *             total_buy_flat_fees = self.c_sum_flat_fees(buy_market_trading_pair_tuple.quote_asset, buy_fee.flat_fees)
 *             total_sell_flat_fees = self.c_sum_flat_fees(sell_market_trading_pair_tuple.quote_asset, sell_fee.flat_fees)             # <<<<<<<<<<<<<<
 * 
 *             # accumulated profitability with fees
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_market_trading_pair_tuple, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_8))||((__pyx_t_8) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_8))) __PYX_ERR(0, 550, __pyx_L1_error)
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_fee, __pyx_n_s_flat_fees); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (!(likely(PyList_CheckExact(__pyx_t_9))||((__pyx_t_9) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_t_9))) __PYX_ERR(0, 550, __pyx_L1_error)
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_sum_flat_fees(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), ((PyObject*)__pyx_t_8), ((PyObject*)__pyx_t_9)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 550, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_total_sell_flat_fees, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":553
 * 
 *             # accumulated profitability with fees
 *             total_bid_value_adjusted += bid_price_adjusted * amount             # <<<<<<<<<<<<<<
 *             total_ask_value_adjusted += ask_price_adjusted * amount
 *             net_sell_proceeds = total_bid_value_adjusted * (1 - sell_fee.percent) - total_sell_flat_fees
 */
    __pyx_t_1 = PyNumber_Multiply(__pyx_v_bid_price_adjusted, __pyx_v_amount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = PyNumber_InPlaceAdd(__pyx_v_total_bid_value_adjusted, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_total_bid_value_adjusted, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":554
 *             # accumulated profitability with fees
 *             total_bid_value_adjusted += bid_price_adjusted * amount
 *             total_ask_value_adjusted += ask_price_adjusted * amount             # <<<<<<<<<<<<<<
 *             net_sell_proceeds = total_bid_value_adjusted * (1 - sell_fee.percent) - total_sell_flat_fees
 *             net_buy_costs = total_ask_value_adjusted * (1 + buy_fee.percent) + total_buy_flat_fees
 */
    __pyx_t_9 = PyNumber_Multiply(__pyx_v_ask_price_adjusted, __pyx_v_amount); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_total_ask_value_adjusted, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF_SET(__pyx_v_total_ask_value_adjusted, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":555
 *             total_bid_value_adjusted += bid_price_adjusted * amount
 *             total_ask_value_adjusted += ask_price_adjusted * amount
 *             net_sell_proceeds = total_bid_value_adjusted * (1 - sell_fee.percent) - total_sell_flat_fees             # <<<<<<<<<<<<<<
 *             net_buy_costs = total_ask_value_adjusted * (1 + buy_fee.percent) + total_buy_flat_fees
 *             profitability = net_sell_proceeds / net_buy_costs
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_fee, __pyx_n_s_percent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_1, 1, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Multiply(__pyx_v_total_bid_value_adjusted, __pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Subtract(__pyx_t_1, __pyx_v_total_sell_flat_fees); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_net_sell_proceeds, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":556
 *             total_ask_value_adjusted += ask_price_adjusted * amount
 *             net_sell_proceeds = total_bid_value_adjusted * (1 - sell_fee.percent) - total_sell_flat_fees
 *             net_buy_costs = total_ask_value_adjusted * (1 + buy_fee.percent) + total_buy_flat_fees             # <<<<<<<<<<<<<<
 *             profitability = net_sell_proceeds / net_buy_costs
 * 
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_fee, __pyx_n_s_percent); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_1 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_t_9, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Multiply(__pyx_v_total_ask_value_adjusted, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_9, __pyx_v_total_buy_flat_fees); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_net_buy_costs, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":557
 *             net_sell_proceeds = total_bid_value_adjusted * (1 - sell_fee.percent) - total_sell_flat_fees
 *             net_buy_costs = total_ask_value_adjusted * (1 + buy_fee.percent) + total_buy_flat_fees
 *             profitability = net_sell_proceeds / net_buy_costs             # <<<<<<<<<<<<<<
 * 
 *             # if current step is within minimum profitability, set to best profitable order
 */
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_net_sell_proceeds, __pyx_v_net_buy_costs); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 557, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_profitability, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":561
 *             # if current step is within minimum profitability, set to best profitable order
 *             # because the total amount is greater than the previous step
 *             if profitability > (1 + self._min_profitability):             # <<<<<<<<<<<<<<
 *                 best_profitable_order_amount = total_previous_step_base_amount + amount
 *                 best_profitable_order_profitability = profitability
 */
    __pyx_t_1 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_v_self->_min_profitability, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 561, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = PyObject_RichCompare(__pyx_v_profitability, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 561, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 561, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_12) {

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":562
 *             # because the total amount is greater than the previous step
 *             if profitability > (1 + self._min_profitability):
 *                 best_profitable_order_amount = total_previous_step_base_amount + amount             # <<<<<<<<<<<<<<
 *                 best_profitable_order_profitability = profitability
 * 
 */
      __pyx_t_9 = PyNumber_Add(__pyx_v_total_previous_step_base_amount, __pyx_v_amount); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 562, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF_SET(__pyx_v_best_profitable_order_amount, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":563
 *             if profitability > (1 + self._min_profitability):
 *                 best_profitable_order_amount = total_previous_step_base_amount + amount
 *                 best_profitable_order_profitability = profitability             # <<<<<<<<<<<<<<
 * 
 *             if self._logging_options & self.OPTION_LOG_PROFITABILITY_STEP:
 */
      __Pyx_INCREF(__pyx_v_profitability);
      __Pyx_DECREF_SET(__pyx_v_best_profitable_order_profitability, __pyx_v_profitability);

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":561
 *             # if current step is within minimum profitability, set to best profitable order
 *             # because the total amount is greater than the previous step
 *             if profitability > (1 + self._min_profitability):             # <<<<<<<<<<<<<<
 *                 best_profitable_order_amount = total_previous_step_base_amount + amount
 *                 best_profitable_order_profitability = profitability
 */
    }

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":565
 *                 best_profitable_order_profitability = profitability
 * 
 *             if self._logging_options & self.OPTION_LOG_PROFITABILITY_STEP:             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(logging.DEBUG, f"Total profitability with fees: {profitability}, "
 *                                                    f"Current step profitability: {bid_price/ask_price},"
 */
    __pyx_t_9 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 565, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_PROFITABILITY_STEP); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 565, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyNumber_And(__pyx_t_9, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 565, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 565, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_12) {

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":566
 * 
 *             if self._logging_options & self.OPTION_LOG_PROFITABILITY_STEP:
 *                 self.log_with_clock(logging.DEBUG, f"Total profitability with fees: {profitability}, "             # <<<<<<<<<<<<<<
 *                                                    f"Current step profitability: {bid_price/ask_price},"
 *                                                    f"bid, ask price, amount: {bid_price, ask_price, amount}")
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_logging); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_DEBUG); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = PyTuple_New(6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_13 = 0;
      __pyx_t_14 = 127;
      __Pyx_INCREF(__pyx_kp_u_Total_profitability_with_fees);
      __pyx_t_13 += 31;
      __Pyx_GIVEREF(__pyx_kp_u_Total_profitability_with_fees);
      PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_kp_u_Total_profitability_with_fees);
      __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_v_profitability, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_14;
      __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u_Current_step_profitability);
      __pyx_t_13 += 30;
      __Pyx_GIVEREF(__pyx_kp_u_Current_step_profitability);
      PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_kp_u_Current_step_profitability);

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":567
 *             if self._logging_options & self.OPTION_LOG_PROFITABILITY_STEP:
 *                 self.log_with_clock(logging.DEBUG, f"Total profitability with fees: {profitability}, "
 *                                                    f"Current step profitability: {bid_price/ask_price},"             # <<<<<<<<<<<<<<
 *                                                    f"bid, ask price, amount: {bid_price, ask_price, amount}")
 *             buy_market_quote_balance = buy_market.c_get_available_balance(buy_market_trading_pair_tuple.quote_asset)
 */
      __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_v_bid_price, __pyx_v_ask_price); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 567, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 567, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_14;
      __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_3);
      __pyx_t_3 = 0;
      __Pyx_INCREF(__pyx_kp_u_bid_ask_price_amount);
      __pyx_t_13 += 25;
      __Pyx_GIVEREF(__pyx_kp_u_bid_ask_price_amount);
      PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_kp_u_bid_ask_price_amount);

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":568
 *                 self.log_with_clock(logging.DEBUG, f"Total profitability with fees: {profitability}, "
 *                                                    f"Current step profitability: {bid_price/ask_price},"
 *                                                    f"bid, ask price, amount: {bid_price, ask_price, amount}")             # <<<<<<<<<<<<<<
 *             buy_market_quote_balance = buy_market.c_get_available_balance(buy_market_trading_pair_tuple.quote_asset)
 *             sell_market_base_balance = sell_market.c_get_available_balance(sell_market_trading_pair_tuple.base_asset)
 */
      __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_bid_price);
      __Pyx_GIVEREF(__pyx_v_bid_price);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_bid_price);
      __Pyx_INCREF(__pyx_v_ask_price);
      __Pyx_GIVEREF(__pyx_v_ask_price);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_ask_price);
      __Pyx_INCREF(__pyx_v_amount);
      __Pyx_GIVEREF(__pyx_v_amount);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_v_amount);
      __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 568, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_14;
      __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_9, 5, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":566
 * 
 *             if self._logging_options & self.OPTION_LOG_PROFITABILITY_STEP:
 *                 self.log_with_clock(logging.DEBUG, f"Total profitability with fees: {profitability}, "             # <<<<<<<<<<<<<<
 *                                                    f"Current step profitability: {bid_price/ask_price},"
 *                                                    f"bid, ask price, amount: {bid_price, ask_price, amount}")
 */
      __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_9, 6, __pyx_t_13, __pyx_t_14); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_4 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_9, __pyx_t_7, __pyx_t_6};
        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 566, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":565
 *                 best_profitable_order_profitability = profitability
 * 
 *             if self._logging_options & self.OPTION_LOG_PROFITABILITY_STEP:             # <<<<<<<<<<<<<<
 *                 self.log_with_clock(logging.DEBUG, f"Total profitability with fees: {profitability}, "
 *                                                    f"Current step profitability: {bid_price/ask_price},"
 */
    }

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":569
 *                                                    f"Current step profitability: {bid_price/ask_price},"
 *                                                    f"bid, ask price, amount: {bid_price, ask_price, amount}")
 *             buy_market_quote_balance = buy_market.c_get_available_balance(buy_market_trading_pair_tuple.quote_asset)             # <<<<<<<<<<<<<<
 *             sell_market_base_balance = sell_market.c_get_available_balance(sell_market_trading_pair_tuple.base_asset)
 *             # stop current step if buy/sell market does not have enough asset
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_market_trading_pair_tuple, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_8))||((__pyx_t_8) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_8))) __PYX_ERR(0, 569, __pyx_L1_error)
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_buy_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_buy_market), ((PyObject*)__pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_buy_market_quote_balance, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":570
 *                                                    f"bid, ask price, amount: {bid_price, ask_price, amount}")
 *             buy_market_quote_balance = buy_market.c_get_available_balance(buy_market_trading_pair_tuple.quote_asset)
 *             sell_market_base_balance = sell_market.c_get_available_balance(sell_market_trading_pair_tuple.base_asset)             # <<<<<<<<<<<<<<
 *             # stop current step if buy/sell market does not have enough asset
 *             if (buy_market_quote_balance < net_buy_costs or
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_market_trading_pair_tuple, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 570, __pyx_L1_error)
    __pyx_t_8 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_sell_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_sell_market), ((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 570, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_sell_market_base_balance, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":572
 *             sell_market_base_balance = sell_market.c_get_available_balance(sell_market_trading_pair_tuple.base_asset)
 *             # stop current step if buy/sell market does not have enough asset
 *             if (buy_market_quote_balance < net_buy_costs or             # <<<<<<<<<<<<<<
 *                     sell_market_base_balance < (total_previous_step_base_amount + amount)):
 *                 # use previous step as best profitable order if below min profitability
 */
    __pyx_t_8 = PyObject_RichCompare(__pyx_v_buy_market_quote_balance, __pyx_v_net_buy_costs, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 572, __pyx_L1_error)
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 572, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (!__pyx_t_15) {
    } else {
      __pyx_t_12 = __pyx_t_15;
      goto __pyx_L10_bool_binop_done;
    }

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":573
 *             # stop current step if buy/sell market does not have enough asset
 *             if (buy_market_quote_balance < net_buy_costs or
 *                     sell_market_base_balance < (total_previous_step_base_amount + amount)):             # <<<<<<<<<<<<<<
 *                 # use previous step as best profitable order if below min profitability
 *                 if profitability < (1 + self._min_profitability):
 */
    __pyx_t_8 = PyNumber_Add(__pyx_v_total_previous_step_base_amount, __pyx_v_amount); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 573, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_sell_market_base_balance, __pyx_t_8, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 573, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 573, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_12 = __pyx_t_15;
    __pyx_L10_bool_binop_done:;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":572
 *             sell_market_base_balance = sell_market.c_get_available_balance(sell_market_trading_pair_tuple.base_asset)
 *             # stop current step if buy/sell market does not have enough asset
 *             if (buy_market_quote_balance < net_buy_costs or             # <<<<<<<<<<<<<<
 *                     sell_market_base_balance < (total_previous_step_base_amount + amount)):
 *                 # use previous step as best profitable order if below min profitability
 */
    if (__pyx_t_12) {

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":575
 *                     sell_market_base_balance < (total_previous_step_base_amount + amount)):
 *                 # use previous step as best profitable order if below min profitability
 *                 if profitability < (1 + self._min_profitability):             # <<<<<<<<<<<<<<
 *                     break
 *                 if self._logging_options & self.OPTION_LOG_INSUFFICIENT_ASSET:
 */
      __pyx_t_1 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_v_self->_min_profitability, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 575, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = PyObject_RichCompare(__pyx_v_profitability, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 575, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 575, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_12) {

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":576
 *                 # use previous step as best profitable order if below min profitability
 *                 if profitability < (1 + self._min_profitability):
 *                     break             # <<<<<<<<<<<<<<
 *                 if self._logging_options & self.OPTION_LOG_INSUFFICIENT_ASSET:
 *                     self.log_with_clock(logging.DEBUG,
 */
        goto __pyx_L4_break;

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":575
 *                     sell_market_base_balance < (total_previous_step_base_amount + amount)):
 *                 # use previous step as best profitable order if below min profitability
 *                 if profitability < (1 + self._min_profitability):             # <<<<<<<<<<<<<<
 *                     break
 *                 if self._logging_options & self.OPTION_LOG_INSUFFICIENT_ASSET:
 */
      }

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":577
 *                 if profitability < (1 + self._min_profitability):
 *                     break
 *                 if self._logging_options & self.OPTION_LOG_INSUFFICIENT_ASSET:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(logging.DEBUG,
 *                                         f"Not enough asset to complete this step. "
 */
      __pyx_t_8 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_INSUFFICIENT_ASSET); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = PyNumber_And(__pyx_t_8, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 577, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 577, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (__pyx_t_12) {

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":578
 *                     break
 *                 if self._logging_options & self.OPTION_LOG_INSUFFICIENT_ASSET:
 *                     self.log_with_clock(logging.DEBUG,             # <<<<<<<<<<<<<<
 *                                         f"Not enough asset to complete this step. "
 *                                         f"Quote asset needed: {total_ask_value + ask_price * amount}. "
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 578, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_logging); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 578, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_DEBUG); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 578, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":579
 *                 if self._logging_options & self.OPTION_LOG_INSUFFICIENT_ASSET:
 *                     self.log_with_clock(logging.DEBUG,
 *                                         f"Not enough asset to complete this step. "             # <<<<<<<<<<<<<<
 *                                         f"Quote asset needed: {total_ask_value + ask_price * amount}. "
 *                                         f"Quote asset available balance: {buy_market_quote_balance}. "
 */
        __pyx_t_8 = PyTuple_New(9); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 579, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_13 = 0;
        __pyx_t_14 = 127;
        __Pyx_INCREF(__pyx_kp_u_Not_enough_asset_to_complete_thi);
        __pyx_t_13 += 60;
        __Pyx_GIVEREF(__pyx_kp_u_Not_enough_asset_to_complete_thi);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_Not_enough_asset_to_complete_thi);

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":580
 *                     self.log_with_clock(logging.DEBUG,
 *                                         f"Not enough asset to complete this step. "
 *                                         f"Quote asset needed: {total_ask_value + ask_price * amount}. "             # <<<<<<<<<<<<<<
 *                                         f"Quote asset available balance: {buy_market_quote_balance}. "
 *                                         f"Base asset needed: {total_bid_value + bid_price * amount}. "
 */
        __pyx_t_9 = PyNumber_Multiply(__pyx_v_ask_price, __pyx_v_amount); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 580, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_3 = PyNumber_Add(__pyx_v_total_ask_value, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 580, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 580, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_14;
        __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u_Quote_asset_available_balance);
        __pyx_t_13 += 33;
        __Pyx_GIVEREF(__pyx_kp_u_Quote_asset_available_balance);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u_Quote_asset_available_balance);

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":581
 *                                         f"Not enough asset to complete this step. "
 *                                         f"Quote asset needed: {total_ask_value + ask_price * amount}. "
 *                                         f"Quote asset available balance: {buy_market_quote_balance}. "             # <<<<<<<<<<<<<<
 *                                         f"Base asset needed: {total_bid_value + bid_price * amount}. "
 *                                         f"Base asset available balance: {sell_market_base_balance}. ")
 */
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_v_buy_market_quote_balance, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 581, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_14;
        __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u_Base_asset_needed);
        __pyx_t_13 += 21;
        __Pyx_GIVEREF(__pyx_kp_u_Base_asset_needed);
        PyTuple_SET_ITEM(__pyx_t_8, 4, __pyx_kp_u_Base_asset_needed);

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":582
 *                                         f"Quote asset needed: {total_ask_value + ask_price * amount}. "
 *                                         f"Quote asset available balance: {buy_market_quote_balance}. "
 *                                         f"Base asset needed: {total_bid_value + bid_price * amount}. "             # <<<<<<<<<<<<<<
 *                                         f"Base asset available balance: {sell_market_base_balance}. ")
 * 
 */
        __pyx_t_9 = PyNumber_Multiply(__pyx_v_bid_price, __pyx_v_amount); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 582, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_3 = PyNumber_Add(__pyx_v_total_bid_value, __pyx_t_9); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 582, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 582, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_14;
        __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_8, 5, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u_Base_asset_available_balance);
        __pyx_t_13 += 32;
        __Pyx_GIVEREF(__pyx_kp_u_Base_asset_available_balance);
        PyTuple_SET_ITEM(__pyx_t_8, 6, __pyx_kp_u_Base_asset_available_balance);

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":583
 *                                         f"Quote asset available balance: {buy_market_quote_balance}. "
 *                                         f"Base asset needed: {total_bid_value + bid_price * amount}. "
 *                                         f"Base asset available balance: {sell_market_base_balance}. ")             # <<<<<<<<<<<<<<
 * 
 *                 # market buys need to be adjusted to account for additional fees
 */
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_v_sell_market_base_balance, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 583, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_14;
        __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_8, 7, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u__13);
        __pyx_t_13 += 2;
        __Pyx_GIVEREF(__pyx_kp_u__13);
        PyTuple_SET_ITEM(__pyx_t_8, 8, __pyx_kp_u__13);

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":579
 *                 if self._logging_options & self.OPTION_LOG_INSUFFICIENT_ASSET:
 *                     self.log_with_clock(logging.DEBUG,
 *                                         f"Not enough asset to complete this step. "             # <<<<<<<<<<<<<<
 *                                         f"Quote asset needed: {total_ask_value + ask_price * amount}. "
 *                                         f"Quote asset available balance: {buy_market_quote_balance}. "
 */
        __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_8, 9, __pyx_t_13, __pyx_t_14); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 579, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = NULL;
        __pyx_t_4 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_4 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_t_7, __pyx_t_9};
          __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 578, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":577
 *                 if profitability < (1 + self._min_profitability):
 *                     break
 *                 if self._logging_options & self.OPTION_LOG_INSUFFICIENT_ASSET:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(logging.DEBUG,
 *                                         f"Not enough asset to complete this step. "
 */
      }

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":586
 * 
 *                 # market buys need to be adjusted to account for additional fees
 *                 buy_market_adjusted_order_size = ((buy_market_quote_balance / ask_price - total_buy_flat_fees) /             # <<<<<<<<<<<<<<
 *                                                   (1 + buy_fee.percent))
 *                 # buy and sell with the amount of available base or quote asset, whichever is smaller
 */
      __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_v_buy_market_quote_balance, __pyx_v_ask_price); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 586, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = PyNumber_Subtract(__pyx_t_6, __pyx_v_total_buy_flat_fees); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 586, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":587
 *                 # market buys need to be adjusted to account for additional fees
 *                 buy_market_adjusted_order_size = ((buy_market_quote_balance / ask_price - total_buy_flat_fees) /
 *                                                   (1 + buy_fee.percent))             # <<<<<<<<<<<<<<
 *                 # buy and sell with the amount of available base or quote asset, whichever is smaller
 *                 best_profitable_order_amount = min(sell_market_base_balance, buy_market_adjusted_order_size)
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_fee, __pyx_n_s_percent); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 587, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_t_6, 1, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 587, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":586
 * 
 *                 # market buys need to be adjusted to account for additional fees
 *                 buy_market_adjusted_order_size = ((buy_market_quote_balance / ask_price - total_buy_flat_fees) /             # <<<<<<<<<<<<<<
 *                                                   (1 + buy_fee.percent))
 *                 # buy and sell with the amount of available base or quote asset, whichever is smaller
 */
      __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 586, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_buy_market_adjusted_order_size = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":589
 *                                                   (1 + buy_fee.percent))
 *                 # buy and sell with the amount of available base or quote asset, whichever is smaller
 *                 best_profitable_order_amount = min(sell_market_base_balance, buy_market_adjusted_order_size)             # <<<<<<<<<<<<<<
 *                 best_profitable_order_profitability = profitability
 *                 break
 */
      __Pyx_INCREF(__pyx_v_buy_market_adjusted_order_size);
      __pyx_t_6 = __pyx_v_buy_market_adjusted_order_size;
      __Pyx_INCREF(__pyx_v_sell_market_base_balance);
      __pyx_t_9 = __pyx_v_sell_market_base_balance;
      __pyx_t_7 = PyObject_RichCompare(__pyx_t_6, __pyx_t_9, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 589, __pyx_L1_error)
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 589, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__pyx_t_12) {
        __Pyx_INCREF(__pyx_t_6);
        __pyx_t_1 = __pyx_t_6;
      } else {
        __Pyx_INCREF(__pyx_t_9);
        __pyx_t_1 = __pyx_t_9;
      }
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __pyx_t_1;
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF_SET(__pyx_v_best_profitable_order_amount, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":590
 *                 # buy and sell with the amount of available base or quote asset, whichever is smaller
 *                 best_profitable_order_amount = min(sell_market_base_balance, buy_market_adjusted_order_size)
 *                 best_profitable_order_profitability = profitability             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
      __Pyx_INCREF(__pyx_v_profitability);
      __Pyx_DECREF_SET(__pyx_v_best_profitable_order_profitability, __pyx_v_profitability);

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":591
 *                 best_profitable_order_amount = min(sell_market_base_balance, buy_market_adjusted_order_size)
 *                 best_profitable_order_profitability = profitability
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             total_bid_value += bid_price * amount
 */
      goto __pyx_L4_break;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":572
 *             sell_market_base_balance = sell_market.c_get_available_balance(sell_market_trading_pair_tuple.base_asset)
 *             # stop current step if buy/sell market does not have enough asset
 *             if (buy_market_quote_balance < net_buy_costs or             # <<<<<<<<<<<<<<
 *                     sell_market_base_balance < (total_previous_step_base_amount + amount)):
 *                 # use previous step as best profitable order if below min profitability
 */
    }

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":593
 *                 break
 * 
 *             total_bid_value += bid_price * amount             # <<<<<<<<<<<<<<
 *             total_ask_value += ask_price * amount
 *             total_previous_step_base_amount += amount
 */
    __pyx_t_6 = PyNumber_Multiply(__pyx_v_bid_price, __pyx_v_amount); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_total_bid_value, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 593, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_total_bid_value, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":594
 * 
 *             total_bid_value += bid_price * amount
 *             total_ask_value += ask_price * amount             # <<<<<<<<<<<<<<
 *             total_previous_step_base_amount += amount
 * 
 */
    __pyx_t_1 = PyNumber_Multiply(__pyx_v_ask_price, __pyx_v_amount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_total_ask_value, __pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_total_ask_value, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":595
 *             total_bid_value += bid_price * amount
 *             total_ask_value += ask_price * amount
 *             total_previous_step_base_amount += amount             # <<<<<<<<<<<<<<
 * 
 *         if self._logging_options & self.OPTION_LOG_FULL_PROFITABILITY_STEP:
 */
    __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_total_previous_step_base_amount, __pyx_v_amount); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 595, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF_SET(__pyx_v_total_previous_step_base_amount, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":531
 *         # "flat_fees" returns list of additional fees ie: [("ETH", 0.01), ("BNB", 2.5)]
 *         # typically most exchanges will only have 1 flat fee (ie: gas cost of transaction in ETH)
 *         for bid_price_adjusted, ask_price_adjusted, bid_price, ask_price, amount in profitable_orders:             # <<<<<<<<<<<<<<
 *             buy_fee = buy_market.c_get_fee(
 *                 buy_market_trading_pair_tuple.base_asset,
 */
  }
  __pyx_L4_break:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":597
 *             total_previous_step_base_amount += amount
 * 
 *         if self._logging_options & self.OPTION_LOG_FULL_PROFITABILITY_STEP:             # <<<<<<<<<<<<<<
 *             self.log_with_clock(
 *                 logging.DEBUG,
 */
  __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_FULL_PROFITABILITY_ST); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_1 = PyNumber_And(__pyx_t_2, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_12) {

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":598
 * 
 *         if self._logging_options & self.OPTION_LOG_FULL_PROFITABILITY_STEP:
 *             self.log_with_clock(             # <<<<<<<<<<<<<<
 *                 logging.DEBUG,
 *                 "\n" + pd.DataFrame(
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 598, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":599
 *         if self._logging_options & self.OPTION_LOG_FULL_PROFITABILITY_STEP:
 *             self.log_with_clock(
 *                 logging.DEBUG,             # <<<<<<<<<<<<<<
 *                 "\n" + pd.DataFrame(
 *                     data=[
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_logging); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 599, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_DEBUG); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 599, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":600
 *             self.log_with_clock(
 *                 logging.DEBUG,
 *                 "\n" + pd.DataFrame(             # <<<<<<<<<<<<<<
 *                     data=[
 *                         [b_price_adjusted/a_price_adjusted,
 */
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_pd); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":601
 *                 logging.DEBUG,
 *                 "\n" + pd.DataFrame(
 *                     data=[             # <<<<<<<<<<<<<<
 *                         [b_price_adjusted/a_price_adjusted,
 *                          b_price_adjusted, a_price_adjusted, b_price, a_price, amount]
 */
    __pyx_t_7 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 601, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    { /* enter inner scope */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 601, __pyx_L17_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":604
 *                         [b_price_adjusted/a_price_adjusted,
 *                          b_price_adjusted, a_price_adjusted, b_price, a_price, amount]
 *                         for b_price_adjusted, a_price_adjusted, b_price, a_price, amount in profitable_orders],             # <<<<<<<<<<<<<<
 *                     columns=['raw_profitability', 'bid_price_adjusted', 'ask_price_adjusted',
 *                              'bid_price', 'ask_price', 'step_amount']
 */
      if (unlikely(__pyx_v_profitable_orders == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
        __PYX_ERR(0, 604, __pyx_L17_error)
      }
      __pyx_t_10 = __pyx_v_profitable_orders; __Pyx_INCREF(__pyx_t_10); __pyx_t_5 = 0;
      for (;;) {
        if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_16 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_5); __Pyx_INCREF(__pyx_t_16); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 604, __pyx_L17_error)
        #else
        __pyx_t_16 = PySequence_ITEM(__pyx_t_10, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 604, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_16);
        #endif
        if ((likely(PyTuple_CheckExact(__pyx_t_16))) || (PyList_CheckExact(__pyx_t_16))) {
          PyObject* sequence = __pyx_t_16;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 5)) {
            if (size > 5) __Pyx_RaiseTooManyValuesError(5);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 604, __pyx_L17_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_17 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_18 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_19 = PyTuple_GET_ITEM(sequence, 2); 
            __pyx_t_20 = PyTuple_GET_ITEM(sequence, 3); 
            __pyx_t_21 = PyTuple_GET_ITEM(sequence, 4); 
          } else {
            __pyx_t_17 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_18 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_19 = PyList_GET_ITEM(sequence, 2); 
            __pyx_t_20 = PyList_GET_ITEM(sequence, 3); 
            __pyx_t_21 = PyList_GET_ITEM(sequence, 4); 
          }
          __Pyx_INCREF(__pyx_t_17);
          __Pyx_INCREF(__pyx_t_18);
          __Pyx_INCREF(__pyx_t_19);
          __Pyx_INCREF(__pyx_t_20);
          __Pyx_INCREF(__pyx_t_21);
          #else
          {
            Py_ssize_t i;
            PyObject** temps[5] = {&__pyx_t_17,&__pyx_t_18,&__pyx_t_19,&__pyx_t_20,&__pyx_t_21};
            for (i=0; i < 5; i++) {
              PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 604, __pyx_L17_error)
              __Pyx_GOTREF(item);
              *(temps[i]) = item;
            }
          }
          #endif
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        } else {
          Py_ssize_t index = -1;
          PyObject** temps[5] = {&__pyx_t_17,&__pyx_t_18,&__pyx_t_19,&__pyx_t_20,&__pyx_t_21};
          __pyx_t_22 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 604, __pyx_L17_error)
          __Pyx_GOTREF(__pyx_t_22);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_22);
          for (index=0; index < 5; index++) {
            PyObject* item = __pyx_t_11(__pyx_t_22); if (unlikely(!item)) goto __pyx_L20_unpacking_failed;
            __Pyx_GOTREF(item);
            *(temps[index]) = item;
          }
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_22), 5) < 0) __PYX_ERR(0, 604, __pyx_L17_error)
          __pyx_t_11 = NULL;
          __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
          goto __pyx_L21_unpacking_done;
          __pyx_L20_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
          __pyx_t_11 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 604, __pyx_L17_error)
          __pyx_L21_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr8__pyx_v_b_price_adjusted, __pyx_t_17);
        __pyx_t_17 = 0;
        __Pyx_XDECREF_SET(__pyx_8genexpr8__pyx_v_a_price_adjusted, __pyx_t_18);
        __pyx_t_18 = 0;
        __Pyx_XDECREF_SET(__pyx_8genexpr8__pyx_v_b_price, __pyx_t_19);
        __pyx_t_19 = 0;
        __Pyx_XDECREF_SET(__pyx_8genexpr8__pyx_v_a_price, __pyx_t_20);
        __pyx_t_20 = 0;
        __Pyx_XDECREF_SET(__pyx_8genexpr8__pyx_v_amount, __pyx_t_21);
        __pyx_t_21 = 0;

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":602
 *                 "\n" + pd.DataFrame(
 *                     data=[
 *                         [b_price_adjusted/a_price_adjusted,             # <<<<<<<<<<<<<<
 *                          b_price_adjusted, a_price_adjusted, b_price, a_price, amount]
 *                         for b_price_adjusted, a_price_adjusted, b_price, a_price, amount in profitable_orders],
 */
        __pyx_t_16 = __Pyx_PyNumber_Divide(__pyx_8genexpr8__pyx_v_b_price_adjusted, __pyx_8genexpr8__pyx_v_a_price_adjusted); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 602, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_16);

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":603
 *                     data=[
 *                         [b_price_adjusted/a_price_adjusted,
 *                          b_price_adjusted, a_price_adjusted, b_price, a_price, amount]             # <<<<<<<<<<<<<<
 *                         for b_price_adjusted, a_price_adjusted, b_price, a_price, amount in profitable_orders],
 *                     columns=['raw_profitability', 'bid_price_adjusted', 'ask_price_adjusted',
 */
        __pyx_t_21 = PyList_New(6); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 602, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_21);
        __Pyx_GIVEREF(__pyx_t_16);
        PyList_SET_ITEM(__pyx_t_21, 0, __pyx_t_16);
        __Pyx_INCREF(__pyx_8genexpr8__pyx_v_b_price_adjusted);
        __Pyx_GIVEREF(__pyx_8genexpr8__pyx_v_b_price_adjusted);
        PyList_SET_ITEM(__pyx_t_21, 1, __pyx_8genexpr8__pyx_v_b_price_adjusted);
        __Pyx_INCREF(__pyx_8genexpr8__pyx_v_a_price_adjusted);
        __Pyx_GIVEREF(__pyx_8genexpr8__pyx_v_a_price_adjusted);
        PyList_SET_ITEM(__pyx_t_21, 2, __pyx_8genexpr8__pyx_v_a_price_adjusted);
        __Pyx_INCREF(__pyx_8genexpr8__pyx_v_b_price);
        __Pyx_GIVEREF(__pyx_8genexpr8__pyx_v_b_price);
        PyList_SET_ITEM(__pyx_t_21, 3, __pyx_8genexpr8__pyx_v_b_price);
        __Pyx_INCREF(__pyx_8genexpr8__pyx_v_a_price);
        __Pyx_GIVEREF(__pyx_8genexpr8__pyx_v_a_price);
        PyList_SET_ITEM(__pyx_t_21, 4, __pyx_8genexpr8__pyx_v_a_price);
        __Pyx_INCREF(__pyx_8genexpr8__pyx_v_amount);
        __Pyx_GIVEREF(__pyx_8genexpr8__pyx_v_amount);
        PyList_SET_ITEM(__pyx_t_21, 5, __pyx_8genexpr8__pyx_v_amount);
        __pyx_t_16 = 0;
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_21))) __PYX_ERR(0, 601, __pyx_L17_error)
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":604
 *                         [b_price_adjusted/a_price_adjusted,
 *                          b_price_adjusted, a_price_adjusted, b_price, a_price, amount]
 *                         for b_price_adjusted, a_price_adjusted, b_price, a_price, amount in profitable_orders],             # <<<<<<<<<<<<<<
 *                     columns=['raw_profitability', 'bid_price_adjusted', 'ask_price_adjusted',
 *                              'bid_price', 'ask_price', 'step_amount']
 */
      }
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_a_price); __pyx_8genexpr8__pyx_v_a_price = 0;
      __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_a_price_adjusted); __pyx_8genexpr8__pyx_v_a_price_adjusted = 0;
      __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_amount); __pyx_8genexpr8__pyx_v_amount = 0;
      __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_b_price); __pyx_8genexpr8__pyx_v_b_price = 0;
      __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_b_price_adjusted); __pyx_8genexpr8__pyx_v_b_price_adjusted = 0;
      goto __pyx_L22_exit_scope;
      __pyx_L17_error:;
      __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_a_price); __pyx_8genexpr8__pyx_v_a_price = 0;
      __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_a_price_adjusted); __pyx_8genexpr8__pyx_v_a_price_adjusted = 0;
      __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_amount); __pyx_8genexpr8__pyx_v_amount = 0;
      __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_b_price); __pyx_8genexpr8__pyx_v_b_price = 0;
      __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_b_price_adjusted); __pyx_8genexpr8__pyx_v_b_price_adjusted = 0;
      goto __pyx_L1_error;
      __pyx_L22_exit_scope:;
    } /* exit inner scope */
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_data, __pyx_t_3) < 0) __PYX_ERR(0, 601, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":605
 *                          b_price_adjusted, a_price_adjusted, b_price, a_price, amount]
 *                         for b_price_adjusted, a_price_adjusted, b_price, a_price, amount in profitable_orders],
 *                     columns=['raw_profitability', 'bid_price_adjusted', 'ask_price_adjusted',             # <<<<<<<<<<<<<<
 *                              'bid_price', 'ask_price', 'step_amount']
 *                 ).to_string()
 */
    __pyx_t_3 = PyList_New(6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_n_u_raw_profitability);
    __Pyx_GIVEREF(__pyx_n_u_raw_profitability);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_n_u_raw_profitability);
    __Pyx_INCREF(__pyx_n_u_bid_price_adjusted);
    __Pyx_GIVEREF(__pyx_n_u_bid_price_adjusted);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_n_u_bid_price_adjusted);
    __Pyx_INCREF(__pyx_n_u_ask_price_adjusted);
    __Pyx_GIVEREF(__pyx_n_u_ask_price_adjusted);
    PyList_SET_ITEM(__pyx_t_3, 2, __pyx_n_u_ask_price_adjusted);
    __Pyx_INCREF(__pyx_n_u_bid_price);
    __Pyx_GIVEREF(__pyx_n_u_bid_price);
    PyList_SET_ITEM(__pyx_t_3, 3, __pyx_n_u_bid_price);
    __Pyx_INCREF(__pyx_n_u_ask_price);
    __Pyx_GIVEREF(__pyx_n_u_ask_price);
    PyList_SET_ITEM(__pyx_t_3, 4, __pyx_n_u_ask_price);
    __Pyx_INCREF(__pyx_n_u_step_amount);
    __Pyx_GIVEREF(__pyx_n_u_step_amount);
    PyList_SET_ITEM(__pyx_t_3, 5, __pyx_n_u_step_amount);
    if (PyDict_SetItem(__pyx_t_7, __pyx_n_s_columns, __pyx_t_3) < 0) __PYX_ERR(0, 601, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":600
 *             self.log_with_clock(
 *                 logging.DEBUG,
 *                 "\n" + pd.DataFrame(             # <<<<<<<<<<<<<<
 *                     data=[
 *                         [b_price_adjusted/a_price_adjusted,
 */
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_empty_tuple, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":607
 *                     columns=['raw_profitability', 'bid_price_adjusted', 'ask_price_adjusted',
 *                              'bid_price', 'ask_price', 'step_amount']
 *                 ).to_string()             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_to_string); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 607, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_3, };
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 607, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":600
 *             self.log_with_clock(
 *                 logging.DEBUG,
 *                 "\n" + pd.DataFrame(             # <<<<<<<<<<<<<<
 *                     data=[
 *                         [b_price_adjusted/a_price_adjusted,
 */
    __pyx_t_7 = PyNumber_Add(__pyx_kp_u__8, __pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 600, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_9, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 598, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":597
 *             total_previous_step_base_amount += amount
 * 
 *         if self._logging_options & self.OPTION_LOG_FULL_PROFITABILITY_STEP:             # <<<<<<<<<<<<<<
 *             self.log_with_clock(
 *                 logging.DEBUG,
 */
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":610
 *             )
 * 
 *         return best_profitable_order_amount, best_profitable_order_profitability, bid_price, ask_price             # <<<<<<<<<<<<<<
 * 
 *     # The following exposed Python functions are meant for unit tests
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 610, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_best_profitable_order_amount);
  __Pyx_GIVEREF(__pyx_v_best_profitable_order_amount);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_best_profitable_order_amount);
  __Pyx_INCREF(__pyx_v_best_profitable_order_profitability);
  __Pyx_GIVEREF(__pyx_v_best_profitable_order_profitability);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_best_profitable_order_profitability);
  __Pyx_INCREF(__pyx_v_bid_price);
  __Pyx_GIVEREF(__pyx_v_bid_price);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_v_bid_price);
  __Pyx_INCREF(__pyx_v_ask_price);
  __Pyx_GIVEREF(__pyx_v_ask_price);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_ask_price);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":481
 *             #     return quote_rate / base_rate
 * 
 *     cdef tuple c_find_best_profitable_amount(self, object buy_market_trading_pair_tuple, object sell_market_trading_pair_tuple):             # <<<<<<<<<<<<<<
 *         """
 *         Given a buy market and a sell market, calculate the optimal order size for the buy and sell orders on both
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.c_find_best_profitable_amount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_total_bid_value);
  __Pyx_XDECREF(__pyx_v_total_ask_value);
  __Pyx_XDECREF(__pyx_v_total_bid_value_adjusted);
  __Pyx_XDECREF(__pyx_v_total_ask_value_adjusted);
  __Pyx_XDECREF(__pyx_v_total_previous_step_base_amount);
  __Pyx_XDECREF(__pyx_v_bid_price);
  __Pyx_XDECREF(__pyx_v_ask_price);
  __Pyx_XDECREF(__pyx_v_profitability);
  __Pyx_XDECREF(__pyx_v_best_profitable_order_amount);
  __Pyx_XDECREF(__pyx_v_best_profitable_order_profitability);
  __Pyx_XDECREF(__pyx_v_buy_fee);
  __Pyx_XDECREF(__pyx_v_sell_fee);
  __Pyx_XDECREF(__pyx_v_total_sell_flat_fees);
  __Pyx_XDECREF(__pyx_v_total_buy_flat_fees);
  __Pyx_XDECREF(__pyx_v_net_sell_proceeds);
  __Pyx_XDECREF(__pyx_v_net_buy_costs);
  __Pyx_XDECREF(__pyx_v_buy_market_quote_balance);
  __Pyx_XDECREF(__pyx_v_sell_market_base_balance);
  __Pyx_XDECREF((PyObject *)__pyx_v_buy_market);
  __Pyx_XDECREF((PyObject *)__pyx_v_sell_market);
  __Pyx_XDECREF((PyObject *)__pyx_v_buy_order_book);
  __Pyx_XDECREF((PyObject *)__pyx_v_sell_order_book);
  __Pyx_XDECREF(__pyx_v_buy_market_conversion_rate);
  __Pyx_XDECREF(__pyx_v_sell_market_conversion_rate);
  __Pyx_XDECREF(__pyx_v_profitable_orders);
  __Pyx_XDECREF(__pyx_v_bid_price_adjusted);
  __Pyx_XDECREF(__pyx_v_ask_price_adjusted);
  __Pyx_XDECREF(__pyx_v_amount);
  __Pyx_XDECREF(__pyx_v_buy_market_adjusted_order_size);
  __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_b_price_adjusted);
  __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_a_price_adjusted);
  __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_b_price);
  __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_a_price);
  __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_amount);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":614
 *     # The following exposed Python functions are meant for unit tests
 *     # ---------------------------------------------------------------
 *     def find_best_profitable_amount(self, buy_market: MarketTradingPairTuple, sell_market: MarketTradingPairTuple):             # <<<<<<<<<<<<<<
 *         return self.c_find_best_profitable_amount(buy_market, sell_market)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_19find_best_profitable_amount(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_19find_best_profitable_amount = {"find_best_profitable_amount", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_19find_best_profitable_amount, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_19find_best_profitable_amount(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_buy_market = 0;
  PyObject *__pyx_v_sell_market = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("find_best_profitable_amount (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buy_market,&__pyx_n_s_sell_market,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_buy_market,&__pyx_n_s_sell_market,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_buy_market)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 614, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_sell_market)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 614, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("find_best_profitable_amount", 1, 2, 2, 1); __PYX_ERR(0, 614, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "find_best_profitable_amount") < 0)) __PYX_ERR(0, 614, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_buy_market = values[0];
    __pyx_v_sell_market = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("find_best_profitable_amount", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 614, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.find_best_profitable_amount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_18find_best_profitable_amount(((struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self), __pyx_v_buy_market, __pyx_v_sell_market);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_18find_best_profitable_amount(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_buy_market, PyObject *__pyx_v_sell_market) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("find_best_profitable_amount", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":615
 *     # ---------------------------------------------------------------
 *     def find_best_profitable_amount(self, buy_market: MarketTradingPairTuple, sell_market: MarketTradingPairTuple):
 *         return self.c_find_best_profitable_amount(buy_market, sell_market)             # <<<<<<<<<<<<<<
 * 
 *     def ready_for_new_orders(self, market_pair):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_find_best_profitable_amount(__pyx_v_self, __pyx_v_buy_market, __pyx_v_sell_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 615, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":614
 *     # The following exposed Python functions are meant for unit tests
 *     # ---------------------------------------------------------------
 *     def find_best_profitable_amount(self, buy_market: MarketTradingPairTuple, sell_market: MarketTradingPairTuple):             # <<<<<<<<<<<<<<
 *         return self.c_find_best_profitable_amount(buy_market, sell_market)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.find_best_profitable_amount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":617
 *         return self.c_find_best_profitable_amount(buy_market, sell_market)
 * 
 *     def ready_for_new_orders(self, market_pair):             # <<<<<<<<<<<<<<
 *         return self.c_ready_for_new_orders(market_pair)
 *     # ---------------------------------------------------------------
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_21ready_for_new_orders(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_21ready_for_new_orders = {"ready_for_new_orders", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_21ready_for_new_orders, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_21ready_for_new_orders(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_market_pair = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ready_for_new_orders (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pair,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pair,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_market_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 617, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "ready_for_new_orders") < 0)) __PYX_ERR(0, 617, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_market_pair = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("ready_for_new_orders", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 617, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.ready_for_new_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_20ready_for_new_orders(((struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self), __pyx_v_market_pair);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_20ready_for_new_orders(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ready_for_new_orders", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":618
 * 
 *     def ready_for_new_orders(self, market_pair):
 *         return self.c_ready_for_new_orders(market_pair)             # <<<<<<<<<<<<<<
 *     # ---------------------------------------------------------------
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyList_CheckExact(__pyx_v_market_pair))||((__pyx_v_market_pair) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_v_market_pair))) __PYX_ERR(0, 618, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_ready_for_new_orders(__pyx_v_self, ((PyObject*)__pyx_v_market_pair))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 618, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":617
 *         return self.c_find_best_profitable_amount(buy_market, sell_market)
 * 
 *     def ready_for_new_orders(self, market_pair):             # <<<<<<<<<<<<<<
 *         return self.c_ready_for_new_orders(market_pair)
 *     # ---------------------------------------------------------------
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.ready_for_new_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_23__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_23__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_23__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_23__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_22__reduce_cython__(((struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_22__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__events_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_25__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_25__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_25__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_25__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_24__setstate_cython__(((struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_24__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__events_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/arbitrage/arbitrage.pyx":622
 * 
 * 
 * cdef list c_find_profitable_arbitrage_orders(object min_profitability,             # <<<<<<<<<<<<<<
 *                                              object buy_market_trading_pair_tuple,
 *                                              object sell_market_trading_pair_tuple,
 */

static PyObject *__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_c_find_profitable_arbitrage_orders(PyObject *__pyx_v_min_profitability, PyObject *__pyx_v_buy_market_trading_pair_tuple, PyObject *__pyx_v_sell_market_trading_pair_tuple, PyObject *__pyx_v_buy_market_conversion_rate, PyObject *__pyx_v_sell_market_conversion_rate) {
  PyObject *__pyx_v_step_amount = 0;
  PyObject *__pyx_v_bid_leftover_amount = 0;
  PyObject *__pyx_v_ask_leftover_amount = 0;
  PyObject *__pyx_v_current_bid = 0;
  PyObject *__pyx_v_current_ask = 0;
  PyObject *__pyx_v_current_bid_price_adjusted = 0;
  PyObject *__pyx_v_current_ask_price_adjusted = 0;
  CYTHON_UNUSED PyObject *__pyx_v_sell_market_quote_asset = 0;
  CYTHON_UNUSED PyObject *__pyx_v_buy_market_quote_asset = 0;
  PyObject *__pyx_v_profitable_orders = NULL;
  PyObject *__pyx_v_bid_it = NULL;
  PyObject *__pyx_v_ask_it = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_find_profitable_arbitrage_orders", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":641
 *     """
 *     cdef:
 *         object step_amount = s_decimal_0             # <<<<<<<<<<<<<<
 *         object bid_leftover_amount = s_decimal_0
 *         object ask_leftover_amount = s_decimal_0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_step_amount = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":642
 *     cdef:
 *         object step_amount = s_decimal_0
 *         object bid_leftover_amount = s_decimal_0             # <<<<<<<<<<<<<<
 *         object ask_leftover_amount = s_decimal_0
 *         object current_bid = None
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_bid_leftover_amount = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":643
 *         object step_amount = s_decimal_0
 *         object bid_leftover_amount = s_decimal_0
 *         object ask_leftover_amount = s_decimal_0             # <<<<<<<<<<<<<<
 *         object current_bid = None
 *         object current_ask = None
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ask_leftover_amount = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":644
 *         object bid_leftover_amount = s_decimal_0
 *         object ask_leftover_amount = s_decimal_0
 *         object current_bid = None             # <<<<<<<<<<<<<<
 *         object current_ask = None
 *         object current_bid_price_adjusted
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_current_bid = Py_None;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":645
 *         object ask_leftover_amount = s_decimal_0
 *         object current_bid = None
 *         object current_ask = None             # <<<<<<<<<<<<<<
 *         object current_bid_price_adjusted
 *         object current_ask_price_adjusted
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_current_ask = Py_None;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":648
 *         object current_bid_price_adjusted
 *         object current_ask_price_adjusted
 *         str sell_market_quote_asset = sell_market_trading_pair_tuple.quote_asset             # <<<<<<<<<<<<<<
 *         str buy_market_quote_asset = buy_market_trading_pair_tuple.quote_asset
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_market_trading_pair_tuple, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 648, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 648, __pyx_L1_error)
  __pyx_v_sell_market_quote_asset = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":649
 *         object current_ask_price_adjusted
 *         str sell_market_quote_asset = sell_market_trading_pair_tuple.quote_asset
 *         str buy_market_quote_asset = buy_market_trading_pair_tuple.quote_asset             # <<<<<<<<<<<<<<
 * 
 *     profitable_orders = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_market_trading_pair_tuple, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 649, __pyx_L1_error)
  __pyx_v_buy_market_quote_asset = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":651
 *         str buy_market_quote_asset = buy_market_trading_pair_tuple.quote_asset
 * 
 *     profitable_orders = []             # <<<<<<<<<<<<<<
 *     bid_it = sell_market_trading_pair_tuple.order_book_bid_entries()
 *     ask_it = buy_market_trading_pair_tuple.order_book_ask_entries()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 651, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_profitable_orders = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":652
 * 
 *     profitable_orders = []
 *     bid_it = sell_market_trading_pair_tuple.order_book_bid_entries()             # <<<<<<<<<<<<<<
 *     ask_it = buy_market_trading_pair_tuple.order_book_ask_entries()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell_market_trading_pair_tuple, __pyx_n_s_order_book_bid_entries); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_bid_it = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":653
 *     profitable_orders = []
 *     bid_it = sell_market_trading_pair_tuple.order_book_bid_entries()
 *     ask_it = buy_market_trading_pair_tuple.order_book_ask_entries()             # <<<<<<<<<<<<<<
 * 
 *     try:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_market_trading_pair_tuple, __pyx_n_s_order_book_ask_entries); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 653, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_ask_it = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":655
 *     ask_it = buy_market_trading_pair_tuple.order_book_ask_entries()
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         while True:
 *             if bid_leftover_amount == 0 and ask_leftover_amount == 0:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":656
 * 
 *     try:
 *         while True:             # <<<<<<<<<<<<<<
 *             if bid_leftover_amount == 0 and ask_leftover_amount == 0:
 *                 # both current ask and bid orders are filled, advance to the next bid and ask order
 */
      while (1) {

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":657
 *     try:
 *         while True:
 *             if bid_leftover_amount == 0 and ask_leftover_amount == 0:             # <<<<<<<<<<<<<<
 *                 # both current ask and bid orders are filled, advance to the next bid and ask order
 *                 current_bid = next(bid_it)
 */
        __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_bid_leftover_amount, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 657, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 657, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_9) {
        } else {
          __pyx_t_8 = __pyx_t_9;
          goto __pyx_L12_bool_binop_done;
        }
        __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_ask_leftover_amount, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 657, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 657, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_8 = __pyx_t_9;
        __pyx_L12_bool_binop_done:;
        if (__pyx_t_8) {

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":659
 *             if bid_leftover_amount == 0 and ask_leftover_amount == 0:
 *                 # both current ask and bid orders are filled, advance to the next bid and ask order
 *                 current_bid = next(bid_it)             # <<<<<<<<<<<<<<
 *                 current_ask = next(ask_it)
 *                 ask_leftover_amount = current_ask.amount
 */
          __pyx_t_1 = __Pyx_PyIter_Next(__pyx_v_bid_it); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 659, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF_SET(__pyx_v_current_bid, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":660
 *                 # both current ask and bid orders are filled, advance to the next bid and ask order
 *                 current_bid = next(bid_it)
 *                 current_ask = next(ask_it)             # <<<<<<<<<<<<<<
 *                 ask_leftover_amount = current_ask.amount
 *                 bid_leftover_amount = current_bid.amount
 */
          __pyx_t_1 = __Pyx_PyIter_Next(__pyx_v_ask_it); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF_SET(__pyx_v_current_ask, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":661
 *                 current_bid = next(bid_it)
 *                 current_ask = next(ask_it)
 *                 ask_leftover_amount = current_ask.amount             # <<<<<<<<<<<<<<
 *                 bid_leftover_amount = current_bid.amount
 * 
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_current_ask, __pyx_n_s_amount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 661, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF_SET(__pyx_v_ask_leftover_amount, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":662
 *                 current_ask = next(ask_it)
 *                 ask_leftover_amount = current_ask.amount
 *                 bid_leftover_amount = current_bid.amount             # <<<<<<<<<<<<<<
 * 
 *             elif bid_leftover_amount > 0 and ask_leftover_amount == 0:
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_current_bid, __pyx_n_s_amount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 662, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF_SET(__pyx_v_bid_leftover_amount, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":657
 *     try:
 *         while True:
 *             if bid_leftover_amount == 0 and ask_leftover_amount == 0:             # <<<<<<<<<<<<<<
 *                 # both current ask and bid orders are filled, advance to the next bid and ask order
 *                 current_bid = next(bid_it)
 */
          goto __pyx_L11;
        }

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":664
 *                 bid_leftover_amount = current_bid.amount
 * 
 *             elif bid_leftover_amount > 0 and ask_leftover_amount == 0:             # <<<<<<<<<<<<<<
 *                 # current ask order filled completely, advance to the next ask order
 *                 current_ask = next(ask_it)
 */
        __pyx_t_1 = PyObject_RichCompare(__pyx_v_bid_leftover_amount, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 664, __pyx_L3_error)
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 664, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_9) {
        } else {
          __pyx_t_8 = __pyx_t_9;
          goto __pyx_L14_bool_binop_done;
        }
        __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_ask_leftover_amount, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 664, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 664, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_8 = __pyx_t_9;
        __pyx_L14_bool_binop_done:;
        if (__pyx_t_8) {

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":666
 *             elif bid_leftover_amount > 0 and ask_leftover_amount == 0:
 *                 # current ask order filled completely, advance to the next ask order
 *                 current_ask = next(ask_it)             # <<<<<<<<<<<<<<
 *                 ask_leftover_amount = current_ask.amount
 * 
 */
          __pyx_t_1 = __Pyx_PyIter_Next(__pyx_v_ask_it); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 666, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF_SET(__pyx_v_current_ask, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":667
 *                 # current ask order filled completely, advance to the next ask order
 *                 current_ask = next(ask_it)
 *                 ask_leftover_amount = current_ask.amount             # <<<<<<<<<<<<<<
 * 
 *             elif ask_leftover_amount > 0 and bid_leftover_amount == 0:
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_current_ask, __pyx_n_s_amount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 667, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF_SET(__pyx_v_ask_leftover_amount, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":664
 *                 bid_leftover_amount = current_bid.amount
 * 
 *             elif bid_leftover_amount > 0 and ask_leftover_amount == 0:             # <<<<<<<<<<<<<<
 *                 # current ask order filled completely, advance to the next ask order
 *                 current_ask = next(ask_it)
 */
          goto __pyx_L11;
        }

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":669
 *                 ask_leftover_amount = current_ask.amount
 * 
 *             elif ask_leftover_amount > 0 and bid_leftover_amount == 0:             # <<<<<<<<<<<<<<
 *                 # current bid order filled completely, advance to the next bid order
 *                 current_bid = next(bid_it)
 */
        __pyx_t_1 = PyObject_RichCompare(__pyx_v_ask_leftover_amount, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 669, __pyx_L3_error)
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 669, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_9) {
        } else {
          __pyx_t_8 = __pyx_t_9;
          goto __pyx_L16_bool_binop_done;
        }
        __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_bid_leftover_amount, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 669, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 669, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_8 = __pyx_t_9;
        __pyx_L16_bool_binop_done:;
        if (__pyx_t_8) {

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":671
 *             elif ask_leftover_amount > 0 and bid_leftover_amount == 0:
 *                 # current bid order filled completely, advance to the next bid order
 *                 current_bid = next(bid_it)             # <<<<<<<<<<<<<<
 *                 bid_leftover_amount = current_bid.amount
 * 
 */
          __pyx_t_1 = __Pyx_PyIter_Next(__pyx_v_bid_it); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 671, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF_SET(__pyx_v_current_bid, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":672
 *                 # current bid order filled completely, advance to the next bid order
 *                 current_bid = next(bid_it)
 *                 bid_leftover_amount = current_bid.amount             # <<<<<<<<<<<<<<
 * 
 *             elif bid_leftover_amount > 0 and ask_leftover_amount > 0:
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_current_bid, __pyx_n_s_amount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 672, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF_SET(__pyx_v_bid_leftover_amount, __pyx_t_1);
          __pyx_t_1 = 0;

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":669
 *                 ask_leftover_amount = current_ask.amount
 * 
 *             elif ask_leftover_amount > 0 and bid_leftover_amount == 0:             # <<<<<<<<<<<<<<
 *                 # current bid order filled completely, advance to the next bid order
 *                 current_bid = next(bid_it)
 */
          goto __pyx_L11;
        }

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":674
 *                 bid_leftover_amount = current_bid.amount
 * 
 *             elif bid_leftover_amount > 0 and ask_leftover_amount > 0:             # <<<<<<<<<<<<<<
 *                 # current ask and bid orders are not completely filled, no need to advance iterators
 *                 pass
 */
        __pyx_t_1 = PyObject_RichCompare(__pyx_v_bid_leftover_amount, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 674, __pyx_L3_error)
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 674, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_9) {
        } else {
          __pyx_t_8 = __pyx_t_9;
          goto __pyx_L18_bool_binop_done;
        }
        __pyx_t_1 = PyObject_RichCompare(__pyx_v_ask_leftover_amount, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 674, __pyx_L3_error)
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 674, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_8 = __pyx_t_9;
        __pyx_L18_bool_binop_done:;
        if (__pyx_t_8) {
          goto __pyx_L11;
        }

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":679
 *             else:
 *                 # something went wrong if leftover amount is negative
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             # adjust price based on the quote token rates
 */
        /*else*/ {
          goto __pyx_L10_break;
        }
        __pyx_L11:;

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":682
 * 
 *             # adjust price based on the quote token rates
 *             current_bid_price_adjusted = current_bid.price * sell_market_conversion_rate             # <<<<<<<<<<<<<<
 *             current_ask_price_adjusted = current_ask.price * buy_market_conversion_rate
 *             # arbitrage not possible
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_current_bid, __pyx_n_s_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 682, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_sell_market_conversion_rate); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 682, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF_SET(__pyx_v_current_bid_price_adjusted, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":683
 *             # adjust price based on the quote token rates
 *             current_bid_price_adjusted = current_bid.price * sell_market_conversion_rate
 *             current_ask_price_adjusted = current_ask.price * buy_market_conversion_rate             # <<<<<<<<<<<<<<
 *             # arbitrage not possible
 *             if current_bid_price_adjusted < current_ask_price_adjusted:
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_current_ask, __pyx_n_s_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 683, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = PyNumber_Multiply(__pyx_t_2, __pyx_v_buy_market_conversion_rate); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 683, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF_SET(__pyx_v_current_ask_price_adjusted, __pyx_t_1);
        __pyx_t_1 = 0;

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":685
 *             current_ask_price_adjusted = current_ask.price * buy_market_conversion_rate
 *             # arbitrage not possible
 *             if current_bid_price_adjusted < current_ask_price_adjusted:             # <<<<<<<<<<<<<<
 *                 break
 *             # allow negative profitability for debugging
 */
        __pyx_t_1 = PyObject_RichCompare(__pyx_v_current_bid_price_adjusted, __pyx_v_current_ask_price_adjusted, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 685, __pyx_L3_error)
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 685, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_8) {

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":686
 *             # arbitrage not possible
 *             if current_bid_price_adjusted < current_ask_price_adjusted:
 *                 break             # <<<<<<<<<<<<<<
 *             # allow negative profitability for debugging
 *             if min_profitability<0 and current_bid_price_adjusted/current_ask_price_adjusted < (1 + min_profitability):
 */
          goto __pyx_L10_break;

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":685
 *             current_ask_price_adjusted = current_ask.price * buy_market_conversion_rate
 *             # arbitrage not possible
 *             if current_bid_price_adjusted < current_ask_price_adjusted:             # <<<<<<<<<<<<<<
 *                 break
 *             # allow negative profitability for debugging
 */
        }

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":688
 *                 break
 *             # allow negative profitability for debugging
 *             if min_profitability<0 and current_bid_price_adjusted/current_ask_price_adjusted < (1 + min_profitability):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        __pyx_t_1 = PyObject_RichCompare(__pyx_v_min_profitability, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L3_error)
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 688, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (__pyx_t_9) {
        } else {
          __pyx_t_8 = __pyx_t_9;
          goto __pyx_L22_bool_binop_done;
        }
        __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_current_bid_price_adjusted, __pyx_v_current_ask_price_adjusted); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 688, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_2 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_v_min_profitability, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 688, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 688, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 688, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_8 = __pyx_t_9;
        __pyx_L22_bool_binop_done:;
        if (__pyx_t_8) {

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":689
 *             # allow negative profitability for debugging
 *             if min_profitability<0 and current_bid_price_adjusted/current_ask_price_adjusted < (1 + min_profitability):
 *                 break             # <<<<<<<<<<<<<<
 * 
 *             step_amount = min(bid_leftover_amount, ask_leftover_amount)
 */
          goto __pyx_L10_break;

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":688
 *                 break
 *             # allow negative profitability for debugging
 *             if min_profitability<0 and current_bid_price_adjusted/current_ask_price_adjusted < (1 + min_profitability):             # <<<<<<<<<<<<<<
 *                 break
 * 
 */
        }

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":691
 *                 break
 * 
 *             step_amount = min(bid_leftover_amount, ask_leftover_amount)             # <<<<<<<<<<<<<<
 * 
 *             # skip cases where step_amount=0 for exchanges like binance that include orders with 0 amount
 */
        __Pyx_INCREF(__pyx_v_ask_leftover_amount);
        __pyx_t_3 = __pyx_v_ask_leftover_amount;
        __Pyx_INCREF(__pyx_v_bid_leftover_amount);
        __pyx_t_2 = __pyx_v_bid_leftover_amount;
        __pyx_t_10 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_10); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 691, __pyx_L3_error)
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 691, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (__pyx_t_8) {
          __Pyx_INCREF(__pyx_t_3);
          __pyx_t_1 = __pyx_t_3;
        } else {
          __Pyx_INCREF(__pyx_t_2);
          __pyx_t_1 = __pyx_t_2;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __pyx_t_1;
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF_SET(__pyx_v_step_amount, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":694
 * 
 *             # skip cases where step_amount=0 for exchanges like binance that include orders with 0 amount
 *             if step_amount == 0:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
        __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_step_amount, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 694, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 694, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__pyx_t_8) {

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":695
 *             # skip cases where step_amount=0 for exchanges like binance that include orders with 0 amount
 *             if step_amount == 0:
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             profitable_orders.append((current_bid_price_adjusted,
 */
          goto __pyx_L9_continue;

          /* "hummingbot/strategy/arbitrage/arbitrage.pyx":694
 * 
 *             # skip cases where step_amount=0 for exchanges like binance that include orders with 0 amount
 *             if step_amount == 0:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
        }

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":699
 *             profitable_orders.append((current_bid_price_adjusted,
 *                                       current_ask_price_adjusted,
 *                                       current_bid.price,             # <<<<<<<<<<<<<<
 *                                       current_ask.price,
 *                                       step_amount))
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_current_bid, __pyx_n_s_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 699, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_3);

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":700
 *                                       current_ask_price_adjusted,
 *                                       current_bid.price,
 *                                       current_ask.price,             # <<<<<<<<<<<<<<
 *                                       step_amount))
 * 
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_current_ask, __pyx_n_s_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 700, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":697
 *                 continue
 * 
 *             profitable_orders.append((current_bid_price_adjusted,             # <<<<<<<<<<<<<<
 *                                       current_ask_price_adjusted,
 *                                       current_bid.price,
 */
        __pyx_t_2 = PyTuple_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 697, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_INCREF(__pyx_v_current_bid_price_adjusted);
        __Pyx_GIVEREF(__pyx_v_current_bid_price_adjusted);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_current_bid_price_adjusted);
        __Pyx_INCREF(__pyx_v_current_ask_price_adjusted);
        __Pyx_GIVEREF(__pyx_v_current_ask_price_adjusted);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_current_ask_price_adjusted);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_1);
        __Pyx_INCREF(__pyx_v_step_amount);
        __Pyx_GIVEREF(__pyx_v_step_amount);
        PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_v_step_amount);
        __pyx_t_3 = 0;
        __pyx_t_1 = 0;
        __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_profitable_orders, __pyx_t_2); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 697, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":703
 *                                       step_amount))
 * 
 *             ask_leftover_amount -= step_amount             # <<<<<<<<<<<<<<
 *             bid_leftover_amount -= step_amount
 * 
 */
        __pyx_t_2 = PyNumber_InPlaceSubtract(__pyx_v_ask_leftover_amount, __pyx_v_step_amount); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 703, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF_SET(__pyx_v_ask_leftover_amount, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "hummingbot/strategy/arbitrage/arbitrage.pyx":704
 * 
 *             ask_leftover_amount -= step_amount
 *             bid_leftover_amount -= step_amount             # <<<<<<<<<<<<<<
 * 
 *     except StopIteration:
 */
        __pyx_t_2 = PyNumber_InPlaceSubtract(__pyx_v_bid_leftover_amount, __pyx_v_step_amount); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 704, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF_SET(__pyx_v_bid_leftover_amount, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_L9_continue:;
      }
      __pyx_L10_break:;

      /* "hummingbot/strategy/arbitrage/arbitrage.pyx":655
 *     ask_it = buy_market_trading_pair_tuple.order_book_ask_entries()
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         while True:
 *             if bid_leftover_amount == 0 and ask_leftover_amount == 0:
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":706
 *             bid_leftover_amount -= step_amount
 * 
 *     except StopIteration:             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
    if (__pyx_t_4) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "hummingbot/strategy/arbitrage/arbitrage.pyx":655
 *     ask_it = buy_market_trading_pair_tuple.order_book_ask_entries()
 * 
 *     try:             # <<<<<<<<<<<<<<
 *         while True:
 *             if bid_leftover_amount == 0 and ask_leftover_amount == 0:
 */
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    __pyx_L8_try_end:;
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":709
 *         pass
 * 
 *     return profitable_orders             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_profitable_orders);
  __pyx_r = __pyx_v_profitable_orders;
  goto __pyx_L0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":622
 * 
 * 
 * cdef list c_find_profitable_arbitrage_orders(object min_profitability,             # <<<<<<<<<<<<<<
 *                                              object buy_market_trading_pair_tuple,
 *                                              object sell_market_trading_pair_tuple,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.strategy.arbitrage.arbitrage.c_find_profitable_arbitrage_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_step_amount);
  __Pyx_XDECREF(__pyx_v_bid_leftover_amount);
  __Pyx_XDECREF(__pyx_v_ask_leftover_amount);
  __Pyx_XDECREF(__pyx_v_current_bid);
  __Pyx_XDECREF(__pyx_v_current_ask);
  __Pyx_XDECREF(__pyx_v_current_bid_price_adjusted);
  __Pyx_XDECREF(__pyx_v_current_ask_price_adjusted);
  __Pyx_XDECREF(__pyx_v_sell_market_quote_asset);
  __Pyx_XDECREF(__pyx_v_buy_market_quote_asset);
  __Pyx_XDECREF(__pyx_v_profitable_orders);
  __Pyx_XDECREF(__pyx_v_bid_it);
  __Pyx_XDECREF(__pyx_v_ask_it);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":246
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self) {
  PyObject *__pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":249
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 *             return PyArray_BASE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_BASE(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":246
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":252
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self) {
  PyArray_Descr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyArray_Descr *__pyx_t_1;
  __Pyx_RefNannySetupContext("descr", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":255
 *             """Returns an owned reference to the dtype of the array.
 *             """
 *             return <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = PyArray_DESCR(__pyx_v_self);
  __Pyx_INCREF((PyObject *)((PyArray_Descr *)__pyx_t_1));
  __pyx_r = ((PyArray_Descr *)__pyx_t_1);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":252
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":258
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self) {
  int __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":261
 *             """Returns the number of dimensions in the array.
 *             """
 *             return PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":258
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":264
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":269
 *             Can return NULL for 0-dimensional arrays.
 *             """
 *             return PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":264
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":272
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":276
 *             The number of elements matches the number of dimensions of the array (ndim).
 *             """
 *             return PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_STRIDES(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":272
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":279
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":282
 *             """Returns the total size (in number of elements) of the array.
 *             """
 *             return PyArray_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":279
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":285
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self) {
  char *__pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":291
 *             of `PyArray_DATA()` instead, which returns a 'void*'.
 *             """
 *             return PyArray_BYTES(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef unsigned char      npy_bool
 */
  __pyx_r = PyArray_BYTES(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":285
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":777
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":777
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":780
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":780
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":783
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":784
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":783
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":786
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":787
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":786
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":789
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":790
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":789
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":792
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":793
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":794
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":793
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":796
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":792
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":973
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":974
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":975
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":973
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":977
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":978
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":979
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":980
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":979
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":981
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":977
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":987
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 987, __pyx_L3_error)

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":988
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 988, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":989
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 989, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 989, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":993
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 993, __pyx_L3_error)

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":994
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 994, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 995, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 995, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":999
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 999, __pyx_L3_error)

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1000
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1000, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1001
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1001, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1001, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1004
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1016
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1004
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1019
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1031
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1019
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1034
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1041
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1034
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1044
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1048
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1044
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1051
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1055
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1051
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}
static struct __pyx_vtabstruct_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy __pyx_vtable_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *p;
  #if CYTHON_COMPILING_IN_LIMITED_API
  newfunc new_func = (newfunc)PyType_GetSlot(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase, Py_tp_new);
  PyObject *o = new_func(t, a, k);
  #else
  PyObject *o = __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_new(t, a, k);
  #endif
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub*)__pyx_vtabptr_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy;
  p->_market_pairs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_order_id_to_market = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_min_profitability = Py_None; Py_INCREF(Py_None);
  p->_max_order_size = Py_None; Py_INCREF(Py_None);
  p->_min_order_size = Py_None; Py_INCREF(Py_None);
  p->_last_trade_timestamps = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_sell_markets = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_buy_markets = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_exchange_rate_conversion = Py_None; Py_INCREF(Py_None);
  p->_secondary_to_primary_base_conversion_rate = Py_None; Py_INCREF(Py_None);
  p->_secondary_to_primary_quote_conversion_rate = Py_None; Py_INCREF(Py_None);
  p->_current_profitability = ((PyObject*)Py_None); Py_INCREF(Py_None);
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy(PyObject *o) {
  struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *p = (struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_market_pairs);
  Py_CLEAR(p->_order_id_to_market);
  Py_CLEAR(p->_min_profitability);
  Py_CLEAR(p->_max_order_size);
  Py_CLEAR(p->_min_order_size);
  Py_CLEAR(p->_last_trade_timestamps);
  Py_CLEAR(p->_sell_markets);
  Py_CLEAR(p->_buy_markets);
  Py_CLEAR(p->_exchange_rate_conversion);
  Py_CLEAR(p->_secondary_to_primary_base_conversion_rate);
  Py_CLEAR(p->_secondary_to_primary_quote_conversion_rate);
  Py_CLEAR(p->_current_profitability);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase)) __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);
}
#endif

static int __pyx_tp_traverse_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *p = (struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)o;
  e = ((likely(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase)) ? ((__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_traverse) ? __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy)); if (e) return e;
  if (p->_market_pairs) {
    e = (*v)(p->_market_pairs, a); if (e) return e;
  }
  if (p->_order_id_to_market) {
    e = (*v)(p->_order_id_to_market, a); if (e) return e;
  }
  if (p->_min_profitability) {
    e = (*v)(p->_min_profitability, a); if (e) return e;
  }
  if (p->_max_order_size) {
    e = (*v)(p->_max_order_size, a); if (e) return e;
  }
  if (p->_min_order_size) {
    e = (*v)(p->_min_order_size, a); if (e) return e;
  }
  if (p->_last_trade_timestamps) {
    e = (*v)(p->_last_trade_timestamps, a); if (e) return e;
  }
  if (p->_sell_markets) {
    e = (*v)(p->_sell_markets, a); if (e) return e;
  }
  if (p->_buy_markets) {
    e = (*v)(p->_buy_markets, a); if (e) return e;
  }
  if (p->_exchange_rate_conversion) {
    e = (*v)(p->_exchange_rate_conversion, a); if (e) return e;
  }
  if (p->_secondary_to_primary_base_conversion_rate) {
    e = (*v)(p->_secondary_to_primary_base_conversion_rate, a); if (e) return e;
  }
  if (p->_secondary_to_primary_quote_conversion_rate) {
    e = (*v)(p->_secondary_to_primary_quote_conversion_rate, a); if (e) return e;
  }
  if (p->_current_profitability) {
    e = (*v)(p->_current_profitability, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *p = (struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *)o;
  if (likely(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase)) { if (__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_clear) __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);
  tmp = ((PyObject*)p->_market_pairs);
  p->_market_pairs = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_order_id_to_market);
  p->_order_id_to_market = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_min_profitability);
  p->_min_profitability = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_max_order_size);
  p->_max_order_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_min_order_size);
  p->_min_order_size = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_last_trade_timestamps);
  p->_last_trade_timestamps = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_sell_markets);
  p->_sell_markets = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_buy_markets);
  p->_buy_markets = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_exchange_rate_conversion);
  p->_exchange_rate_conversion = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_secondary_to_primary_base_conversion_rate);
  p->_secondary_to_primary_base_conversion_rate = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_secondary_to_primary_quote_conversion_rate);
  p->_secondary_to_primary_quote_conversion_rate = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_current_profitability);
  p->_current_profitability = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_min_profitability(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_17min_profitability_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_use_oracle_conversion_rate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_26use_oracle_conversion_rate_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_tracked_limit_orders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_20tracked_limit_orders_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_tracked_market_orders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_21tracked_market_orders_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_tracked_limit_orders_data_frame(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_31tracked_limit_orders_data_frame_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_tracked_market_orders_data_frame(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_32tracked_market_orders_data_frame_1__get__(o);
}

static PyMethodDef __pyx_methods_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy[] = {
  {"logger", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_1logger, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"init_params", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_3init_params, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_2init_params},
  {"get_second_to_first_conversion_rate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_5get_second_to_first_conversion_rate, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_4get_second_to_first_conversion_rate},
  {"log_conversion_rates", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_7log_conversion_rates, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"oracle_status_df", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_9oracle_status_df, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"format_status", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_11format_status, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"notify_hb_app", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_13notify_hb_app, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"find_profitable_arbitrage_orders", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_15find_profitable_arbitrage_orders, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"market_conversion_rate", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_17market_conversion_rate, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"find_best_profitable_amount", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_19find_best_profitable_amount, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"ready_for_new_orders", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_21ready_for_new_orders, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_23__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_25__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy[] = {
  {(char *)"min_profitability", __pyx_getprop_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_min_profitability, 0, (char *)0, 0},
  {(char *)"use_oracle_conversion_rate", __pyx_getprop_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_use_oracle_conversion_rate, 0, (char *)0, 0},
  {(char *)"tracked_limit_orders", __pyx_getprop_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_tracked_limit_orders, 0, (char *)0, 0},
  {(char *)"tracked_market_orders", __pyx_getprop_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_tracked_market_orders, 0, (char *)0, 0},
  {(char *)"tracked_limit_orders_data_frame", __pyx_getprop_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_tracked_limit_orders_data_frame, 0, (char *)0, 0},
  {(char *)"tracked_market_orders_data_frame", __pyx_getprop_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_tracked_market_orders_data_frame, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy},
  {Py_tp_methods, (void *)__pyx_methods_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy},
  {Py_tp_getset, (void *)__pyx_getsets_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy_spec = {
  "hummingbot.strategy.arbitrage.arbitrage.ArbitrageStrategy",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.arbitrage.arbitrage.""ArbitrageStrategy", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  #if CYTHON_COMPILING_IN_LIMITED_API
  {0, __pyx_k_1, sizeof(__pyx_k_1), 0, 1, 0, 0},
  {0, __pyx_k_8f, sizeof(__pyx_k_8f), 0, 1, 0, 0},
  {0, __pyx_k_ArbitrageMarketPair, sizeof(__pyx_k_ArbitrageMarketPair), 0, 0, 1, 1},
  {0, __pyx_k_ArbitrageStrategy, sizeof(__pyx_k_ArbitrageStrategy), 0, 0, 1, 1},
  {0, __pyx_k_ArbitrageStrategy___reduce_cytho, sizeof(__pyx_k_ArbitrageStrategy___reduce_cytho), 0, 0, 1, 1},
  {0, __pyx_k_ArbitrageStrategy___setstate_cyt, sizeof(__pyx_k_ArbitrageStrategy___setstate_cyt), 0, 0, 1, 1},
  {0, __pyx_k_ArbitrageStrategy_find_best_prof, sizeof(__pyx_k_ArbitrageStrategy_find_best_prof), 0, 0, 1, 1},
  {0, __pyx_k_ArbitrageStrategy_find_profitabl, sizeof(__pyx_k_ArbitrageStrategy_find_profitabl), 0, 0, 1, 1},
  {0, __pyx_k_ArbitrageStrategy_format_status, sizeof(__pyx_k_ArbitrageStrategy_format_status), 0, 0, 1, 1},
  {0, __pyx_k_ArbitrageStrategy_get_second_to, sizeof(__pyx_k_ArbitrageStrategy_get_second_to), 0, 0, 1, 1},
  {0, __pyx_k_ArbitrageStrategy_init_params, sizeof(__pyx_k_ArbitrageStrategy_init_params), 0, 0, 1, 1},
  {0, __pyx_k_ArbitrageStrategy_log_conversion, sizeof(__pyx_k_ArbitrageStrategy_log_conversion), 0, 0, 1, 1},
  {0, __pyx_k_ArbitrageStrategy_logger, sizeof(__pyx_k_ArbitrageStrategy_logger), 0, 0, 1, 1},
  {0, __pyx_k_ArbitrageStrategy_market_convers, sizeof(__pyx_k_ArbitrageStrategy_market_convers), 0, 0, 1, 1},
  {0, __pyx_k_ArbitrageStrategy_notify_hb_app, sizeof(__pyx_k_ArbitrageStrategy_notify_hb_app), 0, 0, 1, 1},
  {0, __pyx_k_ArbitrageStrategy_oracle_status, sizeof(__pyx_k_ArbitrageStrategy_oracle_status), 0, 0, 1, 1},
  {0, __pyx_k_ArbitrageStrategy_ready_for_new, sizeof(__pyx_k_ArbitrageStrategy_ready_for_new), 0, 0, 1, 1},
  {0, __pyx_k_Assets, sizeof(__pyx_k_Assets), 0, 1, 0, 0},
  {0, __pyx_k_BUY, sizeof(__pyx_k_BUY), 0, 0, 1, 1},
  {0, __pyx_k_Base_asset_available_balance, sizeof(__pyx_k_Base_asset_available_balance), 0, 1, 0, 0},
  {0, __pyx_k_Base_asset_needed, sizeof(__pyx_k_Base_asset_needed), 0, 1, 0, 0},
  {0, __pyx_k_CONNECTED, sizeof(__pyx_k_CONNECTED), 0, 0, 1, 1},
  {0, __pyx_k_Cool_off_completed_Arbitrage_str, sizeof(__pyx_k_Cool_off_completed_Arbitrage_str), 0, 1, 0, 0},
  {0, __pyx_k_Cooling_off_from_previous_trade, sizeof(__pyx_k_Cooling_off_from_previous_trade), 0, 1, 0, 0},
  {0, __pyx_k_Current_step_profitability, sizeof(__pyx_k_Current_step_profitability), 0, 1, 0, 0},
  {0, __pyx_k_DEBUG, sizeof(__pyx_k_DEBUG), 0, 0, 1, 1},
  {0, __pyx_k_DataFrame, sizeof(__pyx_k_DataFrame), 0, 0, 1, 1},
  {0, __pyx_k_Decimal, sizeof(__pyx_k_Decimal), 0, 0, 1, 1},
  {0, __pyx_k_ExchangeBase, sizeof(__pyx_k_ExchangeBase), 0, 0, 1, 1},
  {0, __pyx_k_Executing_limit_order_buy_of, sizeof(__pyx_k_Executing_limit_order_buy_of), 0, 1, 0, 0},
  {0, __pyx_k_INFO, sizeof(__pyx_k_INFO), 0, 0, 1, 1},
  {0, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {0, __pyx_k_LimitOrder, sizeof(__pyx_k_LimitOrder), 0, 0, 1, 1},
  {0, __pyx_k_Limit_order_completed_on, sizeof(__pyx_k_Limit_order_completed_on), 0, 1, 0, 0},
  {0, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {0, __pyx_k_List_ArbitrageMarketPair, sizeof(__pyx_k_List_ArbitrageMarketPair), 0, 0, 1, 0},
  {0, __pyx_k_MarketOrder, sizeof(__pyx_k_MarketOrder), 0, 0, 1, 1},
  {0, __pyx_k_MarketTradingPairTuple, sizeof(__pyx_k_MarketTradingPairTuple), 0, 0, 1, 1},
  {0, __pyx_k_Market_order_canceled_on, sizeof(__pyx_k_Market_order_canceled_on), 0, 1, 0, 0},
  {0, __pyx_k_Markets, sizeof(__pyx_k_Markets), 0, 1, 0, 0},
  {0, __pyx_k_Markets_are_not_all_online_No_ar, sizeof(__pyx_k_Markets_are_not_all_online_No_ar), 0, 1, 0, 0},
  {0, __pyx_k_Markets_are_not_ready_No_arbitra, sizeof(__pyx_k_Markets_are_not_ready_No_arbitra), 0, 1, 0, 0},
  {0, __pyx_k_Markets_are_ready_Trading_starte, sizeof(__pyx_k_Markets_are_ready_Trading_starte), 0, 1, 0, 0},
  {0, __pyx_k_NaN, sizeof(__pyx_k_NaN), 0, 0, 1, 1},
  {0, __pyx_k_NetworkStatus, sizeof(__pyx_k_NetworkStatus), 0, 0, 1, 1},
  {0, __pyx_k_No_pending_limit_orders, sizeof(__pyx_k_No_pending_limit_orders), 0, 1, 0, 0},
  {0, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {0, __pyx_k_Not_enough_asset_to_complete_thi, sizeof(__pyx_k_Not_enough_asset_to_complete_thi), 0, 1, 0, 0},
  {0, __pyx_k_OPTION_LOG_ALL, sizeof(__pyx_k_OPTION_LOG_ALL), 0, 0, 1, 1},
  {0, __pyx_k_OPTION_LOG_CREATE_ORDER, sizeof(__pyx_k_OPTION_LOG_CREATE_ORDER), 0, 0, 1, 1},
  {0, __pyx_k_OPTION_LOG_FULL_PROFITABILITY_ST, sizeof(__pyx_k_OPTION_LOG_FULL_PROFITABILITY_ST), 0, 0, 1, 1},
  {0, __pyx_k_OPTION_LOG_INSUFFICIENT_ASSET, sizeof(__pyx_k_OPTION_LOG_INSUFFICIENT_ASSET), 0, 0, 1, 1},
  {0, __pyx_k_OPTION_LOG_ORDER_COMPLETED, sizeof(__pyx_k_OPTION_LOG_ORDER_COMPLETED), 0, 0, 1, 1},
  {0, __pyx_k_OPTION_LOG_PROFITABILITY_STEP, sizeof(__pyx_k_OPTION_LOG_PROFITABILITY_STEP), 0, 0, 1, 1},
  {0, __pyx_k_OPTION_LOG_STATUS_REPORT, sizeof(__pyx_k_OPTION_LOG_STATUS_REPORT), 0, 0, 1, 1},
  {0, __pyx_k_OrderBook, sizeof(__pyx_k_OrderBook), 0, 0, 1, 1},
  {0, __pyx_k_OrderType, sizeof(__pyx_k_OrderType), 0, 0, 1, 1},
  {0, __pyx_k_Pair, sizeof(__pyx_k_Pair), 0, 1, 0, 1},
  {0, __pyx_k_Pending_limit_orders, sizeof(__pyx_k_Pending_limit_orders), 0, 1, 0, 0},
  {0, __pyx_k_PerformanceMetrics, sizeof(__pyx_k_PerformanceMetrics), 0, 0, 1, 1},
  {0, __pyx_k_Profitability_without_fees, sizeof(__pyx_k_Profitability_without_fees), 0, 1, 0, 0},
  {0, __pyx_k_Quote_asset_available_balance, sizeof(__pyx_k_Quote_asset_available_balance), 0, 1, 0, 0},
  {0, __pyx_k_Rate, sizeof(__pyx_k_Rate), 0, 1, 0, 1},
  {0, __pyx_k_RateOracle, sizeof(__pyx_k_RateOracle), 0, 0, 1, 1},
  {0, __pyx_k_Rate_conversion, sizeof(__pyx_k_Rate_conversion), 0, 1, 0, 0},
  {0, __pyx_k_Resuming_in, sizeof(__pyx_k_Resuming_in), 0, 1, 0, 0},
  {0, __pyx_k_SELL, sizeof(__pyx_k_SELL), 0, 0, 1, 1},
  {0, __pyx_k_Source, sizeof(__pyx_k_Source), 0, 1, 0, 1},
  {0, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase, sizeof(__pyx_k_StrategyBase), 0, 0, 1, 1},
  {0, __pyx_k_Total_profitability_with_fees, sizeof(__pyx_k_Total_profitability_with_fees), 0, 1, 0, 0},
  {0, __pyx_k_TradeType, sizeof(__pyx_k_TradeType), 0, 0, 1, 1},
  {0, __pyx_k_Tuple, sizeof(__pyx_k_Tuple), 0, 0, 1, 1},
  {0, __pyx_k_Tuple_str_Decimal_str_Decimal, sizeof(__pyx_k_Tuple_str_Decimal_str_Decimal), 0, 0, 1, 0},
  {0, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {0, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {0, __pyx_k_WARNINGS, sizeof(__pyx_k_WARNINGS), 0, 1, 0, 0},
  {0, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 0},
  {0, __pyx_k__11, sizeof(__pyx_k__11), 0, 1, 0, 0},
  {0, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 0},
  {0, __pyx_k__13, sizeof(__pyx_k__13), 0, 1, 0, 0},
  {0, __pyx_k__16, sizeof(__pyx_k__16), 0, 0, 1, 1},
  {0, __pyx_k__35, sizeof(__pyx_k__35), 0, 0, 1, 1},
  {0, __pyx_k__46, sizeof(__pyx_k__46), 0, 0, 1, 1},
  {0, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},
  {0, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
  {0, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
  {0, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
  {0, __pyx_k__9, sizeof(__pyx_k__9), 0, 1, 0, 0},
  {0, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {0, __pyx_k_all_markets, sizeof(__pyx_k_all_markets), 0, 0, 1, 1},
  {0, __pyx_k_amount, sizeof(__pyx_k_amount), 0, 0, 1, 1},
  {0, __pyx_k_and_profitability, sizeof(__pyx_k_and_profitability), 0, 1, 0, 0},
  {0, __pyx_k_and_sell_of, sizeof(__pyx_k_and_sell_of), 0, 1, 0, 0},
  {0, __pyx_k_as_logger, sizeof(__pyx_k_as_logger), 0, 0, 1, 1},
  {0, __pyx_k_ask_price, sizeof(__pyx_k_ask_price), 0, 1, 0, 1},
  {0, __pyx_k_ask_price_adjusted, sizeof(__pyx_k_ask_price_adjusted), 0, 1, 0, 1},
  {0, __pyx_k_assets_df, sizeof(__pyx_k_assets_df), 0, 0, 1, 1},
  {0, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {0, __pyx_k_at, sizeof(__pyx_k_at), 0, 1, 0, 0},
  {0, __pyx_k_balance_warning, sizeof(__pyx_k_balance_warning), 0, 0, 1, 1},
  {0, __pyx_k_base_asset, sizeof(__pyx_k_base_asset), 0, 0, 1, 1},
  {0, __pyx_k_base_asset_amount, sizeof(__pyx_k_base_asset_amount), 0, 0, 1, 1},
  {0, __pyx_k_base_pair, sizeof(__pyx_k_base_pair), 0, 0, 1, 1},
  {0, __pyx_k_base_rate, sizeof(__pyx_k_base_rate), 0, 0, 1, 1},
  {0, __pyx_k_base_rate_source, sizeof(__pyx_k_base_rate_source), 0, 0, 1, 1},
  {0, __pyx_k_bid_ask_price_amount, sizeof(__pyx_k_bid_ask_price_amount), 0, 1, 0, 0},
  {0, __pyx_k_bid_price, sizeof(__pyx_k_bid_price), 0, 1, 0, 1},
  {0, __pyx_k_bid_price_adjusted, sizeof(__pyx_k_bid_price_adjusted), 0, 1, 0, 1},
  {0, __pyx_k_bool, sizeof(__pyx_k_bool), 0, 0, 1, 1},
  {0, __pyx_k_buy_limit_order_completed_on, sizeof(__pyx_k_buy_limit_order_completed_on), 0, 1, 0, 0},
  {0, __pyx_k_buy_market, sizeof(__pyx_k_buy_market), 0, 0, 1, 1},
  {0, __pyx_k_buy_market_conversion_rate, sizeof(__pyx_k_buy_market_conversion_rate), 0, 0, 1, 1},
  {0, __pyx_k_buy_market_trading_pair, sizeof(__pyx_k_buy_market_trading_pair), 0, 0, 1, 1},
  {0, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {0, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
  {0, __pyx_k_columns, sizeof(__pyx_k_columns), 0, 0, 1, 1},
  {0, __pyx_k_conversion_rate, sizeof(__pyx_k_conversion_rate), 0, 1, 0, 0},
  {0, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {0, __pyx_k_decimal, sizeof(__pyx_k_decimal), 0, 0, 1, 1},
  {0, __pyx_k_df_limit_lines, sizeof(__pyx_k_df_limit_lines), 0, 0, 1, 1},
  {0, __pyx_k_df_market_lines, sizeof(__pyx_k_df_market_lines), 0, 0, 1, 1},
  {0, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {0, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
  {0, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {0, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
  {0, __pyx_k_failed_order_tolerance, sizeof(__pyx_k_failed_order_tolerance), 0, 0, 1, 1},
  {0, __pyx_k_find_best_profitable_amount, sizeof(__pyx_k_find_best_profitable_amount), 0, 0, 1, 1},
  {0, __pyx_k_find_profitable_arbitrage_orders, sizeof(__pyx_k_find_profitable_arbitrage_orders), 0, 0, 1, 1},
  {0, __pyx_k_first, sizeof(__pyx_k_first), 0, 0, 1, 1},
  {0, __pyx_k_fixed, sizeof(__pyx_k_fixed), 0, 1, 0, 1},
  {0, __pyx_k_flat_fees, sizeof(__pyx_k_flat_fees), 0, 0, 1, 1},
  {0, __pyx_k_float, sizeof(__pyx_k_float), 0, 0, 1, 1},
  {0, __pyx_k_format_status, sizeof(__pyx_k_format_status), 0, 0, 1, 1},
  {0, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
  {0, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {0, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {0, __pyx_k_get_instance, sizeof(__pyx_k_get_instance), 0, 0, 1, 1},
  {0, __pyx_k_get_price, sizeof(__pyx_k_get_price), 0, 0, 1, 1},
  {0, __pyx_k_get_second_to_first_conversion_r, sizeof(__pyx_k_get_second_to_first_conversion_r), 0, 0, 1, 1},
  {0, __pyx_k_get_taker_order_type, sizeof(__pyx_k_get_taker_order_type), 0, 0, 1, 1},
  {0, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {0, __pyx_k_hb_app_notification, sizeof(__pyx_k_hb_app_notification), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_client_performance, sizeof(__pyx_k_hummingbot_client_performance), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_connector_exchange_ba, sizeof(__pyx_k_hummingbot_connector_exchange_ba), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_data_type_limit, sizeof(__pyx_k_hummingbot_core_data_type_limit), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_data_type_market, sizeof(__pyx_k_hummingbot_core_data_type_market), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_data_type_order, sizeof(__pyx_k_hummingbot_core_data_type_order), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_event_events, sizeof(__pyx_k_hummingbot_core_event_events), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_network_iterator, sizeof(__pyx_k_hummingbot_core_network_iterator), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_rate_oracle_rate, sizeof(__pyx_k_hummingbot_core_rate_oracle_rate), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_strategy_arbitrage_ar, sizeof(__pyx_k_hummingbot_strategy_arbitrage_ar), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_strategy_arbitrage_ar_2, sizeof(__pyx_k_hummingbot_strategy_arbitrage_ar_2), 0, 0, 1, 0},
  {0, __pyx_k_hummingbot_strategy_arbitrage_ar_3, sizeof(__pyx_k_hummingbot_strategy_arbitrage_ar_3), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_strategy_market_tradi, sizeof(__pyx_k_hummingbot_strategy_market_tradi), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_strategy_strategy_bas, sizeof(__pyx_k_hummingbot_strategy_strategy_bas), 0, 0, 1, 1},
  {0, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {0, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {0, __pyx_k_init_params, sizeof(__pyx_k_init_params), 0, 0, 1, 1},
  {0, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {0, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
  {0, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {0, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
  {0, __pyx_k_line, sizeof(__pyx_k_line), 0, 0, 1, 1},
  {0, __pyx_k_lines, sizeof(__pyx_k_lines), 0, 0, 1, 1},
  {0, __pyx_k_log_conversion_rates, sizeof(__pyx_k_log_conversion_rates), 0, 0, 1, 1},
  {0, __pyx_k_log_with_clock, sizeof(__pyx_k_log_with_clock), 0, 0, 1, 1},
  {0, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {0, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {0, __pyx_k_logging_options, sizeof(__pyx_k_logging_options), 0, 0, 1, 1},
  {0, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {0, __pyx_k_market, sizeof(__pyx_k_market), 0, 0, 1, 1},
  {0, __pyx_k_market_conversion_rate, sizeof(__pyx_k_market_conversion_rate), 0, 0, 1, 1},
  {0, __pyx_k_market_info, sizeof(__pyx_k_market_info), 0, 0, 1, 1},
  {0, __pyx_k_market_pair, sizeof(__pyx_k_market_pair), 0, 0, 1, 1},
  {0, __pyx_k_market_pairs, sizeof(__pyx_k_market_pairs), 0, 0, 1, 1},
  {0, __pyx_k_market_pairs_must_not_be_empty, sizeof(__pyx_k_market_pairs_must_not_be_empty), 0, 1, 0, 0},
  {0, __pyx_k_market_status_data_frame, sizeof(__pyx_k_market_status_data_frame), 0, 0, 1, 1},
  {0, __pyx_k_markets_df, sizeof(__pyx_k_markets_df), 0, 0, 1, 1},
  {0, __pyx_k_min_profitability, sizeof(__pyx_k_min_profitability), 0, 0, 1, 1},
  {0, __pyx_k_msg, sizeof(__pyx_k_msg), 0, 0, 1, 1},
  {0, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {0, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {0, __pyx_k_nan, sizeof(__pyx_k_nan), 0, 1, 0, 1},
  {0, __pyx_k_network_status, sizeof(__pyx_k_network_status), 0, 0, 1, 1},
  {0, __pyx_k_network_warning, sizeof(__pyx_k_network_warning), 0, 0, 1, 1},
  {0, __pyx_k_next_trade_delay_interval, sizeof(__pyx_k_next_trade_delay_interval), 0, 0, 1, 1},
  {0, __pyx_k_notify_hb_app, sizeof(__pyx_k_notify_hb_app), 0, 0, 1, 1},
  {0, __pyx_k_notify_hb_app_with_timestamp, sizeof(__pyx_k_notify_hb_app_with_timestamp), 0, 0, 1, 1},
  {0, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {0, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {0, __pyx_k_oracle_df, sizeof(__pyx_k_oracle_df), 0, 0, 1, 1},
  {0, __pyx_k_oracle_status_df, sizeof(__pyx_k_oracle_status_df), 0, 0, 1, 1},
  {0, __pyx_k_order_book, sizeof(__pyx_k_order_book), 0, 0, 1, 1},
  {0, __pyx_k_order_book_ask_entries, sizeof(__pyx_k_order_book_ask_entries), 0, 0, 1, 1},
  {0, __pyx_k_order_book_bid_entries, sizeof(__pyx_k_order_book_bid_entries), 0, 0, 1, 1},
  {0, __pyx_k_order_id, sizeof(__pyx_k_order_id), 0, 0, 1, 1},
  {0, __pyx_k_pandas, sizeof(__pyx_k_pandas), 0, 0, 1, 1},
  {0, __pyx_k_pd, sizeof(__pyx_k_pd), 0, 0, 1, 1},
  {0, __pyx_k_percent, sizeof(__pyx_k_percent), 0, 0, 1, 1},
  {0, __pyx_k_price, sizeof(__pyx_k_price), 0, 0, 1, 1},
  {0, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {0, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {0, __pyx_k_quote_asset, sizeof(__pyx_k_quote_asset), 0, 0, 1, 1},
  {0, __pyx_k_quote_pair, sizeof(__pyx_k_quote_pair), 0, 0, 1, 1},
  {0, __pyx_k_quote_rate, sizeof(__pyx_k_quote_rate), 0, 0, 1, 1},
  {0, __pyx_k_quote_rate_source, sizeof(__pyx_k_quote_rate_source), 0, 0, 1, 1},
  {0, __pyx_k_rate, sizeof(__pyx_k_rate), 0, 0, 1, 1},
  {0, __pyx_k_raw_profitability, sizeof(__pyx_k_raw_profitability), 0, 1, 0, 1},
  {0, __pyx_k_ready, sizeof(__pyx_k_ready), 0, 0, 1, 1},
  {0, __pyx_k_ready_for_new_orders, sizeof(__pyx_k_ready_for_new_orders), 0, 0, 1, 1},
  {0, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {0, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {0, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {0, __pyx_k_return, sizeof(__pyx_k_return), 0, 0, 1, 1},
  {0, __pyx_k_round, sizeof(__pyx_k_round), 0, 0, 1, 1},
  {0, __pyx_k_s_decimal_0, sizeof(__pyx_k_s_decimal_0), 0, 0, 1, 1},
  {0, __pyx_k_second, sizeof(__pyx_k_second), 0, 0, 1, 1},
  {0, __pyx_k_secondary_to_primary_base_conver, sizeof(__pyx_k_secondary_to_primary_base_conver), 0, 0, 1, 1},
  {0, __pyx_k_secondary_to_primary_quote_conve, sizeof(__pyx_k_secondary_to_primary_quote_conve), 0, 0, 1, 1},
  {0, __pyx_k_seconds, sizeof(__pyx_k_seconds), 0, 1, 0, 0},
  {0, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {0, __pyx_k_self__events_cannot_be_converted, sizeof(__pyx_k_self__events_cannot_be_converted), 0, 0, 1, 0},
  {0, __pyx_k_sell_limit_order_completed_on, sizeof(__pyx_k_sell_limit_order_completed_on), 0, 1, 0, 0},
  {0, __pyx_k_sell_market, sizeof(__pyx_k_sell_market), 0, 0, 1, 1},
  {0, __pyx_k_sell_market_conversion_rate, sizeof(__pyx_k_sell_market_conversion_rate), 0, 0, 1, 1},
  {0, __pyx_k_sell_market_trading_pair, sizeof(__pyx_k_sell_market_trading_pair), 0, 0, 1, 1},
  {0, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {0, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {0, __pyx_k_smart_round, sizeof(__pyx_k_smart_round), 0, 0, 1, 1},
  {0, __pyx_k_source, sizeof(__pyx_k_source), 0, 0, 1, 1},
  {0, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {0, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {0, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {0, __pyx_k_status_report_interval, sizeof(__pyx_k_status_report_interval), 0, 0, 1, 1},
  {0, __pyx_k_step_amount, sizeof(__pyx_k_step_amount), 0, 1, 0, 1},
  {0, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {0, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {0, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {0, __pyx_k_take_ask_on, sizeof(__pyx_k_take_ask_on), 0, 1, 0, 0},
  {0, __pyx_k_take_ask_on_2, sizeof(__pyx_k_take_ask_on_2), 0, 1, 0, 0},
  {0, __pyx_k_take_bid_on, sizeof(__pyx_k_take_bid_on), 0, 1, 0, 0},
  {0, __pyx_k_take_bid_on_2, sizeof(__pyx_k_take_bid_on_2), 0, 1, 0, 0},
  {0, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, __pyx_k_to_string, sizeof(__pyx_k_to_string), 0, 0, 1, 1},
  {0, __pyx_k_tracked_limit_orders, sizeof(__pyx_k_tracked_limit_orders), 0, 0, 1, 1},
  {0, __pyx_k_tracked_limit_orders_data_frame, sizeof(__pyx_k_tracked_limit_orders_data_frame), 0, 0, 1, 1},
  {0, __pyx_k_tracked_limit_orders_df, sizeof(__pyx_k_tracked_limit_orders_df), 0, 0, 1, 1},
  {0, __pyx_k_tracked_market_orders, sizeof(__pyx_k_tracked_market_orders), 0, 0, 1, 1},
  {0, __pyx_k_tracked_market_orders_data_frame, sizeof(__pyx_k_tracked_market_orders_data_frame), 0, 0, 1, 1},
  {0, __pyx_k_tracked_market_orders_df, sizeof(__pyx_k_tracked_market_orders_df), 0, 0, 1, 1},
  {0, __pyx_k_trading_pair, sizeof(__pyx_k_trading_pair), 0, 0, 1, 1},
  {0, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {0, __pyx_k_use_oracle_conversion_rate, sizeof(__pyx_k_use_oracle_conversion_rate), 0, 0, 1, 1},
  {0, __pyx_k_wallet_balance_data_frame, sizeof(__pyx_k_wallet_balance_data_frame), 0, 0, 1, 1},
  {0, __pyx_k_warning, sizeof(__pyx_k_warning), 0, 0, 1, 1},
  {0, __pyx_k_warning_lines, sizeof(__pyx_k_warning_lines), 0, 0, 1, 1},
  {0, __pyx_k_with_amount, sizeof(__pyx_k_with_amount), 0, 1, 0, 0},
  #else
  {&__pyx_kp_u_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 1, 0, 0},
  {&__pyx_kp_u_8f, __pyx_k_8f, sizeof(__pyx_k_8f), 0, 1, 0, 0},
  {&__pyx_n_s_ArbitrageMarketPair, __pyx_k_ArbitrageMarketPair, sizeof(__pyx_k_ArbitrageMarketPair), 0, 0, 1, 1},
  {&__pyx_n_s_ArbitrageStrategy, __pyx_k_ArbitrageStrategy, sizeof(__pyx_k_ArbitrageStrategy), 0, 0, 1, 1},
  {&__pyx_n_s_ArbitrageStrategy___reduce_cytho, __pyx_k_ArbitrageStrategy___reduce_cytho, sizeof(__pyx_k_ArbitrageStrategy___reduce_cytho), 0, 0, 1, 1},
  {&__pyx_n_s_ArbitrageStrategy___setstate_cyt, __pyx_k_ArbitrageStrategy___setstate_cyt, sizeof(__pyx_k_ArbitrageStrategy___setstate_cyt), 0, 0, 1, 1},
  {&__pyx_n_s_ArbitrageStrategy_find_best_prof, __pyx_k_ArbitrageStrategy_find_best_prof, sizeof(__pyx_k_ArbitrageStrategy_find_best_prof), 0, 0, 1, 1},
  {&__pyx_n_s_ArbitrageStrategy_find_profitabl, __pyx_k_ArbitrageStrategy_find_profitabl, sizeof(__pyx_k_ArbitrageStrategy_find_profitabl), 0, 0, 1, 1},
  {&__pyx_n_s_ArbitrageStrategy_format_status, __pyx_k_ArbitrageStrategy_format_status, sizeof(__pyx_k_ArbitrageStrategy_format_status), 0, 0, 1, 1},
  {&__pyx_n_s_ArbitrageStrategy_get_second_to, __pyx_k_ArbitrageStrategy_get_second_to, sizeof(__pyx_k_ArbitrageStrategy_get_second_to), 0, 0, 1, 1},
  {&__pyx_n_s_ArbitrageStrategy_init_params, __pyx_k_ArbitrageStrategy_init_params, sizeof(__pyx_k_ArbitrageStrategy_init_params), 0, 0, 1, 1},
  {&__pyx_n_s_ArbitrageStrategy_log_conversion, __pyx_k_ArbitrageStrategy_log_conversion, sizeof(__pyx_k_ArbitrageStrategy_log_conversion), 0, 0, 1, 1},
  {&__pyx_n_s_ArbitrageStrategy_logger, __pyx_k_ArbitrageStrategy_logger, sizeof(__pyx_k_ArbitrageStrategy_logger), 0, 0, 1, 1},
  {&__pyx_n_s_ArbitrageStrategy_market_convers, __pyx_k_ArbitrageStrategy_market_convers, sizeof(__pyx_k_ArbitrageStrategy_market_convers), 0, 0, 1, 1},
  {&__pyx_n_s_ArbitrageStrategy_notify_hb_app, __pyx_k_ArbitrageStrategy_notify_hb_app, sizeof(__pyx_k_ArbitrageStrategy_notify_hb_app), 0, 0, 1, 1},
  {&__pyx_n_s_ArbitrageStrategy_oracle_status, __pyx_k_ArbitrageStrategy_oracle_status, sizeof(__pyx_k_ArbitrageStrategy_oracle_status), 0, 0, 1, 1},
  {&__pyx_n_s_ArbitrageStrategy_ready_for_new, __pyx_k_ArbitrageStrategy_ready_for_new, sizeof(__pyx_k_ArbitrageStrategy_ready_for_new), 0, 0, 1, 1},
  {&__pyx_kp_u_Assets, __pyx_k_Assets, sizeof(__pyx_k_Assets), 0, 1, 0, 0},
  {&__pyx_n_s_BUY, __pyx_k_BUY, sizeof(__pyx_k_BUY), 0, 0, 1, 1},
  {&__pyx_kp_u_Base_asset_available_balance, __pyx_k_Base_asset_available_balance, sizeof(__pyx_k_Base_asset_available_balance), 0, 1, 0, 0},
  {&__pyx_kp_u_Base_asset_needed, __pyx_k_Base_asset_needed, sizeof(__pyx_k_Base_asset_needed), 0, 1, 0, 0},
  {&__pyx_n_s_CONNECTED, __pyx_k_CONNECTED, sizeof(__pyx_k_CONNECTED), 0, 0, 1, 1},
  {&__pyx_kp_u_Cool_off_completed_Arbitrage_str, __pyx_k_Cool_off_completed_Arbitrage_str, sizeof(__pyx_k_Cool_off_completed_Arbitrage_str), 0, 1, 0, 0},
  {&__pyx_kp_u_Cooling_off_from_previous_trade, __pyx_k_Cooling_off_from_previous_trade, sizeof(__pyx_k_Cooling_off_from_previous_trade), 0, 1, 0, 0},
  {&__pyx_kp_u_Current_step_profitability, __pyx_k_Current_step_profitability, sizeof(__pyx_k_Current_step_profitability), 0, 1, 0, 0},
  {&__pyx_n_s_DEBUG, __pyx_k_DEBUG, sizeof(__pyx_k_DEBUG), 0, 0, 1, 1},
  {&__pyx_n_s_DataFrame, __pyx_k_DataFrame, sizeof(__pyx_k_DataFrame), 0, 0, 1, 1},
  {&__pyx_n_s_Decimal, __pyx_k_Decimal, sizeof(__pyx_k_Decimal), 0, 0, 1, 1},
  {&__pyx_n_s_ExchangeBase, __pyx_k_ExchangeBase, sizeof(__pyx_k_ExchangeBase), 0, 0, 1, 1},
  {&__pyx_kp_u_Executing_limit_order_buy_of, __pyx_k_Executing_limit_order_buy_of, sizeof(__pyx_k_Executing_limit_order_buy_of), 0, 1, 0, 0},
  {&__pyx_n_s_INFO, __pyx_k_INFO, sizeof(__pyx_k_INFO), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_s_LimitOrder, __pyx_k_LimitOrder, sizeof(__pyx_k_LimitOrder), 0, 0, 1, 1},
  {&__pyx_kp_u_Limit_order_completed_on, __pyx_k_Limit_order_completed_on, sizeof(__pyx_k_Limit_order_completed_on), 0, 1, 0, 0},
  {&__pyx_n_s_List, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {&__pyx_kp_s_List_ArbitrageMarketPair, __pyx_k_List_ArbitrageMarketPair, sizeof(__pyx_k_List_ArbitrageMarketPair), 0, 0, 1, 0},
  {&__pyx_n_s_MarketOrder, __pyx_k_MarketOrder, sizeof(__pyx_k_MarketOrder), 0, 0, 1, 1},
  {&__pyx_n_s_MarketTradingPairTuple, __pyx_k_MarketTradingPairTuple, sizeof(__pyx_k_MarketTradingPairTuple), 0, 0, 1, 1},
  {&__pyx_kp_u_Market_order_canceled_on, __pyx_k_Market_order_canceled_on, sizeof(__pyx_k_Market_order_canceled_on), 0, 1, 0, 0},
  {&__pyx_kp_u_Markets, __pyx_k_Markets, sizeof(__pyx_k_Markets), 0, 1, 0, 0},
  {&__pyx_kp_u_Markets_are_not_all_online_No_ar, __pyx_k_Markets_are_not_all_online_No_ar, sizeof(__pyx_k_Markets_are_not_all_online_No_ar), 0, 1, 0, 0},
  {&__pyx_kp_u_Markets_are_not_ready_No_arbitra, __pyx_k_Markets_are_not_ready_No_arbitra, sizeof(__pyx_k_Markets_are_not_ready_No_arbitra), 0, 1, 0, 0},
  {&__pyx_kp_u_Markets_are_ready_Trading_starte, __pyx_k_Markets_are_ready_Trading_starte, sizeof(__pyx_k_Markets_are_ready_Trading_starte), 0, 1, 0, 0},
  {&__pyx_n_s_NaN, __pyx_k_NaN, sizeof(__pyx_k_NaN), 0, 0, 1, 1},
  {&__pyx_n_s_NetworkStatus, __pyx_k_NetworkStatus, sizeof(__pyx_k_NetworkStatus), 0, 0, 1, 1},
  {&__pyx_kp_u_No_pending_limit_orders, __pyx_k_No_pending_limit_orders, sizeof(__pyx_k_No_pending_limit_orders), 0, 1, 0, 0},
  {&__pyx_kp_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {&__pyx_kp_u_Not_enough_asset_to_complete_thi, __pyx_k_Not_enough_asset_to_complete_thi, sizeof(__pyx_k_Not_enough_asset_to_complete_thi), 0, 1, 0, 0},
  {&__pyx_n_s_OPTION_LOG_ALL, __pyx_k_OPTION_LOG_ALL, sizeof(__pyx_k_OPTION_LOG_ALL), 0, 0, 1, 1},
  {&__pyx_n_s_OPTION_LOG_CREATE_ORDER, __pyx_k_OPTION_LOG_CREATE_ORDER, sizeof(__pyx_k_OPTION_LOG_CREATE_ORDER), 0, 0, 1, 1},
  {&__pyx_n_s_OPTION_LOG_FULL_PROFITABILITY_ST, __pyx_k_OPTION_LOG_FULL_PROFITABILITY_ST, sizeof(__pyx_k_OPTION_LOG_FULL_PROFITABILITY_ST), 0, 0, 1, 1},
  {&__pyx_n_s_OPTION_LOG_INSUFFICIENT_ASSET, __pyx_k_OPTION_LOG_INSUFFICIENT_ASSET, sizeof(__pyx_k_OPTION_LOG_INSUFFICIENT_ASSET), 0, 0, 1, 1},
  {&__pyx_n_s_OPTION_LOG_ORDER_COMPLETED, __pyx_k_OPTION_LOG_ORDER_COMPLETED, sizeof(__pyx_k_OPTION_LOG_ORDER_COMPLETED), 0, 0, 1, 1},
  {&__pyx_n_s_OPTION_LOG_PROFITABILITY_STEP, __pyx_k_OPTION_LOG_PROFITABILITY_STEP, sizeof(__pyx_k_OPTION_LOG_PROFITABILITY_STEP), 0, 0, 1, 1},
  {&__pyx_n_s_OPTION_LOG_STATUS_REPORT, __pyx_k_OPTION_LOG_STATUS_REPORT, sizeof(__pyx_k_OPTION_LOG_STATUS_REPORT), 0, 0, 1, 1},
  {&__pyx_n_s_OrderBook, __pyx_k_OrderBook, sizeof(__pyx_k_OrderBook), 0, 0, 1, 1},
  {&__pyx_n_s_OrderType, __pyx_k_OrderType, sizeof(__pyx_k_OrderType), 0, 0, 1, 1},
  {&__pyx_n_u_Pair, __pyx_k_Pair, sizeof(__pyx_k_Pair), 0, 1, 0, 1},
  {&__pyx_kp_u_Pending_limit_orders, __pyx_k_Pending_limit_orders, sizeof(__pyx_k_Pending_limit_orders), 0, 1, 0, 0},
  {&__pyx_n_s_PerformanceMetrics, __pyx_k_PerformanceMetrics, sizeof(__pyx_k_PerformanceMetrics), 0, 0, 1, 1},
  {&__pyx_kp_u_Profitability_without_fees, __pyx_k_Profitability_without_fees, sizeof(__pyx_k_Profitability_without_fees), 0, 1, 0, 0},
  {&__pyx_kp_u_Quote_asset_available_balance, __pyx_k_Quote_asset_available_balance, sizeof(__pyx_k_Quote_asset_available_balance), 0, 1, 0, 0},
  {&__pyx_n_u_Rate, __pyx_k_Rate, sizeof(__pyx_k_Rate), 0, 1, 0, 1},
  {&__pyx_n_s_RateOracle, __pyx_k_RateOracle, sizeof(__pyx_k_RateOracle), 0, 0, 1, 1},
  {&__pyx_kp_u_Rate_conversion, __pyx_k_Rate_conversion, sizeof(__pyx_k_Rate_conversion), 0, 1, 0, 0},
  {&__pyx_kp_u_Resuming_in, __pyx_k_Resuming_in, sizeof(__pyx_k_Resuming_in), 0, 1, 0, 0},
  {&__pyx_n_s_SELL, __pyx_k_SELL, sizeof(__pyx_k_SELL), 0, 0, 1, 1},
  {&__pyx_n_u_Source, __pyx_k_Source, sizeof(__pyx_k_Source), 0, 1, 0, 1},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase, __pyx_k_StrategyBase, sizeof(__pyx_k_StrategyBase), 0, 0, 1, 1},
  {&__pyx_kp_u_Total_profitability_with_fees, __pyx_k_Total_profitability_with_fees, sizeof(__pyx_k_Total_profitability_with_fees), 0, 1, 0, 0},
  {&__pyx_n_s_TradeType, __pyx_k_TradeType, sizeof(__pyx_k_TradeType), 0, 0, 1, 1},
  {&__pyx_n_s_Tuple, __pyx_k_Tuple, sizeof(__pyx_k_Tuple), 0, 0, 1, 1},
  {&__pyx_kp_s_Tuple_str_Decimal_str_Decimal, __pyx_k_Tuple_str_Decimal_str_Decimal, sizeof(__pyx_k_Tuple_str_Decimal_str_Decimal), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u_WARNINGS, __pyx_k_WARNINGS, sizeof(__pyx_k_WARNINGS), 0, 1, 0, 0},
  {&__pyx_kp_u__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 0},
  {&__pyx_kp_u__11, __pyx_k__11, sizeof(__pyx_k__11), 0, 1, 0, 0},
  {&__pyx_kp_u__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 0},
  {&__pyx_kp_u__13, __pyx_k__13, sizeof(__pyx_k__13), 0, 1, 0, 0},
  {&__pyx_n_s__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 0, 1, 1},
  {&__pyx_n_s__35, __pyx_k__35, sizeof(__pyx_k__35), 0, 0, 1, 1},
  {&__pyx_n_s__46, __pyx_k__46, sizeof(__pyx_k__46), 0, 0, 1, 1},
  {&__pyx_kp_u__5, __pyx_k__5, sizeof(__pyx_k__5), 0, 1, 0, 0},
  {&__pyx_kp_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
  {&__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
  {&__pyx_kp_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
  {&__pyx_kp_u__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 1, 0, 0},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_all_markets, __pyx_k_all_markets, sizeof(__pyx_k_all_markets), 0, 0, 1, 1},
  {&__pyx_n_s_amount, __pyx_k_amount, sizeof(__pyx_k_amount), 0, 0, 1, 1},
  {&__pyx_kp_u_and_profitability, __pyx_k_and_profitability, sizeof(__pyx_k_and_profitability), 0, 1, 0, 0},
  {&__pyx_kp_u_and_sell_of, __pyx_k_and_sell_of, sizeof(__pyx_k_and_sell_of), 0, 1, 0, 0},
  {&__pyx_n_s_as_logger, __pyx_k_as_logger, sizeof(__pyx_k_as_logger), 0, 0, 1, 1},
  {&__pyx_n_u_ask_price, __pyx_k_ask_price, sizeof(__pyx_k_ask_price), 0, 1, 0, 1},
  {&__pyx_n_u_ask_price_adjusted, __pyx_k_ask_price_adjusted, sizeof(__pyx_k_ask_price_adjusted), 0, 1, 0, 1},
  {&__pyx_n_s_assets_df, __pyx_k_assets_df, sizeof(__pyx_k_assets_df), 0, 0, 1, 1},
  {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {&__pyx_kp_u_at, __pyx_k_at, sizeof(__pyx_k_at), 0, 1, 0, 0},
  {&__pyx_n_s_balance_warning, __pyx_k_balance_warning, sizeof(__pyx_k_balance_warning), 0, 0, 1, 1},
  {&__pyx_n_s_base_asset, __pyx_k_base_asset, sizeof(__pyx_k_base_asset), 0, 0, 1, 1},
  {&__pyx_n_s_base_asset_amount, __pyx_k_base_asset_amount, sizeof(__pyx_k_base_asset_amount), 0, 0, 1, 1},
  {&__pyx_n_s_base_pair, __pyx_k_base_pair, sizeof(__pyx_k_base_pair), 0, 0, 1, 1},
  {&__pyx_n_s_base_rate, __pyx_k_base_rate, sizeof(__pyx_k_base_rate), 0, 0, 1, 1},
  {&__pyx_n_s_base_rate_source, __pyx_k_base_rate_source, sizeof(__pyx_k_base_rate_source), 0, 0, 1, 1},
  {&__pyx_kp_u_bid_ask_price_amount, __pyx_k_bid_ask_price_amount, sizeof(__pyx_k_bid_ask_price_amount), 0, 1, 0, 0},
  {&__pyx_n_u_bid_price, __pyx_k_bid_price, sizeof(__pyx_k_bid_price), 0, 1, 0, 1},
  {&__pyx_n_u_bid_price_adjusted, __pyx_k_bid_price_adjusted, sizeof(__pyx_k_bid_price_adjusted), 0, 1, 0, 1},
  {&__pyx_n_s_bool, __pyx_k_bool, sizeof(__pyx_k_bool), 0, 0, 1, 1},
  {&__pyx_kp_u_buy_limit_order_completed_on, __pyx_k_buy_limit_order_completed_on, sizeof(__pyx_k_buy_limit_order_completed_on), 0, 1, 0, 0},
  {&__pyx_n_s_buy_market, __pyx_k_buy_market, sizeof(__pyx_k_buy_market), 0, 0, 1, 1},
  {&__pyx_n_s_buy_market_conversion_rate, __pyx_k_buy_market_conversion_rate, sizeof(__pyx_k_buy_market_conversion_rate), 0, 0, 1, 1},
  {&__pyx_n_s_buy_market_trading_pair, __pyx_k_buy_market_trading_pair, sizeof(__pyx_k_buy_market_trading_pair), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_cls, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
  {&__pyx_n_s_columns, __pyx_k_columns, sizeof(__pyx_k_columns), 0, 0, 1, 1},
  {&__pyx_kp_u_conversion_rate, __pyx_k_conversion_rate, sizeof(__pyx_k_conversion_rate), 0, 1, 0, 0},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_decimal, __pyx_k_decimal, sizeof(__pyx_k_decimal), 0, 0, 1, 1},
  {&__pyx_n_s_df_limit_lines, __pyx_k_df_limit_lines, sizeof(__pyx_k_df_limit_lines), 0, 0, 1, 1},
  {&__pyx_n_s_df_market_lines, __pyx_k_df_market_lines, sizeof(__pyx_k_df_market_lines), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
  {&__pyx_n_s_empty, __pyx_k_empty, sizeof(__pyx_k_empty), 0, 0, 1, 1},
  {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
  {&__pyx_n_s_failed_order_tolerance, __pyx_k_failed_order_tolerance, sizeof(__pyx_k_failed_order_tolerance), 0, 0, 1, 1},
  {&__pyx_n_s_find_best_profitable_amount, __pyx_k_find_best_profitable_amount, sizeof(__pyx_k_find_best_profitable_amount), 0, 0, 1, 1},
  {&__pyx_n_s_find_profitable_arbitrage_orders, __pyx_k_find_profitable_arbitrage_orders, sizeof(__pyx_k_find_profitable_arbitrage_orders), 0, 0, 1, 1},
  {&__pyx_n_s_first, __pyx_k_first, sizeof(__pyx_k_first), 0, 0, 1, 1},
  {&__pyx_n_u_fixed, __pyx_k_fixed, sizeof(__pyx_k_fixed), 0, 1, 0, 1},
  {&__pyx_n_s_flat_fees, __pyx_k_flat_fees, sizeof(__pyx_k_flat_fees), 0, 0, 1, 1},
  {&__pyx_n_s_float, __pyx_k_float, sizeof(__pyx_k_float), 0, 0, 1, 1},
  {&__pyx_n_s_format_status, __pyx_k_format_status, sizeof(__pyx_k_format_status), 0, 0, 1, 1},
  {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_n_s_get_instance, __pyx_k_get_instance, sizeof(__pyx_k_get_instance), 0, 0, 1, 1},
  {&__pyx_n_s_get_price, __pyx_k_get_price, sizeof(__pyx_k_get_price), 0, 0, 1, 1},
  {&__pyx_n_s_get_second_to_first_conversion_r, __pyx_k_get_second_to_first_conversion_r, sizeof(__pyx_k_get_second_to_first_conversion_r), 0, 0, 1, 1},
  {&__pyx_n_s_get_taker_order_type, __pyx_k_get_taker_order_type, sizeof(__pyx_k_get_taker_order_type), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_hb_app_notification, __pyx_k_hb_app_notification, sizeof(__pyx_k_hb_app_notification), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_client_performance, __pyx_k_hummingbot_client_performance, sizeof(__pyx_k_hummingbot_client_performance), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_ba, __pyx_k_hummingbot_connector_exchange_ba, sizeof(__pyx_k_hummingbot_connector_exchange_ba), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_data_type_limit, __pyx_k_hummingbot_core_data_type_limit, sizeof(__pyx_k_hummingbot_core_data_type_limit), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_data_type_market, __pyx_k_hummingbot_core_data_type_market, sizeof(__pyx_k_hummingbot_core_data_type_market), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_data_type_order, __pyx_k_hummingbot_core_data_type_order, sizeof(__pyx_k_hummingbot_core_data_type_order), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_event_events, __pyx_k_hummingbot_core_event_events, sizeof(__pyx_k_hummingbot_core_event_events), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_network_iterator, __pyx_k_hummingbot_core_network_iterator, sizeof(__pyx_k_hummingbot_core_network_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_rate_oracle_rate, __pyx_k_hummingbot_core_rate_oracle_rate, sizeof(__pyx_k_hummingbot_core_rate_oracle_rate), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_strategy_arbitrage_ar, __pyx_k_hummingbot_strategy_arbitrage_ar, sizeof(__pyx_k_hummingbot_strategy_arbitrage_ar), 0, 0, 1, 1},
  {&__pyx_kp_s_hummingbot_strategy_arbitrage_ar_2, __pyx_k_hummingbot_strategy_arbitrage_ar_2, sizeof(__pyx_k_hummingbot_strategy_arbitrage_ar_2), 0, 0, 1, 0},
  {&__pyx_n_s_hummingbot_strategy_arbitrage_ar_3, __pyx_k_hummingbot_strategy_arbitrage_ar_3, sizeof(__pyx_k_hummingbot_strategy_arbitrage_ar_3), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_strategy_market_tradi, __pyx_k_hummingbot_strategy_market_tradi, sizeof(__pyx_k_hummingbot_strategy_market_tradi), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_strategy_strategy_bas, __pyx_k_hummingbot_strategy_strategy_bas, sizeof(__pyx_k_hummingbot_strategy_strategy_bas), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {&__pyx_n_s_init_params, __pyx_k_init_params, sizeof(__pyx_k_init_params), 0, 0, 1, 1},
  {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {&__pyx_n_s_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
  {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
  {&__pyx_n_s_line, __pyx_k_line, sizeof(__pyx_k_line), 0, 0, 1, 1},
  {&__pyx_n_s_lines, __pyx_k_lines, sizeof(__pyx_k_lines), 0, 0, 1, 1},
  {&__pyx_n_s_log_conversion_rates, __pyx_k_log_conversion_rates, sizeof(__pyx_k_log_conversion_rates), 0, 0, 1, 1},
  {&__pyx_n_s_log_with_clock, __pyx_k_log_with_clock, sizeof(__pyx_k_log_with_clock), 0, 0, 1, 1},
  {&__pyx_n_s_logger, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_logging_options, __pyx_k_logging_options, sizeof(__pyx_k_logging_options), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_market, __pyx_k_market, sizeof(__pyx_k_market), 0, 0, 1, 1},
  {&__pyx_n_s_market_conversion_rate, __pyx_k_market_conversion_rate, sizeof(__pyx_k_market_conversion_rate), 0, 0, 1, 1},
  {&__pyx_n_s_market_info, __pyx_k_market_info, sizeof(__pyx_k_market_info), 0, 0, 1, 1},
  {&__pyx_n_s_market_pair, __pyx_k_market_pair, sizeof(__pyx_k_market_pair), 0, 0, 1, 1},
  {&__pyx_n_s_market_pairs, __pyx_k_market_pairs, sizeof(__pyx_k_market_pairs), 0, 0, 1, 1},
  {&__pyx_kp_u_market_pairs_must_not_be_empty, __pyx_k_market_pairs_must_not_be_empty, sizeof(__pyx_k_market_pairs_must_not_be_empty), 0, 1, 0, 0},
  {&__pyx_n_s_market_status_data_frame, __pyx_k_market_status_data_frame, sizeof(__pyx_k_market_status_data_frame), 0, 0, 1, 1},
  {&__pyx_n_s_markets_df, __pyx_k_markets_df, sizeof(__pyx_k_markets_df), 0, 0, 1, 1},
  {&__pyx_n_s_min_profitability, __pyx_k_min_profitability, sizeof(__pyx_k_min_profitability), 0, 0, 1, 1},
  {&__pyx_n_s_msg, __pyx_k_msg, sizeof(__pyx_k_msg), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_u_nan, __pyx_k_nan, sizeof(__pyx_k_nan), 0, 1, 0, 1},
  {&__pyx_n_s_network_status, __pyx_k_network_status, sizeof(__pyx_k_network_status), 0, 0, 1, 1},
  {&__pyx_n_s_network_warning, __pyx_k_network_warning, sizeof(__pyx_k_network_warning), 0, 0, 1, 1},
  {&__pyx_n_s_next_trade_delay_interval, __pyx_k_next_trade_delay_interval, sizeof(__pyx_k_next_trade_delay_interval), 0, 0, 1, 1},
  {&__pyx_n_s_notify_hb_app, __pyx_k_notify_hb_app, sizeof(__pyx_k_notify_hb_app), 0, 0, 1, 1},
  {&__pyx_n_s_notify_hb_app_with_timestamp, __pyx_k_notify_hb_app_with_timestamp, sizeof(__pyx_k_notify_hb_app_with_timestamp), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_oracle_df, __pyx_k_oracle_df, sizeof(__pyx_k_oracle_df), 0, 0, 1, 1},
  {&__pyx_n_s_oracle_status_df, __pyx_k_oracle_status_df, sizeof(__pyx_k_oracle_status_df), 0, 0, 1, 1},
  {&__pyx_n_s_order_book, __pyx_k_order_book, sizeof(__pyx_k_order_book), 0, 0, 1, 1},
  {&__pyx_n_s_order_book_ask_entries, __pyx_k_order_book_ask_entries, sizeof(__pyx_k_order_book_ask_entries), 0, 0, 1, 1},
  {&__pyx_n_s_order_book_bid_entries, __pyx_k_order_book_bid_entries, sizeof(__pyx_k_order_book_bid_entries), 0, 0, 1, 1},
  {&__pyx_n_s_order_id, __pyx_k_order_id, sizeof(__pyx_k_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_pandas, __pyx_k_pandas, sizeof(__pyx_k_pandas), 0, 0, 1, 1},
  {&__pyx_n_s_pd, __pyx_k_pd, sizeof(__pyx_k_pd), 0, 0, 1, 1},
  {&__pyx_n_s_percent, __pyx_k_percent, sizeof(__pyx_k_percent), 0, 0, 1, 1},
  {&__pyx_n_s_price, __pyx_k_price, sizeof(__pyx_k_price), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_quote_asset, __pyx_k_quote_asset, sizeof(__pyx_k_quote_asset), 0, 0, 1, 1},
  {&__pyx_n_s_quote_pair, __pyx_k_quote_pair, sizeof(__pyx_k_quote_pair), 0, 0, 1, 1},
  {&__pyx_n_s_quote_rate, __pyx_k_quote_rate, sizeof(__pyx_k_quote_rate), 0, 0, 1, 1},
  {&__pyx_n_s_quote_rate_source, __pyx_k_quote_rate_source, sizeof(__pyx_k_quote_rate_source), 0, 0, 1, 1},
  {&__pyx_n_s_rate, __pyx_k_rate, sizeof(__pyx_k_rate), 0, 0, 1, 1},
  {&__pyx_n_u_raw_profitability, __pyx_k_raw_profitability, sizeof(__pyx_k_raw_profitability), 0, 1, 0, 1},
  {&__pyx_n_s_ready, __pyx_k_ready, sizeof(__pyx_k_ready), 0, 0, 1, 1},
  {&__pyx_n_s_ready_for_new_orders, __pyx_k_ready_for_new_orders, sizeof(__pyx_k_ready_for_new_orders), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_return, __pyx_k_return, sizeof(__pyx_k_return), 0, 0, 1, 1},
  {&__pyx_n_s_round, __pyx_k_round, sizeof(__pyx_k_round), 0, 0, 1, 1},
  {&__pyx_n_s_s_decimal_0, __pyx_k_s_decimal_0, sizeof(__pyx_k_s_decimal_0), 0, 0, 1, 1},
  {&__pyx_n_s_second, __pyx_k_second, sizeof(__pyx_k_second), 0, 0, 1, 1},
  {&__pyx_n_s_secondary_to_primary_base_conver, __pyx_k_secondary_to_primary_base_conver, sizeof(__pyx_k_secondary_to_primary_base_conver), 0, 0, 1, 1},
  {&__pyx_n_s_secondary_to_primary_quote_conve, __pyx_k_secondary_to_primary_quote_conve, sizeof(__pyx_k_secondary_to_primary_quote_conve), 0, 0, 1, 1},
  {&__pyx_kp_u_seconds, __pyx_k_seconds, sizeof(__pyx_k_seconds), 0, 1, 0, 0},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_kp_s_self__events_cannot_be_converted, __pyx_k_self__events_cannot_be_converted, sizeof(__pyx_k_self__events_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_u_sell_limit_order_completed_on, __pyx_k_sell_limit_order_completed_on, sizeof(__pyx_k_sell_limit_order_completed_on), 0, 1, 0, 0},
  {&__pyx_n_s_sell_market, __pyx_k_sell_market, sizeof(__pyx_k_sell_market), 0, 0, 1, 1},
  {&__pyx_n_s_sell_market_conversion_rate, __pyx_k_sell_market_conversion_rate, sizeof(__pyx_k_sell_market_conversion_rate), 0, 0, 1, 1},
  {&__pyx_n_s_sell_market_trading_pair, __pyx_k_sell_market_trading_pair, sizeof(__pyx_k_sell_market_trading_pair), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_smart_round, __pyx_k_smart_round, sizeof(__pyx_k_smart_round), 0, 0, 1, 1},
  {&__pyx_n_s_source, __pyx_k_source, sizeof(__pyx_k_source), 0, 0, 1, 1},
  {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_status_report_interval, __pyx_k_status_report_interval, sizeof(__pyx_k_status_report_interval), 0, 0, 1, 1},
  {&__pyx_n_u_step_amount, __pyx_k_step_amount, sizeof(__pyx_k_step_amount), 0, 1, 0, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_kp_u_take_ask_on, __pyx_k_take_ask_on, sizeof(__pyx_k_take_ask_on), 0, 1, 0, 0},
  {&__pyx_kp_u_take_ask_on_2, __pyx_k_take_ask_on_2, sizeof(__pyx_k_take_ask_on_2), 0, 1, 0, 0},
  {&__pyx_kp_u_take_bid_on, __pyx_k_take_bid_on, sizeof(__pyx_k_take_bid_on), 0, 1, 0, 0},
  {&__pyx_kp_u_take_bid_on_2, __pyx_k_take_bid_on_2, sizeof(__pyx_k_take_bid_on_2), 0, 1, 0, 0},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_to_string, __pyx_k_to_string, sizeof(__pyx_k_to_string), 0, 0, 1, 1},
  {&__pyx_n_s_tracked_limit_orders, __pyx_k_tracked_limit_orders, sizeof(__pyx_k_tracked_limit_orders), 0, 0, 1, 1},
  {&__pyx_n_s_tracked_limit_orders_data_frame, __pyx_k_tracked_limit_orders_data_frame, sizeof(__pyx_k_tracked_limit_orders_data_frame), 0, 0, 1, 1},
  {&__pyx_n_s_tracked_limit_orders_df, __pyx_k_tracked_limit_orders_df, sizeof(__pyx_k_tracked_limit_orders_df), 0, 0, 1, 1},
  {&__pyx_n_s_tracked_market_orders, __pyx_k_tracked_market_orders, sizeof(__pyx_k_tracked_market_orders), 0, 0, 1, 1},
  {&__pyx_n_s_tracked_market_orders_data_frame, __pyx_k_tracked_market_orders_data_frame, sizeof(__pyx_k_tracked_market_orders_data_frame), 0, 0, 1, 1},
  {&__pyx_n_s_tracked_market_orders_df, __pyx_k_tracked_market_orders_df, sizeof(__pyx_k_tracked_market_orders_df), 0, 0, 1, 1},
  {&__pyx_n_s_trading_pair, __pyx_k_trading_pair, sizeof(__pyx_k_trading_pair), 0, 0, 1, 1},
  {&__pyx_n_s_typing, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {&__pyx_n_s_use_oracle_conversion_rate, __pyx_k_use_oracle_conversion_rate, sizeof(__pyx_k_use_oracle_conversion_rate), 0, 0, 1, 1},
  {&__pyx_n_s_wallet_balance_data_frame, __pyx_k_wallet_balance_data_frame, sizeof(__pyx_k_wallet_balance_data_frame), 0, 0, 1, 1},
  {&__pyx_n_s_warning, __pyx_k_warning, sizeof(__pyx_k_warning), 0, 0, 1, 1},
  {&__pyx_n_s_warning_lines, __pyx_k_warning_lines, sizeof(__pyx_k_warning_lines), 0, 0, 1, 1},
  {&__pyx_kp_u_with_amount, __pyx_k_with_amount, sizeof(__pyx_k_with_amount), 0, 1, 0, 0},
  #endif
  {0, 0, 0, 0, 0, 0, 0}
};
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) __PYX_ERR(0, 449, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 73, __pyx_L1_error)
  __pyx_builtin_round = __Pyx_GetBuiltinName(__pyx_n_s_round); if (!__pyx_builtin_round) __PYX_ERR(0, 197, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 229, __pyx_L1_error)
  __pyx_builtin_all = __Pyx_GetBuiltinName(__pyx_n_s_all); if (!__pyx_builtin_all) __PYX_ERR(0, 249, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) __PYX_ERR(0, 706, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 989, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":73
 *         """
 *         if len(market_pairs) < 0:
 *             raise ValueError(f"market_pairs must not be empty.")             # <<<<<<<<<<<<<<
 *         self._logging_options = logging_options
 *         self._market_pairs = market_pairs
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_market_pairs_must_not_be_empty); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":989
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(2, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(2, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":27
 * 
 * NaN = float("nan")
 * s_decimal_0 = Decimal(0)             # <<<<<<<<<<<<<<
 * as_logger = None
 * 
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":40
 *     OPTION_LOG_ALL = 0xfffffffffffffff
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls):
 *         global as_logger
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_n_s_cls); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__18, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_arbitrage_ar_2, __pyx_n_s_logger, 40, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 40, __pyx_L1_error)

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":55
 *                     failed_order_tolerance: int = 1,
 *                     use_oracle_conversion_rate: bool = False,
 *                     secondary_to_primary_base_conversion_rate: Decimal = Decimal("1"),             # <<<<<<<<<<<<<<
 *                     secondary_to_primary_quote_conversion_rate: Decimal = Decimal("1"),
 *                     hb_app_notification: bool = False):
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_u_1); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":47
 *         return as_logger
 * 
 *     def init_params(self,             # <<<<<<<<<<<<<<
 *                     market_pairs: List[ArbitrageMarketPair],
 *                     min_profitability: Decimal,
 */
  __pyx_tuple__21 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_market_pairs, __pyx_n_s_min_profitability, __pyx_n_s_logging_options, __pyx_n_s_status_report_interval, __pyx_n_s_next_trade_delay_interval, __pyx_n_s_failed_order_tolerance, __pyx_n_s_use_oracle_conversion_rate, __pyx_n_s_secondary_to_primary_base_conver, __pyx_n_s_secondary_to_primary_quote_conve, __pyx_n_s_hb_app_notification, __pyx_n_s_all_markets, __pyx_n_s_market_pair, __pyx_n_s_market); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(11, 0, 0, 14, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_arbitrage_ar_2, __pyx_n_s_init_params, 47, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 47, __pyx_L1_error)

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":125
 *         return self._sb_order_tracker.tracked_market_orders_data_frame
 * 
 *     def get_second_to_first_conversion_rate(self) -> Tuple[str, Decimal, str, Decimal]:             # <<<<<<<<<<<<<<
 *         """
 *         Find conversion rates from secondary market to primary market
 */
  __pyx_tuple__23 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_quote_rate, __pyx_n_s_quote_pair, __pyx_n_s_quote_rate_source, __pyx_n_s_base_rate, __pyx_n_s_base_pair, __pyx_n_s_base_rate_source); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_codeobj__24 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__23, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_arbitrage_ar_2, __pyx_n_s_get_second_to_first_conversion_r, 125, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__24)) __PYX_ERR(0, 125, __pyx_L1_error)

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":151
 *         return quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate
 * 
 *     def log_conversion_rates(self):             # <<<<<<<<<<<<<<
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_second_to_first_conversion_rate()
 */
  __pyx_tuple__25 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_quote_pair, __pyx_n_s_quote_rate_source, __pyx_n_s_quote_rate, __pyx_n_s_base_pair, __pyx_n_s_base_rate_source, __pyx_n_s_base_rate); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_codeobj__26 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__25, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_arbitrage_ar_2, __pyx_n_s_log_conversion_rates, 151, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__26)) __PYX_ERR(0, 151, __pyx_L1_error)

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":159
 *             self.logger().info(f"{base_pair} ({base_rate_source}) conversion rate: {PerformanceMetrics.smart_round(base_rate)}")
 * 
 *     def oracle_status_df(self):             # <<<<<<<<<<<<<<
 *         columns = ["Source", "Pair", "Rate"]
 *         data = []
 */
  __pyx_tuple__27 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_columns, __pyx_n_s_data, __pyx_n_s_quote_pair, __pyx_n_s_quote_rate_source, __pyx_n_s_quote_rate, __pyx_n_s_base_pair, __pyx_n_s_base_rate_source, __pyx_n_s_base_rate); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_codeobj__28 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 9, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__27, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_arbitrage_ar_2, __pyx_n_s_oracle_status_df, 159, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__28)) __PYX_ERR(0, 159, __pyx_L1_error)

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":174
 *         return pd.DataFrame(data=data, columns=columns)
 * 
 *     def format_status(self) -> str:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list lines = []
 */
  __pyx_tuple__29 = PyTuple_Pack(18, __pyx_n_s_self, __pyx_n_s_lines, __pyx_n_s_warning_lines, __pyx_n_s_market_pair, __pyx_n_s_markets_df, __pyx_n_s_oracle_df, __pyx_n_s_assets_df, __pyx_n_s_tracked_limit_orders, __pyx_n_s_tracked_market_orders, __pyx_n_s_tracked_limit_orders_df, __pyx_n_s_tracked_market_orders_df, __pyx_n_s_df_limit_lines, __pyx_n_s_df_market_lines, __pyx_n_s_line, __pyx_n_s_line, __pyx_n_s_line, __pyx_n_s_line, __pyx_n_s_line); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 18, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__29, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_arbitrage_ar_2, __pyx_n_s_format_status, 174, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 174, __pyx_L1_error)

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":227
 *         return "\n".join(lines)
 * 
 *     def notify_hb_app(self, msg: str):             # <<<<<<<<<<<<<<
 *         if self._hb_app_notification:
 *             super().notify_hb_app(msg)
 */
  __pyx_tuple__31 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_msg); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__31, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_arbitrage_ar_2, __pyx_n_s_notify_hb_app, 227, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 227, __pyx_L1_error)

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":449
 *             self.logger().info(self.format_status())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def find_profitable_arbitrage_orders(min_profitability: Decimal,
 *                                          buy_market_trading_pair: MarketTradingPairTuple,
 */
  __pyx_tuple__33 = PyTuple_Pack(5, __pyx_n_s_min_profitability, __pyx_n_s_buy_market_trading_pair, __pyx_n_s_sell_market_trading_pair, __pyx_n_s_buy_market_conversion_rate, __pyx_n_s_sell_market_conversion_rate); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__33, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_arbitrage_ar_2, __pyx_n_s_find_profitable_arbitrage_orders, 449, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 449, __pyx_L1_error)

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":462
 *                                                   sell_market_conversion_rate)
 * 
 *     def market_conversion_rate(self, market_info: MarketTradingPairTuple) -> Decimal:             # <<<<<<<<<<<<<<
 *         if market_info == self._market_pairs[0].first:
 *             return Decimal("1")
 */
  __pyx_tuple__36 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_market_info, __pyx_n_s__35, __pyx_n_s_quote_rate, __pyx_n_s_base_rate); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_arbitrage_ar_2, __pyx_n_s_market_conversion_rate, 462, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 462, __pyx_L1_error)

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":614
 *     # The following exposed Python functions are meant for unit tests
 *     # ---------------------------------------------------------------
 *     def find_best_profitable_amount(self, buy_market: MarketTradingPairTuple, sell_market: MarketTradingPairTuple):             # <<<<<<<<<<<<<<
 *         return self.c_find_best_profitable_amount(buy_market, sell_market)
 * 
 */
  __pyx_tuple__38 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_buy_market, __pyx_n_s_sell_market); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_arbitrage_ar_2, __pyx_n_s_find_best_profitable_amount, 614, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 614, __pyx_L1_error)

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":617
 *         return self.c_find_best_profitable_amount(buy_market, sell_market)
 * 
 *     def ready_for_new_orders(self, market_pair):             # <<<<<<<<<<<<<<
 *         return self.c_ready_for_new_orders(market_pair)
 *     # ---------------------------------------------------------------
 */
  __pyx_tuple__40 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_market_pair); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_arbitrage_ar_2, __pyx_n_s_ready_for_new_orders, 617, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 617, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __pyx_tuple__44 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_get.method_name = &__pyx_n_s_get;
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_InitString(__pyx_string_tab[0], &__pyx_kp_u_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[1], &__pyx_kp_u_8f) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[2], &__pyx_n_s_ArbitrageMarketPair) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[3], &__pyx_n_s_ArbitrageStrategy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[4], &__pyx_n_s_ArbitrageStrategy___reduce_cytho) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[5], &__pyx_n_s_ArbitrageStrategy___setstate_cyt) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[6], &__pyx_n_s_ArbitrageStrategy_find_best_prof) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[7], &__pyx_n_s_ArbitrageStrategy_find_profitabl) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[8], &__pyx_n_s_ArbitrageStrategy_format_status) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[9], &__pyx_n_s_ArbitrageStrategy_get_second_to) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[10], &__pyx_n_s_ArbitrageStrategy_init_params) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[11], &__pyx_n_s_ArbitrageStrategy_log_conversion) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[12], &__pyx_n_s_ArbitrageStrategy_logger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[13], &__pyx_n_s_ArbitrageStrategy_market_convers) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[14], &__pyx_n_s_ArbitrageStrategy_notify_hb_app) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[15], &__pyx_n_s_ArbitrageStrategy_oracle_status) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[16], &__pyx_n_s_ArbitrageStrategy_ready_for_new) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[17], &__pyx_kp_u_Assets) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[18], &__pyx_n_s_BUY) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[19], &__pyx_kp_u_Base_asset_available_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[20], &__pyx_kp_u_Base_asset_needed) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[21], &__pyx_n_s_CONNECTED) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[22], &__pyx_kp_u_Cool_off_completed_Arbitrage_str) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[23], &__pyx_kp_u_Cooling_off_from_previous_trade) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[24], &__pyx_kp_u_Current_step_profitability) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[25], &__pyx_n_s_DEBUG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[26], &__pyx_n_s_DataFrame) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[27], &__pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[28], &__pyx_n_s_ExchangeBase) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[29], &__pyx_kp_u_Executing_limit_order_buy_of) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[30], &__pyx_n_s_INFO) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[31], &__pyx_n_s_ImportError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[32], &__pyx_n_s_LimitOrder) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[33], &__pyx_kp_u_Limit_order_completed_on) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[34], &__pyx_n_s_List) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[35], &__pyx_kp_s_List_ArbitrageMarketPair) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[36], &__pyx_n_s_MarketOrder) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[37], &__pyx_n_s_MarketTradingPairTuple) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[38], &__pyx_kp_u_Market_order_canceled_on) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[39], &__pyx_kp_u_Markets) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[40], &__pyx_kp_u_Markets_are_not_all_online_No_ar) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[41], &__pyx_kp_u_Markets_are_not_ready_No_arbitra) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[42], &__pyx_kp_u_Markets_are_ready_Trading_starte) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[43], &__pyx_n_s_NaN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[44], &__pyx_n_s_NetworkStatus) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[45], &__pyx_kp_u_No_pending_limit_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[46], &__pyx_kp_u_None) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[47], &__pyx_kp_u_Not_enough_asset_to_complete_thi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[48], &__pyx_n_s_OPTION_LOG_ALL) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[49], &__pyx_n_s_OPTION_LOG_CREATE_ORDER) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[50], &__pyx_n_s_OPTION_LOG_FULL_PROFITABILITY_ST) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[51], &__pyx_n_s_OPTION_LOG_INSUFFICIENT_ASSET) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[52], &__pyx_n_s_OPTION_LOG_ORDER_COMPLETED) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[53], &__pyx_n_s_OPTION_LOG_PROFITABILITY_STEP) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[54], &__pyx_n_s_OPTION_LOG_STATUS_REPORT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[55], &__pyx_n_s_OrderBook) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[56], &__pyx_n_s_OrderType) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[57], &__pyx_n_u_Pair) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[58], &__pyx_kp_u_Pending_limit_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[59], &__pyx_n_s_PerformanceMetrics) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[60], &__pyx_kp_u_Profitability_without_fees) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[61], &__pyx_kp_u_Quote_asset_available_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[62], &__pyx_n_u_Rate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[63], &__pyx_n_s_RateOracle) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[64], &__pyx_kp_u_Rate_conversion) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[65], &__pyx_kp_u_Resuming_in) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[66], &__pyx_n_s_SELL) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[67], &__pyx_n_u_Source) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[68], &__pyx_n_s_StopIteration) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[69], &__pyx_n_s_StrategyBase) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[70], &__pyx_kp_u_Total_profitability_with_fees) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[71], &__pyx_n_s_TradeType) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[72], &__pyx_n_s_Tuple) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[73], &__pyx_kp_s_Tuple_str_Decimal_str_Decimal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[74], &__pyx_n_s_TypeError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[75], &__pyx_n_s_ValueError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[76], &__pyx_kp_u_WARNINGS) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[77], &__pyx_kp_u__10) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[78], &__pyx_kp_u__11) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[79], &__pyx_kp_u__12) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[80], &__pyx_kp_u__13) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[81], &__pyx_n_s__16) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[82], &__pyx_n_s__35) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[83], &__pyx_n_s__46) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[84], &__pyx_kp_u__5) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[85], &__pyx_kp_u__6) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[86], &__pyx_kp_u__7) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[87], &__pyx_kp_u__8) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[88], &__pyx_kp_u__9) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[89], &__pyx_n_s_all) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[90], &__pyx_n_s_all_markets) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[91], &__pyx_n_s_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[92], &__pyx_kp_u_and_profitability) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[93], &__pyx_kp_u_and_sell_of) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[94], &__pyx_n_s_as_logger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[95], &__pyx_n_u_ask_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[96], &__pyx_n_u_ask_price_adjusted) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[97], &__pyx_n_s_assets_df) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[98], &__pyx_n_s_asyncio_coroutines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[99], &__pyx_kp_u_at) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[100], &__pyx_n_s_balance_warning) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[101], &__pyx_n_s_base_asset) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[102], &__pyx_n_s_base_asset_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[103], &__pyx_n_s_base_pair) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[104], &__pyx_n_s_base_rate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[105], &__pyx_n_s_base_rate_source) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[106], &__pyx_kp_u_bid_ask_price_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[107], &__pyx_n_u_bid_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[108], &__pyx_n_u_bid_price_adjusted) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[109], &__pyx_n_s_bool) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[110], &__pyx_kp_u_buy_limit_order_completed_on) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[111], &__pyx_n_s_buy_market) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[112], &__pyx_n_s_buy_market_conversion_rate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[113], &__pyx_n_s_buy_market_trading_pair) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[114], &__pyx_n_s_cline_in_traceback) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[115], &__pyx_n_s_cls) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[116], &__pyx_n_s_columns) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[117], &__pyx_kp_u_conversion_rate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[118], &__pyx_n_s_data) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[119], &__pyx_n_s_decimal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[120], &__pyx_n_s_df_limit_lines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[121], &__pyx_n_s_df_market_lines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[122], &__pyx_n_s_dict) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[123], &__pyx_kp_u_disable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[124], &__pyx_n_s_empty) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[125], &__pyx_kp_u_enable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[126], &__pyx_n_s_failed_order_tolerance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[127], &__pyx_n_s_find_best_profitable_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[128], &__pyx_n_s_find_profitable_arbitrage_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[129], &__pyx_n_s_first) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[130], &__pyx_n_u_fixed) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[131], &__pyx_n_s_flat_fees) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[132], &__pyx_n_s_float) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[133], &__pyx_n_s_format_status) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[134], &__pyx_kp_u_gc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[135], &__pyx_n_s_get) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[136], &__pyx_n_s_getLogger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[137], &__pyx_n_s_get_instance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[138], &__pyx_n_s_get_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[139], &__pyx_n_s_get_second_to_first_conversion_r) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[140], &__pyx_n_s_get_taker_order_type) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[141], &__pyx_n_s_getstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[142], &__pyx_n_s_hb_app_notification) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[143], &__pyx_n_s_hummingbot_client_performance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[144], &__pyx_n_s_hummingbot_connector_exchange_ba) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[145], &__pyx_n_s_hummingbot_core_data_type_limit) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[146], &__pyx_n_s_hummingbot_core_data_type_market) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[147], &__pyx_n_s_hummingbot_core_data_type_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[148], &__pyx_n_s_hummingbot_core_event_events) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[149], &__pyx_n_s_hummingbot_core_network_iterator) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[150], &__pyx_n_s_hummingbot_core_rate_oracle_rate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[151], &__pyx_n_s_hummingbot_strategy_arbitrage_ar) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[152], &__pyx_kp_s_hummingbot_strategy_arbitrage_ar_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[153], &__pyx_n_s_hummingbot_strategy_arbitrage_ar_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[154], &__pyx_n_s_hummingbot_strategy_market_tradi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[155], &__pyx_n_s_hummingbot_strategy_strategy_bas) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[156], &__pyx_n_s_import) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[157], &__pyx_n_s_info) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[158], &__pyx_n_s_init_params) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[159], &__pyx_n_s_initializing) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[160], &__pyx_n_s_int) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[161], &__pyx_n_s_is_coroutine) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[162], &__pyx_kp_u_isenabled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[163], &__pyx_n_s_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[164], &__pyx_n_s_lines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[165], &__pyx_n_s_log_conversion_rates) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[166], &__pyx_n_s_log_with_clock) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[167], &__pyx_n_s_logger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[168], &__pyx_n_s_logging) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[169], &__pyx_n_s_logging_options) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[170], &__pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[171], &__pyx_n_s_market) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[172], &__pyx_n_s_market_conversion_rate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[173], &__pyx_n_s_market_info) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[174], &__pyx_n_s_market_pair) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[175], &__pyx_n_s_market_pairs) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[176], &__pyx_kp_u_market_pairs_must_not_be_empty) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[177], &__pyx_n_s_market_status_data_frame) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[178], &__pyx_n_s_markets_df) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[179], &__pyx_n_s_min_profitability) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[180], &__pyx_n_s_msg) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[181], &__pyx_n_s_name) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[182], &__pyx_n_s_name_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[183], &__pyx_n_u_nan) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[184], &__pyx_n_s_network_status) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[185], &__pyx_n_s_network_warning) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[186], &__pyx_n_s_next_trade_delay_interval) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[187], &__pyx_n_s_notify_hb_app) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[188], &__pyx_n_s_notify_hb_app_with_timestamp) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[189], &__pyx_kp_u_numpy_core_multiarray_failed_to) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[190], &__pyx_kp_u_numpy_core_umath_failed_to_impor) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[191], &__pyx_n_s_oracle_df) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[192], &__pyx_n_s_oracle_status_df) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[193], &__pyx_n_s_order_book) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[194], &__pyx_n_s_order_book_ask_entries) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[195], &__pyx_n_s_order_book_bid_entries) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[196], &__pyx_n_s_order_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[197], &__pyx_n_s_pandas) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[198], &__pyx_n_s_pd) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[199], &__pyx_n_s_percent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[200], &__pyx_n_s_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[201], &__pyx_n_s_pyx_state) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[202], &__pyx_n_s_pyx_vtable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[203], &__pyx_n_s_quote_asset) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[204], &__pyx_n_s_quote_pair) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[205], &__pyx_n_s_quote_rate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[206], &__pyx_n_s_quote_rate_source) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[207], &__pyx_n_s_rate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[208], &__pyx_n_u_raw_profitability) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[209], &__pyx_n_s_ready) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[210], &__pyx_n_s_ready_for_new_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[211], &__pyx_n_s_reduce) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[212], &__pyx_n_s_reduce_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[213], &__pyx_n_s_reduce_ex) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[214], &__pyx_n_s_return) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[215], &__pyx_n_s_round) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[216], &__pyx_n_s_s_decimal_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[217], &__pyx_n_s_second) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[218], &__pyx_n_s_secondary_to_primary_base_conver) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[219], &__pyx_n_s_secondary_to_primary_quote_conve) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[220], &__pyx_kp_u_seconds) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[221], &__pyx_n_s_self) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[222], &__pyx_kp_s_self__events_cannot_be_converted) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[223], &__pyx_kp_u_sell_limit_order_completed_on) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[224], &__pyx_n_s_sell_market) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[225], &__pyx_n_s_sell_market_conversion_rate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[226], &__pyx_n_s_sell_market_trading_pair) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[227], &__pyx_n_s_setstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[228], &__pyx_n_s_setstate_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[229], &__pyx_n_s_smart_round) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[230], &__pyx_n_s_source) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[231], &__pyx_n_s_spec) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[232], &__pyx_n_s_split) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[233], &__pyx_n_s_staticmethod) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[234], &__pyx_n_s_status_report_interval) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[235], &__pyx_n_u_step_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[236], &__pyx_n_s_str) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[237], &__pyx_kp_s_stringsource) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[238], &__pyx_n_s_super) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[239], &__pyx_kp_u_take_ask_on) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[240], &__pyx_kp_u_take_ask_on_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[241], &__pyx_kp_u_take_bid_on) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[242], &__pyx_kp_u_take_bid_on_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[243], &__pyx_n_s_test) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[244], &__pyx_n_s_to_string) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[245], &__pyx_n_s_tracked_limit_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[246], &__pyx_n_s_tracked_limit_orders_data_frame) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[247], &__pyx_n_s_tracked_limit_orders_df) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[248], &__pyx_n_s_tracked_market_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[249], &__pyx_n_s_tracked_market_orders_data_frame) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[250], &__pyx_n_s_tracked_market_orders_df) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[251], &__pyx_n_s_trading_pair) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[252], &__pyx_n_s_typing) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[253], &__pyx_n_s_use_oracle_conversion_rate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[254], &__pyx_n_s_wallet_balance_data_frame) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[255], &__pyx_n_s_warning) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[256], &__pyx_n_s_warning_lines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[257], &__pyx_kp_u_with_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  __pyx_float_15_0 = PyFloat_FromDouble(15.0); if (unlikely(!__pyx_float_15_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_60_0 = PyFloat_FromDouble(60.0); if (unlikely(!__pyx_float_60_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_16 = PyInt_FromLong(16); if (unlikely(!__pyx_int_16)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_32 = PyInt_FromLong(32); if (unlikely(!__pyx_int_32)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1152921504606846975 = PyInt_FromString((char *)"1152921504606846975", 0, 0); if (unlikely(!__pyx_int_1152921504606846975)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("c_find_profitable_arbitrage_orders", (void (*)(void))__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_c_find_profitable_arbitrage_orders, "PyObject *(PyObject *, PyObject *, PyObject *, PyObject *, PyObject *)") < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("hummingbot.strategy.strategy_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.strategy.strategy_base", "StrategyBase", sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase = (struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase); if (unlikely(!__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy = &__pyx_vtable_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy;
  __pyx_vtable_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy.__pyx_base = *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase;
  __pyx_vtable_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy.__pyx_base.__pyx_base.c_tick = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, double))__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_tick;
  __pyx_vtable_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy.__pyx_base.c_did_cancel_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_did_cancel_order;
  __pyx_vtable_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy.__pyx_base.c_did_complete_buy_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_did_complete_buy_order;
  __pyx_vtable_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy.__pyx_base.c_did_complete_sell_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_did_complete_sell_order;
  __pyx_vtable_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy.c_calculate_arbitrage_top_order_profitability = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_calculate_arbitrage_top_order_profitability;
  __pyx_vtable_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy.c_process_market_pair = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_process_market_pair;
  __pyx_vtable_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy.c_process_market_pair_inner = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *, PyObject *, PyObject *))__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_process_market_pair_inner;
  __pyx_vtable_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy.c_find_best_profitable_amount = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *, PyObject *, PyObject *))__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_find_best_profitable_amount;
  __pyx_vtable_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy.c_ready_for_new_orders = (int (*)(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_c_ready_for_new_orders;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy = PyType_FromSpecWithBases(&__pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy_spec, __pyx_t_2); if (unlikely(!__pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  #else
  __pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy.tp_base = __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase;
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy.tp_dictoffset && __pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy, __pyx_vtabptr_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy.tp_dict, __pyx_vtabptr_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  if (__Pyx_MergeVtables(&__pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ArbitrageStrategy, __pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_ArbitrageStrategy, (PyObject *)&__pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  #endif
  if (__pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy.tp_weaklistoffset == 0) __pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy, __pyx_base.__pyx_base.__pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy;
  #else
  __pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy = &__pyx_type_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy;
  #endif
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_listener"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_listener", "EventListener", sizeof(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener) __PYX_ERR(3, 6, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener)) __PYX_ERR(3, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.pubsub"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_6pubsub_PubSub = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.pubsub", "PubSub", sizeof(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_6pubsub_PubSub) __PYX_ERR(4, 17, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub = (struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_6pubsub_PubSub); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub)) __PYX_ERR(4, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.order_book_query_result"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book_query_result", "OrderBookQueryResult", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult) __PYX_ERR(5, 3, __pyx_L1_error)
  __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book_query_result", "ClientOrderBookQueryResult", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult) __PYX_ERR(5, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(6, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 203, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 230, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 239, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(2, 813, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_number) __PYX_ERR(2, 815, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(2, 817, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(2, 819, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(2, 821, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(2, 823, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(2, 825, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(2, 827, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(2, 829, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_character) __PYX_ERR(2, 831, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 869, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.order_book"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book", "OrderBook", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook) __PYX_ERR(7, 12, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook = (struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook)) __PYX_ERR(7, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.clock"); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5clock_Clock = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.clock", "Clock", sizeof(struct __pyx_obj_10hummingbot_4core_5clock_Clock), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5clock_Clock) __PYX_ERR(8, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.time_iterator"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.time_iterator", "TimeIterator", sizeof(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator) __PYX_ERR(9, 7, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator = (struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator)) __PYX_ERR(9, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.limit_order"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.limit_order", "LimitOrder", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder) __PYX_ERR(10, 6, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_9data_type_11limit_order_LimitOrder = (struct __pyx_vtabstruct_10hummingbot_4core_9data_type_11limit_order_LimitOrder*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_9data_type_11limit_order_LimitOrder)) __PYX_ERR(10, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.strategy.order_tracker"); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker = __Pyx_ImportType(__pyx_t_1, "hummingbot.strategy.order_tracker", "OrderTracker", sizeof(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker) __PYX_ERR(11, 7, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_8strategy_13order_tracker_OrderTracker = (struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker); if (unlikely(!__pyx_vtabptr_10hummingbot_8strategy_13order_tracker_OrderTracker)) __PYX_ERR(11, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_reporter"); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_reporter", "EventReporter", sizeof(struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter) __PYX_ERR(12, 4, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter)) __PYX_ERR(12, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_logger"); if (unlikely(!__pyx_t_1)) __PYX_ERR(13, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_logger", "EventLogger", sizeof(struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger) __PYX_ERR(13, 4, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger = (struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger)) __PYX_ERR(13, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.network_iterator"); if (unlikely(!__pyx_t_1)) __PYX_ERR(14, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.network_iterator", "NetworkIterator", sizeof(struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator) __PYX_ERR(14, 6, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator = (struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator)) __PYX_ERR(14, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.connector_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.connector_base", "ConnectorBase", sizeof(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase) __PYX_ERR(15, 5, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase = (struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase); if (unlikely(!__pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase)) __PYX_ERR(15, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.exchange_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(16, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.exchange_base", "ExchangeBase", sizeof(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase) __PYX_ERR(16, 10, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase = (struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase); if (unlikely(!__pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase)) __PYX_ERR(16, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_arbitrage(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_arbitrage},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "arbitrage",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_COMPILING_IN_LIMITED_API
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_COMPILING_IN_LIMITED_API
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initarbitrage(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initarbitrage(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_arbitrage(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_arbitrage(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_arbitrage(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'arbitrage' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("arbitrage", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyState_AddModule(__pyx_t_1, &__pyx_moduledef) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_arbitrage(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_hummingbot__strategy__arbitrage__arbitrage) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "hummingbot.strategy.arbitrage.arbitrage")) {
      if (unlikely((PyDict_SetItemString(modules, "hummingbot.strategy.arbitrage.arbitrage", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  if (unlikely((__Pyx_modinit_function_export_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":2
 * # distutils: language=c++
 * import logging             # <<<<<<<<<<<<<<
 * from decimal import Decimal
 * import pandas as pd
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_logging, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":3
 * # distutils: language=c++
 * import logging
 * from decimal import Decimal             # <<<<<<<<<<<<<<
 * import pandas as pd
 * from typing import (
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Decimal);
  __Pyx_GIVEREF(__pyx_n_s_Decimal);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Decimal);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_decimal, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Decimal, __pyx_t_1) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":4
 * import logging
 * from decimal import Decimal
 * import pandas as pd             # <<<<<<<<<<<<<<
 * from typing import (
 *     List,
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_pandas, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pd, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":6
 * import pandas as pd
 * from typing import (
 *     List,             # <<<<<<<<<<<<<<
 *     Tuple,
 * )
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_List);
  __Pyx_GIVEREF(__pyx_n_s_List);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_List);
  __Pyx_INCREF(__pyx_n_s_Tuple);
  __Pyx_GIVEREF(__pyx_n_s_Tuple);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_Tuple);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":5
 * from decimal import Decimal
 * import pandas as pd
 * from typing import (             # <<<<<<<<<<<<<<
 *     List,
 *     Tuple,
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_typing, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_List); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_List, __pyx_t_2) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Tuple); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Tuple, __pyx_t_2) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":10
 * )
 * 
 * from hummingbot.connector.exchange_base import ExchangeBase             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange_base cimport ExchangeBase
 * from hummingbot.core.event.events import (
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ExchangeBase);
  __Pyx_GIVEREF(__pyx_n_s_ExchangeBase);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ExchangeBase);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_ba, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":13
 * from hummingbot.connector.exchange_base cimport ExchangeBase
 * from hummingbot.core.event.events import (
 *     TradeType,             # <<<<<<<<<<<<<<
 *     OrderType,
 * )
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_TradeType);
  __Pyx_GIVEREF(__pyx_n_s_TradeType);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_TradeType);
  __Pyx_INCREF(__pyx_n_s_OrderType);
  __Pyx_GIVEREF(__pyx_n_s_OrderType);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_OrderType);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":12
 * from hummingbot.connector.exchange_base import ExchangeBase
 * from hummingbot.connector.exchange_base cimport ExchangeBase
 * from hummingbot.core.event.events import (             # <<<<<<<<<<<<<<
 *     TradeType,
 *     OrderType,
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_event_events, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TradeType, __pyx_t_2) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderType, __pyx_t_2) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":16
 *     OrderType,
 * )
 * from hummingbot.core.data_type.limit_order import LimitOrder             # <<<<<<<<<<<<<<
 * from hummingbot.core.data_type.market_order import MarketOrder
 * from hummingbot.core.data_type.order_book import OrderBook
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_LimitOrder);
  __Pyx_GIVEREF(__pyx_n_s_LimitOrder);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_LimitOrder);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_data_type_limit, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_LimitOrder); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LimitOrder, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":17
 * )
 * from hummingbot.core.data_type.limit_order import LimitOrder
 * from hummingbot.core.data_type.market_order import MarketOrder             # <<<<<<<<<<<<<<
 * from hummingbot.core.data_type.order_book import OrderBook
 * from hummingbot.core.network_iterator import NetworkStatus
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_MarketOrder);
  __Pyx_GIVEREF(__pyx_n_s_MarketOrder);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_MarketOrder);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_data_type_market, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_MarketOrder); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MarketOrder, __pyx_t_2) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":18
 * from hummingbot.core.data_type.limit_order import LimitOrder
 * from hummingbot.core.data_type.market_order import MarketOrder
 * from hummingbot.core.data_type.order_book import OrderBook             # <<<<<<<<<<<<<<
 * from hummingbot.core.network_iterator import NetworkStatus
 * from hummingbot.strategy.strategy_base import StrategyBase
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_OrderBook);
  __Pyx_GIVEREF(__pyx_n_s_OrderBook);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_OrderBook);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_data_type_order, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":19
 * from hummingbot.core.data_type.market_order import MarketOrder
 * from hummingbot.core.data_type.order_book import OrderBook
 * from hummingbot.core.network_iterator import NetworkStatus             # <<<<<<<<<<<<<<
 * from hummingbot.strategy.strategy_base import StrategyBase
 * from hummingbot.strategy.market_trading_pair_tuple import MarketTradingPairTuple
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NetworkStatus);
  __Pyx_GIVEREF(__pyx_n_s_NetworkStatus);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NetworkStatus);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_network_iterator, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NetworkStatus, __pyx_t_2) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":20
 * from hummingbot.core.data_type.order_book import OrderBook
 * from hummingbot.core.network_iterator import NetworkStatus
 * from hummingbot.strategy.strategy_base import StrategyBase             # <<<<<<<<<<<<<<
 * from hummingbot.strategy.market_trading_pair_tuple import MarketTradingPairTuple
 * from hummingbot.strategy.arbitrage.arbitrage_market_pair import ArbitrageMarketPair
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_StrategyBase);
  __Pyx_GIVEREF(__pyx_n_s_StrategyBase);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_StrategyBase);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_strategy_strategy_bas, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":21
 * from hummingbot.core.network_iterator import NetworkStatus
 * from hummingbot.strategy.strategy_base import StrategyBase
 * from hummingbot.strategy.market_trading_pair_tuple import MarketTradingPairTuple             # <<<<<<<<<<<<<<
 * from hummingbot.strategy.arbitrage.arbitrage_market_pair import ArbitrageMarketPair
 * from hummingbot.core.rate_oracle.rate_oracle import RateOracle
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_MarketTradingPairTuple);
  __Pyx_GIVEREF(__pyx_n_s_MarketTradingPairTuple);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_MarketTradingPairTuple);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_strategy_market_tradi, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_MarketTradingPairTuple); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MarketTradingPairTuple, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":22
 * from hummingbot.strategy.strategy_base import StrategyBase
 * from hummingbot.strategy.market_trading_pair_tuple import MarketTradingPairTuple
 * from hummingbot.strategy.arbitrage.arbitrage_market_pair import ArbitrageMarketPair             # <<<<<<<<<<<<<<
 * from hummingbot.core.rate_oracle.rate_oracle import RateOracle
 * from hummingbot.client.performance import PerformanceMetrics
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ArbitrageMarketPair);
  __Pyx_GIVEREF(__pyx_n_s_ArbitrageMarketPair);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ArbitrageMarketPair);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_strategy_arbitrage_ar, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ArbitrageMarketPair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ArbitrageMarketPair, __pyx_t_1) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":23
 * from hummingbot.strategy.market_trading_pair_tuple import MarketTradingPairTuple
 * from hummingbot.strategy.arbitrage.arbitrage_market_pair import ArbitrageMarketPair
 * from hummingbot.core.rate_oracle.rate_oracle import RateOracle             # <<<<<<<<<<<<<<
 * from hummingbot.client.performance import PerformanceMetrics
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_RateOracle);
  __Pyx_GIVEREF(__pyx_n_s_RateOracle);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_RateOracle);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_rate_oracle_rate, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_RateOracle); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_RateOracle, __pyx_t_2) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":24
 * from hummingbot.strategy.arbitrage.arbitrage_market_pair import ArbitrageMarketPair
 * from hummingbot.core.rate_oracle.rate_oracle import RateOracle
 * from hummingbot.client.performance import PerformanceMetrics             # <<<<<<<<<<<<<<
 * 
 * NaN = float("nan")
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_PerformanceMetrics);
  __Pyx_GIVEREF(__pyx_n_s_PerformanceMetrics);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_PerformanceMetrics);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_client_performance, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_PerformanceMetrics); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PerformanceMetrics, __pyx_t_1) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":26
 * from hummingbot.client.performance import PerformanceMetrics
 * 
 * NaN = float("nan")             # <<<<<<<<<<<<<<
 * s_decimal_0 = Decimal(0)
 * as_logger = None
 */
  __pyx_t_3 = __Pyx_PyUnicode_AsDouble(__pyx_n_u_nan); if (unlikely(__pyx_t_3 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 26, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NaN, __pyx_t_2) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":27
 * 
 * NaN = float("nan")
 * s_decimal_0 = Decimal(0)             # <<<<<<<<<<<<<<
 * as_logger = None
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_s_decimal_0, __pyx_t_1) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":28
 * NaN = float("nan")
 * s_decimal_0 = Decimal(0)
 * as_logger = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_as_logger, Py_None) < 0) __PYX_ERR(0, 28, __pyx_L1_error)

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":32
 * 
 * cdef class ArbitrageStrategy(StrategyBase):
 *     OPTION_LOG_STATUS_REPORT = 1 << 0             # <<<<<<<<<<<<<<
 *     OPTION_LOG_CREATE_ORDER = 1 << 1
 *     OPTION_LOG_ORDER_COMPLETED = 1 << 2
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_OPTION_LOG_STATUS_REPORT, __pyx_int_1) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":33
 * cdef class ArbitrageStrategy(StrategyBase):
 *     OPTION_LOG_STATUS_REPORT = 1 << 0
 *     OPTION_LOG_CREATE_ORDER = 1 << 1             # <<<<<<<<<<<<<<
 *     OPTION_LOG_ORDER_COMPLETED = 1 << 2
 *     OPTION_LOG_PROFITABILITY_STEP = 1 << 3
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_OPTION_LOG_CREATE_ORDER, __pyx_int_2) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":34
 *     OPTION_LOG_STATUS_REPORT = 1 << 0
 *     OPTION_LOG_CREATE_ORDER = 1 << 1
 *     OPTION_LOG_ORDER_COMPLETED = 1 << 2             # <<<<<<<<<<<<<<
 *     OPTION_LOG_PROFITABILITY_STEP = 1 << 3
 *     OPTION_LOG_FULL_PROFITABILITY_STEP = 1 << 4
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_OPTION_LOG_ORDER_COMPLETED, __pyx_int_4) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":35
 *     OPTION_LOG_CREATE_ORDER = 1 << 1
 *     OPTION_LOG_ORDER_COMPLETED = 1 << 2
 *     OPTION_LOG_PROFITABILITY_STEP = 1 << 3             # <<<<<<<<<<<<<<
 *     OPTION_LOG_FULL_PROFITABILITY_STEP = 1 << 4
 *     OPTION_LOG_INSUFFICIENT_ASSET = 1 << 5
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_OPTION_LOG_PROFITABILITY_STEP, __pyx_int_8) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":36
 *     OPTION_LOG_ORDER_COMPLETED = 1 << 2
 *     OPTION_LOG_PROFITABILITY_STEP = 1 << 3
 *     OPTION_LOG_FULL_PROFITABILITY_STEP = 1 << 4             # <<<<<<<<<<<<<<
 *     OPTION_LOG_INSUFFICIENT_ASSET = 1 << 5
 *     OPTION_LOG_ALL = 0xfffffffffffffff
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_OPTION_LOG_FULL_PROFITABILITY_ST, __pyx_int_16) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":37
 *     OPTION_LOG_PROFITABILITY_STEP = 1 << 3
 *     OPTION_LOG_FULL_PROFITABILITY_STEP = 1 << 4
 *     OPTION_LOG_INSUFFICIENT_ASSET = 1 << 5             # <<<<<<<<<<<<<<
 *     OPTION_LOG_ALL = 0xfffffffffffffff
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_OPTION_LOG_INSUFFICIENT_ASSET, __pyx_int_32) < 0) __PYX_ERR(0, 37, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":38
 *     OPTION_LOG_FULL_PROFITABILITY_STEP = 1 << 4
 *     OPTION_LOG_INSUFFICIENT_ASSET = 1 << 5
 *     OPTION_LOG_ALL = 0xfffffffffffffff             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_OPTION_LOG_ALL, __pyx_int_1152921504606846975) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":40
 *     OPTION_LOG_ALL = 0xfffffffffffffff
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls):
 *         global as_logger
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_1logger, __Pyx_CYFUNCTION_CLASSMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArbitrageStrategy_logger, NULL, __pyx_n_s_hummingbot_strategy_arbitrage_ar_3, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_logger, __pyx_t_1) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_logger, __pyx_t_2) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":50
 *                     market_pairs: List[ArbitrageMarketPair],
 *                     min_profitability: Decimal,
 *                     logging_options: int = OPTION_LOG_ORDER_COMPLETED,             # <<<<<<<<<<<<<<
 *                     status_report_interval: float = 60.0,
 *                     next_trade_delay_interval: float = 15.0,
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy, __pyx_n_s_OPTION_LOG_ORDER_COMPLETED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k_ = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":55
 *                     failed_order_tolerance: int = 1,
 *                     use_oracle_conversion_rate: bool = False,
 *                     secondary_to_primary_base_conversion_rate: Decimal = Decimal("1"),             # <<<<<<<<<<<<<<
 *                     secondary_to_primary_quote_conversion_rate: Decimal = Decimal("1"),
 *                     hb_app_notification: bool = False):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__2 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":56
 *                     use_oracle_conversion_rate: bool = False,
 *                     secondary_to_primary_base_conversion_rate: Decimal = Decimal("1"),
 *                     secondary_to_primary_quote_conversion_rate: Decimal = Decimal("1"),             # <<<<<<<<<<<<<<
 *                     hb_app_notification: bool = False):
 *         """
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__3 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":50
 *                     market_pairs: List[ArbitrageMarketPair],
 *                     min_profitability: Decimal,
 *                     logging_options: int = OPTION_LOG_ORDER_COMPLETED,             # <<<<<<<<<<<<<<
 *                     status_report_interval: float = 60.0,
 *                     next_trade_delay_interval: float = 15.0,
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy, __pyx_n_s_OPTION_LOG_ORDER_COMPLETED); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":55
 *                     failed_order_tolerance: int = 1,
 *                     use_oracle_conversion_rate: bool = False,
 *                     secondary_to_primary_base_conversion_rate: Decimal = Decimal("1"),             # <<<<<<<<<<<<<<
 *                     secondary_to_primary_quote_conversion_rate: Decimal = Decimal("1"),
 *                     hb_app_notification: bool = False):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_kp_u_1};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":56
 *                     use_oracle_conversion_rate: bool = False,
 *                     secondary_to_primary_base_conversion_rate: Decimal = Decimal("1"),
 *                     secondary_to_primary_quote_conversion_rate: Decimal = Decimal("1"),             # <<<<<<<<<<<<<<
 *                     hb_app_notification: bool = False):
 *         """
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_kp_u_1};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":47
 *         return as_logger
 * 
 *     def init_params(self,             # <<<<<<<<<<<<<<
 *                     market_pairs: List[ArbitrageMarketPair],
 *                     min_profitability: Decimal,
 */
  __pyx_t_5 = PyTuple_New(8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
  __Pyx_INCREF(__pyx_float_60_0);
  __Pyx_GIVEREF(__pyx_float_60_0);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_float_60_0);
  __Pyx_INCREF(__pyx_float_15_0);
  __Pyx_GIVEREF(__pyx_float_15_0);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_float_15_0);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_int_1);
  __Pyx_INCREF(Py_False);
  __Pyx_GIVEREF(Py_False);
  PyTuple_SET_ITEM(__pyx_t_5, 4, Py_False);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 6, __pyx_t_4);
  __Pyx_INCREF(Py_False);
  __Pyx_GIVEREF(Py_False);
  PyTuple_SET_ITEM(__pyx_t_5, 7, Py_False);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(10); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_market_pairs, __pyx_kp_s_List_ArbitrageMarketPair) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_min_profitability, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_logging_options, __pyx_n_s_int) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_status_report_interval, __pyx_n_s_float) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_next_trade_delay_interval, __pyx_n_s_float) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_failed_order_tolerance, __pyx_n_s_int) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_use_oracle_conversion_rate, __pyx_n_s_bool) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_secondary_to_primary_base_conver, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_secondary_to_primary_quote_conve, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_hb_app_notification, __pyx_n_s_bool) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_3init_params, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArbitrageStrategy_init_params, NULL, __pyx_n_s_hummingbot_strategy_arbitrage_ar_3, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_t_5);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_init_params, __pyx_t_1) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":125
 *         return self._sb_order_tracker.tracked_market_orders_data_frame
 * 
 *     def get_second_to_first_conversion_rate(self) -> Tuple[str, Decimal, str, Decimal]:             # <<<<<<<<<<<<<<
 *         """
 *         Find conversion rates from secondary market to primary market
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_kp_s_Tuple_str_Decimal_str_Decimal) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_5get_second_to_first_conversion_rate, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArbitrageStrategy_get_second_to, NULL, __pyx_n_s_hummingbot_strategy_arbitrage_ar_3, __pyx_d, ((PyObject *)__pyx_codeobj__24)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_4, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_get_second_to_first_conversion_r, __pyx_t_4) < 0) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":151
 *         return quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate
 * 
 *     def log_conversion_rates(self):             # <<<<<<<<<<<<<<
 *         quote_pair, quote_rate_source, quote_rate, base_pair, base_rate_source, base_rate = \
 *             self.get_second_to_first_conversion_rate()
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_7log_conversion_rates, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArbitrageStrategy_log_conversion, NULL, __pyx_n_s_hummingbot_strategy_arbitrage_ar_3, __pyx_d, ((PyObject *)__pyx_codeobj__26)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_log_conversion_rates, __pyx_t_4) < 0) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":159
 *             self.logger().info(f"{base_pair} ({base_rate_source}) conversion rate: {PerformanceMetrics.smart_round(base_rate)}")
 * 
 *     def oracle_status_df(self):             # <<<<<<<<<<<<<<
 *         columns = ["Source", "Pair", "Rate"]
 *         data = []
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_9oracle_status_df, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArbitrageStrategy_oracle_status, NULL, __pyx_n_s_hummingbot_strategy_arbitrage_ar_3, __pyx_d, ((PyObject *)__pyx_codeobj__28)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_oracle_status_df, __pyx_t_4) < 0) __PYX_ERR(0, 159, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":174
 *         return pd.DataFrame(data=data, columns=columns)
 * 
 *     def format_status(self) -> str:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list lines = []
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_return, __pyx_n_s_str) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_11format_status, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArbitrageStrategy_format_status, NULL, __pyx_n_s_hummingbot_strategy_arbitrage_ar_3, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_format_status, __pyx_t_1) < 0) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":227
 *         return "\n".join(lines)
 * 
 *     def notify_hb_app(self, msg: str):             # <<<<<<<<<<<<<<
 *         if self._hb_app_notification:
 *             super().notify_hb_app(msg)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_msg, __pyx_n_s_str) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_13notify_hb_app, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArbitrageStrategy_notify_hb_app, NULL, __pyx_n_s_hummingbot_strategy_arbitrage_ar_3, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_4, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_notify_hb_app, __pyx_t_4) < 0) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":449
 *             self.logger().info(self.format_status())
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def find_profitable_arbitrage_orders(min_profitability: Decimal,
 *                                          buy_market_trading_pair: MarketTradingPairTuple,
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_min_profitability, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 449, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_buy_market_trading_pair, __pyx_n_s_MarketTradingPairTuple) < 0) __PYX_ERR(0, 449, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_sell_market_trading_pair, __pyx_n_s_MarketTradingPairTuple) < 0) __PYX_ERR(0, 449, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_15find_profitable_arbitrage_orders, __Pyx_CYFUNCTION_STATICMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArbitrageStrategy_find_profitabl, NULL, __pyx_n_s_hummingbot_strategy_arbitrage_ar_3, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_find_profitable_arbitrage_orders, __pyx_t_1) < 0) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy, __pyx_n_s_find_profitable_arbitrage_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_staticmethod, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_find_profitable_arbitrage_orders, __pyx_t_4) < 0) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":462
 *                                                   sell_market_conversion_rate)
 * 
 *     def market_conversion_rate(self, market_info: MarketTradingPairTuple) -> Decimal:             # <<<<<<<<<<<<<<
 *         if market_info == self._market_pairs[0].first:
 *             return Decimal("1")
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_market_info, __pyx_n_s_MarketTradingPairTuple) < 0) __PYX_ERR(0, 462, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_n_s_return, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 462, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_17market_conversion_rate, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArbitrageStrategy_market_convers, NULL, __pyx_n_s_hummingbot_strategy_arbitrage_ar_3, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_market_conversion_rate, __pyx_t_1) < 0) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":614
 *     # The following exposed Python functions are meant for unit tests
 *     # ---------------------------------------------------------------
 *     def find_best_profitable_amount(self, buy_market: MarketTradingPairTuple, sell_market: MarketTradingPairTuple):             # <<<<<<<<<<<<<<
 *         return self.c_find_best_profitable_amount(buy_market, sell_market)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_buy_market, __pyx_n_s_MarketTradingPairTuple) < 0) __PYX_ERR(0, 614, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_sell_market, __pyx_n_s_MarketTradingPairTuple) < 0) __PYX_ERR(0, 614, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_19find_best_profitable_amount, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArbitrageStrategy_find_best_prof, NULL, __pyx_n_s_hummingbot_strategy_arbitrage_ar_3, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_4, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_find_best_profitable_amount, __pyx_t_4) < 0) __PYX_ERR(0, 614, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":617
 *         return self.c_find_best_profitable_amount(buy_market, sell_market)
 * 
 *     def ready_for_new_orders(self, market_pair):             # <<<<<<<<<<<<<<
 *         return self.c_ready_for_new_orders(market_pair)
 *     # ---------------------------------------------------------------
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_21ready_for_new_orders, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArbitrageStrategy_ready_for_new, NULL, __pyx_n_s_hummingbot_strategy_arbitrage_ar_3, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy->tp_dict, __pyx_n_s_ready_for_new_orders, __pyx_t_4) < 0) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_9arbitrage_9arbitrage_ArbitrageStrategy);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_23__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArbitrageStrategy___reduce_cytho, NULL, __pyx_n_s_hummingbot_strategy_arbitrage_ar_3, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_9arbitrage_9arbitrage_17ArbitrageStrategy_25__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_ArbitrageStrategy___setstate_cyt, NULL, __pyx_n_s_hummingbot_strategy_arbitrage_ar_3, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_4) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "hummingbot/strategy/arbitrage/arbitrage.pyx":1
 * # distutils: language=c++             # <<<<<<<<<<<<<<
 * import logging
 * from decimal import Decimal
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1051
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init hummingbot.strategy.arbitrage.arbitrage", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(__pyx_m);
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init hummingbot.strategy.arbitrage.arbitrage");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;  // error
            return kwvalues[i];
        }
    }
    return NULL;  // not found (no exception set)
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        if (unlikely(PyTuple_GET_SIZE(kw) == 0))
            return 1;
        if (!kw_allowed) {
            key = PyTuple_GET_ITEM(kw, 0);
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < PyTuple_GET_SIZE(kw); pos++) {
            key = PyTuple_GET_ITEM(kw, pos);
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]);
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
    Py_DECREF(argstuple);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
#ifdef __Pyx_CyFunction_USED
        if (__Pyx_IsCyOrPyCFunction(func))
#else
        if (PyCFunction_Check(func))
#endif
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
                return __Pyx_PyObject_CallMethO(func, NULL);
            }
        }
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (PyCFunction_Check(func))
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
                return __Pyx_PyObject_CallMethO(func, args[0]);
            }
        }
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    #if CYTHON_VECTORCALL
    vectorcallfunc f = _PyVectorcall_Function(func);
    if (f) {
        return f(func, args, (size_t)nargs, kwargs);
    }
    #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
    if (__Pyx_CyFunction_CheckExact(func)) {
        __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
        if (f) return f(func, args, (size_t)nargs, kwargs);
    }
    #endif
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        if (kwds_is_tuple) {
            if (pos >= PyTuple_GET_SIZE(kwds)) break;
            key = PyTuple_GET_ITEM(kwds, pos);
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY ||  CYTHON_COMPILING_IN_LIMITED_API
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_MultiplyObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        
#ifdef HAVE_LONG_LONG
            if (sizeof(PY_LONG_LONG) > sizeof(long)) {
                PY_LONG_LONG result = (PY_LONG_LONG)a * (PY_LONG_LONG)b;
                return (result >= LONG_MIN && result <= LONG_MAX) ?
                    PyInt_FromLong((long)result) : PyLong_FromLongLong(result);
            }
#endif
#if CYTHON_USE_TYPE_SLOTS
            return PyInt_Type.tp_as_number->nb_multiply(op1, op2);
#else
            return PyNumber_Multiply(op1, op2);
#endif
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (unlikely(size == 0)) {
            return __Pyx_NewRef(op1);
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
            }
        }
                (void)a; (void)b;
                #ifdef HAVE_LONG_LONG
                lla = a;
                goto long_long;
                #else
                return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
                #endif
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla * llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("multiply", return NULL)
            result = ((double)a) * (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceMultiply : PyNumber_Multiply)(op1, op2);
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* set_iter */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set) {
#if CYTHON_COMPILING_IN_CPYTHON
    is_set = is_set || likely(PySet_CheckExact(iterable) || PyFrozenSet_CheckExact(iterable));
    *p_source_is_set = is_set;
    if (likely(is_set)) {
        *p_orig_length = PySet_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#else
    (void)is_set;
    *p_source_is_set = 0;
#endif
    *p_orig_length = 0;
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set) {
    if (!CYTHON_COMPILING_IN_CPYTHON || unlikely(!source_is_set)) {
        *value = PyIter_Next(iter_obj);
        if (unlikely(!*value)) {
            return __Pyx_IterFinish();
        }
        (void)orig_length;
        (void)ppos;
        return 1;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(PySet_GET_SIZE(iter_obj) != orig_length)) {
        PyErr_SetString(
            PyExc_RuntimeError,
            "set changed size during iteration");
        return -1;
    }
    {
        Py_hash_t hash;
        int ret = _PySet_NextEntry(iter_obj, ppos, value, &hash);
        assert (ret != -1);
        if (likely(ret)) {
            Py_INCREF(*value);
            return 1;
        }
    }
#endif
    return 0;
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyObjectFormat */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* obj, PyObject* format_spec) {
    int ret;
    _PyUnicodeWriter writer;
    if (likely(PyFloat_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyFloat_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else if (likely(PyLong_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyLong_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else {
        return PyObject_Format(obj, format_spec);
    }
    if (unlikely(ret == -1)) {
        _PyUnicodeWriter_Dealloc(&writer);
        return NULL;
    }
    return _PyUnicodeWriter_Finish(&writer);
}
#endif

/* PyUnicode_Unicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj) {
    if (unlikely(obj == Py_None))
        obj = __pyx_kp_u_None;
    return __Pyx_NewRef(obj);
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (unlikely(size == 0)) {
            return PyLong_FromLong(-intval);
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* RaiseMappingExpected */
static void __Pyx_RaiseMappingExpectedError(PyObject* arg) {
    __Pyx_TypeName arg_type_name = __Pyx_PyType_GetName(Py_TYPE(arg));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not a mapping", arg_type_name);
    __Pyx_DECREF_TypeName(arg_type_name);
}

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if ((PY_VERSION_HEX >= 0x030600B1) && flag == METH_FASTCALL) {
            if ((PY_VERSION_HEX >= 0x030700A0)) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if ((PY_VERSION_HEX >= 0x030700A0) && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* PyIntFromDouble */
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE PyObject* __Pyx_PyInt_FromDouble(double value) {
    if (value >= (double)LONG_MIN && value <= (double)LONG_MAX) {
        return PyInt_FromLong((long)value);
    }
    return PyLong_FromDouble(value);
}
#endif

/* WriteUnraisableException */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    CYTHON_UNUSED_VAR(clineno);
    CYTHON_UNUSED_VAR(lineno);
    CYTHON_UNUSED_VAR(filename);
    CYTHON_MAYBE_UNUSED_VAR(nogil);
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
        
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (unlikely(size == 0)) {
            return __Pyx_NewRef(op1);
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double b = __pyx_PyFloat_AsDouble(op2);
#else
        double b = PyFloat_AS_DOUBLE(op2);
#endif
            double result;
            
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
        
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (unlikely(size == 0)) {
            return __Pyx_NewRef(op1);
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double b = __pyx_PyFloat_AsDouble(op2);
#else
        double b = PyFloat_AS_DOUBLE(op2);
#endif
            double result;
            
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* IterNext */
static PyObject *__Pyx_PyIter_Next2Default(PyObject* defval) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_Occurred();
    if (unlikely(exc_type)) {
        if (!defval || unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return NULL;
        __Pyx_PyErr_Clear();
        Py_INCREF(defval);
        return defval;
    }
    if (defval) {
        Py_INCREF(defval);
        return defval;
    }
    __Pyx_PyErr_SetNone(PyExc_StopIteration);
    return NULL;
}
static void __Pyx_PyIter_Next_ErrorNoIterator(PyObject *iterator) {
    __Pyx_TypeName iterator_type_name = __Pyx_PyType_GetName(Py_TYPE(iterator));
    PyErr_Format(PyExc_TypeError,
        __Pyx_FMT_TYPENAME " object is not an iterator", iterator_type_name);
    __Pyx_DECREF_TypeName(iterator_type_name);
}
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject* iterator, PyObject* defval) {
    PyObject* next;
    iternextfunc iternext = Py_TYPE(iterator)->tp_iternext;
    if (likely(iternext)) {
#if CYTHON_USE_TYPE_SLOTS
        next = iternext(iterator);
        if (likely(next))
            return next;
        if (unlikely(iternext == &_PyObject_NextNotImplemented))
            return NULL;
#else
        next = PyIter_Next(iterator);
        if (likely(next))
            return next;
#endif
    } else if (CYTHON_USE_TYPE_SLOTS || unlikely(!PyIter_Check(iterator))) {
        __Pyx_PyIter_Next_ErrorNoIterator(iterator);
        return NULL;
    }
#if !CYTHON_USE_TYPE_SLOTS
    else {
        next = PyIter_Next(iterator);
        if (likely(next))
            return next;
    }
#endif
    return __Pyx_PyIter_Next2Default(defval);
}

/* CallNextTpDealloc */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg = NULL;
    return __Pyx_PyObject_FastCall(func, (&arg)+1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* PyType_Ready */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_PyType_Ready(PyTypeObject *t) {
    int r;
    PyObject *bases = t->tp_bases;
    if (bases)
    {
        Py_ssize_t i, n = PyTuple_GET_SIZE(bases);
        for (i = 1; i < n; i++)
        {
            PyObject *b0 = PyTuple_GET_ITEM(bases, i);
            PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
            if (PyClass_Check(b0))
            {
                PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                             PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
                return -1;
            }
#endif
            b = (PyTypeObject*)b0;
            if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
            {
                __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                PyErr_Format(PyExc_TypeError,
                    "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
                __Pyx_DECREF_TypeName(b_name);
                return -1;
            }
            if (t->tp_dictoffset == 0 && b->tp_dictoffset)
            {
                __Pyx_TypeName t_name = __Pyx_PyType_GetName(t);
                __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                PyErr_Format(PyExc_TypeError,
                    "extension type '" __Pyx_FMT_TYPENAME "' has no __dict__ slot, "
                    "but base type '" __Pyx_FMT_TYPENAME "' has: "
                    "either add 'cdef dict __dict__' to the extension type "
                    "or add '__slots__ = [...]' to the base type",
                    t_name, b_name);
                __Pyx_DECREF_TypeName(t_name);
                __Pyx_DECREF_TypeName(b_name);
                return -1;
            }
        }
    }
#if PY_VERSION_HEX >= 0x03050000
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
}
#endif

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_SetVtable(PyObject *type, void *vtable) {
#else
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#endif
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (!ob)
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (PyObject_SetAttr(type, __pyx_n_s_pyx_vtable, ob) < 0)
#else
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* MergeVTables */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i;
    void** base_vtables;
    __Pyx_TypeName tp_base_name;
    __Pyx_TypeName base_name;
    void* unknown = (void*)-1;
    PyObject* bases = type->tp_bases;
    int base_depth = 0;
    {
        PyTypeObject* base = type->tp_base;
        while (base) {
            base_depth += 1;
            base = base->tp_base;
        }
    }
    base_vtables = (void**) malloc(sizeof(void*) * (base_depth + 1));
    base_vtables[0] = unknown;
    for (i = 1; i < PyTuple_GET_SIZE(bases); i++) {
        void* base_vtable = __Pyx_GetVtable(((PyTypeObject*)PyTuple_GET_ITEM(bases, i)));
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = type->tp_base;
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = base->tp_base;
            }
        }
    }
    PyErr_Clear();
    free(base_vtables);
    return 0;
bad:
    tp_base_name = __Pyx_PyType_GetName(type->tp_base);
    base_name = __Pyx_PyType_GetName((PyTypeObject*)PyTuple_GET_ITEM(bases, i));
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
    free(base_vtables);
    return -1;
}
#endif

/* SetupReduce */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                #if CYTHON_COMPILING_IN_LIMITED_API
                module = PyImport_ImportModuleLevelObject(
                    name, empty_dict, empty_dict, from_list, 1);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                #endif
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            #if CYTHON_COMPILING_IN_LIMITED_API
            module = PyImport_ImportModuleLevelObject(
                name, empty_dict, empty_dict, from_list, level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
  #if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__16;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    Py_ssize_t i, nparts;
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (likely(module))
        return module;
    return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* ImportFrom */
  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* pybytes_as_double */
  static double __Pyx_SlowPyString_AsDouble(PyObject *obj) {
    PyObject *float_value;
#if PY_MAJOR_VERSION >= 3
    float_value = PyFloat_FromString(obj);
#else
    float_value = PyFloat_FromString(obj, 0);
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
    return (double)-1;
}
static const char* __Pyx__PyBytes_AsDouble_Copy(const char* start, char* buffer, Py_ssize_t length) {
    int last_was_punctuation = 1;
    Py_ssize_t i;
    for (i=0; i < length; i++) {
        char chr = start[i];
        int is_punctuation = (chr == '_') | (chr == '.') | (chr == 'e') | (chr == 'E');
        *buffer = chr;
        buffer += (chr != '_');
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyBytes_AsDouble_inf_nan(const char* start, Py_ssize_t length) {
    int matches = 1;
    char sign = start[0];
    int is_signed = (sign == '+') | (sign == '-');
    start += is_signed;
    length -= is_signed;
    switch (start[0]) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            matches &= (start[1] == 'a' || start[1] == 'A');
            matches &= (start[2] == 'n' || start[2] == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            matches &= (start[1] == 'n' || start[1] == 'N');
            matches &= (start[2] == 'f' || start[2] == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            matches &= (start[3] == 'i' || start[3] == 'I');
            matches &= (start[4] == 'n' || start[4] == 'N');
            matches &= (start[5] == 'i' || start[5] == 'I');
            matches &= (start[6] == 't' || start[6] == 'T');
            matches &= (start[7] == 'y' || start[7] == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static CYTHON_INLINE int __Pyx__PyBytes_AsDouble_IsSpace(char ch) {
    return (ch == 0x20) | !((ch < 0x9) | (ch > 0xd));
}
static CYTHON_UNUSED double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length) {
    double value;
    Py_ssize_t i, digits;
    const char *last = start + length;
    char *end;
    while (__Pyx__PyBytes_AsDouble_IsSpace(*start))
        start++;
    while (start < last - 1 && __Pyx__PyBytes_AsDouble_IsSpace(last[-1]))
        last--;
    length = last - start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyBytes_AsDouble_inf_nan(start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    digits = 0;
    for (i=0; i < length; digits += start[i++] != '_');
    if (likely(digits == length)) {
        value = PyOS_string_to_double(start, &end, NULL);
    } else if (digits < 40) {
        char number[40];
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((digits + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}

/* FetchCommonType */
  static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    PyObject *abi_module = PyImport_AddModule((char*) __PYX_ABI_MODULE_NAME);
    if (!abi_module) return NULL;
    Py_INCREF(abi_module);
    return abi_module;
}
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, type->tp_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              type->tp_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, type->tp_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *py_basicsize, *cached_type = NULL;
    Py_ssize_t basicsize;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, spec->name);
    if (cached_type) {
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (!py_basicsize) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred()) goto bad;
        if (__Pyx_VerifyCachedType(
              cached_type,
              spec->name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    cached_type = PyType_FromSpecWithBases(spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (PyObject_SetAttrString(abi_module, spec->name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
  #if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
  #include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
        PyList_SET_ITEM(fromlist, 0, marker);
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if PY_VERSION_HEX < 0x030500A0
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         cyfunc->func.m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", cyfunc->func.m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(__pyx_CyFunctionObject, func.vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#ifdef _Py_TPFLAGS_HAVE_VECTORCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(void) {
#if CYTHON_COMPILING_IN_LIMITED_API
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(&__pyx_CyFunctionType_spec, NULL);
#else
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
  static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* ClassMethod */
  static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    #if PY_MAJOR_VERSION == 2
    static PyTypeObject *methoddescr_type = NULL;
    if (unlikely(methoddescr_type == NULL)) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (unlikely(!meth)) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    #else
    PyTypeObject *methoddescr_type = &PyMethodDescr_Type;
    #endif
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
}

/* GetNameInClass */
  static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    PyObject *dict;
    assert(PyType_Check(nmspace));
#if CYTHON_USE_TYPE_SLOTS
    dict = ((PyTypeObject*)nmspace)->tp_dict;
    Py_XINCREF(dict);
#else
    dict = PyObject_GetAttr(nmspace, __pyx_n_s_dict);
#endif
    if (likely(dict)) {
        result = PyObject_GetItem(dict, name);
        Py_DECREF(dict);
        if (result) {
            return result;
        }
    }
    PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if CYTHON_COMPILING_IN_LIMITED_API
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    if (c_line) {
        (void) __pyx_cfilenm;
        c_line = __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    _PyTraceback_Add(funcname, filename, c_line ? -c_line : py_line);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
  static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int64_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int64_t, digit, digits[0])
                case 2:
                    if ((8 * sizeof(int64_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 2 * PyLong_SHIFT)) {
                            return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int64_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 3 * PyLong_SHIFT)) {
                            return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int64_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 4 * PyLong_SHIFT)) {
                            return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int64_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int64_t,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int64_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (int64_t) ((((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int64_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (int64_t) ((((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int64_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (int64_t) ((((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(int64_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int64_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            int64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int64_t) -1;
        }
    } else {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
    }
}

/* FormatTypeName */
  #if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XSETREF(name, __Pyx_NewRef(__pyx_n_s__46));
    }
    return name;
}
#endif

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* FunctionExport */
  static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
    cobj = PyCapsule_New(tmp.p, sig, 0);
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

/* InitStrings */
  #if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
