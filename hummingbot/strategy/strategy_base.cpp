/* Generated by Cython 3.0a7 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "hummingbot\\core\\cpp\\LimitOrder.h",
            "hummingbot\\core\\cpp\\PyRef.h"
        ],
        "include_dirs": [
            ".\\hummingbot\\core",
            ".\\hummingbot\\core\\data_type"
        ],
        "language": "c++",
        "name": "hummingbot.strategy.strategy_base",
        "sources": [
            "hummingbot\\strategy\\strategy_base.pyx"
        ]
    },
    "module_name": "hummingbot.strategy.strategy_base"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#define CYTHON_ABI "3_0a7"
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030000A7
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP487_INIT_SUBCLASS
  #define CYTHON_PEP487_INIT_SUBCLASS 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(CYTHON_LIMITED_API)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030800B2
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#elif PY_VERSION_HEX >= 0x030800A4
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#elif CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static inline void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
#else
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__hummingbot__strategy__strategy_base
#define __PYX_HAVE_API__hummingbot__strategy__strategy_base
/* Early includes */
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <unordered_map>
#include <unordered_set>
#include "cpp/PyRef.h"
#include <string.h>
#include <string>
#include "../cpp/LimitOrder.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "hummingbot\\\\strategy\\\\strategy_base.pyx",
  "stringsource",
  "hummingbot\\\\strategy\\\\strategy_base.pxd",
  "hummingbot\\\\core\\\\clock.pxd",
  "hummingbot\\\\core\\\\pubsub.pxd",
  "hummingbot\\\\core\\\\data_type\\\\limit_order.pxd",
  "hummingbot\\\\strategy\\\\order_tracker.pxd",
  "hummingbot\\\\core\\\\event\\\\event_reporter.pxd",
  "hummingbot\\\\core\\\\event\\\\event_logger.pxd",
  "hummingbot\\\\core\\\\network_iterator.pxd",
  "hummingbot\\\\connector\\\\connector_base.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* #### Code section: numeric_typedefs ### */
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_10hummingbot_4core_5clock_Clock;
struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener;
struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub;
struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator;
struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder;
struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker;
struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter;
struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger;
struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator;
struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase;
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase;
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener;
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener;
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener;
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFilledListener;
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFailedListener;
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderCancelledListener;
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderExpiredListener;
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener;
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener;
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener;
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener;
struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__;

/* "hummingbot/core/pubsub.pxd":10
 * from hummingbot.core.event.event_listener cimport EventListener
 * 
 * ctypedef unordered_set[PyRef] EventListenersCollection             # <<<<<<<<<<<<<<
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 */
typedef std::unordered_set<PyRef>  __pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection;

/* "hummingbot/core/pubsub.pxd":11
 * 
 * ctypedef unordered_set[PyRef] EventListenersCollection
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 */
typedef std::unordered_set<PyRef> ::iterator __pyx_t_10hummingbot_4core_6pubsub_EventListenersIterator;

/* "hummingbot/core/pubsub.pxd":12
 * ctypedef unordered_set[PyRef] EventListenersCollection
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair
 */
typedef std::unordered_map<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection>  __pyx_t_10hummingbot_4core_6pubsub_Events;

/* "hummingbot/core/pubsub.pxd":13
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator             # <<<<<<<<<<<<<<
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair
 * 
 */
typedef std::unordered_map<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection> ::iterator __pyx_t_10hummingbot_4core_6pubsub_EventsIterator;

/* "hummingbot/core/pubsub.pxd":14
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::pair<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection>  __pyx_t_10hummingbot_4core_6pubsub_EventsPair;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount;

/* "hummingbot/connector/connector_base.pxd":18
 *         public dict _exchange_order_ids
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/connector_base.pxd":19
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 *     cdef c_stop_tracking_order(self, str order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/connector_base.pxd":28
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object order_size)
 *     cdef object c_quantize_order_price(self, str trading_pair, object price)
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price=*)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount {
  int __pyx_n;
  PyObject *price;
};
struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market;
struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market;

/* "hummingbot/strategy/strategy_base.pxd":45
 *     cdef c_did_complete_sell_order_tracker(self, object order_completed_event)
 * 
 *     cdef str c_buy_with_specific_market(self, object market_trading_pair_tuple, object amount, object order_type = *,             # <<<<<<<<<<<<<<
 *                                         object price = *, double expiration_seconds = *, position_action = *)
 *     cdef str c_sell_with_specific_market(self, object market_trading_pair_tuple, object amount, object order_type = *,
 */
struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  double expiration_seconds;
  PyObject *position_action;
};

/* "hummingbot/strategy/strategy_base.pxd":47
 *     cdef str c_buy_with_specific_market(self, object market_trading_pair_tuple, object amount, object order_type = *,
 *                                         object price = *, double expiration_seconds = *, position_action = *)
 *     cdef str c_sell_with_specific_market(self, object market_trading_pair_tuple, object amount, object order_type = *,             # <<<<<<<<<<<<<<
 *                                          object price = *, double expiration_seconds = *, position_action = *, )
 *     cdef c_cancel_order(self, object market_pair, str order_id)
 */
struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  double expiration_seconds;
  PyObject *position_action;
};

/* "hummingbot/core/clock.pxd":3
 * # distutils: language=c++
 * 
 * cdef class Clock:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _clock_mode
 */
struct __pyx_obj_10hummingbot_4core_5clock_Clock {
  PyObject_HEAD
  PyObject *_clock_mode;
  double _tick_size;
  double _start_time;
  double _end_time;
  PyObject *_child_iterators;
  PyObject *_current_context;
  double _current_tick;
  int _started;
};


/* "hummingbot/core/event/event_listener.pxd":6
 * 
 * 
 * cdef class EventListener:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object __weakref__
 */
struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener *__pyx_vtab;
  PyObject *__weakref__;
  int64_t _current_event_tag;
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *_current_event_caller;
};


/* "hummingbot/core/pubsub.pxd":17
 * 
 * 
 * cdef class PubSub:             # <<<<<<<<<<<<<<
 *     cdef:
 *         Events _events
 */
struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub *__pyx_vtab;
  __pyx_t_10hummingbot_4core_6pubsub_Events _events;
  PyObject *__weakref__;
};


/* "hummingbot/core/time_iterator.pxd":7
 * 
 * 
 * cdef class TimeIterator(PubSub):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double _current_timestamp
 */
struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator {
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  double _current_timestamp;
  struct __pyx_obj_10hummingbot_4core_5clock_Clock *_clock;
};


/* "hummingbot/core/data_type/limit_order.pxd":6
 * 
 * 
 * cdef class LimitOrder:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CPPLimitOrder _cpp_limit_order
 */
struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_vtab;
  LimitOrder _cpp_limit_order;
};


/* "order_tracker.pxd":7
 * 
 * 
 * cdef class OrderTracker(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         dict _tracked_limit_orders
 */
struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_tracked_limit_orders;
  PyObject *_tracked_market_orders;
  PyObject *_order_id_to_market_pair;
  PyObject *_shadow_tracked_limit_orders;
  PyObject *_shadow_order_id_to_market_pair;
  PyObject *_shadow_gc_requests;
  PyObject *_in_flight_cancels;
  PyObject *_in_flight_pending_created;
};


/* "hummingbot/core/event/event_reporter.pxd":4
 * 
 * 
 * cdef class EventReporter(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str event_source
 */
struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter {
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
  PyObject *event_source;
};


/* "hummingbot/core/event/event_logger.pxd":4
 * 
 * 
 * cdef class EventLogger(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str _event_source
 */
struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger {
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
  PyObject *_event_source;
  PyObject *_logged_events;
  PyObject *_waiting;
  PyObject *_wait_returns;
};


/* "hummingbot/core/network_iterator.pxd":6
 * 
 * 
 * cdef class NetworkIterator(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _network_status
 */
struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_network_status;
  double _last_connected_timestamp;
  double _check_network_interval;
  double _check_network_timeout;
  double _network_error_wait_time;
  PyObject *_check_network_task;
};


/* "hummingbot/connector/connector_base.pxd":5
 * from hummingbot.core.network_iterator cimport NetworkIterator
 * 
 * cdef class ConnectorBase(NetworkIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         EventReporter _event_reporter
 */
struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase {
  struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_base;
  struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter *_event_reporter;
  struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger *_event_logger;
  int _trading_required;
  PyObject *_account_available_balances;
  PyObject *_account_balances;
  int _real_time_balance_update;
  PyObject *_in_flight_orders_snapshot;
  double _in_flight_orders_snapshot_timestamp;
  PyObject *_current_trade_fills;
  PyObject *_exchange_order_ids;
};


/* "hummingbot/strategy/strategy_base.pxd":8
 * from .order_tracker cimport OrderTracker
 * 
 * cdef class StrategyBase(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         set _sb_markets
 */
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_sb_markets;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_create_buy_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_create_sell_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_fill_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_fail_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_cancel_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_expire_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_complete_buy_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_complete_sell_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_complete_funding_payment_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_create_range_position_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_remove_range_position_order_listener;
  int _sb_delegate_lock;
  struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *_sb_order_tracker;
};


/* "hummingbot/strategy/strategy_base.pyx":29
 * 
 * # <editor-fold desc="+ Event listeners">
 * cdef class BaseStrategyEventListener(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         StrategyBase _owner
 */
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener {
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *_owner;
};


/* "hummingbot/strategy/strategy_base.pyx":38
 * 
 * 
 * cdef class BuyOrderCompletedListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_complete_buy_order(arg)
 */
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};


/* "hummingbot/strategy/strategy_base.pyx":44
 * 
 * 
 * cdef class SellOrderCompletedListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_complete_sell_order(arg)
 */
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};


/* "hummingbot/strategy/strategy_base.pyx":50
 * 
 * 
 * cdef class FundingPaymentCompletedListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_complete_funding_payment(arg)
 */
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};


/* "hummingbot/strategy/strategy_base.pyx":55
 * 
 * 
 * cdef class OrderFilledListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_fill_order(arg)
 */
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFilledListener {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};


/* "hummingbot/strategy/strategy_base.pyx":60
 * 
 * 
 * cdef class OrderFailedListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_fail_order(arg)
 */
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFailedListener {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};


/* "hummingbot/strategy/strategy_base.pyx":66
 * 
 * 
 * cdef class OrderCancelledListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_cancel_order(arg)
 */
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderCancelledListener {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};


/* "hummingbot/strategy/strategy_base.pyx":72
 * 
 * 
 * cdef class OrderExpiredListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_expire_order(arg)
 */
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderExpiredListener {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};


/* "hummingbot/strategy/strategy_base.pyx":78
 * 
 * 
 * cdef class BuyOrderCreatedListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_create_buy_order(arg)
 */
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};


/* "hummingbot/strategy/strategy_base.pyx":83
 * 
 * 
 * cdef class SellOrderCreatedListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_create_sell_order(arg)
 */
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};


/* "hummingbot/strategy/strategy_base.pyx":87
 *         self._owner.c_did_create_sell_order(arg)
 * 
 * cdef class RangePositionCreatedListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_create_range_position_order(arg)
 */
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};


/* "hummingbot/strategy/strategy_base.pyx":91
 *         self._owner.c_did_create_range_position_order(arg)
 * 
 * cdef class RangePositionRemovedListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_remove_range_position_order(arg)
 */
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};


/* "hummingbot/strategy/strategy_base.pyx":156
 *         self.logger().log(log_level, f"{msg} [clock={str(clock_timestamp)}]", **kwargs)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def trades(self) -> List[Trade]:
 *         """
 */
struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ {
  PyObject_HEAD
  PyObject *__pyx_v_event_to_trade;
  PyObject *__pyx_v_market;
};



/* "hummingbot/core/event/event_listener.pxd":6
 * 
 * 
 * cdef class EventListener:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object __weakref__
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener {
  PyObject *(*c_set_event_info)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, int64_t, struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *);
  PyObject *(*c_call)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener *__pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener;


/* "hummingbot/core/pubsub.pxd":17
 * 
 * 
 * cdef class PubSub:             # <<<<<<<<<<<<<<
 *     cdef:
 *         Events _events
 */

struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub {
  PyObject *(*c_log_exception)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, PyObject *);
  PyObject *(*c_add_listener)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *);
  PyObject *(*c_remove_listener)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *);
  PyObject *(*c_remove_dead_listeners)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t);
  PyObject *(*c_get_listeners)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t);
  PyObject *(*c_trigger_event)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub *__pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub;


/* "hummingbot/core/time_iterator.pxd":7
 * 
 * 
 * cdef class TimeIterator(PubSub):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double _current_timestamp
 */

struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator {
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  PyObject *(*c_start)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *, double);
  PyObject *(*c_stop)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *);
  PyObject *(*c_tick)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, double);
};
static struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator *__pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator;


/* "hummingbot/core/data_type/limit_order.pxd":6
 * 
 * 
 * cdef class LimitOrder:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CPPLimitOrder _cpp_limit_order
 */

struct __pyx_vtabstruct_10hummingbot_4core_9data_type_11limit_order_LimitOrder {
  long (*c_age)(struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *);
  long (*c_age_til)(struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *, long);
};
static struct __pyx_vtabstruct_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_vtabptr_10hummingbot_4core_9data_type_11limit_order_LimitOrder;


/* "order_tracker.pxd":7
 * 
 * 
 * cdef class OrderTracker(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         dict _tracked_limit_orders
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *(*c_get_limit_orders)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *);
  PyObject *(*c_get_market_orders)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *);
  PyObject *(*c_get_shadow_limit_orders)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *);
  int (*c_has_in_flight_cancel)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  int (*c_check_and_track_cancel)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  PyObject *(*c_get_market_pair_from_order_id)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  PyObject *(*c_get_shadow_market_pair_from_order_id)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *(*c_get_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *);
  PyObject *(*c_get_market_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *(*c_get_shadow_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  PyObject *(*c_start_tracking_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *, int, PyObject *, PyObject *);
  PyObject *(*c_stop_tracking_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *);
  PyObject *(*c_start_tracking_market_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *, int, PyObject *);
  PyObject *(*c_stop_tracking_market_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *);
  PyObject *(*c_check_and_cleanup_shadow_records)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *);
  PyObject *(*c_add_create_order_pending)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  PyObject *(*c_remove_create_order_pending)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *__pyx_vtabptr_10hummingbot_8strategy_13order_tracker_OrderTracker;


/* "hummingbot/core/event/event_reporter.pxd":4
 * 
 * 
 * cdef class EventReporter(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str event_source
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter {
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter *__pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter;


/* "hummingbot/core/event/event_logger.pxd":4
 * 
 * 
 * cdef class EventLogger(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str _event_source
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger {
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger *__pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger;


/* "hummingbot/core/network_iterator.pxd":6
 * 
 * 
 * cdef class NetworkIterator(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _network_status
 */

struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator *__pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator;


/* "hummingbot/connector/connector_base.pxd":5
 * from hummingbot.core.network_iterator cimport NetworkIterator
 * 
 * cdef class ConnectorBase(NetworkIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         EventReporter _event_reporter
 */

struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase {
  struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_base;
  PyObject *(*c_buy)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy *__pyx_optional_args);
  PyObject *(*c_sell)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell *__pyx_optional_args);
  PyObject *(*c_cancel)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_stop_tracking_order)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_balance)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_available_balance)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_price)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, int);
  PyObject *(*c_get_order_price_quantum)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_get_order_size_quantum)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_quantize_order_price)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_quantize_order_amount)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount *__pyx_optional_args);
};
static struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *__pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase;


/* "hummingbot/strategy/strategy_base.pyx":97
 * 
 * 
 * cdef class StrategyBase(TimeIterator):             # <<<<<<<<<<<<<<
 *     BUY_ORDER_COMPLETED_EVENT_TAG = MarketEvent.BuyOrderCompleted.value
 *     SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *(*c_add_markets)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_remove_markets)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_create_buy_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_create_sell_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_fill_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_fail_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_cancel_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_expire_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_buy_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_sell_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_funding_payment)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_create_range_position_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_remove_range_position_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_fail_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_cancel_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_expire_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_buy_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_sell_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_buy_with_specific_market)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market *__pyx_optional_args);
  PyObject *(*c_sell_with_specific_market)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market *__pyx_optional_args);
  PyObject *(*c_cancel_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *);
  PyObject *(*c_start_tracking_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, int, PyObject *, PyObject *);
  PyObject *(*c_stop_tracking_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *);
  PyObject *(*c_start_tracking_market_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, int, PyObject *);
  PyObject *(*c_stop_tracking_market_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *);
  PyObject *(*c_track_restored_orders)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_sum_flat_fees)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase;


/* "hummingbot/strategy/strategy_base.pyx":29
 * 
 * # <editor-fold desc="+ Event listeners">
 * cdef class BaseStrategyEventListener(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         StrategyBase _owner
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener {
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;


/* "hummingbot/strategy/strategy_base.pyx":38
 * 
 * 
 * cdef class BuyOrderCompletedListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_complete_buy_order(arg)
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener {
  struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener;


/* "hummingbot/strategy/strategy_base.pyx":44
 * 
 * 
 * cdef class SellOrderCompletedListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_complete_sell_order(arg)
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener {
  struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener;


/* "hummingbot/strategy/strategy_base.pyx":50
 * 
 * 
 * cdef class FundingPaymentCompletedListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_complete_funding_payment(arg)
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener {
  struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener;


/* "hummingbot/strategy/strategy_base.pyx":55
 * 
 * 
 * cdef class OrderFilledListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_fill_order(arg)
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_OrderFilledListener {
  struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_OrderFilledListener *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderFilledListener;


/* "hummingbot/strategy/strategy_base.pyx":60
 * 
 * 
 * cdef class OrderFailedListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_fail_order(arg)
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_OrderFailedListener {
  struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_OrderFailedListener *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderFailedListener;


/* "hummingbot/strategy/strategy_base.pyx":66
 * 
 * 
 * cdef class OrderCancelledListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_cancel_order(arg)
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_OrderCancelledListener {
  struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_OrderCancelledListener *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderCancelledListener;


/* "hummingbot/strategy/strategy_base.pyx":72
 * 
 * 
 * cdef class OrderExpiredListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_expire_order(arg)
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_OrderExpiredListener {
  struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_OrderExpiredListener *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderExpiredListener;


/* "hummingbot/strategy/strategy_base.pyx":78
 * 
 * 
 * cdef class BuyOrderCreatedListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_create_buy_order(arg)
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener {
  struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener;


/* "hummingbot/strategy/strategy_base.pyx":83
 * 
 * 
 * cdef class SellOrderCreatedListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_create_sell_order(arg)
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener {
  struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener;


/* "hummingbot/strategy/strategy_base.pyx":87
 *         self._owner.c_did_create_sell_order(arg)
 * 
 * cdef class RangePositionCreatedListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_create_range_position_order(arg)
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener {
  struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener;


/* "hummingbot/strategy/strategy_base.pyx":91
 *         self._owner.c_did_create_range_position_order(arg)
 * 
 * cdef class RangePositionRemovedListener(BaseStrategyEventListener):             # <<<<<<<<<<<<<<
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_remove_range_position_order(arg)
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener {
  struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) (&args[nargs])
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* GetAttr3.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *, PyObject *, PyObject *);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyUnicode_Unicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj);

/* PyObject_Str.proto */
#define __Pyx_PyObject_Str(obj)\
    (likely(PyString_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#if CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_CyFunctionType = 0;
#endif
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_IsCyOrPyCFunction(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func.vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_TrueDivideObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* pybytes_as_double.proto */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj);
static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length);
static CYTHON_INLINE double __Pyx_PyBytes_AsDouble(PyObject *obj) {
    return __Pyx__PyBytes_AsDouble(obj, PyBytes_AS_STRING(obj), PyBytes_GET_SIZE(obj));
}
static CYTHON_INLINE double __Pyx_PyByteArray_AsDouble(PyObject *obj) {
    return __Pyx__PyBytes_AsDouble(obj, PyByteArray_AS_STRING(obj), PyByteArray_GET_SIZE(obj));
}

/* pyunicode_as_double.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static const char* __Pyx__PyUnicode_AsDouble_Copy(const void* data, const int kind, char* buffer, Py_ssize_t start, Py_ssize_t end) {
    int last_was_punctuation;
    Py_ssize_t i;
    last_was_punctuation = 1;
    for (i=start; i <= end; i++) {
        Py_UCS4 chr = PyUnicode_READ(kind, data, i);
        int is_punctuation = (chr == '_') | (chr == '.');
        *buffer = (char)chr;
        buffer += (chr != '_');
        if (unlikely(chr > 127)) goto parse_failure;
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyUnicode_AsDouble_inf_nan(const void* data, int kind, Py_ssize_t start, Py_ssize_t length) {
    int matches = 1;
    Py_UCS4 chr;
    Py_UCS4 sign = PyUnicode_READ(kind, data, start);
    int is_signed = (sign == '-') | (sign == '+');
    start += is_signed;
    length -= is_signed;
    switch (PyUnicode_READ(kind, data, start)) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'a') | (chr == 'A');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'n') | (chr == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'f') | (chr == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+3);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+4);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+5);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+6);
            matches &= (chr == 't') | (chr == 'T');
            chr = PyUnicode_READ(kind, data, start+7);
            matches &= (chr == 'y') | (chr == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static double __Pyx_PyUnicode_AsDouble_WithSpaces(PyObject *obj) {
    double value;
    const char *last;
    char *end;
    Py_ssize_t start, length = PyUnicode_GET_LENGTH(obj);
    const int kind = PyUnicode_KIND(obj);
    const void* data = PyUnicode_DATA(obj);
    start = 0;
    while (Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, start)))
        start++;
    while (start < length - 1 && Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, length - 1)))
        length--;
    length -= start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyUnicode_AsDouble_inf_nan(data, kind, start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    if (length < 40) {
        char number[40];
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((length + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}
#endif
static CYTHON_INLINE double __Pyx_PyUnicode_AsDouble(PyObject *obj) {
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    if (unlikely(__Pyx_PyUnicode_READY(obj) == -1))
        return (double)-1;
    if (likely(PyUnicode_IS_ASCII(obj))) {
        const char *s;
        Py_ssize_t length;
        s = PyUnicode_AsUTF8AndSize(obj, &length);
        return __Pyx__PyBytes_AsDouble(obj, s, length);
    }
    return __Pyx_PyUnicode_AsDouble_WithSpaces(obj);
#else
    return __Pyx_SlowPyString_AsDouble(obj);
#endif
}

/* pynumber_float.proto */
static CYTHON_INLINE PyObject* __Pyx__PyNumber_Float(PyObject* obj);
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : __Pyx__PyNumber_Float(x))

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?  PyFloat_AS_DOUBLE(obj) :\
 likely(PyLong_CheckExact(obj)) ?\
 PyLong_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* PySetContains.proto */
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq);

/* py_set_remove.proto */
static CYTHON_INLINE int __Pyx_PySet_Remove(PyObject *set, PyObject *key);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* GetAttr.proto */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *, PyObject *);

/* HasAttr.proto */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *, PyObject *);

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* PyType_Ready.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_PyType_Ready(PyTypeObject *t);
#else
#define __Pyx_PyType_Ready(t) PyType_Ready(t)
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_Occurred(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str);
#else
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);
#endif

/* #### Code section: module_declarations ### */
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener *__pyx_v_self, PyObject *__pyx_v_arg); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener *__pyx_v_self, PyObject *__pyx_v_arg); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener *__pyx_v_self, PyObject *__pyx_v_arg); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_19OrderFilledListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFilledListener *__pyx_v_self, PyObject *__pyx_v_arg); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_19OrderFailedListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFailedListener *__pyx_v_self, PyObject *__pyx_v_arg); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderCancelledListener *__pyx_v_self, PyObject *__pyx_v_arg); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderExpiredListener *__pyx_v_self, PyObject *__pyx_v_arg); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener *__pyx_v_self, PyObject *__pyx_v_arg); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener *__pyx_v_self, PyObject *__pyx_v_arg); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener *__pyx_v_self, PyObject *__pyx_v_arg); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener *__pyx_v_self, PyObject *__pyx_v_arg); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_start(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, struct __pyx_obj_10hummingbot_4core_5clock_Clock *__pyx_v_clock, double __pyx_v_timestamp); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_tick(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, double __pyx_v_timestamp); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_stop(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, struct __pyx_obj_10hummingbot_4core_5clock_Clock *__pyx_v_clock); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_add_markets(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_markets); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_remove_markets(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_markets); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sum_flat_fees(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_quote_asset, PyObject *__pyx_v_flat_fees); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_create_buy_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_order_created_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_create_sell_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_order_created_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_fill_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_order_filled_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_fail_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_order_failed_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_cancel_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_cancelled_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_expire_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_expired_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_complete_buy_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_order_completed_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_complete_sell_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_order_completed_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_complete_funding_payment(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_funding_payment_completed_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_create_range_position_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_order_created_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_remove_range_position_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_order_completed_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_fail_order_tracker(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_order_failed_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_cancel_order_tracker(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_order_cancelled_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_expire_order_tracker(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_order_expired_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_complete_buy_order_tracker(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_order_completed_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_complete_sell_order_tracker(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_order_completed_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuple, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuple, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_cancel_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuple, PyObject *__pyx_v_order_id); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_start_tracking_limit_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair, PyObject *__pyx_v_order_id, int __pyx_v_is_buy, PyObject *__pyx_v_price, PyObject *__pyx_v_quantity); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_stop_tracking_limit_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair, PyObject *__pyx_v_order_id); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_start_tracking_market_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair, PyObject *__pyx_v_order_id, int __pyx_v_is_buy, PyObject *__pyx_v_quantity); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_stop_tracking_market_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair, PyObject *__pyx_v_order_id); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_track_restored_orders(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto*/

/* Module declarations from "hummingbot.core.clock" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5clock_Clock = 0;
#endif

/* Module declarations from "libc.stdint" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.utility" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.unordered_map" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.unordered_set" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.PyRef" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.event.event_listener" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener = 0;
#endif

/* Module declarations from "hummingbot.core.pubsub" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_6pubsub_PubSub = 0;
#endif

/* Module declarations from "hummingbot.core.time_iterator" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator = 0;
#endif

/* Module declarations from "libcpp" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libc.string" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.string" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.data_type.LimitOrder" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.data_type.limit_order" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder = 0;
#endif

/* Module declarations from "hummingbot.strategy.order_tracker" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker = 0;
#endif

/* Module declarations from "hummingbot.core.event.event_reporter" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter = 0;
#endif

/* Module declarations from "hummingbot.core.event.event_logger" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger = 0;
#endif

/* Module declarations from "hummingbot.core.network_iterator" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator = 0;
#endif

/* Module declarations from "hummingbot.connector.connector_base" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase = 0;
#endif

/* Module declarations from "hummingbot.strategy.strategy_base" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFilledListener = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFailedListener = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderCancelledListener = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderExpiredListener = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ = 0;
#endif
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_BaseStrategyEventListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *, PyObject *); /*proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_BuyOrderCompletedListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener *, PyObject *); /*proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_SellOrderCompletedListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener *, PyObject *); /*proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_FundingPaymentCompletedListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener *, PyObject *); /*proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_OrderFilledListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFilledListener *, PyObject *); /*proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_OrderFailedListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFailedListener *, PyObject *); /*proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_OrderCancelledListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderCancelledListener *, PyObject *); /*proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_OrderExpiredListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderExpiredListener *, PyObject *); /*proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_BuyOrderCreatedListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener *, PyObject *); /*proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_SellOrderCreatedListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener *, PyObject *); /*proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_RangePositionCreatedListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener *, PyObject *); /*proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_RangePositionRemovedListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener *, PyObject *); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "hummingbot.strategy.strategy_base"
extern int __pyx_module_is_main_hummingbot__strategy__strategy_base;
int __pyx_module_is_main_hummingbot__strategy__strategy_base = 0;

/* Implementation of "hummingbot.strategy.strategy_base" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_filter;
static PyObject *__pyx_builtin_map;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_all;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ValueError;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = "]";
static const char __pyx_k_0[] = "0";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_x[] = "x";
static const char __pyx_k__6[] = "  ";
static const char __pyx_k__7[] = " // ";
static const char __pyx_k__8[] = "";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_pd[] = "pd";
static const char __pyx_k_tz[] = "tz";
static const char __pyx_k_NaN[] = "NaN";
static const char __pyx_k_UTC[] = "UTC";
static const char __pyx_k__30[] = "(";
static const char __pyx_k__31[] = ".";
static const char __pyx_k__32[] = ") ";
static const char __pyx_k__33[] = "*";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_cls[] = "cls";
static const char __pyx_k_int[] = "int";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_log[] = "log";
static const char __pyx_k_map[] = "map";
static const char __pyx_k_msg[] = "msg";
static const char __pyx_k_nan[] = "nan";
static const char __pyx_k_new[] = "__new__";
static const char __pyx_k_ofe[] = "ofe";
static const char __pyx_k_str[] = "str";
static const char __pyx_k_INFO[] = "INFO";
static const char __pyx_k_List[] = "List";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_OPEN[] = "OPEN";
static const char __pyx_k__154[] = "?";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_bool[] = "bool";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_unit[] = "unit";
static const char __pyx_k_Asset[] = "Asset";
static const char __pyx_k_Trade[] = "Trade";
static const char __pyx_k_clock[] = " [clock=";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_owner[] = "owner";
static const char __pyx_k_price[] = "price";
static const char __pyx_k_state[] = "state";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_0_0001[] = "0.0001";
static const char __pyx_k_MARKET[] = "MARKET";
static const char __pyx_k_Market[] = "Market";
static const char __pyx_k_amount[] = "amount";
static const char __pyx_k_dict_2[] = "_dict";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_filter[] = "filter";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_is_buy[] = "is_buy";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_logger[] = "logger";
static const char __pyx_k_market[] = "market";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_notify[] = "_notify";
static const char __pyx_k_pandas[] = "pandas";
static const char __pyx_k_pickle[] = "pickle";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_return[] = "return";
static const char __pyx_k_sorted[] = "sorted";
static const char __pyx_k_typing[] = "typing";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_Decimal[] = "Decimal";
static const char __pyx_k_columns[] = "columns";
static const char __pyx_k_decimal[] = "decimal";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_markets[] = "markets";
static const char __pyx_k_Exchange[] = "Exchange";
static const char __pyx_k_List_str[] = "List[str]";
static const char __pyx_k_exc_info[] = "exc_info";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_market_2[] = " market ";
static const char __pyx_k_order_id[] = "order_id";
static const char __pyx_k_pyx_type[] = "__pyx_type";
static const char __pyx_k_quantity[] = "quantity";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_CONNECTED[] = "CONNECTED";
static const char __pyx_k_DataFrame[] = "DataFrame";
static const char __pyx_k_Mid_Price[] = "Mid Price";
static const char __pyx_k_OrderType[] = "OrderType";
static const char __pyx_k_Timestamp[] = "Timestamp";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_ask_price[] = "ask_price";
static const char __pyx_k_bid_price[] = "bid_price";
static const char __pyx_k_flat_fees[] = "flat_fees";
static const char __pyx_k_get_price[] = "get_price";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_log_level[] = "log_level";
static const char __pyx_k_mid_price[] = "mid_price";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_timestamp[] = "timestamp";
static const char __pyx_k_trade_fee[] = "trade_fee";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_base_asset[] = "base_asset";
static const char __pyx_k_event_logs[] = "event_logs";
static const char __pyx_k_order_type[] = "order_type";
static const char __pyx_k_pyx_result[] = "__pyx_result";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_trade_type[] = "trade_type";
static const char __pyx_k_MarketEvent[] = "MarketEvent";
static const char __pyx_k_OrderFilled[] = "OrderFilled";
static const char __pyx_k_PickleError[] = "PickleError";
static const char __pyx_k_add_markets[] = "add_markets";
static const char __pyx_k_assets_data[] = "assets_data";
static const char __pyx_k_get_balance[] = "get_balance";
static const char __pyx_k_init_params[] = "init_params";
static const char __pyx_k_market_name[] = "market_name";
static const char __pyx_k_market_pair[] = "market_pair";
static const char __pyx_k_quote_asset[] = "quote_asset";
static const char __pyx_k_s_decimal_0[] = "s_decimal_0";
static const char __pyx_k_OrderExpired[] = "OrderExpired";
static const char __pyx_k_OrderFailure[] = "OrderFailure";
static const char __pyx_k_OrderTracker[] = "OrderTracker";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_StrategyBase[] = "StrategyBase";
static const char __pyx_k_base_balance[] = "base_balance";
static const char __pyx_k_cancel_order[] = "cancel_order";
static const char __pyx_k_display_name[] = "display_name";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_limit_orders[] = "limit_orders";
static const char __pyx_k_markets_data[] = "markets_data";
static const char __pyx_k_pd_DataFrame[] = "pd.DataFrame";
static const char __pyx_k_pyx_checksum[] = "__pyx_checksum";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_trading_pair[] = "trading_pair";
static const char __pyx_k_use_setstate[] = "use_setstate";
static const char __pyx_k_NetworkStatus[] = "NetworkStatus";
static const char __pyx_k_Total_Balance[] = "Total Balance";
static const char __pyx_k_cum_flat_fees[] = "cum_flat_fees";
static const char __pyx_k_expiration_ts[] = "expiration_ts";
static const char __pyx_k_format_status[] = "format_status";
static const char __pyx_k_fromtimestamp[] = "fromtimestamp";
static const char __pyx_k_is_limit_type[] = "is_limit_type";
static const char __pyx_k_notify_hb_app[] = "notify_hb_app";
static const char __pyx_k_order_tracker[] = "order_tracker";
static const char __pyx_k_quote_balance[] = "quote_balance";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_s_decimal_nan[] = "s_decimal_nan";
static const char __pyx_k_trading_pairs[] = "trading_pairs";
static const char __pyx_k_warning_lines[] = "warning_lines";
static const char __pyx_k_Best_Ask_Price[] = "Best Ask Price";
static const char __pyx_k_Best_Bid_Price[] = "Best Bid Price";
static const char __pyx_k_DerivativeBase[] = "DerivativeBase";
static const char __pyx_k_OrderCancelled[] = "OrderCancelled";
static const char __pyx_k_PositionAction[] = "PositionAction";
static const char __pyx_k_active_markets[] = "active_markets";
static const char __pyx_k_assets_columns[] = "assets_columns";
static const char __pyx_k_event_to_trade[] = "event_to_trade";
static const char __pyx_k_log_with_clock[] = "log_with_clock";
static const char __pyx_k_logging_Logger[] = "logging.Logger";
static const char __pyx_k_network_status[] = "network_status";
static const char __pyx_k_remove_markets[] = "remove_markets";
static const char __pyx_k_BuyOrderCreated[] = "BuyOrderCreated";
static const char __pyx_k_balance_warning[] = "balance_warning";
static const char __pyx_k_client_order_id[] = "client_order_id";
static const char __pyx_k_clock_timestamp[] = "clock_timestamp";
static const char __pyx_k_markets_columns[] = "markets_columns";
static const char __pyx_k_network_warning[] = "network_warning";
static const char __pyx_k_position_action[] = "position_action";
static const char __pyx_k_pyx_PickleError[] = "__pyx_PickleError";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_OrderFilledEvent[] = "OrderFilledEvent";
static const char __pyx_k_SellOrderCreated[] = "SellOrderCreated";
static const char __pyx_k_main_application[] = "main_application";
static const char __pyx_k_Available_Balance[] = "Available Balance";
static const char __pyx_k_BuyOrderCompleted[] = "BuyOrderCompleted";
static const char __pyx_k_List_ConnectorBase[] = "List[ConnectorBase]";
static const char __pyx_k_SellOrderCompleted[] = "SellOrderCompleted";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_expiration_seconds[] = "expiration_seconds";
static const char __pyx_k_order_filled_event[] = "order_filled_event";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_OrderFailedListener[] = "OrderFailedListener";
static const char __pyx_k_OrderFilledListener[] = "OrderFilledListener";
static const char __pyx_k_StrategyBase_logger[] = "StrategyBase.logger";
static const char __pyx_k_OrderExpiredListener[] = "OrderExpiredListener";
static const char __pyx_k_RangePositionCreated[] = "RangePositionCreated";
static const char __pyx_k_RangePositionRemoved[] = "RangePositionRemoved";
static const char __pyx_k_HummingbotApplication[] = "HummingbotApplication";
static const char __pyx_k_get_available_balance[] = "get_available_balance";
static const char __pyx_k_track_restored_orders[] = "track_restored_orders";
static const char __pyx_k_MarketTradingPairTuple[] = "MarketTradingPairTuple";
static const char __pyx_k_ORDER_FILLED_EVENT_TAG[] = "ORDER_FILLED_EVENT_TAG";
static const char __pyx_k_OrderCancelledListener[] = "OrderCancelledListener";
static const char __pyx_k_available_base_balance[] = "available_base_balance";
static const char __pyx_k_BuyOrderCreatedListener[] = "BuyOrderCreatedListener";
static const char __pyx_k_FundingPaymentCompleted[] = "FundingPaymentCompleted";
static const char __pyx_k_ORDER_EXPIRED_EVENT_TAG[] = "ORDER_EXPIRED_EVENT_TAG";
static const char __pyx_k_ORDER_FAILURE_EVENT_TAG[] = "ORDER_FAILURE_EVENT_TAG";
static const char __pyx_k_available_quote_balance[] = "available_quote_balance";
static const char __pyx_k_SellOrderCreatedListener[] = "SellOrderCreatedListener";
static const char __pyx_k_StrategyBase_add_markets[] = "StrategyBase.add_markets";
static const char __pyx_k_StrategyBase_init_params[] = "StrategyBase.init_params";
static const char __pyx_k_buy_with_specific_market[] = "buy_with_specific_market";
static const char __pyx_k_market_status_data_frame[] = "market_status_data_frame";
static const char __pyx_k_BaseStrategyEventListener[] = "BaseStrategyEventListener";
static const char __pyx_k_BuyOrderCompletedListener[] = "BuyOrderCompletedListener";
static const char __pyx_k_ORDER_CANCELLED_EVENT_TAG[] = "ORDER_CANCELLED_EVENT_TAG";
static const char __pyx_k_StrategyBase_cancel_order[] = "StrategyBase.cancel_order";
static const char __pyx_k_market_trading_pair_tuple[] = "market_trading_pair_tuple";
static const char __pyx_k_sell_with_specific_market[] = "sell_with_specific_market";
static const char __pyx_k_stop_tracking_limit_order[] = "stop_tracking_limit_order";
static const char __pyx_k_wallet_balance_data_frame[] = "wallet_balance_data_frame";
static const char __pyx_k_Cancelling_the_limit_order[] = ") Cancelling the limit order ";
static const char __pyx_k_SellOrderCompletedListener[] = "SellOrderCompletedListener";
static const char __pyx_k_StrategyBase_cum_flat_fees[] = "StrategyBase.cum_flat_fees";
static const char __pyx_k_StrategyBase_format_status[] = "StrategyBase.format_status";
static const char __pyx_k_StrategyBase_notify_hb_app[] = "StrategyBase.notify_hb_app";
static const char __pyx_k_base_asset_conversion_rate[] = "base_asset_conversion_rate";
static const char __pyx_k_market_trading_pair_tuples[] = "market_trading_pair_tuples";
static const char __pyx_k_start_tracking_limit_order[] = "start_tracking_limit_order";
static const char __pyx_k_stop_tracking_market_order[] = "stop_tracking_market_order";
static const char __pyx_k_BUY_ORDER_CREATED_EVENT_TAG[] = "BUY_ORDER_CREATED_EVENT_TAG";
static const char __pyx_k_List_MarketTradingPairTuple[] = "List[MarketTradingPairTuple]";
static const char __pyx_k_Markets_are_offline_for_the[] = "  Markets are offline for the ";
static const char __pyx_k_StrategyBase_log_with_clock[] = "StrategyBase.log_with_clock";
static const char __pyx_k_StrategyBase_remove_markets[] = "StrategyBase.remove_markets";
static const char __pyx_k_quote_asset_conversion_rate[] = "quote_asset_conversion_rate";
static const char __pyx_k_start_tracking_market_order[] = "start_tracking_market_order";
static const char __pyx_k_RangePositionCreatedListener[] = "RangePositionCreatedListener";
static const char __pyx_k_RangePositionRemovedListener[] = "RangePositionRemovedListener";
static const char __pyx_k_SELL_ORDER_CREATED_EVENT_TAG[] = "SELL_ORDER_CREATED_EVENT_TAG";
static const char __pyx_k_StrategyBase___reduce_cython[] = "StrategyBase.__reduce_cython__";
static const char __pyx_k_StrategyBase_balance_warning[] = "StrategyBase.balance_warning";
static const char __pyx_k_StrategyBase_network_warning[] = "StrategyBase.network_warning";
static const char __pyx_k_hummingbot_core_event_events[] = "hummingbot.core.event.events";
static const char __pyx_k_notify_hb_app_with_timestamp[] = "notify_hb_app_with_timestamp";
static const char __pyx_k_BUY_ORDER_COMPLETED_EVENT_TAG[] = "BUY_ORDER_COMPLETED_EVENT_TAG";
static const char __pyx_k_Error_formatting_market_stats[] = "Error formatting market stats.";
static const char __pyx_k_SELL_ORDER_COMPLETED_EVENT_TAG[] = "SELL_ORDER_COMPLETED_EVENT_TAG";
static const char __pyx_k_StrategyBase___setstate_cython[] = "StrategyBase.__setstate_cython__";
static const char __pyx_k_pyx_unpickle_BaseStrategyEvent[] = "__pyx_unpickle_BaseStrategyEventListener";
static const char __pyx_k_pyx_unpickle_BuyOrderCompleted[] = "__pyx_unpickle_BuyOrderCompletedListener";
static const char __pyx_k_pyx_unpickle_BuyOrderCreatedLi[] = "__pyx_unpickle_BuyOrderCreatedListener";
static const char __pyx_k_pyx_unpickle_FundingPaymentCom[] = "__pyx_unpickle_FundingPaymentCompletedListener";
static const char __pyx_k_pyx_unpickle_OrderCancelledLis[] = "__pyx_unpickle_OrderCancelledListener";
static const char __pyx_k_pyx_unpickle_OrderExpiredListe[] = "__pyx_unpickle_OrderExpiredListener";
static const char __pyx_k_pyx_unpickle_OrderFailedListen[] = "__pyx_unpickle_OrderFailedListener";
static const char __pyx_k_pyx_unpickle_OrderFilledListen[] = "__pyx_unpickle_OrderFilledListener";
static const char __pyx_k_pyx_unpickle_RangePositionCrea[] = "__pyx_unpickle_RangePositionCreatedListener";
static const char __pyx_k_pyx_unpickle_RangePositionRemo[] = "__pyx_unpickle_RangePositionRemovedListener";
static const char __pyx_k_pyx_unpickle_SellOrderComplete[] = "__pyx_unpickle_SellOrderCompletedListener";
static const char __pyx_k_pyx_unpickle_SellOrderCreatedL[] = "__pyx_unpickle_SellOrderCreatedListener";
static const char __pyx_k_Error_formatting_wallet_balance[] = "Error formatting wallet balance stats.";
static const char __pyx_k_FUNDING_PAYMENT_COMPLETED_EVENT[] = "FUNDING_PAYMENT_COMPLETED_EVENT_TAG";
static const char __pyx_k_FundingPaymentCompletedListener[] = "FundingPaymentCompletedListener";
static const char __pyx_k_Market_object_for_sell_order_is[] = "Market object for sell order is not in the whitelisted markets set.";
static const char __pyx_k_OrderCancelledListener___reduce[] = "OrderCancelledListener.__reduce_cython__";
static const char __pyx_k_OrderExpiredListener___setstate[] = "OrderExpiredListener.__setstate_cython__";
static const char __pyx_k_StrategyBase_market_status_data[] = "StrategyBase.market_status_data_frame";
static const char __pyx_k_StrategyBase_notify_hb_app_with[] = "StrategyBase.notify_hb_app_with_timestamp";
static const char __pyx_k_StrategyBase_sell_with_specific[] = "StrategyBase.sell_with_specific_market";
static const char __pyx_k_balance_is_too_low_Cannot_place[] = " balance is too low. Cannot place order.";
static const char __pyx_k_hummingbot_connector_derivative[] = "hummingbot.connector.derivative_base";
static const char __pyx_k_hummingbot_core_data_type_trade[] = "hummingbot.core.data_type.trade";
static const char __pyx_k_pair_Continued_trading_with_the[] = " pair. Continued trading with these markets may be dangerous.";
static const char __pyx_k_BaseStrategyEventListener___redu[] = "BaseStrategyEventListener.__reduce_cython__";
static const char __pyx_k_BaseStrategyEventListener___sets[] = "BaseStrategyEventListener.__setstate_cython__";
static const char __pyx_k_BuyOrderCompletedListener___redu[] = "BuyOrderCompletedListener.__reduce_cython__";
static const char __pyx_k_BuyOrderCompletedListener___sets[] = "BuyOrderCompletedListener.__setstate_cython__";
static const char __pyx_k_BuyOrderCreatedListener___reduce[] = "BuyOrderCreatedListener.__reduce_cython__";
static const char __pyx_k_BuyOrderCreatedListener___setsta[] = "BuyOrderCreatedListener.__setstate_cython__";
static const char __pyx_k_Delegates_are_not_allowed_to_exe[] = "Delegates are not allowed to execute orders directly.";
static const char __pyx_k_Flat_fee_in_other_token_than_quo[] = "Flat fee in other token than quote asset is not supported.";
static const char __pyx_k_Incompatible_checksums_s_vs_0xdc[] = "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))";
static const char __pyx_k_Market_object_for_buy_order_is_n[] = "Market object for buy order is not in the whitelisted markets set.";
static const char __pyx_k_OrderCancelledListener___setstat[] = "OrderCancelledListener.__setstate_cython__";
static const char __pyx_k_OrderExpiredListener___reduce_cy[] = "OrderExpiredListener.__reduce_cython__";
static const char __pyx_k_OrderFailedListener___reduce_cyt[] = "OrderFailedListener.__reduce_cython__";
static const char __pyx_k_OrderFailedListener___setstate_c[] = "OrderFailedListener.__setstate_cython__";
static const char __pyx_k_OrderFilledListener___reduce_cyt[] = "OrderFilledListener.__reduce_cython__";
static const char __pyx_k_OrderFilledListener___setstate_c[] = "OrderFilledListener.__setstate_cython__";
static const char __pyx_k_RANGE_POSITION_CREATED_EVENT_TAG[] = "RANGE_POSITION_CREATED_EVENT_TAG";
static const char __pyx_k_RANGE_POSITION_REMOVED_EVENT_TAG[] = "RANGE_POSITION_REMOVED_EVENT_TAG";
static const char __pyx_k_RangePositionCreatedListener___r[] = "RangePositionCreatedListener.__reduce_cython__";
static const char __pyx_k_RangePositionCreatedListener___s[] = "RangePositionCreatedListener.__setstate_cython__";
static const char __pyx_k_RangePositionRemovedListener___r[] = "RangePositionRemovedListener.__reduce_cython__";
static const char __pyx_k_RangePositionRemovedListener___s[] = "RangePositionRemovedListener.__setstate_cython__";
static const char __pyx_k_SellOrderCompletedListener___red[] = "SellOrderCompletedListener.__reduce_cython__";
static const char __pyx_k_SellOrderCompletedListener___set[] = "SellOrderCompletedListener.__setstate_cython__";
static const char __pyx_k_SellOrderCreatedListener___reduc[] = "SellOrderCreatedListener.__reduce_cython__";
static const char __pyx_k_SellOrderCreatedListener___setst[] = "SellOrderCreatedListener.__setstate_cython__";
static const char __pyx_k_StrategyBase___get___locals_even[] = "StrategyBase.__get__.<locals>.event_to_trade";
static const char __pyx_k_StrategyBase___get___locals_lamb[] = "StrategyBase.__get__.<locals>.<lambda>";
static const char __pyx_k_StrategyBase_buy_with_specific_m[] = "StrategyBase.buy_with_specific_market";
static const char __pyx_k_StrategyBase_start_tracking_limi[] = "StrategyBase.start_tracking_limit_order";
static const char __pyx_k_StrategyBase_start_tracking_mark[] = "StrategyBase.start_tracking_market_order";
static const char __pyx_k_StrategyBase_stop_tracking_limit[] = "StrategyBase.stop_tracking_limit_order";
static const char __pyx_k_StrategyBase_stop_tracking_marke[] = "StrategyBase.stop_tracking_market_order";
static const char __pyx_k_StrategyBase_track_restored_orde[] = "StrategyBase.track_restored_orders";
static const char __pyx_k_StrategyBase_wallet_balance_data[] = "StrategyBase.wallet_balance_data_frame";
static const char __pyx_k_hummingbot_client_hummingbot_app[] = "hummingbot.client.hummingbot_application";
static const char __pyx_k_hummingbot_core_network_iterator[] = "hummingbot.core.network_iterator";
static const char __pyx_k_hummingbot_strategy_market_tradi[] = "hummingbot.strategy.market_trading_pair_tuple";
static const char __pyx_k_hummingbot_strategy_strategy_bas[] = "hummingbot\\strategy\\strategy_base.pyx";
static const char __pyx_k_price_and_amount_must_be_Decimal[] = "price and amount must be Decimal objects.";
static const char __pyx_k_self__events_cannot_be_converted[] = "self._events cannot be converted to a Python object for pickling";
static const char __pyx_k_FundingPaymentCompletedListener_2[] = "FundingPaymentCompletedListener.__reduce_cython__";
static const char __pyx_k_FundingPaymentCompletedListener_3[] = "FundingPaymentCompletedListener.__setstate_cython__";
static const char __pyx_k_hummingbot_strategy_strategy_bas_2[] = "hummingbot.strategy.strategy_base";
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_kp_u_;
static PyObject *__pyx_kp_u_0;
static PyObject *__pyx_kp_u_0_0001;
static PyObject *__pyx_n_u_Asset;
static PyObject *__pyx_kp_u_Available_Balance;
static PyObject *__pyx_n_s_BUY_ORDER_COMPLETED_EVENT_TAG;
static PyObject *__pyx_n_s_BUY_ORDER_CREATED_EVENT_TAG;
static PyObject *__pyx_n_s_BaseStrategyEventListener;
static PyObject *__pyx_n_s_BaseStrategyEventListener___redu;
static PyObject *__pyx_n_s_BaseStrategyEventListener___sets;
static PyObject *__pyx_kp_u_Best_Ask_Price;
static PyObject *__pyx_kp_u_Best_Bid_Price;
static PyObject *__pyx_n_s_BuyOrderCompleted;
static PyObject *__pyx_n_s_BuyOrderCompletedListener;
static PyObject *__pyx_n_s_BuyOrderCompletedListener___redu;
static PyObject *__pyx_n_s_BuyOrderCompletedListener___sets;
static PyObject *__pyx_n_s_BuyOrderCreated;
static PyObject *__pyx_n_s_BuyOrderCreatedListener;
static PyObject *__pyx_n_s_BuyOrderCreatedListener___reduce;
static PyObject *__pyx_n_s_BuyOrderCreatedListener___setsta;
static PyObject *__pyx_n_s_CONNECTED;
static PyObject *__pyx_kp_u_Cancelling_the_limit_order;
static PyObject *__pyx_n_s_DataFrame;
static PyObject *__pyx_n_s_Decimal;
static PyObject *__pyx_kp_u_Delegates_are_not_allowed_to_exe;
static PyObject *__pyx_n_s_DerivativeBase;
static PyObject *__pyx_kp_u_Error_formatting_market_stats;
static PyObject *__pyx_kp_u_Error_formatting_wallet_balance;
static PyObject *__pyx_n_u_Exchange;
static PyObject *__pyx_n_s_FUNDING_PAYMENT_COMPLETED_EVENT;
static PyObject *__pyx_kp_u_Flat_fee_in_other_token_than_quo;
static PyObject *__pyx_n_s_FundingPaymentCompleted;
static PyObject *__pyx_n_s_FundingPaymentCompletedListener;
static PyObject *__pyx_n_s_FundingPaymentCompletedListener_2;
static PyObject *__pyx_n_s_FundingPaymentCompletedListener_3;
static PyObject *__pyx_n_s_HummingbotApplication;
static PyObject *__pyx_n_s_INFO;
static PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xdc;
static PyObject *__pyx_n_s_List;
static PyObject *__pyx_kp_s_List_ConnectorBase;
static PyObject *__pyx_kp_s_List_MarketTradingPairTuple;
static PyObject *__pyx_kp_s_List_str;
static PyObject *__pyx_n_s_MARKET;
static PyObject *__pyx_n_u_Market;
static PyObject *__pyx_n_s_MarketEvent;
static PyObject *__pyx_n_s_MarketTradingPairTuple;
static PyObject *__pyx_kp_u_Market_object_for_buy_order_is_n;
static PyObject *__pyx_kp_u_Market_object_for_sell_order_is;
static PyObject *__pyx_kp_u_Markets_are_offline_for_the;
static PyObject *__pyx_kp_u_Mid_Price;
static PyObject *__pyx_n_s_NaN;
static PyObject *__pyx_n_u_NaN;
static PyObject *__pyx_n_s_NetworkStatus;
static PyObject *__pyx_kp_u_None;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_OPEN;
static PyObject *__pyx_n_s_ORDER_CANCELLED_EVENT_TAG;
static PyObject *__pyx_n_s_ORDER_EXPIRED_EVENT_TAG;
static PyObject *__pyx_n_s_ORDER_FAILURE_EVENT_TAG;
static PyObject *__pyx_n_s_ORDER_FILLED_EVENT_TAG;
static PyObject *__pyx_n_s_OrderCancelled;
static PyObject *__pyx_n_s_OrderCancelledListener;
static PyObject *__pyx_n_s_OrderCancelledListener___reduce;
static PyObject *__pyx_n_s_OrderCancelledListener___setstat;
static PyObject *__pyx_n_s_OrderExpired;
static PyObject *__pyx_n_s_OrderExpiredListener;
static PyObject *__pyx_n_s_OrderExpiredListener___reduce_cy;
static PyObject *__pyx_n_s_OrderExpiredListener___setstate;
static PyObject *__pyx_n_s_OrderFailedListener;
static PyObject *__pyx_n_s_OrderFailedListener___reduce_cyt;
static PyObject *__pyx_n_s_OrderFailedListener___setstate_c;
static PyObject *__pyx_n_s_OrderFailure;
static PyObject *__pyx_n_s_OrderFilled;
static PyObject *__pyx_n_s_OrderFilledEvent;
static PyObject *__pyx_n_s_OrderFilledListener;
static PyObject *__pyx_n_s_OrderFilledListener___reduce_cyt;
static PyObject *__pyx_n_s_OrderFilledListener___setstate_c;
static PyObject *__pyx_n_s_OrderTracker;
static PyObject *__pyx_n_s_OrderType;
static PyObject *__pyx_n_s_PickleError;
static PyObject *__pyx_n_s_PositionAction;
static PyObject *__pyx_n_s_RANGE_POSITION_CREATED_EVENT_TAG;
static PyObject *__pyx_n_s_RANGE_POSITION_REMOVED_EVENT_TAG;
static PyObject *__pyx_n_s_RangePositionCreated;
static PyObject *__pyx_n_s_RangePositionCreatedListener;
static PyObject *__pyx_n_s_RangePositionCreatedListener___r;
static PyObject *__pyx_n_s_RangePositionCreatedListener___s;
static PyObject *__pyx_n_s_RangePositionRemoved;
static PyObject *__pyx_n_s_RangePositionRemovedListener;
static PyObject *__pyx_n_s_RangePositionRemovedListener___r;
static PyObject *__pyx_n_s_RangePositionRemovedListener___s;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_SELL_ORDER_COMPLETED_EVENT_TAG;
static PyObject *__pyx_n_s_SELL_ORDER_CREATED_EVENT_TAG;
static PyObject *__pyx_n_s_SellOrderCompleted;
static PyObject *__pyx_n_s_SellOrderCompletedListener;
static PyObject *__pyx_n_s_SellOrderCompletedListener___red;
static PyObject *__pyx_n_s_SellOrderCompletedListener___set;
static PyObject *__pyx_n_s_SellOrderCreated;
static PyObject *__pyx_n_s_SellOrderCreatedListener;
static PyObject *__pyx_n_s_SellOrderCreatedListener___reduc;
static PyObject *__pyx_n_s_SellOrderCreatedListener___setst;
static PyObject *__pyx_n_s_StrategyBase;
static PyObject *__pyx_n_s_StrategyBase___get___locals_even;
static PyObject *__pyx_n_s_StrategyBase___get___locals_lamb;
static PyObject *__pyx_n_s_StrategyBase___reduce_cython;
static PyObject *__pyx_n_s_StrategyBase___setstate_cython;
static PyObject *__pyx_n_s_StrategyBase_add_markets;
static PyObject *__pyx_n_s_StrategyBase_balance_warning;
static PyObject *__pyx_n_s_StrategyBase_buy_with_specific_m;
static PyObject *__pyx_n_s_StrategyBase_cancel_order;
static PyObject *__pyx_n_s_StrategyBase_cum_flat_fees;
static PyObject *__pyx_n_s_StrategyBase_format_status;
static PyObject *__pyx_n_s_StrategyBase_init_params;
static PyObject *__pyx_n_s_StrategyBase_log_with_clock;
static PyObject *__pyx_n_s_StrategyBase_logger;
static PyObject *__pyx_n_s_StrategyBase_market_status_data;
static PyObject *__pyx_n_s_StrategyBase_network_warning;
static PyObject *__pyx_n_s_StrategyBase_notify_hb_app;
static PyObject *__pyx_n_s_StrategyBase_notify_hb_app_with;
static PyObject *__pyx_n_s_StrategyBase_remove_markets;
static PyObject *__pyx_n_s_StrategyBase_sell_with_specific;
static PyObject *__pyx_n_s_StrategyBase_start_tracking_limi;
static PyObject *__pyx_n_s_StrategyBase_start_tracking_mark;
static PyObject *__pyx_n_s_StrategyBase_stop_tracking_limit;
static PyObject *__pyx_n_s_StrategyBase_stop_tracking_marke;
static PyObject *__pyx_n_s_StrategyBase_track_restored_orde;
static PyObject *__pyx_n_s_StrategyBase_wallet_balance_data;
static PyObject *__pyx_n_s_Timestamp;
static PyObject *__pyx_kp_u_Total_Balance;
static PyObject *__pyx_n_s_Trade;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_u_UTC;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s__154;
static PyObject *__pyx_kp_u__30;
static PyObject *__pyx_kp_u__31;
static PyObject *__pyx_kp_u__32;
static PyObject *__pyx_n_s__33;
static PyObject *__pyx_kp_u__6;
static PyObject *__pyx_kp_u__7;
static PyObject *__pyx_kp_u__8;
static PyObject *__pyx_n_s_active_markets;
static PyObject *__pyx_n_s_add_markets;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_amount;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_ask_price;
static PyObject *__pyx_n_s_assets_columns;
static PyObject *__pyx_n_s_assets_data;
static PyObject *__pyx_n_s_asyncio_coroutines;
static PyObject *__pyx_n_s_available_base_balance;
static PyObject *__pyx_n_s_available_quote_balance;
static PyObject *__pyx_kp_u_balance_is_too_low_Cannot_place;
static PyObject *__pyx_n_s_balance_warning;
static PyObject *__pyx_n_s_base_asset;
static PyObject *__pyx_n_s_base_asset_conversion_rate;
static PyObject *__pyx_n_s_base_balance;
static PyObject *__pyx_n_s_bid_price;
static PyObject *__pyx_n_s_bool;
static PyObject *__pyx_n_s_buy_with_specific_market;
static PyObject *__pyx_n_s_cancel_order;
static PyObject *__pyx_n_s_client_order_id;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_kp_u_clock;
static PyObject *__pyx_n_s_clock_timestamp;
static PyObject *__pyx_n_s_cls;
static PyObject *__pyx_n_s_columns;
static PyObject *__pyx_n_s_cum_flat_fees;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_decimal;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_dict_2;
static PyObject *__pyx_kp_u_disable;
static PyObject *__pyx_n_s_display_name;
static PyObject *__pyx_n_s_e;
static PyObject *__pyx_kp_u_enable;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_event_logs;
static PyObject *__pyx_n_s_event_to_trade;
static PyObject *__pyx_n_s_exc_info;
static PyObject *__pyx_n_s_expiration_seconds;
static PyObject *__pyx_n_u_expiration_ts;
static PyObject *__pyx_n_s_filter;
static PyObject *__pyx_n_s_flat_fees;
static PyObject *__pyx_n_s_format_status;
static PyObject *__pyx_n_s_fromtimestamp;
static PyObject *__pyx_kp_u_gc;
static PyObject *__pyx_n_s_get_available_balance;
static PyObject *__pyx_n_s_get_balance;
static PyObject *__pyx_n_s_get_price;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_hummingbot_client_hummingbot_app;
static PyObject *__pyx_n_s_hummingbot_connector_derivative;
static PyObject *__pyx_n_s_hummingbot_core_data_type_trade;
static PyObject *__pyx_n_s_hummingbot_core_event_events;
static PyObject *__pyx_n_s_hummingbot_core_network_iterator;
static PyObject *__pyx_n_s_hummingbot_strategy_market_tradi;
static PyObject *__pyx_kp_s_hummingbot_strategy_strategy_bas;
static PyObject *__pyx_n_s_hummingbot_strategy_strategy_bas_2;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_init_params;
static PyObject *__pyx_n_s_initializing;
static PyObject *__pyx_n_s_int;
static PyObject *__pyx_n_s_is_buy;
static PyObject *__pyx_n_s_is_coroutine;
static PyObject *__pyx_n_s_is_limit_type;
static PyObject *__pyx_kp_u_isenabled;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_s_limit_orders;
static PyObject *__pyx_n_s_log;
static PyObject *__pyx_n_s_log_level;
static PyObject *__pyx_n_s_log_with_clock;
static PyObject *__pyx_n_s_logger;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_kp_s_logging_Logger;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_main_application;
static PyObject *__pyx_n_s_map;
static PyObject *__pyx_n_s_market;
static PyObject *__pyx_kp_u_market_2;
static PyObject *__pyx_n_s_market_name;
static PyObject *__pyx_n_s_market_pair;
static PyObject *__pyx_n_s_market_status_data_frame;
static PyObject *__pyx_n_s_market_trading_pair_tuple;
static PyObject *__pyx_n_s_market_trading_pair_tuples;
static PyObject *__pyx_n_s_markets;
static PyObject *__pyx_n_s_markets_columns;
static PyObject *__pyx_n_s_markets_data;
static PyObject *__pyx_n_s_mid_price;
static PyObject *__pyx_n_s_msg;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_u_nan;
static PyObject *__pyx_n_s_network_status;
static PyObject *__pyx_n_s_network_warning;
static PyObject *__pyx_n_s_new;
static PyObject *__pyx_n_s_notify;
static PyObject *__pyx_n_s_notify_hb_app;
static PyObject *__pyx_n_s_notify_hb_app_with_timestamp;
static PyObject *__pyx_n_s_ofe;
static PyObject *__pyx_n_s_order_filled_event;
static PyObject *__pyx_n_s_order_id;
static PyObject *__pyx_n_s_order_tracker;
static PyObject *__pyx_n_s_order_type;
static PyObject *__pyx_n_s_owner;
static PyObject *__pyx_kp_u_pair_Continued_trading_with_the;
static PyObject *__pyx_n_s_pandas;
static PyObject *__pyx_n_s_pd;
static PyObject *__pyx_kp_s_pd_DataFrame;
static PyObject *__pyx_n_s_pickle;
static PyObject *__pyx_n_s_position_action;
static PyObject *__pyx_n_u_position_action;
static PyObject *__pyx_n_s_price;
static PyObject *__pyx_kp_u_price_and_amount_must_be_Decimal;
static PyObject *__pyx_n_s_pyx_PickleError;
static PyObject *__pyx_n_s_pyx_checksum;
static PyObject *__pyx_n_s_pyx_result;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_type;
static PyObject *__pyx_n_s_pyx_unpickle_BaseStrategyEvent;
static PyObject *__pyx_n_s_pyx_unpickle_BuyOrderCompleted;
static PyObject *__pyx_n_s_pyx_unpickle_BuyOrderCreatedLi;
static PyObject *__pyx_n_s_pyx_unpickle_FundingPaymentCom;
static PyObject *__pyx_n_s_pyx_unpickle_OrderCancelledLis;
static PyObject *__pyx_n_s_pyx_unpickle_OrderExpiredListe;
static PyObject *__pyx_n_s_pyx_unpickle_OrderFailedListen;
static PyObject *__pyx_n_s_pyx_unpickle_OrderFilledListen;
static PyObject *__pyx_n_s_pyx_unpickle_RangePositionCrea;
static PyObject *__pyx_n_s_pyx_unpickle_RangePositionRemo;
static PyObject *__pyx_n_s_pyx_unpickle_SellOrderComplete;
static PyObject *__pyx_n_s_pyx_unpickle_SellOrderCreatedL;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_quantity;
static PyObject *__pyx_n_s_quote_asset;
static PyObject *__pyx_n_s_quote_asset_conversion_rate;
static PyObject *__pyx_n_s_quote_balance;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_remove_markets;
static PyObject *__pyx_n_s_return;
static PyObject *__pyx_n_u_s;
static PyObject *__pyx_n_s_s_decimal_0;
static PyObject *__pyx_n_s_s_decimal_nan;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_kp_s_self__events_cannot_be_converted;
static PyObject *__pyx_n_s_sell_with_specific_market;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_sorted;
static PyObject *__pyx_n_s_spec;
static PyObject *__pyx_n_s_start_tracking_limit_order;
static PyObject *__pyx_n_s_start_tracking_market_order;
static PyObject *__pyx_n_s_state;
static PyObject *__pyx_n_s_stop_tracking_limit_order;
static PyObject *__pyx_n_s_stop_tracking_market_order;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_timestamp;
static PyObject *__pyx_n_s_track_restored_orders;
static PyObject *__pyx_n_s_trade_fee;
static PyObject *__pyx_n_s_trade_type;
static PyObject *__pyx_n_s_trading_pair;
static PyObject *__pyx_n_s_trading_pairs;
static PyObject *__pyx_n_s_typing;
static PyObject *__pyx_n_s_tz;
static PyObject *__pyx_n_s_unit;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_use_setstate;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_wallet_balance_data_frame;
static PyObject *__pyx_n_s_warning_lines;
static PyObject *__pyx_n_s_x;
#endif
/* #### Code section: decls ### */
static int __pyx_pf_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener___init__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *__pyx_v_self, struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_owner); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_2__reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_4__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_19OrderFilledListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFilledListener *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_19OrderFilledListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFilledListener *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_19OrderFailedListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFailedListener *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_19OrderFailedListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFailedListener *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderCancelledListener *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderCancelledListener *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderExpiredListener *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderExpiredListener *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener *__pyx_v_self, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_logger(CYTHON_UNUSED PyTypeObject *__pyx_v_cls); /* proto */
static int __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_2__init__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_4init_params(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_14active_markets___get__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_13order_tracker___get__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_6format_status(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_8log_with_clock(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_log_level, PyObject *__pyx_v_msg, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___event_to_trade(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_order_filled_event, PyObject *__pyx_v_market_name); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_e); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_ofe); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades___get__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_10market_status_data_frame(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuples); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_12wallet_balance_data_frame(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuples); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_14balance_warning(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuples); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_16network_warning(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuples); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_18add_markets(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_markets); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_20remove_markets(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_markets); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_22cum_flat_fees(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_quote_asset, PyObject *__pyx_v_flat_fees); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_24buy_with_specific_market(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuple, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_expiration_seconds, PyObject *__pyx_v_position_action); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_26sell_with_specific_market(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuple, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_expiration_seconds, PyObject *__pyx_v_position_action); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_28cancel_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuple, PyObject *__pyx_v_order_id); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_30start_tracking_limit_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair, PyObject *__pyx_v_order_id, PyObject *__pyx_v_is_buy, PyObject *__pyx_v_price, PyObject *__pyx_v_quantity); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_32stop_tracking_limit_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair, PyObject *__pyx_v_order_id); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_34start_tracking_market_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair, PyObject *__pyx_v_order_id, PyObject *__pyx_v_is_buy, PyObject *__pyx_v_quantity); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_36stop_tracking_market_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair, PyObject *__pyx_v_order_id); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_38track_restored_orders(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_40notify_hb_app(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_msg); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_42notify_hb_app_with_timestamp(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_msg); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_17_sb_order_tracker___get__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_17_sb_order_tracker_2__set__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_17_sb_order_tracker_4__del__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_44__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_46__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base___pyx_unpickle_BaseStrategyEventListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_2__pyx_unpickle_BuyOrderCompletedListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_4__pyx_unpickle_SellOrderCompletedListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_6__pyx_unpickle_FundingPaymentCompletedListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_8__pyx_unpickle_OrderFilledListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_10__pyx_unpickle_OrderFailedListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12__pyx_unpickle_OrderCancelledListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_14__pyx_unpickle_OrderExpiredListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_16__pyx_unpickle_BuyOrderCreatedListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_18__pyx_unpickle_SellOrderCreatedListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_20__pyx_unpickle_RangePositionCreatedListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_22__pyx_unpickle_RangePositionRemovedListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_StrategyBase(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_OrderFilledListener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_OrderFailedListener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_OrderCancelledListener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_OrderExpiredListener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_231533357;
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_k__10;
static PyObject *__pyx_k__11;
static PyObject *__pyx_k__12;
static PyObject *__pyx_k__13;
static PyObject *__pyx_k__14;
static PyObject *__pyx_k__15;
static double __pyx_k__16;
static PyObject *__pyx_k__17;
static PyObject *__pyx_k__21;
static PyObject *__pyx_k__22;
static PyObject *__pyx_k__23;
static PyObject *__pyx_k__24;
static PyObject *__pyx_k__25;
static PyObject *__pyx_k__26;
static double __pyx_k__27;
static PyObject *__pyx_k__28;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_codeobj__3;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_tuple__110;
static PyObject *__pyx_tuple__112;
static PyObject *__pyx_tuple__114;
static PyObject *__pyx_tuple__116;
static PyObject *__pyx_tuple__118;
static PyObject *__pyx_tuple__120;
static PyObject *__pyx_tuple__122;
static PyObject *__pyx_tuple__124;
static PyObject *__pyx_tuple__126;
static PyObject *__pyx_tuple__128;
static PyObject *__pyx_tuple__130;
static PyObject *__pyx_tuple__132;
static PyObject *__pyx_tuple__134;
static PyObject *__pyx_tuple__136;
static PyObject *__pyx_tuple__138;
static PyObject *__pyx_tuple__140;
static PyObject *__pyx_tuple__142;
static PyObject *__pyx_tuple__144;
static PyObject *__pyx_tuple__146;
static PyObject *__pyx_tuple__148;
static PyObject *__pyx_tuple__150;
static PyObject *__pyx_tuple__152;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__51;
static PyObject *__pyx_codeobj__53;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__57;
static PyObject *__pyx_codeobj__59;
static PyObject *__pyx_codeobj__61;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__65;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__91;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__107;
static PyObject *__pyx_codeobj__109;
static PyObject *__pyx_codeobj__111;
static PyObject *__pyx_codeobj__113;
static PyObject *__pyx_codeobj__115;
static PyObject *__pyx_codeobj__117;
static PyObject *__pyx_codeobj__119;
static PyObject *__pyx_codeobj__121;
static PyObject *__pyx_codeobj__123;
static PyObject *__pyx_codeobj__125;
static PyObject *__pyx_codeobj__127;
static PyObject *__pyx_codeobj__129;
static PyObject *__pyx_codeobj__131;
static PyObject *__pyx_codeobj__133;
static PyObject *__pyx_codeobj__135;
static PyObject *__pyx_codeobj__137;
static PyObject *__pyx_codeobj__139;
static PyObject *__pyx_codeobj__141;
static PyObject *__pyx_codeobj__143;
static PyObject *__pyx_codeobj__145;
static PyObject *__pyx_codeobj__147;
static PyObject *__pyx_codeobj__149;
static PyObject *__pyx_codeobj__151;
static PyObject *__pyx_codeobj__153;
#endif
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5clock_Clock;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_6pubsub_PubSub;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase;
  PyObject *__pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  PyObject *__pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener;
  PyObject *__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener;
  PyObject *__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener;
  PyObject *__pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFilledListener;
  PyObject *__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFailedListener;
  PyObject *__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderCancelledListener;
  PyObject *__pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderExpiredListener;
  PyObject *__pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener;
  PyObject *__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener;
  PyObject *__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener;
  PyObject *__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener;
  PyObject *__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__;
  PyObject *__pyx_type_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__;
  PyObject *__pyx_kp_u_;
  PyObject *__pyx_kp_u_0;
  PyObject *__pyx_kp_u_0_0001;
  PyObject *__pyx_n_u_Asset;
  PyObject *__pyx_kp_u_Available_Balance;
  PyObject *__pyx_n_s_BUY_ORDER_COMPLETED_EVENT_TAG;
  PyObject *__pyx_n_s_BUY_ORDER_CREATED_EVENT_TAG;
  PyObject *__pyx_n_s_BaseStrategyEventListener;
  PyObject *__pyx_n_s_BaseStrategyEventListener___redu;
  PyObject *__pyx_n_s_BaseStrategyEventListener___sets;
  PyObject *__pyx_kp_u_Best_Ask_Price;
  PyObject *__pyx_kp_u_Best_Bid_Price;
  PyObject *__pyx_n_s_BuyOrderCompleted;
  PyObject *__pyx_n_s_BuyOrderCompletedListener;
  PyObject *__pyx_n_s_BuyOrderCompletedListener___redu;
  PyObject *__pyx_n_s_BuyOrderCompletedListener___sets;
  PyObject *__pyx_n_s_BuyOrderCreated;
  PyObject *__pyx_n_s_BuyOrderCreatedListener;
  PyObject *__pyx_n_s_BuyOrderCreatedListener___reduce;
  PyObject *__pyx_n_s_BuyOrderCreatedListener___setsta;
  PyObject *__pyx_n_s_CONNECTED;
  PyObject *__pyx_kp_u_Cancelling_the_limit_order;
  PyObject *__pyx_n_s_DataFrame;
  PyObject *__pyx_n_s_Decimal;
  PyObject *__pyx_kp_u_Delegates_are_not_allowed_to_exe;
  PyObject *__pyx_n_s_DerivativeBase;
  PyObject *__pyx_kp_u_Error_formatting_market_stats;
  PyObject *__pyx_kp_u_Error_formatting_wallet_balance;
  PyObject *__pyx_n_u_Exchange;
  PyObject *__pyx_n_s_FUNDING_PAYMENT_COMPLETED_EVENT;
  PyObject *__pyx_kp_u_Flat_fee_in_other_token_than_quo;
  PyObject *__pyx_n_s_FundingPaymentCompleted;
  PyObject *__pyx_n_s_FundingPaymentCompletedListener;
  PyObject *__pyx_n_s_FundingPaymentCompletedListener_2;
  PyObject *__pyx_n_s_FundingPaymentCompletedListener_3;
  PyObject *__pyx_n_s_HummingbotApplication;
  PyObject *__pyx_n_s_INFO;
  PyObject *__pyx_kp_s_Incompatible_checksums_s_vs_0xdc;
  PyObject *__pyx_n_s_List;
  PyObject *__pyx_kp_s_List_ConnectorBase;
  PyObject *__pyx_kp_s_List_MarketTradingPairTuple;
  PyObject *__pyx_kp_s_List_str;
  PyObject *__pyx_n_s_MARKET;
  PyObject *__pyx_n_u_Market;
  PyObject *__pyx_n_s_MarketEvent;
  PyObject *__pyx_n_s_MarketTradingPairTuple;
  PyObject *__pyx_kp_u_Market_object_for_buy_order_is_n;
  PyObject *__pyx_kp_u_Market_object_for_sell_order_is;
  PyObject *__pyx_kp_u_Markets_are_offline_for_the;
  PyObject *__pyx_kp_u_Mid_Price;
  PyObject *__pyx_n_s_NaN;
  PyObject *__pyx_n_u_NaN;
  PyObject *__pyx_n_s_NetworkStatus;
  PyObject *__pyx_kp_u_None;
  PyObject *__pyx_n_s_NotImplementedError;
  PyObject *__pyx_n_s_OPEN;
  PyObject *__pyx_n_s_ORDER_CANCELLED_EVENT_TAG;
  PyObject *__pyx_n_s_ORDER_EXPIRED_EVENT_TAG;
  PyObject *__pyx_n_s_ORDER_FAILURE_EVENT_TAG;
  PyObject *__pyx_n_s_ORDER_FILLED_EVENT_TAG;
  PyObject *__pyx_n_s_OrderCancelled;
  PyObject *__pyx_n_s_OrderCancelledListener;
  PyObject *__pyx_n_s_OrderCancelledListener___reduce;
  PyObject *__pyx_n_s_OrderCancelledListener___setstat;
  PyObject *__pyx_n_s_OrderExpired;
  PyObject *__pyx_n_s_OrderExpiredListener;
  PyObject *__pyx_n_s_OrderExpiredListener___reduce_cy;
  PyObject *__pyx_n_s_OrderExpiredListener___setstate;
  PyObject *__pyx_n_s_OrderFailedListener;
  PyObject *__pyx_n_s_OrderFailedListener___reduce_cyt;
  PyObject *__pyx_n_s_OrderFailedListener___setstate_c;
  PyObject *__pyx_n_s_OrderFailure;
  PyObject *__pyx_n_s_OrderFilled;
  PyObject *__pyx_n_s_OrderFilledEvent;
  PyObject *__pyx_n_s_OrderFilledListener;
  PyObject *__pyx_n_s_OrderFilledListener___reduce_cyt;
  PyObject *__pyx_n_s_OrderFilledListener___setstate_c;
  PyObject *__pyx_n_s_OrderTracker;
  PyObject *__pyx_n_s_OrderType;
  PyObject *__pyx_n_s_PickleError;
  PyObject *__pyx_n_s_PositionAction;
  PyObject *__pyx_n_s_RANGE_POSITION_CREATED_EVENT_TAG;
  PyObject *__pyx_n_s_RANGE_POSITION_REMOVED_EVENT_TAG;
  PyObject *__pyx_n_s_RangePositionCreated;
  PyObject *__pyx_n_s_RangePositionCreatedListener;
  PyObject *__pyx_n_s_RangePositionCreatedListener___r;
  PyObject *__pyx_n_s_RangePositionCreatedListener___s;
  PyObject *__pyx_n_s_RangePositionRemoved;
  PyObject *__pyx_n_s_RangePositionRemovedListener;
  PyObject *__pyx_n_s_RangePositionRemovedListener___r;
  PyObject *__pyx_n_s_RangePositionRemovedListener___s;
  PyObject *__pyx_n_s_RuntimeError;
  PyObject *__pyx_n_s_SELL_ORDER_COMPLETED_EVENT_TAG;
  PyObject *__pyx_n_s_SELL_ORDER_CREATED_EVENT_TAG;
  PyObject *__pyx_n_s_SellOrderCompleted;
  PyObject *__pyx_n_s_SellOrderCompletedListener;
  PyObject *__pyx_n_s_SellOrderCompletedListener___red;
  PyObject *__pyx_n_s_SellOrderCompletedListener___set;
  PyObject *__pyx_n_s_SellOrderCreated;
  PyObject *__pyx_n_s_SellOrderCreatedListener;
  PyObject *__pyx_n_s_SellOrderCreatedListener___reduc;
  PyObject *__pyx_n_s_SellOrderCreatedListener___setst;
  PyObject *__pyx_n_s_StrategyBase;
  PyObject *__pyx_n_s_StrategyBase___get___locals_even;
  PyObject *__pyx_n_s_StrategyBase___get___locals_lamb;
  PyObject *__pyx_n_s_StrategyBase___reduce_cython;
  PyObject *__pyx_n_s_StrategyBase___setstate_cython;
  PyObject *__pyx_n_s_StrategyBase_add_markets;
  PyObject *__pyx_n_s_StrategyBase_balance_warning;
  PyObject *__pyx_n_s_StrategyBase_buy_with_specific_m;
  PyObject *__pyx_n_s_StrategyBase_cancel_order;
  PyObject *__pyx_n_s_StrategyBase_cum_flat_fees;
  PyObject *__pyx_n_s_StrategyBase_format_status;
  PyObject *__pyx_n_s_StrategyBase_init_params;
  PyObject *__pyx_n_s_StrategyBase_log_with_clock;
  PyObject *__pyx_n_s_StrategyBase_logger;
  PyObject *__pyx_n_s_StrategyBase_market_status_data;
  PyObject *__pyx_n_s_StrategyBase_network_warning;
  PyObject *__pyx_n_s_StrategyBase_notify_hb_app;
  PyObject *__pyx_n_s_StrategyBase_notify_hb_app_with;
  PyObject *__pyx_n_s_StrategyBase_remove_markets;
  PyObject *__pyx_n_s_StrategyBase_sell_with_specific;
  PyObject *__pyx_n_s_StrategyBase_start_tracking_limi;
  PyObject *__pyx_n_s_StrategyBase_start_tracking_mark;
  PyObject *__pyx_n_s_StrategyBase_stop_tracking_limit;
  PyObject *__pyx_n_s_StrategyBase_stop_tracking_marke;
  PyObject *__pyx_n_s_StrategyBase_track_restored_orde;
  PyObject *__pyx_n_s_StrategyBase_wallet_balance_data;
  PyObject *__pyx_n_s_Timestamp;
  PyObject *__pyx_kp_u_Total_Balance;
  PyObject *__pyx_n_s_Trade;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_u_UTC;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_n_s__154;
  PyObject *__pyx_kp_u__30;
  PyObject *__pyx_kp_u__31;
  PyObject *__pyx_kp_u__32;
  PyObject *__pyx_n_s__33;
  PyObject *__pyx_kp_u__6;
  PyObject *__pyx_kp_u__7;
  PyObject *__pyx_kp_u__8;
  PyObject *__pyx_n_s_active_markets;
  PyObject *__pyx_n_s_add_markets;
  PyObject *__pyx_n_s_all;
  PyObject *__pyx_n_s_amount;
  PyObject *__pyx_n_s_args;
  PyObject *__pyx_n_s_ask_price;
  PyObject *__pyx_n_s_assets_columns;
  PyObject *__pyx_n_s_assets_data;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_available_base_balance;
  PyObject *__pyx_n_s_available_quote_balance;
  PyObject *__pyx_kp_u_balance_is_too_low_Cannot_place;
  PyObject *__pyx_n_s_balance_warning;
  PyObject *__pyx_n_s_base_asset;
  PyObject *__pyx_n_s_base_asset_conversion_rate;
  PyObject *__pyx_n_s_base_balance;
  PyObject *__pyx_n_s_bid_price;
  PyObject *__pyx_n_s_bool;
  PyObject *__pyx_n_s_buy_with_specific_market;
  PyObject *__pyx_n_s_cancel_order;
  PyObject *__pyx_n_s_client_order_id;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_kp_u_clock;
  PyObject *__pyx_n_s_clock_timestamp;
  PyObject *__pyx_n_s_cls;
  PyObject *__pyx_n_s_columns;
  PyObject *__pyx_n_s_cum_flat_fees;
  PyObject *__pyx_n_s_data;
  PyObject *__pyx_n_s_decimal;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_n_s_dict_2;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_display_name;
  PyObject *__pyx_n_s_e;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_error;
  PyObject *__pyx_n_s_event_logs;
  PyObject *__pyx_n_s_event_to_trade;
  PyObject *__pyx_n_s_exc_info;
  PyObject *__pyx_n_s_expiration_seconds;
  PyObject *__pyx_n_u_expiration_ts;
  PyObject *__pyx_n_s_filter;
  PyObject *__pyx_n_s_flat_fees;
  PyObject *__pyx_n_s_format_status;
  PyObject *__pyx_n_s_fromtimestamp;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_get_available_balance;
  PyObject *__pyx_n_s_get_balance;
  PyObject *__pyx_n_s_get_price;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_hummingbot_client_hummingbot_app;
  PyObject *__pyx_n_s_hummingbot_connector_derivative;
  PyObject *__pyx_n_s_hummingbot_core_data_type_trade;
  PyObject *__pyx_n_s_hummingbot_core_event_events;
  PyObject *__pyx_n_s_hummingbot_core_network_iterator;
  PyObject *__pyx_n_s_hummingbot_strategy_market_tradi;
  PyObject *__pyx_kp_s_hummingbot_strategy_strategy_bas;
  PyObject *__pyx_n_s_hummingbot_strategy_strategy_bas_2;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_init;
  PyObject *__pyx_n_s_init_params;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_int;
  PyObject *__pyx_n_s_is_buy;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_is_limit_type;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_key;
  PyObject *__pyx_n_s_kwargs;
  PyObject *__pyx_n_s_limit_orders;
  PyObject *__pyx_n_s_log;
  PyObject *__pyx_n_s_log_level;
  PyObject *__pyx_n_s_log_with_clock;
  PyObject *__pyx_n_s_logger;
  PyObject *__pyx_n_s_logging;
  PyObject *__pyx_kp_s_logging_Logger;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_main_application;
  PyObject *__pyx_n_s_map;
  PyObject *__pyx_n_s_market;
  PyObject *__pyx_kp_u_market_2;
  PyObject *__pyx_n_s_market_name;
  PyObject *__pyx_n_s_market_pair;
  PyObject *__pyx_n_s_market_status_data_frame;
  PyObject *__pyx_n_s_market_trading_pair_tuple;
  PyObject *__pyx_n_s_market_trading_pair_tuples;
  PyObject *__pyx_n_s_markets;
  PyObject *__pyx_n_s_markets_columns;
  PyObject *__pyx_n_s_markets_data;
  PyObject *__pyx_n_s_mid_price;
  PyObject *__pyx_n_s_msg;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_name_2;
  PyObject *__pyx_n_u_nan;
  PyObject *__pyx_n_s_network_status;
  PyObject *__pyx_n_s_network_warning;
  PyObject *__pyx_n_s_new;
  PyObject *__pyx_n_s_notify;
  PyObject *__pyx_n_s_notify_hb_app;
  PyObject *__pyx_n_s_notify_hb_app_with_timestamp;
  PyObject *__pyx_n_s_ofe;
  PyObject *__pyx_n_s_order_filled_event;
  PyObject *__pyx_n_s_order_id;
  PyObject *__pyx_n_s_order_tracker;
  PyObject *__pyx_n_s_order_type;
  PyObject *__pyx_n_s_owner;
  PyObject *__pyx_kp_u_pair_Continued_trading_with_the;
  PyObject *__pyx_n_s_pandas;
  PyObject *__pyx_n_s_pd;
  PyObject *__pyx_kp_s_pd_DataFrame;
  PyObject *__pyx_n_s_pickle;
  PyObject *__pyx_n_s_position_action;
  PyObject *__pyx_n_u_position_action;
  PyObject *__pyx_n_s_price;
  PyObject *__pyx_kp_u_price_and_amount_must_be_Decimal;
  PyObject *__pyx_n_s_pyx_PickleError;
  PyObject *__pyx_n_s_pyx_checksum;
  PyObject *__pyx_n_s_pyx_result;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_type;
  PyObject *__pyx_n_s_pyx_unpickle_BaseStrategyEvent;
  PyObject *__pyx_n_s_pyx_unpickle_BuyOrderCompleted;
  PyObject *__pyx_n_s_pyx_unpickle_BuyOrderCreatedLi;
  PyObject *__pyx_n_s_pyx_unpickle_FundingPaymentCom;
  PyObject *__pyx_n_s_pyx_unpickle_OrderCancelledLis;
  PyObject *__pyx_n_s_pyx_unpickle_OrderExpiredListe;
  PyObject *__pyx_n_s_pyx_unpickle_OrderFailedListen;
  PyObject *__pyx_n_s_pyx_unpickle_OrderFilledListen;
  PyObject *__pyx_n_s_pyx_unpickle_RangePositionCrea;
  PyObject *__pyx_n_s_pyx_unpickle_RangePositionRemo;
  PyObject *__pyx_n_s_pyx_unpickle_SellOrderComplete;
  PyObject *__pyx_n_s_pyx_unpickle_SellOrderCreatedL;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_s_quantity;
  PyObject *__pyx_n_s_quote_asset;
  PyObject *__pyx_n_s_quote_asset_conversion_rate;
  PyObject *__pyx_n_s_quote_balance;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_remove_markets;
  PyObject *__pyx_n_s_return;
  PyObject *__pyx_n_u_s;
  PyObject *__pyx_n_s_s_decimal_0;
  PyObject *__pyx_n_s_s_decimal_nan;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_self__events_cannot_be_converted;
  PyObject *__pyx_n_s_sell_with_specific_market;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_sorted;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_start_tracking_limit_order;
  PyObject *__pyx_n_s_start_tracking_market_order;
  PyObject *__pyx_n_s_state;
  PyObject *__pyx_n_s_stop_tracking_limit_order;
  PyObject *__pyx_n_s_stop_tracking_market_order;
  PyObject *__pyx_n_s_str;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_timestamp;
  PyObject *__pyx_n_s_track_restored_orders;
  PyObject *__pyx_n_s_trade_fee;
  PyObject *__pyx_n_s_trade_type;
  PyObject *__pyx_n_s_trading_pair;
  PyObject *__pyx_n_s_trading_pairs;
  PyObject *__pyx_n_s_typing;
  PyObject *__pyx_n_s_tz;
  PyObject *__pyx_n_s_unit;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_n_s_use_setstate;
  PyObject *__pyx_n_s_value;
  PyObject *__pyx_n_s_wallet_balance_data_frame;
  PyObject *__pyx_n_s_warning_lines;
  PyObject *__pyx_n_s_x;
  PyObject *__pyx_int_2;
  PyObject *__pyx_int_231533357;
  PyObject *__pyx_k__10;
  PyObject *__pyx_k__11;
  PyObject *__pyx_k__12;
  PyObject *__pyx_k__13;
  PyObject *__pyx_k__14;
  PyObject *__pyx_k__15;
  double __pyx_k__16;
  PyObject *__pyx_k__17;
  PyObject *__pyx_k__21;
  PyObject *__pyx_k__22;
  PyObject *__pyx_k__23;
  PyObject *__pyx_k__24;
  PyObject *__pyx_k__25;
  PyObject *__pyx_k__26;
  double __pyx_k__27;
  PyObject *__pyx_k__28;
  PyObject *__pyx_tuple__2;
  PyObject *__pyx_tuple__4;
  PyObject *__pyx_tuple__5;
  PyObject *__pyx_tuple__9;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__19;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__29;
  PyObject *__pyx_tuple__34;
  PyObject *__pyx_tuple__35;
  PyObject *__pyx_tuple__36;
  PyObject *__pyx_tuple__38;
  PyObject *__pyx_tuple__40;
  PyObject *__pyx_tuple__42;
  PyObject *__pyx_tuple__44;
  PyObject *__pyx_tuple__46;
  PyObject *__pyx_tuple__48;
  PyObject *__pyx_tuple__50;
  PyObject *__pyx_tuple__52;
  PyObject *__pyx_tuple__54;
  PyObject *__pyx_tuple__56;
  PyObject *__pyx_tuple__58;
  PyObject *__pyx_tuple__60;
  PyObject *__pyx_tuple__62;
  PyObject *__pyx_tuple__64;
  PyObject *__pyx_tuple__66;
  PyObject *__pyx_tuple__68;
  PyObject *__pyx_tuple__70;
  PyObject *__pyx_tuple__72;
  PyObject *__pyx_tuple__74;
  PyObject *__pyx_tuple__76;
  PyObject *__pyx_tuple__78;
  PyObject *__pyx_tuple__80;
  PyObject *__pyx_tuple__82;
  PyObject *__pyx_tuple__84;
  PyObject *__pyx_tuple__86;
  PyObject *__pyx_tuple__88;
  PyObject *__pyx_tuple__90;
  PyObject *__pyx_tuple__92;
  PyObject *__pyx_tuple__94;
  PyObject *__pyx_tuple__96;
  PyObject *__pyx_tuple__98;
  PyObject *__pyx_codeobj__3;
  PyObject *__pyx_tuple__100;
  PyObject *__pyx_tuple__102;
  PyObject *__pyx_tuple__104;
  PyObject *__pyx_tuple__106;
  PyObject *__pyx_tuple__108;
  PyObject *__pyx_tuple__110;
  PyObject *__pyx_tuple__112;
  PyObject *__pyx_tuple__114;
  PyObject *__pyx_tuple__116;
  PyObject *__pyx_tuple__118;
  PyObject *__pyx_tuple__120;
  PyObject *__pyx_tuple__122;
  PyObject *__pyx_tuple__124;
  PyObject *__pyx_tuple__126;
  PyObject *__pyx_tuple__128;
  PyObject *__pyx_tuple__130;
  PyObject *__pyx_tuple__132;
  PyObject *__pyx_tuple__134;
  PyObject *__pyx_tuple__136;
  PyObject *__pyx_tuple__138;
  PyObject *__pyx_tuple__140;
  PyObject *__pyx_tuple__142;
  PyObject *__pyx_tuple__144;
  PyObject *__pyx_tuple__146;
  PyObject *__pyx_tuple__148;
  PyObject *__pyx_tuple__150;
  PyObject *__pyx_tuple__152;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__39;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__43;
  PyObject *__pyx_codeobj__45;
  PyObject *__pyx_codeobj__47;
  PyObject *__pyx_codeobj__49;
  PyObject *__pyx_codeobj__51;
  PyObject *__pyx_codeobj__53;
  PyObject *__pyx_codeobj__55;
  PyObject *__pyx_codeobj__57;
  PyObject *__pyx_codeobj__59;
  PyObject *__pyx_codeobj__61;
  PyObject *__pyx_codeobj__63;
  PyObject *__pyx_codeobj__65;
  PyObject *__pyx_codeobj__67;
  PyObject *__pyx_codeobj__69;
  PyObject *__pyx_codeobj__71;
  PyObject *__pyx_codeobj__73;
  PyObject *__pyx_codeobj__75;
  PyObject *__pyx_codeobj__77;
  PyObject *__pyx_codeobj__79;
  PyObject *__pyx_codeobj__81;
  PyObject *__pyx_codeobj__83;
  PyObject *__pyx_codeobj__85;
  PyObject *__pyx_codeobj__87;
  PyObject *__pyx_codeobj__89;
  PyObject *__pyx_codeobj__91;
  PyObject *__pyx_codeobj__93;
  PyObject *__pyx_codeobj__95;
  PyObject *__pyx_codeobj__97;
  PyObject *__pyx_codeobj__99;
  PyObject *__pyx_codeobj__101;
  PyObject *__pyx_codeobj__103;
  PyObject *__pyx_codeobj__105;
  PyObject *__pyx_codeobj__107;
  PyObject *__pyx_codeobj__109;
  PyObject *__pyx_codeobj__111;
  PyObject *__pyx_codeobj__113;
  PyObject *__pyx_codeobj__115;
  PyObject *__pyx_codeobj__117;
  PyObject *__pyx_codeobj__119;
  PyObject *__pyx_codeobj__121;
  PyObject *__pyx_codeobj__123;
  PyObject *__pyx_codeobj__125;
  PyObject *__pyx_codeobj__127;
  PyObject *__pyx_codeobj__129;
  PyObject *__pyx_codeobj__131;
  PyObject *__pyx_codeobj__133;
  PyObject *__pyx_codeobj__135;
  PyObject *__pyx_codeobj__137;
  PyObject *__pyx_codeobj__139;
  PyObject *__pyx_codeobj__141;
  PyObject *__pyx_codeobj__143;
  PyObject *__pyx_codeobj__145;
  PyObject *__pyx_codeobj__147;
  PyObject *__pyx_codeobj__149;
  PyObject *__pyx_codeobj__151;
  PyObject *__pyx_codeobj__153;
} __pyx_mstate;

#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5clock_Clock);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_6pubsub_PubSub);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFilledListener);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFailedListener);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderCancelledListener);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderExpiredListener);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__);
  Py_CLEAR(clear_module_state->__pyx_kp_u_);
  Py_CLEAR(clear_module_state->__pyx_kp_u_0);
  Py_CLEAR(clear_module_state->__pyx_kp_u_0_0001);
  Py_CLEAR(clear_module_state->__pyx_n_u_Asset);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Available_Balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_BUY_ORDER_COMPLETED_EVENT_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_BUY_ORDER_CREATED_EVENT_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseStrategyEventListener);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseStrategyEventListener___redu);
  Py_CLEAR(clear_module_state->__pyx_n_s_BaseStrategyEventListener___sets);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Best_Ask_Price);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Best_Bid_Price);
  Py_CLEAR(clear_module_state->__pyx_n_s_BuyOrderCompleted);
  Py_CLEAR(clear_module_state->__pyx_n_s_BuyOrderCompletedListener);
  Py_CLEAR(clear_module_state->__pyx_n_s_BuyOrderCompletedListener___redu);
  Py_CLEAR(clear_module_state->__pyx_n_s_BuyOrderCompletedListener___sets);
  Py_CLEAR(clear_module_state->__pyx_n_s_BuyOrderCreated);
  Py_CLEAR(clear_module_state->__pyx_n_s_BuyOrderCreatedListener);
  Py_CLEAR(clear_module_state->__pyx_n_s_BuyOrderCreatedListener___reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_BuyOrderCreatedListener___setsta);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONNECTED);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Cancelling_the_limit_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_DataFrame);
  Py_CLEAR(clear_module_state->__pyx_n_s_Decimal);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Delegates_are_not_allowed_to_exe);
  Py_CLEAR(clear_module_state->__pyx_n_s_DerivativeBase);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_formatting_market_stats);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_formatting_wallet_balance);
  Py_CLEAR(clear_module_state->__pyx_n_u_Exchange);
  Py_CLEAR(clear_module_state->__pyx_n_s_FUNDING_PAYMENT_COMPLETED_EVENT);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Flat_fee_in_other_token_than_quo);
  Py_CLEAR(clear_module_state->__pyx_n_s_FundingPaymentCompleted);
  Py_CLEAR(clear_module_state->__pyx_n_s_FundingPaymentCompletedListener);
  Py_CLEAR(clear_module_state->__pyx_n_s_FundingPaymentCompletedListener_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_FundingPaymentCompletedListener_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_HummingbotApplication);
  Py_CLEAR(clear_module_state->__pyx_n_s_INFO);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Incompatible_checksums_s_vs_0xdc);
  Py_CLEAR(clear_module_state->__pyx_n_s_List);
  Py_CLEAR(clear_module_state->__pyx_kp_s_List_ConnectorBase);
  Py_CLEAR(clear_module_state->__pyx_kp_s_List_MarketTradingPairTuple);
  Py_CLEAR(clear_module_state->__pyx_kp_s_List_str);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET);
  Py_CLEAR(clear_module_state->__pyx_n_u_Market);
  Py_CLEAR(clear_module_state->__pyx_n_s_MarketEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_MarketTradingPairTuple);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Market_object_for_buy_order_is_n);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Market_object_for_sell_order_is);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Markets_are_offline_for_the);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Mid_Price);
  Py_CLEAR(clear_module_state->__pyx_n_s_NaN);
  Py_CLEAR(clear_module_state->__pyx_n_u_NaN);
  Py_CLEAR(clear_module_state->__pyx_n_s_NetworkStatus);
  Py_CLEAR(clear_module_state->__pyx_kp_u_None);
  Py_CLEAR(clear_module_state->__pyx_n_s_NotImplementedError);
  Py_CLEAR(clear_module_state->__pyx_n_s_OPEN);
  Py_CLEAR(clear_module_state->__pyx_n_s_ORDER_CANCELLED_EVENT_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_ORDER_EXPIRED_EVENT_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_ORDER_FAILURE_EVENT_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_ORDER_FILLED_EVENT_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderCancelled);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderCancelledListener);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderCancelledListener___reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderCancelledListener___setstat);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderExpired);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderExpiredListener);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderExpiredListener___reduce_cy);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderExpiredListener___setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderFailedListener);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderFailedListener___reduce_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderFailedListener___setstate_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderFailure);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderFilled);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderFilledEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderFilledListener);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderFilledListener___reduce_cyt);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderFilledListener___setstate_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderTracker);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderType);
  Py_CLEAR(clear_module_state->__pyx_n_s_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_PositionAction);
  Py_CLEAR(clear_module_state->__pyx_n_s_RANGE_POSITION_CREATED_EVENT_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_RANGE_POSITION_REMOVED_EVENT_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_RangePositionCreated);
  Py_CLEAR(clear_module_state->__pyx_n_s_RangePositionCreatedListener);
  Py_CLEAR(clear_module_state->__pyx_n_s_RangePositionCreatedListener___r);
  Py_CLEAR(clear_module_state->__pyx_n_s_RangePositionCreatedListener___s);
  Py_CLEAR(clear_module_state->__pyx_n_s_RangePositionRemoved);
  Py_CLEAR(clear_module_state->__pyx_n_s_RangePositionRemovedListener);
  Py_CLEAR(clear_module_state->__pyx_n_s_RangePositionRemovedListener___r);
  Py_CLEAR(clear_module_state->__pyx_n_s_RangePositionRemovedListener___s);
  Py_CLEAR(clear_module_state->__pyx_n_s_RuntimeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_SELL_ORDER_COMPLETED_EVENT_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_SELL_ORDER_CREATED_EVENT_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_SellOrderCompleted);
  Py_CLEAR(clear_module_state->__pyx_n_s_SellOrderCompletedListener);
  Py_CLEAR(clear_module_state->__pyx_n_s_SellOrderCompletedListener___red);
  Py_CLEAR(clear_module_state->__pyx_n_s_SellOrderCompletedListener___set);
  Py_CLEAR(clear_module_state->__pyx_n_s_SellOrderCreated);
  Py_CLEAR(clear_module_state->__pyx_n_s_SellOrderCreatedListener);
  Py_CLEAR(clear_module_state->__pyx_n_s_SellOrderCreatedListener___reduc);
  Py_CLEAR(clear_module_state->__pyx_n_s_SellOrderCreatedListener___setst);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase___get___locals_even);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase___get___locals_lamb);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase___setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_add_markets);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_balance_warning);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_buy_with_specific_m);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_cancel_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_cum_flat_fees);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_format_status);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_init_params);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_log_with_clock);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_logger);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_market_status_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_network_warning);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_notify_hb_app);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_notify_hb_app_with);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_remove_markets);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_sell_with_specific);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_start_tracking_limi);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_start_tracking_mark);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_stop_tracking_limit);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_stop_tracking_marke);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_track_restored_orde);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase_wallet_balance_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_Timestamp);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Total_Balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_Trade);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_u_UTC);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_n_s__154);
  Py_CLEAR(clear_module_state->__pyx_kp_u__30);
  Py_CLEAR(clear_module_state->__pyx_kp_u__31);
  Py_CLEAR(clear_module_state->__pyx_kp_u__32);
  Py_CLEAR(clear_module_state->__pyx_n_s__33);
  Py_CLEAR(clear_module_state->__pyx_kp_u__6);
  Py_CLEAR(clear_module_state->__pyx_kp_u__7);
  Py_CLEAR(clear_module_state->__pyx_kp_u__8);
  Py_CLEAR(clear_module_state->__pyx_n_s_active_markets);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_markets);
  Py_CLEAR(clear_module_state->__pyx_n_s_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_args);
  Py_CLEAR(clear_module_state->__pyx_n_s_ask_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_assets_columns);
  Py_CLEAR(clear_module_state->__pyx_n_s_assets_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_available_base_balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_available_quote_balance);
  Py_CLEAR(clear_module_state->__pyx_kp_u_balance_is_too_low_Cannot_place);
  Py_CLEAR(clear_module_state->__pyx_n_s_balance_warning);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_asset);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_asset_conversion_rate);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_bid_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_bool);
  Py_CLEAR(clear_module_state->__pyx_n_s_buy_with_specific_market);
  Py_CLEAR(clear_module_state->__pyx_n_s_cancel_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_client_order_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_kp_u_clock);
  Py_CLEAR(clear_module_state->__pyx_n_s_clock_timestamp);
  Py_CLEAR(clear_module_state->__pyx_n_s_cls);
  Py_CLEAR(clear_module_state->__pyx_n_s_columns);
  Py_CLEAR(clear_module_state->__pyx_n_s_cum_flat_fees);
  Py_CLEAR(clear_module_state->__pyx_n_s_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_decimal);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_display_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_e);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_error);
  Py_CLEAR(clear_module_state->__pyx_n_s_event_logs);
  Py_CLEAR(clear_module_state->__pyx_n_s_event_to_trade);
  Py_CLEAR(clear_module_state->__pyx_n_s_exc_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_expiration_seconds);
  Py_CLEAR(clear_module_state->__pyx_n_u_expiration_ts);
  Py_CLEAR(clear_module_state->__pyx_n_s_filter);
  Py_CLEAR(clear_module_state->__pyx_n_s_flat_fees);
  Py_CLEAR(clear_module_state->__pyx_n_s_format_status);
  Py_CLEAR(clear_module_state->__pyx_n_s_fromtimestamp);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_available_balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_client_hummingbot_app);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_connector_derivative);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_data_type_trade);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_event_events);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_network_iterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_strategy_market_tradi);
  Py_CLEAR(clear_module_state->__pyx_kp_s_hummingbot_strategy_strategy_bas);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_strategy_strategy_bas_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_init);
  Py_CLEAR(clear_module_state->__pyx_n_s_init_params);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_int);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_buy);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_limit_type);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_kwargs);
  Py_CLEAR(clear_module_state->__pyx_n_s_limit_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_log);
  Py_CLEAR(clear_module_state->__pyx_n_s_log_level);
  Py_CLEAR(clear_module_state->__pyx_n_s_log_with_clock);
  Py_CLEAR(clear_module_state->__pyx_n_s_logger);
  Py_CLEAR(clear_module_state->__pyx_n_s_logging);
  Py_CLEAR(clear_module_state->__pyx_kp_s_logging_Logger);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_main_application);
  Py_CLEAR(clear_module_state->__pyx_n_s_map);
  Py_CLEAR(clear_module_state->__pyx_n_s_market);
  Py_CLEAR(clear_module_state->__pyx_kp_u_market_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_market_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_market_pair);
  Py_CLEAR(clear_module_state->__pyx_n_s_market_status_data_frame);
  Py_CLEAR(clear_module_state->__pyx_n_s_market_trading_pair_tuple);
  Py_CLEAR(clear_module_state->__pyx_n_s_market_trading_pair_tuples);
  Py_CLEAR(clear_module_state->__pyx_n_s_markets);
  Py_CLEAR(clear_module_state->__pyx_n_s_markets_columns);
  Py_CLEAR(clear_module_state->__pyx_n_s_markets_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_mid_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_msg);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_name_2);
  Py_CLEAR(clear_module_state->__pyx_n_u_nan);
  Py_CLEAR(clear_module_state->__pyx_n_s_network_status);
  Py_CLEAR(clear_module_state->__pyx_n_s_network_warning);
  Py_CLEAR(clear_module_state->__pyx_n_s_new);
  Py_CLEAR(clear_module_state->__pyx_n_s_notify);
  Py_CLEAR(clear_module_state->__pyx_n_s_notify_hb_app);
  Py_CLEAR(clear_module_state->__pyx_n_s_notify_hb_app_with_timestamp);
  Py_CLEAR(clear_module_state->__pyx_n_s_ofe);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_filled_event);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_tracker);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_owner);
  Py_CLEAR(clear_module_state->__pyx_kp_u_pair_Continued_trading_with_the);
  Py_CLEAR(clear_module_state->__pyx_n_s_pandas);
  Py_CLEAR(clear_module_state->__pyx_n_s_pd);
  Py_CLEAR(clear_module_state->__pyx_kp_s_pd_DataFrame);
  Py_CLEAR(clear_module_state->__pyx_n_s_pickle);
  Py_CLEAR(clear_module_state->__pyx_n_s_position_action);
  Py_CLEAR(clear_module_state->__pyx_n_u_position_action);
  Py_CLEAR(clear_module_state->__pyx_n_s_price);
  Py_CLEAR(clear_module_state->__pyx_kp_u_price_and_amount_must_be_Decimal);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_PickleError);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_checksum);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_BaseStrategyEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_BuyOrderCompleted);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_BuyOrderCreatedLi);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_FundingPaymentCom);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_OrderCancelledLis);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_OrderExpiredListe);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_OrderFailedListen);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_OrderFilledListen);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_RangePositionCrea);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_RangePositionRemo);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_SellOrderComplete);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_unpickle_SellOrderCreatedL);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_s_quantity);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_asset);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_asset_conversion_rate);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_remove_markets);
  Py_CLEAR(clear_module_state->__pyx_n_s_return);
  Py_CLEAR(clear_module_state->__pyx_n_u_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_s_decimal_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_s_decimal_nan);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self__events_cannot_be_converted);
  Py_CLEAR(clear_module_state->__pyx_n_s_sell_with_specific_market);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_sorted);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_start_tracking_limit_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_start_tracking_market_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_stop_tracking_limit_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_stop_tracking_market_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_str);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_super);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_timestamp);
  Py_CLEAR(clear_module_state->__pyx_n_s_track_restored_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_trade_fee);
  Py_CLEAR(clear_module_state->__pyx_n_s_trade_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_trading_pair);
  Py_CLEAR(clear_module_state->__pyx_n_s_trading_pairs);
  Py_CLEAR(clear_module_state->__pyx_n_s_typing);
  Py_CLEAR(clear_module_state->__pyx_n_s_tz);
  Py_CLEAR(clear_module_state->__pyx_n_s_unit);
  Py_CLEAR(clear_module_state->__pyx_n_s_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_wallet_balance_data_frame);
  Py_CLEAR(clear_module_state->__pyx_n_s_warning_lines);
  Py_CLEAR(clear_module_state->__pyx_n_s_x);
  Py_CLEAR(clear_module_state->__pyx_int_2);
  Py_CLEAR(clear_module_state->__pyx_int_231533357);
  Py_CLEAR(clear_module_state->__pyx_k__10);
  Py_CLEAR(clear_module_state->__pyx_k__11);
  Py_CLEAR(clear_module_state->__pyx_k__12);
  Py_CLEAR(clear_module_state->__pyx_k__13);
  Py_CLEAR(clear_module_state->__pyx_k__14);
  Py_CLEAR(clear_module_state->__pyx_k__15);
  Py_CLEAR(clear_module_state->__pyx_k__16);
  Py_CLEAR(clear_module_state->__pyx_k__17);
  Py_CLEAR(clear_module_state->__pyx_k__21);
  Py_CLEAR(clear_module_state->__pyx_k__22);
  Py_CLEAR(clear_module_state->__pyx_k__23);
  Py_CLEAR(clear_module_state->__pyx_k__24);
  Py_CLEAR(clear_module_state->__pyx_k__25);
  Py_CLEAR(clear_module_state->__pyx_k__26);
  Py_CLEAR(clear_module_state->__pyx_k__27);
  Py_CLEAR(clear_module_state->__pyx_k__28);
  Py_CLEAR(clear_module_state->__pyx_tuple__2);
  Py_CLEAR(clear_module_state->__pyx_tuple__4);
  Py_CLEAR(clear_module_state->__pyx_tuple__5);
  Py_CLEAR(clear_module_state->__pyx_tuple__9);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__19);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__29);
  Py_CLEAR(clear_module_state->__pyx_tuple__34);
  Py_CLEAR(clear_module_state->__pyx_tuple__35);
  Py_CLEAR(clear_module_state->__pyx_tuple__36);
  Py_CLEAR(clear_module_state->__pyx_tuple__38);
  Py_CLEAR(clear_module_state->__pyx_tuple__40);
  Py_CLEAR(clear_module_state->__pyx_tuple__42);
  Py_CLEAR(clear_module_state->__pyx_tuple__44);
  Py_CLEAR(clear_module_state->__pyx_tuple__46);
  Py_CLEAR(clear_module_state->__pyx_tuple__48);
  Py_CLEAR(clear_module_state->__pyx_tuple__50);
  Py_CLEAR(clear_module_state->__pyx_tuple__52);
  Py_CLEAR(clear_module_state->__pyx_tuple__54);
  Py_CLEAR(clear_module_state->__pyx_tuple__56);
  Py_CLEAR(clear_module_state->__pyx_tuple__58);
  Py_CLEAR(clear_module_state->__pyx_tuple__60);
  Py_CLEAR(clear_module_state->__pyx_tuple__62);
  Py_CLEAR(clear_module_state->__pyx_tuple__64);
  Py_CLEAR(clear_module_state->__pyx_tuple__66);
  Py_CLEAR(clear_module_state->__pyx_tuple__68);
  Py_CLEAR(clear_module_state->__pyx_tuple__70);
  Py_CLEAR(clear_module_state->__pyx_tuple__72);
  Py_CLEAR(clear_module_state->__pyx_tuple__74);
  Py_CLEAR(clear_module_state->__pyx_tuple__76);
  Py_CLEAR(clear_module_state->__pyx_tuple__78);
  Py_CLEAR(clear_module_state->__pyx_tuple__80);
  Py_CLEAR(clear_module_state->__pyx_tuple__82);
  Py_CLEAR(clear_module_state->__pyx_tuple__84);
  Py_CLEAR(clear_module_state->__pyx_tuple__86);
  Py_CLEAR(clear_module_state->__pyx_tuple__88);
  Py_CLEAR(clear_module_state->__pyx_tuple__90);
  Py_CLEAR(clear_module_state->__pyx_tuple__92);
  Py_CLEAR(clear_module_state->__pyx_tuple__94);
  Py_CLEAR(clear_module_state->__pyx_tuple__96);
  Py_CLEAR(clear_module_state->__pyx_tuple__98);
  Py_CLEAR(clear_module_state->__pyx_codeobj__3);
  Py_CLEAR(clear_module_state->__pyx_tuple__100);
  Py_CLEAR(clear_module_state->__pyx_tuple__102);
  Py_CLEAR(clear_module_state->__pyx_tuple__104);
  Py_CLEAR(clear_module_state->__pyx_tuple__106);
  Py_CLEAR(clear_module_state->__pyx_tuple__108);
  Py_CLEAR(clear_module_state->__pyx_tuple__110);
  Py_CLEAR(clear_module_state->__pyx_tuple__112);
  Py_CLEAR(clear_module_state->__pyx_tuple__114);
  Py_CLEAR(clear_module_state->__pyx_tuple__116);
  Py_CLEAR(clear_module_state->__pyx_tuple__118);
  Py_CLEAR(clear_module_state->__pyx_tuple__120);
  Py_CLEAR(clear_module_state->__pyx_tuple__122);
  Py_CLEAR(clear_module_state->__pyx_tuple__124);
  Py_CLEAR(clear_module_state->__pyx_tuple__126);
  Py_CLEAR(clear_module_state->__pyx_tuple__128);
  Py_CLEAR(clear_module_state->__pyx_tuple__130);
  Py_CLEAR(clear_module_state->__pyx_tuple__132);
  Py_CLEAR(clear_module_state->__pyx_tuple__134);
  Py_CLEAR(clear_module_state->__pyx_tuple__136);
  Py_CLEAR(clear_module_state->__pyx_tuple__138);
  Py_CLEAR(clear_module_state->__pyx_tuple__140);
  Py_CLEAR(clear_module_state->__pyx_tuple__142);
  Py_CLEAR(clear_module_state->__pyx_tuple__144);
  Py_CLEAR(clear_module_state->__pyx_tuple__146);
  Py_CLEAR(clear_module_state->__pyx_tuple__148);
  Py_CLEAR(clear_module_state->__pyx_tuple__150);
  Py_CLEAR(clear_module_state->__pyx_tuple__152);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__43);
  Py_CLEAR(clear_module_state->__pyx_codeobj__45);
  Py_CLEAR(clear_module_state->__pyx_codeobj__47);
  Py_CLEAR(clear_module_state->__pyx_codeobj__49);
  Py_CLEAR(clear_module_state->__pyx_codeobj__51);
  Py_CLEAR(clear_module_state->__pyx_codeobj__53);
  Py_CLEAR(clear_module_state->__pyx_codeobj__55);
  Py_CLEAR(clear_module_state->__pyx_codeobj__57);
  Py_CLEAR(clear_module_state->__pyx_codeobj__59);
  Py_CLEAR(clear_module_state->__pyx_codeobj__61);
  Py_CLEAR(clear_module_state->__pyx_codeobj__63);
  Py_CLEAR(clear_module_state->__pyx_codeobj__65);
  Py_CLEAR(clear_module_state->__pyx_codeobj__67);
  Py_CLEAR(clear_module_state->__pyx_codeobj__69);
  Py_CLEAR(clear_module_state->__pyx_codeobj__71);
  Py_CLEAR(clear_module_state->__pyx_codeobj__73);
  Py_CLEAR(clear_module_state->__pyx_codeobj__75);
  Py_CLEAR(clear_module_state->__pyx_codeobj__77);
  Py_CLEAR(clear_module_state->__pyx_codeobj__79);
  Py_CLEAR(clear_module_state->__pyx_codeobj__81);
  Py_CLEAR(clear_module_state->__pyx_codeobj__83);
  Py_CLEAR(clear_module_state->__pyx_codeobj__85);
  Py_CLEAR(clear_module_state->__pyx_codeobj__87);
  Py_CLEAR(clear_module_state->__pyx_codeobj__89);
  Py_CLEAR(clear_module_state->__pyx_codeobj__91);
  Py_CLEAR(clear_module_state->__pyx_codeobj__93);
  Py_CLEAR(clear_module_state->__pyx_codeobj__95);
  Py_CLEAR(clear_module_state->__pyx_codeobj__97);
  Py_CLEAR(clear_module_state->__pyx_codeobj__99);
  Py_CLEAR(clear_module_state->__pyx_codeobj__101);
  Py_CLEAR(clear_module_state->__pyx_codeobj__103);
  Py_CLEAR(clear_module_state->__pyx_codeobj__105);
  Py_CLEAR(clear_module_state->__pyx_codeobj__107);
  Py_CLEAR(clear_module_state->__pyx_codeobj__109);
  Py_CLEAR(clear_module_state->__pyx_codeobj__111);
  Py_CLEAR(clear_module_state->__pyx_codeobj__113);
  Py_CLEAR(clear_module_state->__pyx_codeobj__115);
  Py_CLEAR(clear_module_state->__pyx_codeobj__117);
  Py_CLEAR(clear_module_state->__pyx_codeobj__119);
  Py_CLEAR(clear_module_state->__pyx_codeobj__121);
  Py_CLEAR(clear_module_state->__pyx_codeobj__123);
  Py_CLEAR(clear_module_state->__pyx_codeobj__125);
  Py_CLEAR(clear_module_state->__pyx_codeobj__127);
  Py_CLEAR(clear_module_state->__pyx_codeobj__129);
  Py_CLEAR(clear_module_state->__pyx_codeobj__131);
  Py_CLEAR(clear_module_state->__pyx_codeobj__133);
  Py_CLEAR(clear_module_state->__pyx_codeobj__135);
  Py_CLEAR(clear_module_state->__pyx_codeobj__137);
  Py_CLEAR(clear_module_state->__pyx_codeobj__139);
  Py_CLEAR(clear_module_state->__pyx_codeobj__141);
  Py_CLEAR(clear_module_state->__pyx_codeobj__143);
  Py_CLEAR(clear_module_state->__pyx_codeobj__145);
  Py_CLEAR(clear_module_state->__pyx_codeobj__147);
  Py_CLEAR(clear_module_state->__pyx_codeobj__149);
  Py_CLEAR(clear_module_state->__pyx_codeobj__151);
  Py_CLEAR(clear_module_state->__pyx_codeobj__153);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5clock_Clock);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_6pubsub_PubSub);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFilledListener);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFailedListener);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderCancelledListener);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderExpiredListener);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__);
  Py_VISIT(traverse_module_state->__pyx_kp_u_);
  Py_VISIT(traverse_module_state->__pyx_kp_u_0);
  Py_VISIT(traverse_module_state->__pyx_kp_u_0_0001);
  Py_VISIT(traverse_module_state->__pyx_n_u_Asset);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Available_Balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_BUY_ORDER_COMPLETED_EVENT_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_BUY_ORDER_CREATED_EVENT_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseStrategyEventListener);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseStrategyEventListener___redu);
  Py_VISIT(traverse_module_state->__pyx_n_s_BaseStrategyEventListener___sets);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Best_Ask_Price);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Best_Bid_Price);
  Py_VISIT(traverse_module_state->__pyx_n_s_BuyOrderCompleted);
  Py_VISIT(traverse_module_state->__pyx_n_s_BuyOrderCompletedListener);
  Py_VISIT(traverse_module_state->__pyx_n_s_BuyOrderCompletedListener___redu);
  Py_VISIT(traverse_module_state->__pyx_n_s_BuyOrderCompletedListener___sets);
  Py_VISIT(traverse_module_state->__pyx_n_s_BuyOrderCreated);
  Py_VISIT(traverse_module_state->__pyx_n_s_BuyOrderCreatedListener);
  Py_VISIT(traverse_module_state->__pyx_n_s_BuyOrderCreatedListener___reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_BuyOrderCreatedListener___setsta);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONNECTED);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Cancelling_the_limit_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_DataFrame);
  Py_VISIT(traverse_module_state->__pyx_n_s_Decimal);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Delegates_are_not_allowed_to_exe);
  Py_VISIT(traverse_module_state->__pyx_n_s_DerivativeBase);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_formatting_market_stats);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_formatting_wallet_balance);
  Py_VISIT(traverse_module_state->__pyx_n_u_Exchange);
  Py_VISIT(traverse_module_state->__pyx_n_s_FUNDING_PAYMENT_COMPLETED_EVENT);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Flat_fee_in_other_token_than_quo);
  Py_VISIT(traverse_module_state->__pyx_n_s_FundingPaymentCompleted);
  Py_VISIT(traverse_module_state->__pyx_n_s_FundingPaymentCompletedListener);
  Py_VISIT(traverse_module_state->__pyx_n_s_FundingPaymentCompletedListener_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_FundingPaymentCompletedListener_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_HummingbotApplication);
  Py_VISIT(traverse_module_state->__pyx_n_s_INFO);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Incompatible_checksums_s_vs_0xdc);
  Py_VISIT(traverse_module_state->__pyx_n_s_List);
  Py_VISIT(traverse_module_state->__pyx_kp_s_List_ConnectorBase);
  Py_VISIT(traverse_module_state->__pyx_kp_s_List_MarketTradingPairTuple);
  Py_VISIT(traverse_module_state->__pyx_kp_s_List_str);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET);
  Py_VISIT(traverse_module_state->__pyx_n_u_Market);
  Py_VISIT(traverse_module_state->__pyx_n_s_MarketEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_MarketTradingPairTuple);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Market_object_for_buy_order_is_n);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Market_object_for_sell_order_is);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Markets_are_offline_for_the);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Mid_Price);
  Py_VISIT(traverse_module_state->__pyx_n_s_NaN);
  Py_VISIT(traverse_module_state->__pyx_n_u_NaN);
  Py_VISIT(traverse_module_state->__pyx_n_s_NetworkStatus);
  Py_VISIT(traverse_module_state->__pyx_kp_u_None);
  Py_VISIT(traverse_module_state->__pyx_n_s_NotImplementedError);
  Py_VISIT(traverse_module_state->__pyx_n_s_OPEN);
  Py_VISIT(traverse_module_state->__pyx_n_s_ORDER_CANCELLED_EVENT_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_ORDER_EXPIRED_EVENT_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_ORDER_FAILURE_EVENT_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_ORDER_FILLED_EVENT_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderCancelled);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderCancelledListener);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderCancelledListener___reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderCancelledListener___setstat);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderExpired);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderExpiredListener);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderExpiredListener___reduce_cy);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderExpiredListener___setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderFailedListener);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderFailedListener___reduce_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderFailedListener___setstate_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderFailure);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderFilled);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderFilledEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderFilledListener);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderFilledListener___reduce_cyt);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderFilledListener___setstate_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderTracker);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderType);
  Py_VISIT(traverse_module_state->__pyx_n_s_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_PositionAction);
  Py_VISIT(traverse_module_state->__pyx_n_s_RANGE_POSITION_CREATED_EVENT_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_RANGE_POSITION_REMOVED_EVENT_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_RangePositionCreated);
  Py_VISIT(traverse_module_state->__pyx_n_s_RangePositionCreatedListener);
  Py_VISIT(traverse_module_state->__pyx_n_s_RangePositionCreatedListener___r);
  Py_VISIT(traverse_module_state->__pyx_n_s_RangePositionCreatedListener___s);
  Py_VISIT(traverse_module_state->__pyx_n_s_RangePositionRemoved);
  Py_VISIT(traverse_module_state->__pyx_n_s_RangePositionRemovedListener);
  Py_VISIT(traverse_module_state->__pyx_n_s_RangePositionRemovedListener___r);
  Py_VISIT(traverse_module_state->__pyx_n_s_RangePositionRemovedListener___s);
  Py_VISIT(traverse_module_state->__pyx_n_s_RuntimeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_SELL_ORDER_COMPLETED_EVENT_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_SELL_ORDER_CREATED_EVENT_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_SellOrderCompleted);
  Py_VISIT(traverse_module_state->__pyx_n_s_SellOrderCompletedListener);
  Py_VISIT(traverse_module_state->__pyx_n_s_SellOrderCompletedListener___red);
  Py_VISIT(traverse_module_state->__pyx_n_s_SellOrderCompletedListener___set);
  Py_VISIT(traverse_module_state->__pyx_n_s_SellOrderCreated);
  Py_VISIT(traverse_module_state->__pyx_n_s_SellOrderCreatedListener);
  Py_VISIT(traverse_module_state->__pyx_n_s_SellOrderCreatedListener___reduc);
  Py_VISIT(traverse_module_state->__pyx_n_s_SellOrderCreatedListener___setst);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase___get___locals_even);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase___get___locals_lamb);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase___setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_add_markets);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_balance_warning);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_buy_with_specific_m);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_cancel_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_cum_flat_fees);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_format_status);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_init_params);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_log_with_clock);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_logger);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_market_status_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_network_warning);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_notify_hb_app);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_notify_hb_app_with);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_remove_markets);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_sell_with_specific);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_start_tracking_limi);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_start_tracking_mark);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_stop_tracking_limit);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_stop_tracking_marke);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_track_restored_orde);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase_wallet_balance_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_Timestamp);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Total_Balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_Trade);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_u_UTC);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_n_s__154);
  Py_VISIT(traverse_module_state->__pyx_kp_u__30);
  Py_VISIT(traverse_module_state->__pyx_kp_u__31);
  Py_VISIT(traverse_module_state->__pyx_kp_u__32);
  Py_VISIT(traverse_module_state->__pyx_n_s__33);
  Py_VISIT(traverse_module_state->__pyx_kp_u__6);
  Py_VISIT(traverse_module_state->__pyx_kp_u__7);
  Py_VISIT(traverse_module_state->__pyx_kp_u__8);
  Py_VISIT(traverse_module_state->__pyx_n_s_active_markets);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_markets);
  Py_VISIT(traverse_module_state->__pyx_n_s_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_args);
  Py_VISIT(traverse_module_state->__pyx_n_s_ask_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_assets_columns);
  Py_VISIT(traverse_module_state->__pyx_n_s_assets_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_available_base_balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_available_quote_balance);
  Py_VISIT(traverse_module_state->__pyx_kp_u_balance_is_too_low_Cannot_place);
  Py_VISIT(traverse_module_state->__pyx_n_s_balance_warning);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_asset);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_asset_conversion_rate);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_bid_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_bool);
  Py_VISIT(traverse_module_state->__pyx_n_s_buy_with_specific_market);
  Py_VISIT(traverse_module_state->__pyx_n_s_cancel_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_client_order_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_kp_u_clock);
  Py_VISIT(traverse_module_state->__pyx_n_s_clock_timestamp);
  Py_VISIT(traverse_module_state->__pyx_n_s_cls);
  Py_VISIT(traverse_module_state->__pyx_n_s_columns);
  Py_VISIT(traverse_module_state->__pyx_n_s_cum_flat_fees);
  Py_VISIT(traverse_module_state->__pyx_n_s_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_decimal);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_display_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_e);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_error);
  Py_VISIT(traverse_module_state->__pyx_n_s_event_logs);
  Py_VISIT(traverse_module_state->__pyx_n_s_event_to_trade);
  Py_VISIT(traverse_module_state->__pyx_n_s_exc_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_expiration_seconds);
  Py_VISIT(traverse_module_state->__pyx_n_u_expiration_ts);
  Py_VISIT(traverse_module_state->__pyx_n_s_filter);
  Py_VISIT(traverse_module_state->__pyx_n_s_flat_fees);
  Py_VISIT(traverse_module_state->__pyx_n_s_format_status);
  Py_VISIT(traverse_module_state->__pyx_n_s_fromtimestamp);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_available_balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_client_hummingbot_app);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_connector_derivative);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_data_type_trade);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_event_events);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_network_iterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_strategy_market_tradi);
  Py_VISIT(traverse_module_state->__pyx_kp_s_hummingbot_strategy_strategy_bas);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_strategy_strategy_bas_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_init);
  Py_VISIT(traverse_module_state->__pyx_n_s_init_params);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_int);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_buy);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_limit_type);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_kwargs);
  Py_VISIT(traverse_module_state->__pyx_n_s_limit_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_log);
  Py_VISIT(traverse_module_state->__pyx_n_s_log_level);
  Py_VISIT(traverse_module_state->__pyx_n_s_log_with_clock);
  Py_VISIT(traverse_module_state->__pyx_n_s_logger);
  Py_VISIT(traverse_module_state->__pyx_n_s_logging);
  Py_VISIT(traverse_module_state->__pyx_kp_s_logging_Logger);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_main_application);
  Py_VISIT(traverse_module_state->__pyx_n_s_map);
  Py_VISIT(traverse_module_state->__pyx_n_s_market);
  Py_VISIT(traverse_module_state->__pyx_kp_u_market_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_market_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_market_pair);
  Py_VISIT(traverse_module_state->__pyx_n_s_market_status_data_frame);
  Py_VISIT(traverse_module_state->__pyx_n_s_market_trading_pair_tuple);
  Py_VISIT(traverse_module_state->__pyx_n_s_market_trading_pair_tuples);
  Py_VISIT(traverse_module_state->__pyx_n_s_markets);
  Py_VISIT(traverse_module_state->__pyx_n_s_markets_columns);
  Py_VISIT(traverse_module_state->__pyx_n_s_markets_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_mid_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_msg);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_name_2);
  Py_VISIT(traverse_module_state->__pyx_n_u_nan);
  Py_VISIT(traverse_module_state->__pyx_n_s_network_status);
  Py_VISIT(traverse_module_state->__pyx_n_s_network_warning);
  Py_VISIT(traverse_module_state->__pyx_n_s_new);
  Py_VISIT(traverse_module_state->__pyx_n_s_notify);
  Py_VISIT(traverse_module_state->__pyx_n_s_notify_hb_app);
  Py_VISIT(traverse_module_state->__pyx_n_s_notify_hb_app_with_timestamp);
  Py_VISIT(traverse_module_state->__pyx_n_s_ofe);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_filled_event);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_tracker);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_owner);
  Py_VISIT(traverse_module_state->__pyx_kp_u_pair_Continued_trading_with_the);
  Py_VISIT(traverse_module_state->__pyx_n_s_pandas);
  Py_VISIT(traverse_module_state->__pyx_n_s_pd);
  Py_VISIT(traverse_module_state->__pyx_kp_s_pd_DataFrame);
  Py_VISIT(traverse_module_state->__pyx_n_s_pickle);
  Py_VISIT(traverse_module_state->__pyx_n_s_position_action);
  Py_VISIT(traverse_module_state->__pyx_n_u_position_action);
  Py_VISIT(traverse_module_state->__pyx_n_s_price);
  Py_VISIT(traverse_module_state->__pyx_kp_u_price_and_amount_must_be_Decimal);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_PickleError);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_checksum);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_BaseStrategyEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_BuyOrderCompleted);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_BuyOrderCreatedLi);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_FundingPaymentCom);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_OrderCancelledLis);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_OrderExpiredListe);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_OrderFailedListen);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_OrderFilledListen);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_RangePositionCrea);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_RangePositionRemo);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_SellOrderComplete);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_unpickle_SellOrderCreatedL);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_s_quantity);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_asset);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_asset_conversion_rate);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_remove_markets);
  Py_VISIT(traverse_module_state->__pyx_n_s_return);
  Py_VISIT(traverse_module_state->__pyx_n_u_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_s_decimal_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_s_decimal_nan);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self__events_cannot_be_converted);
  Py_VISIT(traverse_module_state->__pyx_n_s_sell_with_specific_market);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_sorted);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_start_tracking_limit_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_start_tracking_market_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_stop_tracking_limit_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_stop_tracking_market_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_str);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_super);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_timestamp);
  Py_VISIT(traverse_module_state->__pyx_n_s_track_restored_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_trade_fee);
  Py_VISIT(traverse_module_state->__pyx_n_s_trade_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_trading_pair);
  Py_VISIT(traverse_module_state->__pyx_n_s_trading_pairs);
  Py_VISIT(traverse_module_state->__pyx_n_s_typing);
  Py_VISIT(traverse_module_state->__pyx_n_s_tz);
  Py_VISIT(traverse_module_state->__pyx_n_s_unit);
  Py_VISIT(traverse_module_state->__pyx_n_s_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_wallet_balance_data_frame);
  Py_VISIT(traverse_module_state->__pyx_n_s_warning_lines);
  Py_VISIT(traverse_module_state->__pyx_n_s_x);
  Py_VISIT(traverse_module_state->__pyx_int_2);
  Py_VISIT(traverse_module_state->__pyx_int_231533357);
  Py_VISIT(traverse_module_state->__pyx_k__10);
  Py_VISIT(traverse_module_state->__pyx_k__11);
  Py_VISIT(traverse_module_state->__pyx_k__12);
  Py_VISIT(traverse_module_state->__pyx_k__13);
  Py_VISIT(traverse_module_state->__pyx_k__14);
  Py_VISIT(traverse_module_state->__pyx_k__15);
  Py_VISIT(traverse_module_state->__pyx_k__16);
  Py_VISIT(traverse_module_state->__pyx_k__17);
  Py_VISIT(traverse_module_state->__pyx_k__21);
  Py_VISIT(traverse_module_state->__pyx_k__22);
  Py_VISIT(traverse_module_state->__pyx_k__23);
  Py_VISIT(traverse_module_state->__pyx_k__24);
  Py_VISIT(traverse_module_state->__pyx_k__25);
  Py_VISIT(traverse_module_state->__pyx_k__26);
  Py_VISIT(traverse_module_state->__pyx_k__27);
  Py_VISIT(traverse_module_state->__pyx_k__28);
  Py_VISIT(traverse_module_state->__pyx_tuple__2);
  Py_VISIT(traverse_module_state->__pyx_tuple__4);
  Py_VISIT(traverse_module_state->__pyx_tuple__5);
  Py_VISIT(traverse_module_state->__pyx_tuple__9);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__19);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__29);
  Py_VISIT(traverse_module_state->__pyx_tuple__34);
  Py_VISIT(traverse_module_state->__pyx_tuple__35);
  Py_VISIT(traverse_module_state->__pyx_tuple__36);
  Py_VISIT(traverse_module_state->__pyx_tuple__38);
  Py_VISIT(traverse_module_state->__pyx_tuple__40);
  Py_VISIT(traverse_module_state->__pyx_tuple__42);
  Py_VISIT(traverse_module_state->__pyx_tuple__44);
  Py_VISIT(traverse_module_state->__pyx_tuple__46);
  Py_VISIT(traverse_module_state->__pyx_tuple__48);
  Py_VISIT(traverse_module_state->__pyx_tuple__50);
  Py_VISIT(traverse_module_state->__pyx_tuple__52);
  Py_VISIT(traverse_module_state->__pyx_tuple__54);
  Py_VISIT(traverse_module_state->__pyx_tuple__56);
  Py_VISIT(traverse_module_state->__pyx_tuple__58);
  Py_VISIT(traverse_module_state->__pyx_tuple__60);
  Py_VISIT(traverse_module_state->__pyx_tuple__62);
  Py_VISIT(traverse_module_state->__pyx_tuple__64);
  Py_VISIT(traverse_module_state->__pyx_tuple__66);
  Py_VISIT(traverse_module_state->__pyx_tuple__68);
  Py_VISIT(traverse_module_state->__pyx_tuple__70);
  Py_VISIT(traverse_module_state->__pyx_tuple__72);
  Py_VISIT(traverse_module_state->__pyx_tuple__74);
  Py_VISIT(traverse_module_state->__pyx_tuple__76);
  Py_VISIT(traverse_module_state->__pyx_tuple__78);
  Py_VISIT(traverse_module_state->__pyx_tuple__80);
  Py_VISIT(traverse_module_state->__pyx_tuple__82);
  Py_VISIT(traverse_module_state->__pyx_tuple__84);
  Py_VISIT(traverse_module_state->__pyx_tuple__86);
  Py_VISIT(traverse_module_state->__pyx_tuple__88);
  Py_VISIT(traverse_module_state->__pyx_tuple__90);
  Py_VISIT(traverse_module_state->__pyx_tuple__92);
  Py_VISIT(traverse_module_state->__pyx_tuple__94);
  Py_VISIT(traverse_module_state->__pyx_tuple__96);
  Py_VISIT(traverse_module_state->__pyx_tuple__98);
  Py_VISIT(traverse_module_state->__pyx_codeobj__3);
  Py_VISIT(traverse_module_state->__pyx_tuple__100);
  Py_VISIT(traverse_module_state->__pyx_tuple__102);
  Py_VISIT(traverse_module_state->__pyx_tuple__104);
  Py_VISIT(traverse_module_state->__pyx_tuple__106);
  Py_VISIT(traverse_module_state->__pyx_tuple__108);
  Py_VISIT(traverse_module_state->__pyx_tuple__110);
  Py_VISIT(traverse_module_state->__pyx_tuple__112);
  Py_VISIT(traverse_module_state->__pyx_tuple__114);
  Py_VISIT(traverse_module_state->__pyx_tuple__116);
  Py_VISIT(traverse_module_state->__pyx_tuple__118);
  Py_VISIT(traverse_module_state->__pyx_tuple__120);
  Py_VISIT(traverse_module_state->__pyx_tuple__122);
  Py_VISIT(traverse_module_state->__pyx_tuple__124);
  Py_VISIT(traverse_module_state->__pyx_tuple__126);
  Py_VISIT(traverse_module_state->__pyx_tuple__128);
  Py_VISIT(traverse_module_state->__pyx_tuple__130);
  Py_VISIT(traverse_module_state->__pyx_tuple__132);
  Py_VISIT(traverse_module_state->__pyx_tuple__134);
  Py_VISIT(traverse_module_state->__pyx_tuple__136);
  Py_VISIT(traverse_module_state->__pyx_tuple__138);
  Py_VISIT(traverse_module_state->__pyx_tuple__140);
  Py_VISIT(traverse_module_state->__pyx_tuple__142);
  Py_VISIT(traverse_module_state->__pyx_tuple__144);
  Py_VISIT(traverse_module_state->__pyx_tuple__146);
  Py_VISIT(traverse_module_state->__pyx_tuple__148);
  Py_VISIT(traverse_module_state->__pyx_tuple__150);
  Py_VISIT(traverse_module_state->__pyx_tuple__152);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__43);
  Py_VISIT(traverse_module_state->__pyx_codeobj__45);
  Py_VISIT(traverse_module_state->__pyx_codeobj__47);
  Py_VISIT(traverse_module_state->__pyx_codeobj__49);
  Py_VISIT(traverse_module_state->__pyx_codeobj__51);
  Py_VISIT(traverse_module_state->__pyx_codeobj__53);
  Py_VISIT(traverse_module_state->__pyx_codeobj__55);
  Py_VISIT(traverse_module_state->__pyx_codeobj__57);
  Py_VISIT(traverse_module_state->__pyx_codeobj__59);
  Py_VISIT(traverse_module_state->__pyx_codeobj__61);
  Py_VISIT(traverse_module_state->__pyx_codeobj__63);
  Py_VISIT(traverse_module_state->__pyx_codeobj__65);
  Py_VISIT(traverse_module_state->__pyx_codeobj__67);
  Py_VISIT(traverse_module_state->__pyx_codeobj__69);
  Py_VISIT(traverse_module_state->__pyx_codeobj__71);
  Py_VISIT(traverse_module_state->__pyx_codeobj__73);
  Py_VISIT(traverse_module_state->__pyx_codeobj__75);
  Py_VISIT(traverse_module_state->__pyx_codeobj__77);
  Py_VISIT(traverse_module_state->__pyx_codeobj__79);
  Py_VISIT(traverse_module_state->__pyx_codeobj__81);
  Py_VISIT(traverse_module_state->__pyx_codeobj__83);
  Py_VISIT(traverse_module_state->__pyx_codeobj__85);
  Py_VISIT(traverse_module_state->__pyx_codeobj__87);
  Py_VISIT(traverse_module_state->__pyx_codeobj__89);
  Py_VISIT(traverse_module_state->__pyx_codeobj__91);
  Py_VISIT(traverse_module_state->__pyx_codeobj__93);
  Py_VISIT(traverse_module_state->__pyx_codeobj__95);
  Py_VISIT(traverse_module_state->__pyx_codeobj__97);
  Py_VISIT(traverse_module_state->__pyx_codeobj__99);
  Py_VISIT(traverse_module_state->__pyx_codeobj__101);
  Py_VISIT(traverse_module_state->__pyx_codeobj__103);
  Py_VISIT(traverse_module_state->__pyx_codeobj__105);
  Py_VISIT(traverse_module_state->__pyx_codeobj__107);
  Py_VISIT(traverse_module_state->__pyx_codeobj__109);
  Py_VISIT(traverse_module_state->__pyx_codeobj__111);
  Py_VISIT(traverse_module_state->__pyx_codeobj__113);
  Py_VISIT(traverse_module_state->__pyx_codeobj__115);
  Py_VISIT(traverse_module_state->__pyx_codeobj__117);
  Py_VISIT(traverse_module_state->__pyx_codeobj__119);
  Py_VISIT(traverse_module_state->__pyx_codeobj__121);
  Py_VISIT(traverse_module_state->__pyx_codeobj__123);
  Py_VISIT(traverse_module_state->__pyx_codeobj__125);
  Py_VISIT(traverse_module_state->__pyx_codeobj__127);
  Py_VISIT(traverse_module_state->__pyx_codeobj__129);
  Py_VISIT(traverse_module_state->__pyx_codeobj__131);
  Py_VISIT(traverse_module_state->__pyx_codeobj__133);
  Py_VISIT(traverse_module_state->__pyx_codeobj__135);
  Py_VISIT(traverse_module_state->__pyx_codeobj__137);
  Py_VISIT(traverse_module_state->__pyx_codeobj__139);
  Py_VISIT(traverse_module_state->__pyx_codeobj__141);
  Py_VISIT(traverse_module_state->__pyx_codeobj__143);
  Py_VISIT(traverse_module_state->__pyx_codeobj__145);
  Py_VISIT(traverse_module_state->__pyx_codeobj__147);
  Py_VISIT(traverse_module_state->__pyx_codeobj__149);
  Py_VISIT(traverse_module_state->__pyx_codeobj__151);
  Py_VISIT(traverse_module_state->__pyx_codeobj__153);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#if CYTHON_COMPILING_IN_LIMITED_API
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#define __pyx_ptype_10hummingbot_4core_5clock_Clock __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5clock_Clock
#define __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener
#define __pyx_ptype_10hummingbot_4core_6pubsub_PubSub __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_6pubsub_PubSub
#define __pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator
#define __pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder
#define __pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker
#define __pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter
#define __pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger
#define __pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator
#define __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase
#define __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase
#define __pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase
#define __pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener
#define __pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener
#define __pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener
#define __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener
#define __pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener
#define __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener
#define __pyx_ptype_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener
#define __pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener
#define __pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFilledListener __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFilledListener
#define __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener
#define __pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFailedListener __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFailedListener
#define __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener
#define __pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderCancelledListener __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderCancelledListener
#define __pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener
#define __pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderExpiredListener __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderExpiredListener
#define __pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener
#define __pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener
#define __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener
#define __pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener
#define __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener
#define __pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener
#define __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener
#define __pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener
#define __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener
#define __pyx_ptype_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__
#define __pyx_type_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__
#define __pyx_kp_u_ __pyx_mstate_global->__pyx_kp_u_
#define __pyx_kp_u_0 __pyx_mstate_global->__pyx_kp_u_0
#define __pyx_kp_u_0_0001 __pyx_mstate_global->__pyx_kp_u_0_0001
#define __pyx_n_u_Asset __pyx_mstate_global->__pyx_n_u_Asset
#define __pyx_kp_u_Available_Balance __pyx_mstate_global->__pyx_kp_u_Available_Balance
#define __pyx_n_s_BUY_ORDER_COMPLETED_EVENT_TAG __pyx_mstate_global->__pyx_n_s_BUY_ORDER_COMPLETED_EVENT_TAG
#define __pyx_n_s_BUY_ORDER_CREATED_EVENT_TAG __pyx_mstate_global->__pyx_n_s_BUY_ORDER_CREATED_EVENT_TAG
#define __pyx_n_s_BaseStrategyEventListener __pyx_mstate_global->__pyx_n_s_BaseStrategyEventListener
#define __pyx_n_s_BaseStrategyEventListener___redu __pyx_mstate_global->__pyx_n_s_BaseStrategyEventListener___redu
#define __pyx_n_s_BaseStrategyEventListener___sets __pyx_mstate_global->__pyx_n_s_BaseStrategyEventListener___sets
#define __pyx_kp_u_Best_Ask_Price __pyx_mstate_global->__pyx_kp_u_Best_Ask_Price
#define __pyx_kp_u_Best_Bid_Price __pyx_mstate_global->__pyx_kp_u_Best_Bid_Price
#define __pyx_n_s_BuyOrderCompleted __pyx_mstate_global->__pyx_n_s_BuyOrderCompleted
#define __pyx_n_s_BuyOrderCompletedListener __pyx_mstate_global->__pyx_n_s_BuyOrderCompletedListener
#define __pyx_n_s_BuyOrderCompletedListener___redu __pyx_mstate_global->__pyx_n_s_BuyOrderCompletedListener___redu
#define __pyx_n_s_BuyOrderCompletedListener___sets __pyx_mstate_global->__pyx_n_s_BuyOrderCompletedListener___sets
#define __pyx_n_s_BuyOrderCreated __pyx_mstate_global->__pyx_n_s_BuyOrderCreated
#define __pyx_n_s_BuyOrderCreatedListener __pyx_mstate_global->__pyx_n_s_BuyOrderCreatedListener
#define __pyx_n_s_BuyOrderCreatedListener___reduce __pyx_mstate_global->__pyx_n_s_BuyOrderCreatedListener___reduce
#define __pyx_n_s_BuyOrderCreatedListener___setsta __pyx_mstate_global->__pyx_n_s_BuyOrderCreatedListener___setsta
#define __pyx_n_s_CONNECTED __pyx_mstate_global->__pyx_n_s_CONNECTED
#define __pyx_kp_u_Cancelling_the_limit_order __pyx_mstate_global->__pyx_kp_u_Cancelling_the_limit_order
#define __pyx_n_s_DataFrame __pyx_mstate_global->__pyx_n_s_DataFrame
#define __pyx_n_s_Decimal __pyx_mstate_global->__pyx_n_s_Decimal
#define __pyx_kp_u_Delegates_are_not_allowed_to_exe __pyx_mstate_global->__pyx_kp_u_Delegates_are_not_allowed_to_exe
#define __pyx_n_s_DerivativeBase __pyx_mstate_global->__pyx_n_s_DerivativeBase
#define __pyx_kp_u_Error_formatting_market_stats __pyx_mstate_global->__pyx_kp_u_Error_formatting_market_stats
#define __pyx_kp_u_Error_formatting_wallet_balance __pyx_mstate_global->__pyx_kp_u_Error_formatting_wallet_balance
#define __pyx_n_u_Exchange __pyx_mstate_global->__pyx_n_u_Exchange
#define __pyx_n_s_FUNDING_PAYMENT_COMPLETED_EVENT __pyx_mstate_global->__pyx_n_s_FUNDING_PAYMENT_COMPLETED_EVENT
#define __pyx_kp_u_Flat_fee_in_other_token_than_quo __pyx_mstate_global->__pyx_kp_u_Flat_fee_in_other_token_than_quo
#define __pyx_n_s_FundingPaymentCompleted __pyx_mstate_global->__pyx_n_s_FundingPaymentCompleted
#define __pyx_n_s_FundingPaymentCompletedListener __pyx_mstate_global->__pyx_n_s_FundingPaymentCompletedListener
#define __pyx_n_s_FundingPaymentCompletedListener_2 __pyx_mstate_global->__pyx_n_s_FundingPaymentCompletedListener_2
#define __pyx_n_s_FundingPaymentCompletedListener_3 __pyx_mstate_global->__pyx_n_s_FundingPaymentCompletedListener_3
#define __pyx_n_s_HummingbotApplication __pyx_mstate_global->__pyx_n_s_HummingbotApplication
#define __pyx_n_s_INFO __pyx_mstate_global->__pyx_n_s_INFO
#define __pyx_kp_s_Incompatible_checksums_s_vs_0xdc __pyx_mstate_global->__pyx_kp_s_Incompatible_checksums_s_vs_0xdc
#define __pyx_n_s_List __pyx_mstate_global->__pyx_n_s_List
#define __pyx_kp_s_List_ConnectorBase __pyx_mstate_global->__pyx_kp_s_List_ConnectorBase
#define __pyx_kp_s_List_MarketTradingPairTuple __pyx_mstate_global->__pyx_kp_s_List_MarketTradingPairTuple
#define __pyx_kp_s_List_str __pyx_mstate_global->__pyx_kp_s_List_str
#define __pyx_n_s_MARKET __pyx_mstate_global->__pyx_n_s_MARKET
#define __pyx_n_u_Market __pyx_mstate_global->__pyx_n_u_Market
#define __pyx_n_s_MarketEvent __pyx_mstate_global->__pyx_n_s_MarketEvent
#define __pyx_n_s_MarketTradingPairTuple __pyx_mstate_global->__pyx_n_s_MarketTradingPairTuple
#define __pyx_kp_u_Market_object_for_buy_order_is_n __pyx_mstate_global->__pyx_kp_u_Market_object_for_buy_order_is_n
#define __pyx_kp_u_Market_object_for_sell_order_is __pyx_mstate_global->__pyx_kp_u_Market_object_for_sell_order_is
#define __pyx_kp_u_Markets_are_offline_for_the __pyx_mstate_global->__pyx_kp_u_Markets_are_offline_for_the
#define __pyx_kp_u_Mid_Price __pyx_mstate_global->__pyx_kp_u_Mid_Price
#define __pyx_n_s_NaN __pyx_mstate_global->__pyx_n_s_NaN
#define __pyx_n_u_NaN __pyx_mstate_global->__pyx_n_u_NaN
#define __pyx_n_s_NetworkStatus __pyx_mstate_global->__pyx_n_s_NetworkStatus
#define __pyx_kp_u_None __pyx_mstate_global->__pyx_kp_u_None
#define __pyx_n_s_NotImplementedError __pyx_mstate_global->__pyx_n_s_NotImplementedError
#define __pyx_n_s_OPEN __pyx_mstate_global->__pyx_n_s_OPEN
#define __pyx_n_s_ORDER_CANCELLED_EVENT_TAG __pyx_mstate_global->__pyx_n_s_ORDER_CANCELLED_EVENT_TAG
#define __pyx_n_s_ORDER_EXPIRED_EVENT_TAG __pyx_mstate_global->__pyx_n_s_ORDER_EXPIRED_EVENT_TAG
#define __pyx_n_s_ORDER_FAILURE_EVENT_TAG __pyx_mstate_global->__pyx_n_s_ORDER_FAILURE_EVENT_TAG
#define __pyx_n_s_ORDER_FILLED_EVENT_TAG __pyx_mstate_global->__pyx_n_s_ORDER_FILLED_EVENT_TAG
#define __pyx_n_s_OrderCancelled __pyx_mstate_global->__pyx_n_s_OrderCancelled
#define __pyx_n_s_OrderCancelledListener __pyx_mstate_global->__pyx_n_s_OrderCancelledListener
#define __pyx_n_s_OrderCancelledListener___reduce __pyx_mstate_global->__pyx_n_s_OrderCancelledListener___reduce
#define __pyx_n_s_OrderCancelledListener___setstat __pyx_mstate_global->__pyx_n_s_OrderCancelledListener___setstat
#define __pyx_n_s_OrderExpired __pyx_mstate_global->__pyx_n_s_OrderExpired
#define __pyx_n_s_OrderExpiredListener __pyx_mstate_global->__pyx_n_s_OrderExpiredListener
#define __pyx_n_s_OrderExpiredListener___reduce_cy __pyx_mstate_global->__pyx_n_s_OrderExpiredListener___reduce_cy
#define __pyx_n_s_OrderExpiredListener___setstate __pyx_mstate_global->__pyx_n_s_OrderExpiredListener___setstate
#define __pyx_n_s_OrderFailedListener __pyx_mstate_global->__pyx_n_s_OrderFailedListener
#define __pyx_n_s_OrderFailedListener___reduce_cyt __pyx_mstate_global->__pyx_n_s_OrderFailedListener___reduce_cyt
#define __pyx_n_s_OrderFailedListener___setstate_c __pyx_mstate_global->__pyx_n_s_OrderFailedListener___setstate_c
#define __pyx_n_s_OrderFailure __pyx_mstate_global->__pyx_n_s_OrderFailure
#define __pyx_n_s_OrderFilled __pyx_mstate_global->__pyx_n_s_OrderFilled
#define __pyx_n_s_OrderFilledEvent __pyx_mstate_global->__pyx_n_s_OrderFilledEvent
#define __pyx_n_s_OrderFilledListener __pyx_mstate_global->__pyx_n_s_OrderFilledListener
#define __pyx_n_s_OrderFilledListener___reduce_cyt __pyx_mstate_global->__pyx_n_s_OrderFilledListener___reduce_cyt
#define __pyx_n_s_OrderFilledListener___setstate_c __pyx_mstate_global->__pyx_n_s_OrderFilledListener___setstate_c
#define __pyx_n_s_OrderTracker __pyx_mstate_global->__pyx_n_s_OrderTracker
#define __pyx_n_s_OrderType __pyx_mstate_global->__pyx_n_s_OrderType
#define __pyx_n_s_PickleError __pyx_mstate_global->__pyx_n_s_PickleError
#define __pyx_n_s_PositionAction __pyx_mstate_global->__pyx_n_s_PositionAction
#define __pyx_n_s_RANGE_POSITION_CREATED_EVENT_TAG __pyx_mstate_global->__pyx_n_s_RANGE_POSITION_CREATED_EVENT_TAG
#define __pyx_n_s_RANGE_POSITION_REMOVED_EVENT_TAG __pyx_mstate_global->__pyx_n_s_RANGE_POSITION_REMOVED_EVENT_TAG
#define __pyx_n_s_RangePositionCreated __pyx_mstate_global->__pyx_n_s_RangePositionCreated
#define __pyx_n_s_RangePositionCreatedListener __pyx_mstate_global->__pyx_n_s_RangePositionCreatedListener
#define __pyx_n_s_RangePositionCreatedListener___r __pyx_mstate_global->__pyx_n_s_RangePositionCreatedListener___r
#define __pyx_n_s_RangePositionCreatedListener___s __pyx_mstate_global->__pyx_n_s_RangePositionCreatedListener___s
#define __pyx_n_s_RangePositionRemoved __pyx_mstate_global->__pyx_n_s_RangePositionRemoved
#define __pyx_n_s_RangePositionRemovedListener __pyx_mstate_global->__pyx_n_s_RangePositionRemovedListener
#define __pyx_n_s_RangePositionRemovedListener___r __pyx_mstate_global->__pyx_n_s_RangePositionRemovedListener___r
#define __pyx_n_s_RangePositionRemovedListener___s __pyx_mstate_global->__pyx_n_s_RangePositionRemovedListener___s
#define __pyx_n_s_RuntimeError __pyx_mstate_global->__pyx_n_s_RuntimeError
#define __pyx_n_s_SELL_ORDER_COMPLETED_EVENT_TAG __pyx_mstate_global->__pyx_n_s_SELL_ORDER_COMPLETED_EVENT_TAG
#define __pyx_n_s_SELL_ORDER_CREATED_EVENT_TAG __pyx_mstate_global->__pyx_n_s_SELL_ORDER_CREATED_EVENT_TAG
#define __pyx_n_s_SellOrderCompleted __pyx_mstate_global->__pyx_n_s_SellOrderCompleted
#define __pyx_n_s_SellOrderCompletedListener __pyx_mstate_global->__pyx_n_s_SellOrderCompletedListener
#define __pyx_n_s_SellOrderCompletedListener___red __pyx_mstate_global->__pyx_n_s_SellOrderCompletedListener___red
#define __pyx_n_s_SellOrderCompletedListener___set __pyx_mstate_global->__pyx_n_s_SellOrderCompletedListener___set
#define __pyx_n_s_SellOrderCreated __pyx_mstate_global->__pyx_n_s_SellOrderCreated
#define __pyx_n_s_SellOrderCreatedListener __pyx_mstate_global->__pyx_n_s_SellOrderCreatedListener
#define __pyx_n_s_SellOrderCreatedListener___reduc __pyx_mstate_global->__pyx_n_s_SellOrderCreatedListener___reduc
#define __pyx_n_s_SellOrderCreatedListener___setst __pyx_mstate_global->__pyx_n_s_SellOrderCreatedListener___setst
#define __pyx_n_s_StrategyBase __pyx_mstate_global->__pyx_n_s_StrategyBase
#define __pyx_n_s_StrategyBase___get___locals_even __pyx_mstate_global->__pyx_n_s_StrategyBase___get___locals_even
#define __pyx_n_s_StrategyBase___get___locals_lamb __pyx_mstate_global->__pyx_n_s_StrategyBase___get___locals_lamb
#define __pyx_n_s_StrategyBase___reduce_cython __pyx_mstate_global->__pyx_n_s_StrategyBase___reduce_cython
#define __pyx_n_s_StrategyBase___setstate_cython __pyx_mstate_global->__pyx_n_s_StrategyBase___setstate_cython
#define __pyx_n_s_StrategyBase_add_markets __pyx_mstate_global->__pyx_n_s_StrategyBase_add_markets
#define __pyx_n_s_StrategyBase_balance_warning __pyx_mstate_global->__pyx_n_s_StrategyBase_balance_warning
#define __pyx_n_s_StrategyBase_buy_with_specific_m __pyx_mstate_global->__pyx_n_s_StrategyBase_buy_with_specific_m
#define __pyx_n_s_StrategyBase_cancel_order __pyx_mstate_global->__pyx_n_s_StrategyBase_cancel_order
#define __pyx_n_s_StrategyBase_cum_flat_fees __pyx_mstate_global->__pyx_n_s_StrategyBase_cum_flat_fees
#define __pyx_n_s_StrategyBase_format_status __pyx_mstate_global->__pyx_n_s_StrategyBase_format_status
#define __pyx_n_s_StrategyBase_init_params __pyx_mstate_global->__pyx_n_s_StrategyBase_init_params
#define __pyx_n_s_StrategyBase_log_with_clock __pyx_mstate_global->__pyx_n_s_StrategyBase_log_with_clock
#define __pyx_n_s_StrategyBase_logger __pyx_mstate_global->__pyx_n_s_StrategyBase_logger
#define __pyx_n_s_StrategyBase_market_status_data __pyx_mstate_global->__pyx_n_s_StrategyBase_market_status_data
#define __pyx_n_s_StrategyBase_network_warning __pyx_mstate_global->__pyx_n_s_StrategyBase_network_warning
#define __pyx_n_s_StrategyBase_notify_hb_app __pyx_mstate_global->__pyx_n_s_StrategyBase_notify_hb_app
#define __pyx_n_s_StrategyBase_notify_hb_app_with __pyx_mstate_global->__pyx_n_s_StrategyBase_notify_hb_app_with
#define __pyx_n_s_StrategyBase_remove_markets __pyx_mstate_global->__pyx_n_s_StrategyBase_remove_markets
#define __pyx_n_s_StrategyBase_sell_with_specific __pyx_mstate_global->__pyx_n_s_StrategyBase_sell_with_specific
#define __pyx_n_s_StrategyBase_start_tracking_limi __pyx_mstate_global->__pyx_n_s_StrategyBase_start_tracking_limi
#define __pyx_n_s_StrategyBase_start_tracking_mark __pyx_mstate_global->__pyx_n_s_StrategyBase_start_tracking_mark
#define __pyx_n_s_StrategyBase_stop_tracking_limit __pyx_mstate_global->__pyx_n_s_StrategyBase_stop_tracking_limit
#define __pyx_n_s_StrategyBase_stop_tracking_marke __pyx_mstate_global->__pyx_n_s_StrategyBase_stop_tracking_marke
#define __pyx_n_s_StrategyBase_track_restored_orde __pyx_mstate_global->__pyx_n_s_StrategyBase_track_restored_orde
#define __pyx_n_s_StrategyBase_wallet_balance_data __pyx_mstate_global->__pyx_n_s_StrategyBase_wallet_balance_data
#define __pyx_n_s_Timestamp __pyx_mstate_global->__pyx_n_s_Timestamp
#define __pyx_kp_u_Total_Balance __pyx_mstate_global->__pyx_kp_u_Total_Balance
#define __pyx_n_s_Trade __pyx_mstate_global->__pyx_n_s_Trade
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_u_UTC __pyx_mstate_global->__pyx_n_u_UTC
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_n_s__154 __pyx_mstate_global->__pyx_n_s__154
#define __pyx_kp_u__30 __pyx_mstate_global->__pyx_kp_u__30
#define __pyx_kp_u__31 __pyx_mstate_global->__pyx_kp_u__31
#define __pyx_kp_u__32 __pyx_mstate_global->__pyx_kp_u__32
#define __pyx_n_s__33 __pyx_mstate_global->__pyx_n_s__33
#define __pyx_kp_u__6 __pyx_mstate_global->__pyx_kp_u__6
#define __pyx_kp_u__7 __pyx_mstate_global->__pyx_kp_u__7
#define __pyx_kp_u__8 __pyx_mstate_global->__pyx_kp_u__8
#define __pyx_n_s_active_markets __pyx_mstate_global->__pyx_n_s_active_markets
#define __pyx_n_s_add_markets __pyx_mstate_global->__pyx_n_s_add_markets
#define __pyx_n_s_all __pyx_mstate_global->__pyx_n_s_all
#define __pyx_n_s_amount __pyx_mstate_global->__pyx_n_s_amount
#define __pyx_n_s_args __pyx_mstate_global->__pyx_n_s_args
#define __pyx_n_s_ask_price __pyx_mstate_global->__pyx_n_s_ask_price
#define __pyx_n_s_assets_columns __pyx_mstate_global->__pyx_n_s_assets_columns
#define __pyx_n_s_assets_data __pyx_mstate_global->__pyx_n_s_assets_data
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_available_base_balance __pyx_mstate_global->__pyx_n_s_available_base_balance
#define __pyx_n_s_available_quote_balance __pyx_mstate_global->__pyx_n_s_available_quote_balance
#define __pyx_kp_u_balance_is_too_low_Cannot_place __pyx_mstate_global->__pyx_kp_u_balance_is_too_low_Cannot_place
#define __pyx_n_s_balance_warning __pyx_mstate_global->__pyx_n_s_balance_warning
#define __pyx_n_s_base_asset __pyx_mstate_global->__pyx_n_s_base_asset
#define __pyx_n_s_base_asset_conversion_rate __pyx_mstate_global->__pyx_n_s_base_asset_conversion_rate
#define __pyx_n_s_base_balance __pyx_mstate_global->__pyx_n_s_base_balance
#define __pyx_n_s_bid_price __pyx_mstate_global->__pyx_n_s_bid_price
#define __pyx_n_s_bool __pyx_mstate_global->__pyx_n_s_bool
#define __pyx_n_s_buy_with_specific_market __pyx_mstate_global->__pyx_n_s_buy_with_specific_market
#define __pyx_n_s_cancel_order __pyx_mstate_global->__pyx_n_s_cancel_order
#define __pyx_n_s_client_order_id __pyx_mstate_global->__pyx_n_s_client_order_id
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_kp_u_clock __pyx_mstate_global->__pyx_kp_u_clock
#define __pyx_n_s_clock_timestamp __pyx_mstate_global->__pyx_n_s_clock_timestamp
#define __pyx_n_s_cls __pyx_mstate_global->__pyx_n_s_cls
#define __pyx_n_s_columns __pyx_mstate_global->__pyx_n_s_columns
#define __pyx_n_s_cum_flat_fees __pyx_mstate_global->__pyx_n_s_cum_flat_fees
#define __pyx_n_s_data __pyx_mstate_global->__pyx_n_s_data
#define __pyx_n_s_decimal __pyx_mstate_global->__pyx_n_s_decimal
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_n_s_dict_2 __pyx_mstate_global->__pyx_n_s_dict_2
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_display_name __pyx_mstate_global->__pyx_n_s_display_name
#define __pyx_n_s_e __pyx_mstate_global->__pyx_n_s_e
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_error __pyx_mstate_global->__pyx_n_s_error
#define __pyx_n_s_event_logs __pyx_mstate_global->__pyx_n_s_event_logs
#define __pyx_n_s_event_to_trade __pyx_mstate_global->__pyx_n_s_event_to_trade
#define __pyx_n_s_exc_info __pyx_mstate_global->__pyx_n_s_exc_info
#define __pyx_n_s_expiration_seconds __pyx_mstate_global->__pyx_n_s_expiration_seconds
#define __pyx_n_u_expiration_ts __pyx_mstate_global->__pyx_n_u_expiration_ts
#define __pyx_n_s_filter __pyx_mstate_global->__pyx_n_s_filter
#define __pyx_n_s_flat_fees __pyx_mstate_global->__pyx_n_s_flat_fees
#define __pyx_n_s_format_status __pyx_mstate_global->__pyx_n_s_format_status
#define __pyx_n_s_fromtimestamp __pyx_mstate_global->__pyx_n_s_fromtimestamp
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_get_available_balance __pyx_mstate_global->__pyx_n_s_get_available_balance
#define __pyx_n_s_get_balance __pyx_mstate_global->__pyx_n_s_get_balance
#define __pyx_n_s_get_price __pyx_mstate_global->__pyx_n_s_get_price
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_hummingbot_client_hummingbot_app __pyx_mstate_global->__pyx_n_s_hummingbot_client_hummingbot_app
#define __pyx_n_s_hummingbot_connector_derivative __pyx_mstate_global->__pyx_n_s_hummingbot_connector_derivative
#define __pyx_n_s_hummingbot_core_data_type_trade __pyx_mstate_global->__pyx_n_s_hummingbot_core_data_type_trade
#define __pyx_n_s_hummingbot_core_event_events __pyx_mstate_global->__pyx_n_s_hummingbot_core_event_events
#define __pyx_n_s_hummingbot_core_network_iterator __pyx_mstate_global->__pyx_n_s_hummingbot_core_network_iterator
#define __pyx_n_s_hummingbot_strategy_market_tradi __pyx_mstate_global->__pyx_n_s_hummingbot_strategy_market_tradi
#define __pyx_kp_s_hummingbot_strategy_strategy_bas __pyx_mstate_global->__pyx_kp_s_hummingbot_strategy_strategy_bas
#define __pyx_n_s_hummingbot_strategy_strategy_bas_2 __pyx_mstate_global->__pyx_n_s_hummingbot_strategy_strategy_bas_2
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_init __pyx_mstate_global->__pyx_n_s_init
#define __pyx_n_s_init_params __pyx_mstate_global->__pyx_n_s_init_params
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_int __pyx_mstate_global->__pyx_n_s_int
#define __pyx_n_s_is_buy __pyx_mstate_global->__pyx_n_s_is_buy
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_is_limit_type __pyx_mstate_global->__pyx_n_s_is_limit_type
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_key __pyx_mstate_global->__pyx_n_s_key
#define __pyx_n_s_kwargs __pyx_mstate_global->__pyx_n_s_kwargs
#define __pyx_n_s_limit_orders __pyx_mstate_global->__pyx_n_s_limit_orders
#define __pyx_n_s_log __pyx_mstate_global->__pyx_n_s_log
#define __pyx_n_s_log_level __pyx_mstate_global->__pyx_n_s_log_level
#define __pyx_n_s_log_with_clock __pyx_mstate_global->__pyx_n_s_log_with_clock
#define __pyx_n_s_logger __pyx_mstate_global->__pyx_n_s_logger
#define __pyx_n_s_logging __pyx_mstate_global->__pyx_n_s_logging
#define __pyx_kp_s_logging_Logger __pyx_mstate_global->__pyx_kp_s_logging_Logger
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_main_application __pyx_mstate_global->__pyx_n_s_main_application
#define __pyx_n_s_map __pyx_mstate_global->__pyx_n_s_map
#define __pyx_n_s_market __pyx_mstate_global->__pyx_n_s_market
#define __pyx_kp_u_market_2 __pyx_mstate_global->__pyx_kp_u_market_2
#define __pyx_n_s_market_name __pyx_mstate_global->__pyx_n_s_market_name
#define __pyx_n_s_market_pair __pyx_mstate_global->__pyx_n_s_market_pair
#define __pyx_n_s_market_status_data_frame __pyx_mstate_global->__pyx_n_s_market_status_data_frame
#define __pyx_n_s_market_trading_pair_tuple __pyx_mstate_global->__pyx_n_s_market_trading_pair_tuple
#define __pyx_n_s_market_trading_pair_tuples __pyx_mstate_global->__pyx_n_s_market_trading_pair_tuples
#define __pyx_n_s_markets __pyx_mstate_global->__pyx_n_s_markets
#define __pyx_n_s_markets_columns __pyx_mstate_global->__pyx_n_s_markets_columns
#define __pyx_n_s_markets_data __pyx_mstate_global->__pyx_n_s_markets_data
#define __pyx_n_s_mid_price __pyx_mstate_global->__pyx_n_s_mid_price
#define __pyx_n_s_msg __pyx_mstate_global->__pyx_n_s_msg
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_name_2 __pyx_mstate_global->__pyx_n_s_name_2
#define __pyx_n_u_nan __pyx_mstate_global->__pyx_n_u_nan
#define __pyx_n_s_network_status __pyx_mstate_global->__pyx_n_s_network_status
#define __pyx_n_s_network_warning __pyx_mstate_global->__pyx_n_s_network_warning
#define __pyx_n_s_new __pyx_mstate_global->__pyx_n_s_new
#define __pyx_n_s_notify __pyx_mstate_global->__pyx_n_s_notify
#define __pyx_n_s_notify_hb_app __pyx_mstate_global->__pyx_n_s_notify_hb_app
#define __pyx_n_s_notify_hb_app_with_timestamp __pyx_mstate_global->__pyx_n_s_notify_hb_app_with_timestamp
#define __pyx_n_s_ofe __pyx_mstate_global->__pyx_n_s_ofe
#define __pyx_n_s_order_filled_event __pyx_mstate_global->__pyx_n_s_order_filled_event
#define __pyx_n_s_order_id __pyx_mstate_global->__pyx_n_s_order_id
#define __pyx_n_s_order_tracker __pyx_mstate_global->__pyx_n_s_order_tracker
#define __pyx_n_s_order_type __pyx_mstate_global->__pyx_n_s_order_type
#define __pyx_n_s_owner __pyx_mstate_global->__pyx_n_s_owner
#define __pyx_kp_u_pair_Continued_trading_with_the __pyx_mstate_global->__pyx_kp_u_pair_Continued_trading_with_the
#define __pyx_n_s_pandas __pyx_mstate_global->__pyx_n_s_pandas
#define __pyx_n_s_pd __pyx_mstate_global->__pyx_n_s_pd
#define __pyx_kp_s_pd_DataFrame __pyx_mstate_global->__pyx_kp_s_pd_DataFrame
#define __pyx_n_s_pickle __pyx_mstate_global->__pyx_n_s_pickle
#define __pyx_n_s_position_action __pyx_mstate_global->__pyx_n_s_position_action
#define __pyx_n_u_position_action __pyx_mstate_global->__pyx_n_u_position_action
#define __pyx_n_s_price __pyx_mstate_global->__pyx_n_s_price
#define __pyx_kp_u_price_and_amount_must_be_Decimal __pyx_mstate_global->__pyx_kp_u_price_and_amount_must_be_Decimal
#define __pyx_n_s_pyx_PickleError __pyx_mstate_global->__pyx_n_s_pyx_PickleError
#define __pyx_n_s_pyx_checksum __pyx_mstate_global->__pyx_n_s_pyx_checksum
#define __pyx_n_s_pyx_result __pyx_mstate_global->__pyx_n_s_pyx_result
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_type __pyx_mstate_global->__pyx_n_s_pyx_type
#define __pyx_n_s_pyx_unpickle_BaseStrategyEvent __pyx_mstate_global->__pyx_n_s_pyx_unpickle_BaseStrategyEvent
#define __pyx_n_s_pyx_unpickle_BuyOrderCompleted __pyx_mstate_global->__pyx_n_s_pyx_unpickle_BuyOrderCompleted
#define __pyx_n_s_pyx_unpickle_BuyOrderCreatedLi __pyx_mstate_global->__pyx_n_s_pyx_unpickle_BuyOrderCreatedLi
#define __pyx_n_s_pyx_unpickle_FundingPaymentCom __pyx_mstate_global->__pyx_n_s_pyx_unpickle_FundingPaymentCom
#define __pyx_n_s_pyx_unpickle_OrderCancelledLis __pyx_mstate_global->__pyx_n_s_pyx_unpickle_OrderCancelledLis
#define __pyx_n_s_pyx_unpickle_OrderExpiredListe __pyx_mstate_global->__pyx_n_s_pyx_unpickle_OrderExpiredListe
#define __pyx_n_s_pyx_unpickle_OrderFailedListen __pyx_mstate_global->__pyx_n_s_pyx_unpickle_OrderFailedListen
#define __pyx_n_s_pyx_unpickle_OrderFilledListen __pyx_mstate_global->__pyx_n_s_pyx_unpickle_OrderFilledListen
#define __pyx_n_s_pyx_unpickle_RangePositionCrea __pyx_mstate_global->__pyx_n_s_pyx_unpickle_RangePositionCrea
#define __pyx_n_s_pyx_unpickle_RangePositionRemo __pyx_mstate_global->__pyx_n_s_pyx_unpickle_RangePositionRemo
#define __pyx_n_s_pyx_unpickle_SellOrderComplete __pyx_mstate_global->__pyx_n_s_pyx_unpickle_SellOrderComplete
#define __pyx_n_s_pyx_unpickle_SellOrderCreatedL __pyx_mstate_global->__pyx_n_s_pyx_unpickle_SellOrderCreatedL
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_s_quantity __pyx_mstate_global->__pyx_n_s_quantity
#define __pyx_n_s_quote_asset __pyx_mstate_global->__pyx_n_s_quote_asset
#define __pyx_n_s_quote_asset_conversion_rate __pyx_mstate_global->__pyx_n_s_quote_asset_conversion_rate
#define __pyx_n_s_quote_balance __pyx_mstate_global->__pyx_n_s_quote_balance
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_remove_markets __pyx_mstate_global->__pyx_n_s_remove_markets
#define __pyx_n_s_return __pyx_mstate_global->__pyx_n_s_return
#define __pyx_n_u_s __pyx_mstate_global->__pyx_n_u_s
#define __pyx_n_s_s_decimal_0 __pyx_mstate_global->__pyx_n_s_s_decimal_0
#define __pyx_n_s_s_decimal_nan __pyx_mstate_global->__pyx_n_s_s_decimal_nan
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_s_self__events_cannot_be_converted __pyx_mstate_global->__pyx_kp_s_self__events_cannot_be_converted
#define __pyx_n_s_sell_with_specific_market __pyx_mstate_global->__pyx_n_s_sell_with_specific_market
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_sorted __pyx_mstate_global->__pyx_n_s_sorted
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_start_tracking_limit_order __pyx_mstate_global->__pyx_n_s_start_tracking_limit_order
#define __pyx_n_s_start_tracking_market_order __pyx_mstate_global->__pyx_n_s_start_tracking_market_order
#define __pyx_n_s_state __pyx_mstate_global->__pyx_n_s_state
#define __pyx_n_s_stop_tracking_limit_order __pyx_mstate_global->__pyx_n_s_stop_tracking_limit_order
#define __pyx_n_s_stop_tracking_market_order __pyx_mstate_global->__pyx_n_s_stop_tracking_market_order
#define __pyx_n_s_str __pyx_mstate_global->__pyx_n_s_str
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_super __pyx_mstate_global->__pyx_n_s_super
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_timestamp __pyx_mstate_global->__pyx_n_s_timestamp
#define __pyx_n_s_track_restored_orders __pyx_mstate_global->__pyx_n_s_track_restored_orders
#define __pyx_n_s_trade_fee __pyx_mstate_global->__pyx_n_s_trade_fee
#define __pyx_n_s_trade_type __pyx_mstate_global->__pyx_n_s_trade_type
#define __pyx_n_s_trading_pair __pyx_mstate_global->__pyx_n_s_trading_pair
#define __pyx_n_s_trading_pairs __pyx_mstate_global->__pyx_n_s_trading_pairs
#define __pyx_n_s_typing __pyx_mstate_global->__pyx_n_s_typing
#define __pyx_n_s_tz __pyx_mstate_global->__pyx_n_s_tz
#define __pyx_n_s_unit __pyx_mstate_global->__pyx_n_s_unit
#define __pyx_n_s_update __pyx_mstate_global->__pyx_n_s_update
#define __pyx_n_s_use_setstate __pyx_mstate_global->__pyx_n_s_use_setstate
#define __pyx_n_s_value __pyx_mstate_global->__pyx_n_s_value
#define __pyx_n_s_wallet_balance_data_frame __pyx_mstate_global->__pyx_n_s_wallet_balance_data_frame
#define __pyx_n_s_warning_lines __pyx_mstate_global->__pyx_n_s_warning_lines
#define __pyx_n_s_x __pyx_mstate_global->__pyx_n_s_x
#define __pyx_int_2 __pyx_mstate_global->__pyx_int_2
#define __pyx_int_231533357 __pyx_mstate_global->__pyx_int_231533357
#define __pyx_k__10 __pyx_mstate_global->__pyx_k__10
#define __pyx_k__11 __pyx_mstate_global->__pyx_k__11
#define __pyx_k__12 __pyx_mstate_global->__pyx_k__12
#define __pyx_k__13 __pyx_mstate_global->__pyx_k__13
#define __pyx_k__14 __pyx_mstate_global->__pyx_k__14
#define __pyx_k__15 __pyx_mstate_global->__pyx_k__15
#define __pyx_k__16 __pyx_mstate_global->__pyx_k__16
#define __pyx_k__17 __pyx_mstate_global->__pyx_k__17
#define __pyx_k__21 __pyx_mstate_global->__pyx_k__21
#define __pyx_k__22 __pyx_mstate_global->__pyx_k__22
#define __pyx_k__23 __pyx_mstate_global->__pyx_k__23
#define __pyx_k__24 __pyx_mstate_global->__pyx_k__24
#define __pyx_k__25 __pyx_mstate_global->__pyx_k__25
#define __pyx_k__26 __pyx_mstate_global->__pyx_k__26
#define __pyx_k__27 __pyx_mstate_global->__pyx_k__27
#define __pyx_k__28 __pyx_mstate_global->__pyx_k__28
#define __pyx_tuple__2 __pyx_mstate_global->__pyx_tuple__2
#define __pyx_tuple__4 __pyx_mstate_global->__pyx_tuple__4
#define __pyx_tuple__5 __pyx_mstate_global->__pyx_tuple__5
#define __pyx_tuple__9 __pyx_mstate_global->__pyx_tuple__9
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__19 __pyx_mstate_global->__pyx_tuple__19
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__29 __pyx_mstate_global->__pyx_tuple__29
#define __pyx_tuple__34 __pyx_mstate_global->__pyx_tuple__34
#define __pyx_tuple__35 __pyx_mstate_global->__pyx_tuple__35
#define __pyx_tuple__36 __pyx_mstate_global->__pyx_tuple__36
#define __pyx_tuple__38 __pyx_mstate_global->__pyx_tuple__38
#define __pyx_tuple__40 __pyx_mstate_global->__pyx_tuple__40
#define __pyx_tuple__42 __pyx_mstate_global->__pyx_tuple__42
#define __pyx_tuple__44 __pyx_mstate_global->__pyx_tuple__44
#define __pyx_tuple__46 __pyx_mstate_global->__pyx_tuple__46
#define __pyx_tuple__48 __pyx_mstate_global->__pyx_tuple__48
#define __pyx_tuple__50 __pyx_mstate_global->__pyx_tuple__50
#define __pyx_tuple__52 __pyx_mstate_global->__pyx_tuple__52
#define __pyx_tuple__54 __pyx_mstate_global->__pyx_tuple__54
#define __pyx_tuple__56 __pyx_mstate_global->__pyx_tuple__56
#define __pyx_tuple__58 __pyx_mstate_global->__pyx_tuple__58
#define __pyx_tuple__60 __pyx_mstate_global->__pyx_tuple__60
#define __pyx_tuple__62 __pyx_mstate_global->__pyx_tuple__62
#define __pyx_tuple__64 __pyx_mstate_global->__pyx_tuple__64
#define __pyx_tuple__66 __pyx_mstate_global->__pyx_tuple__66
#define __pyx_tuple__68 __pyx_mstate_global->__pyx_tuple__68
#define __pyx_tuple__70 __pyx_mstate_global->__pyx_tuple__70
#define __pyx_tuple__72 __pyx_mstate_global->__pyx_tuple__72
#define __pyx_tuple__74 __pyx_mstate_global->__pyx_tuple__74
#define __pyx_tuple__76 __pyx_mstate_global->__pyx_tuple__76
#define __pyx_tuple__78 __pyx_mstate_global->__pyx_tuple__78
#define __pyx_tuple__80 __pyx_mstate_global->__pyx_tuple__80
#define __pyx_tuple__82 __pyx_mstate_global->__pyx_tuple__82
#define __pyx_tuple__84 __pyx_mstate_global->__pyx_tuple__84
#define __pyx_tuple__86 __pyx_mstate_global->__pyx_tuple__86
#define __pyx_tuple__88 __pyx_mstate_global->__pyx_tuple__88
#define __pyx_tuple__90 __pyx_mstate_global->__pyx_tuple__90
#define __pyx_tuple__92 __pyx_mstate_global->__pyx_tuple__92
#define __pyx_tuple__94 __pyx_mstate_global->__pyx_tuple__94
#define __pyx_tuple__96 __pyx_mstate_global->__pyx_tuple__96
#define __pyx_tuple__98 __pyx_mstate_global->__pyx_tuple__98
#define __pyx_codeobj__3 __pyx_mstate_global->__pyx_codeobj__3
#define __pyx_tuple__100 __pyx_mstate_global->__pyx_tuple__100
#define __pyx_tuple__102 __pyx_mstate_global->__pyx_tuple__102
#define __pyx_tuple__104 __pyx_mstate_global->__pyx_tuple__104
#define __pyx_tuple__106 __pyx_mstate_global->__pyx_tuple__106
#define __pyx_tuple__108 __pyx_mstate_global->__pyx_tuple__108
#define __pyx_tuple__110 __pyx_mstate_global->__pyx_tuple__110
#define __pyx_tuple__112 __pyx_mstate_global->__pyx_tuple__112
#define __pyx_tuple__114 __pyx_mstate_global->__pyx_tuple__114
#define __pyx_tuple__116 __pyx_mstate_global->__pyx_tuple__116
#define __pyx_tuple__118 __pyx_mstate_global->__pyx_tuple__118
#define __pyx_tuple__120 __pyx_mstate_global->__pyx_tuple__120
#define __pyx_tuple__122 __pyx_mstate_global->__pyx_tuple__122
#define __pyx_tuple__124 __pyx_mstate_global->__pyx_tuple__124
#define __pyx_tuple__126 __pyx_mstate_global->__pyx_tuple__126
#define __pyx_tuple__128 __pyx_mstate_global->__pyx_tuple__128
#define __pyx_tuple__130 __pyx_mstate_global->__pyx_tuple__130
#define __pyx_tuple__132 __pyx_mstate_global->__pyx_tuple__132
#define __pyx_tuple__134 __pyx_mstate_global->__pyx_tuple__134
#define __pyx_tuple__136 __pyx_mstate_global->__pyx_tuple__136
#define __pyx_tuple__138 __pyx_mstate_global->__pyx_tuple__138
#define __pyx_tuple__140 __pyx_mstate_global->__pyx_tuple__140
#define __pyx_tuple__142 __pyx_mstate_global->__pyx_tuple__142
#define __pyx_tuple__144 __pyx_mstate_global->__pyx_tuple__144
#define __pyx_tuple__146 __pyx_mstate_global->__pyx_tuple__146
#define __pyx_tuple__148 __pyx_mstate_global->__pyx_tuple__148
#define __pyx_tuple__150 __pyx_mstate_global->__pyx_tuple__150
#define __pyx_tuple__152 __pyx_mstate_global->__pyx_tuple__152
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__39 __pyx_mstate_global->__pyx_codeobj__39
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__43 __pyx_mstate_global->__pyx_codeobj__43
#define __pyx_codeobj__45 __pyx_mstate_global->__pyx_codeobj__45
#define __pyx_codeobj__47 __pyx_mstate_global->__pyx_codeobj__47
#define __pyx_codeobj__49 __pyx_mstate_global->__pyx_codeobj__49
#define __pyx_codeobj__51 __pyx_mstate_global->__pyx_codeobj__51
#define __pyx_codeobj__53 __pyx_mstate_global->__pyx_codeobj__53
#define __pyx_codeobj__55 __pyx_mstate_global->__pyx_codeobj__55
#define __pyx_codeobj__57 __pyx_mstate_global->__pyx_codeobj__57
#define __pyx_codeobj__59 __pyx_mstate_global->__pyx_codeobj__59
#define __pyx_codeobj__61 __pyx_mstate_global->__pyx_codeobj__61
#define __pyx_codeobj__63 __pyx_mstate_global->__pyx_codeobj__63
#define __pyx_codeobj__65 __pyx_mstate_global->__pyx_codeobj__65
#define __pyx_codeobj__67 __pyx_mstate_global->__pyx_codeobj__67
#define __pyx_codeobj__69 __pyx_mstate_global->__pyx_codeobj__69
#define __pyx_codeobj__71 __pyx_mstate_global->__pyx_codeobj__71
#define __pyx_codeobj__73 __pyx_mstate_global->__pyx_codeobj__73
#define __pyx_codeobj__75 __pyx_mstate_global->__pyx_codeobj__75
#define __pyx_codeobj__77 __pyx_mstate_global->__pyx_codeobj__77
#define __pyx_codeobj__79 __pyx_mstate_global->__pyx_codeobj__79
#define __pyx_codeobj__81 __pyx_mstate_global->__pyx_codeobj__81
#define __pyx_codeobj__83 __pyx_mstate_global->__pyx_codeobj__83
#define __pyx_codeobj__85 __pyx_mstate_global->__pyx_codeobj__85
#define __pyx_codeobj__87 __pyx_mstate_global->__pyx_codeobj__87
#define __pyx_codeobj__89 __pyx_mstate_global->__pyx_codeobj__89
#define __pyx_codeobj__91 __pyx_mstate_global->__pyx_codeobj__91
#define __pyx_codeobj__93 __pyx_mstate_global->__pyx_codeobj__93
#define __pyx_codeobj__95 __pyx_mstate_global->__pyx_codeobj__95
#define __pyx_codeobj__97 __pyx_mstate_global->__pyx_codeobj__97
#define __pyx_codeobj__99 __pyx_mstate_global->__pyx_codeobj__99
#define __pyx_codeobj__101 __pyx_mstate_global->__pyx_codeobj__101
#define __pyx_codeobj__103 __pyx_mstate_global->__pyx_codeobj__103
#define __pyx_codeobj__105 __pyx_mstate_global->__pyx_codeobj__105
#define __pyx_codeobj__107 __pyx_mstate_global->__pyx_codeobj__107
#define __pyx_codeobj__109 __pyx_mstate_global->__pyx_codeobj__109
#define __pyx_codeobj__111 __pyx_mstate_global->__pyx_codeobj__111
#define __pyx_codeobj__113 __pyx_mstate_global->__pyx_codeobj__113
#define __pyx_codeobj__115 __pyx_mstate_global->__pyx_codeobj__115
#define __pyx_codeobj__117 __pyx_mstate_global->__pyx_codeobj__117
#define __pyx_codeobj__119 __pyx_mstate_global->__pyx_codeobj__119
#define __pyx_codeobj__121 __pyx_mstate_global->__pyx_codeobj__121
#define __pyx_codeobj__123 __pyx_mstate_global->__pyx_codeobj__123
#define __pyx_codeobj__125 __pyx_mstate_global->__pyx_codeobj__125
#define __pyx_codeobj__127 __pyx_mstate_global->__pyx_codeobj__127
#define __pyx_codeobj__129 __pyx_mstate_global->__pyx_codeobj__129
#define __pyx_codeobj__131 __pyx_mstate_global->__pyx_codeobj__131
#define __pyx_codeobj__133 __pyx_mstate_global->__pyx_codeobj__133
#define __pyx_codeobj__135 __pyx_mstate_global->__pyx_codeobj__135
#define __pyx_codeobj__137 __pyx_mstate_global->__pyx_codeobj__137
#define __pyx_codeobj__139 __pyx_mstate_global->__pyx_codeobj__139
#define __pyx_codeobj__141 __pyx_mstate_global->__pyx_codeobj__141
#define __pyx_codeobj__143 __pyx_mstate_global->__pyx_codeobj__143
#define __pyx_codeobj__145 __pyx_mstate_global->__pyx_codeobj__145
#define __pyx_codeobj__147 __pyx_mstate_global->__pyx_codeobj__147
#define __pyx_codeobj__149 __pyx_mstate_global->__pyx_codeobj__149
#define __pyx_codeobj__151 __pyx_mstate_global->__pyx_codeobj__151
#define __pyx_codeobj__153 __pyx_mstate_global->__pyx_codeobj__153
#endif
/* #### Code section: module_code ### */

/* "hummingbot/strategy/strategy_base.pyx":33
 *         StrategyBase _owner
 * 
 *     def __init__(self, StrategyBase owner):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._owner = owner
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_owner = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_owner,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_owner,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_owner)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 33, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 33, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_owner = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 33, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.BaseStrategyEventListener.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_owner), __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase, 1, "owner", 0))) __PYX_ERR(0, 33, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener___init__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *)__pyx_v_self), __pyx_v_owner);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener___init__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *__pyx_v_self, struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_owner) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "hummingbot/strategy/strategy_base.pyx":34
 * 
 *     def __init__(self, StrategyBase owner):
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         self._owner = owner
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener));
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":35
 *     def __init__(self, StrategyBase owner):
 *         super().__init__()
 *         self._owner = owner             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_INCREF((PyObject *)__pyx_v_owner);
  __Pyx_GIVEREF((PyObject *)__pyx_v_owner);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_owner);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_owner);
  __pyx_v_self->_owner = __pyx_v_owner;

  /* "hummingbot/strategy/strategy_base.pyx":33
 *         StrategyBase _owner
 * 
 *     def __init__(self, StrategyBase owner):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._owner = owner
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.BaseStrategyEventListener.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_2__reduce_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_2__reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->__pyx_base._current_event_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base._current_event_caller);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base._current_event_caller);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->__pyx_base._current_event_caller));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self->_owner);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->_owner);
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_self->_owner));
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_BaseStrategyEventListener, (type(self), 0xdcceb2d, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->__pyx_base._current_event_caller) != Py_None);
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->_owner) != Py_None);
    __pyx_t_3 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BaseStrategyEventListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:
 *         return __pyx_unpickle_BaseStrategyEventListener, (type(self), 0xdcceb2d, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_BaseStrategyEventListener, (type(self), 0xdcceb2d, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_BaseStrategyEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BaseStrategyEventListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_BaseStrategyEventListener, (type(self), 0xdcceb2d, None), state
 *     else:
 *         return __pyx_unpickle_BaseStrategyEventListener, (type(self), 0xdcceb2d, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BaseStrategyEventListener__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_BaseStrategyEvent); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.BaseStrategyEventListener.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BaseStrategyEventListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BaseStrategyEventListener__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.BaseStrategyEventListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_4__setstate_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_4__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_BaseStrategyEventListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BaseStrategyEventListener__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_BaseStrategyEventListener__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BaseStrategyEventListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BaseStrategyEventListener__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.BaseStrategyEventListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":39
 * 
 * cdef class BuyOrderCompletedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_complete_buy_order(arg)
 *         self._owner.c_did_complete_buy_order_tracker(arg)
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_call", 0);

  /* "hummingbot/strategy/strategy_base.pyx":40
 * cdef class BuyOrderCompletedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_complete_buy_order(arg)             # <<<<<<<<<<<<<<
 *         self._owner.c_did_complete_buy_order_tracker(arg)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base._owner->__pyx_base.__pyx_base.__pyx_vtab)->c_did_complete_buy_order(__pyx_v_self->__pyx_base._owner, __pyx_v_arg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":41
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_complete_buy_order(arg)
 *         self._owner.c_did_complete_buy_order_tracker(arg)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base._owner->__pyx_base.__pyx_base.__pyx_vtab)->c_did_complete_buy_order_tracker(__pyx_v_self->__pyx_base._owner, __pyx_v_arg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":39
 * 
 * cdef class BuyOrderCompletedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_complete_buy_order(arg)
 *         self._owner.c_did_complete_buy_order_tracker(arg)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.BuyOrderCompletedListener.c_call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener___reduce_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->__pyx_base.__pyx_base._current_event_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_self->__pyx_base._owner));
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_BuyOrderCompletedListener, (type(self), 0xdcceb2d, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller) != Py_None);
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->__pyx_base._owner) != Py_None);
    __pyx_t_3 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BuyOrderCompletedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:
 *         return __pyx_unpickle_BuyOrderCompletedListener, (type(self), 0xdcceb2d, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_BuyOrderCompletedListener, (type(self), 0xdcceb2d, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_BuyOrderCompleted); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BuyOrderCompletedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_BuyOrderCompletedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 *         return __pyx_unpickle_BuyOrderCompletedListener, (type(self), 0xdcceb2d, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BuyOrderCompletedListener__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_BuyOrderCompleted); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.BuyOrderCompletedListener.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BuyOrderCompletedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BuyOrderCompletedListener__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.BuyOrderCompletedListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener_2__setstate_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_BuyOrderCompletedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BuyOrderCompletedListener__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_BuyOrderCompletedListener__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BuyOrderCompletedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BuyOrderCompletedListener__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.BuyOrderCompletedListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":45
 * 
 * cdef class SellOrderCompletedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_complete_sell_order(arg)
 *         self._owner.c_did_complete_sell_order_tracker(arg)
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_call", 0);

  /* "hummingbot/strategy/strategy_base.pyx":46
 * cdef class SellOrderCompletedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_complete_sell_order(arg)             # <<<<<<<<<<<<<<
 *         self._owner.c_did_complete_sell_order_tracker(arg)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base._owner->__pyx_base.__pyx_base.__pyx_vtab)->c_did_complete_sell_order(__pyx_v_self->__pyx_base._owner, __pyx_v_arg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":47
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_complete_sell_order(arg)
 *         self._owner.c_did_complete_sell_order_tracker(arg)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base._owner->__pyx_base.__pyx_base.__pyx_vtab)->c_did_complete_sell_order_tracker(__pyx_v_self->__pyx_base._owner, __pyx_v_arg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":45
 * 
 * cdef class SellOrderCompletedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_complete_sell_order(arg)
 *         self._owner.c_did_complete_sell_order_tracker(arg)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.SellOrderCompletedListener.c_call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener___reduce_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->__pyx_base.__pyx_base._current_event_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_self->__pyx_base._owner));
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_SellOrderCompletedListener, (type(self), 0xdcceb2d, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller) != Py_None);
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->__pyx_base._owner) != Py_None);
    __pyx_t_3 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_SellOrderCompletedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:
 *         return __pyx_unpickle_SellOrderCompletedListener, (type(self), 0xdcceb2d, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_SellOrderCompletedListener, (type(self), 0xdcceb2d, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_SellOrderComplete); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_SellOrderCompletedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_SellOrderCompletedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 *         return __pyx_unpickle_SellOrderCompletedListener, (type(self), 0xdcceb2d, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_SellOrderCompletedListener__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_SellOrderComplete); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.SellOrderCompletedListener.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_SellOrderCompletedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_SellOrderCompletedListener__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.SellOrderCompletedListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener_2__setstate_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_SellOrderCompletedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_SellOrderCompletedListener__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_SellOrderCompletedListener__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_SellOrderCompletedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_SellOrderCompletedListener__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.SellOrderCompletedListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":51
 * 
 * cdef class FundingPaymentCompletedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_complete_funding_payment(arg)
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_call", 0);

  /* "hummingbot/strategy/strategy_base.pyx":52
 * cdef class FundingPaymentCompletedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_complete_funding_payment(arg)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base._owner->__pyx_base.__pyx_base.__pyx_vtab)->c_did_complete_funding_payment(__pyx_v_self->__pyx_base._owner, __pyx_v_arg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":51
 * 
 * cdef class FundingPaymentCompletedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_complete_funding_payment(arg)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.FundingPaymentCompletedListener.c_call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener___reduce_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->__pyx_base.__pyx_base._current_event_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_self->__pyx_base._owner));
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_FundingPaymentCompletedListener, (type(self), 0xdcceb2d, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller) != Py_None);
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->__pyx_base._owner) != Py_None);
    __pyx_t_3 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_FundingPaymentCompletedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:
 *         return __pyx_unpickle_FundingPaymentCompletedListener, (type(self), 0xdcceb2d, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_FundingPaymentCompletedListener, (type(self), 0xdcceb2d, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_FundingPaymentCom); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_FundingPaymentCompletedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_FundingPaymentCompletedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 *         return __pyx_unpickle_FundingPaymentCompletedListener, (type(self), 0xdcceb2d, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_FundingPaymentCompletedListener__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_FundingPaymentCom); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.FundingPaymentCompletedListener.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_FundingPaymentCompletedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_FundingPaymentCompletedListener__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.FundingPaymentCompletedListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener_2__setstate_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_FundingPaymentCompletedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_FundingPaymentCompletedListener__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_FundingPaymentCompletedListener__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_FundingPaymentCompletedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_FundingPaymentCompletedListener__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.FundingPaymentCompletedListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":56
 * 
 * cdef class OrderFilledListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_fill_order(arg)
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_19OrderFilledListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFilledListener *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_call", 0);

  /* "hummingbot/strategy/strategy_base.pyx":57
 * cdef class OrderFilledListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_fill_order(arg)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base._owner->__pyx_base.__pyx_base.__pyx_vtab)->c_did_fill_order(__pyx_v_self->__pyx_base._owner, __pyx_v_arg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":56
 * 
 * cdef class OrderFilledListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_fill_order(arg)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.OrderFilledListener.c_call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_19OrderFilledListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_19OrderFilledListener_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_19OrderFilledListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_19OrderFilledListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_19OrderFilledListener___reduce_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFilledListener *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_19OrderFilledListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFilledListener *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->__pyx_base.__pyx_base._current_event_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_self->__pyx_base._owner));
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_OrderFilledListener, (type(self), 0xdcceb2d, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller) != Py_None);
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->__pyx_base._owner) != Py_None);
    __pyx_t_3 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_OrderFilledListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:
 *         return __pyx_unpickle_OrderFilledListener, (type(self), 0xdcceb2d, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_OrderFilledListener, (type(self), 0xdcceb2d, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_OrderFilledListen); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_OrderFilledListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_OrderFilledListener, (type(self), 0xdcceb2d, None), state
 *     else:
 *         return __pyx_unpickle_OrderFilledListener, (type(self), 0xdcceb2d, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_OrderFilledListener__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_OrderFilledListen); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.OrderFilledListener.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderFilledListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderFilledListener__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_19OrderFilledListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_19OrderFilledListener_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_19OrderFilledListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_19OrderFilledListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.OrderFilledListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_19OrderFilledListener_2__setstate_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFilledListener *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_19OrderFilledListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFilledListener *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_OrderFilledListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_OrderFilledListener__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_OrderFilledListener__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderFilledListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderFilledListener__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.OrderFilledListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":61
 * 
 * cdef class OrderFailedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_fail_order(arg)
 *         self._owner.c_did_fail_order_tracker(arg)
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_19OrderFailedListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFailedListener *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_call", 0);

  /* "hummingbot/strategy/strategy_base.pyx":62
 * cdef class OrderFailedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_fail_order(arg)             # <<<<<<<<<<<<<<
 *         self._owner.c_did_fail_order_tracker(arg)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base._owner->__pyx_base.__pyx_base.__pyx_vtab)->c_did_fail_order(__pyx_v_self->__pyx_base._owner, __pyx_v_arg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":63
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_fail_order(arg)
 *         self._owner.c_did_fail_order_tracker(arg)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base._owner->__pyx_base.__pyx_base.__pyx_vtab)->c_did_fail_order_tracker(__pyx_v_self->__pyx_base._owner, __pyx_v_arg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":61
 * 
 * cdef class OrderFailedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_fail_order(arg)
 *         self._owner.c_did_fail_order_tracker(arg)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.OrderFailedListener.c_call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_19OrderFailedListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_19OrderFailedListener_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_19OrderFailedListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_19OrderFailedListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_19OrderFailedListener___reduce_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFailedListener *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_19OrderFailedListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFailedListener *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->__pyx_base.__pyx_base._current_event_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_self->__pyx_base._owner));
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_OrderFailedListener, (type(self), 0xdcceb2d, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller) != Py_None);
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->__pyx_base._owner) != Py_None);
    __pyx_t_3 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_OrderFailedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:
 *         return __pyx_unpickle_OrderFailedListener, (type(self), 0xdcceb2d, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_OrderFailedListener, (type(self), 0xdcceb2d, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_OrderFailedListen); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_OrderFailedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_OrderFailedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 *         return __pyx_unpickle_OrderFailedListener, (type(self), 0xdcceb2d, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_OrderFailedListener__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_OrderFailedListen); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.OrderFailedListener.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderFailedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderFailedListener__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_19OrderFailedListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_19OrderFailedListener_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_19OrderFailedListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_19OrderFailedListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.OrderFailedListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_19OrderFailedListener_2__setstate_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFailedListener *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_19OrderFailedListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFailedListener *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_OrderFailedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_OrderFailedListener__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_OrderFailedListener__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderFailedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderFailedListener__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.OrderFailedListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":67
 * 
 * cdef class OrderCancelledListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_cancel_order(arg)
 *         self._owner.c_did_cancel_order_tracker(arg)
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderCancelledListener *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_call", 0);

  /* "hummingbot/strategy/strategy_base.pyx":68
 * cdef class OrderCancelledListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_cancel_order(arg)             # <<<<<<<<<<<<<<
 *         self._owner.c_did_cancel_order_tracker(arg)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base._owner->__pyx_base.__pyx_base.__pyx_vtab)->c_did_cancel_order(__pyx_v_self->__pyx_base._owner, __pyx_v_arg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":69
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_cancel_order(arg)
 *         self._owner.c_did_cancel_order_tracker(arg)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base._owner->__pyx_base.__pyx_base.__pyx_vtab)->c_did_cancel_order_tracker(__pyx_v_self->__pyx_base._owner, __pyx_v_arg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":67
 * 
 * cdef class OrderCancelledListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_cancel_order(arg)
 *         self._owner.c_did_cancel_order_tracker(arg)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.OrderCancelledListener.c_call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener___reduce_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderCancelledListener *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderCancelledListener *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->__pyx_base.__pyx_base._current_event_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_self->__pyx_base._owner));
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_OrderCancelledListener, (type(self), 0xdcceb2d, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller) != Py_None);
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->__pyx_base._owner) != Py_None);
    __pyx_t_3 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_OrderCancelledListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:
 *         return __pyx_unpickle_OrderCancelledListener, (type(self), 0xdcceb2d, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_OrderCancelledListener, (type(self), 0xdcceb2d, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_OrderCancelledLis); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_OrderCancelledListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_OrderCancelledListener, (type(self), 0xdcceb2d, None), state
 *     else:
 *         return __pyx_unpickle_OrderCancelledListener, (type(self), 0xdcceb2d, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_OrderCancelledListener__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_OrderCancelledLis); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.OrderCancelledListener.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderCancelledListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderCancelledListener__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.OrderCancelledListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener_2__setstate_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderCancelledListener *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderCancelledListener *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_OrderCancelledListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_OrderCancelledListener__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_OrderCancelledListener__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderCancelledListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderCancelledListener__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.OrderCancelledListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":73
 * 
 * cdef class OrderExpiredListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_expire_order(arg)
 *         self._owner.c_did_expire_order_tracker(arg)
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderExpiredListener *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_call", 0);

  /* "hummingbot/strategy/strategy_base.pyx":74
 * cdef class OrderExpiredListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_expire_order(arg)             # <<<<<<<<<<<<<<
 *         self._owner.c_did_expire_order_tracker(arg)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base._owner->__pyx_base.__pyx_base.__pyx_vtab)->c_did_expire_order(__pyx_v_self->__pyx_base._owner, __pyx_v_arg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":75
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_expire_order(arg)
 *         self._owner.c_did_expire_order_tracker(arg)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base._owner->__pyx_base.__pyx_base.__pyx_vtab)->c_did_expire_order_tracker(__pyx_v_self->__pyx_base._owner, __pyx_v_arg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":73
 * 
 * cdef class OrderExpiredListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_expire_order(arg)
 *         self._owner.c_did_expire_order_tracker(arg)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.OrderExpiredListener.c_call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener___reduce_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderExpiredListener *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderExpiredListener *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->__pyx_base.__pyx_base._current_event_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_self->__pyx_base._owner));
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_OrderExpiredListener, (type(self), 0xdcceb2d, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller) != Py_None);
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->__pyx_base._owner) != Py_None);
    __pyx_t_3 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_OrderExpiredListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:
 *         return __pyx_unpickle_OrderExpiredListener, (type(self), 0xdcceb2d, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_OrderExpiredListener, (type(self), 0xdcceb2d, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_OrderExpiredListe); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_OrderExpiredListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_OrderExpiredListener, (type(self), 0xdcceb2d, None), state
 *     else:
 *         return __pyx_unpickle_OrderExpiredListener, (type(self), 0xdcceb2d, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_OrderExpiredListener__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_OrderExpiredListe); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.OrderExpiredListener.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderExpiredListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderExpiredListener__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.OrderExpiredListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener_2__setstate_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderExpiredListener *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderExpiredListener *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_OrderExpiredListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_OrderExpiredListener__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_OrderExpiredListener__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderExpiredListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderExpiredListener__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.OrderExpiredListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":79
 * 
 * cdef class BuyOrderCreatedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_create_buy_order(arg)
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_call", 0);

  /* "hummingbot/strategy/strategy_base.pyx":80
 * cdef class BuyOrderCreatedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_create_buy_order(arg)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base._owner->__pyx_base.__pyx_base.__pyx_vtab)->c_did_create_buy_order(__pyx_v_self->__pyx_base._owner, __pyx_v_arg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":79
 * 
 * cdef class BuyOrderCreatedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_create_buy_order(arg)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.BuyOrderCreatedListener.c_call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener___reduce_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->__pyx_base.__pyx_base._current_event_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_self->__pyx_base._owner));
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_BuyOrderCreatedListener, (type(self), 0xdcceb2d, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller) != Py_None);
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->__pyx_base._owner) != Py_None);
    __pyx_t_3 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BuyOrderCreatedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:
 *         return __pyx_unpickle_BuyOrderCreatedListener, (type(self), 0xdcceb2d, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_BuyOrderCreatedListener, (type(self), 0xdcceb2d, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_BuyOrderCreatedLi); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_BuyOrderCreatedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_BuyOrderCreatedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 *         return __pyx_unpickle_BuyOrderCreatedListener, (type(self), 0xdcceb2d, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BuyOrderCreatedListener__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_BuyOrderCreatedLi); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.BuyOrderCreatedListener.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BuyOrderCreatedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BuyOrderCreatedListener__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.BuyOrderCreatedListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener_2__setstate_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_BuyOrderCreatedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_BuyOrderCreatedListener__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_BuyOrderCreatedListener__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BuyOrderCreatedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BuyOrderCreatedListener__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.BuyOrderCreatedListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":84
 * 
 * cdef class SellOrderCreatedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_create_sell_order(arg)
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_call", 0);

  /* "hummingbot/strategy/strategy_base.pyx":85
 * cdef class SellOrderCreatedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_create_sell_order(arg)             # <<<<<<<<<<<<<<
 * 
 * cdef class RangePositionCreatedListener(BaseStrategyEventListener):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base._owner->__pyx_base.__pyx_base.__pyx_vtab)->c_did_create_sell_order(__pyx_v_self->__pyx_base._owner, __pyx_v_arg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":84
 * 
 * cdef class SellOrderCreatedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_create_sell_order(arg)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.SellOrderCreatedListener.c_call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener___reduce_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->__pyx_base.__pyx_base._current_event_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_self->__pyx_base._owner));
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_SellOrderCreatedListener, (type(self), 0xdcceb2d, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller) != Py_None);
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->__pyx_base._owner) != Py_None);
    __pyx_t_3 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_SellOrderCreatedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:
 *         return __pyx_unpickle_SellOrderCreatedListener, (type(self), 0xdcceb2d, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_SellOrderCreatedListener, (type(self), 0xdcceb2d, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_SellOrderCreatedL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_SellOrderCreatedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_SellOrderCreatedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 *         return __pyx_unpickle_SellOrderCreatedListener, (type(self), 0xdcceb2d, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_SellOrderCreatedListener__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_SellOrderCreatedL); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.SellOrderCreatedListener.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_SellOrderCreatedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_SellOrderCreatedListener__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.SellOrderCreatedListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener_2__setstate_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_SellOrderCreatedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_SellOrderCreatedListener__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_SellOrderCreatedListener__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_SellOrderCreatedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_SellOrderCreatedListener__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.SellOrderCreatedListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":88
 * 
 * cdef class RangePositionCreatedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_create_range_position_order(arg)
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_call", 0);

  /* "hummingbot/strategy/strategy_base.pyx":89
 * cdef class RangePositionCreatedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_create_range_position_order(arg)             # <<<<<<<<<<<<<<
 * 
 * cdef class RangePositionRemovedListener(BaseStrategyEventListener):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base._owner->__pyx_base.__pyx_base.__pyx_vtab)->c_did_create_range_position_order(__pyx_v_self->__pyx_base._owner, __pyx_v_arg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":88
 * 
 * cdef class RangePositionCreatedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_create_range_position_order(arg)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.RangePositionCreatedListener.c_call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener___reduce_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->__pyx_base.__pyx_base._current_event_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_self->__pyx_base._owner));
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_RangePositionCreatedListener, (type(self), 0xdcceb2d, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller) != Py_None);
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->__pyx_base._owner) != Py_None);
    __pyx_t_3 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_RangePositionCreatedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:
 *         return __pyx_unpickle_RangePositionCreatedListener, (type(self), 0xdcceb2d, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_RangePositionCreatedListener, (type(self), 0xdcceb2d, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_RangePositionCrea); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_RangePositionCreatedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_RangePositionCreatedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 *         return __pyx_unpickle_RangePositionCreatedListener, (type(self), 0xdcceb2d, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_RangePositionCreatedListener__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_RangePositionCrea); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.RangePositionCreatedListener.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RangePositionCreatedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RangePositionCreatedListener__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.RangePositionCreatedListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener_2__setstate_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_RangePositionCreatedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_RangePositionCreatedListener__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_RangePositionCreatedListener__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RangePositionCreatedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RangePositionCreatedListener__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.RangePositionCreatedListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":92
 * 
 * cdef class RangePositionRemovedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_remove_range_position_order(arg)
 * # </editor-fold>
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener_c_call(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_call", 0);

  /* "hummingbot/strategy/strategy_base.pyx":93
 * cdef class RangePositionRemovedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):
 *         self._owner.c_did_remove_range_position_order(arg)             # <<<<<<<<<<<<<<
 * # </editor-fold>
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base._owner->__pyx_base.__pyx_base.__pyx_vtab)->c_did_remove_range_position_order(__pyx_v_self->__pyx_base._owner, __pyx_v_arg); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":92
 * 
 * cdef class RangePositionRemovedListener(BaseStrategyEventListener):
 *     cdef c_call(self, object arg):             # <<<<<<<<<<<<<<
 *         self._owner.c_did_remove_range_position_order(arg)
 * # </editor-fold>
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.RangePositionRemovedListener.c_call", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener_1__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener_1__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener___reduce_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener___reduce_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener *__pyx_v_self) {
  PyObject *__pyx_v_state = 0;
  PyObject *__pyx_v__dict = 0;
  int __pyx_v_use_setstate;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":5
 *     cdef object _dict
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)             # <<<<<<<<<<<<<<
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 */
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->__pyx_base.__pyx_base._current_event_tag); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller));
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_INCREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self->__pyx_base._owner);
  PyTuple_SET_ITEM(__pyx_t_2, 2, ((PyObject *)__pyx_v_self->__pyx_base._owner));
  __pyx_t_1 = 0;
  __pyx_v_state = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "(tree fragment)":6
 *     cdef bint use_setstate
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)             # <<<<<<<<<<<<<<
 *     if _dict is not None:
 *         state += (_dict,)
 */
  __pyx_t_2 = __Pyx_GetAttr3(((PyObject *)__pyx_v_self), __pyx_n_s_dict, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v__dict = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
  __pyx_t_3 = (__pyx_v__dict != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":8
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:
 *         state += (_dict,)             # <<<<<<<<<<<<<<
 *         use_setstate = True
 *     else:
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v__dict);
    __Pyx_GIVEREF(__pyx_v__dict);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v__dict);
    __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_v_state, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 8, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_state, ((PyObject*)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "(tree fragment)":9
 *     if _dict is not None:
 *         state += (_dict,)
 *         use_setstate = True             # <<<<<<<<<<<<<<
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 */
    __pyx_v_use_setstate = 1;

    /* "(tree fragment)":7
 *     state = (self._current_event_caller, self._current_event_tag, self._owner)
 *     _dict = getattr(self, '__dict__', None)
 *     if _dict is not None:             # <<<<<<<<<<<<<<
 *         state += (_dict,)
 *         use_setstate = True
 */
    goto __pyx_L3;
  }

  /* "(tree fragment)":11
 *         use_setstate = True
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None             # <<<<<<<<<<<<<<
 *     if use_setstate:
 *         return __pyx_unpickle_RangePositionRemovedListener, (type(self), 0xdcceb2d, None), state
 */
  /*else*/ {
    __pyx_t_3 = (((PyObject *)__pyx_v_self->__pyx_base.__pyx_base._current_event_caller) != Py_None);
    __pyx_t_5 = (__pyx_t_3 != 0);
    if (!__pyx_t_5) {
    } else {
      __pyx_t_4 = __pyx_t_5;
      goto __pyx_L4_bool_binop_done;
    }
    __pyx_t_5 = (((PyObject *)__pyx_v_self->__pyx_base._owner) != Py_None);
    __pyx_t_3 = (__pyx_t_5 != 0);
    __pyx_t_4 = __pyx_t_3;
    __pyx_L4_bool_binop_done:;
    __pyx_v_use_setstate = __pyx_t_4;
  }
  __pyx_L3:;

  /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_RangePositionRemovedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  __pyx_t_4 = (__pyx_v_use_setstate != 0);
  if (__pyx_t_4) {

    /* "(tree fragment)":13
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:
 *         return __pyx_unpickle_RangePositionRemovedListener, (type(self), 0xdcceb2d, None), state             # <<<<<<<<<<<<<<
 *     else:
 *         return __pyx_unpickle_RangePositionRemovedListener, (type(self), 0xdcceb2d, state)
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pyx_unpickle_RangePositionRemo); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    PyTuple_SET_ITEM(__pyx_t_2, 2, Py_None);
    __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 13, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_v_state);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "(tree fragment)":12
 *     else:
 *         use_setstate = self._current_event_caller is not None or self._owner is not None
 *     if use_setstate:             # <<<<<<<<<<<<<<
 *         return __pyx_unpickle_RangePositionRemovedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 */
  }

  /* "(tree fragment)":15
 *         return __pyx_unpickle_RangePositionRemovedListener, (type(self), 0xdcceb2d, None), state
 *     else:
 *         return __pyx_unpickle_RangePositionRemovedListener, (type(self), 0xdcceb2d, state)             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_RangePositionRemovedListener__set_state(self, __pyx_state)
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pyx_unpickle_RangePositionRemo); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_GIVEREF(((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)Py_TYPE(((PyObject *)__pyx_v_self))));
    __Pyx_INCREF(__pyx_int_231533357);
    __Pyx_GIVEREF(__pyx_int_231533357);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_231533357);
    __Pyx_INCREF(__pyx_v_state);
    __Pyx_GIVEREF(__pyx_v_state);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_state);
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 15, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_6 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.RangePositionRemovedListener.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_state);
  __Pyx_XDECREF(__pyx_v__dict);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RangePositionRemovedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RangePositionRemovedListener__set_state(self, __pyx_state)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener_3__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener_3__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 16, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 16, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 16, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.RangePositionRemovedListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener_2__setstate_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener_2__setstate_cython__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener *__pyx_v_self, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":17
 *         return __pyx_unpickle_RangePositionRemovedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):
 *     __pyx_unpickle_RangePositionRemovedListener__set_state(self, __pyx_state)             # <<<<<<<<<<<<<<
 */
  if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 17, __pyx_L1_error)
  __pyx_t_1 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_RangePositionRemovedListener__set_state(__pyx_v_self, ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RangePositionRemovedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RangePositionRemovedListener__set_state(self, __pyx_state)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.RangePositionRemovedListener.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":110
 *     RANGE_POSITION_REMOVED_EVENT_TAG = MarketEvent.RangePositionRemoved.value
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls) -> logging.Logger:
 *         raise NotImplementedError
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_1logger(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_1logger = {"logger", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_1logger, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_1logger(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logger (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("logger", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "logger", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_logger(((PyTypeObject*)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_logger(CYTHON_UNUSED PyTypeObject *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("logger", 0);

  /* "hummingbot/strategy/strategy_base.pyx":112
 *     @classmethod
 *     def logger(cls) -> logging.Logger:
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self):
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 112, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":110
 *     RANGE_POSITION_REMOVED_EVENT_TAG = MarketEvent.RangePositionRemoved.value
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls) -> logging.Logger:
 *         raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.logger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":114
 *         raise NotImplementedError
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._sb_markets = set()
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, __pyx_nargs); return -1;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_VARARGS(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_2__init__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_2__init__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "hummingbot/strategy/strategy_base.pyx":115
 * 
 *     def __init__(self):
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         self._sb_markets = set()
 *         self._sb_create_buy_order_listener = BuyOrderCreatedListener(self)
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase));
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":116
 *     def __init__(self):
 *         super().__init__()
 *         self._sb_markets = set()             # <<<<<<<<<<<<<<
 *         self._sb_create_buy_order_listener = BuyOrderCreatedListener(self)
 *         self._sb_create_sell_order_listener = SellOrderCreatedListener(self)
 */
  __pyx_t_1 = PySet_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_sb_markets);
  __Pyx_DECREF(__pyx_v_self->_sb_markets);
  __pyx_v_self->_sb_markets = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":117
 *         super().__init__()
 *         self._sb_markets = set()
 *         self._sb_create_buy_order_listener = BuyOrderCreatedListener(self)             # <<<<<<<<<<<<<<
 *         self._sb_create_sell_order_listener = SellOrderCreatedListener(self)
 *         self._sb_fill_order_listener = OrderFilledListener(self)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_sb_create_buy_order_listener);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_sb_create_buy_order_listener);
  __pyx_v_self->_sb_create_buy_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":118
 *         self._sb_markets = set()
 *         self._sb_create_buy_order_listener = BuyOrderCreatedListener(self)
 *         self._sb_create_sell_order_listener = SellOrderCreatedListener(self)             # <<<<<<<<<<<<<<
 *         self._sb_fill_order_listener = OrderFilledListener(self)
 *         self._sb_fail_order_listener = OrderFailedListener(self)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_sb_create_sell_order_listener);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_sb_create_sell_order_listener);
  __pyx_v_self->_sb_create_sell_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":119
 *         self._sb_create_buy_order_listener = BuyOrderCreatedListener(self)
 *         self._sb_create_sell_order_listener = SellOrderCreatedListener(self)
 *         self._sb_fill_order_listener = OrderFilledListener(self)             # <<<<<<<<<<<<<<
 *         self._sb_fail_order_listener = OrderFailedListener(self)
 *         self._sb_cancel_order_listener = OrderCancelledListener(self)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFilledListener), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_sb_fill_order_listener);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_sb_fill_order_listener);
  __pyx_v_self->_sb_fill_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":120
 *         self._sb_create_sell_order_listener = SellOrderCreatedListener(self)
 *         self._sb_fill_order_listener = OrderFilledListener(self)
 *         self._sb_fail_order_listener = OrderFailedListener(self)             # <<<<<<<<<<<<<<
 *         self._sb_cancel_order_listener = OrderCancelledListener(self)
 *         self._sb_expire_order_listener = OrderExpiredListener(self)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFailedListener), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_sb_fail_order_listener);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_sb_fail_order_listener);
  __pyx_v_self->_sb_fail_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":121
 *         self._sb_fill_order_listener = OrderFilledListener(self)
 *         self._sb_fail_order_listener = OrderFailedListener(self)
 *         self._sb_cancel_order_listener = OrderCancelledListener(self)             # <<<<<<<<<<<<<<
 *         self._sb_expire_order_listener = OrderExpiredListener(self)
 *         self._sb_complete_buy_order_listener = BuyOrderCompletedListener(self)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderCancelledListener), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_sb_cancel_order_listener);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_sb_cancel_order_listener);
  __pyx_v_self->_sb_cancel_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":122
 *         self._sb_fail_order_listener = OrderFailedListener(self)
 *         self._sb_cancel_order_listener = OrderCancelledListener(self)
 *         self._sb_expire_order_listener = OrderExpiredListener(self)             # <<<<<<<<<<<<<<
 *         self._sb_complete_buy_order_listener = BuyOrderCompletedListener(self)
 *         self._sb_complete_sell_order_listener = SellOrderCompletedListener(self)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderExpiredListener), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 122, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_sb_expire_order_listener);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_sb_expire_order_listener);
  __pyx_v_self->_sb_expire_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":123
 *         self._sb_cancel_order_listener = OrderCancelledListener(self)
 *         self._sb_expire_order_listener = OrderExpiredListener(self)
 *         self._sb_complete_buy_order_listener = BuyOrderCompletedListener(self)             # <<<<<<<<<<<<<<
 *         self._sb_complete_sell_order_listener = SellOrderCompletedListener(self)
 *         self._sb_complete_funding_payment_listener = FundingPaymentCompletedListener(self)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_sb_complete_buy_order_listener);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_sb_complete_buy_order_listener);
  __pyx_v_self->_sb_complete_buy_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":124
 *         self._sb_expire_order_listener = OrderExpiredListener(self)
 *         self._sb_complete_buy_order_listener = BuyOrderCompletedListener(self)
 *         self._sb_complete_sell_order_listener = SellOrderCompletedListener(self)             # <<<<<<<<<<<<<<
 *         self._sb_complete_funding_payment_listener = FundingPaymentCompletedListener(self)
 *         self._sb_create_range_position_order_listener = RangePositionCreatedListener(self)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_sb_complete_sell_order_listener);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_sb_complete_sell_order_listener);
  __pyx_v_self->_sb_complete_sell_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":125
 *         self._sb_complete_buy_order_listener = BuyOrderCompletedListener(self)
 *         self._sb_complete_sell_order_listener = SellOrderCompletedListener(self)
 *         self._sb_complete_funding_payment_listener = FundingPaymentCompletedListener(self)             # <<<<<<<<<<<<<<
 *         self._sb_create_range_position_order_listener = RangePositionCreatedListener(self)
 *         self._sb_remove_range_position_order_listener = RangePositionRemovedListener(self)
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_sb_complete_funding_payment_listener);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_sb_complete_funding_payment_listener);
  __pyx_v_self->_sb_complete_funding_payment_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":126
 *         self._sb_complete_sell_order_listener = SellOrderCompletedListener(self)
 *         self._sb_complete_funding_payment_listener = FundingPaymentCompletedListener(self)
 *         self._sb_create_range_position_order_listener = RangePositionCreatedListener(self)             # <<<<<<<<<<<<<<
 *         self._sb_remove_range_position_order_listener = RangePositionRemovedListener(self)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_sb_create_range_position_order_listener);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_sb_create_range_position_order_listener);
  __pyx_v_self->_sb_create_range_position_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":127
 *         self._sb_complete_funding_payment_listener = FundingPaymentCompletedListener(self)
 *         self._sb_create_range_position_order_listener = RangePositionCreatedListener(self)
 *         self._sb_remove_range_position_order_listener = RangePositionRemovedListener(self)             # <<<<<<<<<<<<<<
 * 
 *         self._sb_delegate_lock = False
 */
  __pyx_t_1 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_sb_remove_range_position_order_listener);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_sb_remove_range_position_order_listener);
  __pyx_v_self->_sb_remove_range_position_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":129
 *         self._sb_remove_range_position_order_listener = RangePositionRemovedListener(self)
 * 
 *         self._sb_delegate_lock = False             # <<<<<<<<<<<<<<
 * 
 *         self._sb_order_tracker = OrderTracker()
 */
  __pyx_v_self->_sb_delegate_lock = 0;

  /* "hummingbot/strategy/strategy_base.pyx":131
 *         self._sb_delegate_lock = False
 * 
 *         self._sb_order_tracker = OrderTracker()             # <<<<<<<<<<<<<<
 * 
 *     def init_params(self, *args, **kwargs):
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_sb_order_tracker);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_sb_order_tracker);
  __pyx_v_self->_sb_order_tracker = ((struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":114
 *         raise NotImplementedError
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._sb_markets = set()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":133
 *         self._sb_order_tracker = OrderTracker()
 * 
 *     def init_params(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *         Assigns strategy parameters, this function must be called directly after init.
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_5init_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
PyDoc_STRVAR(__pyx_doc_10hummingbot_8strategy_13strategy_base_12StrategyBase_4init_params, "\n        Assigns strategy parameters, this function must be called directly after init.\n        The reason for this is to make the parameters discoverable through introspect (this is not possible on init of\n        a Cython class).\n        ");
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_5init_params = {"init_params", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_5init_params, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10hummingbot_8strategy_13strategy_base_12StrategyBase_4init_params};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_5init_params(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_args = 0;
  CYTHON_UNUSED PyObject *__pyx_v_kwargs = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_params (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "init_params", 1))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_4init_params(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_args, __pyx_v_kwargs);

  /* function exit code */
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_4init_params(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_args, CYTHON_UNUSED PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init_params", 0);

  /* "hummingbot/strategy/strategy_base.pyx":139
 *         a Cython class).
 *         """
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 139, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":133
 *         self._sb_order_tracker = OrderTracker()
 * 
 *     def init_params(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *         Assigns strategy parameters, this function must be called directly after init.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.init_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":141
 *         raise NotImplementedError
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def active_markets(self) -> List[ConnectorBase]:
 *         return list(self._sb_markets)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_14active_markets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_14active_markets_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_14active_markets___get__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_14active_markets___get__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/strategy_base.pyx":143
 *     @property
 *     def active_markets(self) -> List[ConnectorBase]:
 *         return list(self._sb_markets)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PySequence_List(__pyx_v_self->_sb_markets); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/strategy_base.pyx":141
 *         raise NotImplementedError
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def active_markets(self) -> List[ConnectorBase]:
 *         return list(self._sb_markets)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.active_markets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":145
 *         return list(self._sb_markets)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def order_tracker(self) -> OrderTracker:
 *         return self._sb_order_tracker
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_13order_tracker_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_13order_tracker_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_13order_tracker___get__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_13order_tracker___get__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/strategy_base.pyx":147
 *     @property
 *     def order_tracker(self) -> OrderTracker:
 *         return self._sb_order_tracker             # <<<<<<<<<<<<<<
 * 
 *     def format_status(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->_sb_order_tracker);
  __pyx_r = ((PyObject *)__pyx_v_self->_sb_order_tracker);
  goto __pyx_L0;

  /* "hummingbot/strategy/strategy_base.pyx":145
 *         return list(self._sb_markets)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def order_tracker(self) -> OrderTracker:
 *         return self._sb_order_tracker
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":149
 *         return self._sb_order_tracker
 * 
 *     def format_status(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_7format_status(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_7format_status = {"format_status", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_7format_status, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_7format_status(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("format_status (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("format_status", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "format_status", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_6format_status(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_6format_status(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("format_status", 0);

  /* "hummingbot/strategy/strategy_base.pyx":150
 * 
 *     def format_status(self):
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def log_with_clock(self, log_level: int, msg: str, **kwargs):
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(0, 150, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":149
 *         return self._sb_order_tracker
 * 
 *     def format_status(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.format_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":152
 *         raise NotImplementedError
 * 
 *     def log_with_clock(self, log_level: int, msg: str, **kwargs):             # <<<<<<<<<<<<<<
 *         clock_timestamp = pd.Timestamp(self._current_timestamp, unit="s", tz="UTC")
 *         self.logger().log(log_level, f"{msg} [clock={str(clock_timestamp)}]", **kwargs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_9log_with_clock(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_9log_with_clock = {"log_with_clock", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_9log_with_clock, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_9log_with_clock(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_log_level = 0;
  PyObject *__pyx_v_msg = 0;
  PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("log_with_clock (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_log_level,&__pyx_n_s_msg,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_log_level,&__pyx_n_s_msg,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_log_level)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 152, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_msg)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 152, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("log_with_clock", 1, 2, 2, 1); __PYX_ERR(0, 152, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, kwd_pos_args, "log_with_clock") < 0)) __PYX_ERR(0, 152, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_log_level = values[0];
    __pyx_v_msg = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("log_with_clock", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 152, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.log_with_clock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_msg), (&PyUnicode_Type), 1, "msg", 1))) __PYX_ERR(0, 152, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_8log_with_clock(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_log_level, __pyx_v_msg, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_8log_with_clock(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_log_level, PyObject *__pyx_v_msg, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_v_clock_timestamp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("log_with_clock", 0);

  /* "hummingbot/strategy/strategy_base.pyx":153
 * 
 *     def log_with_clock(self, log_level: int, msg: str, **kwargs):
 *         clock_timestamp = pd.Timestamp(self._current_timestamp, unit="s", tz="UTC")             # <<<<<<<<<<<<<<
 *         self.logger().log(log_level, f"{msg} [clock={str(clock_timestamp)}]", **kwargs)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Timestamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base._current_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_unit, __pyx_n_u_s) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_tz, __pyx_n_u_UTC) < 0) __PYX_ERR(0, 153, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_clock_timestamp = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":154
 *     def log_with_clock(self, log_level: int, msg: str, **kwargs):
 *         clock_timestamp = pd.Timestamp(self._current_timestamp, unit="s", tz="UTC")
 *         self.logger().log(log_level, f"{msg} [clock={str(clock_timestamp)}]", **kwargs)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_log); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(4); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_6 = 0;
  __pyx_t_7 = 127;
  __pyx_t_3 = __Pyx_PyUnicode_Unicode(__pyx_v_msg); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
  __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_kp_u_clock);
  __pyx_t_6 += 8;
  __Pyx_GIVEREF(__pyx_kp_u_clock);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_kp_u_clock);
  __pyx_t_3 = __Pyx_PyObject_Str(__pyx_v_clock_timestamp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
  __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __pyx_t_3 = 0;
  __Pyx_INCREF(__pyx_kp_u_);
  __pyx_t_6 += 1;
  __Pyx_GIVEREF(__pyx_kp_u_);
  PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_kp_u_);
  __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_4, 4, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_log_level);
  __Pyx_GIVEREF(__pyx_v_log_level);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_log_level);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = PyDict_Copy(__pyx_v_kwargs); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":152
 *         raise NotImplementedError
 * 
 *     def log_with_clock(self, log_level: int, msg: str, **kwargs):             # <<<<<<<<<<<<<<
 *         clock_timestamp = pd.Timestamp(self._current_timestamp, unit="s", tz="UTC")
 *         self.logger().log(log_level, f"{msg} [clock={str(clock_timestamp)}]", **kwargs)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.log_with_clock", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_clock_timestamp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":156
 *         self.logger().log(log_level, f"{msg} [clock={str(clock_timestamp)}]", **kwargs)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def trades(self) -> List[Trade]:
 *         """
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades___get__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":162
 *         The trades are taken from the market event logs.
 *         """
 *         def event_to_trade(order_filled_event: OrderFilledEvent, market_name: str):             # <<<<<<<<<<<<<<
 *             return Trade(order_filled_event.trading_pair,
 *                          order_filled_event.trade_type,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___1event_to_trade(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___1event_to_trade = {"event_to_trade", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___1event_to_trade, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___1event_to_trade(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_order_filled_event = 0;
  PyObject *__pyx_v_market_name = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("event_to_trade (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_filled_event,&__pyx_n_s_market_name,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_filled_event,&__pyx_n_s_market_name,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_filled_event)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 162, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_market_name)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 162, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("event_to_trade", 1, 2, 2, 1); __PYX_ERR(0, 162, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "event_to_trade") < 0)) __PYX_ERR(0, 162, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_order_filled_event = values[0];
    __pyx_v_market_name = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("event_to_trade", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 162, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.trades.__get__.event_to_trade", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_market_name), (&PyUnicode_Type), 1, "market_name", 1))) __PYX_ERR(0, 162, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___event_to_trade(__pyx_self, __pyx_v_order_filled_event, __pyx_v_market_name);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___event_to_trade(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_order_filled_event, PyObject *__pyx_v_market_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("event_to_trade", 0);

  /* "hummingbot/strategy/strategy_base.pyx":163
 *         """
 *         def event_to_trade(order_filled_event: OrderFilledEvent, market_name: str):
 *             return Trade(order_filled_event.trading_pair,             # <<<<<<<<<<<<<<
 *                          order_filled_event.trade_type,
 *                          order_filled_event.price,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Trade); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_filled_event, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 163, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "hummingbot/strategy/strategy_base.pyx":164
 *         def event_to_trade(order_filled_event: OrderFilledEvent, market_name: str):
 *             return Trade(order_filled_event.trading_pair,
 *                          order_filled_event.trade_type,             # <<<<<<<<<<<<<<
 *                          order_filled_event.price,
 *                          order_filled_event.amount,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_filled_event, __pyx_n_s_trade_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "hummingbot/strategy/strategy_base.pyx":165
 *             return Trade(order_filled_event.trading_pair,
 *                          order_filled_event.trade_type,
 *                          order_filled_event.price,             # <<<<<<<<<<<<<<
 *                          order_filled_event.amount,
 *                          order_filled_event.order_type,
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_filled_event, __pyx_n_s_price); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "hummingbot/strategy/strategy_base.pyx":166
 *                          order_filled_event.trade_type,
 *                          order_filled_event.price,
 *                          order_filled_event.amount,             # <<<<<<<<<<<<<<
 *                          order_filled_event.order_type,
 *                          market_name,
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_filled_event, __pyx_n_s_amount); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "hummingbot/strategy/strategy_base.pyx":167
 *                          order_filled_event.price,
 *                          order_filled_event.amount,
 *                          order_filled_event.order_type,             # <<<<<<<<<<<<<<
 *                          market_name,
 *                          order_filled_event.timestamp,
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_filled_event, __pyx_n_s_order_type); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "hummingbot/strategy/strategy_base.pyx":169
 *                          order_filled_event.order_type,
 *                          market_name,
 *                          order_filled_event.timestamp,             # <<<<<<<<<<<<<<
 *                          order_filled_event.trade_fee)
 *         past_trades = []
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_filled_event, __pyx_n_s_timestamp); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "hummingbot/strategy/strategy_base.pyx":170
 *                          market_name,
 *                          order_filled_event.timestamp,
 *                          order_filled_event.trade_fee)             # <<<<<<<<<<<<<<
 *         past_trades = []
 *         for market in self.active_markets:
 */
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_filled_event, __pyx_n_s_trade_fee); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = NULL;
  __pyx_t_11 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_11 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[9] = {__pyx_t_10, __pyx_t_3, __pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_v_market_name, __pyx_t_8, __pyx_t_9};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_11, 8+__pyx_t_11);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/strategy_base.pyx":162
 *         The trades are taken from the market event logs.
 *         """
 *         def event_to_trade(order_filled_event: OrderFilledEvent, market_name: str):             # <<<<<<<<<<<<<<
 *             return Trade(order_filled_event.trading_pair,
 *                          order_filled_event.trade_type,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.trades.__get__.event_to_trade", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":174
 *         for market in self.active_markets:
 *             event_logs = market.event_logs
 *             order_filled_events = list(filter(lambda e: isinstance(e, OrderFilledEvent), event_logs))             # <<<<<<<<<<<<<<
 *             past_trades += list(map(lambda ofe: event_to_trade(ofe, market.display_name), order_filled_events))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___2lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___2lambda = {"lambda", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___2lambda, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___2lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_e = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_e,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_e,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_e)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 174, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lambda") < 0)) __PYX_ERR(0, 174, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_e = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 174, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.trades.__get__.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, __pyx_v_e);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderFilledEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_e, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 174, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.trades.__get__.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":175
 *             event_logs = market.event_logs
 *             order_filled_events = list(filter(lambda e: isinstance(e, OrderFilledEvent), event_logs))
 *             past_trades += list(map(lambda ofe: event_to_trade(ofe, market.display_name), order_filled_events))             # <<<<<<<<<<<<<<
 * 
 *         return sorted(past_trades, key=lambda x: x.timestamp)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___3lambda1(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___3lambda1 = {"lambda1", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___3lambda1, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___3lambda1(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_ofe = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ofe,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_ofe,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_ofe)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 175, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lambda1") < 0)) __PYX_ERR(0, 175, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_ofe = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda1", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 175, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.trades.__get__.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda1(__pyx_self, __pyx_v_ofe);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_ofe) {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ *__pyx_cur_scope;
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda1", 0);
  __pyx_outer_scope = (struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_market)) { __Pyx_RaiseClosureNameError("market"); __PYX_ERR(0, 175, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_market, __pyx_n_s_display_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 175, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_v_event_to_trade)) { __Pyx_RaiseClosureNameError("event_to_trade"); __PYX_ERR(0, 175, __pyx_L1_error) }
  __pyx_t_2 = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___event_to_trade(__pyx_cur_scope->__pyx_v_event_to_trade, __pyx_v_ofe, ((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.trades.__get__.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":177
 *             past_trades += list(map(lambda ofe: event_to_trade(ofe, market.display_name), order_filled_events))
 * 
 *         return sorted(past_trades, key=lambda x: x.timestamp)             # <<<<<<<<<<<<<<
 * 
 *     def market_status_data_frame(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> pd.DataFrame:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___4lambda2(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___4lambda2 = {"lambda2", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___4lambda2, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___4lambda2(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_x = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda2 (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 177, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lambda2") < 0)) __PYX_ERR(0, 177, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_x = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda2", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 177, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.trades.__get__.lambda2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda2(__pyx_self, __pyx_v_x);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda2", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.trades.__get__.lambda2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":156
 *         self.logger().log(log_level, f"{msg} [clock={str(clock_timestamp)}]", **kwargs)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def trades(self) -> List[Trade]:
 *         """
 */

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades___get__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ *__pyx_cur_scope;
  PyObject *__pyx_v_past_trades = NULL;
  PyObject *__pyx_v_event_logs = NULL;
  PyObject *__pyx_v_order_filled_events = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ *)__pyx_tp_new_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__(__pyx_ptype_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 156, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }

  /* "hummingbot/strategy/strategy_base.pyx":162
 *         The trades are taken from the market event logs.
 *         """
 *         def event_to_trade(order_filled_event: OrderFilledEvent, market_name: str):             # <<<<<<<<<<<<<<
 *             return Trade(order_filled_event.trading_pair,
 *                          order_filled_event.trade_type,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order_filled_event, __pyx_n_s_OrderFilledEvent) < 0) __PYX_ERR(0, 162, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_market_name, __pyx_n_s_str) < 0) __PYX_ERR(0, 162, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___1event_to_trade, 0, __pyx_n_s_StrategyBase___get___locals_even, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__3)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_event_to_trade = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":171
 *                          order_filled_event.timestamp,
 *                          order_filled_event.trade_fee)
 *         past_trades = []             # <<<<<<<<<<<<<<
 *         for market in self.active_markets:
 *             event_logs = market.event_logs
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_past_trades = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":172
 *                          order_filled_event.trade_fee)
 *         past_trades = []
 *         for market in self.active_markets:             # <<<<<<<<<<<<<<
 *             event_logs = market.event_logs
 *             order_filled_events = list(filter(lambda e: isinstance(e, OrderFilledEvent), event_logs))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_active_markets); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 172, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 172, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 172, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 172, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 172, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 172, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_market);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_market, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":173
 *         past_trades = []
 *         for market in self.active_markets:
 *             event_logs = market.event_logs             # <<<<<<<<<<<<<<
 *             order_filled_events = list(filter(lambda e: isinstance(e, OrderFilledEvent), event_logs))
 *             past_trades += list(map(lambda ofe: event_to_trade(ofe, market.display_name), order_filled_events))
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_market, __pyx_n_s_event_logs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_event_logs, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":174
 *         for market in self.active_markets:
 *             event_logs = market.event_logs
 *             order_filled_events = list(filter(lambda e: isinstance(e, OrderFilledEvent), event_logs))             # <<<<<<<<<<<<<<
 *             past_trades += list(map(lambda ofe: event_to_trade(ofe, market.display_name), order_filled_events))
 * 
 */
    __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___2lambda, 0, __pyx_n_s_StrategyBase___get___locals_lamb, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_INCREF(__pyx_v_event_logs);
    __Pyx_GIVEREF(__pyx_v_event_logs);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_event_logs);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PySequence_ListKeepNew(__pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_order_filled_events, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":175
 *             event_logs = market.event_logs
 *             order_filled_events = list(filter(lambda e: isinstance(e, OrderFilledEvent), event_logs))
 *             past_trades += list(map(lambda ofe: event_to_trade(ofe, market.display_name), order_filled_events))             # <<<<<<<<<<<<<<
 * 
 *         return sorted(past_trades, key=lambda x: x.timestamp)
 */
    __pyx_t_5 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___3lambda1, 0, __pyx_n_s_StrategyBase___get___locals_lamb, ((PyObject*)__pyx_cur_scope), __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_order_filled_events);
    __Pyx_GIVEREF(__pyx_v_order_filled_events);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_order_filled_events);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_map, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PySequence_ListKeepNew(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_past_trades, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 175, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_past_trades, ((PyObject*)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":172
 *                          order_filled_event.trade_fee)
 *         past_trades = []
 *         for market in self.active_markets:             # <<<<<<<<<<<<<<
 *             event_logs = market.event_logs
 *             order_filled_events = list(filter(lambda e: isinstance(e, OrderFilledEvent), event_logs))
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":177
 *             past_trades += list(map(lambda ofe: event_to_trade(ofe, market.display_name), order_filled_events))
 * 
 *         return sorted(past_trades, key=lambda x: x.timestamp)             # <<<<<<<<<<<<<<
 * 
 *     def market_status_data_frame(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> pd.DataFrame:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_past_trades);
  __Pyx_GIVEREF(__pyx_v_past_trades);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_past_trades);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_7__get___4lambda2, 0, __pyx_n_s_StrategyBase___get___locals_lamb, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_key, __pyx_t_2) < 0) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_1, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/strategy_base.pyx":156
 *         self.logger().log(log_level, f"{msg} [clock={str(clock_timestamp)}]", **kwargs)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def trades(self) -> List[Trade]:
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.trades.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_past_trades);
  __Pyx_XDECREF(__pyx_v_event_logs);
  __Pyx_XDECREF(__pyx_v_order_filled_events);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":179
 *         return sorted(past_trades, key=lambda x: x.timestamp)
 * 
 *     def market_status_data_frame(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         cdef:
 *             ConnectorBase market
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_11market_status_data_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_11market_status_data_frame = {"market_status_data_frame", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_11market_status_data_frame, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_11market_status_data_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_market_trading_pair_tuples = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("market_status_data_frame (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_trading_pair_tuples,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_trading_pair_tuples,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_market_trading_pair_tuples)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 179, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "market_status_data_frame") < 0)) __PYX_ERR(0, 179, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_market_trading_pair_tuples = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("market_status_data_frame", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 179, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.market_status_data_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_10market_status_data_frame(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_trading_pair_tuples);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_10market_status_data_frame(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuples) {
  struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *__pyx_v_market = 0;
  PyObject *__pyx_v_trading_pair = 0;
  CYTHON_UNUSED PyObject *__pyx_v_base_asset = 0;
  CYTHON_UNUSED PyObject *__pyx_v_quote_asset = 0;
  PyObject *__pyx_v_bid_price = 0;
  PyObject *__pyx_v_ask_price = 0;
  PyObject *__pyx_v_markets_data = 0;
  PyObject *__pyx_v_markets_columns = 0;
  PyObject *__pyx_v_market_trading_pair_tuple = NULL;
  PyObject *__pyx_v_mid_price = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("market_status_data_frame", 0);

  /* "hummingbot/strategy/strategy_base.pyx":187
 *             object bid_price
 *             object ask_price
 *             list markets_data = []             # <<<<<<<<<<<<<<
 *             list markets_columns = ["Exchange", "Market", "Best Bid Price", "Best Ask Price", "Mid Price"]
 *         try:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 187, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_markets_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":188
 *             object ask_price
 *             list markets_data = []
 *             list markets_columns = ["Exchange", "Market", "Best Bid Price", "Best Ask Price", "Mid Price"]             # <<<<<<<<<<<<<<
 *         try:
 *             for market_trading_pair_tuple in market_trading_pair_tuples:
 */
  __pyx_t_1 = PyList_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_Exchange);
  __Pyx_GIVEREF(__pyx_n_u_Exchange);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_Exchange);
  __Pyx_INCREF(__pyx_n_u_Market);
  __Pyx_GIVEREF(__pyx_n_u_Market);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_Market);
  __Pyx_INCREF(__pyx_kp_u_Best_Bid_Price);
  __Pyx_GIVEREF(__pyx_kp_u_Best_Bid_Price);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_Best_Bid_Price);
  __Pyx_INCREF(__pyx_kp_u_Best_Ask_Price);
  __Pyx_GIVEREF(__pyx_kp_u_Best_Ask_Price);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_kp_u_Best_Ask_Price);
  __Pyx_INCREF(__pyx_kp_u_Mid_Price);
  __Pyx_GIVEREF(__pyx_kp_u_Mid_Price);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_Mid_Price);
  __pyx_v_markets_columns = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":189
 *             list markets_data = []
 *             list markets_columns = ["Exchange", "Market", "Best Bid Price", "Best Ask Price", "Mid Price"]
 *         try:             # <<<<<<<<<<<<<<
 *             for market_trading_pair_tuple in market_trading_pair_tuples:
 *                 market, trading_pair, base_asset, quote_asset = market_trading_pair_tuple
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "hummingbot/strategy/strategy_base.pyx":190
 *             list markets_columns = ["Exchange", "Market", "Best Bid Price", "Best Ask Price", "Mid Price"]
 *         try:
 *             for market_trading_pair_tuple in market_trading_pair_tuples:             # <<<<<<<<<<<<<<
 *                 market, trading_pair, base_asset, quote_asset = market_trading_pair_tuple
 *                 bid_price = market.get_price(trading_pair, False)
 */
      if (likely(PyList_CheckExact(__pyx_v_market_trading_pair_tuples)) || PyTuple_CheckExact(__pyx_v_market_trading_pair_tuples)) {
        __pyx_t_1 = __pyx_v_market_trading_pair_tuples; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
        __pyx_t_6 = NULL;
      } else {
        __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_market_trading_pair_tuples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 190, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 190, __pyx_L3_error)
      }
      for (;;) {
        if (likely(!__pyx_t_6)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 190, __pyx_L3_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 190, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 190, __pyx_L3_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 190, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_6(__pyx_t_1);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 190, __pyx_L3_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_v_market_trading_pair_tuple, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "hummingbot/strategy/strategy_base.pyx":191
 *         try:
 *             for market_trading_pair_tuple in market_trading_pair_tuples:
 *                 market, trading_pair, base_asset, quote_asset = market_trading_pair_tuple             # <<<<<<<<<<<<<<
 *                 bid_price = market.get_price(trading_pair, False)
 *                 ask_price = market.get_price(trading_pair, True)
 */
        if ((likely(PyTuple_CheckExact(__pyx_v_market_trading_pair_tuple))) || (PyList_CheckExact(__pyx_v_market_trading_pair_tuple))) {
          PyObject* sequence = __pyx_v_market_trading_pair_tuple;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 4)) {
            if (size > 4) __Pyx_RaiseTooManyValuesError(4);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 191, __pyx_L3_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_9 = PyTuple_GET_ITEM(sequence, 2); 
            __pyx_t_10 = PyTuple_GET_ITEM(sequence, 3); 
          } else {
            __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_9 = PyList_GET_ITEM(sequence, 2); 
            __pyx_t_10 = PyList_GET_ITEM(sequence, 3); 
          }
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_10);
          #else
          {
            Py_ssize_t i;
            PyObject** temps[4] = {&__pyx_t_7,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10};
            for (i=0; i < 4; i++) {
              PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 191, __pyx_L3_error)
              __Pyx_GOTREF(item);
              *(temps[i]) = item;
            }
          }
          #endif
        } else {
          Py_ssize_t index = -1;
          PyObject** temps[4] = {&__pyx_t_7,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10};
          __pyx_t_11 = PyObject_GetIter(__pyx_v_market_trading_pair_tuple); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 191, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11);
          for (index=0; index < 4; index++) {
            PyObject* item = __pyx_t_12(__pyx_t_11); if (unlikely(!item)) goto __pyx_L11_unpacking_failed;
            __Pyx_GOTREF(item);
            *(temps[index]) = item;
          }
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 4) < 0) __PYX_ERR(0, 191, __pyx_L3_error)
          __pyx_t_12 = NULL;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          goto __pyx_L12_unpacking_done;
          __pyx_L11_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_12 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 191, __pyx_L3_error)
          __pyx_L12_unpacking_done:;
        }
        if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase))))) __PYX_ERR(0, 191, __pyx_L3_error)
        if (!(likely(PyUnicode_CheckExact(__pyx_t_8))||((__pyx_t_8) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_8))) __PYX_ERR(0, 191, __pyx_L3_error)
        if (!(likely(PyUnicode_CheckExact(__pyx_t_9))||((__pyx_t_9) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_9))) __PYX_ERR(0, 191, __pyx_L3_error)
        if (!(likely(PyUnicode_CheckExact(__pyx_t_10))||((__pyx_t_10) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_10))) __PYX_ERR(0, 191, __pyx_L3_error)
        __Pyx_XDECREF_SET(__pyx_v_market, ((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_t_7));
        __pyx_t_7 = 0;
        __Pyx_XDECREF_SET(__pyx_v_trading_pair, ((PyObject*)__pyx_t_8));
        __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_v_base_asset, ((PyObject*)__pyx_t_9));
        __pyx_t_9 = 0;
        __Pyx_XDECREF_SET(__pyx_v_quote_asset, ((PyObject*)__pyx_t_10));
        __pyx_t_10 = 0;

        /* "hummingbot/strategy/strategy_base.pyx":192
 *             for market_trading_pair_tuple in market_trading_pair_tuples:
 *                 market, trading_pair, base_asset, quote_asset = market_trading_pair_tuple
 *                 bid_price = market.get_price(trading_pair, False)             # <<<<<<<<<<<<<<
 *                 ask_price = market.get_price(trading_pair, True)
 *                 mid_price = (bid_price + ask_price)/2
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_market), __pyx_n_s_get_price); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 192, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_v_trading_pair, Py_False};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_13, 2+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 192, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_XDECREF_SET(__pyx_v_bid_price, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "hummingbot/strategy/strategy_base.pyx":193
 *                 market, trading_pair, base_asset, quote_asset = market_trading_pair_tuple
 *                 bid_price = market.get_price(trading_pair, False)
 *                 ask_price = market.get_price(trading_pair, True)             # <<<<<<<<<<<<<<
 *                 mid_price = (bid_price + ask_price)/2
 *                 markets_data.append([
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_market), __pyx_n_s_get_price); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 193, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_v_trading_pair, Py_True};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_13, 2+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 193, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_XDECREF_SET(__pyx_v_ask_price, __pyx_t_10);
        __pyx_t_10 = 0;

        /* "hummingbot/strategy/strategy_base.pyx":194
 *                 bid_price = market.get_price(trading_pair, False)
 *                 ask_price = market.get_price(trading_pair, True)
 *                 mid_price = (bid_price + ask_price)/2             # <<<<<<<<<<<<<<
 *                 markets_data.append([
 *                     market.display_name,
 */
        __pyx_t_10 = PyNumber_Add(__pyx_v_bid_price, __pyx_v_ask_price); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 194, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_10, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 194, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF_SET(__pyx_v_mid_price, __pyx_t_9);
        __pyx_t_9 = 0;

        /* "hummingbot/strategy/strategy_base.pyx":196
 *                 mid_price = (bid_price + ask_price)/2
 *                 markets_data.append([
 *                     market.display_name,             # <<<<<<<<<<<<<<
 *                     trading_pair,
 *                     float(bid_price),
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_market), __pyx_n_s_display_name); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 196, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);

        /* "hummingbot/strategy/strategy_base.pyx":198
 *                     market.display_name,
 *                     trading_pair,
 *                     float(bid_price),             # <<<<<<<<<<<<<<
 *                     float(ask_price),
 *                     float(mid_price)
 */
        __pyx_t_10 = __Pyx_PyNumber_Float(__pyx_v_bid_price); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 198, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);

        /* "hummingbot/strategy/strategy_base.pyx":199
 *                     trading_pair,
 *                     float(bid_price),
 *                     float(ask_price),             # <<<<<<<<<<<<<<
 *                     float(mid_price)
 *                 ])
 */
        __pyx_t_8 = __Pyx_PyNumber_Float(__pyx_v_ask_price); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 199, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);

        /* "hummingbot/strategy/strategy_base.pyx":200
 *                     float(bid_price),
 *                     float(ask_price),
 *                     float(mid_price)             # <<<<<<<<<<<<<<
 *                 ])
 *             return pd.DataFrame(data=markets_data, columns=markets_columns)
 */
        __pyx_t_7 = __Pyx_PyNumber_Float(__pyx_v_mid_price); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 200, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_7);

        /* "hummingbot/strategy/strategy_base.pyx":195
 *                 ask_price = market.get_price(trading_pair, True)
 *                 mid_price = (bid_price + ask_price)/2
 *                 markets_data.append([             # <<<<<<<<<<<<<<
 *                     market.display_name,
 *                     trading_pair,
 */
        __pyx_t_11 = PyList_New(5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 195, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GIVEREF(__pyx_t_9);
        PyList_SET_ITEM(__pyx_t_11, 0, __pyx_t_9);
        __Pyx_INCREF(__pyx_v_trading_pair);
        __Pyx_GIVEREF(__pyx_v_trading_pair);
        PyList_SET_ITEM(__pyx_t_11, 1, __pyx_v_trading_pair);
        __Pyx_GIVEREF(__pyx_t_10);
        PyList_SET_ITEM(__pyx_t_11, 2, __pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_8);
        PyList_SET_ITEM(__pyx_t_11, 3, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_7);
        PyList_SET_ITEM(__pyx_t_11, 4, __pyx_t_7);
        __pyx_t_9 = 0;
        __pyx_t_10 = 0;
        __pyx_t_8 = 0;
        __pyx_t_7 = 0;
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_markets_data, __pyx_t_11); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 195, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "hummingbot/strategy/strategy_base.pyx":190
 *             list markets_columns = ["Exchange", "Market", "Best Bid Price", "Best Ask Price", "Mid Price"]
 *         try:
 *             for market_trading_pair_tuple in market_trading_pair_tuples:             # <<<<<<<<<<<<<<
 *                 market, trading_pair, base_asset, quote_asset = market_trading_pair_tuple
 *                 bid_price = market.get_price(trading_pair, False)
 */
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/strategy/strategy_base.pyx":202
 *                     float(mid_price)
 *                 ])
 *             return pd.DataFrame(data=markets_data, columns=markets_columns)             # <<<<<<<<<<<<<<
 * 
 *         except Exception:
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 202, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 202, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_data, __pyx_v_markets_data) < 0) __PYX_ERR(0, 202, __pyx_L3_error)
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_columns, __pyx_v_markets_columns) < 0) __PYX_ERR(0, 202, __pyx_L3_error)
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_11, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 202, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_r = __pyx_t_7;
      __pyx_t_7 = 0;
      goto __pyx_L7_try_return;

      /* "hummingbot/strategy/strategy_base.pyx":189
 *             list markets_data = []
 *             list markets_columns = ["Exchange", "Market", "Best Bid Price", "Best Ask Price", "Mid Price"]
 *         try:             # <<<<<<<<<<<<<<
 *             for market_trading_pair_tuple in market_trading_pair_tuples:
 *                 market, trading_pair, base_asset, quote_asset = market_trading_pair_tuple
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":204
 *             return pd.DataFrame(data=markets_data, columns=markets_columns)
 * 
 *         except Exception:             # <<<<<<<<<<<<<<
 *             self.logger().error("Error formatting market stats.", exc_info=True)
 * 
 */
    __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_13) {
      __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.market_status_data_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_1, &__pyx_t_11) < 0) __PYX_ERR(0, 204, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_11);

      /* "hummingbot/strategy/strategy_base.pyx":205
 * 
 *         except Exception:
 *             self.logger().error("Error formatting market stats.", exc_info=True)             # <<<<<<<<<<<<<<
 * 
 *     def wallet_balance_data_frame(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> pd.DataFrame:
 */
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 205, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_9 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_13 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_9, };
        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 205, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_error); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 205, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 205, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 205, __pyx_L5_except_error)
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_tuple__4, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 205, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "hummingbot/strategy/strategy_base.pyx":189
 *             list markets_data = []
 *             list markets_columns = ["Exchange", "Market", "Best Bid Price", "Best Ask Price", "Mid Price"]
 *         try:             # <<<<<<<<<<<<<<
 *             for market_trading_pair_tuple in market_trading_pair_tuples:
 *                 market, trading_pair, base_asset, quote_asset = market_trading_pair_tuple
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
  }

  /* "hummingbot/strategy/strategy_base.pyx":179
 *         return sorted(past_trades, key=lambda x: x.timestamp)
 * 
 *     def market_status_data_frame(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         cdef:
 *             ConnectorBase market
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.market_status_data_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_trading_pair);
  __Pyx_XDECREF(__pyx_v_base_asset);
  __Pyx_XDECREF(__pyx_v_quote_asset);
  __Pyx_XDECREF(__pyx_v_bid_price);
  __Pyx_XDECREF(__pyx_v_ask_price);
  __Pyx_XDECREF(__pyx_v_markets_data);
  __Pyx_XDECREF(__pyx_v_markets_columns);
  __Pyx_XDECREF(__pyx_v_market_trading_pair_tuple);
  __Pyx_XDECREF(__pyx_v_mid_price);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":207
 *             self.logger().error("Error formatting market stats.", exc_info=True)
 * 
 *     def wallet_balance_data_frame(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         cdef:
 *             ConnectorBase market
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_13wallet_balance_data_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_13wallet_balance_data_frame = {"wallet_balance_data_frame", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_13wallet_balance_data_frame, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_13wallet_balance_data_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_market_trading_pair_tuples = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("wallet_balance_data_frame (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_trading_pair_tuples,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_trading_pair_tuples,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_market_trading_pair_tuples)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 207, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "wallet_balance_data_frame") < 0)) __PYX_ERR(0, 207, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_market_trading_pair_tuples = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("wallet_balance_data_frame", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 207, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.wallet_balance_data_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_12wallet_balance_data_frame(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_trading_pair_tuples);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_12wallet_balance_data_frame(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuples) {
  struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *__pyx_v_market = 0;
  PyObject *__pyx_v_base_asset = 0;
  PyObject *__pyx_v_quote_asset = 0;
  double __pyx_v_base_balance;
  double __pyx_v_quote_balance;
  PyObject *__pyx_v_assets_data = 0;
  PyObject *__pyx_v_assets_columns = 0;
  PyObject *__pyx_v_market_trading_pair_tuple = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_trading_pair = NULL;
  double __pyx_v_available_base_balance;
  double __pyx_v_available_quote_balance;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_t_13;
  double __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("wallet_balance_data_frame", 0);

  /* "hummingbot/strategy/strategy_base.pyx":216
 *             double base_asset_conversion_rate
 *             double quote_asset_conversion_rate
 *             list assets_data = []             # <<<<<<<<<<<<<<
 *             list assets_columns = ["Exchange", "Asset", "Total Balance", "Available Balance"]
 *         try:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 216, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_assets_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":217
 *             double quote_asset_conversion_rate
 *             list assets_data = []
 *             list assets_columns = ["Exchange", "Asset", "Total Balance", "Available Balance"]             # <<<<<<<<<<<<<<
 *         try:
 *             for market_trading_pair_tuple in market_trading_pair_tuples:
 */
  __pyx_t_1 = PyList_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 217, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_Exchange);
  __Pyx_GIVEREF(__pyx_n_u_Exchange);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_Exchange);
  __Pyx_INCREF(__pyx_n_u_Asset);
  __Pyx_GIVEREF(__pyx_n_u_Asset);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_Asset);
  __Pyx_INCREF(__pyx_kp_u_Total_Balance);
  __Pyx_GIVEREF(__pyx_kp_u_Total_Balance);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_Total_Balance);
  __Pyx_INCREF(__pyx_kp_u_Available_Balance);
  __Pyx_GIVEREF(__pyx_kp_u_Available_Balance);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_kp_u_Available_Balance);
  __pyx_v_assets_columns = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":218
 *             list assets_data = []
 *             list assets_columns = ["Exchange", "Asset", "Total Balance", "Available Balance"]
 *         try:             # <<<<<<<<<<<<<<
 *             for market_trading_pair_tuple in market_trading_pair_tuples:
 *                 market, trading_pair, base_asset, quote_asset = market_trading_pair_tuple
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "hummingbot/strategy/strategy_base.pyx":219
 *             list assets_columns = ["Exchange", "Asset", "Total Balance", "Available Balance"]
 *         try:
 *             for market_trading_pair_tuple in market_trading_pair_tuples:             # <<<<<<<<<<<<<<
 *                 market, trading_pair, base_asset, quote_asset = market_trading_pair_tuple
 *                 base_balance = float(market.get_balance(base_asset))
 */
      if (likely(PyList_CheckExact(__pyx_v_market_trading_pair_tuples)) || PyTuple_CheckExact(__pyx_v_market_trading_pair_tuples)) {
        __pyx_t_1 = __pyx_v_market_trading_pair_tuples; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
        __pyx_t_6 = NULL;
      } else {
        __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_market_trading_pair_tuples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 219, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 219, __pyx_L3_error)
      }
      for (;;) {
        if (likely(!__pyx_t_6)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 219, __pyx_L3_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 219, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_7); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 219, __pyx_L3_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 219, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_6(__pyx_t_1);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 219, __pyx_L3_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_v_market_trading_pair_tuple, __pyx_t_7);
        __pyx_t_7 = 0;

        /* "hummingbot/strategy/strategy_base.pyx":220
 *         try:
 *             for market_trading_pair_tuple in market_trading_pair_tuples:
 *                 market, trading_pair, base_asset, quote_asset = market_trading_pair_tuple             # <<<<<<<<<<<<<<
 *                 base_balance = float(market.get_balance(base_asset))
 *                 quote_balance = float(market.get_balance(quote_asset))
 */
        if ((likely(PyTuple_CheckExact(__pyx_v_market_trading_pair_tuple))) || (PyList_CheckExact(__pyx_v_market_trading_pair_tuple))) {
          PyObject* sequence = __pyx_v_market_trading_pair_tuple;
          Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
          if (unlikely(size != 4)) {
            if (size > 4) __Pyx_RaiseTooManyValuesError(4);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(0, 220, __pyx_L3_error)
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
            __pyx_t_9 = PyTuple_GET_ITEM(sequence, 2); 
            __pyx_t_10 = PyTuple_GET_ITEM(sequence, 3); 
          } else {
            __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
            __pyx_t_9 = PyList_GET_ITEM(sequence, 2); 
            __pyx_t_10 = PyList_GET_ITEM(sequence, 3); 
          }
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(__pyx_t_10);
          #else
          {
            Py_ssize_t i;
            PyObject** temps[4] = {&__pyx_t_7,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10};
            for (i=0; i < 4; i++) {
              PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 220, __pyx_L3_error)
              __Pyx_GOTREF(item);
              *(temps[i]) = item;
            }
          }
          #endif
        } else {
          Py_ssize_t index = -1;
          PyObject** temps[4] = {&__pyx_t_7,&__pyx_t_8,&__pyx_t_9,&__pyx_t_10};
          __pyx_t_11 = PyObject_GetIter(__pyx_v_market_trading_pair_tuple); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 220, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_11);
          for (index=0; index < 4; index++) {
            PyObject* item = __pyx_t_12(__pyx_t_11); if (unlikely(!item)) goto __pyx_L11_unpacking_failed;
            __Pyx_GOTREF(item);
            *(temps[index]) = item;
          }
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_12(__pyx_t_11), 4) < 0) __PYX_ERR(0, 220, __pyx_L3_error)
          __pyx_t_12 = NULL;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          goto __pyx_L12_unpacking_done;
          __pyx_L11_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_12 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(0, 220, __pyx_L3_error)
          __pyx_L12_unpacking_done:;
        }
        if (!(likely(((__pyx_t_7) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_7, __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase))))) __PYX_ERR(0, 220, __pyx_L3_error)
        if (!(likely(PyUnicode_CheckExact(__pyx_t_9))||((__pyx_t_9) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_9))) __PYX_ERR(0, 220, __pyx_L3_error)
        if (!(likely(PyUnicode_CheckExact(__pyx_t_10))||((__pyx_t_10) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_10))) __PYX_ERR(0, 220, __pyx_L3_error)
        __Pyx_XDECREF_SET(__pyx_v_market, ((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_t_7));
        __pyx_t_7 = 0;
        __Pyx_XDECREF_SET(__pyx_v_trading_pair, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_XDECREF_SET(__pyx_v_base_asset, ((PyObject*)__pyx_t_9));
        __pyx_t_9 = 0;
        __Pyx_XDECREF_SET(__pyx_v_quote_asset, ((PyObject*)__pyx_t_10));
        __pyx_t_10 = 0;

        /* "hummingbot/strategy/strategy_base.pyx":221
 *             for market_trading_pair_tuple in market_trading_pair_tuples:
 *                 market, trading_pair, base_asset, quote_asset = market_trading_pair_tuple
 *                 base_balance = float(market.get_balance(base_asset))             # <<<<<<<<<<<<<<
 *                 quote_balance = float(market.get_balance(quote_asset))
 *                 available_base_balance = float(market.get_available_balance(base_asset))
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_market), __pyx_n_s_get_balance); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 221, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_base_asset};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 221, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __pyx_t_14 = __Pyx_PyObject_AsDouble(__pyx_t_10); if (unlikely(__pyx_t_14 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 221, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_v_base_balance = __pyx_t_14;

        /* "hummingbot/strategy/strategy_base.pyx":222
 *                 market, trading_pair, base_asset, quote_asset = market_trading_pair_tuple
 *                 base_balance = float(market.get_balance(base_asset))
 *                 quote_balance = float(market.get_balance(quote_asset))             # <<<<<<<<<<<<<<
 *                 available_base_balance = float(market.get_available_balance(base_asset))
 *                 available_quote_balance = float(market.get_available_balance(quote_asset))
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_market), __pyx_n_s_get_balance); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 222, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_quote_asset};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 222, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __pyx_t_14 = __Pyx_PyObject_AsDouble(__pyx_t_10); if (unlikely(__pyx_t_14 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 222, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_v_quote_balance = __pyx_t_14;

        /* "hummingbot/strategy/strategy_base.pyx":223
 *                 base_balance = float(market.get_balance(base_asset))
 *                 quote_balance = float(market.get_balance(quote_asset))
 *                 available_base_balance = float(market.get_available_balance(base_asset))             # <<<<<<<<<<<<<<
 *                 available_quote_balance = float(market.get_available_balance(quote_asset))
 *                 assets_data.extend([
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_market), __pyx_n_s_get_available_balance); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 223, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_base_asset};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 223, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __pyx_t_14 = __Pyx_PyObject_AsDouble(__pyx_t_10); if (unlikely(__pyx_t_14 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 223, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_v_available_base_balance = __pyx_t_14;

        /* "hummingbot/strategy/strategy_base.pyx":224
 *                 quote_balance = float(market.get_balance(quote_asset))
 *                 available_base_balance = float(market.get_available_balance(base_asset))
 *                 available_quote_balance = float(market.get_available_balance(quote_asset))             # <<<<<<<<<<<<<<
 *                 assets_data.extend([
 *                     [market.display_name, base_asset, base_balance, available_base_balance],
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_market), __pyx_n_s_get_available_balance); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 224, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = NULL;
        __pyx_t_13 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_13 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_quote_asset};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_13, 1+__pyx_t_13);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 224, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __pyx_t_14 = __Pyx_PyObject_AsDouble(__pyx_t_10); if (unlikely(__pyx_t_14 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 224, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_v_available_quote_balance = __pyx_t_14;

        /* "hummingbot/strategy/strategy_base.pyx":226
 *                 available_quote_balance = float(market.get_available_balance(quote_asset))
 *                 assets_data.extend([
 *                     [market.display_name, base_asset, base_balance, available_base_balance],             # <<<<<<<<<<<<<<
 *                     [market.display_name, quote_asset, quote_balance, available_quote_balance]
 *                 ])
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_market), __pyx_n_s_display_name); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 226, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = PyFloat_FromDouble(__pyx_v_base_balance); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 226, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = PyFloat_FromDouble(__pyx_v_available_base_balance); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 226, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_7 = PyList_New(4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 226, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_10);
        PyList_SET_ITEM(__pyx_t_7, 0, __pyx_t_10);
        __Pyx_INCREF(__pyx_v_base_asset);
        __Pyx_GIVEREF(__pyx_v_base_asset);
        PyList_SET_ITEM(__pyx_t_7, 1, __pyx_v_base_asset);
        __Pyx_GIVEREF(__pyx_t_9);
        PyList_SET_ITEM(__pyx_t_7, 2, __pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_8);
        PyList_SET_ITEM(__pyx_t_7, 3, __pyx_t_8);
        __pyx_t_10 = 0;
        __pyx_t_9 = 0;
        __pyx_t_8 = 0;

        /* "hummingbot/strategy/strategy_base.pyx":225
 *                 available_base_balance = float(market.get_available_balance(base_asset))
 *                 available_quote_balance = float(market.get_available_balance(quote_asset))
 *                 assets_data.extend([             # <<<<<<<<<<<<<<
 *                     [market.display_name, base_asset, base_balance, available_base_balance],
 *                     [market.display_name, quote_asset, quote_balance, available_quote_balance]
 */
        __pyx_t_15 = __Pyx_ListComp_Append(__pyx_v_assets_data, __pyx_t_7); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 225, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "hummingbot/strategy/strategy_base.pyx":227
 *                 assets_data.extend([
 *                     [market.display_name, base_asset, base_balance, available_base_balance],
 *                     [market.display_name, quote_asset, quote_balance, available_quote_balance]             # <<<<<<<<<<<<<<
 *                 ])
 * 
 */
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_market), __pyx_n_s_display_name); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 227, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PyFloat_FromDouble(__pyx_v_quote_balance); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 227, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = PyFloat_FromDouble(__pyx_v_available_quote_balance); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 227, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = PyList_New(4); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 227, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_7);
        PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_7);
        __Pyx_INCREF(__pyx_v_quote_asset);
        __Pyx_GIVEREF(__pyx_v_quote_asset);
        PyList_SET_ITEM(__pyx_t_10, 1, __pyx_v_quote_asset);
        __Pyx_GIVEREF(__pyx_t_8);
        PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_9);
        PyList_SET_ITEM(__pyx_t_10, 3, __pyx_t_9);
        __pyx_t_7 = 0;
        __pyx_t_8 = 0;
        __pyx_t_9 = 0;

        /* "hummingbot/strategy/strategy_base.pyx":225
 *                 available_base_balance = float(market.get_available_balance(base_asset))
 *                 available_quote_balance = float(market.get_available_balance(quote_asset))
 *                 assets_data.extend([             # <<<<<<<<<<<<<<
 *                     [market.display_name, base_asset, base_balance, available_base_balance],
 *                     [market.display_name, quote_asset, quote_balance, available_quote_balance]
 */
        __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_assets_data, __pyx_t_10); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 225, __pyx_L3_error)
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        (void)((__pyx_t_15 | __pyx_t_16));

        /* "hummingbot/strategy/strategy_base.pyx":219
 *             list assets_columns = ["Exchange", "Asset", "Total Balance", "Available Balance"]
 *         try:
 *             for market_trading_pair_tuple in market_trading_pair_tuples:             # <<<<<<<<<<<<<<
 *                 market, trading_pair, base_asset, quote_asset = market_trading_pair_tuple
 *                 base_balance = float(market.get_balance(base_asset))
 */
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/strategy/strategy_base.pyx":230
 *                 ])
 * 
 *             return pd.DataFrame(data=assets_data, columns=assets_columns)             # <<<<<<<<<<<<<<
 * 
 *         except Exception:
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 230, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_data, __pyx_v_assets_data) < 0) __PYX_ERR(0, 230, __pyx_L3_error)
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_columns, __pyx_v_assets_columns) < 0) __PYX_ERR(0, 230, __pyx_L3_error)
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 230, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_r = __pyx_t_9;
      __pyx_t_9 = 0;
      goto __pyx_L7_try_return;

      /* "hummingbot/strategy/strategy_base.pyx":218
 *             list assets_data = []
 *             list assets_columns = ["Exchange", "Asset", "Total Balance", "Available Balance"]
 *         try:             # <<<<<<<<<<<<<<
 *             for market_trading_pair_tuple in market_trading_pair_tuples:
 *                 market, trading_pair, base_asset, quote_asset = market_trading_pair_tuple
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":232
 *             return pd.DataFrame(data=assets_data, columns=assets_columns)
 * 
 *         except Exception:             # <<<<<<<<<<<<<<
 *             self.logger().error("Error formatting wallet balance stats.", exc_info=True)
 * 
 */
    __pyx_t_13 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_13) {
      __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.wallet_balance_data_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_1, &__pyx_t_10) < 0) __PYX_ERR(0, 232, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_10);

      /* "hummingbot/strategy/strategy_base.pyx":233
 * 
 *         except Exception:
 *             self.logger().error("Error formatting wallet balance stats.", exc_info=True)             # <<<<<<<<<<<<<<
 * 
 *     def balance_warning(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> List[str]:
 */
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 233, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_11 = NULL;
      __pyx_t_13 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_7);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_7, function);
          __pyx_t_13 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_11, };
        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 233, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_error); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 233, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 233, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 233, __pyx_L5_except_error)
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__5, __pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 233, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "hummingbot/strategy/strategy_base.pyx":218
 *             list assets_data = []
 *             list assets_columns = ["Exchange", "Asset", "Total Balance", "Available Balance"]
 *         try:             # <<<<<<<<<<<<<<
 *             for market_trading_pair_tuple in market_trading_pair_tuples:
 *                 market, trading_pair, base_asset, quote_asset = market_trading_pair_tuple
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
  }

  /* "hummingbot/strategy/strategy_base.pyx":207
 *             self.logger().error("Error formatting market stats.", exc_info=True)
 * 
 *     def wallet_balance_data_frame(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         cdef:
 *             ConnectorBase market
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.wallet_balance_data_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_base_asset);
  __Pyx_XDECREF(__pyx_v_quote_asset);
  __Pyx_XDECREF(__pyx_v_assets_data);
  __Pyx_XDECREF(__pyx_v_assets_columns);
  __Pyx_XDECREF(__pyx_v_market_trading_pair_tuple);
  __Pyx_XDECREF(__pyx_v_trading_pair);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":235
 *             self.logger().error("Error formatting wallet balance stats.", exc_info=True)
 * 
 *     def balance_warning(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> List[str]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             double base_balance
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_15balance_warning(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_15balance_warning = {"balance_warning", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_15balance_warning, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_15balance_warning(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_market_trading_pair_tuples = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("balance_warning (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_trading_pair_tuples,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_trading_pair_tuples,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_market_trading_pair_tuples)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 235, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "balance_warning") < 0)) __PYX_ERR(0, 235, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_market_trading_pair_tuples = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("balance_warning", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 235, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.balance_warning", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_14balance_warning(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_trading_pair_tuples);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_14balance_warning(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuples) {
  double __pyx_v_base_balance;
  double __pyx_v_quote_balance;
  PyObject *__pyx_v_warning_lines = 0;
  PyObject *__pyx_v_market_trading_pair_tuple = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  double __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  Py_ssize_t __pyx_t_13;
  Py_UCS4 __pyx_t_14;
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("balance_warning", 0);

  /* "hummingbot/strategy/strategy_base.pyx":239
 *             double base_balance
 *             double quote_balance
 *             list warning_lines = []             # <<<<<<<<<<<<<<
 *         # Add warning lines on null balances.
 *         # TO-DO: $Use min order size logic to replace the hard-coded 0.0001 value for each asset.
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 239, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_warning_lines = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":242
 *         # Add warning lines on null balances.
 *         # TO-DO: $Use min order size logic to replace the hard-coded 0.0001 value for each asset.
 *         for market_trading_pair_tuple in market_trading_pair_tuples:             # <<<<<<<<<<<<<<
 *             base_balance = market_trading_pair_tuple.market.get_balance(market_trading_pair_tuple.base_asset)
 *             quote_balance = market_trading_pair_tuple.market.get_balance(market_trading_pair_tuple.quote_asset)
 */
  if (likely(PyList_CheckExact(__pyx_v_market_trading_pair_tuples)) || PyTuple_CheckExact(__pyx_v_market_trading_pair_tuples)) {
    __pyx_t_1 = __pyx_v_market_trading_pair_tuples; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_market_trading_pair_tuples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 242, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 242, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 242, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 242, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 242, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 242, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 242, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_market_trading_pair_tuple, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":243
 *         # TO-DO: $Use min order size logic to replace the hard-coded 0.0001 value for each asset.
 *         for market_trading_pair_tuple in market_trading_pair_tuples:
 *             base_balance = market_trading_pair_tuple.market.get_balance(market_trading_pair_tuple.base_asset)             # <<<<<<<<<<<<<<
 *             quote_balance = market_trading_pair_tuple.market.get_balance(market_trading_pair_tuple.quote_asset)
 *             if base_balance <= Decimal("0.0001") and not isinstance(market_trading_pair_tuple.market, DerivativeBase):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get_balance); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_trading_pair_tuple, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_5};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 243, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_base_balance = __pyx_t_9;

    /* "hummingbot/strategy/strategy_base.pyx":244
 *         for market_trading_pair_tuple in market_trading_pair_tuples:
 *             base_balance = market_trading_pair_tuple.market.get_balance(market_trading_pair_tuple.base_asset)
 *             quote_balance = market_trading_pair_tuple.market.get_balance(market_trading_pair_tuple.quote_asset)             # <<<<<<<<<<<<<<
 *             if base_balance <= Decimal("0.0001") and not isinstance(market_trading_pair_tuple.market, DerivativeBase):
 *                 warning_lines.append(f"  {market_trading_pair_tuple.market.name} market "
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_get_balance); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_trading_pair_tuple, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_6};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 244, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 244, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_quote_balance = __pyx_t_9;

    /* "hummingbot/strategy/strategy_base.pyx":245
 *             base_balance = market_trading_pair_tuple.market.get_balance(market_trading_pair_tuple.base_asset)
 *             quote_balance = market_trading_pair_tuple.market.get_balance(market_trading_pair_tuple.quote_asset)
 *             if base_balance <= Decimal("0.0001") and not isinstance(market_trading_pair_tuple.market, DerivativeBase):             # <<<<<<<<<<<<<<
 *                 warning_lines.append(f"  {market_trading_pair_tuple.market.name} market "
 *                                      f"{market_trading_pair_tuple.base_asset} balance is too low. Cannot place order.")
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_base_balance); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_kp_u_0_0001};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 245, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_t_5, Py_LE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_11) {
    } else {
      __pyx_t_10 = __pyx_t_11;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_DerivativeBase); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = PyObject_IsInstance(__pyx_t_6, __pyx_t_5); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 245, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_12 = ((!(__pyx_t_11 != 0)) != 0);
    __pyx_t_10 = __pyx_t_12;
    __pyx_L6_bool_binop_done:;
    if (__pyx_t_10) {

      /* "hummingbot/strategy/strategy_base.pyx":246
 *             quote_balance = market_trading_pair_tuple.market.get_balance(market_trading_pair_tuple.quote_asset)
 *             if base_balance <= Decimal("0.0001") and not isinstance(market_trading_pair_tuple.market, DerivativeBase):
 *                 warning_lines.append(f"  {market_trading_pair_tuple.market.name} market "             # <<<<<<<<<<<<<<
 *                                      f"{market_trading_pair_tuple.base_asset} balance is too low. Cannot place order.")
 *             if quote_balance <= Decimal("0.0001"):
 */
      __pyx_t_5 = PyTuple_New(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 246, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = 0;
      __pyx_t_14 = 127;
      __Pyx_INCREF(__pyx_kp_u__6);
      __pyx_t_13 += 2;
      __Pyx_GIVEREF(__pyx_kp_u__6);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u__6);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 246, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 246, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 246, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_14;
      __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_kp_u_market_2);
      __pyx_t_13 += 8;
      __Pyx_GIVEREF(__pyx_kp_u_market_2);
      PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_market_2);

      /* "hummingbot/strategy/strategy_base.pyx":247
 *             if base_balance <= Decimal("0.0001") and not isinstance(market_trading_pair_tuple.market, DerivativeBase):
 *                 warning_lines.append(f"  {market_trading_pair_tuple.market.name} market "
 *                                      f"{market_trading_pair_tuple.base_asset} balance is too low. Cannot place order.")             # <<<<<<<<<<<<<<
 *             if quote_balance <= Decimal("0.0001"):
 *                 warning_lines.append(f"  {market_trading_pair_tuple.market.name} market "
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_trading_pair_tuple, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 247, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 247, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
      __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_balance_is_too_low_Cannot_place);
      __pyx_t_13 += 40;
      __Pyx_GIVEREF(__pyx_kp_u_balance_is_too_low_Cannot_place);
      PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_kp_u_balance_is_too_low_Cannot_place);

      /* "hummingbot/strategy/strategy_base.pyx":246
 *             quote_balance = market_trading_pair_tuple.market.get_balance(market_trading_pair_tuple.quote_asset)
 *             if base_balance <= Decimal("0.0001") and not isinstance(market_trading_pair_tuple.market, DerivativeBase):
 *                 warning_lines.append(f"  {market_trading_pair_tuple.market.name} market "             # <<<<<<<<<<<<<<
 *                                      f"{market_trading_pair_tuple.base_asset} balance is too low. Cannot place order.")
 *             if quote_balance <= Decimal("0.0001"):
 */
      __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_5, 5, __pyx_t_13, __pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 246, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_warning_lines, __pyx_t_4); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 246, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "hummingbot/strategy/strategy_base.pyx":245
 *             base_balance = market_trading_pair_tuple.market.get_balance(market_trading_pair_tuple.base_asset)
 *             quote_balance = market_trading_pair_tuple.market.get_balance(market_trading_pair_tuple.quote_asset)
 *             if base_balance <= Decimal("0.0001") and not isinstance(market_trading_pair_tuple.market, DerivativeBase):             # <<<<<<<<<<<<<<
 *                 warning_lines.append(f"  {market_trading_pair_tuple.market.name} market "
 *                                      f"{market_trading_pair_tuple.base_asset} balance is too low. Cannot place order.")
 */
    }

    /* "hummingbot/strategy/strategy_base.pyx":248
 *                 warning_lines.append(f"  {market_trading_pair_tuple.market.name} market "
 *                                      f"{market_trading_pair_tuple.base_asset} balance is too low. Cannot place order.")
 *             if quote_balance <= Decimal("0.0001"):             # <<<<<<<<<<<<<<
 *                 warning_lines.append(f"  {market_trading_pair_tuple.market.name} market "
 *                                      f"{market_trading_pair_tuple.quote_asset} balance is too low. Cannot place order.")
 */
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_quote_balance); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_kp_u_0_0001};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 248, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_t_5, Py_LE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 248, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_10) {

      /* "hummingbot/strategy/strategy_base.pyx":249
 *                                      f"{market_trading_pair_tuple.base_asset} balance is too low. Cannot place order.")
 *             if quote_balance <= Decimal("0.0001"):
 *                 warning_lines.append(f"  {market_trading_pair_tuple.market.name} market "             # <<<<<<<<<<<<<<
 *                                      f"{market_trading_pair_tuple.quote_asset} balance is too low. Cannot place order.")
 *         return warning_lines
 */
      __pyx_t_6 = PyTuple_New(5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_13 = 0;
      __pyx_t_14 = 127;
      __Pyx_INCREF(__pyx_kp_u__6);
      __pyx_t_13 += 2;
      __Pyx_GIVEREF(__pyx_kp_u__6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u__6);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_14;
      __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
      __pyx_t_5 = 0;
      __Pyx_INCREF(__pyx_kp_u_market_2);
      __pyx_t_13 += 8;
      __Pyx_GIVEREF(__pyx_kp_u_market_2);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u_market_2);

      /* "hummingbot/strategy/strategy_base.pyx":250
 *             if quote_balance <= Decimal("0.0001"):
 *                 warning_lines.append(f"  {market_trading_pair_tuple.market.name} market "
 *                                      f"{market_trading_pair_tuple.quote_asset} balance is too low. Cannot place order.")             # <<<<<<<<<<<<<<
 *         return warning_lines
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_trading_pair_tuple, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 250, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 250, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
      __pyx_t_13 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_balance_is_too_low_Cannot_place);
      __pyx_t_13 += 40;
      __Pyx_GIVEREF(__pyx_kp_u_balance_is_too_low_Cannot_place);
      PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_kp_u_balance_is_too_low_Cannot_place);

      /* "hummingbot/strategy/strategy_base.pyx":249
 *                                      f"{market_trading_pair_tuple.base_asset} balance is too low. Cannot place order.")
 *             if quote_balance <= Decimal("0.0001"):
 *                 warning_lines.append(f"  {market_trading_pair_tuple.market.name} market "             # <<<<<<<<<<<<<<
 *                                      f"{market_trading_pair_tuple.quote_asset} balance is too low. Cannot place order.")
 *         return warning_lines
 */
      __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_6, 5, __pyx_t_13, __pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 249, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_warning_lines, __pyx_t_4); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 249, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "hummingbot/strategy/strategy_base.pyx":248
 *                 warning_lines.append(f"  {market_trading_pair_tuple.market.name} market "
 *                                      f"{market_trading_pair_tuple.base_asset} balance is too low. Cannot place order.")
 *             if quote_balance <= Decimal("0.0001"):             # <<<<<<<<<<<<<<
 *                 warning_lines.append(f"  {market_trading_pair_tuple.market.name} market "
 *                                      f"{market_trading_pair_tuple.quote_asset} balance is too low. Cannot place order.")
 */
    }

    /* "hummingbot/strategy/strategy_base.pyx":242
 *         # Add warning lines on null balances.
 *         # TO-DO: $Use min order size logic to replace the hard-coded 0.0001 value for each asset.
 *         for market_trading_pair_tuple in market_trading_pair_tuples:             # <<<<<<<<<<<<<<
 *             base_balance = market_trading_pair_tuple.market.get_balance(market_trading_pair_tuple.base_asset)
 *             quote_balance = market_trading_pair_tuple.market.get_balance(market_trading_pair_tuple.quote_asset)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":251
 *                 warning_lines.append(f"  {market_trading_pair_tuple.market.name} market "
 *                                      f"{market_trading_pair_tuple.quote_asset} balance is too low. Cannot place order.")
 *         return warning_lines             # <<<<<<<<<<<<<<
 * 
 *     def network_warning(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> List[str]:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_warning_lines);
  __pyx_r = __pyx_v_warning_lines;
  goto __pyx_L0;

  /* "hummingbot/strategy/strategy_base.pyx":235
 *             self.logger().error("Error formatting wallet balance stats.", exc_info=True)
 * 
 *     def balance_warning(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> List[str]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             double base_balance
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.balance_warning", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_warning_lines);
  __Pyx_XDECREF(__pyx_v_market_trading_pair_tuple);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":253
 *         return warning_lines
 * 
 *     def network_warning(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> List[str]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list warning_lines = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_17network_warning(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_17network_warning = {"network_warning", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_17network_warning, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_17network_warning(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_market_trading_pair_tuples = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("network_warning (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_trading_pair_tuples,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_trading_pair_tuples,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_market_trading_pair_tuples)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 253, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "network_warning") < 0)) __PYX_ERR(0, 253, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_market_trading_pair_tuples = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("network_warning", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 253, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.network_warning", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_16network_warning(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_trading_pair_tuples);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_16network_warning(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuples) {
  PyObject *__pyx_v_warning_lines = 0;
  PyObject *__pyx_v_trading_pairs = 0;
  PyObject *__pyx_7genexpr__pyx_v_market_trading_pair_tuple = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_market_trading_pair_tuple = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_UCS4 __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("network_warning", 0);

  /* "hummingbot/strategy/strategy_base.pyx":255
 *     def network_warning(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> List[str]:
 *         cdef:
 *             list warning_lines = []             # <<<<<<<<<<<<<<
 *             str trading_pairs
 *         if not all([market_trading_pair_tuple.market.network_status is NetworkStatus.CONNECTED for
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_warning_lines = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":257
 *             list warning_lines = []
 *             str trading_pairs
 *         if not all([market_trading_pair_tuple.market.network_status is NetworkStatus.CONNECTED for             # <<<<<<<<<<<<<<
 *                     market_trading_pair_tuple in market_trading_pair_tuples]):
 *             trading_pairs = " // ".join([market_trading_pair_tuple.trading_pair for market_trading_pair_tuple in market_trading_pair_tuples])
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 257, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "hummingbot/strategy/strategy_base.pyx":258
 *             str trading_pairs
 *         if not all([market_trading_pair_tuple.market.network_status is NetworkStatus.CONNECTED for
 *                     market_trading_pair_tuple in market_trading_pair_tuples]):             # <<<<<<<<<<<<<<
 *             trading_pairs = " // ".join([market_trading_pair_tuple.trading_pair for market_trading_pair_tuple in market_trading_pair_tuples])
 *             warning_lines.extend([
 */
    if (likely(PyList_CheckExact(__pyx_v_market_trading_pair_tuples)) || PyTuple_CheckExact(__pyx_v_market_trading_pair_tuples)) {
      __pyx_t_2 = __pyx_v_market_trading_pair_tuples; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_market_trading_pair_tuples); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 258, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 258, __pyx_L6_error)
    }
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 258, __pyx_L6_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 258, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 258, __pyx_L6_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 258, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_4(__pyx_t_2);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 258, __pyx_L6_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_market_trading_pair_tuple, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "hummingbot/strategy/strategy_base.pyx":257
 *             list warning_lines = []
 *             str trading_pairs
 *         if not all([market_trading_pair_tuple.market.network_status is NetworkStatus.CONNECTED for             # <<<<<<<<<<<<<<
 *                     market_trading_pair_tuple in market_trading_pair_tuples]):
 *             trading_pairs = " // ".join([market_trading_pair_tuple.trading_pair for market_trading_pair_tuple in market_trading_pair_tuples])
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_7genexpr__pyx_v_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 257, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_network_status); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 257, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 257, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_CONNECTED); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 257, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = (__pyx_t_6 == __pyx_t_7);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyBool_FromLong(__pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 257, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_7);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 257, __pyx_L6_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_market_trading_pair_tuple); __pyx_7genexpr__pyx_v_market_trading_pair_tuple = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L6_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_market_trading_pair_tuple); __pyx_7genexpr__pyx_v_market_trading_pair_tuple = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_all, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 257, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_9 = ((!__pyx_t_8) != 0);
  if (__pyx_t_9) {

    /* "hummingbot/strategy/strategy_base.pyx":259
 *         if not all([market_trading_pair_tuple.market.network_status is NetworkStatus.CONNECTED for
 *                     market_trading_pair_tuple in market_trading_pair_tuples]):
 *             trading_pairs = " // ".join([market_trading_pair_tuple.trading_pair for market_trading_pair_tuple in market_trading_pair_tuples])             # <<<<<<<<<<<<<<
 *             warning_lines.extend([
 *                 f"  Markets are offline for the {trading_pairs} pair. Continued trading "
 */
    { /* enter inner scope */
      __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 259, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (likely(PyList_CheckExact(__pyx_v_market_trading_pair_tuples)) || PyTuple_CheckExact(__pyx_v_market_trading_pair_tuples)) {
        __pyx_t_1 = __pyx_v_market_trading_pair_tuples; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
        __pyx_t_4 = NULL;
      } else {
        __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_market_trading_pair_tuples); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 259, __pyx_L12_error)
      }
      for (;;) {
        if (likely(!__pyx_t_4)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 259, __pyx_L12_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 259, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          } else {
            if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_7 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_7); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 259, __pyx_L12_error)
            #else
            __pyx_t_7 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 259, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_7);
            #endif
          }
        } else {
          __pyx_t_7 = __pyx_t_4(__pyx_t_1);
          if (unlikely(!__pyx_t_7)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 259, __pyx_L12_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_7);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_market_trading_pair_tuple, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr1__pyx_v_market_trading_pair_tuple, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 259, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 259, __pyx_L12_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_market_trading_pair_tuple); __pyx_8genexpr1__pyx_v_market_trading_pair_tuple = 0;
      goto __pyx_L15_exit_scope;
      __pyx_L12_error:;
      __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_market_trading_pair_tuple); __pyx_8genexpr1__pyx_v_market_trading_pair_tuple = 0;
      goto __pyx_L1_error;
      __pyx_L15_exit_scope:;
    } /* exit inner scope */
    __pyx_t_1 = PyUnicode_Join(__pyx_kp_u__7, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_trading_pairs = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":261
 *             trading_pairs = " // ".join([market_trading_pair_tuple.trading_pair for market_trading_pair_tuple in market_trading_pair_tuples])
 *             warning_lines.extend([
 *                 f"  Markets are offline for the {trading_pairs} pair. Continued trading "             # <<<<<<<<<<<<<<
 *                 f"with these markets may be dangerous.",
 *                 ""
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_10 = 127;
    __Pyx_INCREF(__pyx_kp_u_Markets_are_offline_for_the);
    __pyx_t_3 += 30;
    __Pyx_GIVEREF(__pyx_kp_u_Markets_are_offline_for_the);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Markets_are_offline_for_the);
    __pyx_t_2 = __Pyx_PyUnicode_Unicode(__pyx_v_trading_pairs); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_10;
    __pyx_t_3 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_kp_u_pair_Continued_trading_with_the);
    __pyx_t_3 += 61;
    __Pyx_GIVEREF(__pyx_kp_u_pair_Continued_trading_with_the);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_pair_Continued_trading_with_the);
    __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_3, __pyx_t_10); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":260
 *                     market_trading_pair_tuple in market_trading_pair_tuples]):
 *             trading_pairs = " // ".join([market_trading_pair_tuple.trading_pair for market_trading_pair_tuple in market_trading_pair_tuples])
 *             warning_lines.extend([             # <<<<<<<<<<<<<<
 *                 f"  Markets are offline for the {trading_pairs} pair. Continued trading "
 *                 f"with these markets may be dangerous.",
 */
    __pyx_t_11 = __Pyx_ListComp_Append(__pyx_v_warning_lines, __pyx_t_2); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 260, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_warning_lines, __pyx_kp_u__8); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 260, __pyx_L1_error)
    (void)((__pyx_t_11 | __pyx_t_12));

    /* "hummingbot/strategy/strategy_base.pyx":257
 *             list warning_lines = []
 *             str trading_pairs
 *         if not all([market_trading_pair_tuple.market.network_status is NetworkStatus.CONNECTED for             # <<<<<<<<<<<<<<
 *                     market_trading_pair_tuple in market_trading_pair_tuples]):
 *             trading_pairs = " // ".join([market_trading_pair_tuple.trading_pair for market_trading_pair_tuple in market_trading_pair_tuples])
 */
  }

  /* "hummingbot/strategy/strategy_base.pyx":265
 *                 ""
 *             ])
 *         return warning_lines             # <<<<<<<<<<<<<<
 * 
 *     cdef c_start(self, Clock clock, double timestamp):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_warning_lines);
  __pyx_r = __pyx_v_warning_lines;
  goto __pyx_L0;

  /* "hummingbot/strategy/strategy_base.pyx":253
 *         return warning_lines
 * 
 *     def network_warning(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> List[str]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list warning_lines = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.network_warning", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_warning_lines);
  __Pyx_XDECREF(__pyx_v_trading_pairs);
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_market_trading_pair_tuple);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_market_trading_pair_tuple);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":267
 *         return warning_lines
 * 
 *     cdef c_start(self, Clock clock, double timestamp):             # <<<<<<<<<<<<<<
 *         TimeIterator.c_start(self, clock, timestamp)
 *         self._sb_order_tracker.c_start(clock, timestamp)
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_start(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, struct __pyx_obj_10hummingbot_4core_5clock_Clock *__pyx_v_clock, double __pyx_v_timestamp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_start", 0);

  /* "hummingbot/strategy/strategy_base.pyx":268
 * 
 *     cdef c_start(self, Clock clock, double timestamp):
 *         TimeIterator.c_start(self, clock, timestamp)             # <<<<<<<<<<<<<<
 *         self._sb_order_tracker.c_start(clock, timestamp)
 * 
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator->c_start(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self), __pyx_v_clock, __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":269
 *     cdef c_start(self, Clock clock, double timestamp):
 *         TimeIterator.c_start(self, clock, timestamp)
 *         self._sb_order_tracker.c_start(clock, timestamp)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_tick(self, double timestamp):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->_sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_start(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self->_sb_order_tracker), __pyx_v_clock, __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":267
 *         return warning_lines
 * 
 *     cdef c_start(self, Clock clock, double timestamp):             # <<<<<<<<<<<<<<
 *         TimeIterator.c_start(self, clock, timestamp)
 *         self._sb_order_tracker.c_start(clock, timestamp)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.c_start", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":271
 *         self._sb_order_tracker.c_start(clock, timestamp)
 * 
 *     cdef c_tick(self, double timestamp):             # <<<<<<<<<<<<<<
 *         TimeIterator.c_tick(self, timestamp)
 *         self._sb_order_tracker.c_tick(timestamp)
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_tick(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, double __pyx_v_timestamp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_tick", 0);

  /* "hummingbot/strategy/strategy_base.pyx":272
 * 
 *     cdef c_tick(self, double timestamp):
 *         TimeIterator.c_tick(self, timestamp)             # <<<<<<<<<<<<<<
 *         self._sb_order_tracker.c_tick(timestamp)
 * 
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator->c_tick(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self), __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":273
 *     cdef c_tick(self, double timestamp):
 *         TimeIterator.c_tick(self, timestamp)
 *         self._sb_order_tracker.c_tick(timestamp)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_stop(self, Clock clock):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->_sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_tick(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self->_sb_order_tracker), __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 273, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":271
 *         self._sb_order_tracker.c_start(clock, timestamp)
 * 
 *     cdef c_tick(self, double timestamp):             # <<<<<<<<<<<<<<
 *         TimeIterator.c_tick(self, timestamp)
 *         self._sb_order_tracker.c_tick(timestamp)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.c_tick", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":275
 *         self._sb_order_tracker.c_tick(timestamp)
 * 
 *     cdef c_stop(self, Clock clock):             # <<<<<<<<<<<<<<
 *         TimeIterator.c_stop(self, clock)
 *         self._sb_order_tracker.c_stop(clock)
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_stop(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, struct __pyx_obj_10hummingbot_4core_5clock_Clock *__pyx_v_clock) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_stop", 0);

  /* "hummingbot/strategy/strategy_base.pyx":276
 * 
 *     cdef c_stop(self, Clock clock):
 *         TimeIterator.c_stop(self, clock)             # <<<<<<<<<<<<<<
 *         self._sb_order_tracker.c_stop(clock)
 *         self.c_remove_markets(list(self._sb_markets))
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator->c_stop(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self), __pyx_v_clock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":277
 *     cdef c_stop(self, Clock clock):
 *         TimeIterator.c_stop(self, clock)
 *         self._sb_order_tracker.c_stop(clock)             # <<<<<<<<<<<<<<
 *         self.c_remove_markets(list(self._sb_markets))
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->_sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_stop(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self->_sb_order_tracker), __pyx_v_clock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":278
 *         TimeIterator.c_stop(self, clock)
 *         self._sb_order_tracker.c_stop(clock)
 *         self.c_remove_markets(list(self._sb_markets))             # <<<<<<<<<<<<<<
 * 
 *     cdef c_add_markets(self, list markets):
 */
  __pyx_t_1 = PySequence_List(__pyx_v_self->_sb_markets); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_remove_markets(__pyx_v_self, ((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":275
 *         self._sb_order_tracker.c_tick(timestamp)
 * 
 *     cdef c_stop(self, Clock clock):             # <<<<<<<<<<<<<<
 *         TimeIterator.c_stop(self, clock)
 *         self._sb_order_tracker.c_stop(clock)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.c_stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":280
 *         self.c_remove_markets(list(self._sb_markets))
 * 
 *     cdef c_add_markets(self, list markets):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ConnectorBase typed_market
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_add_markets(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_markets) {
  struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *__pyx_v_typed_market = 0;
  PyObject *__pyx_v_market = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int64_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_add_markets", 0);

  /* "hummingbot/strategy/strategy_base.pyx":284
 *             ConnectorBase typed_market
 * 
 *         for market in markets:             # <<<<<<<<<<<<<<
 *             typed_market = market
 *             typed_market.c_add_listener(self.BUY_ORDER_CREATED_EVENT_TAG, self._sb_create_buy_order_listener)
 */
  if (unlikely(__pyx_v_markets == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 284, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_markets; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 284, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 284, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_market, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":285
 * 
 *         for market in markets:
 *             typed_market = market             # <<<<<<<<<<<<<<
 *             typed_market.c_add_listener(self.BUY_ORDER_CREATED_EVENT_TAG, self._sb_create_buy_order_listener)
 *             typed_market.c_add_listener(self.SELL_ORDER_CREATED_EVENT_TAG, self._sb_create_sell_order_listener)
 */
    if (!(likely(((__pyx_v_market) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_market, __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase))))) __PYX_ERR(0, 285, __pyx_L1_error)
    __pyx_t_3 = __pyx_v_market;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_typed_market, ((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":286
 *         for market in markets:
 *             typed_market = market
 *             typed_market.c_add_listener(self.BUY_ORDER_CREATED_EVENT_TAG, self._sb_create_buy_order_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_add_listener(self.SELL_ORDER_CREATED_EVENT_TAG, self._sb_create_sell_order_listener)
 *             typed_market.c_add_listener(self.ORDER_FILLED_EVENT_TAG, self._sb_fill_order_listener)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_BUY_ORDER_CREATED_EVENT_TAG); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = ((PyObject *)__pyx_v_self->_sb_create_buy_order_listener);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_add_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_4, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_3)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":287
 *             typed_market = market
 *             typed_market.c_add_listener(self.BUY_ORDER_CREATED_EVENT_TAG, self._sb_create_buy_order_listener)
 *             typed_market.c_add_listener(self.SELL_ORDER_CREATED_EVENT_TAG, self._sb_create_sell_order_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_add_listener(self.ORDER_FILLED_EVENT_TAG, self._sb_fill_order_listener)
 *             typed_market.c_add_listener(self.ORDER_FAILURE_EVENT_TAG, self._sb_fail_order_listener)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_SELL_ORDER_CREATED_EVENT_TAG); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_t_5); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = ((PyObject *)__pyx_v_self->_sb_create_sell_order_listener);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_add_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_4, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":288
 *             typed_market.c_add_listener(self.BUY_ORDER_CREATED_EVENT_TAG, self._sb_create_buy_order_listener)
 *             typed_market.c_add_listener(self.SELL_ORDER_CREATED_EVENT_TAG, self._sb_create_sell_order_listener)
 *             typed_market.c_add_listener(self.ORDER_FILLED_EVENT_TAG, self._sb_fill_order_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_add_listener(self.ORDER_FAILURE_EVENT_TAG, self._sb_fail_order_listener)
 *             typed_market.c_add_listener(self.ORDER_CANCELLED_EVENT_TAG, self._sb_cancel_order_listener)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_FILLED_EVENT_TAG); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = ((PyObject *)__pyx_v_self->_sb_fill_order_listener);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_add_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_4, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_3)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 288, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":289
 *             typed_market.c_add_listener(self.SELL_ORDER_CREATED_EVENT_TAG, self._sb_create_sell_order_listener)
 *             typed_market.c_add_listener(self.ORDER_FILLED_EVENT_TAG, self._sb_fill_order_listener)
 *             typed_market.c_add_listener(self.ORDER_FAILURE_EVENT_TAG, self._sb_fail_order_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_add_listener(self.ORDER_CANCELLED_EVENT_TAG, self._sb_cancel_order_listener)
 *             typed_market.c_add_listener(self.ORDER_EXPIRED_EVENT_TAG, self._sb_expire_order_listener)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_FAILURE_EVENT_TAG); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_t_5); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = ((PyObject *)__pyx_v_self->_sb_fail_order_listener);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_add_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_4, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":290
 *             typed_market.c_add_listener(self.ORDER_FILLED_EVENT_TAG, self._sb_fill_order_listener)
 *             typed_market.c_add_listener(self.ORDER_FAILURE_EVENT_TAG, self._sb_fail_order_listener)
 *             typed_market.c_add_listener(self.ORDER_CANCELLED_EVENT_TAG, self._sb_cancel_order_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_add_listener(self.ORDER_EXPIRED_EVENT_TAG, self._sb_expire_order_listener)
 *             typed_market.c_add_listener(self.BUY_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_buy_order_listener)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_CANCELLED_EVENT_TAG); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = ((PyObject *)__pyx_v_self->_sb_cancel_order_listener);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_add_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_4, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_3)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":291
 *             typed_market.c_add_listener(self.ORDER_FAILURE_EVENT_TAG, self._sb_fail_order_listener)
 *             typed_market.c_add_listener(self.ORDER_CANCELLED_EVENT_TAG, self._sb_cancel_order_listener)
 *             typed_market.c_add_listener(self.ORDER_EXPIRED_EVENT_TAG, self._sb_expire_order_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_add_listener(self.BUY_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_buy_order_listener)
 *             typed_market.c_add_listener(self.SELL_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_sell_order_listener)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_EXPIRED_EVENT_TAG); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_t_5); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = ((PyObject *)__pyx_v_self->_sb_expire_order_listener);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_add_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_4, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 291, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":292
 *             typed_market.c_add_listener(self.ORDER_CANCELLED_EVENT_TAG, self._sb_cancel_order_listener)
 *             typed_market.c_add_listener(self.ORDER_EXPIRED_EVENT_TAG, self._sb_expire_order_listener)
 *             typed_market.c_add_listener(self.BUY_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_buy_order_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_add_listener(self.SELL_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_sell_order_listener)
 *             typed_market.c_add_listener(self.FUNDING_PAYMENT_COMPLETED_EVENT_TAG, self._sb_complete_funding_payment_listener)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_BUY_ORDER_COMPLETED_EVENT_TAG); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = ((PyObject *)__pyx_v_self->_sb_complete_buy_order_listener);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_add_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_4, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_3)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":293
 *             typed_market.c_add_listener(self.ORDER_EXPIRED_EVENT_TAG, self._sb_expire_order_listener)
 *             typed_market.c_add_listener(self.BUY_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_buy_order_listener)
 *             typed_market.c_add_listener(self.SELL_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_sell_order_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_add_listener(self.FUNDING_PAYMENT_COMPLETED_EVENT_TAG, self._sb_complete_funding_payment_listener)
 *             typed_market.c_add_listener(self.RANGE_POSITION_CREATED_EVENT_TAG, self._sb_create_range_position_order_listener)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_SELL_ORDER_COMPLETED_EVENT_TAG); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_t_5); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = ((PyObject *)__pyx_v_self->_sb_complete_sell_order_listener);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_add_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_4, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 293, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":294
 *             typed_market.c_add_listener(self.BUY_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_buy_order_listener)
 *             typed_market.c_add_listener(self.SELL_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_sell_order_listener)
 *             typed_market.c_add_listener(self.FUNDING_PAYMENT_COMPLETED_EVENT_TAG, self._sb_complete_funding_payment_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_add_listener(self.RANGE_POSITION_CREATED_EVENT_TAG, self._sb_create_range_position_order_listener)
 *             typed_market.c_add_listener(self.RANGE_POSITION_REMOVED_EVENT_TAG, self._sb_remove_range_position_order_listener)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_FUNDING_PAYMENT_COMPLETED_EVENT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 294, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = ((PyObject *)__pyx_v_self->_sb_complete_funding_payment_listener);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_add_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_4, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_3)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":295
 *             typed_market.c_add_listener(self.SELL_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_sell_order_listener)
 *             typed_market.c_add_listener(self.FUNDING_PAYMENT_COMPLETED_EVENT_TAG, self._sb_complete_funding_payment_listener)
 *             typed_market.c_add_listener(self.RANGE_POSITION_CREATED_EVENT_TAG, self._sb_create_range_position_order_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_add_listener(self.RANGE_POSITION_REMOVED_EVENT_TAG, self._sb_remove_range_position_order_listener)
 *             self._sb_markets.add(typed_market)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_RANGE_POSITION_CREATED_EVENT_TAG); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_t_5); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = ((PyObject *)__pyx_v_self->_sb_create_range_position_order_listener);
    __Pyx_INCREF(__pyx_t_5);
    __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_add_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_4, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":296
 *             typed_market.c_add_listener(self.FUNDING_PAYMENT_COMPLETED_EVENT_TAG, self._sb_complete_funding_payment_listener)
 *             typed_market.c_add_listener(self.RANGE_POSITION_CREATED_EVENT_TAG, self._sb_create_range_position_order_listener)
 *             typed_market.c_add_listener(self.RANGE_POSITION_REMOVED_EVENT_TAG, self._sb_remove_range_position_order_listener)             # <<<<<<<<<<<<<<
 *             self._sb_markets.add(typed_market)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_RANGE_POSITION_REMOVED_EVENT_TAG); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = ((PyObject *)__pyx_v_self->_sb_remove_range_position_order_listener);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_add_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_4, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_3)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":297
 *             typed_market.c_add_listener(self.RANGE_POSITION_CREATED_EVENT_TAG, self._sb_create_range_position_order_listener)
 *             typed_market.c_add_listener(self.RANGE_POSITION_REMOVED_EVENT_TAG, self._sb_remove_range_position_order_listener)
 *             self._sb_markets.add(typed_market)             # <<<<<<<<<<<<<<
 * 
 *     def add_markets(self, markets: List[ConnectorBase]):
 */
    if (unlikely(__pyx_v_self->_sb_markets == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "add");
      __PYX_ERR(0, 297, __pyx_L1_error)
    }
    __pyx_t_6 = PySet_Add(__pyx_v_self->_sb_markets, ((PyObject *)__pyx_v_typed_market)); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 297, __pyx_L1_error)

    /* "hummingbot/strategy/strategy_base.pyx":284
 *             ConnectorBase typed_market
 * 
 *         for market in markets:             # <<<<<<<<<<<<<<
 *             typed_market = market
 *             typed_market.c_add_listener(self.BUY_ORDER_CREATED_EVENT_TAG, self._sb_create_buy_order_listener)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":280
 *         self.c_remove_markets(list(self._sb_markets))
 * 
 *     cdef c_add_markets(self, list markets):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ConnectorBase typed_market
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.c_add_markets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_typed_market);
  __Pyx_XDECREF(__pyx_v_market);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":299
 *             self._sb_markets.add(typed_market)
 * 
 *     def add_markets(self, markets: List[ConnectorBase]):             # <<<<<<<<<<<<<<
 *         self.c_add_markets(markets)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_19add_markets(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_19add_markets = {"add_markets", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_19add_markets, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_19add_markets(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_markets = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_markets (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_markets,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_markets,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_markets)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 299, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "add_markets") < 0)) __PYX_ERR(0, 299, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_markets = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add_markets", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 299, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.add_markets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_18add_markets(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_markets);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_18add_markets(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_markets) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_markets", 0);

  /* "hummingbot/strategy/strategy_base.pyx":300
 * 
 *     def add_markets(self, markets: List[ConnectorBase]):
 *         self.c_add_markets(markets)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_remove_markets(self, list markets):
 */
  if (!(likely(PyList_CheckExact(__pyx_v_markets))||((__pyx_v_markets) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_v_markets))) __PYX_ERR(0, 300, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_add_markets(__pyx_v_self, ((PyObject*)__pyx_v_markets)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":299
 *             self._sb_markets.add(typed_market)
 * 
 *     def add_markets(self, markets: List[ConnectorBase]):             # <<<<<<<<<<<<<<
 *         self.c_add_markets(markets)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.add_markets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":302
 *         self.c_add_markets(markets)
 * 
 *     cdef c_remove_markets(self, list markets):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ConnectorBase typed_market
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_remove_markets(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_markets) {
  struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *__pyx_v_typed_market = 0;
  PyObject *__pyx_v_market = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int64_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_remove_markets", 0);

  /* "hummingbot/strategy/strategy_base.pyx":306
 *             ConnectorBase typed_market
 * 
 *         for market in markets:             # <<<<<<<<<<<<<<
 *             typed_market = market
 *             if typed_market not in self._sb_markets:
 */
  if (unlikely(__pyx_v_markets == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 306, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_markets; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 306, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_market, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":307
 * 
 *         for market in markets:
 *             typed_market = market             # <<<<<<<<<<<<<<
 *             if typed_market not in self._sb_markets:
 *                 continue
 */
    if (!(likely(((__pyx_v_market) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_market, __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase))))) __PYX_ERR(0, 307, __pyx_L1_error)
    __pyx_t_3 = __pyx_v_market;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_typed_market, ((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":308
 *         for market in markets:
 *             typed_market = market
 *             if typed_market not in self._sb_markets:             # <<<<<<<<<<<<<<
 *                 continue
 *             typed_market.c_remove_listener(self.BUY_ORDER_CREATED_EVENT_TAG, self._sb_create_buy_order_listener)
 */
    if (unlikely(__pyx_v_self->_sb_markets == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
      __PYX_ERR(0, 308, __pyx_L1_error)
    }
    __pyx_t_4 = (__Pyx_PySet_ContainsTF(((PyObject *)__pyx_v_typed_market), __pyx_v_self->_sb_markets, Py_NE)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 308, __pyx_L1_error)
    __pyx_t_5 = (__pyx_t_4 != 0);
    if (__pyx_t_5) {

      /* "hummingbot/strategy/strategy_base.pyx":309
 *             typed_market = market
 *             if typed_market not in self._sb_markets:
 *                 continue             # <<<<<<<<<<<<<<
 *             typed_market.c_remove_listener(self.BUY_ORDER_CREATED_EVENT_TAG, self._sb_create_buy_order_listener)
 *             typed_market.c_remove_listener(self.SELL_ORDER_CREATED_EVENT_TAG, self._sb_create_sell_order_listener)
 */
      goto __pyx_L3_continue;

      /* "hummingbot/strategy/strategy_base.pyx":308
 *         for market in markets:
 *             typed_market = market
 *             if typed_market not in self._sb_markets:             # <<<<<<<<<<<<<<
 *                 continue
 *             typed_market.c_remove_listener(self.BUY_ORDER_CREATED_EVENT_TAG, self._sb_create_buy_order_listener)
 */
    }

    /* "hummingbot/strategy/strategy_base.pyx":310
 *             if typed_market not in self._sb_markets:
 *                 continue
 *             typed_market.c_remove_listener(self.BUY_ORDER_CREATED_EVENT_TAG, self._sb_create_buy_order_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_remove_listener(self.SELL_ORDER_CREATED_EVENT_TAG, self._sb_create_sell_order_listener)
 *             typed_market.c_remove_listener(self.ORDER_FILLED_EVENT_TAG, self._sb_fill_order_listener)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_BUY_ORDER_CREATED_EVENT_TAG); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_6 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = ((PyObject *)__pyx_v_self->_sb_create_buy_order_listener);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_remove_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_6, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_3)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":311
 *                 continue
 *             typed_market.c_remove_listener(self.BUY_ORDER_CREATED_EVENT_TAG, self._sb_create_buy_order_listener)
 *             typed_market.c_remove_listener(self.SELL_ORDER_CREATED_EVENT_TAG, self._sb_create_sell_order_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_remove_listener(self.ORDER_FILLED_EVENT_TAG, self._sb_fill_order_listener)
 *             typed_market.c_remove_listener(self.ORDER_FAILURE_EVENT_TAG, self._sb_fail_order_listener)
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_SELL_ORDER_CREATED_EVENT_TAG); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyInt_As_int64_t(__pyx_t_7); if (unlikely((__pyx_t_6 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = ((PyObject *)__pyx_v_self->_sb_create_sell_order_listener);
    __Pyx_INCREF(__pyx_t_7);
    __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_remove_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_6, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":312
 *             typed_market.c_remove_listener(self.BUY_ORDER_CREATED_EVENT_TAG, self._sb_create_buy_order_listener)
 *             typed_market.c_remove_listener(self.SELL_ORDER_CREATED_EVENT_TAG, self._sb_create_sell_order_listener)
 *             typed_market.c_remove_listener(self.ORDER_FILLED_EVENT_TAG, self._sb_fill_order_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_remove_listener(self.ORDER_FAILURE_EVENT_TAG, self._sb_fail_order_listener)
 *             typed_market.c_remove_listener(self.ORDER_CANCELLED_EVENT_TAG, self._sb_cancel_order_listener)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_FILLED_EVENT_TAG); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_6 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = ((PyObject *)__pyx_v_self->_sb_fill_order_listener);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_remove_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_6, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_3)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":313
 *             typed_market.c_remove_listener(self.SELL_ORDER_CREATED_EVENT_TAG, self._sb_create_sell_order_listener)
 *             typed_market.c_remove_listener(self.ORDER_FILLED_EVENT_TAG, self._sb_fill_order_listener)
 *             typed_market.c_remove_listener(self.ORDER_FAILURE_EVENT_TAG, self._sb_fail_order_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_remove_listener(self.ORDER_CANCELLED_EVENT_TAG, self._sb_cancel_order_listener)
 *             typed_market.c_remove_listener(self.ORDER_EXPIRED_EVENT_TAG, self._sb_expire_order_listener)
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_FAILURE_EVENT_TAG); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyInt_As_int64_t(__pyx_t_7); if (unlikely((__pyx_t_6 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = ((PyObject *)__pyx_v_self->_sb_fail_order_listener);
    __Pyx_INCREF(__pyx_t_7);
    __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_remove_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_6, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":314
 *             typed_market.c_remove_listener(self.ORDER_FILLED_EVENT_TAG, self._sb_fill_order_listener)
 *             typed_market.c_remove_listener(self.ORDER_FAILURE_EVENT_TAG, self._sb_fail_order_listener)
 *             typed_market.c_remove_listener(self.ORDER_CANCELLED_EVENT_TAG, self._sb_cancel_order_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_remove_listener(self.ORDER_EXPIRED_EVENT_TAG, self._sb_expire_order_listener)
 *             typed_market.c_remove_listener(self.BUY_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_buy_order_listener)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_CANCELLED_EVENT_TAG); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_6 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = ((PyObject *)__pyx_v_self->_sb_cancel_order_listener);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_remove_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_6, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_3)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":315
 *             typed_market.c_remove_listener(self.ORDER_FAILURE_EVENT_TAG, self._sb_fail_order_listener)
 *             typed_market.c_remove_listener(self.ORDER_CANCELLED_EVENT_TAG, self._sb_cancel_order_listener)
 *             typed_market.c_remove_listener(self.ORDER_EXPIRED_EVENT_TAG, self._sb_expire_order_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_remove_listener(self.BUY_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_buy_order_listener)
 *             typed_market.c_remove_listener(self.SELL_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_sell_order_listener)
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_ORDER_EXPIRED_EVENT_TAG); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyInt_As_int64_t(__pyx_t_7); if (unlikely((__pyx_t_6 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = ((PyObject *)__pyx_v_self->_sb_expire_order_listener);
    __Pyx_INCREF(__pyx_t_7);
    __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_remove_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_6, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":316
 *             typed_market.c_remove_listener(self.ORDER_CANCELLED_EVENT_TAG, self._sb_cancel_order_listener)
 *             typed_market.c_remove_listener(self.ORDER_EXPIRED_EVENT_TAG, self._sb_expire_order_listener)
 *             typed_market.c_remove_listener(self.BUY_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_buy_order_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_remove_listener(self.SELL_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_sell_order_listener)
 *             typed_market.c_remove_listener(self.FUNDING_PAYMENT_COMPLETED_EVENT_TAG, self._sb_complete_funding_payment_listener)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_BUY_ORDER_COMPLETED_EVENT_TAG); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_6 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = ((PyObject *)__pyx_v_self->_sb_complete_buy_order_listener);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_remove_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_6, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_3)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":317
 *             typed_market.c_remove_listener(self.ORDER_EXPIRED_EVENT_TAG, self._sb_expire_order_listener)
 *             typed_market.c_remove_listener(self.BUY_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_buy_order_listener)
 *             typed_market.c_remove_listener(self.SELL_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_sell_order_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_remove_listener(self.FUNDING_PAYMENT_COMPLETED_EVENT_TAG, self._sb_complete_funding_payment_listener)
 *             typed_market.c_remove_listener(self.RANGE_POSITION_CREATED_EVENT_TAG, self._sb_create_range_position_order_listener)
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_SELL_ORDER_COMPLETED_EVENT_TAG); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyInt_As_int64_t(__pyx_t_7); if (unlikely((__pyx_t_6 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = ((PyObject *)__pyx_v_self->_sb_complete_sell_order_listener);
    __Pyx_INCREF(__pyx_t_7);
    __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_remove_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_6, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":318
 *             typed_market.c_remove_listener(self.BUY_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_buy_order_listener)
 *             typed_market.c_remove_listener(self.SELL_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_sell_order_listener)
 *             typed_market.c_remove_listener(self.FUNDING_PAYMENT_COMPLETED_EVENT_TAG, self._sb_complete_funding_payment_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_remove_listener(self.RANGE_POSITION_CREATED_EVENT_TAG, self._sb_create_range_position_order_listener)
 *             typed_market.c_remove_listener(self.RANGE_POSITION_REMOVED_EVENT_TAG, self._sb_remove_range_position_order_listener)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_FUNDING_PAYMENT_COMPLETED_EVENT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_6 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 318, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = ((PyObject *)__pyx_v_self->_sb_complete_funding_payment_listener);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_remove_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_6, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_3)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":319
 *             typed_market.c_remove_listener(self.SELL_ORDER_COMPLETED_EVENT_TAG, self._sb_complete_sell_order_listener)
 *             typed_market.c_remove_listener(self.FUNDING_PAYMENT_COMPLETED_EVENT_TAG, self._sb_complete_funding_payment_listener)
 *             typed_market.c_remove_listener(self.RANGE_POSITION_CREATED_EVENT_TAG, self._sb_create_range_position_order_listener)             # <<<<<<<<<<<<<<
 *             typed_market.c_remove_listener(self.RANGE_POSITION_REMOVED_EVENT_TAG, self._sb_remove_range_position_order_listener)
 *             self._sb_markets.remove(typed_market)
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_RANGE_POSITION_CREATED_EVENT_TAG); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyInt_As_int64_t(__pyx_t_7); if (unlikely((__pyx_t_6 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = ((PyObject *)__pyx_v_self->_sb_create_range_position_order_listener);
    __Pyx_INCREF(__pyx_t_7);
    __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_remove_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_6, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_7)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":320
 *             typed_market.c_remove_listener(self.FUNDING_PAYMENT_COMPLETED_EVENT_TAG, self._sb_complete_funding_payment_listener)
 *             typed_market.c_remove_listener(self.RANGE_POSITION_CREATED_EVENT_TAG, self._sb_create_range_position_order_listener)
 *             typed_market.c_remove_listener(self.RANGE_POSITION_REMOVED_EVENT_TAG, self._sb_remove_range_position_order_listener)             # <<<<<<<<<<<<<<
 *             self._sb_markets.remove(typed_market)
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_RANGE_POSITION_REMOVED_EVENT_TAG); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_6 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_6 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = ((PyObject *)__pyx_v_self->_sb_remove_range_position_order_listener);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_7 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_typed_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.c_remove_listener(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_typed_market), __pyx_t_6, ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)__pyx_t_3)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":321
 *             typed_market.c_remove_listener(self.RANGE_POSITION_CREATED_EVENT_TAG, self._sb_create_range_position_order_listener)
 *             typed_market.c_remove_listener(self.RANGE_POSITION_REMOVED_EVENT_TAG, self._sb_remove_range_position_order_listener)
 *             self._sb_markets.remove(typed_market)             # <<<<<<<<<<<<<<
 * 
 *     def remove_markets(self, markets: List[ConnectorBase]):
 */
    if (unlikely(__pyx_v_self->_sb_markets == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "remove");
      __PYX_ERR(0, 321, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PySet_Remove(__pyx_v_self->_sb_markets, ((PyObject *)__pyx_v_typed_market)); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 321, __pyx_L1_error)

    /* "hummingbot/strategy/strategy_base.pyx":306
 *             ConnectorBase typed_market
 * 
 *         for market in markets:             # <<<<<<<<<<<<<<
 *             typed_market = market
 *             if typed_market not in self._sb_markets:
 */
    __pyx_L3_continue:;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":302
 *         self.c_add_markets(markets)
 * 
 *     cdef c_remove_markets(self, list markets):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ConnectorBase typed_market
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.c_remove_markets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_typed_market);
  __Pyx_XDECREF(__pyx_v_market);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":323
 *             self._sb_markets.remove(typed_market)
 * 
 *     def remove_markets(self, markets: List[ConnectorBase]):             # <<<<<<<<<<<<<<
 *         self.c_remove_markets(markets)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_21remove_markets(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_21remove_markets = {"remove_markets", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_21remove_markets, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_21remove_markets(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_markets = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_markets (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_markets,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_markets,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_markets)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 323, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "remove_markets") < 0)) __PYX_ERR(0, 323, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_markets = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("remove_markets", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 323, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.remove_markets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_20remove_markets(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_markets);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_20remove_markets(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_markets) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove_markets", 0);

  /* "hummingbot/strategy/strategy_base.pyx":324
 * 
 *     def remove_markets(self, markets: List[ConnectorBase]):
 *         self.c_remove_markets(markets)             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_sum_flat_fees(self, str quote_asset, list flat_fees):
 */
  if (!(likely(PyList_CheckExact(__pyx_v_markets))||((__pyx_v_markets) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_v_markets))) __PYX_ERR(0, 324, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_remove_markets(__pyx_v_self, ((PyObject*)__pyx_v_markets)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":323
 *             self._sb_markets.remove(typed_market)
 * 
 *     def remove_markets(self, markets: List[ConnectorBase]):             # <<<<<<<<<<<<<<
 *         self.c_remove_markets(markets)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.remove_markets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":326
 *         self.c_remove_markets(markets)
 * 
 *     cdef object c_sum_flat_fees(self, str quote_asset, list flat_fees):             # <<<<<<<<<<<<<<
 * 
 *         """
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sum_flat_fees(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_quote_asset, PyObject *__pyx_v_flat_fees) {
  PyObject *__pyx_v_total_flat_fees = 0;
  PyObject *__pyx_v_flat_fee_currency = NULL;
  PyObject *__pyx_v_flat_fee_amount = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_sum_flat_fees", 0);

  /* "hummingbot/strategy/strategy_base.pyx":332
 *         """
 *         cdef:
 *             object total_flat_fees = s_decimal_0             # <<<<<<<<<<<<<<
 * 
 *         for flat_fee_currency, flat_fee_amount in flat_fees:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_total_flat_fees = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":334
 *             object total_flat_fees = s_decimal_0
 * 
 *         for flat_fee_currency, flat_fee_amount in flat_fees:             # <<<<<<<<<<<<<<
 *             if flat_fee_currency == quote_asset:
 *                 total_flat_fees += flat_fee_amount
 */
  if (unlikely(__pyx_v_flat_fees == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 334, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_flat_fees; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 334, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_3))) || (PyList_CheckExact(__pyx_t_3))) {
      PyObject* sequence = __pyx_t_3;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 334, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      #else
      __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 334, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 334, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      #endif
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_6 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 334, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);
      index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_4);
      index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) __PYX_ERR(0, 334, __pyx_L1_error)
      __pyx_t_7 = NULL;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 334, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_flat_fee_currency, __pyx_t_4);
    __pyx_t_4 = 0;
    __Pyx_XDECREF_SET(__pyx_v_flat_fee_amount, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":335
 * 
 *         for flat_fee_currency, flat_fee_amount in flat_fees:
 *             if flat_fee_currency == quote_asset:             # <<<<<<<<<<<<<<
 *                 total_flat_fees += flat_fee_amount
 *             else:
 */
    __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_v_flat_fee_currency, __pyx_v_quote_asset, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 335, __pyx_L1_error)
    if (likely(__pyx_t_8)) {

      /* "hummingbot/strategy/strategy_base.pyx":336
 *         for flat_fee_currency, flat_fee_amount in flat_fees:
 *             if flat_fee_currency == quote_asset:
 *                 total_flat_fees += flat_fee_amount             # <<<<<<<<<<<<<<
 *             else:
 *                 # if the flat fee currency asset does not match quote asset, raise exception for now
 */
      __pyx_t_3 = PyNumber_InPlaceAdd(__pyx_v_total_flat_fees, __pyx_v_flat_fee_amount); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 336, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_total_flat_fees, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "hummingbot/strategy/strategy_base.pyx":335
 * 
 *         for flat_fee_currency, flat_fee_amount in flat_fees:
 *             if flat_fee_currency == quote_asset:             # <<<<<<<<<<<<<<
 *                 total_flat_fees += flat_fee_amount
 *             else:
 */
      goto __pyx_L7;
    }

    /* "hummingbot/strategy/strategy_base.pyx":340
 *                 # if the flat fee currency asset does not match quote asset, raise exception for now
 *                 # as we don't support different token conversion atm.
 *                 raise Exception("Flat fee in other token than quote asset is not supported.")             # <<<<<<<<<<<<<<
 *         return total_flat_fees
 * 
 */
    /*else*/ {
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])), __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 340, __pyx_L1_error)
    }
    __pyx_L7:;

    /* "hummingbot/strategy/strategy_base.pyx":334
 *             object total_flat_fees = s_decimal_0
 * 
 *         for flat_fee_currency, flat_fee_amount in flat_fees:             # <<<<<<<<<<<<<<
 *             if flat_fee_currency == quote_asset:
 *                 total_flat_fees += flat_fee_amount
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":341
 *                 # as we don't support different token conversion atm.
 *                 raise Exception("Flat fee in other token than quote asset is not supported.")
 *         return total_flat_fees             # <<<<<<<<<<<<<<
 * 
 *     def cum_flat_fees(self, quote_asset: str, flat_fees: List):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_total_flat_fees);
  __pyx_r = __pyx_v_total_flat_fees;
  goto __pyx_L0;

  /* "hummingbot/strategy/strategy_base.pyx":326
 *         self.c_remove_markets(markets)
 * 
 *     cdef object c_sum_flat_fees(self, str quote_asset, list flat_fees):             # <<<<<<<<<<<<<<
 * 
 *         """
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.c_sum_flat_fees", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_total_flat_fees);
  __Pyx_XDECREF(__pyx_v_flat_fee_currency);
  __Pyx_XDECREF(__pyx_v_flat_fee_amount);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":343
 *         return total_flat_fees
 * 
 *     def cum_flat_fees(self, quote_asset: str, flat_fees: List):             # <<<<<<<<<<<<<<
 *         return self.c_sum_flat_fees(quote_asset, flat_fees)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_23cum_flat_fees(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_23cum_flat_fees = {"cum_flat_fees", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_23cum_flat_fees, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_23cum_flat_fees(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_quote_asset = 0;
  PyObject *__pyx_v_flat_fees = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cum_flat_fees (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_quote_asset,&__pyx_n_s_flat_fees,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_quote_asset,&__pyx_n_s_flat_fees,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_quote_asset)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_flat_fees)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 343, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("cum_flat_fees", 1, 2, 2, 1); __PYX_ERR(0, 343, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "cum_flat_fees") < 0)) __PYX_ERR(0, 343, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_quote_asset = ((PyObject*)values[0]);
    __pyx_v_flat_fees = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cum_flat_fees", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 343, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.cum_flat_fees", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_quote_asset), (&PyUnicode_Type), 1, "quote_asset", 1))) __PYX_ERR(0, 343, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_22cum_flat_fees(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_quote_asset, __pyx_v_flat_fees);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_22cum_flat_fees(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_quote_asset, PyObject *__pyx_v_flat_fees) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cum_flat_fees", 0);

  /* "hummingbot/strategy/strategy_base.pyx":344
 * 
 *     def cum_flat_fees(self, quote_asset: str, flat_fees: List):
 *         return self.c_sum_flat_fees(quote_asset, flat_fees)             # <<<<<<<<<<<<<<
 * 
 *     # <editor-fold desc="+ Market event interfaces">
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyList_CheckExact(__pyx_v_flat_fees))||((__pyx_v_flat_fees) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_v_flat_fees))) __PYX_ERR(0, 344, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_sum_flat_fees(__pyx_v_self, __pyx_v_quote_asset, ((PyObject*)__pyx_v_flat_fees)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 344, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/strategy_base.pyx":343
 *         return total_flat_fees
 * 
 *     def cum_flat_fees(self, quote_asset: str, flat_fees: List):             # <<<<<<<<<<<<<<
 *         return self.c_sum_flat_fees(quote_asset, flat_fees)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.cum_flat_fees", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":348
 *     # <editor-fold desc="+ Market event interfaces">
 *     # ----------------------------------------------------------------------------------------------------------
 *     cdef c_did_create_buy_order(self, object order_created_event):             # <<<<<<<<<<<<<<
 *         """
 *         In the case of asynchronous order creation on the exchange's server, this event is NOT triggered
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_create_buy_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_order_created_event) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("c_did_create_buy_order", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":356
 *         pass
 * 
 *     cdef c_did_create_sell_order(self, object order_created_event):             # <<<<<<<<<<<<<<
 *         """
 *         In the case of asynchronous order creation on the exchange's server, this event is NOT triggered
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_create_sell_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_order_created_event) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("c_did_create_sell_order", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":364
 *         pass
 * 
 *     cdef c_did_fill_order(self, object order_filled_event):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_fill_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_order_filled_event) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("c_did_fill_order", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":367
 *         pass
 * 
 *     cdef c_did_fail_order(self, object order_failed_event):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_fail_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_order_failed_event) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("c_did_fail_order", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":370
 *         pass
 * 
 *     cdef c_did_cancel_order(self, object cancelled_event):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_cancel_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_cancelled_event) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("c_did_cancel_order", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":373
 *         pass
 * 
 *     cdef c_did_expire_order(self, object expired_event):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_expire_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_expired_event) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("c_did_expire_order", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":376
 *         pass
 * 
 *     cdef c_did_complete_buy_order(self, object order_completed_event):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_complete_buy_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_order_completed_event) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("c_did_complete_buy_order", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":379
 *         pass
 * 
 *     cdef c_did_complete_sell_order(self, object order_completed_event):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_complete_sell_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_order_completed_event) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("c_did_complete_sell_order", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":382
 *         pass
 * 
 *     cdef c_did_complete_funding_payment(self, object funding_payment_completed_event):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_complete_funding_payment(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_funding_payment_completed_event) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("c_did_complete_funding_payment", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":385
 *         pass
 * 
 *     cdef c_did_create_range_position_order(self, object order_created_event):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_create_range_position_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_order_created_event) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("c_did_create_range_position_order", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":388
 *         pass
 * 
 *     cdef c_did_remove_range_position_order(self, object order_completed_event):             # <<<<<<<<<<<<<<
 *         pass
 *     # ----------------------------------------------------------------------------------------------------------
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_remove_range_position_order(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_order_completed_event) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("c_did_remove_range_position_order", 0);

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":395
 *     # <editor-fold desc="+ Order tracking event handlers">
 *     # ----------------------------------------------------------------------------------------------------------
 *     cdef c_did_fail_order_tracker(self, object order_failed_event):             # <<<<<<<<<<<<<<
 *         cdef:
 *             str order_id = order_failed_event.order_id
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_fail_order_tracker(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_order_failed_event) {
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_market_pair = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_fail_order_tracker", 0);

  /* "hummingbot/strategy/strategy_base.pyx":397
 *     cdef c_did_fail_order_tracker(self, object order_failed_event):
 *         cdef:
 *             str order_id = order_failed_event.order_id             # <<<<<<<<<<<<<<
 *             object order_type = order_failed_event.order_type
 *             object market_pair = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_failed_event, __pyx_n_s_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 397, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 397, __pyx_L1_error)
  __pyx_v_order_id = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":398
 *         cdef:
 *             str order_id = order_failed_event.order_id
 *             object order_type = order_failed_event.order_type             # <<<<<<<<<<<<<<
 *             object market_pair = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_failed_event, __pyx_n_s_order_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 398, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_order_type = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":399
 *             str order_id = order_failed_event.order_id
 *             object order_type = order_failed_event.order_type
 *             object market_pair = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)             # <<<<<<<<<<<<<<
 * 
 *         if order_type.is_limit_type():
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->_sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_pair_from_order_id(__pyx_v_self->_sb_order_tracker, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_market_pair = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":401
 *             object market_pair = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)
 * 
 *         if order_type.is_limit_type():             # <<<<<<<<<<<<<<
 *             self.c_stop_tracking_limit_order(market_pair, order_id)
 *         elif order_type == OrderType.MARKET:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_type, __pyx_n_s_is_limit_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 401, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 401, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "hummingbot/strategy/strategy_base.pyx":402
 * 
 *         if order_type.is_limit_type():
 *             self.c_stop_tracking_limit_order(market_pair, order_id)             # <<<<<<<<<<<<<<
 *         elif order_type == OrderType.MARKET:
 *             self.c_stop_tracking_market_order(market_pair, order_id)
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_stop_tracking_limit_order(__pyx_v_self, __pyx_v_market_pair, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":401
 *             object market_pair = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)
 * 
 *         if order_type.is_limit_type():             # <<<<<<<<<<<<<<
 *             self.c_stop_tracking_limit_order(market_pair, order_id)
 *         elif order_type == OrderType.MARKET:
 */
    goto __pyx_L3;
  }

  /* "hummingbot/strategy/strategy_base.pyx":403
 *         if order_type.is_limit_type():
 *             self.c_stop_tracking_limit_order(market_pair, order_id)
 *         elif order_type == OrderType.MARKET:             # <<<<<<<<<<<<<<
 *             self.c_stop_tracking_market_order(market_pair, order_id)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_order_type, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 403, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_5) {

    /* "hummingbot/strategy/strategy_base.pyx":404
 *             self.c_stop_tracking_limit_order(market_pair, order_id)
 *         elif order_type == OrderType.MARKET:
 *             self.c_stop_tracking_market_order(market_pair, order_id)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_did_cancel_order_tracker(self, object order_cancelled_event):
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_stop_tracking_market_order(__pyx_v_self, __pyx_v_market_pair, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 404, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":403
 *         if order_type.is_limit_type():
 *             self.c_stop_tracking_limit_order(market_pair, order_id)
 *         elif order_type == OrderType.MARKET:             # <<<<<<<<<<<<<<
 *             self.c_stop_tracking_market_order(market_pair, order_id)
 * 
 */
  }
  __pyx_L3:;

  /* "hummingbot/strategy/strategy_base.pyx":395
 *     # <editor-fold desc="+ Order tracking event handlers">
 *     # ----------------------------------------------------------------------------------------------------------
 *     cdef c_did_fail_order_tracker(self, object order_failed_event):             # <<<<<<<<<<<<<<
 *         cdef:
 *             str order_id = order_failed_event.order_id
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.c_did_fail_order_tracker", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF(__pyx_v_order_type);
  __Pyx_XDECREF(__pyx_v_market_pair);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":406
 *             self.c_stop_tracking_market_order(market_pair, order_id)
 * 
 *     cdef c_did_cancel_order_tracker(self, object order_cancelled_event):             # <<<<<<<<<<<<<<
 *         cdef:
 *             str order_id = order_cancelled_event.order_id
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_cancel_order_tracker(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_order_cancelled_event) {
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_market_pair = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_cancel_order_tracker", 0);

  /* "hummingbot/strategy/strategy_base.pyx":408
 *     cdef c_did_cancel_order_tracker(self, object order_cancelled_event):
 *         cdef:
 *             str order_id = order_cancelled_event.order_id             # <<<<<<<<<<<<<<
 *             object market_pair = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_cancelled_event, __pyx_n_s_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 408, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 408, __pyx_L1_error)
  __pyx_v_order_id = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":409
 *         cdef:
 *             str order_id = order_cancelled_event.order_id
 *             object market_pair = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)             # <<<<<<<<<<<<<<
 * 
 *         self.c_stop_tracking_limit_order(market_pair, order_id)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->_sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_pair_from_order_id(__pyx_v_self->_sb_order_tracker, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 409, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_market_pair = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":411
 *             object market_pair = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)
 * 
 *         self.c_stop_tracking_limit_order(market_pair, order_id)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_did_expire_order_tracker(self, object order_expired_event):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_stop_tracking_limit_order(__pyx_v_self, __pyx_v_market_pair, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 411, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":406
 *             self.c_stop_tracking_market_order(market_pair, order_id)
 * 
 *     cdef c_did_cancel_order_tracker(self, object order_cancelled_event):             # <<<<<<<<<<<<<<
 *         cdef:
 *             str order_id = order_cancelled_event.order_id
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.c_did_cancel_order_tracker", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF(__pyx_v_market_pair);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":413
 *         self.c_stop_tracking_limit_order(market_pair, order_id)
 * 
 *     cdef c_did_expire_order_tracker(self, object order_expired_event):             # <<<<<<<<<<<<<<
 *         self.c_did_cancel_order_tracker(order_expired_event)
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_expire_order_tracker(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_order_expired_event) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_expire_order_tracker", 0);

  /* "hummingbot/strategy/strategy_base.pyx":414
 * 
 *     cdef c_did_expire_order_tracker(self, object order_expired_event):
 *         self.c_did_cancel_order_tracker(order_expired_event)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_did_complete_buy_order_tracker(self, object order_completed_event):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_did_cancel_order_tracker(__pyx_v_self, __pyx_v_order_expired_event); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 414, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":413
 *         self.c_stop_tracking_limit_order(market_pair, order_id)
 * 
 *     cdef c_did_expire_order_tracker(self, object order_expired_event):             # <<<<<<<<<<<<<<
 *         self.c_did_cancel_order_tracker(order_expired_event)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.c_did_expire_order_tracker", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":416
 *         self.c_did_cancel_order_tracker(order_expired_event)
 * 
 *     cdef c_did_complete_buy_order_tracker(self, object order_completed_event):             # <<<<<<<<<<<<<<
 *         cdef:
 *             str order_id = order_completed_event.order_id
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_complete_buy_order_tracker(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_order_completed_event) {
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_market_pair = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_complete_buy_order_tracker", 0);

  /* "hummingbot/strategy/strategy_base.pyx":418
 *     cdef c_did_complete_buy_order_tracker(self, object order_completed_event):
 *         cdef:
 *             str order_id = order_completed_event.order_id             # <<<<<<<<<<<<<<
 *             object market_pair = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)
 *             object order_type = order_completed_event.order_type
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_completed_event, __pyx_n_s_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 418, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 418, __pyx_L1_error)
  __pyx_v_order_id = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":419
 *         cdef:
 *             str order_id = order_completed_event.order_id
 *             object market_pair = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)             # <<<<<<<<<<<<<<
 *             object order_type = order_completed_event.order_type
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->_sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_market_pair_from_order_id(__pyx_v_self->_sb_order_tracker, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_market_pair = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":420
 *             str order_id = order_completed_event.order_id
 *             object market_pair = self._sb_order_tracker.c_get_market_pair_from_order_id(order_id)
 *             object order_type = order_completed_event.order_type             # <<<<<<<<<<<<<<
 * 
 *         if market_pair is not None:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_completed_event, __pyx_n_s_order_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_order_type = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":422
 *             object order_type = order_completed_event.order_type
 * 
 *         if market_pair is not None:             # <<<<<<<<<<<<<<
 *             if order_type.is_limit_type():
 *                 self.c_stop_tracking_limit_order(market_pair, order_id)
 */
  __pyx_t_2 = (__pyx_v_market_pair != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "hummingbot/strategy/strategy_base.pyx":423
 * 
 *         if market_pair is not None:
 *             if order_type.is_limit_type():             # <<<<<<<<<<<<<<
 *                 self.c_stop_tracking_limit_order(market_pair, order_id)
 *             elif order_type == OrderType.MARKET:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_type, __pyx_n_s_is_limit_type); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_5, };
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_3) {

      /* "hummingbot/strategy/strategy_base.pyx":424
 *         if market_pair is not None:
 *             if order_type.is_limit_type():
 *                 self.c_stop_tracking_limit_order(market_pair, order_id)             # <<<<<<<<<<<<<<
 *             elif order_type == OrderType.MARKET:
 *                 self.c_stop_tracking_market_order(market_pair, order_id)
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_stop_tracking_limit_order(__pyx_v_self, __pyx_v_market_pair, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 424, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/strategy/strategy_base.pyx":423
 * 
 *         if market_pair is not None:
 *             if order_type.is_limit_type():             # <<<<<<<<<<<<<<
 *                 self.c_stop_tracking_limit_order(market_pair, order_id)
 *             elif order_type == OrderType.MARKET:
 */
      goto __pyx_L4;
    }

    /* "hummingbot/strategy/strategy_base.pyx":425
 *             if order_type.is_limit_type():
 *                 self.c_stop_tracking_limit_order(market_pair, order_id)
 *             elif order_type == OrderType.MARKET:             # <<<<<<<<<<<<<<
 *                 self.c_stop_tracking_market_order(market_pair, order_id)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_order_type, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 425, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_3) {

      /* "hummingbot/strategy/strategy_base.pyx":426
 *                 self.c_stop_tracking_limit_order(market_pair, order_id)
 *             elif order_type == OrderType.MARKET:
 *                 self.c_stop_tracking_market_order(market_pair, order_id)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_did_complete_sell_order_tracker(self, object order_completed_event):
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_stop_tracking_market_order(__pyx_v_self, __pyx_v_market_pair, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 426, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/strategy/strategy_base.pyx":425
 *             if order_type.is_limit_type():
 *                 self.c_stop_tracking_limit_order(market_pair, order_id)
 *             elif order_type == OrderType.MARKET:             # <<<<<<<<<<<<<<
 *                 self.c_stop_tracking_market_order(market_pair, order_id)
 * 
 */
    }
    __pyx_L4:;

    /* "hummingbot/strategy/strategy_base.pyx":422
 *             object order_type = order_completed_event.order_type
 * 
 *         if market_pair is not None:             # <<<<<<<<<<<<<<
 *             if order_type.is_limit_type():
 *                 self.c_stop_tracking_limit_order(market_pair, order_id)
 */
  }

  /* "hummingbot/strategy/strategy_base.pyx":416
 *         self.c_did_cancel_order_tracker(order_expired_event)
 * 
 *     cdef c_did_complete_buy_order_tracker(self, object order_completed_event):             # <<<<<<<<<<<<<<
 *         cdef:
 *             str order_id = order_completed_event.order_id
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.c_did_complete_buy_order_tracker", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF(__pyx_v_market_pair);
  __Pyx_XDECREF(__pyx_v_order_type);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":428
 *                 self.c_stop_tracking_market_order(market_pair, order_id)
 * 
 *     cdef c_did_complete_sell_order_tracker(self, object order_completed_event):             # <<<<<<<<<<<<<<
 *         self.c_did_complete_buy_order_tracker(order_completed_event)
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_complete_sell_order_tracker(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_order_completed_event) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_complete_sell_order_tracker", 0);

  /* "hummingbot/strategy/strategy_base.pyx":429
 * 
 *     cdef c_did_complete_sell_order_tracker(self, object order_completed_event):
 *         self.c_did_complete_buy_order_tracker(order_completed_event)             # <<<<<<<<<<<<<<
 * 
 *     # ----------------------------------------------------------------------------------------------------------
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_did_complete_buy_order_tracker(__pyx_v_self, __pyx_v_order_completed_event); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":428
 *                 self.c_stop_tracking_market_order(market_pair, order_id)
 * 
 *     cdef c_did_complete_sell_order_tracker(self, object order_completed_event):             # <<<<<<<<<<<<<<
 *         self.c_did_complete_buy_order_tracker(order_completed_event)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.c_did_complete_sell_order_tracker", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":437
 *     # ----------------------------------------------------------------------------------------------------------
 * 
 *     def buy_with_specific_market(self, market_trading_pair_tuple, amount,             # <<<<<<<<<<<<<<
 *                                  order_type=OrderType.MARKET,
 *                                  price=s_decimal_nan,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_25buy_with_specific_market(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_25buy_with_specific_market = {"buy_with_specific_market", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_25buy_with_specific_market, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_25buy_with_specific_market(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_market_trading_pair_tuple = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_v_expiration_seconds = 0;
  PyObject *__pyx_v_position_action = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("buy_with_specific_market (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_trading_pair_tuple,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,&__pyx_n_s_expiration_seconds,&__pyx_n_s_position_action,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_trading_pair_tuple,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,&__pyx_n_s_expiration_seconds,&__pyx_n_s_position_action,0};
    #endif
    PyObject* values[6] = {0,0,0,0,0,0};
    values[2] = __pyx_k__10;
    values[3] = __pyx_k__11;
    values[4] = __pyx_k__12;
    values[5] = __pyx_k__13;
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_market_trading_pair_tuple)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 437, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_amount)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 437, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("buy_with_specific_market", 0, 2, 6, 1); __PYX_ERR(0, 437, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_type);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 437, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_price);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 437, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_expiration_seconds);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 437, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_position_action);
          if (value) { values[5] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 437, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "buy_with_specific_market") < 0)) __PYX_ERR(0, 437, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_market_trading_pair_tuple = values[0];
    __pyx_v_amount = values[1];
    __pyx_v_order_type = values[2];
    __pyx_v_price = values[3];
    __pyx_v_expiration_seconds = values[4];
    __pyx_v_position_action = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("buy_with_specific_market", 0, 2, 6, __pyx_nargs); __PYX_ERR(0, 437, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.buy_with_specific_market", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_24buy_with_specific_market(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_trading_pair_tuple, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price, __pyx_v_expiration_seconds, __pyx_v_position_action);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_24buy_with_specific_market(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuple, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_expiration_seconds, PyObject *__pyx_v_position_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("buy_with_specific_market", 0);

  /* "hummingbot/strategy/strategy_base.pyx":442
 *                                  expiration_seconds=NaN,
 *                                  position_action=PositionAction.OPEN):
 *         return self.c_buy_with_specific_market(market_trading_pair_tuple, amount,             # <<<<<<<<<<<<<<
 *                                                order_type,
 *                                                price,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "hummingbot/strategy/strategy_base.pyx":445
 *                                                order_type,
 *                                                price,
 *                                                expiration_seconds,             # <<<<<<<<<<<<<<
 *                                                position_action)
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_expiration_seconds); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 445, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":442
 *                                  expiration_seconds=NaN,
 *                                  position_action=PositionAction.OPEN):
 *         return self.c_buy_with_specific_market(market_trading_pair_tuple, amount,             # <<<<<<<<<<<<<<
 *                                                order_type,
 *                                                price,
 */
  __pyx_t_3.__pyx_n = 4;
  __pyx_t_3.order_type = __pyx_v_order_type;
  __pyx_t_3.price = __pyx_v_price;
  __pyx_t_3.expiration_seconds = __pyx_t_1;
  __pyx_t_3.position_action = __pyx_v_position_action;
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_buy_with_specific_market(__pyx_v_self, __pyx_v_market_trading_pair_tuple, __pyx_v_amount, &__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/strategy_base.pyx":437
 *     # ----------------------------------------------------------------------------------------------------------
 * 
 *     def buy_with_specific_market(self, market_trading_pair_tuple, amount,             # <<<<<<<<<<<<<<
 *                                  order_type=OrderType.MARKET,
 *                                  price=s_decimal_nan,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.buy_with_specific_market", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":448
 *                                                position_action)
 * 
 *     cdef str c_buy_with_specific_market(self, object market_trading_pair_tuple, object amount,             # <<<<<<<<<<<<<<
 *                                         object order_type=OrderType.MARKET,
 *                                         object price=s_decimal_nan,
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuple, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market *__pyx_optional_args) {
  PyObject *__pyx_v_order_type = __pyx_k__14;
  PyObject *__pyx_v_price = __pyx_k__15;
  double __pyx_v_expiration_seconds = __pyx_k__16;
  PyObject *__pyx_v_position_action = __pyx_k__17;
  PyObject *__pyx_v_kwargs = 0;
  struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *__pyx_v_market = 0;
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_buy_with_specific_market", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_order_type = __pyx_optional_args->order_type;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_price = __pyx_optional_args->price;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_expiration_seconds = __pyx_optional_args->expiration_seconds;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_position_action = __pyx_optional_args->position_action;
          }
        }
      }
    }
  }

  /* "hummingbot/strategy/strategy_base.pyx":453
 *                                         double expiration_seconds=NaN,
 *                                         position_action=PositionAction.OPEN):
 *         if self._sb_delegate_lock:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Delegates are not allowed to execute orders directly.")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_sb_delegate_lock != 0);
  if (unlikely(__pyx_t_1)) {

    /* "hummingbot/strategy/strategy_base.pyx":454
 *                                         position_action=PositionAction.OPEN):
 *         if self._sb_delegate_lock:
 *             raise RuntimeError("Delegates are not allowed to execute orders directly.")             # <<<<<<<<<<<<<<
 * 
 *         if not (isinstance(amount, Decimal) and isinstance(price, Decimal)):
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 454, __pyx_L1_error)

    /* "hummingbot/strategy/strategy_base.pyx":453
 *                                         double expiration_seconds=NaN,
 *                                         position_action=PositionAction.OPEN):
 *         if self._sb_delegate_lock:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Delegates are not allowed to execute orders directly.")
 * 
 */
  }

  /* "hummingbot/strategy/strategy_base.pyx":456
 *             raise RuntimeError("Delegates are not allowed to execute orders directly.")
 * 
 *         if not (isinstance(amount, Decimal) and isinstance(price, Decimal)):             # <<<<<<<<<<<<<<
 *             raise TypeError("price and amount must be Decimal objects.")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_amount, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L5_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_price, __pyx_t_2); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 456, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L5_bool_binop_done:;
  __pyx_t_3 = ((!__pyx_t_1) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "hummingbot/strategy/strategy_base.pyx":457
 * 
 *         if not (isinstance(amount, Decimal) and isinstance(price, Decimal)):
 *             raise TypeError("price and amount must be Decimal objects.")             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 457, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 457, __pyx_L1_error)

    /* "hummingbot/strategy/strategy_base.pyx":456
 *             raise RuntimeError("Delegates are not allowed to execute orders directly.")
 * 
 *         if not (isinstance(amount, Decimal) and isinstance(price, Decimal)):             # <<<<<<<<<<<<<<
 *             raise TypeError("price and amount must be Decimal objects.")
 * 
 */
  }

  /* "hummingbot/strategy/strategy_base.pyx":460
 * 
 *         cdef:
 *             kwargs = {"expiration_ts": self._current_timestamp + expiration_seconds,             # <<<<<<<<<<<<<<
 *                       "position_action": position_action}
 *             ConnectorBase market = market_trading_pair_tuple.market
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_self->__pyx_base._current_timestamp + __pyx_v_expiration_seconds)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_expiration_ts, __pyx_t_5) < 0) __PYX_ERR(0, 460, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":461
 *         cdef:
 *             kwargs = {"expiration_ts": self._current_timestamp + expiration_seconds,
 *                       "position_action": position_action}             # <<<<<<<<<<<<<<
 *             ConnectorBase market = market_trading_pair_tuple.market
 * 
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_position_action, __pyx_v_position_action) < 0) __PYX_ERR(0, 460, __pyx_L1_error)
  __pyx_v_kwargs = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":462
 *             kwargs = {"expiration_ts": self._current_timestamp + expiration_seconds,
 *                       "position_action": position_action}
 *             ConnectorBase market = market_trading_pair_tuple.market             # <<<<<<<<<<<<<<
 * 
 *         if market not in self._sb_markets:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 462, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase))))) __PYX_ERR(0, 462, __pyx_L1_error)
  __pyx_v_market = ((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":464
 *             ConnectorBase market = market_trading_pair_tuple.market
 * 
 *         if market not in self._sb_markets:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Market object for buy order is not in the whitelisted markets set.")
 * 
 */
  if (unlikely(__pyx_v_self->_sb_markets == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 464, __pyx_L1_error)
  }
  __pyx_t_3 = (__Pyx_PySet_ContainsTF(((PyObject *)__pyx_v_market), __pyx_v_self->_sb_markets, Py_NE)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 464, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_3 != 0);
  if (unlikely(__pyx_t_1)) {

    /* "hummingbot/strategy/strategy_base.pyx":465
 * 
 *         if market not in self._sb_markets:
 *             raise ValueError(f"Market object for buy order is not in the whitelisted markets set.")             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 465, __pyx_L1_error)

    /* "hummingbot/strategy/strategy_base.pyx":464
 *             ConnectorBase market = market_trading_pair_tuple.market
 * 
 *         if market not in self._sb_markets:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Market object for buy order is not in the whitelisted markets set.")
 * 
 */
  }

  /* "hummingbot/strategy/strategy_base.pyx":468
 * 
 *         cdef:
 *             str order_id = market.c_buy(market_trading_pair_tuple.trading_pair,             # <<<<<<<<<<<<<<
 *                                         amount=amount,
 *                                         order_type=order_type,
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_trading_pair_tuple, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 468, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":472
 *                                         order_type=order_type,
 *                                         price=price,
 *                                         kwargs=kwargs)             # <<<<<<<<<<<<<<
 * 
 *         # Start order tracking
 */
  if (!(likely(PyDict_CheckExact(__pyx_v_kwargs)) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_v_kwargs))) __PYX_ERR(0, 472, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":468
 * 
 *         cdef:
 *             str order_id = market.c_buy(market_trading_pair_tuple.trading_pair,             # <<<<<<<<<<<<<<
 *                                         amount=amount,
 *                                         order_type=order_type,
 */
  __pyx_t_6.__pyx_n = 3;
  __pyx_t_6.order_type = __pyx_v_order_type;
  __pyx_t_6.price = __pyx_v_price;
  __pyx_t_6.kwargs = ((PyObject*)__pyx_v_kwargs);
  __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_buy(__pyx_v_market, ((PyObject*)__pyx_t_2), __pyx_v_amount, &__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 468, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_order_id = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":475
 * 
 *         # Start order tracking
 *         if order_type.is_limit_type():             # <<<<<<<<<<<<<<
 *             self.c_start_tracking_limit_order(market_trading_pair_tuple, order_id, True, price, amount)
 *         elif order_type == OrderType.MARKET:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_type, __pyx_n_s_is_limit_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_7, };
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 475, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_1) {

    /* "hummingbot/strategy/strategy_base.pyx":476
 *         # Start order tracking
 *         if order_type.is_limit_type():
 *             self.c_start_tracking_limit_order(market_trading_pair_tuple, order_id, True, price, amount)             # <<<<<<<<<<<<<<
 *         elif order_type == OrderType.MARKET:
 *             self.c_start_tracking_market_order(market_trading_pair_tuple, order_id, True, amount)
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_start_tracking_limit_order(__pyx_v_self, __pyx_v_market_trading_pair_tuple, __pyx_v_order_id, 1, __pyx_v_price, __pyx_v_amount); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 476, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":475
 * 
 *         # Start order tracking
 *         if order_type.is_limit_type():             # <<<<<<<<<<<<<<
 *             self.c_start_tracking_limit_order(market_trading_pair_tuple, order_id, True, price, amount)
 *         elif order_type == OrderType.MARKET:
 */
    goto __pyx_L8;
  }

  /* "hummingbot/strategy/strategy_base.pyx":477
 *         if order_type.is_limit_type():
 *             self.c_start_tracking_limit_order(market_trading_pair_tuple, order_id, True, price, amount)
 *         elif order_type == OrderType.MARKET:             # <<<<<<<<<<<<<<
 *             self.c_start_tracking_market_order(market_trading_pair_tuple, order_id, True, amount)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_order_type, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 477, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_1) {

    /* "hummingbot/strategy/strategy_base.pyx":478
 *             self.c_start_tracking_limit_order(market_trading_pair_tuple, order_id, True, price, amount)
 *         elif order_type == OrderType.MARKET:
 *             self.c_start_tracking_market_order(market_trading_pair_tuple, order_id, True, amount)             # <<<<<<<<<<<<<<
 * 
 *         return order_id
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_start_tracking_market_order(__pyx_v_self, __pyx_v_market_trading_pair_tuple, __pyx_v_order_id, 1, __pyx_v_amount); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 478, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":477
 *         if order_type.is_limit_type():
 *             self.c_start_tracking_limit_order(market_trading_pair_tuple, order_id, True, price, amount)
 *         elif order_type == OrderType.MARKET:             # <<<<<<<<<<<<<<
 *             self.c_start_tracking_market_order(market_trading_pair_tuple, order_id, True, amount)
 * 
 */
  }
  __pyx_L8:;

  /* "hummingbot/strategy/strategy_base.pyx":480
 *             self.c_start_tracking_market_order(market_trading_pair_tuple, order_id, True, amount)
 * 
 *         return order_id             # <<<<<<<<<<<<<<
 * 
 *     def sell_with_specific_market(self, market_trading_pair_tuple, amount,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_order_id);
  __pyx_r = __pyx_v_order_id;
  goto __pyx_L0;

  /* "hummingbot/strategy/strategy_base.pyx":448
 *                                                position_action)
 * 
 *     cdef str c_buy_with_specific_market(self, object market_trading_pair_tuple, object amount,             # <<<<<<<<<<<<<<
 *                                         object order_type=OrderType.MARKET,
 *                                         object price=s_decimal_nan,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.c_buy_with_specific_market", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_XDECREF((PyObject *)__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":482
 *         return order_id
 * 
 *     def sell_with_specific_market(self, market_trading_pair_tuple, amount,             # <<<<<<<<<<<<<<
 *                                   order_type=OrderType.MARKET,
 *                                   price=s_decimal_nan,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_27sell_with_specific_market(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_27sell_with_specific_market = {"sell_with_specific_market", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_27sell_with_specific_market, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_27sell_with_specific_market(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_market_trading_pair_tuple = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_v_expiration_seconds = 0;
  PyObject *__pyx_v_position_action = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sell_with_specific_market (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_trading_pair_tuple,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,&__pyx_n_s_expiration_seconds,&__pyx_n_s_position_action,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_trading_pair_tuple,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,&__pyx_n_s_expiration_seconds,&__pyx_n_s_position_action,0};
    #endif
    PyObject* values[6] = {0,0,0,0,0,0};
    values[2] = __pyx_k__21;
    values[3] = __pyx_k__22;
    values[4] = __pyx_k__23;
    values[5] = __pyx_k__24;
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_market_trading_pair_tuple)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 482, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_amount)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 482, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("sell_with_specific_market", 0, 2, 6, 1); __PYX_ERR(0, 482, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_type);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 482, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_price);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 482, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_expiration_seconds);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 482, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_position_action);
          if (value) { values[5] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 482, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "sell_with_specific_market") < 0)) __PYX_ERR(0, 482, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_market_trading_pair_tuple = values[0];
    __pyx_v_amount = values[1];
    __pyx_v_order_type = values[2];
    __pyx_v_price = values[3];
    __pyx_v_expiration_seconds = values[4];
    __pyx_v_position_action = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sell_with_specific_market", 0, 2, 6, __pyx_nargs); __PYX_ERR(0, 482, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.sell_with_specific_market", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_26sell_with_specific_market(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_trading_pair_tuple, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price, __pyx_v_expiration_seconds, __pyx_v_position_action);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_26sell_with_specific_market(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuple, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_expiration_seconds, PyObject *__pyx_v_position_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sell_with_specific_market", 0);

  /* "hummingbot/strategy/strategy_base.pyx":487
 *                                   expiration_seconds=NaN,
 *                                   position_action=PositionAction.OPEN):
 *         return self.c_sell_with_specific_market(market_trading_pair_tuple, amount,             # <<<<<<<<<<<<<<
 *                                                 order_type,
 *                                                 price,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "hummingbot/strategy/strategy_base.pyx":490
 *                                                 order_type,
 *                                                 price,
 *                                                 expiration_seconds,             # <<<<<<<<<<<<<<
 *                                                 position_action)
 * 
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_expiration_seconds); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 490, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":487
 *                                   expiration_seconds=NaN,
 *                                   position_action=PositionAction.OPEN):
 *         return self.c_sell_with_specific_market(market_trading_pair_tuple, amount,             # <<<<<<<<<<<<<<
 *                                                 order_type,
 *                                                 price,
 */
  __pyx_t_3.__pyx_n = 4;
  __pyx_t_3.order_type = __pyx_v_order_type;
  __pyx_t_3.price = __pyx_v_price;
  __pyx_t_3.expiration_seconds = __pyx_t_1;
  __pyx_t_3.position_action = __pyx_v_position_action;
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_sell_with_specific_market(__pyx_v_self, __pyx_v_market_trading_pair_tuple, __pyx_v_amount, &__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 487, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/strategy_base.pyx":482
 *         return order_id
 * 
 *     def sell_with_specific_market(self, market_trading_pair_tuple, amount,             # <<<<<<<<<<<<<<
 *                                   order_type=OrderType.MARKET,
 *                                   price=s_decimal_nan,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.sell_with_specific_market", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":493
 *                                                 position_action)
 * 
 *     cdef str c_sell_with_specific_market(self, object market_trading_pair_tuple, object amount,             # <<<<<<<<<<<<<<
 *                                          object order_type=OrderType.MARKET,
 *                                          object price=s_decimal_nan,
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuple, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market *__pyx_optional_args) {
  PyObject *__pyx_v_order_type = __pyx_k__25;
  PyObject *__pyx_v_price = __pyx_k__26;
  double __pyx_v_expiration_seconds = __pyx_k__27;
  PyObject *__pyx_v_position_action = __pyx_k__28;
  PyObject *__pyx_v_kwargs = 0;
  struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *__pyx_v_market = 0;
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_sell_with_specific_market", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_order_type = __pyx_optional_args->order_type;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_price = __pyx_optional_args->price;
        if (__pyx_optional_args->__pyx_n > 2) {
          __pyx_v_expiration_seconds = __pyx_optional_args->expiration_seconds;
          if (__pyx_optional_args->__pyx_n > 3) {
            __pyx_v_position_action = __pyx_optional_args->position_action;
          }
        }
      }
    }
  }

  /* "hummingbot/strategy/strategy_base.pyx":498
 *                                          double expiration_seconds=NaN,
 *                                          position_action=PositionAction.OPEN):
 *         if self._sb_delegate_lock:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Delegates are not allowed to execute orders directly.")
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_sb_delegate_lock != 0);
  if (unlikely(__pyx_t_1)) {

    /* "hummingbot/strategy/strategy_base.pyx":499
 *                                          position_action=PositionAction.OPEN):
 *         if self._sb_delegate_lock:
 *             raise RuntimeError("Delegates are not allowed to execute orders directly.")             # <<<<<<<<<<<<<<
 * 
 *         if not (isinstance(amount, Decimal) and isinstance(price, Decimal)):
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 499, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 499, __pyx_L1_error)

    /* "hummingbot/strategy/strategy_base.pyx":498
 *                                          double expiration_seconds=NaN,
 *                                          position_action=PositionAction.OPEN):
 *         if self._sb_delegate_lock:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Delegates are not allowed to execute orders directly.")
 * 
 */
  }

  /* "hummingbot/strategy/strategy_base.pyx":501
 *             raise RuntimeError("Delegates are not allowed to execute orders directly.")
 * 
 *         if not (isinstance(amount, Decimal) and isinstance(price, Decimal)):             # <<<<<<<<<<<<<<
 *             raise TypeError("price and amount must be Decimal objects.")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_IsInstance(__pyx_v_amount, __pyx_t_2); if (unlikely(__pyx_t_3 == ((int)-1))) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_1 = __pyx_t_4;
    goto __pyx_L5_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = PyObject_IsInstance(__pyx_v_price, __pyx_t_2); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 501, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  __pyx_t_1 = __pyx_t_3;
  __pyx_L5_bool_binop_done:;
  __pyx_t_3 = ((!__pyx_t_1) != 0);
  if (unlikely(__pyx_t_3)) {

    /* "hummingbot/strategy/strategy_base.pyx":502
 * 
 *         if not (isinstance(amount, Decimal) and isinstance(price, Decimal)):
 *             raise TypeError("price and amount must be Decimal objects.")             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 502, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 502, __pyx_L1_error)

    /* "hummingbot/strategy/strategy_base.pyx":501
 *             raise RuntimeError("Delegates are not allowed to execute orders directly.")
 * 
 *         if not (isinstance(amount, Decimal) and isinstance(price, Decimal)):             # <<<<<<<<<<<<<<
 *             raise TypeError("price and amount must be Decimal objects.")
 * 
 */
  }

  /* "hummingbot/strategy/strategy_base.pyx":505
 * 
 *         cdef:
 *             kwargs = {"expiration_ts": self._current_timestamp + expiration_seconds,             # <<<<<<<<<<<<<<
 *                       "position_action": position_action}
 *             ConnectorBase market = market_trading_pair_tuple.market
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_self->__pyx_base._current_timestamp + __pyx_v_expiration_seconds)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_expiration_ts, __pyx_t_5) < 0) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":506
 *         cdef:
 *             kwargs = {"expiration_ts": self._current_timestamp + expiration_seconds,
 *                       "position_action": position_action}             # <<<<<<<<<<<<<<
 *             ConnectorBase market = market_trading_pair_tuple.market
 * 
 */
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_position_action, __pyx_v_position_action) < 0) __PYX_ERR(0, 505, __pyx_L1_error)
  __pyx_v_kwargs = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":507
 *             kwargs = {"expiration_ts": self._current_timestamp + expiration_seconds,
 *                       "position_action": position_action}
 *             ConnectorBase market = market_trading_pair_tuple.market             # <<<<<<<<<<<<<<
 * 
 *         if market not in self._sb_markets:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 507, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase))))) __PYX_ERR(0, 507, __pyx_L1_error)
  __pyx_v_market = ((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":509
 *             ConnectorBase market = market_trading_pair_tuple.market
 * 
 *         if market not in self._sb_markets:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Market object for sell order is not in the whitelisted markets set.")
 * 
 */
  if (unlikely(__pyx_v_self->_sb_markets == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 509, __pyx_L1_error)
  }
  __pyx_t_3 = (__Pyx_PySet_ContainsTF(((PyObject *)__pyx_v_market), __pyx_v_self->_sb_markets, Py_NE)); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 509, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_3 != 0);
  if (unlikely(__pyx_t_1)) {

    /* "hummingbot/strategy/strategy_base.pyx":510
 * 
 *         if market not in self._sb_markets:
 *             raise ValueError(f"Market object for sell order is not in the whitelisted markets set.")             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 510, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 510, __pyx_L1_error)

    /* "hummingbot/strategy/strategy_base.pyx":509
 *             ConnectorBase market = market_trading_pair_tuple.market
 * 
 *         if market not in self._sb_markets:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Market object for sell order is not in the whitelisted markets set.")
 * 
 */
  }

  /* "hummingbot/strategy/strategy_base.pyx":513
 * 
 *         cdef:
 *             str order_id = market.c_sell(market_trading_pair_tuple.trading_pair, amount,             # <<<<<<<<<<<<<<
 *                                          order_type=order_type, price=price, kwargs=kwargs)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_trading_pair_tuple, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 513, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":514
 *         cdef:
 *             str order_id = market.c_sell(market_trading_pair_tuple.trading_pair, amount,
 *                                          order_type=order_type, price=price, kwargs=kwargs)             # <<<<<<<<<<<<<<
 * 
 *         # Start order tracking
 */
  if (!(likely(PyDict_CheckExact(__pyx_v_kwargs)) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_v_kwargs))) __PYX_ERR(0, 514, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":513
 * 
 *         cdef:
 *             str order_id = market.c_sell(market_trading_pair_tuple.trading_pair, amount,             # <<<<<<<<<<<<<<
 *                                          order_type=order_type, price=price, kwargs=kwargs)
 * 
 */
  __pyx_t_6.__pyx_n = 3;
  __pyx_t_6.order_type = __pyx_v_order_type;
  __pyx_t_6.price = __pyx_v_price;
  __pyx_t_6.kwargs = ((PyObject*)__pyx_v_kwargs);
  __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_sell(__pyx_v_market, ((PyObject*)__pyx_t_2), __pyx_v_amount, &__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_order_id = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":517
 * 
 *         # Start order tracking
 *         if order_type.is_limit_type():             # <<<<<<<<<<<<<<
 *             self.c_start_tracking_limit_order(market_trading_pair_tuple, order_id, False, price, amount)
 *         elif order_type == OrderType.MARKET:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_type, __pyx_n_s_is_limit_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_8 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_7, };
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 517, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_1) {

    /* "hummingbot/strategy/strategy_base.pyx":518
 *         # Start order tracking
 *         if order_type.is_limit_type():
 *             self.c_start_tracking_limit_order(market_trading_pair_tuple, order_id, False, price, amount)             # <<<<<<<<<<<<<<
 *         elif order_type == OrderType.MARKET:
 *             self.c_start_tracking_market_order(market_trading_pair_tuple, order_id, False, amount)
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_start_tracking_limit_order(__pyx_v_self, __pyx_v_market_trading_pair_tuple, __pyx_v_order_id, 0, __pyx_v_price, __pyx_v_amount); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 518, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":517
 * 
 *         # Start order tracking
 *         if order_type.is_limit_type():             # <<<<<<<<<<<<<<
 *             self.c_start_tracking_limit_order(market_trading_pair_tuple, order_id, False, price, amount)
 *         elif order_type == OrderType.MARKET:
 */
    goto __pyx_L8;
  }

  /* "hummingbot/strategy/strategy_base.pyx":519
 *         if order_type.is_limit_type():
 *             self.c_start_tracking_limit_order(market_trading_pair_tuple, order_id, False, price, amount)
 *         elif order_type == OrderType.MARKET:             # <<<<<<<<<<<<<<
 *             self.c_start_tracking_market_order(market_trading_pair_tuple, order_id, False, amount)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyObject_RichCompare(__pyx_v_order_type, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 519, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_1) {

    /* "hummingbot/strategy/strategy_base.pyx":520
 *             self.c_start_tracking_limit_order(market_trading_pair_tuple, order_id, False, price, amount)
 *         elif order_type == OrderType.MARKET:
 *             self.c_start_tracking_market_order(market_trading_pair_tuple, order_id, False, amount)             # <<<<<<<<<<<<<<
 * 
 *         return order_id
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_start_tracking_market_order(__pyx_v_self, __pyx_v_market_trading_pair_tuple, __pyx_v_order_id, 0, __pyx_v_amount); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":519
 *         if order_type.is_limit_type():
 *             self.c_start_tracking_limit_order(market_trading_pair_tuple, order_id, False, price, amount)
 *         elif order_type == OrderType.MARKET:             # <<<<<<<<<<<<<<
 *             self.c_start_tracking_market_order(market_trading_pair_tuple, order_id, False, amount)
 * 
 */
  }
  __pyx_L8:;

  /* "hummingbot/strategy/strategy_base.pyx":522
 *             self.c_start_tracking_market_order(market_trading_pair_tuple, order_id, False, amount)
 * 
 *         return order_id             # <<<<<<<<<<<<<<
 * 
 *     cdef c_cancel_order(self, object market_trading_pair_tuple, str order_id):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_order_id);
  __pyx_r = __pyx_v_order_id;
  goto __pyx_L0;

  /* "hummingbot/strategy/strategy_base.pyx":493
 *                                                 position_action)
 * 
 *     cdef str c_sell_with_specific_market(self, object market_trading_pair_tuple, object amount,             # <<<<<<<<<<<<<<
 *                                          object order_type=OrderType.MARKET,
 *                                          object price=s_decimal_nan,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.c_sell_with_specific_market", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_kwargs);
  __Pyx_XDECREF((PyObject *)__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":524
 *         return order_id
 * 
 *     cdef c_cancel_order(self, object market_trading_pair_tuple, str order_id):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ConnectorBase market = market_trading_pair_tuple.market
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_cancel_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuple, PyObject *__pyx_v_order_id) {
  struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *__pyx_v_market = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_cancel_order", 0);

  /* "hummingbot/strategy/strategy_base.pyx":526
 *     cdef c_cancel_order(self, object market_trading_pair_tuple, str order_id):
 *         cdef:
 *             ConnectorBase market = market_trading_pair_tuple.market             # <<<<<<<<<<<<<<
 * 
 *         if self._sb_order_tracker.c_check_and_track_cancel(order_id):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_trading_pair_tuple, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 526, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase))))) __PYX_ERR(0, 526, __pyx_L1_error)
  __pyx_v_market = ((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":528
 *             ConnectorBase market = market_trading_pair_tuple.market
 * 
 *         if self._sb_order_tracker.c_check_and_track_cancel(order_id):             # <<<<<<<<<<<<<<
 *             self.log_with_clock(
 *                 logging.INFO,
 */
  __pyx_t_2 = (((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->_sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_check_and_track_cancel(__pyx_v_self->_sb_order_tracker, __pyx_v_order_id) != 0);
  if (__pyx_t_2) {

    /* "hummingbot/strategy/strategy_base.pyx":529
 * 
 *         if self._sb_order_tracker.c_check_and_track_cancel(order_id):
 *             self.log_with_clock(             # <<<<<<<<<<<<<<
 *                 logging.INFO,
 *                 f"({market_trading_pair_tuple.trading_pair}) Cancelling the limit order {order_id}."
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "hummingbot/strategy/strategy_base.pyx":530
 *         if self._sb_order_tracker.c_check_and_track_cancel(order_id):
 *             self.log_with_clock(
 *                 logging.INFO,             # <<<<<<<<<<<<<<
 *                 f"({market_trading_pair_tuple.trading_pair}) Cancelling the limit order {order_id}."
 *             )
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logging); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_INFO); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":531
 *             self.log_with_clock(
 *                 logging.INFO,
 *                 f"({market_trading_pair_tuple.trading_pair}) Cancelling the limit order {order_id}."             # <<<<<<<<<<<<<<
 *             )
 *             market.c_cancel(market_trading_pair_tuple.trading_pair, order_id)
 */
    __pyx_t_4 = PyTuple_New(5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = 0;
    __pyx_t_7 = 127;
    __Pyx_INCREF(__pyx_kp_u__30);
    __pyx_t_6 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__30);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u__30);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_trading_pair_tuple, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_8, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_kp_u_Cancelling_the_limit_order);
    __pyx_t_6 += 29;
    __Pyx_GIVEREF(__pyx_kp_u_Cancelling_the_limit_order);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_Cancelling_the_limit_order);
    __pyx_t_9 = __Pyx_PyUnicode_Unicode(__pyx_v_order_id); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_9);
    __pyx_t_9 = 0;
    __Pyx_INCREF(__pyx_kp_u__31);
    __pyx_t_6 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__31);
    PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u__31);
    __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_4, 5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 531, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_10 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_5, __pyx_t_9};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_10, 2+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 529, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":533
 *                 f"({market_trading_pair_tuple.trading_pair}) Cancelling the limit order {order_id}."
 *             )
 *             market.c_cancel(market_trading_pair_tuple.trading_pair, order_id)             # <<<<<<<<<<<<<<
 * 
 *     def cancel_order(self, market_trading_pair_tuple: MarketTradingPairTuple, order_id: str):
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_trading_pair_tuple, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 533, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 533, __pyx_L1_error)
    __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_cancel(__pyx_v_market, ((PyObject*)__pyx_t_1), __pyx_v_order_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 533, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":528
 *             ConnectorBase market = market_trading_pair_tuple.market
 * 
 *         if self._sb_order_tracker.c_check_and_track_cancel(order_id):             # <<<<<<<<<<<<<<
 *             self.log_with_clock(
 *                 logging.INFO,
 */
  }

  /* "hummingbot/strategy/strategy_base.pyx":524
 *         return order_id
 * 
 *     cdef c_cancel_order(self, object market_trading_pair_tuple, str order_id):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ConnectorBase market = market_trading_pair_tuple.market
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.c_cancel_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_market);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":535
 *             market.c_cancel(market_trading_pair_tuple.trading_pair, order_id)
 * 
 *     def cancel_order(self, market_trading_pair_tuple: MarketTradingPairTuple, order_id: str):             # <<<<<<<<<<<<<<
 *         self.c_cancel_order(market_trading_pair_tuple, order_id)
 *     # ----------------------------------------------------------------------------------------------------------
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_29cancel_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_29cancel_order = {"cancel_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_29cancel_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_29cancel_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_market_trading_pair_tuple = 0;
  PyObject *__pyx_v_order_id = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_order (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_trading_pair_tuple,&__pyx_n_s_order_id,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_trading_pair_tuple,&__pyx_n_s_order_id,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_market_trading_pair_tuple)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 535, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_id)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 535, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("cancel_order", 1, 2, 2, 1); __PYX_ERR(0, 535, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "cancel_order") < 0)) __PYX_ERR(0, 535, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_market_trading_pair_tuple = values[0];
    __pyx_v_order_id = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cancel_order", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 535, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.cancel_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order_id), (&PyUnicode_Type), 1, "order_id", 1))) __PYX_ERR(0, 535, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_28cancel_order(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_trading_pair_tuple, __pyx_v_order_id);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_28cancel_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_trading_pair_tuple, PyObject *__pyx_v_order_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cancel_order", 0);

  /* "hummingbot/strategy/strategy_base.pyx":536
 * 
 *     def cancel_order(self, market_trading_pair_tuple: MarketTradingPairTuple, order_id: str):
 *         self.c_cancel_order(market_trading_pair_tuple, order_id)             # <<<<<<<<<<<<<<
 *     # ----------------------------------------------------------------------------------------------------------
 *     # </editor-fold>
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_cancel_order(__pyx_v_self, __pyx_v_market_trading_pair_tuple, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 536, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":535
 *             market.c_cancel(market_trading_pair_tuple.trading_pair, order_id)
 * 
 *     def cancel_order(self, market_trading_pair_tuple: MarketTradingPairTuple, order_id: str):             # <<<<<<<<<<<<<<
 *         self.c_cancel_order(market_trading_pair_tuple, order_id)
 *     # ----------------------------------------------------------------------------------------------------------
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.cancel_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":544
 *     # classes.
 *     # ----------------------------------------------------------------------------------------------------------
 *     cdef c_start_tracking_limit_order(self, object market_pair, str order_id, bint is_buy, object price,             # <<<<<<<<<<<<<<
 *                                       object quantity):
 *         self._sb_order_tracker.c_start_tracking_limit_order(market_pair, order_id, is_buy, price, quantity)
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_start_tracking_limit_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair, PyObject *__pyx_v_order_id, int __pyx_v_is_buy, PyObject *__pyx_v_price, PyObject *__pyx_v_quantity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_start_tracking_limit_order", 0);

  /* "hummingbot/strategy/strategy_base.pyx":546
 *     cdef c_start_tracking_limit_order(self, object market_pair, str order_id, bint is_buy, object price,
 *                                       object quantity):
 *         self._sb_order_tracker.c_start_tracking_limit_order(market_pair, order_id, is_buy, price, quantity)             # <<<<<<<<<<<<<<
 * 
 *     def start_tracking_limit_order(self, market_pair: MarketTradingPairTuple, order_id: str, is_buy: bool, price: Decimal,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->_sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_start_tracking_limit_order(__pyx_v_self->_sb_order_tracker, __pyx_v_market_pair, __pyx_v_order_id, __pyx_v_is_buy, __pyx_v_price, __pyx_v_quantity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":544
 *     # classes.
 *     # ----------------------------------------------------------------------------------------------------------
 *     cdef c_start_tracking_limit_order(self, object market_pair, str order_id, bint is_buy, object price,             # <<<<<<<<<<<<<<
 *                                       object quantity):
 *         self._sb_order_tracker.c_start_tracking_limit_order(market_pair, order_id, is_buy, price, quantity)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.c_start_tracking_limit_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":548
 *         self._sb_order_tracker.c_start_tracking_limit_order(market_pair, order_id, is_buy, price, quantity)
 * 
 *     def start_tracking_limit_order(self, market_pair: MarketTradingPairTuple, order_id: str, is_buy: bool, price: Decimal,             # <<<<<<<<<<<<<<
 *                                    quantity: Decimal):
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_31start_tracking_limit_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_31start_tracking_limit_order = {"start_tracking_limit_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_31start_tracking_limit_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_31start_tracking_limit_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_market_pair = 0;
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_is_buy = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_v_quantity = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start_tracking_limit_order (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pair,&__pyx_n_s_order_id,&__pyx_n_s_is_buy,&__pyx_n_s_price,&__pyx_n_s_quantity,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pair,&__pyx_n_s_order_id,&__pyx_n_s_is_buy,&__pyx_n_s_price,&__pyx_n_s_quantity,0};
    #endif
    PyObject* values[5] = {0,0,0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_market_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 548, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_id)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 548, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("start_tracking_limit_order", 1, 5, 5, 1); __PYX_ERR(0, 548, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_is_buy)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 548, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("start_tracking_limit_order", 1, 5, 5, 2); __PYX_ERR(0, 548, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_price)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 548, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("start_tracking_limit_order", 1, 5, 5, 3); __PYX_ERR(0, 548, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_quantity)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 548, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("start_tracking_limit_order", 1, 5, 5, 4); __PYX_ERR(0, 548, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "start_tracking_limit_order") < 0)) __PYX_ERR(0, 548, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 5)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
    }
    __pyx_v_market_pair = values[0];
    __pyx_v_order_id = ((PyObject*)values[1]);
    __pyx_v_is_buy = values[2];
    __pyx_v_price = values[3];
    __pyx_v_quantity = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("start_tracking_limit_order", 1, 5, 5, __pyx_nargs); __PYX_ERR(0, 548, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.start_tracking_limit_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order_id), (&PyUnicode_Type), 1, "order_id", 1))) __PYX_ERR(0, 548, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_30start_tracking_limit_order(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_pair, __pyx_v_order_id, __pyx_v_is_buy, __pyx_v_price, __pyx_v_quantity);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_30start_tracking_limit_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair, PyObject *__pyx_v_order_id, PyObject *__pyx_v_is_buy, PyObject *__pyx_v_price, PyObject *__pyx_v_quantity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("start_tracking_limit_order", 0);

  /* "hummingbot/strategy/strategy_base.pyx":551
 *                                    quantity: Decimal):
 * 
 *         self.c_start_tracking_limit_order(market_pair, order_id, is_buy, price, quantity)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_stop_tracking_limit_order(self, object market_pair, str order_id):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_is_buy); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 551, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_start_tracking_limit_order(__pyx_v_self, __pyx_v_market_pair, __pyx_v_order_id, __pyx_t_1, __pyx_v_price, __pyx_v_quantity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 551, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":548
 *         self._sb_order_tracker.c_start_tracking_limit_order(market_pair, order_id, is_buy, price, quantity)
 * 
 *     def start_tracking_limit_order(self, market_pair: MarketTradingPairTuple, order_id: str, is_buy: bool, price: Decimal,             # <<<<<<<<<<<<<<
 *                                    quantity: Decimal):
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.start_tracking_limit_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":553
 *         self.c_start_tracking_limit_order(market_pair, order_id, is_buy, price, quantity)
 * 
 *     cdef c_stop_tracking_limit_order(self, object market_pair, str order_id):             # <<<<<<<<<<<<<<
 *         self._sb_order_tracker.c_stop_tracking_limit_order(market_pair, order_id)
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_stop_tracking_limit_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair, PyObject *__pyx_v_order_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_stop_tracking_limit_order", 0);

  /* "hummingbot/strategy/strategy_base.pyx":554
 * 
 *     cdef c_stop_tracking_limit_order(self, object market_pair, str order_id):
 *         self._sb_order_tracker.c_stop_tracking_limit_order(market_pair, order_id)             # <<<<<<<<<<<<<<
 * 
 *     def stop_tracking_limit_order(self, market_pair: MarketTradingPairTuple, order_id: str):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->_sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_stop_tracking_limit_order(__pyx_v_self->_sb_order_tracker, __pyx_v_market_pair, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":553
 *         self.c_start_tracking_limit_order(market_pair, order_id, is_buy, price, quantity)
 * 
 *     cdef c_stop_tracking_limit_order(self, object market_pair, str order_id):             # <<<<<<<<<<<<<<
 *         self._sb_order_tracker.c_stop_tracking_limit_order(market_pair, order_id)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.c_stop_tracking_limit_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":556
 *         self._sb_order_tracker.c_stop_tracking_limit_order(market_pair, order_id)
 * 
 *     def stop_tracking_limit_order(self, market_pair: MarketTradingPairTuple, order_id: str):             # <<<<<<<<<<<<<<
 *         self.c_stop_tracking_limit_order(market_pair, order_id)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_33stop_tracking_limit_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_33stop_tracking_limit_order = {"stop_tracking_limit_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_33stop_tracking_limit_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_33stop_tracking_limit_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_market_pair = 0;
  PyObject *__pyx_v_order_id = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop_tracking_limit_order (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pair,&__pyx_n_s_order_id,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pair,&__pyx_n_s_order_id,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_market_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 556, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_id)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 556, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("stop_tracking_limit_order", 1, 2, 2, 1); __PYX_ERR(0, 556, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "stop_tracking_limit_order") < 0)) __PYX_ERR(0, 556, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_market_pair = values[0];
    __pyx_v_order_id = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stop_tracking_limit_order", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 556, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.stop_tracking_limit_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order_id), (&PyUnicode_Type), 1, "order_id", 1))) __PYX_ERR(0, 556, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_32stop_tracking_limit_order(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_pair, __pyx_v_order_id);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_32stop_tracking_limit_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair, PyObject *__pyx_v_order_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stop_tracking_limit_order", 0);

  /* "hummingbot/strategy/strategy_base.pyx":557
 * 
 *     def stop_tracking_limit_order(self, market_pair: MarketTradingPairTuple, order_id: str):
 *         self.c_stop_tracking_limit_order(market_pair, order_id)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_start_tracking_market_order(self, object market_pair, str order_id, bint is_buy, object quantity):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_stop_tracking_limit_order(__pyx_v_self, __pyx_v_market_pair, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 557, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":556
 *         self._sb_order_tracker.c_stop_tracking_limit_order(market_pair, order_id)
 * 
 *     def stop_tracking_limit_order(self, market_pair: MarketTradingPairTuple, order_id: str):             # <<<<<<<<<<<<<<
 *         self.c_stop_tracking_limit_order(market_pair, order_id)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.stop_tracking_limit_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":559
 *         self.c_stop_tracking_limit_order(market_pair, order_id)
 * 
 *     cdef c_start_tracking_market_order(self, object market_pair, str order_id, bint is_buy, object quantity):             # <<<<<<<<<<<<<<
 *         self._sb_order_tracker.c_start_tracking_market_order(market_pair, order_id, is_buy, quantity)
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_start_tracking_market_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair, PyObject *__pyx_v_order_id, int __pyx_v_is_buy, PyObject *__pyx_v_quantity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_start_tracking_market_order", 0);

  /* "hummingbot/strategy/strategy_base.pyx":560
 * 
 *     cdef c_start_tracking_market_order(self, object market_pair, str order_id, bint is_buy, object quantity):
 *         self._sb_order_tracker.c_start_tracking_market_order(market_pair, order_id, is_buy, quantity)             # <<<<<<<<<<<<<<
 * 
 *     def start_tracking_market_order(self, market_pair: MarketTradingPairTuple, order_id: str, is_buy: bool, quantity: Decimal):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->_sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_start_tracking_market_order(__pyx_v_self->_sb_order_tracker, __pyx_v_market_pair, __pyx_v_order_id, __pyx_v_is_buy, __pyx_v_quantity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 560, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":559
 *         self.c_stop_tracking_limit_order(market_pair, order_id)
 * 
 *     cdef c_start_tracking_market_order(self, object market_pair, str order_id, bint is_buy, object quantity):             # <<<<<<<<<<<<<<
 *         self._sb_order_tracker.c_start_tracking_market_order(market_pair, order_id, is_buy, quantity)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.c_start_tracking_market_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":562
 *         self._sb_order_tracker.c_start_tracking_market_order(market_pair, order_id, is_buy, quantity)
 * 
 *     def start_tracking_market_order(self, market_pair: MarketTradingPairTuple, order_id: str, is_buy: bool, quantity: Decimal):             # <<<<<<<<<<<<<<
 *         self.c_start_tracking_market_order(market_pair, order_id, is_buy, quantity)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_35start_tracking_market_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_35start_tracking_market_order = {"start_tracking_market_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_35start_tracking_market_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_35start_tracking_market_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_market_pair = 0;
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_is_buy = 0;
  PyObject *__pyx_v_quantity = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start_tracking_market_order (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pair,&__pyx_n_s_order_id,&__pyx_n_s_is_buy,&__pyx_n_s_quantity,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pair,&__pyx_n_s_order_id,&__pyx_n_s_is_buy,&__pyx_n_s_quantity,0};
    #endif
    PyObject* values[4] = {0,0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_market_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 562, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_id)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 562, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("start_tracking_market_order", 1, 4, 4, 1); __PYX_ERR(0, 562, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_is_buy)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 562, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("start_tracking_market_order", 1, 4, 4, 2); __PYX_ERR(0, 562, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_quantity)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 562, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("start_tracking_market_order", 1, 4, 4, 3); __PYX_ERR(0, 562, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "start_tracking_market_order") < 0)) __PYX_ERR(0, 562, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
    }
    __pyx_v_market_pair = values[0];
    __pyx_v_order_id = ((PyObject*)values[1]);
    __pyx_v_is_buy = values[2];
    __pyx_v_quantity = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("start_tracking_market_order", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 562, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.start_tracking_market_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order_id), (&PyUnicode_Type), 1, "order_id", 1))) __PYX_ERR(0, 562, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_34start_tracking_market_order(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_pair, __pyx_v_order_id, __pyx_v_is_buy, __pyx_v_quantity);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_34start_tracking_market_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair, PyObject *__pyx_v_order_id, PyObject *__pyx_v_is_buy, PyObject *__pyx_v_quantity) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("start_tracking_market_order", 0);

  /* "hummingbot/strategy/strategy_base.pyx":563
 * 
 *     def start_tracking_market_order(self, market_pair: MarketTradingPairTuple, order_id: str, is_buy: bool, quantity: Decimal):
 *         self.c_start_tracking_market_order(market_pair, order_id, is_buy, quantity)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_stop_tracking_market_order(self, object market_pair, str order_id):
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_is_buy); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 563, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_start_tracking_market_order(__pyx_v_self, __pyx_v_market_pair, __pyx_v_order_id, __pyx_t_1, __pyx_v_quantity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":562
 *         self._sb_order_tracker.c_start_tracking_market_order(market_pair, order_id, is_buy, quantity)
 * 
 *     def start_tracking_market_order(self, market_pair: MarketTradingPairTuple, order_id: str, is_buy: bool, quantity: Decimal):             # <<<<<<<<<<<<<<
 *         self.c_start_tracking_market_order(market_pair, order_id, is_buy, quantity)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.start_tracking_market_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":565
 *         self.c_start_tracking_market_order(market_pair, order_id, is_buy, quantity)
 * 
 *     cdef c_stop_tracking_market_order(self, object market_pair, str order_id):             # <<<<<<<<<<<<<<
 *         self._sb_order_tracker.c_stop_tracking_market_order(market_pair, order_id)
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_stop_tracking_market_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair, PyObject *__pyx_v_order_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_stop_tracking_market_order", 0);

  /* "hummingbot/strategy/strategy_base.pyx":566
 * 
 *     cdef c_stop_tracking_market_order(self, object market_pair, str order_id):
 *         self._sb_order_tracker.c_stop_tracking_market_order(market_pair, order_id)             # <<<<<<<<<<<<<<
 * 
 *     def stop_tracking_market_order(self, market_pair: MarketTradingPairTuple, order_id: str):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->_sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_stop_tracking_market_order(__pyx_v_self->_sb_order_tracker, __pyx_v_market_pair, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":565
 *         self.c_start_tracking_market_order(market_pair, order_id, is_buy, quantity)
 * 
 *     cdef c_stop_tracking_market_order(self, object market_pair, str order_id):             # <<<<<<<<<<<<<<
 *         self._sb_order_tracker.c_stop_tracking_market_order(market_pair, order_id)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.c_stop_tracking_market_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":568
 *         self._sb_order_tracker.c_stop_tracking_market_order(market_pair, order_id)
 * 
 *     def stop_tracking_market_order(self, market_pair: MarketTradingPairTuple, order_id: str):             # <<<<<<<<<<<<<<
 *         self.c_stop_tracking_market_order(market_pair, order_id)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_37stop_tracking_market_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_37stop_tracking_market_order = {"stop_tracking_market_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_37stop_tracking_market_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_37stop_tracking_market_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_market_pair = 0;
  PyObject *__pyx_v_order_id = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop_tracking_market_order (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pair,&__pyx_n_s_order_id,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pair,&__pyx_n_s_order_id,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_market_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 568, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_id)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 568, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("stop_tracking_market_order", 1, 2, 2, 1); __PYX_ERR(0, 568, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "stop_tracking_market_order") < 0)) __PYX_ERR(0, 568, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_market_pair = values[0];
    __pyx_v_order_id = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stop_tracking_market_order", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 568, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.stop_tracking_market_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order_id), (&PyUnicode_Type), 1, "order_id", 1))) __PYX_ERR(0, 568, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_36stop_tracking_market_order(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_pair, __pyx_v_order_id);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_36stop_tracking_market_order(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair, PyObject *__pyx_v_order_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stop_tracking_market_order", 0);

  /* "hummingbot/strategy/strategy_base.pyx":569
 * 
 *     def stop_tracking_market_order(self, market_pair: MarketTradingPairTuple, order_id: str):
 *         self.c_stop_tracking_market_order(market_pair, order_id)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_track_restored_orders(self, object market_pair):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_stop_tracking_market_order(__pyx_v_self, __pyx_v_market_pair, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":568
 *         self._sb_order_tracker.c_stop_tracking_market_order(market_pair, order_id)
 * 
 *     def stop_tracking_market_order(self, market_pair: MarketTradingPairTuple, order_id: str):             # <<<<<<<<<<<<<<
 *         self.c_stop_tracking_market_order(market_pair, order_id)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.stop_tracking_market_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":571
 *         self.c_stop_tracking_market_order(market_pair, order_id)
 * 
 *     cdef c_track_restored_orders(self, object market_pair):             # <<<<<<<<<<<<<<
 *         cdef:
 *             list limit_orders = market_pair.market.limit_orders
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_track_restored_orders(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  PyObject *__pyx_v_limit_orders = 0;
  PyObject *__pyx_v_restored_order_ids = 0;
  PyObject *__pyx_v_order = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_track_restored_orders", 0);

  /* "hummingbot/strategy/strategy_base.pyx":573
 *     cdef c_track_restored_orders(self, object market_pair):
 *         cdef:
 *             list limit_orders = market_pair.market.limit_orders             # <<<<<<<<<<<<<<
 *             list restored_order_ids = []
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_pair, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_limit_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 573, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyList_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_t_2))) __PYX_ERR(0, 573, __pyx_L1_error)
  __pyx_v_limit_orders = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":574
 *         cdef:
 *             list limit_orders = market_pair.market.limit_orders
 *             list restored_order_ids = []             # <<<<<<<<<<<<<<
 * 
 *         for order in limit_orders:
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 574, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_restored_order_ids = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":576
 *             list restored_order_ids = []
 * 
 *         for order in limit_orders:             # <<<<<<<<<<<<<<
 *             restored_order_ids.append(order.client_order_id)
 *             self.c_start_tracking_limit_order(market_pair,
 */
  if (unlikely(__pyx_v_limit_orders == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 576, __pyx_L1_error)
  }
  __pyx_t_2 = __pyx_v_limit_orders; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 576, __pyx_L1_error)
    #else
    __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 576, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_order, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":577
 * 
 *         for order in limit_orders:
 *             restored_order_ids.append(order.client_order_id)             # <<<<<<<<<<<<<<
 *             self.c_start_tracking_limit_order(market_pair,
 *                                               order.client_order_id,
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_restored_order_ids, __pyx_t_1); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(0, 577, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":579
 *             restored_order_ids.append(order.client_order_id)
 *             self.c_start_tracking_limit_order(market_pair,
 *                                               order.client_order_id,             # <<<<<<<<<<<<<<
 *                                               order.is_buy,
 *                                               order.price,
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 579, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 579, __pyx_L1_error)

    /* "hummingbot/strategy/strategy_base.pyx":580
 *             self.c_start_tracking_limit_order(market_pair,
 *                                               order.client_order_id,
 *                                               order.is_buy,             # <<<<<<<<<<<<<<
 *                                               order.price,
 *                                               order.quantity)
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_is_buy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 580, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 580, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":581
 *                                               order.client_order_id,
 *                                               order.is_buy,
 *                                               order.price,             # <<<<<<<<<<<<<<
 *                                               order.quantity)
 *         return restored_order_ids
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_price); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 581, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "hummingbot/strategy/strategy_base.pyx":582
 *                                               order.is_buy,
 *                                               order.price,
 *                                               order.quantity)             # <<<<<<<<<<<<<<
 *         return restored_order_ids
 * 
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_quantity); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 582, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "hummingbot/strategy/strategy_base.pyx":578
 *         for order in limit_orders:
 *             restored_order_ids.append(order.client_order_id)
 *             self.c_start_tracking_limit_order(market_pair,             # <<<<<<<<<<<<<<
 *                                               order.client_order_id,
 *                                               order.is_buy,
 */
    __pyx_t_8 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_start_tracking_limit_order(__pyx_v_self, __pyx_v_market_pair, ((PyObject*)__pyx_t_1), __pyx_t_6, __pyx_t_5, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 578, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "hummingbot/strategy/strategy_base.pyx":576
 *             list restored_order_ids = []
 * 
 *         for order in limit_orders:             # <<<<<<<<<<<<<<
 *             restored_order_ids.append(order.client_order_id)
 *             self.c_start_tracking_limit_order(market_pair,
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":583
 *                                               order.price,
 *                                               order.quantity)
 *         return restored_order_ids             # <<<<<<<<<<<<<<
 * 
 *     def track_restored_orders(self, market_pair: MarketTradingPairTuple):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_restored_order_ids);
  __pyx_r = __pyx_v_restored_order_ids;
  goto __pyx_L0;

  /* "hummingbot/strategy/strategy_base.pyx":571
 *         self.c_stop_tracking_market_order(market_pair, order_id)
 * 
 *     cdef c_track_restored_orders(self, object market_pair):             # <<<<<<<<<<<<<<
 *         cdef:
 *             list limit_orders = market_pair.market.limit_orders
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.c_track_restored_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_limit_orders);
  __Pyx_XDECREF(__pyx_v_restored_order_ids);
  __Pyx_XDECREF(__pyx_v_order);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":585
 *         return restored_order_ids
 * 
 *     def track_restored_orders(self, market_pair: MarketTradingPairTuple):             # <<<<<<<<<<<<<<
 *         return self.c_track_restored_orders(market_pair)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_39track_restored_orders(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_39track_restored_orders = {"track_restored_orders", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_39track_restored_orders, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_39track_restored_orders(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_market_pair = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("track_restored_orders (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pair,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_pair,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_market_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 585, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "track_restored_orders") < 0)) __PYX_ERR(0, 585, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_market_pair = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("track_restored_orders", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 585, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.track_restored_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_38track_restored_orders(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_market_pair);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_38track_restored_orders(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_market_pair) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("track_restored_orders", 0);

  /* "hummingbot/strategy/strategy_base.pyx":586
 * 
 *     def track_restored_orders(self, market_pair: MarketTradingPairTuple):
 *         return self.c_track_restored_orders(market_pair)             # <<<<<<<<<<<<<<
 * 
 *     def notify_hb_app(self, msg: str):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_vtab)->c_track_restored_orders(__pyx_v_self, __pyx_v_market_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 586, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/strategy_base.pyx":585
 *         return restored_order_ids
 * 
 *     def track_restored_orders(self, market_pair: MarketTradingPairTuple):             # <<<<<<<<<<<<<<
 *         return self.c_track_restored_orders(market_pair)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.track_restored_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":588
 *         return self.c_track_restored_orders(market_pair)
 * 
 *     def notify_hb_app(self, msg: str):             # <<<<<<<<<<<<<<
 *         """
 *         Method called to display message on the Output Panel(upper left)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_41notify_hb_app(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_10hummingbot_8strategy_13strategy_base_12StrategyBase_40notify_hb_app, "\n        Method called to display message on the Output Panel(upper left)\n        :param msg: The message to be notified\n        ");
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_41notify_hb_app = {"notify_hb_app", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_41notify_hb_app, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_10hummingbot_8strategy_13strategy_base_12StrategyBase_40notify_hb_app};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_41notify_hb_app(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_msg = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("notify_hb_app (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_msg,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_msg,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_msg)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 588, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "notify_hb_app") < 0)) __PYX_ERR(0, 588, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_msg = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("notify_hb_app", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 588, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.notify_hb_app", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_msg), (&PyUnicode_Type), 1, "msg", 1))) __PYX_ERR(0, 588, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_40notify_hb_app(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_msg);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_40notify_hb_app(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_msg) {
  PyObject *__pyx_v_HummingbotApplication = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("notify_hb_app", 0);

  /* "hummingbot/strategy/strategy_base.pyx":593
 *         :param msg: The message to be notified
 *         """
 *         from hummingbot.client.hummingbot_application import HummingbotApplication             # <<<<<<<<<<<<<<
 *         HummingbotApplication.main_application()._notify(msg)
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_HummingbotApplication);
  __Pyx_GIVEREF(__pyx_n_s_HummingbotApplication);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_HummingbotApplication);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_client_hummingbot_app, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_HummingbotApplication); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 593, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_v_HummingbotApplication = __pyx_t_1;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":594
 *         """
 *         from hummingbot.client.hummingbot_application import HummingbotApplication
 *         HummingbotApplication.main_application()._notify(msg)             # <<<<<<<<<<<<<<
 * 
 *     def notify_hb_app_with_timestamp(self, msg: str):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_HummingbotApplication, __pyx_n_s_main_application); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_4, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_notify); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 594, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_msg};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 594, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":588
 *         return self.c_track_restored_orders(market_pair)
 * 
 *     def notify_hb_app(self, msg: str):             # <<<<<<<<<<<<<<
 *         """
 *         Method called to display message on the Output Panel(upper left)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.notify_hb_app", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_HummingbotApplication);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pyx":596
 *         HummingbotApplication.main_application()._notify(msg)
 * 
 *     def notify_hb_app_with_timestamp(self, msg: str):             # <<<<<<<<<<<<<<
 *         """
 *         Method called to display message on the Output Panel(upper left)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_43notify_hb_app_with_timestamp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_10hummingbot_8strategy_13strategy_base_12StrategyBase_42notify_hb_app_with_timestamp, "\n        Method called to display message on the Output Panel(upper left)\n        This implementation adds the timestamp as the first element of the notification\n        :param msg: The message to be notified\n        ");
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_43notify_hb_app_with_timestamp = {"notify_hb_app_with_timestamp", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_43notify_hb_app_with_timestamp, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_10hummingbot_8strategy_13strategy_base_12StrategyBase_42notify_hb_app_with_timestamp};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_43notify_hb_app_with_timestamp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_msg = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("notify_hb_app_with_timestamp (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_msg,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_msg,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_msg)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 596, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "notify_hb_app_with_timestamp") < 0)) __PYX_ERR(0, 596, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_msg = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("notify_hb_app_with_timestamp", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 596, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.notify_hb_app_with_timestamp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_msg), (&PyUnicode_Type), 1, "msg", 1))) __PYX_ERR(0, 596, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_42notify_hb_app_with_timestamp(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v_msg);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_42notify_hb_app_with_timestamp(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_msg) {
  PyObject *__pyx_v_timestamp = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("notify_hb_app_with_timestamp", 0);

  /* "hummingbot/strategy/strategy_base.pyx":602
 *         :param msg: The message to be notified
 *         """
 *         timestamp = pd.Timestamp.fromtimestamp(self._current_timestamp)             # <<<<<<<<<<<<<<
 *         self.notify_hb_app(f"({timestamp}) {msg}")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_Timestamp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_fromtimestamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyFloat_FromDouble(__pyx_v_self->__pyx_base._current_timestamp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 602, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 602, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_timestamp = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":603
 *         """
 *         timestamp = pd.Timestamp.fromtimestamp(self._current_timestamp)
 *         self.notify_hb_app(f"({timestamp}) {msg}")             # <<<<<<<<<<<<<<
 * 
 *     # ----------------------------------------------------------------------------------------------------------
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_notify_hb_app); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = 0;
  __pyx_t_7 = 127;
  __Pyx_INCREF(__pyx_kp_u__30);
  __pyx_t_6 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__30);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u__30);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_timestamp, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_7;
  __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__32);
  __pyx_t_6 += 2;
  __Pyx_GIVEREF(__pyx_kp_u__32);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u__32);
  __pyx_t_4 = __Pyx_PyUnicode_Unicode(__pyx_v_msg); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_7;
  __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_3, 4, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":596
 *         HummingbotApplication.main_application()._notify(msg)
 * 
 *     def notify_hb_app_with_timestamp(self, msg: str):             # <<<<<<<<<<<<<<
 *         """
 *         Method called to display message on the Output Panel(upper left)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.notify_hb_app_with_timestamp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_timestamp);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/strategy_base.pxd":23
 *         EventListener _sb_remove_range_position_order_listener
 *         bint _sb_delegate_lock
 *         public OrderTracker _sb_order_tracker             # <<<<<<<<<<<<<<
 * 
 *     cdef c_add_markets(self, list markets)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_17_sb_order_tracker_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_17_sb_order_tracker_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_17_sb_order_tracker___get__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_17_sb_order_tracker___get__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_self->_sb_order_tracker);
  __pyx_r = ((PyObject *)__pyx_v_self->_sb_order_tracker);
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_17_sb_order_tracker_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_17_sb_order_tracker_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_17_sb_order_tracker_2__set__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_17_sb_order_tracker_2__set__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  if (!(likely(((__pyx_v_value) == Py_None) || likely(__Pyx_TypeTest(__pyx_v_value, __pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker))))) __PYX_ERR(2, 23, __pyx_L1_error)
  __pyx_t_1 = __pyx_v_value;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_sb_order_tracker);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_sb_order_tracker);
  __pyx_v_self->_sb_order_tracker = ((struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase._sb_order_tracker.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_17_sb_order_tracker_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_17_sb_order_tracker_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_17_sb_order_tracker_4__del__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_17_sb_order_tracker_4__del__(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_sb_order_tracker);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_sb_order_tracker);
  __pyx_v_self->_sb_order_tracker = ((struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *)Py_None);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_45__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_45__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_45__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_45__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_44__reduce_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_44__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__events_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_47__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_47__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_47__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_47__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_46__setstate_cython__(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12StrategyBase_46__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__events_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.StrategyBase.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_BaseStrategyEventListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_1__pyx_unpickle_BaseStrategyEventListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_1__pyx_unpickle_BaseStrategyEventListener = {"__pyx_unpickle_BaseStrategyEventListener", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_1__pyx_unpickle_BaseStrategyEventListener, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_1__pyx_unpickle_BaseStrategyEventListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_BaseStrategyEventListener (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BaseStrategyEventListener", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BaseStrategyEventListener", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_BaseStrategyEventListener") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BaseStrategyEventListener", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_BaseStrategyEventListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base___pyx_unpickle_BaseStrategyEventListener(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base___pyx_unpickle_BaseStrategyEventListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BaseStrategyEventListener", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xdcceb2d) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = BaseStrategyEventListener.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = BaseStrategyEventListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xdc, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = BaseStrategyEventListener.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BaseStrategyEventListener__set_state(<BaseStrategyEventListener> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = BaseStrategyEventListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BaseStrategyEventListener__set_state(<BaseStrategyEventListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = BaseStrategyEventListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BaseStrategyEventListener__set_state(<BaseStrategyEventListener> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseStrategyEventListener__set_state(BaseStrategyEventListener __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_2 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_BaseStrategyEventListener__set_state(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = BaseStrategyEventListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BaseStrategyEventListener__set_state(<BaseStrategyEventListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BaseStrategyEventListener__set_state(<BaseStrategyEventListener> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_BaseStrategyEventListener__set_state(BaseStrategyEventListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_BaseStrategyEventListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_BaseStrategyEventListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_BaseStrategyEventListener__set_state(<BaseStrategyEventListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseStrategyEventListener__set_state(BaseStrategyEventListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_BaseStrategyEventListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int64_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BaseStrategyEventListener__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseStrategyEventListener__set_state(BaseStrategyEventListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_6pubsub_PubSub))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base._current_event_caller);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base._current_event_caller);
  __pyx_v___pyx_result->__pyx_base._current_event_caller = ((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base._current_event_tag = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->_owner);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->_owner);
  __pyx_v___pyx_result->_owner = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_BaseStrategyEventListener__set_state(BaseStrategyEventListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_10 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_BaseStrategyEventListener__set_state(BaseStrategyEventListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_BaseStrategyEventListener__set_state(<BaseStrategyEventListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseStrategyEventListener__set_state(BaseStrategyEventListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_BaseStrategyEventListener__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_BuyOrderCompletedListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_3__pyx_unpickle_BuyOrderCompletedListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_3__pyx_unpickle_BuyOrderCompletedListener = {"__pyx_unpickle_BuyOrderCompletedListener", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_3__pyx_unpickle_BuyOrderCompletedListener, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_3__pyx_unpickle_BuyOrderCompletedListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_BuyOrderCompletedListener (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BuyOrderCompletedListener", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BuyOrderCompletedListener", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_BuyOrderCompletedListener") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BuyOrderCompletedListener", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_BuyOrderCompletedListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_2__pyx_unpickle_BuyOrderCompletedListener(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_2__pyx_unpickle_BuyOrderCompletedListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BuyOrderCompletedListener", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xdcceb2d) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = BuyOrderCompletedListener.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = BuyOrderCompletedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xdc, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = BuyOrderCompletedListener.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BuyOrderCompletedListener__set_state(<BuyOrderCompletedListener> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = BuyOrderCompletedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BuyOrderCompletedListener__set_state(<BuyOrderCompletedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = BuyOrderCompletedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BuyOrderCompletedListener__set_state(<BuyOrderCompletedListener> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_BuyOrderCompletedListener__set_state(BuyOrderCompletedListener __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_2 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_BuyOrderCompletedListener__set_state(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = BuyOrderCompletedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BuyOrderCompletedListener__set_state(<BuyOrderCompletedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BuyOrderCompletedListener__set_state(<BuyOrderCompletedListener> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_BuyOrderCompletedListener__set_state(BuyOrderCompletedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_BuyOrderCompletedListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_BuyOrderCompletedListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_BuyOrderCompletedListener__set_state(<BuyOrderCompletedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BuyOrderCompletedListener__set_state(BuyOrderCompletedListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_BuyOrderCompletedListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int64_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BuyOrderCompletedListener__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_BuyOrderCompletedListener__set_state(BuyOrderCompletedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_6pubsub_PubSub))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller = ((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_tag = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __pyx_v___pyx_result->__pyx_base._owner = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_BuyOrderCompletedListener__set_state(BuyOrderCompletedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_10 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_BuyOrderCompletedListener__set_state(BuyOrderCompletedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_BuyOrderCompletedListener__set_state(<BuyOrderCompletedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BuyOrderCompletedListener__set_state(BuyOrderCompletedListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_BuyOrderCompletedListener__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_SellOrderCompletedListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_5__pyx_unpickle_SellOrderCompletedListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_5__pyx_unpickle_SellOrderCompletedListener = {"__pyx_unpickle_SellOrderCompletedListener", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_5__pyx_unpickle_SellOrderCompletedListener, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_5__pyx_unpickle_SellOrderCompletedListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_SellOrderCompletedListener (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_SellOrderCompletedListener", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_SellOrderCompletedListener", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_SellOrderCompletedListener") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_SellOrderCompletedListener", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_SellOrderCompletedListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_4__pyx_unpickle_SellOrderCompletedListener(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_4__pyx_unpickle_SellOrderCompletedListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_SellOrderCompletedListener", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xdcceb2d) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = SellOrderCompletedListener.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = SellOrderCompletedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xdc, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = SellOrderCompletedListener.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_SellOrderCompletedListener__set_state(<SellOrderCompletedListener> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = SellOrderCompletedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_SellOrderCompletedListener__set_state(<SellOrderCompletedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = SellOrderCompletedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_SellOrderCompletedListener__set_state(<SellOrderCompletedListener> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_SellOrderCompletedListener__set_state(SellOrderCompletedListener __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_2 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_SellOrderCompletedListener__set_state(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = SellOrderCompletedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_SellOrderCompletedListener__set_state(<SellOrderCompletedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_SellOrderCompletedListener__set_state(<SellOrderCompletedListener> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_SellOrderCompletedListener__set_state(SellOrderCompletedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_SellOrderCompletedListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_SellOrderCompletedListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_SellOrderCompletedListener__set_state(<SellOrderCompletedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_SellOrderCompletedListener__set_state(SellOrderCompletedListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_SellOrderCompletedListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int64_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_SellOrderCompletedListener__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_SellOrderCompletedListener__set_state(SellOrderCompletedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_6pubsub_PubSub))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller = ((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_tag = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __pyx_v___pyx_result->__pyx_base._owner = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_SellOrderCompletedListener__set_state(SellOrderCompletedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_10 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_SellOrderCompletedListener__set_state(SellOrderCompletedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_SellOrderCompletedListener__set_state(<SellOrderCompletedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_SellOrderCompletedListener__set_state(SellOrderCompletedListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_SellOrderCompletedListener__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_FundingPaymentCompletedListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_7__pyx_unpickle_FundingPaymentCompletedListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_7__pyx_unpickle_FundingPaymentCompletedListener = {"__pyx_unpickle_FundingPaymentCompletedListener", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_7__pyx_unpickle_FundingPaymentCompletedListener, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_7__pyx_unpickle_FundingPaymentCompletedListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_FundingPaymentCompletedListener (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_FundingPaymentCompletedListener", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_FundingPaymentCompletedListener", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_FundingPaymentCompletedListener") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_FundingPaymentCompletedListener", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_FundingPaymentCompletedListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_6__pyx_unpickle_FundingPaymentCompletedListener(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_6__pyx_unpickle_FundingPaymentCompletedListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_FundingPaymentCompletedListener", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xdcceb2d) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = FundingPaymentCompletedListener.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = FundingPaymentCompletedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xdc, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = FundingPaymentCompletedListener.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_FundingPaymentCompletedListener__set_state(<FundingPaymentCompletedListener> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = FundingPaymentCompletedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_FundingPaymentCompletedListener__set_state(<FundingPaymentCompletedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = FundingPaymentCompletedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_FundingPaymentCompletedListener__set_state(<FundingPaymentCompletedListener> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_FundingPaymentCompletedListener__set_state(FundingPaymentCompletedListener __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_2 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_FundingPaymentCompletedListener__set_state(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = FundingPaymentCompletedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_FundingPaymentCompletedListener__set_state(<FundingPaymentCompletedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_FundingPaymentCompletedListener__set_state(<FundingPaymentCompletedListener> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_FundingPaymentCompletedListener__set_state(FundingPaymentCompletedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_FundingPaymentCompletedListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_FundingPaymentCompletedListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_FundingPaymentCompletedListener__set_state(<FundingPaymentCompletedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_FundingPaymentCompletedListener__set_state(FundingPaymentCompletedListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_FundingPaymentCompletedListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int64_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_FundingPaymentCompletedListener__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_FundingPaymentCompletedListener__set_state(FundingPaymentCompletedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_6pubsub_PubSub))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller = ((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_tag = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __pyx_v___pyx_result->__pyx_base._owner = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_FundingPaymentCompletedListener__set_state(FundingPaymentCompletedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_10 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_FundingPaymentCompletedListener__set_state(FundingPaymentCompletedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_FundingPaymentCompletedListener__set_state(<FundingPaymentCompletedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_FundingPaymentCompletedListener__set_state(FundingPaymentCompletedListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_FundingPaymentCompletedListener__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_OrderFilledListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_9__pyx_unpickle_OrderFilledListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_9__pyx_unpickle_OrderFilledListener = {"__pyx_unpickle_OrderFilledListener", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_9__pyx_unpickle_OrderFilledListener, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_9__pyx_unpickle_OrderFilledListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_OrderFilledListener (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OrderFilledListener", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OrderFilledListener", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_OrderFilledListener") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OrderFilledListener", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_OrderFilledListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_8__pyx_unpickle_OrderFilledListener(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_8__pyx_unpickle_OrderFilledListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_OrderFilledListener", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xdcceb2d) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = OrderFilledListener.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = OrderFilledListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xdc, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = OrderFilledListener.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OrderFilledListener__set_state(<OrderFilledListener> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFilledListener), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = OrderFilledListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_OrderFilledListener__set_state(<OrderFilledListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = OrderFilledListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OrderFilledListener__set_state(<OrderFilledListener> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderFilledListener__set_state(OrderFilledListener __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_2 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_OrderFilledListener__set_state(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFilledListener *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = OrderFilledListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_OrderFilledListener__set_state(<OrderFilledListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OrderFilledListener__set_state(<OrderFilledListener> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_OrderFilledListener__set_state(OrderFilledListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_OrderFilledListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_OrderFilledListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_OrderFilledListener__set_state(<OrderFilledListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderFilledListener__set_state(OrderFilledListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_OrderFilledListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFilledListener *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int64_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_OrderFilledListener__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderFilledListener__set_state(OrderFilledListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_6pubsub_PubSub))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller = ((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_tag = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __pyx_v___pyx_result->__pyx_base._owner = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_OrderFilledListener__set_state(OrderFilledListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_10 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_OrderFilledListener__set_state(OrderFilledListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_OrderFilledListener__set_state(<OrderFilledListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderFilledListener__set_state(OrderFilledListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_OrderFilledListener__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_OrderFailedListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_11__pyx_unpickle_OrderFailedListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_11__pyx_unpickle_OrderFailedListener = {"__pyx_unpickle_OrderFailedListener", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_11__pyx_unpickle_OrderFailedListener, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_11__pyx_unpickle_OrderFailedListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_OrderFailedListener (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OrderFailedListener", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OrderFailedListener", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_OrderFailedListener") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OrderFailedListener", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_OrderFailedListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_10__pyx_unpickle_OrderFailedListener(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_10__pyx_unpickle_OrderFailedListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_OrderFailedListener", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xdcceb2d) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = OrderFailedListener.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = OrderFailedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xdc, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = OrderFailedListener.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OrderFailedListener__set_state(<OrderFailedListener> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFailedListener), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = OrderFailedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_OrderFailedListener__set_state(<OrderFailedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = OrderFailedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OrderFailedListener__set_state(<OrderFailedListener> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderFailedListener__set_state(OrderFailedListener __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_2 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_OrderFailedListener__set_state(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFailedListener *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = OrderFailedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_OrderFailedListener__set_state(<OrderFailedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OrderFailedListener__set_state(<OrderFailedListener> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_OrderFailedListener__set_state(OrderFailedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_OrderFailedListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_OrderFailedListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_OrderFailedListener__set_state(<OrderFailedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderFailedListener__set_state(OrderFailedListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_OrderFailedListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFailedListener *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int64_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_OrderFailedListener__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderFailedListener__set_state(OrderFailedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_6pubsub_PubSub))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller = ((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_tag = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __pyx_v___pyx_result->__pyx_base._owner = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_OrderFailedListener__set_state(OrderFailedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_10 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_OrderFailedListener__set_state(OrderFailedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_OrderFailedListener__set_state(<OrderFailedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderFailedListener__set_state(OrderFailedListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_OrderFailedListener__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_OrderCancelledListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_13__pyx_unpickle_OrderCancelledListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_13__pyx_unpickle_OrderCancelledListener = {"__pyx_unpickle_OrderCancelledListener", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_13__pyx_unpickle_OrderCancelledListener, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_13__pyx_unpickle_OrderCancelledListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_OrderCancelledListener (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OrderCancelledListener", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OrderCancelledListener", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_OrderCancelledListener") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OrderCancelledListener", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_OrderCancelledListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_12__pyx_unpickle_OrderCancelledListener(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_12__pyx_unpickle_OrderCancelledListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_OrderCancelledListener", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xdcceb2d) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = OrderCancelledListener.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = OrderCancelledListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xdc, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = OrderCancelledListener.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OrderCancelledListener__set_state(<OrderCancelledListener> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderCancelledListener), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = OrderCancelledListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_OrderCancelledListener__set_state(<OrderCancelledListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = OrderCancelledListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OrderCancelledListener__set_state(<OrderCancelledListener> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderCancelledListener__set_state(OrderCancelledListener __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_2 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_OrderCancelledListener__set_state(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderCancelledListener *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = OrderCancelledListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_OrderCancelledListener__set_state(<OrderCancelledListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OrderCancelledListener__set_state(<OrderCancelledListener> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_OrderCancelledListener__set_state(OrderCancelledListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_OrderCancelledListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_OrderCancelledListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_OrderCancelledListener__set_state(<OrderCancelledListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderCancelledListener__set_state(OrderCancelledListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_OrderCancelledListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderCancelledListener *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int64_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_OrderCancelledListener__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderCancelledListener__set_state(OrderCancelledListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_6pubsub_PubSub))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller = ((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_tag = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __pyx_v___pyx_result->__pyx_base._owner = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_OrderCancelledListener__set_state(OrderCancelledListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_10 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_OrderCancelledListener__set_state(OrderCancelledListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_OrderCancelledListener__set_state(<OrderCancelledListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderCancelledListener__set_state(OrderCancelledListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_OrderCancelledListener__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_OrderExpiredListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_15__pyx_unpickle_OrderExpiredListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_15__pyx_unpickle_OrderExpiredListener = {"__pyx_unpickle_OrderExpiredListener", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_15__pyx_unpickle_OrderExpiredListener, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_15__pyx_unpickle_OrderExpiredListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_OrderExpiredListener (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OrderExpiredListener", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OrderExpiredListener", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_OrderExpiredListener") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_OrderExpiredListener", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_OrderExpiredListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_14__pyx_unpickle_OrderExpiredListener(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_14__pyx_unpickle_OrderExpiredListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_OrderExpiredListener", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xdcceb2d) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = OrderExpiredListener.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = OrderExpiredListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xdc, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = OrderExpiredListener.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OrderExpiredListener__set_state(<OrderExpiredListener> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderExpiredListener), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = OrderExpiredListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_OrderExpiredListener__set_state(<OrderExpiredListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = OrderExpiredListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OrderExpiredListener__set_state(<OrderExpiredListener> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderExpiredListener__set_state(OrderExpiredListener __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_2 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_OrderExpiredListener__set_state(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderExpiredListener *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = OrderExpiredListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_OrderExpiredListener__set_state(<OrderExpiredListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_OrderExpiredListener__set_state(<OrderExpiredListener> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_OrderExpiredListener__set_state(OrderExpiredListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_OrderExpiredListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_OrderExpiredListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_OrderExpiredListener__set_state(<OrderExpiredListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderExpiredListener__set_state(OrderExpiredListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_OrderExpiredListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderExpiredListener *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int64_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_OrderExpiredListener__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderExpiredListener__set_state(OrderExpiredListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_6pubsub_PubSub))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller = ((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_tag = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __pyx_v___pyx_result->__pyx_base._owner = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_OrderExpiredListener__set_state(OrderExpiredListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_10 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_OrderExpiredListener__set_state(OrderExpiredListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_OrderExpiredListener__set_state(<OrderExpiredListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderExpiredListener__set_state(OrderExpiredListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_OrderExpiredListener__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_BuyOrderCreatedListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_17__pyx_unpickle_BuyOrderCreatedListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_17__pyx_unpickle_BuyOrderCreatedListener = {"__pyx_unpickle_BuyOrderCreatedListener", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_17__pyx_unpickle_BuyOrderCreatedListener, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_17__pyx_unpickle_BuyOrderCreatedListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_BuyOrderCreatedListener (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BuyOrderCreatedListener", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BuyOrderCreatedListener", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_BuyOrderCreatedListener") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_BuyOrderCreatedListener", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_BuyOrderCreatedListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_16__pyx_unpickle_BuyOrderCreatedListener(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_16__pyx_unpickle_BuyOrderCreatedListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BuyOrderCreatedListener", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xdcceb2d) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = BuyOrderCreatedListener.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = BuyOrderCreatedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xdc, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = BuyOrderCreatedListener.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BuyOrderCreatedListener__set_state(<BuyOrderCreatedListener> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = BuyOrderCreatedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BuyOrderCreatedListener__set_state(<BuyOrderCreatedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = BuyOrderCreatedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BuyOrderCreatedListener__set_state(<BuyOrderCreatedListener> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_BuyOrderCreatedListener__set_state(BuyOrderCreatedListener __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_2 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_BuyOrderCreatedListener__set_state(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = BuyOrderCreatedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_BuyOrderCreatedListener__set_state(<BuyOrderCreatedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_BuyOrderCreatedListener__set_state(<BuyOrderCreatedListener> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_BuyOrderCreatedListener__set_state(BuyOrderCreatedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_BuyOrderCreatedListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_BuyOrderCreatedListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_BuyOrderCreatedListener__set_state(<BuyOrderCreatedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BuyOrderCreatedListener__set_state(BuyOrderCreatedListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_BuyOrderCreatedListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int64_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_BuyOrderCreatedListener__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_BuyOrderCreatedListener__set_state(BuyOrderCreatedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_6pubsub_PubSub))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller = ((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_tag = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __pyx_v___pyx_result->__pyx_base._owner = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_BuyOrderCreatedListener__set_state(BuyOrderCreatedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_10 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_BuyOrderCreatedListener__set_state(BuyOrderCreatedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_BuyOrderCreatedListener__set_state(<BuyOrderCreatedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BuyOrderCreatedListener__set_state(BuyOrderCreatedListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_BuyOrderCreatedListener__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_SellOrderCreatedListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_19__pyx_unpickle_SellOrderCreatedListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_19__pyx_unpickle_SellOrderCreatedListener = {"__pyx_unpickle_SellOrderCreatedListener", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_19__pyx_unpickle_SellOrderCreatedListener, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_19__pyx_unpickle_SellOrderCreatedListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_SellOrderCreatedListener (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_SellOrderCreatedListener", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_SellOrderCreatedListener", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_SellOrderCreatedListener") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_SellOrderCreatedListener", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_SellOrderCreatedListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_18__pyx_unpickle_SellOrderCreatedListener(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_18__pyx_unpickle_SellOrderCreatedListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_SellOrderCreatedListener", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xdcceb2d) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = SellOrderCreatedListener.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = SellOrderCreatedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xdc, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = SellOrderCreatedListener.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_SellOrderCreatedListener__set_state(<SellOrderCreatedListener> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = SellOrderCreatedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_SellOrderCreatedListener__set_state(<SellOrderCreatedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = SellOrderCreatedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_SellOrderCreatedListener__set_state(<SellOrderCreatedListener> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_SellOrderCreatedListener__set_state(SellOrderCreatedListener __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_2 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_SellOrderCreatedListener__set_state(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = SellOrderCreatedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_SellOrderCreatedListener__set_state(<SellOrderCreatedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_SellOrderCreatedListener__set_state(<SellOrderCreatedListener> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_SellOrderCreatedListener__set_state(SellOrderCreatedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_SellOrderCreatedListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_SellOrderCreatedListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_SellOrderCreatedListener__set_state(<SellOrderCreatedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_SellOrderCreatedListener__set_state(SellOrderCreatedListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_SellOrderCreatedListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int64_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_SellOrderCreatedListener__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_SellOrderCreatedListener__set_state(SellOrderCreatedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_6pubsub_PubSub))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller = ((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_tag = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __pyx_v___pyx_result->__pyx_base._owner = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_SellOrderCreatedListener__set_state(SellOrderCreatedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_10 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_SellOrderCreatedListener__set_state(SellOrderCreatedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_SellOrderCreatedListener__set_state(<SellOrderCreatedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_SellOrderCreatedListener__set_state(SellOrderCreatedListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_SellOrderCreatedListener__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_RangePositionCreatedListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_21__pyx_unpickle_RangePositionCreatedListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_21__pyx_unpickle_RangePositionCreatedListener = {"__pyx_unpickle_RangePositionCreatedListener", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_21__pyx_unpickle_RangePositionCreatedListener, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_21__pyx_unpickle_RangePositionCreatedListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_RangePositionCreatedListener (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RangePositionCreatedListener", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RangePositionCreatedListener", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_RangePositionCreatedListener") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RangePositionCreatedListener", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_RangePositionCreatedListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_20__pyx_unpickle_RangePositionCreatedListener(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_20__pyx_unpickle_RangePositionCreatedListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_RangePositionCreatedListener", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xdcceb2d) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = RangePositionCreatedListener.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = RangePositionCreatedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xdc, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = RangePositionCreatedListener.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RangePositionCreatedListener__set_state(<RangePositionCreatedListener> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = RangePositionCreatedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_RangePositionCreatedListener__set_state(<RangePositionCreatedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = RangePositionCreatedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RangePositionCreatedListener__set_state(<RangePositionCreatedListener> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_RangePositionCreatedListener__set_state(RangePositionCreatedListener __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_2 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_RangePositionCreatedListener__set_state(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = RangePositionCreatedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_RangePositionCreatedListener__set_state(<RangePositionCreatedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RangePositionCreatedListener__set_state(<RangePositionCreatedListener> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_RangePositionCreatedListener__set_state(RangePositionCreatedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_RangePositionCreatedListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_RangePositionCreatedListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_RangePositionCreatedListener__set_state(<RangePositionCreatedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_RangePositionCreatedListener__set_state(RangePositionCreatedListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_RangePositionCreatedListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int64_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_RangePositionCreatedListener__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_RangePositionCreatedListener__set_state(RangePositionCreatedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_6pubsub_PubSub))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller = ((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_tag = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __pyx_v___pyx_result->__pyx_base._owner = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_RangePositionCreatedListener__set_state(RangePositionCreatedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_10 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_RangePositionCreatedListener__set_state(RangePositionCreatedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_RangePositionCreatedListener__set_state(<RangePositionCreatedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_RangePositionCreatedListener__set_state(RangePositionCreatedListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_RangePositionCreatedListener__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __pyx_unpickle_RangePositionRemovedListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_23__pyx_unpickle_RangePositionRemovedListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_13strategy_base_23__pyx_unpickle_RangePositionRemovedListener = {"__pyx_unpickle_RangePositionRemovedListener", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_23__pyx_unpickle_RangePositionRemovedListener, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_13strategy_base_23__pyx_unpickle_RangePositionRemovedListener(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v___pyx_type = 0;
  long __pyx_v___pyx_checksum;
  PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__pyx_unpickle_RangePositionRemovedListener (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_type,&__pyx_n_s_pyx_checksum,&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[3] = {0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_checksum)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RangePositionRemovedListener", 1, 3, 3, 1); __PYX_ERR(1, 1, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RangePositionRemovedListener", 1, 3, 3, 2); __PYX_ERR(1, 1, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__pyx_unpickle_RangePositionRemovedListener") < 0)) __PYX_ERR(1, 1, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
    }
    __pyx_v___pyx_type = values[0];
    __pyx_v___pyx_checksum = __Pyx_PyInt_As_long(values[1]); if (unlikely((__pyx_v___pyx_checksum == (long)-1) && PyErr_Occurred())) __PYX_ERR(1, 1, __pyx_L3_error)
    __pyx_v___pyx_state = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__pyx_unpickle_RangePositionRemovedListener", 1, 3, 3, __pyx_nargs); __PYX_ERR(1, 1, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_RangePositionRemovedListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_13strategy_base_22__pyx_unpickle_RangePositionRemovedListener(__pyx_self, __pyx_v___pyx_type, __pyx_v___pyx_checksum, __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_13strategy_base_22__pyx_unpickle_RangePositionRemovedListener(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v___pyx_type, long __pyx_v___pyx_checksum, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_v___pyx_PickleError = 0;
  PyObject *__pyx_v___pyx_result = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_RangePositionRemovedListener", 0);

  /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  __pyx_t_1 = ((__pyx_v___pyx_checksum != 0xdcceb2d) != 0);
  if (__pyx_t_1) {

    /* "(tree fragment)":5
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError             # <<<<<<<<<<<<<<
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = RangePositionRemovedListener.__new__(__pyx_type)
 */
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_n_s_PickleError);
    __Pyx_GIVEREF(__pyx_n_s_PickleError);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_PickleError);
    __pyx_t_3 = __Pyx_Import(__pyx_n_s_pickle, __pyx_t_2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_3, __pyx_n_s_PickleError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 5, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_2);
    __pyx_v___pyx_PickleError = __pyx_t_2;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "(tree fragment)":6
 *     if __pyx_checksum != 0xdcceb2d:
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum             # <<<<<<<<<<<<<<
 *     __pyx_result = RangePositionRemovedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 */
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_v___pyx_checksum); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Incompatible_checksums_s_vs_0xdc, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 6, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_v___pyx_PickleError, __pyx_t_2, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(1, 6, __pyx_L1_error)

    /* "(tree fragment)":4
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 *     if __pyx_checksum != 0xdcceb2d:             # <<<<<<<<<<<<<<
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 */
  }

  /* "(tree fragment)":7
 *         from pickle import PickleError as __pyx_PickleError
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = RangePositionRemovedListener.__new__(__pyx_type)             # <<<<<<<<<<<<<<
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RangePositionRemovedListener__set_state(<RangePositionRemovedListener> __pyx_result, __pyx_state)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener), __pyx_n_s_new); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v___pyx_type};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 7, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v___pyx_result = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = RangePositionRemovedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_RangePositionRemovedListener__set_state(<RangePositionRemovedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  __pyx_t_1 = (__pyx_v___pyx_state != Py_None);
  __pyx_t_6 = (__pyx_t_1 != 0);
  if (__pyx_t_6) {

    /* "(tree fragment)":9
 *     __pyx_result = RangePositionRemovedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RangePositionRemovedListener__set_state(<RangePositionRemovedListener> __pyx_result, __pyx_state)             # <<<<<<<<<<<<<<
 *     return __pyx_result
 * cdef __pyx_unpickle_RangePositionRemovedListener__set_state(RangePositionRemovedListener __pyx_result, tuple __pyx_state):
 */
    if (!(likely(PyTuple_CheckExact(__pyx_v___pyx_state))||((__pyx_v___pyx_state) == Py_None) || __Pyx_RaiseUnexpectedTypeError("tuple", __pyx_v___pyx_state))) __PYX_ERR(1, 9, __pyx_L1_error)
    __pyx_t_2 = __pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_RangePositionRemovedListener__set_state(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener *)__pyx_v___pyx_result), ((PyObject*)__pyx_v___pyx_state)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 9, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "(tree fragment)":8
 *         raise __pyx_PickleError, "Incompatible checksums (%s vs 0xdcceb2d = (_current_event_caller, _current_event_tag, _owner))" % __pyx_checksum
 *     __pyx_result = RangePositionRemovedListener.__new__(__pyx_type)
 *     if __pyx_state is not None:             # <<<<<<<<<<<<<<
 *         __pyx_unpickle_RangePositionRemovedListener__set_state(<RangePositionRemovedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 */
  }

  /* "(tree fragment)":10
 *     if __pyx_state is not None:
 *         __pyx_unpickle_RangePositionRemovedListener__set_state(<RangePositionRemovedListener> __pyx_result, __pyx_state)
 *     return __pyx_result             # <<<<<<<<<<<<<<
 * cdef __pyx_unpickle_RangePositionRemovedListener__set_state(RangePositionRemovedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v___pyx_result);
  __pyx_r = __pyx_v___pyx_result;
  goto __pyx_L0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_RangePositionRemovedListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_RangePositionRemovedListener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v___pyx_PickleError);
  __Pyx_XDECREF(__pyx_v___pyx_result);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":11
 *         __pyx_unpickle_RangePositionRemovedListener__set_state(<RangePositionRemovedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_RangePositionRemovedListener__set_state(RangePositionRemovedListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

static PyObject *__pyx_f_10hummingbot_8strategy_13strategy_base___pyx_unpickle_RangePositionRemovedListener__set_state(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener *__pyx_v___pyx_result, PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int64_t __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_unpickle_RangePositionRemovedListener__set_state", 0);

  /* "(tree fragment)":12
 *     return __pyx_result
 * cdef __pyx_unpickle_RangePositionRemovedListener__set_state(RangePositionRemovedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]             # <<<<<<<<<<<<<<
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_6pubsub_PubSub))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller);
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_caller = ((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_t_1);
  __pyx_t_1 = 0;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v___pyx_result->__pyx_base.__pyx_base._current_event_tag = __pyx_t_2;
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(1, 12, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase))))) __PYX_ERR(1, 12, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __Pyx_DECREF((PyObject *)__pyx_v___pyx_result->__pyx_base._owner);
  __pyx_v___pyx_result->__pyx_base._owner = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "(tree fragment)":13
 * cdef __pyx_unpickle_RangePositionRemovedListener__set_state(RangePositionRemovedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  if (unlikely(__pyx_v___pyx_state == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(1, 13, __pyx_L1_error)
  }
  __pyx_t_4 = PyTuple_GET_SIZE(__pyx_v___pyx_state); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_5 = ((__pyx_t_4 > 3) != 0);
  if (__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = __Pyx_HasAttr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(1, 13, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_3) {

    /* "(tree fragment)":14
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 *         __pyx_result.__dict__.update(__pyx_state[3])             # <<<<<<<<<<<<<<
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v___pyx_result), __pyx_n_s_dict); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_update); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__pyx_v___pyx_state == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(1, 14, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(__pyx_v___pyx_state, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 14, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_10 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 14, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "(tree fragment)":13
 * cdef __pyx_unpickle_RangePositionRemovedListener__set_state(RangePositionRemovedListener __pyx_result, tuple __pyx_state):
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):             # <<<<<<<<<<<<<<
 *         __pyx_result.__dict__.update(__pyx_state[3])
 */
  }

  /* "(tree fragment)":11
 *         __pyx_unpickle_RangePositionRemovedListener__set_state(<RangePositionRemovedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_RangePositionRemovedListener__set_state(RangePositionRemovedListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.strategy_base.__pyx_unpickle_RangePositionRemovedListener__set_state", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_StrategyBase(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *p;
  #if CYTHON_COMPILING_IN_LIMITED_API
  newfunc new_func = (newfunc)PyType_GetSlot(__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator, Py_tp_new);
  PyObject *o = new_func(t, a, k);
  #else
  PyObject *o = __pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator->tp_new(t, a, k);
  #endif
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub*)__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase;
  p->_sb_markets = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_sb_create_buy_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  p->_sb_create_sell_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  p->_sb_fill_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  p->_sb_fail_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  p->_sb_cancel_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  p->_sb_expire_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  p->_sb_complete_buy_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  p->_sb_complete_sell_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  p->_sb_complete_funding_payment_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  p->_sb_create_range_position_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  p->_sb_remove_range_position_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  p->_sb_order_tracker = ((struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *)Py_None); Py_INCREF(Py_None);
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_8strategy_13strategy_base_StrategyBase(PyObject *o) {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *p = (struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_sb_markets);
  Py_CLEAR(p->_sb_create_buy_order_listener);
  Py_CLEAR(p->_sb_create_sell_order_listener);
  Py_CLEAR(p->_sb_fill_order_listener);
  Py_CLEAR(p->_sb_fail_order_listener);
  Py_CLEAR(p->_sb_cancel_order_listener);
  Py_CLEAR(p->_sb_expire_order_listener);
  Py_CLEAR(p->_sb_complete_buy_order_listener);
  Py_CLEAR(p->_sb_complete_sell_order_listener);
  Py_CLEAR(p->_sb_complete_funding_payment_listener);
  Py_CLEAR(p->_sb_create_range_position_order_listener);
  Py_CLEAR(p->_sb_remove_range_position_order_listener);
  Py_CLEAR(p->_sb_order_tracker);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator)) __pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_10hummingbot_8strategy_13strategy_base_StrategyBase);
}
#endif

static int __pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_StrategyBase(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *p = (struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)o;
  e = ((likely(__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator)) ? ((__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator->tp_traverse) ? __pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_StrategyBase)); if (e) return e;
  if (p->_sb_markets) {
    e = (*v)(p->_sb_markets, a); if (e) return e;
  }
  if (p->_sb_create_buy_order_listener) {
    e = (*v)(((PyObject *)p->_sb_create_buy_order_listener), a); if (e) return e;
  }
  if (p->_sb_create_sell_order_listener) {
    e = (*v)(((PyObject *)p->_sb_create_sell_order_listener), a); if (e) return e;
  }
  if (p->_sb_fill_order_listener) {
    e = (*v)(((PyObject *)p->_sb_fill_order_listener), a); if (e) return e;
  }
  if (p->_sb_fail_order_listener) {
    e = (*v)(((PyObject *)p->_sb_fail_order_listener), a); if (e) return e;
  }
  if (p->_sb_cancel_order_listener) {
    e = (*v)(((PyObject *)p->_sb_cancel_order_listener), a); if (e) return e;
  }
  if (p->_sb_expire_order_listener) {
    e = (*v)(((PyObject *)p->_sb_expire_order_listener), a); if (e) return e;
  }
  if (p->_sb_complete_buy_order_listener) {
    e = (*v)(((PyObject *)p->_sb_complete_buy_order_listener), a); if (e) return e;
  }
  if (p->_sb_complete_sell_order_listener) {
    e = (*v)(((PyObject *)p->_sb_complete_sell_order_listener), a); if (e) return e;
  }
  if (p->_sb_complete_funding_payment_listener) {
    e = (*v)(((PyObject *)p->_sb_complete_funding_payment_listener), a); if (e) return e;
  }
  if (p->_sb_create_range_position_order_listener) {
    e = (*v)(((PyObject *)p->_sb_create_range_position_order_listener), a); if (e) return e;
  }
  if (p->_sb_remove_range_position_order_listener) {
    e = (*v)(((PyObject *)p->_sb_remove_range_position_order_listener), a); if (e) return e;
  }
  if (p->_sb_order_tracker) {
    e = (*v)(((PyObject *)p->_sb_order_tracker), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_8strategy_13strategy_base_StrategyBase(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *p = (struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)o;
  if (likely(__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator)) { if (__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator->tp_clear) __pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_10hummingbot_8strategy_13strategy_base_StrategyBase);
  tmp = ((PyObject*)p->_sb_markets);
  p->_sb_markets = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_sb_create_buy_order_listener);
  p->_sb_create_buy_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_sb_create_sell_order_listener);
  p->_sb_create_sell_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_sb_fill_order_listener);
  p->_sb_fill_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_sb_fail_order_listener);
  p->_sb_fail_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_sb_cancel_order_listener);
  p->_sb_cancel_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_sb_expire_order_listener);
  p->_sb_expire_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_sb_complete_buy_order_listener);
  p->_sb_complete_buy_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_sb_complete_sell_order_listener);
  p->_sb_complete_sell_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_sb_complete_funding_payment_listener);
  p->_sb_complete_funding_payment_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_sb_create_range_position_order_listener);
  p->_sb_create_range_position_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_sb_remove_range_position_order_listener);
  p->_sb_remove_range_position_order_listener = ((struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_sb_order_tracker);
  p->_sb_order_tracker = ((struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_13strategy_base_12StrategyBase_active_markets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_14active_markets_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_13strategy_base_12StrategyBase_order_tracker(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_13order_tracker_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_13strategy_base_12StrategyBase_trades(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_6trades_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_13strategy_base_12StrategyBase__sb_order_tracker(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_17_sb_order_tracker_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_13strategy_base_12StrategyBase__sb_order_tracker(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_17_sb_order_tracker_3__set__(o, v);
  }
  else {
    return __pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_17_sb_order_tracker_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_10hummingbot_8strategy_13strategy_base_StrategyBase[] = {
  {"logger", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_1logger, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"init_params", (PyCFunction)(void*)(PyCFunctionWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_5init_params, METH_VARARGS|METH_KEYWORDS, __pyx_doc_10hummingbot_8strategy_13strategy_base_12StrategyBase_4init_params},
  {"format_status", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_7format_status, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"log_with_clock", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_9log_with_clock, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"market_status_data_frame", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_11market_status_data_frame, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"wallet_balance_data_frame", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_13wallet_balance_data_frame, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"balance_warning", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_15balance_warning, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"network_warning", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_17network_warning, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"add_markets", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_19add_markets, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"remove_markets", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_21remove_markets, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"cum_flat_fees", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_23cum_flat_fees, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"buy_with_specific_market", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_25buy_with_specific_market, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"sell_with_specific_market", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_27sell_with_specific_market, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"cancel_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_29cancel_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"start_tracking_limit_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_31start_tracking_limit_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"stop_tracking_limit_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_33stop_tracking_limit_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"start_tracking_market_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_35start_tracking_market_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"stop_tracking_market_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_37stop_tracking_market_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"track_restored_orders", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_39track_restored_orders, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"notify_hb_app", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_41notify_hb_app, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_10hummingbot_8strategy_13strategy_base_12StrategyBase_40notify_hb_app},
  {"notify_hb_app_with_timestamp", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_43notify_hb_app_with_timestamp, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_10hummingbot_8strategy_13strategy_base_12StrategyBase_42notify_hb_app_with_timestamp},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_45__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_47__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10hummingbot_8strategy_13strategy_base_StrategyBase[] = {
  {(char *)"active_markets", __pyx_getprop_10hummingbot_8strategy_13strategy_base_12StrategyBase_active_markets, 0, (char *)0, 0},
  {(char *)"order_tracker", __pyx_getprop_10hummingbot_8strategy_13strategy_base_12StrategyBase_order_tracker, 0, (char *)0, 0},
  {(char *)"trades", __pyx_getprop_10hummingbot_8strategy_13strategy_base_12StrategyBase_trades, 0, (char *)PyDoc_STR("\n        Returns a list of all completed trades from the market.\n        The trades are taken from the market event logs.\n        "), 0},
  {(char *)"_sb_order_tracker", __pyx_getprop_10hummingbot_8strategy_13strategy_base_12StrategyBase__sb_order_tracker, __pyx_setprop_10hummingbot_8strategy_13strategy_base_12StrategyBase__sb_order_tracker, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_StrategyBase},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_8strategy_13strategy_base_StrategyBase},
  {Py_tp_methods, (void *)__pyx_methods_10hummingbot_8strategy_13strategy_base_StrategyBase},
  {Py_tp_getset, (void *)__pyx_getsets_10hummingbot_8strategy_13strategy_base_StrategyBase},
  {Py_tp_init, (void *)__pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_13strategy_base_StrategyBase},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase_spec = {
  "hummingbot.strategy.strategy_base.StrategyBase",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.strategy_base.""StrategyBase", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_13strategy_base_StrategyBase, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_StrategyBase, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_13strategy_base_StrategyBase, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_8strategy_13strategy_base_StrategyBase, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10hummingbot_8strategy_13strategy_base_StrategyBase, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10hummingbot_8strategy_13strategy_base_12StrategyBase_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_13strategy_base_StrategyBase, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener __pyx_vtable_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *p;
  #if CYTHON_COMPILING_IN_LIMITED_API
  newfunc new_func = (newfunc)PyType_GetSlot(__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener, Py_tp_new);
  PyObject *o = new_func(t, a, k);
  #else
  PyObject *o = __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_new(t, a, k);
  #endif
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  p->_owner = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)Py_None); Py_INCREF(Py_None);
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener(PyObject *o) {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *p = (struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_owner);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener)) __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener);
}
#endif

static int __pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *p = (struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *)o;
  e = ((likely(__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener)) ? ((__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_traverse) ? __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener)); if (e) return e;
  if (p->_owner) {
    e = (*v)(((PyObject *)p->_owner), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *p = (struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener *)o;
  if (likely(__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener)) { if (__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_clear) __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener);
  tmp = ((PyObject*)p->_owner);
  p->_owner = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_methods, (void *)__pyx_methods_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_init, (void *)__pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener_spec = {
  "hummingbot.strategy.strategy_base.BaseStrategyEventListener",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.strategy_base.""BaseStrategyEventListener", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener __pyx_vtable_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener *p;
  #if CYTHON_COMPILING_IN_LIMITED_API
  newfunc new_func = (newfunc)PyType_GetSlot(__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, Py_tp_new);
  PyObject *o = new_func(t, a, k);
  #else
  PyObject *o = __pyx_tp_new_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener(t, a, k);
  #endif
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener;
  return o;
}

static PyMethodDef __pyx_methods_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_methods, (void *)__pyx_methods_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener_spec = {
  "hummingbot.strategy.strategy_base.BuyOrderCompletedListener",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.strategy_base.""BuyOrderCompletedListener", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener __pyx_vtable_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener *p;
  #if CYTHON_COMPILING_IN_LIMITED_API
  newfunc new_func = (newfunc)PyType_GetSlot(__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, Py_tp_new);
  PyObject *o = new_func(t, a, k);
  #else
  PyObject *o = __pyx_tp_new_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener(t, a, k);
  #endif
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener;
  return o;
}

static PyMethodDef __pyx_methods_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_methods, (void *)__pyx_methods_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener_spec = {
  "hummingbot.strategy.strategy_base.SellOrderCompletedListener",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.strategy_base.""SellOrderCompletedListener", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener __pyx_vtable_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener *p;
  #if CYTHON_COMPILING_IN_LIMITED_API
  newfunc new_func = (newfunc)PyType_GetSlot(__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, Py_tp_new);
  PyObject *o = new_func(t, a, k);
  #else
  PyObject *o = __pyx_tp_new_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener(t, a, k);
  #endif
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener;
  return o;
}

static PyMethodDef __pyx_methods_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_methods, (void *)__pyx_methods_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener_spec = {
  "hummingbot.strategy.strategy_base.FundingPaymentCompletedListener",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.strategy_base.""FundingPaymentCompletedListener", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_OrderFilledListener __pyx_vtable_10hummingbot_8strategy_13strategy_base_OrderFilledListener;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_OrderFilledListener(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFilledListener *p;
  #if CYTHON_COMPILING_IN_LIMITED_API
  newfunc new_func = (newfunc)PyType_GetSlot(__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, Py_tp_new);
  PyObject *o = new_func(t, a, k);
  #else
  PyObject *o = __pyx_tp_new_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener(t, a, k);
  #endif
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFilledListener *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderFilledListener;
  return o;
}

static PyMethodDef __pyx_methods_10hummingbot_8strategy_13strategy_base_OrderFilledListener[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_19OrderFilledListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_19OrderFilledListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_methods, (void *)__pyx_methods_10hummingbot_8strategy_13strategy_base_OrderFilledListener},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_13strategy_base_OrderFilledListener},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener_spec = {
  "hummingbot.strategy.strategy_base.OrderFilledListener",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFilledListener),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.strategy_base.""OrderFilledListener", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFilledListener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_8strategy_13strategy_base_OrderFilledListener, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_13strategy_base_OrderFilledListener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_OrderFailedListener __pyx_vtable_10hummingbot_8strategy_13strategy_base_OrderFailedListener;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_OrderFailedListener(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFailedListener *p;
  #if CYTHON_COMPILING_IN_LIMITED_API
  newfunc new_func = (newfunc)PyType_GetSlot(__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, Py_tp_new);
  PyObject *o = new_func(t, a, k);
  #else
  PyObject *o = __pyx_tp_new_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener(t, a, k);
  #endif
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFailedListener *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderFailedListener;
  return o;
}

static PyMethodDef __pyx_methods_10hummingbot_8strategy_13strategy_base_OrderFailedListener[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_19OrderFailedListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_19OrderFailedListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_methods, (void *)__pyx_methods_10hummingbot_8strategy_13strategy_base_OrderFailedListener},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_13strategy_base_OrderFailedListener},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener_spec = {
  "hummingbot.strategy.strategy_base.OrderFailedListener",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFailedListener),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.strategy_base.""OrderFailedListener", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFailedListener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_8strategy_13strategy_base_OrderFailedListener, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_13strategy_base_OrderFailedListener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_OrderCancelledListener __pyx_vtable_10hummingbot_8strategy_13strategy_base_OrderCancelledListener;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_OrderCancelledListener(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderCancelledListener *p;
  #if CYTHON_COMPILING_IN_LIMITED_API
  newfunc new_func = (newfunc)PyType_GetSlot(__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, Py_tp_new);
  PyObject *o = new_func(t, a, k);
  #else
  PyObject *o = __pyx_tp_new_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener(t, a, k);
  #endif
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderCancelledListener *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderCancelledListener;
  return o;
}

static PyMethodDef __pyx_methods_10hummingbot_8strategy_13strategy_base_OrderCancelledListener[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_methods, (void *)__pyx_methods_10hummingbot_8strategy_13strategy_base_OrderCancelledListener},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_13strategy_base_OrderCancelledListener},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener_spec = {
  "hummingbot.strategy.strategy_base.OrderCancelledListener",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderCancelledListener),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.strategy_base.""OrderCancelledListener", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderCancelledListener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_8strategy_13strategy_base_OrderCancelledListener, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_13strategy_base_OrderCancelledListener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_OrderExpiredListener __pyx_vtable_10hummingbot_8strategy_13strategy_base_OrderExpiredListener;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_OrderExpiredListener(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderExpiredListener *p;
  #if CYTHON_COMPILING_IN_LIMITED_API
  newfunc new_func = (newfunc)PyType_GetSlot(__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, Py_tp_new);
  PyObject *o = new_func(t, a, k);
  #else
  PyObject *o = __pyx_tp_new_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener(t, a, k);
  #endif
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderExpiredListener *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderExpiredListener;
  return o;
}

static PyMethodDef __pyx_methods_10hummingbot_8strategy_13strategy_base_OrderExpiredListener[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_methods, (void *)__pyx_methods_10hummingbot_8strategy_13strategy_base_OrderExpiredListener},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_13strategy_base_OrderExpiredListener},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener_spec = {
  "hummingbot.strategy.strategy_base.OrderExpiredListener",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderExpiredListener),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.strategy_base.""OrderExpiredListener", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderExpiredListener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_8strategy_13strategy_base_OrderExpiredListener, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_13strategy_base_OrderExpiredListener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener __pyx_vtable_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener *p;
  #if CYTHON_COMPILING_IN_LIMITED_API
  newfunc new_func = (newfunc)PyType_GetSlot(__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, Py_tp_new);
  PyObject *o = new_func(t, a, k);
  #else
  PyObject *o = __pyx_tp_new_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener(t, a, k);
  #endif
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener;
  return o;
}

static PyMethodDef __pyx_methods_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_methods, (void *)__pyx_methods_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener_spec = {
  "hummingbot.strategy.strategy_base.BuyOrderCreatedListener",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.strategy_base.""BuyOrderCreatedListener", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener __pyx_vtable_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener *p;
  #if CYTHON_COMPILING_IN_LIMITED_API
  newfunc new_func = (newfunc)PyType_GetSlot(__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, Py_tp_new);
  PyObject *o = new_func(t, a, k);
  #else
  PyObject *o = __pyx_tp_new_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener(t, a, k);
  #endif
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener;
  return o;
}

static PyMethodDef __pyx_methods_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_methods, (void *)__pyx_methods_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener_spec = {
  "hummingbot.strategy.strategy_base.SellOrderCreatedListener",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.strategy_base.""SellOrderCreatedListener", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener __pyx_vtable_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener *p;
  #if CYTHON_COMPILING_IN_LIMITED_API
  newfunc new_func = (newfunc)PyType_GetSlot(__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, Py_tp_new);
  PyObject *o = new_func(t, a, k);
  #else
  PyObject *o = __pyx_tp_new_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener(t, a, k);
  #endif
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener;
  return o;
}

static PyMethodDef __pyx_methods_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_methods, (void *)__pyx_methods_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener_spec = {
  "hummingbot.strategy.strategy_base.RangePositionCreatedListener",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.strategy_base.""RangePositionCreatedListener", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener __pyx_vtable_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener *p;
  #if CYTHON_COMPILING_IN_LIMITED_API
  newfunc new_func = (newfunc)PyType_GetSlot(__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, Py_tp_new);
  PyObject *o = new_func(t, a, k);
  #else
  PyObject *o = __pyx_tp_new_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener(t, a, k);
  #endif
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener *)o);
  p->__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener;
  return o;
}

static PyMethodDef __pyx_methods_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener_1__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener_3__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener},
  {Py_tp_methods, (void *)__pyx_methods_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener_spec = {
  "hummingbot.strategy.strategy_base.RangePositionRemovedListener",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.strategy_base.""RangePositionRemovedListener", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_1__init__, /*tp_init*/
  #else
  0, /*tp_init*/
  #endif
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ *__pyx_freelist_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__[8];
static int __pyx_freecount_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ = 0;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__[--__pyx_freecount_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__(PyObject *o) {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ *p = (struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_event_to_trade);
  Py_CLEAR(p->__pyx_v_market);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__)))) {
    __pyx_freelist_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__[__pyx_freecount_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__++] = ((struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ *p = (struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ *)o;
  if (p->__pyx_v_event_to_trade) {
    e = (*v)(p->__pyx_v_event_to_trade, a); if (e) return e;
  }
  if (p->__pyx_v_market) {
    e = (*v)(p->__pyx_v_market, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ *p = (struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ *)o;
  tmp = ((PyObject*)p->__pyx_v_event_to_trade);
  p->__pyx_v_event_to_trade = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_market);
  p->__pyx_v_market = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get___slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get___spec = {
  "hummingbot.strategy.strategy_base.__pyx_scope_struct____get__",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get___slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.strategy_base.""__pyx_scope_struct____get__", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  #if CYTHON_COMPILING_IN_LIMITED_API
  {0, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {0, __pyx_k_0, sizeof(__pyx_k_0), 0, 1, 0, 0},
  {0, __pyx_k_0_0001, sizeof(__pyx_k_0_0001), 0, 1, 0, 0},
  {0, __pyx_k_Asset, sizeof(__pyx_k_Asset), 0, 1, 0, 1},
  {0, __pyx_k_Available_Balance, sizeof(__pyx_k_Available_Balance), 0, 1, 0, 0},
  {0, __pyx_k_BUY_ORDER_COMPLETED_EVENT_TAG, sizeof(__pyx_k_BUY_ORDER_COMPLETED_EVENT_TAG), 0, 0, 1, 1},
  {0, __pyx_k_BUY_ORDER_CREATED_EVENT_TAG, sizeof(__pyx_k_BUY_ORDER_CREATED_EVENT_TAG), 0, 0, 1, 1},
  {0, __pyx_k_BaseStrategyEventListener, sizeof(__pyx_k_BaseStrategyEventListener), 0, 0, 1, 1},
  {0, __pyx_k_BaseStrategyEventListener___redu, sizeof(__pyx_k_BaseStrategyEventListener___redu), 0, 0, 1, 1},
  {0, __pyx_k_BaseStrategyEventListener___sets, sizeof(__pyx_k_BaseStrategyEventListener___sets), 0, 0, 1, 1},
  {0, __pyx_k_Best_Ask_Price, sizeof(__pyx_k_Best_Ask_Price), 0, 1, 0, 0},
  {0, __pyx_k_Best_Bid_Price, sizeof(__pyx_k_Best_Bid_Price), 0, 1, 0, 0},
  {0, __pyx_k_BuyOrderCompleted, sizeof(__pyx_k_BuyOrderCompleted), 0, 0, 1, 1},
  {0, __pyx_k_BuyOrderCompletedListener, sizeof(__pyx_k_BuyOrderCompletedListener), 0, 0, 1, 1},
  {0, __pyx_k_BuyOrderCompletedListener___redu, sizeof(__pyx_k_BuyOrderCompletedListener___redu), 0, 0, 1, 1},
  {0, __pyx_k_BuyOrderCompletedListener___sets, sizeof(__pyx_k_BuyOrderCompletedListener___sets), 0, 0, 1, 1},
  {0, __pyx_k_BuyOrderCreated, sizeof(__pyx_k_BuyOrderCreated), 0, 0, 1, 1},
  {0, __pyx_k_BuyOrderCreatedListener, sizeof(__pyx_k_BuyOrderCreatedListener), 0, 0, 1, 1},
  {0, __pyx_k_BuyOrderCreatedListener___reduce, sizeof(__pyx_k_BuyOrderCreatedListener___reduce), 0, 0, 1, 1},
  {0, __pyx_k_BuyOrderCreatedListener___setsta, sizeof(__pyx_k_BuyOrderCreatedListener___setsta), 0, 0, 1, 1},
  {0, __pyx_k_CONNECTED, sizeof(__pyx_k_CONNECTED), 0, 0, 1, 1},
  {0, __pyx_k_Cancelling_the_limit_order, sizeof(__pyx_k_Cancelling_the_limit_order), 0, 1, 0, 0},
  {0, __pyx_k_DataFrame, sizeof(__pyx_k_DataFrame), 0, 0, 1, 1},
  {0, __pyx_k_Decimal, sizeof(__pyx_k_Decimal), 0, 0, 1, 1},
  {0, __pyx_k_Delegates_are_not_allowed_to_exe, sizeof(__pyx_k_Delegates_are_not_allowed_to_exe), 0, 1, 0, 0},
  {0, __pyx_k_DerivativeBase, sizeof(__pyx_k_DerivativeBase), 0, 0, 1, 1},
  {0, __pyx_k_Error_formatting_market_stats, sizeof(__pyx_k_Error_formatting_market_stats), 0, 1, 0, 0},
  {0, __pyx_k_Error_formatting_wallet_balance, sizeof(__pyx_k_Error_formatting_wallet_balance), 0, 1, 0, 0},
  {0, __pyx_k_Exchange, sizeof(__pyx_k_Exchange), 0, 1, 0, 1},
  {0, __pyx_k_FUNDING_PAYMENT_COMPLETED_EVENT, sizeof(__pyx_k_FUNDING_PAYMENT_COMPLETED_EVENT), 0, 0, 1, 1},
  {0, __pyx_k_Flat_fee_in_other_token_than_quo, sizeof(__pyx_k_Flat_fee_in_other_token_than_quo), 0, 1, 0, 0},
  {0, __pyx_k_FundingPaymentCompleted, sizeof(__pyx_k_FundingPaymentCompleted), 0, 0, 1, 1},
  {0, __pyx_k_FundingPaymentCompletedListener, sizeof(__pyx_k_FundingPaymentCompletedListener), 0, 0, 1, 1},
  {0, __pyx_k_FundingPaymentCompletedListener_2, sizeof(__pyx_k_FundingPaymentCompletedListener_2), 0, 0, 1, 1},
  {0, __pyx_k_FundingPaymentCompletedListener_3, sizeof(__pyx_k_FundingPaymentCompletedListener_3), 0, 0, 1, 1},
  {0, __pyx_k_HummingbotApplication, sizeof(__pyx_k_HummingbotApplication), 0, 0, 1, 1},
  {0, __pyx_k_INFO, sizeof(__pyx_k_INFO), 0, 0, 1, 1},
  {0, __pyx_k_Incompatible_checksums_s_vs_0xdc, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xdc), 0, 0, 1, 0},
  {0, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {0, __pyx_k_List_ConnectorBase, sizeof(__pyx_k_List_ConnectorBase), 0, 0, 1, 0},
  {0, __pyx_k_List_MarketTradingPairTuple, sizeof(__pyx_k_List_MarketTradingPairTuple), 0, 0, 1, 0},
  {0, __pyx_k_List_str, sizeof(__pyx_k_List_str), 0, 0, 1, 0},
  {0, __pyx_k_MARKET, sizeof(__pyx_k_MARKET), 0, 0, 1, 1},
  {0, __pyx_k_Market, sizeof(__pyx_k_Market), 0, 1, 0, 1},
  {0, __pyx_k_MarketEvent, sizeof(__pyx_k_MarketEvent), 0, 0, 1, 1},
  {0, __pyx_k_MarketTradingPairTuple, sizeof(__pyx_k_MarketTradingPairTuple), 0, 0, 1, 1},
  {0, __pyx_k_Market_object_for_buy_order_is_n, sizeof(__pyx_k_Market_object_for_buy_order_is_n), 0, 1, 0, 0},
  {0, __pyx_k_Market_object_for_sell_order_is, sizeof(__pyx_k_Market_object_for_sell_order_is), 0, 1, 0, 0},
  {0, __pyx_k_Markets_are_offline_for_the, sizeof(__pyx_k_Markets_are_offline_for_the), 0, 1, 0, 0},
  {0, __pyx_k_Mid_Price, sizeof(__pyx_k_Mid_Price), 0, 1, 0, 0},
  {0, __pyx_k_NaN, sizeof(__pyx_k_NaN), 0, 0, 1, 1},
  {0, __pyx_k_NaN, sizeof(__pyx_k_NaN), 0, 1, 0, 1},
  {0, __pyx_k_NetworkStatus, sizeof(__pyx_k_NetworkStatus), 0, 0, 1, 1},
  {0, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {0, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {0, __pyx_k_OPEN, sizeof(__pyx_k_OPEN), 0, 0, 1, 1},
  {0, __pyx_k_ORDER_CANCELLED_EVENT_TAG, sizeof(__pyx_k_ORDER_CANCELLED_EVENT_TAG), 0, 0, 1, 1},
  {0, __pyx_k_ORDER_EXPIRED_EVENT_TAG, sizeof(__pyx_k_ORDER_EXPIRED_EVENT_TAG), 0, 0, 1, 1},
  {0, __pyx_k_ORDER_FAILURE_EVENT_TAG, sizeof(__pyx_k_ORDER_FAILURE_EVENT_TAG), 0, 0, 1, 1},
  {0, __pyx_k_ORDER_FILLED_EVENT_TAG, sizeof(__pyx_k_ORDER_FILLED_EVENT_TAG), 0, 0, 1, 1},
  {0, __pyx_k_OrderCancelled, sizeof(__pyx_k_OrderCancelled), 0, 0, 1, 1},
  {0, __pyx_k_OrderCancelledListener, sizeof(__pyx_k_OrderCancelledListener), 0, 0, 1, 1},
  {0, __pyx_k_OrderCancelledListener___reduce, sizeof(__pyx_k_OrderCancelledListener___reduce), 0, 0, 1, 1},
  {0, __pyx_k_OrderCancelledListener___setstat, sizeof(__pyx_k_OrderCancelledListener___setstat), 0, 0, 1, 1},
  {0, __pyx_k_OrderExpired, sizeof(__pyx_k_OrderExpired), 0, 0, 1, 1},
  {0, __pyx_k_OrderExpiredListener, sizeof(__pyx_k_OrderExpiredListener), 0, 0, 1, 1},
  {0, __pyx_k_OrderExpiredListener___reduce_cy, sizeof(__pyx_k_OrderExpiredListener___reduce_cy), 0, 0, 1, 1},
  {0, __pyx_k_OrderExpiredListener___setstate, sizeof(__pyx_k_OrderExpiredListener___setstate), 0, 0, 1, 1},
  {0, __pyx_k_OrderFailedListener, sizeof(__pyx_k_OrderFailedListener), 0, 0, 1, 1},
  {0, __pyx_k_OrderFailedListener___reduce_cyt, sizeof(__pyx_k_OrderFailedListener___reduce_cyt), 0, 0, 1, 1},
  {0, __pyx_k_OrderFailedListener___setstate_c, sizeof(__pyx_k_OrderFailedListener___setstate_c), 0, 0, 1, 1},
  {0, __pyx_k_OrderFailure, sizeof(__pyx_k_OrderFailure), 0, 0, 1, 1},
  {0, __pyx_k_OrderFilled, sizeof(__pyx_k_OrderFilled), 0, 0, 1, 1},
  {0, __pyx_k_OrderFilledEvent, sizeof(__pyx_k_OrderFilledEvent), 0, 0, 1, 1},
  {0, __pyx_k_OrderFilledListener, sizeof(__pyx_k_OrderFilledListener), 0, 0, 1, 1},
  {0, __pyx_k_OrderFilledListener___reduce_cyt, sizeof(__pyx_k_OrderFilledListener___reduce_cyt), 0, 0, 1, 1},
  {0, __pyx_k_OrderFilledListener___setstate_c, sizeof(__pyx_k_OrderFilledListener___setstate_c), 0, 0, 1, 1},
  {0, __pyx_k_OrderTracker, sizeof(__pyx_k_OrderTracker), 0, 0, 1, 1},
  {0, __pyx_k_OrderType, sizeof(__pyx_k_OrderType), 0, 0, 1, 1},
  {0, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {0, __pyx_k_PositionAction, sizeof(__pyx_k_PositionAction), 0, 0, 1, 1},
  {0, __pyx_k_RANGE_POSITION_CREATED_EVENT_TAG, sizeof(__pyx_k_RANGE_POSITION_CREATED_EVENT_TAG), 0, 0, 1, 1},
  {0, __pyx_k_RANGE_POSITION_REMOVED_EVENT_TAG, sizeof(__pyx_k_RANGE_POSITION_REMOVED_EVENT_TAG), 0, 0, 1, 1},
  {0, __pyx_k_RangePositionCreated, sizeof(__pyx_k_RangePositionCreated), 0, 0, 1, 1},
  {0, __pyx_k_RangePositionCreatedListener, sizeof(__pyx_k_RangePositionCreatedListener), 0, 0, 1, 1},
  {0, __pyx_k_RangePositionCreatedListener___r, sizeof(__pyx_k_RangePositionCreatedListener___r), 0, 0, 1, 1},
  {0, __pyx_k_RangePositionCreatedListener___s, sizeof(__pyx_k_RangePositionCreatedListener___s), 0, 0, 1, 1},
  {0, __pyx_k_RangePositionRemoved, sizeof(__pyx_k_RangePositionRemoved), 0, 0, 1, 1},
  {0, __pyx_k_RangePositionRemovedListener, sizeof(__pyx_k_RangePositionRemovedListener), 0, 0, 1, 1},
  {0, __pyx_k_RangePositionRemovedListener___r, sizeof(__pyx_k_RangePositionRemovedListener___r), 0, 0, 1, 1},
  {0, __pyx_k_RangePositionRemovedListener___s, sizeof(__pyx_k_RangePositionRemovedListener___s), 0, 0, 1, 1},
  {0, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {0, __pyx_k_SELL_ORDER_COMPLETED_EVENT_TAG, sizeof(__pyx_k_SELL_ORDER_COMPLETED_EVENT_TAG), 0, 0, 1, 1},
  {0, __pyx_k_SELL_ORDER_CREATED_EVENT_TAG, sizeof(__pyx_k_SELL_ORDER_CREATED_EVENT_TAG), 0, 0, 1, 1},
  {0, __pyx_k_SellOrderCompleted, sizeof(__pyx_k_SellOrderCompleted), 0, 0, 1, 1},
  {0, __pyx_k_SellOrderCompletedListener, sizeof(__pyx_k_SellOrderCompletedListener), 0, 0, 1, 1},
  {0, __pyx_k_SellOrderCompletedListener___red, sizeof(__pyx_k_SellOrderCompletedListener___red), 0, 0, 1, 1},
  {0, __pyx_k_SellOrderCompletedListener___set, sizeof(__pyx_k_SellOrderCompletedListener___set), 0, 0, 1, 1},
  {0, __pyx_k_SellOrderCreated, sizeof(__pyx_k_SellOrderCreated), 0, 0, 1, 1},
  {0, __pyx_k_SellOrderCreatedListener, sizeof(__pyx_k_SellOrderCreatedListener), 0, 0, 1, 1},
  {0, __pyx_k_SellOrderCreatedListener___reduc, sizeof(__pyx_k_SellOrderCreatedListener___reduc), 0, 0, 1, 1},
  {0, __pyx_k_SellOrderCreatedListener___setst, sizeof(__pyx_k_SellOrderCreatedListener___setst), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase, sizeof(__pyx_k_StrategyBase), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase___get___locals_even, sizeof(__pyx_k_StrategyBase___get___locals_even), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase___get___locals_lamb, sizeof(__pyx_k_StrategyBase___get___locals_lamb), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase___reduce_cython, sizeof(__pyx_k_StrategyBase___reduce_cython), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase___setstate_cython, sizeof(__pyx_k_StrategyBase___setstate_cython), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_add_markets, sizeof(__pyx_k_StrategyBase_add_markets), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_balance_warning, sizeof(__pyx_k_StrategyBase_balance_warning), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_buy_with_specific_m, sizeof(__pyx_k_StrategyBase_buy_with_specific_m), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_cancel_order, sizeof(__pyx_k_StrategyBase_cancel_order), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_cum_flat_fees, sizeof(__pyx_k_StrategyBase_cum_flat_fees), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_format_status, sizeof(__pyx_k_StrategyBase_format_status), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_init_params, sizeof(__pyx_k_StrategyBase_init_params), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_log_with_clock, sizeof(__pyx_k_StrategyBase_log_with_clock), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_logger, sizeof(__pyx_k_StrategyBase_logger), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_market_status_data, sizeof(__pyx_k_StrategyBase_market_status_data), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_network_warning, sizeof(__pyx_k_StrategyBase_network_warning), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_notify_hb_app, sizeof(__pyx_k_StrategyBase_notify_hb_app), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_notify_hb_app_with, sizeof(__pyx_k_StrategyBase_notify_hb_app_with), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_remove_markets, sizeof(__pyx_k_StrategyBase_remove_markets), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_sell_with_specific, sizeof(__pyx_k_StrategyBase_sell_with_specific), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_start_tracking_limi, sizeof(__pyx_k_StrategyBase_start_tracking_limi), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_start_tracking_mark, sizeof(__pyx_k_StrategyBase_start_tracking_mark), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_stop_tracking_limit, sizeof(__pyx_k_StrategyBase_stop_tracking_limit), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_stop_tracking_marke, sizeof(__pyx_k_StrategyBase_stop_tracking_marke), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_track_restored_orde, sizeof(__pyx_k_StrategyBase_track_restored_orde), 0, 0, 1, 1},
  {0, __pyx_k_StrategyBase_wallet_balance_data, sizeof(__pyx_k_StrategyBase_wallet_balance_data), 0, 0, 1, 1},
  {0, __pyx_k_Timestamp, sizeof(__pyx_k_Timestamp), 0, 0, 1, 1},
  {0, __pyx_k_Total_Balance, sizeof(__pyx_k_Total_Balance), 0, 1, 0, 0},
  {0, __pyx_k_Trade, sizeof(__pyx_k_Trade), 0, 0, 1, 1},
  {0, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {0, __pyx_k_UTC, sizeof(__pyx_k_UTC), 0, 1, 0, 1},
  {0, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {0, __pyx_k__154, sizeof(__pyx_k__154), 0, 0, 1, 1},
  {0, __pyx_k__30, sizeof(__pyx_k__30), 0, 1, 0, 0},
  {0, __pyx_k__31, sizeof(__pyx_k__31), 0, 1, 0, 0},
  {0, __pyx_k__32, sizeof(__pyx_k__32), 0, 1, 0, 0},
  {0, __pyx_k__33, sizeof(__pyx_k__33), 0, 0, 1, 1},
  {0, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
  {0, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
  {0, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
  {0, __pyx_k_active_markets, sizeof(__pyx_k_active_markets), 0, 0, 1, 1},
  {0, __pyx_k_add_markets, sizeof(__pyx_k_add_markets), 0, 0, 1, 1},
  {0, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {0, __pyx_k_amount, sizeof(__pyx_k_amount), 0, 0, 1, 1},
  {0, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {0, __pyx_k_ask_price, sizeof(__pyx_k_ask_price), 0, 0, 1, 1},
  {0, __pyx_k_assets_columns, sizeof(__pyx_k_assets_columns), 0, 0, 1, 1},
  {0, __pyx_k_assets_data, sizeof(__pyx_k_assets_data), 0, 0, 1, 1},
  {0, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {0, __pyx_k_available_base_balance, sizeof(__pyx_k_available_base_balance), 0, 0, 1, 1},
  {0, __pyx_k_available_quote_balance, sizeof(__pyx_k_available_quote_balance), 0, 0, 1, 1},
  {0, __pyx_k_balance_is_too_low_Cannot_place, sizeof(__pyx_k_balance_is_too_low_Cannot_place), 0, 1, 0, 0},
  {0, __pyx_k_balance_warning, sizeof(__pyx_k_balance_warning), 0, 0, 1, 1},
  {0, __pyx_k_base_asset, sizeof(__pyx_k_base_asset), 0, 0, 1, 1},
  {0, __pyx_k_base_asset_conversion_rate, sizeof(__pyx_k_base_asset_conversion_rate), 0, 0, 1, 1},
  {0, __pyx_k_base_balance, sizeof(__pyx_k_base_balance), 0, 0, 1, 1},
  {0, __pyx_k_bid_price, sizeof(__pyx_k_bid_price), 0, 0, 1, 1},
  {0, __pyx_k_bool, sizeof(__pyx_k_bool), 0, 0, 1, 1},
  {0, __pyx_k_buy_with_specific_market, sizeof(__pyx_k_buy_with_specific_market), 0, 0, 1, 1},
  {0, __pyx_k_cancel_order, sizeof(__pyx_k_cancel_order), 0, 0, 1, 1},
  {0, __pyx_k_client_order_id, sizeof(__pyx_k_client_order_id), 0, 0, 1, 1},
  {0, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {0, __pyx_k_clock, sizeof(__pyx_k_clock), 0, 1, 0, 0},
  {0, __pyx_k_clock_timestamp, sizeof(__pyx_k_clock_timestamp), 0, 0, 1, 1},
  {0, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
  {0, __pyx_k_columns, sizeof(__pyx_k_columns), 0, 0, 1, 1},
  {0, __pyx_k_cum_flat_fees, sizeof(__pyx_k_cum_flat_fees), 0, 0, 1, 1},
  {0, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {0, __pyx_k_decimal, sizeof(__pyx_k_decimal), 0, 0, 1, 1},
  {0, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {0, __pyx_k_dict_2, sizeof(__pyx_k_dict_2), 0, 0, 1, 1},
  {0, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
  {0, __pyx_k_display_name, sizeof(__pyx_k_display_name), 0, 0, 1, 1},
  {0, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
  {0, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
  {0, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {0, __pyx_k_event_logs, sizeof(__pyx_k_event_logs), 0, 0, 1, 1},
  {0, __pyx_k_event_to_trade, sizeof(__pyx_k_event_to_trade), 0, 0, 1, 1},
  {0, __pyx_k_exc_info, sizeof(__pyx_k_exc_info), 0, 0, 1, 1},
  {0, __pyx_k_expiration_seconds, sizeof(__pyx_k_expiration_seconds), 0, 0, 1, 1},
  {0, __pyx_k_expiration_ts, sizeof(__pyx_k_expiration_ts), 0, 1, 0, 1},
  {0, __pyx_k_filter, sizeof(__pyx_k_filter), 0, 0, 1, 1},
  {0, __pyx_k_flat_fees, sizeof(__pyx_k_flat_fees), 0, 0, 1, 1},
  {0, __pyx_k_format_status, sizeof(__pyx_k_format_status), 0, 0, 1, 1},
  {0, __pyx_k_fromtimestamp, sizeof(__pyx_k_fromtimestamp), 0, 0, 1, 1},
  {0, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
  {0, __pyx_k_get_available_balance, sizeof(__pyx_k_get_available_balance), 0, 0, 1, 1},
  {0, __pyx_k_get_balance, sizeof(__pyx_k_get_balance), 0, 0, 1, 1},
  {0, __pyx_k_get_price, sizeof(__pyx_k_get_price), 0, 0, 1, 1},
  {0, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_client_hummingbot_app, sizeof(__pyx_k_hummingbot_client_hummingbot_app), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_connector_derivative, sizeof(__pyx_k_hummingbot_connector_derivative), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_data_type_trade, sizeof(__pyx_k_hummingbot_core_data_type_trade), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_event_events, sizeof(__pyx_k_hummingbot_core_event_events), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_network_iterator, sizeof(__pyx_k_hummingbot_core_network_iterator), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_strategy_market_tradi, sizeof(__pyx_k_hummingbot_strategy_market_tradi), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_strategy_strategy_bas, sizeof(__pyx_k_hummingbot_strategy_strategy_bas), 0, 0, 1, 0},
  {0, __pyx_k_hummingbot_strategy_strategy_bas_2, sizeof(__pyx_k_hummingbot_strategy_strategy_bas_2), 0, 0, 1, 1},
  {0, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {0, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {0, __pyx_k_init_params, sizeof(__pyx_k_init_params), 0, 0, 1, 1},
  {0, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {0, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
  {0, __pyx_k_is_buy, sizeof(__pyx_k_is_buy), 0, 0, 1, 1},
  {0, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {0, __pyx_k_is_limit_type, sizeof(__pyx_k_is_limit_type), 0, 0, 1, 1},
  {0, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
  {0, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {0, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {0, __pyx_k_limit_orders, sizeof(__pyx_k_limit_orders), 0, 0, 1, 1},
  {0, __pyx_k_log, sizeof(__pyx_k_log), 0, 0, 1, 1},
  {0, __pyx_k_log_level, sizeof(__pyx_k_log_level), 0, 0, 1, 1},
  {0, __pyx_k_log_with_clock, sizeof(__pyx_k_log_with_clock), 0, 0, 1, 1},
  {0, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {0, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {0, __pyx_k_logging_Logger, sizeof(__pyx_k_logging_Logger), 0, 0, 1, 0},
  {0, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {0, __pyx_k_main_application, sizeof(__pyx_k_main_application), 0, 0, 1, 1},
  {0, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
  {0, __pyx_k_market, sizeof(__pyx_k_market), 0, 0, 1, 1},
  {0, __pyx_k_market_2, sizeof(__pyx_k_market_2), 0, 1, 0, 0},
  {0, __pyx_k_market_name, sizeof(__pyx_k_market_name), 0, 0, 1, 1},
  {0, __pyx_k_market_pair, sizeof(__pyx_k_market_pair), 0, 0, 1, 1},
  {0, __pyx_k_market_status_data_frame, sizeof(__pyx_k_market_status_data_frame), 0, 0, 1, 1},
  {0, __pyx_k_market_trading_pair_tuple, sizeof(__pyx_k_market_trading_pair_tuple), 0, 0, 1, 1},
  {0, __pyx_k_market_trading_pair_tuples, sizeof(__pyx_k_market_trading_pair_tuples), 0, 0, 1, 1},
  {0, __pyx_k_markets, sizeof(__pyx_k_markets), 0, 0, 1, 1},
  {0, __pyx_k_markets_columns, sizeof(__pyx_k_markets_columns), 0, 0, 1, 1},
  {0, __pyx_k_markets_data, sizeof(__pyx_k_markets_data), 0, 0, 1, 1},
  {0, __pyx_k_mid_price, sizeof(__pyx_k_mid_price), 0, 0, 1, 1},
  {0, __pyx_k_msg, sizeof(__pyx_k_msg), 0, 0, 1, 1},
  {0, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {0, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {0, __pyx_k_nan, sizeof(__pyx_k_nan), 0, 1, 0, 1},
  {0, __pyx_k_network_status, sizeof(__pyx_k_network_status), 0, 0, 1, 1},
  {0, __pyx_k_network_warning, sizeof(__pyx_k_network_warning), 0, 0, 1, 1},
  {0, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {0, __pyx_k_notify, sizeof(__pyx_k_notify), 0, 0, 1, 1},
  {0, __pyx_k_notify_hb_app, sizeof(__pyx_k_notify_hb_app), 0, 0, 1, 1},
  {0, __pyx_k_notify_hb_app_with_timestamp, sizeof(__pyx_k_notify_hb_app_with_timestamp), 0, 0, 1, 1},
  {0, __pyx_k_ofe, sizeof(__pyx_k_ofe), 0, 0, 1, 1},
  {0, __pyx_k_order_filled_event, sizeof(__pyx_k_order_filled_event), 0, 0, 1, 1},
  {0, __pyx_k_order_id, sizeof(__pyx_k_order_id), 0, 0, 1, 1},
  {0, __pyx_k_order_tracker, sizeof(__pyx_k_order_tracker), 0, 0, 1, 1},
  {0, __pyx_k_order_type, sizeof(__pyx_k_order_type), 0, 0, 1, 1},
  {0, __pyx_k_owner, sizeof(__pyx_k_owner), 0, 0, 1, 1},
  {0, __pyx_k_pair_Continued_trading_with_the, sizeof(__pyx_k_pair_Continued_trading_with_the), 0, 1, 0, 0},
  {0, __pyx_k_pandas, sizeof(__pyx_k_pandas), 0, 0, 1, 1},
  {0, __pyx_k_pd, sizeof(__pyx_k_pd), 0, 0, 1, 1},
  {0, __pyx_k_pd_DataFrame, sizeof(__pyx_k_pd_DataFrame), 0, 0, 1, 0},
  {0, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {0, __pyx_k_position_action, sizeof(__pyx_k_position_action), 0, 0, 1, 1},
  {0, __pyx_k_position_action, sizeof(__pyx_k_position_action), 0, 1, 0, 1},
  {0, __pyx_k_price, sizeof(__pyx_k_price), 0, 0, 1, 1},
  {0, __pyx_k_price_and_amount_must_be_Decimal, sizeof(__pyx_k_price_and_amount_must_be_Decimal), 0, 1, 0, 0},
  {0, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {0, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {0, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {0, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {0, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {0, __pyx_k_pyx_unpickle_BaseStrategyEvent, sizeof(__pyx_k_pyx_unpickle_BaseStrategyEvent), 0, 0, 1, 1},
  {0, __pyx_k_pyx_unpickle_BuyOrderCompleted, sizeof(__pyx_k_pyx_unpickle_BuyOrderCompleted), 0, 0, 1, 1},
  {0, __pyx_k_pyx_unpickle_BuyOrderCreatedLi, sizeof(__pyx_k_pyx_unpickle_BuyOrderCreatedLi), 0, 0, 1, 1},
  {0, __pyx_k_pyx_unpickle_FundingPaymentCom, sizeof(__pyx_k_pyx_unpickle_FundingPaymentCom), 0, 0, 1, 1},
  {0, __pyx_k_pyx_unpickle_OrderCancelledLis, sizeof(__pyx_k_pyx_unpickle_OrderCancelledLis), 0, 0, 1, 1},
  {0, __pyx_k_pyx_unpickle_OrderExpiredListe, sizeof(__pyx_k_pyx_unpickle_OrderExpiredListe), 0, 0, 1, 1},
  {0, __pyx_k_pyx_unpickle_OrderFailedListen, sizeof(__pyx_k_pyx_unpickle_OrderFailedListen), 0, 0, 1, 1},
  {0, __pyx_k_pyx_unpickle_OrderFilledListen, sizeof(__pyx_k_pyx_unpickle_OrderFilledListen), 0, 0, 1, 1},
  {0, __pyx_k_pyx_unpickle_RangePositionCrea, sizeof(__pyx_k_pyx_unpickle_RangePositionCrea), 0, 0, 1, 1},
  {0, __pyx_k_pyx_unpickle_RangePositionRemo, sizeof(__pyx_k_pyx_unpickle_RangePositionRemo), 0, 0, 1, 1},
  {0, __pyx_k_pyx_unpickle_SellOrderComplete, sizeof(__pyx_k_pyx_unpickle_SellOrderComplete), 0, 0, 1, 1},
  {0, __pyx_k_pyx_unpickle_SellOrderCreatedL, sizeof(__pyx_k_pyx_unpickle_SellOrderCreatedL), 0, 0, 1, 1},
  {0, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {0, __pyx_k_quantity, sizeof(__pyx_k_quantity), 0, 0, 1, 1},
  {0, __pyx_k_quote_asset, sizeof(__pyx_k_quote_asset), 0, 0, 1, 1},
  {0, __pyx_k_quote_asset_conversion_rate, sizeof(__pyx_k_quote_asset_conversion_rate), 0, 0, 1, 1},
  {0, __pyx_k_quote_balance, sizeof(__pyx_k_quote_balance), 0, 0, 1, 1},
  {0, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {0, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {0, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {0, __pyx_k_remove_markets, sizeof(__pyx_k_remove_markets), 0, 0, 1, 1},
  {0, __pyx_k_return, sizeof(__pyx_k_return), 0, 0, 1, 1},
  {0, __pyx_k_s, sizeof(__pyx_k_s), 0, 1, 0, 1},
  {0, __pyx_k_s_decimal_0, sizeof(__pyx_k_s_decimal_0), 0, 0, 1, 1},
  {0, __pyx_k_s_decimal_nan, sizeof(__pyx_k_s_decimal_nan), 0, 0, 1, 1},
  {0, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {0, __pyx_k_self__events_cannot_be_converted, sizeof(__pyx_k_self__events_cannot_be_converted), 0, 0, 1, 0},
  {0, __pyx_k_sell_with_specific_market, sizeof(__pyx_k_sell_with_specific_market), 0, 0, 1, 1},
  {0, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {0, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {0, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {0, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {0, __pyx_k_start_tracking_limit_order, sizeof(__pyx_k_start_tracking_limit_order), 0, 0, 1, 1},
  {0, __pyx_k_start_tracking_market_order, sizeof(__pyx_k_start_tracking_market_order), 0, 0, 1, 1},
  {0, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
  {0, __pyx_k_stop_tracking_limit_order, sizeof(__pyx_k_stop_tracking_limit_order), 0, 0, 1, 1},
  {0, __pyx_k_stop_tracking_market_order, sizeof(__pyx_k_stop_tracking_market_order), 0, 0, 1, 1},
  {0, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {0, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {0, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {0, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, __pyx_k_timestamp, sizeof(__pyx_k_timestamp), 0, 0, 1, 1},
  {0, __pyx_k_track_restored_orders, sizeof(__pyx_k_track_restored_orders), 0, 0, 1, 1},
  {0, __pyx_k_trade_fee, sizeof(__pyx_k_trade_fee), 0, 0, 1, 1},
  {0, __pyx_k_trade_type, sizeof(__pyx_k_trade_type), 0, 0, 1, 1},
  {0, __pyx_k_trading_pair, sizeof(__pyx_k_trading_pair), 0, 0, 1, 1},
  {0, __pyx_k_trading_pairs, sizeof(__pyx_k_trading_pairs), 0, 0, 1, 1},
  {0, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {0, __pyx_k_tz, sizeof(__pyx_k_tz), 0, 0, 1, 1},
  {0, __pyx_k_unit, sizeof(__pyx_k_unit), 0, 0, 1, 1},
  {0, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {0, __pyx_k_use_setstate, sizeof(__pyx_k_use_setstate), 0, 0, 1, 1},
  {0, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {0, __pyx_k_wallet_balance_data_frame, sizeof(__pyx_k_wallet_balance_data_frame), 0, 0, 1, 1},
  {0, __pyx_k_warning_lines, sizeof(__pyx_k_warning_lines), 0, 0, 1, 1},
  {0, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  #else
  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {&__pyx_kp_u_0, __pyx_k_0, sizeof(__pyx_k_0), 0, 1, 0, 0},
  {&__pyx_kp_u_0_0001, __pyx_k_0_0001, sizeof(__pyx_k_0_0001), 0, 1, 0, 0},
  {&__pyx_n_u_Asset, __pyx_k_Asset, sizeof(__pyx_k_Asset), 0, 1, 0, 1},
  {&__pyx_kp_u_Available_Balance, __pyx_k_Available_Balance, sizeof(__pyx_k_Available_Balance), 0, 1, 0, 0},
  {&__pyx_n_s_BUY_ORDER_COMPLETED_EVENT_TAG, __pyx_k_BUY_ORDER_COMPLETED_EVENT_TAG, sizeof(__pyx_k_BUY_ORDER_COMPLETED_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_BUY_ORDER_CREATED_EVENT_TAG, __pyx_k_BUY_ORDER_CREATED_EVENT_TAG, sizeof(__pyx_k_BUY_ORDER_CREATED_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_BaseStrategyEventListener, __pyx_k_BaseStrategyEventListener, sizeof(__pyx_k_BaseStrategyEventListener), 0, 0, 1, 1},
  {&__pyx_n_s_BaseStrategyEventListener___redu, __pyx_k_BaseStrategyEventListener___redu, sizeof(__pyx_k_BaseStrategyEventListener___redu), 0, 0, 1, 1},
  {&__pyx_n_s_BaseStrategyEventListener___sets, __pyx_k_BaseStrategyEventListener___sets, sizeof(__pyx_k_BaseStrategyEventListener___sets), 0, 0, 1, 1},
  {&__pyx_kp_u_Best_Ask_Price, __pyx_k_Best_Ask_Price, sizeof(__pyx_k_Best_Ask_Price), 0, 1, 0, 0},
  {&__pyx_kp_u_Best_Bid_Price, __pyx_k_Best_Bid_Price, sizeof(__pyx_k_Best_Bid_Price), 0, 1, 0, 0},
  {&__pyx_n_s_BuyOrderCompleted, __pyx_k_BuyOrderCompleted, sizeof(__pyx_k_BuyOrderCompleted), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCompletedListener, __pyx_k_BuyOrderCompletedListener, sizeof(__pyx_k_BuyOrderCompletedListener), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCompletedListener___redu, __pyx_k_BuyOrderCompletedListener___redu, sizeof(__pyx_k_BuyOrderCompletedListener___redu), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCompletedListener___sets, __pyx_k_BuyOrderCompletedListener___sets, sizeof(__pyx_k_BuyOrderCompletedListener___sets), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCreated, __pyx_k_BuyOrderCreated, sizeof(__pyx_k_BuyOrderCreated), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCreatedListener, __pyx_k_BuyOrderCreatedListener, sizeof(__pyx_k_BuyOrderCreatedListener), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCreatedListener___reduce, __pyx_k_BuyOrderCreatedListener___reduce, sizeof(__pyx_k_BuyOrderCreatedListener___reduce), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCreatedListener___setsta, __pyx_k_BuyOrderCreatedListener___setsta, sizeof(__pyx_k_BuyOrderCreatedListener___setsta), 0, 0, 1, 1},
  {&__pyx_n_s_CONNECTED, __pyx_k_CONNECTED, sizeof(__pyx_k_CONNECTED), 0, 0, 1, 1},
  {&__pyx_kp_u_Cancelling_the_limit_order, __pyx_k_Cancelling_the_limit_order, sizeof(__pyx_k_Cancelling_the_limit_order), 0, 1, 0, 0},
  {&__pyx_n_s_DataFrame, __pyx_k_DataFrame, sizeof(__pyx_k_DataFrame), 0, 0, 1, 1},
  {&__pyx_n_s_Decimal, __pyx_k_Decimal, sizeof(__pyx_k_Decimal), 0, 0, 1, 1},
  {&__pyx_kp_u_Delegates_are_not_allowed_to_exe, __pyx_k_Delegates_are_not_allowed_to_exe, sizeof(__pyx_k_Delegates_are_not_allowed_to_exe), 0, 1, 0, 0},
  {&__pyx_n_s_DerivativeBase, __pyx_k_DerivativeBase, sizeof(__pyx_k_DerivativeBase), 0, 0, 1, 1},
  {&__pyx_kp_u_Error_formatting_market_stats, __pyx_k_Error_formatting_market_stats, sizeof(__pyx_k_Error_formatting_market_stats), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_formatting_wallet_balance, __pyx_k_Error_formatting_wallet_balance, sizeof(__pyx_k_Error_formatting_wallet_balance), 0, 1, 0, 0},
  {&__pyx_n_u_Exchange, __pyx_k_Exchange, sizeof(__pyx_k_Exchange), 0, 1, 0, 1},
  {&__pyx_n_s_FUNDING_PAYMENT_COMPLETED_EVENT, __pyx_k_FUNDING_PAYMENT_COMPLETED_EVENT, sizeof(__pyx_k_FUNDING_PAYMENT_COMPLETED_EVENT), 0, 0, 1, 1},
  {&__pyx_kp_u_Flat_fee_in_other_token_than_quo, __pyx_k_Flat_fee_in_other_token_than_quo, sizeof(__pyx_k_Flat_fee_in_other_token_than_quo), 0, 1, 0, 0},
  {&__pyx_n_s_FundingPaymentCompleted, __pyx_k_FundingPaymentCompleted, sizeof(__pyx_k_FundingPaymentCompleted), 0, 0, 1, 1},
  {&__pyx_n_s_FundingPaymentCompletedListener, __pyx_k_FundingPaymentCompletedListener, sizeof(__pyx_k_FundingPaymentCompletedListener), 0, 0, 1, 1},
  {&__pyx_n_s_FundingPaymentCompletedListener_2, __pyx_k_FundingPaymentCompletedListener_2, sizeof(__pyx_k_FundingPaymentCompletedListener_2), 0, 0, 1, 1},
  {&__pyx_n_s_FundingPaymentCompletedListener_3, __pyx_k_FundingPaymentCompletedListener_3, sizeof(__pyx_k_FundingPaymentCompletedListener_3), 0, 0, 1, 1},
  {&__pyx_n_s_HummingbotApplication, __pyx_k_HummingbotApplication, sizeof(__pyx_k_HummingbotApplication), 0, 0, 1, 1},
  {&__pyx_n_s_INFO, __pyx_k_INFO, sizeof(__pyx_k_INFO), 0, 0, 1, 1},
  {&__pyx_kp_s_Incompatible_checksums_s_vs_0xdc, __pyx_k_Incompatible_checksums_s_vs_0xdc, sizeof(__pyx_k_Incompatible_checksums_s_vs_0xdc), 0, 0, 1, 0},
  {&__pyx_n_s_List, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {&__pyx_kp_s_List_ConnectorBase, __pyx_k_List_ConnectorBase, sizeof(__pyx_k_List_ConnectorBase), 0, 0, 1, 0},
  {&__pyx_kp_s_List_MarketTradingPairTuple, __pyx_k_List_MarketTradingPairTuple, sizeof(__pyx_k_List_MarketTradingPairTuple), 0, 0, 1, 0},
  {&__pyx_kp_s_List_str, __pyx_k_List_str, sizeof(__pyx_k_List_str), 0, 0, 1, 0},
  {&__pyx_n_s_MARKET, __pyx_k_MARKET, sizeof(__pyx_k_MARKET), 0, 0, 1, 1},
  {&__pyx_n_u_Market, __pyx_k_Market, sizeof(__pyx_k_Market), 0, 1, 0, 1},
  {&__pyx_n_s_MarketEvent, __pyx_k_MarketEvent, sizeof(__pyx_k_MarketEvent), 0, 0, 1, 1},
  {&__pyx_n_s_MarketTradingPairTuple, __pyx_k_MarketTradingPairTuple, sizeof(__pyx_k_MarketTradingPairTuple), 0, 0, 1, 1},
  {&__pyx_kp_u_Market_object_for_buy_order_is_n, __pyx_k_Market_object_for_buy_order_is_n, sizeof(__pyx_k_Market_object_for_buy_order_is_n), 0, 1, 0, 0},
  {&__pyx_kp_u_Market_object_for_sell_order_is, __pyx_k_Market_object_for_sell_order_is, sizeof(__pyx_k_Market_object_for_sell_order_is), 0, 1, 0, 0},
  {&__pyx_kp_u_Markets_are_offline_for_the, __pyx_k_Markets_are_offline_for_the, sizeof(__pyx_k_Markets_are_offline_for_the), 0, 1, 0, 0},
  {&__pyx_kp_u_Mid_Price, __pyx_k_Mid_Price, sizeof(__pyx_k_Mid_Price), 0, 1, 0, 0},
  {&__pyx_n_s_NaN, __pyx_k_NaN, sizeof(__pyx_k_NaN), 0, 0, 1, 1},
  {&__pyx_n_u_NaN, __pyx_k_NaN, sizeof(__pyx_k_NaN), 0, 1, 0, 1},
  {&__pyx_n_s_NetworkStatus, __pyx_k_NetworkStatus, sizeof(__pyx_k_NetworkStatus), 0, 0, 1, 1},
  {&__pyx_kp_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_OPEN, __pyx_k_OPEN, sizeof(__pyx_k_OPEN), 0, 0, 1, 1},
  {&__pyx_n_s_ORDER_CANCELLED_EVENT_TAG, __pyx_k_ORDER_CANCELLED_EVENT_TAG, sizeof(__pyx_k_ORDER_CANCELLED_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_ORDER_EXPIRED_EVENT_TAG, __pyx_k_ORDER_EXPIRED_EVENT_TAG, sizeof(__pyx_k_ORDER_EXPIRED_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_ORDER_FAILURE_EVENT_TAG, __pyx_k_ORDER_FAILURE_EVENT_TAG, sizeof(__pyx_k_ORDER_FAILURE_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_ORDER_FILLED_EVENT_TAG, __pyx_k_ORDER_FILLED_EVENT_TAG, sizeof(__pyx_k_ORDER_FILLED_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_OrderCancelled, __pyx_k_OrderCancelled, sizeof(__pyx_k_OrderCancelled), 0, 0, 1, 1},
  {&__pyx_n_s_OrderCancelledListener, __pyx_k_OrderCancelledListener, sizeof(__pyx_k_OrderCancelledListener), 0, 0, 1, 1},
  {&__pyx_n_s_OrderCancelledListener___reduce, __pyx_k_OrderCancelledListener___reduce, sizeof(__pyx_k_OrderCancelledListener___reduce), 0, 0, 1, 1},
  {&__pyx_n_s_OrderCancelledListener___setstat, __pyx_k_OrderCancelledListener___setstat, sizeof(__pyx_k_OrderCancelledListener___setstat), 0, 0, 1, 1},
  {&__pyx_n_s_OrderExpired, __pyx_k_OrderExpired, sizeof(__pyx_k_OrderExpired), 0, 0, 1, 1},
  {&__pyx_n_s_OrderExpiredListener, __pyx_k_OrderExpiredListener, sizeof(__pyx_k_OrderExpiredListener), 0, 0, 1, 1},
  {&__pyx_n_s_OrderExpiredListener___reduce_cy, __pyx_k_OrderExpiredListener___reduce_cy, sizeof(__pyx_k_OrderExpiredListener___reduce_cy), 0, 0, 1, 1},
  {&__pyx_n_s_OrderExpiredListener___setstate, __pyx_k_OrderExpiredListener___setstate, sizeof(__pyx_k_OrderExpiredListener___setstate), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFailedListener, __pyx_k_OrderFailedListener, sizeof(__pyx_k_OrderFailedListener), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFailedListener___reduce_cyt, __pyx_k_OrderFailedListener___reduce_cyt, sizeof(__pyx_k_OrderFailedListener___reduce_cyt), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFailedListener___setstate_c, __pyx_k_OrderFailedListener___setstate_c, sizeof(__pyx_k_OrderFailedListener___setstate_c), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFailure, __pyx_k_OrderFailure, sizeof(__pyx_k_OrderFailure), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFilled, __pyx_k_OrderFilled, sizeof(__pyx_k_OrderFilled), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFilledEvent, __pyx_k_OrderFilledEvent, sizeof(__pyx_k_OrderFilledEvent), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFilledListener, __pyx_k_OrderFilledListener, sizeof(__pyx_k_OrderFilledListener), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFilledListener___reduce_cyt, __pyx_k_OrderFilledListener___reduce_cyt, sizeof(__pyx_k_OrderFilledListener___reduce_cyt), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFilledListener___setstate_c, __pyx_k_OrderFilledListener___setstate_c, sizeof(__pyx_k_OrderFilledListener___setstate_c), 0, 0, 1, 1},
  {&__pyx_n_s_OrderTracker, __pyx_k_OrderTracker, sizeof(__pyx_k_OrderTracker), 0, 0, 1, 1},
  {&__pyx_n_s_OrderType, __pyx_k_OrderType, sizeof(__pyx_k_OrderType), 0, 0, 1, 1},
  {&__pyx_n_s_PickleError, __pyx_k_PickleError, sizeof(__pyx_k_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_PositionAction, __pyx_k_PositionAction, sizeof(__pyx_k_PositionAction), 0, 0, 1, 1},
  {&__pyx_n_s_RANGE_POSITION_CREATED_EVENT_TAG, __pyx_k_RANGE_POSITION_CREATED_EVENT_TAG, sizeof(__pyx_k_RANGE_POSITION_CREATED_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_RANGE_POSITION_REMOVED_EVENT_TAG, __pyx_k_RANGE_POSITION_REMOVED_EVENT_TAG, sizeof(__pyx_k_RANGE_POSITION_REMOVED_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_RangePositionCreated, __pyx_k_RangePositionCreated, sizeof(__pyx_k_RangePositionCreated), 0, 0, 1, 1},
  {&__pyx_n_s_RangePositionCreatedListener, __pyx_k_RangePositionCreatedListener, sizeof(__pyx_k_RangePositionCreatedListener), 0, 0, 1, 1},
  {&__pyx_n_s_RangePositionCreatedListener___r, __pyx_k_RangePositionCreatedListener___r, sizeof(__pyx_k_RangePositionCreatedListener___r), 0, 0, 1, 1},
  {&__pyx_n_s_RangePositionCreatedListener___s, __pyx_k_RangePositionCreatedListener___s, sizeof(__pyx_k_RangePositionCreatedListener___s), 0, 0, 1, 1},
  {&__pyx_n_s_RangePositionRemoved, __pyx_k_RangePositionRemoved, sizeof(__pyx_k_RangePositionRemoved), 0, 0, 1, 1},
  {&__pyx_n_s_RangePositionRemovedListener, __pyx_k_RangePositionRemovedListener, sizeof(__pyx_k_RangePositionRemovedListener), 0, 0, 1, 1},
  {&__pyx_n_s_RangePositionRemovedListener___r, __pyx_k_RangePositionRemovedListener___r, sizeof(__pyx_k_RangePositionRemovedListener___r), 0, 0, 1, 1},
  {&__pyx_n_s_RangePositionRemovedListener___s, __pyx_k_RangePositionRemovedListener___s, sizeof(__pyx_k_RangePositionRemovedListener___s), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_SELL_ORDER_COMPLETED_EVENT_TAG, __pyx_k_SELL_ORDER_COMPLETED_EVENT_TAG, sizeof(__pyx_k_SELL_ORDER_COMPLETED_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_SELL_ORDER_CREATED_EVENT_TAG, __pyx_k_SELL_ORDER_CREATED_EVENT_TAG, sizeof(__pyx_k_SELL_ORDER_CREATED_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCompleted, __pyx_k_SellOrderCompleted, sizeof(__pyx_k_SellOrderCompleted), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCompletedListener, __pyx_k_SellOrderCompletedListener, sizeof(__pyx_k_SellOrderCompletedListener), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCompletedListener___red, __pyx_k_SellOrderCompletedListener___red, sizeof(__pyx_k_SellOrderCompletedListener___red), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCompletedListener___set, __pyx_k_SellOrderCompletedListener___set, sizeof(__pyx_k_SellOrderCompletedListener___set), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCreated, __pyx_k_SellOrderCreated, sizeof(__pyx_k_SellOrderCreated), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCreatedListener, __pyx_k_SellOrderCreatedListener, sizeof(__pyx_k_SellOrderCreatedListener), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCreatedListener___reduc, __pyx_k_SellOrderCreatedListener___reduc, sizeof(__pyx_k_SellOrderCreatedListener___reduc), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCreatedListener___setst, __pyx_k_SellOrderCreatedListener___setst, sizeof(__pyx_k_SellOrderCreatedListener___setst), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase, __pyx_k_StrategyBase, sizeof(__pyx_k_StrategyBase), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase___get___locals_even, __pyx_k_StrategyBase___get___locals_even, sizeof(__pyx_k_StrategyBase___get___locals_even), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase___get___locals_lamb, __pyx_k_StrategyBase___get___locals_lamb, sizeof(__pyx_k_StrategyBase___get___locals_lamb), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase___reduce_cython, __pyx_k_StrategyBase___reduce_cython, sizeof(__pyx_k_StrategyBase___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase___setstate_cython, __pyx_k_StrategyBase___setstate_cython, sizeof(__pyx_k_StrategyBase___setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_add_markets, __pyx_k_StrategyBase_add_markets, sizeof(__pyx_k_StrategyBase_add_markets), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_balance_warning, __pyx_k_StrategyBase_balance_warning, sizeof(__pyx_k_StrategyBase_balance_warning), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_buy_with_specific_m, __pyx_k_StrategyBase_buy_with_specific_m, sizeof(__pyx_k_StrategyBase_buy_with_specific_m), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_cancel_order, __pyx_k_StrategyBase_cancel_order, sizeof(__pyx_k_StrategyBase_cancel_order), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_cum_flat_fees, __pyx_k_StrategyBase_cum_flat_fees, sizeof(__pyx_k_StrategyBase_cum_flat_fees), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_format_status, __pyx_k_StrategyBase_format_status, sizeof(__pyx_k_StrategyBase_format_status), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_init_params, __pyx_k_StrategyBase_init_params, sizeof(__pyx_k_StrategyBase_init_params), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_log_with_clock, __pyx_k_StrategyBase_log_with_clock, sizeof(__pyx_k_StrategyBase_log_with_clock), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_logger, __pyx_k_StrategyBase_logger, sizeof(__pyx_k_StrategyBase_logger), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_market_status_data, __pyx_k_StrategyBase_market_status_data, sizeof(__pyx_k_StrategyBase_market_status_data), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_network_warning, __pyx_k_StrategyBase_network_warning, sizeof(__pyx_k_StrategyBase_network_warning), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_notify_hb_app, __pyx_k_StrategyBase_notify_hb_app, sizeof(__pyx_k_StrategyBase_notify_hb_app), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_notify_hb_app_with, __pyx_k_StrategyBase_notify_hb_app_with, sizeof(__pyx_k_StrategyBase_notify_hb_app_with), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_remove_markets, __pyx_k_StrategyBase_remove_markets, sizeof(__pyx_k_StrategyBase_remove_markets), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_sell_with_specific, __pyx_k_StrategyBase_sell_with_specific, sizeof(__pyx_k_StrategyBase_sell_with_specific), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_start_tracking_limi, __pyx_k_StrategyBase_start_tracking_limi, sizeof(__pyx_k_StrategyBase_start_tracking_limi), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_start_tracking_mark, __pyx_k_StrategyBase_start_tracking_mark, sizeof(__pyx_k_StrategyBase_start_tracking_mark), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_stop_tracking_limit, __pyx_k_StrategyBase_stop_tracking_limit, sizeof(__pyx_k_StrategyBase_stop_tracking_limit), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_stop_tracking_marke, __pyx_k_StrategyBase_stop_tracking_marke, sizeof(__pyx_k_StrategyBase_stop_tracking_marke), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_track_restored_orde, __pyx_k_StrategyBase_track_restored_orde, sizeof(__pyx_k_StrategyBase_track_restored_orde), 0, 0, 1, 1},
  {&__pyx_n_s_StrategyBase_wallet_balance_data, __pyx_k_StrategyBase_wallet_balance_data, sizeof(__pyx_k_StrategyBase_wallet_balance_data), 0, 0, 1, 1},
  {&__pyx_n_s_Timestamp, __pyx_k_Timestamp, sizeof(__pyx_k_Timestamp), 0, 0, 1, 1},
  {&__pyx_kp_u_Total_Balance, __pyx_k_Total_Balance, sizeof(__pyx_k_Total_Balance), 0, 1, 0, 0},
  {&__pyx_n_s_Trade, __pyx_k_Trade, sizeof(__pyx_k_Trade), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_u_UTC, __pyx_k_UTC, sizeof(__pyx_k_UTC), 0, 1, 0, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s__154, __pyx_k__154, sizeof(__pyx_k__154), 0, 0, 1, 1},
  {&__pyx_kp_u__30, __pyx_k__30, sizeof(__pyx_k__30), 0, 1, 0, 0},
  {&__pyx_kp_u__31, __pyx_k__31, sizeof(__pyx_k__31), 0, 1, 0, 0},
  {&__pyx_kp_u__32, __pyx_k__32, sizeof(__pyx_k__32), 0, 1, 0, 0},
  {&__pyx_n_s__33, __pyx_k__33, sizeof(__pyx_k__33), 0, 0, 1, 1},
  {&__pyx_kp_u__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 1, 0, 0},
  {&__pyx_kp_u__7, __pyx_k__7, sizeof(__pyx_k__7), 0, 1, 0, 0},
  {&__pyx_kp_u__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 1, 0, 0},
  {&__pyx_n_s_active_markets, __pyx_k_active_markets, sizeof(__pyx_k_active_markets), 0, 0, 1, 1},
  {&__pyx_n_s_add_markets, __pyx_k_add_markets, sizeof(__pyx_k_add_markets), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_amount, __pyx_k_amount, sizeof(__pyx_k_amount), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_ask_price, __pyx_k_ask_price, sizeof(__pyx_k_ask_price), 0, 0, 1, 1},
  {&__pyx_n_s_assets_columns, __pyx_k_assets_columns, sizeof(__pyx_k_assets_columns), 0, 0, 1, 1},
  {&__pyx_n_s_assets_data, __pyx_k_assets_data, sizeof(__pyx_k_assets_data), 0, 0, 1, 1},
  {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {&__pyx_n_s_available_base_balance, __pyx_k_available_base_balance, sizeof(__pyx_k_available_base_balance), 0, 0, 1, 1},
  {&__pyx_n_s_available_quote_balance, __pyx_k_available_quote_balance, sizeof(__pyx_k_available_quote_balance), 0, 0, 1, 1},
  {&__pyx_kp_u_balance_is_too_low_Cannot_place, __pyx_k_balance_is_too_low_Cannot_place, sizeof(__pyx_k_balance_is_too_low_Cannot_place), 0, 1, 0, 0},
  {&__pyx_n_s_balance_warning, __pyx_k_balance_warning, sizeof(__pyx_k_balance_warning), 0, 0, 1, 1},
  {&__pyx_n_s_base_asset, __pyx_k_base_asset, sizeof(__pyx_k_base_asset), 0, 0, 1, 1},
  {&__pyx_n_s_base_asset_conversion_rate, __pyx_k_base_asset_conversion_rate, sizeof(__pyx_k_base_asset_conversion_rate), 0, 0, 1, 1},
  {&__pyx_n_s_base_balance, __pyx_k_base_balance, sizeof(__pyx_k_base_balance), 0, 0, 1, 1},
  {&__pyx_n_s_bid_price, __pyx_k_bid_price, sizeof(__pyx_k_bid_price), 0, 0, 1, 1},
  {&__pyx_n_s_bool, __pyx_k_bool, sizeof(__pyx_k_bool), 0, 0, 1, 1},
  {&__pyx_n_s_buy_with_specific_market, __pyx_k_buy_with_specific_market, sizeof(__pyx_k_buy_with_specific_market), 0, 0, 1, 1},
  {&__pyx_n_s_cancel_order, __pyx_k_cancel_order, sizeof(__pyx_k_cancel_order), 0, 0, 1, 1},
  {&__pyx_n_s_client_order_id, __pyx_k_client_order_id, sizeof(__pyx_k_client_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_kp_u_clock, __pyx_k_clock, sizeof(__pyx_k_clock), 0, 1, 0, 0},
  {&__pyx_n_s_clock_timestamp, __pyx_k_clock_timestamp, sizeof(__pyx_k_clock_timestamp), 0, 0, 1, 1},
  {&__pyx_n_s_cls, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
  {&__pyx_n_s_columns, __pyx_k_columns, sizeof(__pyx_k_columns), 0, 0, 1, 1},
  {&__pyx_n_s_cum_flat_fees, __pyx_k_cum_flat_fees, sizeof(__pyx_k_cum_flat_fees), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_decimal, __pyx_k_decimal, sizeof(__pyx_k_decimal), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_dict_2, __pyx_k_dict_2, sizeof(__pyx_k_dict_2), 0, 0, 1, 1},
  {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
  {&__pyx_n_s_display_name, __pyx_k_display_name, sizeof(__pyx_k_display_name), 0, 0, 1, 1},
  {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
  {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_event_logs, __pyx_k_event_logs, sizeof(__pyx_k_event_logs), 0, 0, 1, 1},
  {&__pyx_n_s_event_to_trade, __pyx_k_event_to_trade, sizeof(__pyx_k_event_to_trade), 0, 0, 1, 1},
  {&__pyx_n_s_exc_info, __pyx_k_exc_info, sizeof(__pyx_k_exc_info), 0, 0, 1, 1},
  {&__pyx_n_s_expiration_seconds, __pyx_k_expiration_seconds, sizeof(__pyx_k_expiration_seconds), 0, 0, 1, 1},
  {&__pyx_n_u_expiration_ts, __pyx_k_expiration_ts, sizeof(__pyx_k_expiration_ts), 0, 1, 0, 1},
  {&__pyx_n_s_filter, __pyx_k_filter, sizeof(__pyx_k_filter), 0, 0, 1, 1},
  {&__pyx_n_s_flat_fees, __pyx_k_flat_fees, sizeof(__pyx_k_flat_fees), 0, 0, 1, 1},
  {&__pyx_n_s_format_status, __pyx_k_format_status, sizeof(__pyx_k_format_status), 0, 0, 1, 1},
  {&__pyx_n_s_fromtimestamp, __pyx_k_fromtimestamp, sizeof(__pyx_k_fromtimestamp), 0, 0, 1, 1},
  {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
  {&__pyx_n_s_get_available_balance, __pyx_k_get_available_balance, sizeof(__pyx_k_get_available_balance), 0, 0, 1, 1},
  {&__pyx_n_s_get_balance, __pyx_k_get_balance, sizeof(__pyx_k_get_balance), 0, 0, 1, 1},
  {&__pyx_n_s_get_price, __pyx_k_get_price, sizeof(__pyx_k_get_price), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_client_hummingbot_app, __pyx_k_hummingbot_client_hummingbot_app, sizeof(__pyx_k_hummingbot_client_hummingbot_app), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_derivative, __pyx_k_hummingbot_connector_derivative, sizeof(__pyx_k_hummingbot_connector_derivative), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_data_type_trade, __pyx_k_hummingbot_core_data_type_trade, sizeof(__pyx_k_hummingbot_core_data_type_trade), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_event_events, __pyx_k_hummingbot_core_event_events, sizeof(__pyx_k_hummingbot_core_event_events), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_network_iterator, __pyx_k_hummingbot_core_network_iterator, sizeof(__pyx_k_hummingbot_core_network_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_strategy_market_tradi, __pyx_k_hummingbot_strategy_market_tradi, sizeof(__pyx_k_hummingbot_strategy_market_tradi), 0, 0, 1, 1},
  {&__pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_k_hummingbot_strategy_strategy_bas, sizeof(__pyx_k_hummingbot_strategy_strategy_bas), 0, 0, 1, 0},
  {&__pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_k_hummingbot_strategy_strategy_bas_2, sizeof(__pyx_k_hummingbot_strategy_strategy_bas_2), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_init_params, __pyx_k_init_params, sizeof(__pyx_k_init_params), 0, 0, 1, 1},
  {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {&__pyx_n_s_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
  {&__pyx_n_s_is_buy, __pyx_k_is_buy, sizeof(__pyx_k_is_buy), 0, 0, 1, 1},
  {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {&__pyx_n_s_is_limit_type, __pyx_k_is_limit_type, sizeof(__pyx_k_is_limit_type), 0, 0, 1, 1},
  {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_n_s_limit_orders, __pyx_k_limit_orders, sizeof(__pyx_k_limit_orders), 0, 0, 1, 1},
  {&__pyx_n_s_log, __pyx_k_log, sizeof(__pyx_k_log), 0, 0, 1, 1},
  {&__pyx_n_s_log_level, __pyx_k_log_level, sizeof(__pyx_k_log_level), 0, 0, 1, 1},
  {&__pyx_n_s_log_with_clock, __pyx_k_log_with_clock, sizeof(__pyx_k_log_with_clock), 0, 0, 1, 1},
  {&__pyx_n_s_logger, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_kp_s_logging_Logger, __pyx_k_logging_Logger, sizeof(__pyx_k_logging_Logger), 0, 0, 1, 0},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_main_application, __pyx_k_main_application, sizeof(__pyx_k_main_application), 0, 0, 1, 1},
  {&__pyx_n_s_map, __pyx_k_map, sizeof(__pyx_k_map), 0, 0, 1, 1},
  {&__pyx_n_s_market, __pyx_k_market, sizeof(__pyx_k_market), 0, 0, 1, 1},
  {&__pyx_kp_u_market_2, __pyx_k_market_2, sizeof(__pyx_k_market_2), 0, 1, 0, 0},
  {&__pyx_n_s_market_name, __pyx_k_market_name, sizeof(__pyx_k_market_name), 0, 0, 1, 1},
  {&__pyx_n_s_market_pair, __pyx_k_market_pair, sizeof(__pyx_k_market_pair), 0, 0, 1, 1},
  {&__pyx_n_s_market_status_data_frame, __pyx_k_market_status_data_frame, sizeof(__pyx_k_market_status_data_frame), 0, 0, 1, 1},
  {&__pyx_n_s_market_trading_pair_tuple, __pyx_k_market_trading_pair_tuple, sizeof(__pyx_k_market_trading_pair_tuple), 0, 0, 1, 1},
  {&__pyx_n_s_market_trading_pair_tuples, __pyx_k_market_trading_pair_tuples, sizeof(__pyx_k_market_trading_pair_tuples), 0, 0, 1, 1},
  {&__pyx_n_s_markets, __pyx_k_markets, sizeof(__pyx_k_markets), 0, 0, 1, 1},
  {&__pyx_n_s_markets_columns, __pyx_k_markets_columns, sizeof(__pyx_k_markets_columns), 0, 0, 1, 1},
  {&__pyx_n_s_markets_data, __pyx_k_markets_data, sizeof(__pyx_k_markets_data), 0, 0, 1, 1},
  {&__pyx_n_s_mid_price, __pyx_k_mid_price, sizeof(__pyx_k_mid_price), 0, 0, 1, 1},
  {&__pyx_n_s_msg, __pyx_k_msg, sizeof(__pyx_k_msg), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_u_nan, __pyx_k_nan, sizeof(__pyx_k_nan), 0, 1, 0, 1},
  {&__pyx_n_s_network_status, __pyx_k_network_status, sizeof(__pyx_k_network_status), 0, 0, 1, 1},
  {&__pyx_n_s_network_warning, __pyx_k_network_warning, sizeof(__pyx_k_network_warning), 0, 0, 1, 1},
  {&__pyx_n_s_new, __pyx_k_new, sizeof(__pyx_k_new), 0, 0, 1, 1},
  {&__pyx_n_s_notify, __pyx_k_notify, sizeof(__pyx_k_notify), 0, 0, 1, 1},
  {&__pyx_n_s_notify_hb_app, __pyx_k_notify_hb_app, sizeof(__pyx_k_notify_hb_app), 0, 0, 1, 1},
  {&__pyx_n_s_notify_hb_app_with_timestamp, __pyx_k_notify_hb_app_with_timestamp, sizeof(__pyx_k_notify_hb_app_with_timestamp), 0, 0, 1, 1},
  {&__pyx_n_s_ofe, __pyx_k_ofe, sizeof(__pyx_k_ofe), 0, 0, 1, 1},
  {&__pyx_n_s_order_filled_event, __pyx_k_order_filled_event, sizeof(__pyx_k_order_filled_event), 0, 0, 1, 1},
  {&__pyx_n_s_order_id, __pyx_k_order_id, sizeof(__pyx_k_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_order_tracker, __pyx_k_order_tracker, sizeof(__pyx_k_order_tracker), 0, 0, 1, 1},
  {&__pyx_n_s_order_type, __pyx_k_order_type, sizeof(__pyx_k_order_type), 0, 0, 1, 1},
  {&__pyx_n_s_owner, __pyx_k_owner, sizeof(__pyx_k_owner), 0, 0, 1, 1},
  {&__pyx_kp_u_pair_Continued_trading_with_the, __pyx_k_pair_Continued_trading_with_the, sizeof(__pyx_k_pair_Continued_trading_with_the), 0, 1, 0, 0},
  {&__pyx_n_s_pandas, __pyx_k_pandas, sizeof(__pyx_k_pandas), 0, 0, 1, 1},
  {&__pyx_n_s_pd, __pyx_k_pd, sizeof(__pyx_k_pd), 0, 0, 1, 1},
  {&__pyx_kp_s_pd_DataFrame, __pyx_k_pd_DataFrame, sizeof(__pyx_k_pd_DataFrame), 0, 0, 1, 0},
  {&__pyx_n_s_pickle, __pyx_k_pickle, sizeof(__pyx_k_pickle), 0, 0, 1, 1},
  {&__pyx_n_s_position_action, __pyx_k_position_action, sizeof(__pyx_k_position_action), 0, 0, 1, 1},
  {&__pyx_n_u_position_action, __pyx_k_position_action, sizeof(__pyx_k_position_action), 0, 1, 0, 1},
  {&__pyx_n_s_price, __pyx_k_price, sizeof(__pyx_k_price), 0, 0, 1, 1},
  {&__pyx_kp_u_price_and_amount_must_be_Decimal, __pyx_k_price_and_amount_must_be_Decimal, sizeof(__pyx_k_price_and_amount_must_be_Decimal), 0, 1, 0, 0},
  {&__pyx_n_s_pyx_PickleError, __pyx_k_pyx_PickleError, sizeof(__pyx_k_pyx_PickleError), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_checksum, __pyx_k_pyx_checksum, sizeof(__pyx_k_pyx_checksum), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_result, __pyx_k_pyx_result, sizeof(__pyx_k_pyx_result), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_type, __pyx_k_pyx_type, sizeof(__pyx_k_pyx_type), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_BaseStrategyEvent, __pyx_k_pyx_unpickle_BaseStrategyEvent, sizeof(__pyx_k_pyx_unpickle_BaseStrategyEvent), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_BuyOrderCompleted, __pyx_k_pyx_unpickle_BuyOrderCompleted, sizeof(__pyx_k_pyx_unpickle_BuyOrderCompleted), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_BuyOrderCreatedLi, __pyx_k_pyx_unpickle_BuyOrderCreatedLi, sizeof(__pyx_k_pyx_unpickle_BuyOrderCreatedLi), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_FundingPaymentCom, __pyx_k_pyx_unpickle_FundingPaymentCom, sizeof(__pyx_k_pyx_unpickle_FundingPaymentCom), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_OrderCancelledLis, __pyx_k_pyx_unpickle_OrderCancelledLis, sizeof(__pyx_k_pyx_unpickle_OrderCancelledLis), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_OrderExpiredListe, __pyx_k_pyx_unpickle_OrderExpiredListe, sizeof(__pyx_k_pyx_unpickle_OrderExpiredListe), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_OrderFailedListen, __pyx_k_pyx_unpickle_OrderFailedListen, sizeof(__pyx_k_pyx_unpickle_OrderFailedListen), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_OrderFilledListen, __pyx_k_pyx_unpickle_OrderFilledListen, sizeof(__pyx_k_pyx_unpickle_OrderFilledListen), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_RangePositionCrea, __pyx_k_pyx_unpickle_RangePositionCrea, sizeof(__pyx_k_pyx_unpickle_RangePositionCrea), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_RangePositionRemo, __pyx_k_pyx_unpickle_RangePositionRemo, sizeof(__pyx_k_pyx_unpickle_RangePositionRemo), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_SellOrderComplete, __pyx_k_pyx_unpickle_SellOrderComplete, sizeof(__pyx_k_pyx_unpickle_SellOrderComplete), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_unpickle_SellOrderCreatedL, __pyx_k_pyx_unpickle_SellOrderCreatedL, sizeof(__pyx_k_pyx_unpickle_SellOrderCreatedL), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_quantity, __pyx_k_quantity, sizeof(__pyx_k_quantity), 0, 0, 1, 1},
  {&__pyx_n_s_quote_asset, __pyx_k_quote_asset, sizeof(__pyx_k_quote_asset), 0, 0, 1, 1},
  {&__pyx_n_s_quote_asset_conversion_rate, __pyx_k_quote_asset_conversion_rate, sizeof(__pyx_k_quote_asset_conversion_rate), 0, 0, 1, 1},
  {&__pyx_n_s_quote_balance, __pyx_k_quote_balance, sizeof(__pyx_k_quote_balance), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_remove_markets, __pyx_k_remove_markets, sizeof(__pyx_k_remove_markets), 0, 0, 1, 1},
  {&__pyx_n_s_return, __pyx_k_return, sizeof(__pyx_k_return), 0, 0, 1, 1},
  {&__pyx_n_u_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 1, 0, 1},
  {&__pyx_n_s_s_decimal_0, __pyx_k_s_decimal_0, sizeof(__pyx_k_s_decimal_0), 0, 0, 1, 1},
  {&__pyx_n_s_s_decimal_nan, __pyx_k_s_decimal_nan, sizeof(__pyx_k_s_decimal_nan), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_kp_s_self__events_cannot_be_converted, __pyx_k_self__events_cannot_be_converted, sizeof(__pyx_k_self__events_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_n_s_sell_with_specific_market, __pyx_k_sell_with_specific_market, sizeof(__pyx_k_sell_with_specific_market), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_sorted, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {&__pyx_n_s_start_tracking_limit_order, __pyx_k_start_tracking_limit_order, sizeof(__pyx_k_start_tracking_limit_order), 0, 0, 1, 1},
  {&__pyx_n_s_start_tracking_market_order, __pyx_k_start_tracking_market_order, sizeof(__pyx_k_start_tracking_market_order), 0, 0, 1, 1},
  {&__pyx_n_s_state, __pyx_k_state, sizeof(__pyx_k_state), 0, 0, 1, 1},
  {&__pyx_n_s_stop_tracking_limit_order, __pyx_k_stop_tracking_limit_order, sizeof(__pyx_k_stop_tracking_limit_order), 0, 0, 1, 1},
  {&__pyx_n_s_stop_tracking_market_order, __pyx_k_stop_tracking_market_order, sizeof(__pyx_k_stop_tracking_market_order), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_timestamp, __pyx_k_timestamp, sizeof(__pyx_k_timestamp), 0, 0, 1, 1},
  {&__pyx_n_s_track_restored_orders, __pyx_k_track_restored_orders, sizeof(__pyx_k_track_restored_orders), 0, 0, 1, 1},
  {&__pyx_n_s_trade_fee, __pyx_k_trade_fee, sizeof(__pyx_k_trade_fee), 0, 0, 1, 1},
  {&__pyx_n_s_trade_type, __pyx_k_trade_type, sizeof(__pyx_k_trade_type), 0, 0, 1, 1},
  {&__pyx_n_s_trading_pair, __pyx_k_trading_pair, sizeof(__pyx_k_trading_pair), 0, 0, 1, 1},
  {&__pyx_n_s_trading_pairs, __pyx_k_trading_pairs, sizeof(__pyx_k_trading_pairs), 0, 0, 1, 1},
  {&__pyx_n_s_typing, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {&__pyx_n_s_tz, __pyx_k_tz, sizeof(__pyx_k_tz), 0, 0, 1, 1},
  {&__pyx_n_s_unit, __pyx_k_unit, sizeof(__pyx_k_unit), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_use_setstate, __pyx_k_use_setstate, sizeof(__pyx_k_use_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_wallet_balance_data_frame, __pyx_k_wallet_balance_data_frame, sizeof(__pyx_k_wallet_balance_data_frame), 0, 0, 1, 1},
  {&__pyx_n_s_warning_lines, __pyx_k_warning_lines, sizeof(__pyx_k_warning_lines), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  #endif
  {0, 0, 0, 0, 0, 0, 0}
};
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 34, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 112, __pyx_L1_error)
  __pyx_builtin_filter = __Pyx_GetBuiltinName(__pyx_n_s_filter); if (!__pyx_builtin_filter) __PYX_ERR(0, 174, __pyx_L1_error)
  __pyx_builtin_map = __Pyx_GetBuiltinName(__pyx_n_s_map); if (!__pyx_builtin_map) __PYX_ERR(0, 175, __pyx_L1_error)
  __pyx_builtin_sorted = __Pyx_GetBuiltinName(__pyx_n_s_sorted); if (!__pyx_builtin_sorted) __PYX_ERR(0, 177, __pyx_L1_error)
  __pyx_builtin_all = __Pyx_GetBuiltinName(__pyx_n_s_all); if (!__pyx_builtin_all) __PYX_ERR(0, 257, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 454, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 457, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 465, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "hummingbot/strategy/strategy_base.pyx":162
 *         The trades are taken from the market event logs.
 *         """
 *         def event_to_trade(order_filled_event: OrderFilledEvent, market_name: str):             # <<<<<<<<<<<<<<
 *             return Trade(order_filled_event.trading_pair,
 *                          order_filled_event.trade_type,
 */
  __pyx_tuple__2 = PyTuple_Pack(2, __pyx_n_s_order_filled_event, __pyx_n_s_market_name); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__2, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_event_to_trade, 162, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(0, 162, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":205
 * 
 *         except Exception:
 *             self.logger().error("Error formatting market stats.", exc_info=True)             # <<<<<<<<<<<<<<
 * 
 *     def wallet_balance_data_frame(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> pd.DataFrame:
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_u_Error_formatting_market_stats); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "hummingbot/strategy/strategy_base.pyx":233
 * 
 *         except Exception:
 *             self.logger().error("Error formatting wallet balance stats.", exc_info=True)             # <<<<<<<<<<<<<<
 * 
 *     def balance_warning(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> List[str]:
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_u_Error_formatting_wallet_balance); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "hummingbot/strategy/strategy_base.pyx":340
 *                 # if the flat fee currency asset does not match quote asset, raise exception for now
 *                 # as we don't support different token conversion atm.
 *                 raise Exception("Flat fee in other token than quote asset is not supported.")             # <<<<<<<<<<<<<<
 *         return total_flat_fees
 * 
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_u_Flat_fee_in_other_token_than_quo); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "hummingbot/strategy/strategy_base.pyx":454
 *                                         position_action=PositionAction.OPEN):
 *         if self._sb_delegate_lock:
 *             raise RuntimeError("Delegates are not allowed to execute orders directly.")             # <<<<<<<<<<<<<<
 * 
 *         if not (isinstance(amount, Decimal) and isinstance(price, Decimal)):
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_Delegates_are_not_allowed_to_exe); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 454, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "hummingbot/strategy/strategy_base.pyx":457
 * 
 *         if not (isinstance(amount, Decimal) and isinstance(price, Decimal)):
 *             raise TypeError("price and amount must be Decimal objects.")             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_u_price_and_amount_must_be_Decimal); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(0, 457, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "hummingbot/strategy/strategy_base.pyx":465
 * 
 *         if market not in self._sb_markets:
 *             raise ValueError(f"Market object for buy order is not in the whitelisted markets set.")             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_u_Market_object_for_buy_order_is_n); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 465, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "hummingbot/strategy/strategy_base.pyx":510
 * 
 *         if market not in self._sb_markets:
 *             raise ValueError(f"Market object for sell order is not in the whitelisted markets set.")             # <<<<<<<<<<<<<<
 * 
 *         cdef:
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_Market_object_for_sell_order_is); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 510, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "hummingbot/strategy/strategy_base.pyx":25
 * 
 * NaN = float("nan")
 * s_decimal_nan = Decimal("NaN")             # <<<<<<<<<<<<<<
 * s_decimal_0 = Decimal("0")
 * 
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_n_u_NaN); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "hummingbot/strategy/strategy_base.pyx":26
 * NaN = float("nan")
 * s_decimal_nan = Decimal("NaN")
 * s_decimal_0 = Decimal("0")             # <<<<<<<<<<<<<<
 * 
 * # <editor-fold desc="+ Event listeners">
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_u_0); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__36 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BaseStrategyEventListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BaseStrategyEventListener__set_state(self, __pyx_state)
 */
  __pyx_tuple__38 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__38, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__40 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BuyOrderCompletedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BuyOrderCompletedListener__set_state(self, __pyx_state)
 */
  __pyx_tuple__42 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__44 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_SellOrderCompletedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_SellOrderCompletedListener__set_state(self, __pyx_state)
 */
  __pyx_tuple__46 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__48 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_FundingPaymentCompletedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_FundingPaymentCompletedListener__set_state(self, __pyx_state)
 */
  __pyx_tuple__50 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__52 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderFilledListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderFilledListener__set_state(self, __pyx_state)
 */
  __pyx_tuple__54 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__56 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderFailedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderFailedListener__set_state(self, __pyx_state)
 */
  __pyx_tuple__58 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__60 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderCancelledListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderCancelledListener__set_state(self, __pyx_state)
 */
  __pyx_tuple__62 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__64 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderExpiredListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderExpiredListener__set_state(self, __pyx_state)
 */
  __pyx_tuple__66 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__68 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BuyOrderCreatedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BuyOrderCreatedListener__set_state(self, __pyx_state)
 */
  __pyx_tuple__70 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__72 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_SellOrderCreatedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_SellOrderCreatedListener__set_state(self, __pyx_state)
 */
  __pyx_tuple__74 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__76 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RangePositionCreatedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RangePositionCreatedListener__set_state(self, __pyx_state)
 */
  __pyx_tuple__78 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_tuple__80 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_state, __pyx_n_s_dict_2, __pyx_n_s_use_setstate); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RangePositionRemovedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RangePositionRemovedListener__set_state(self, __pyx_state)
 */
  __pyx_tuple__82 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 16, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(1, 16, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":110
 *     RANGE_POSITION_REMOVED_EVENT_TAG = MarketEvent.RangePositionRemoved.value
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls) -> logging.Logger:
 *         raise NotImplementedError
 */
  __pyx_tuple__84 = PyTuple_Pack(1, __pyx_n_s_cls); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_logger, 110, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(0, 110, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":133
 *         self._sb_order_tracker = OrderTracker()
 * 
 *     def init_params(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *         Assigns strategy parameters, this function must be called directly after init.
 */
  __pyx_tuple__86 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_args, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARARGS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_init_params, 133, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 133, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":149
 *         return self._sb_order_tracker
 * 
 *     def format_status(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError
 * 
 */
  __pyx_tuple__88 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_format_status, 149, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(0, 149, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":152
 *         raise NotImplementedError
 * 
 *     def log_with_clock(self, log_level: int, msg: str, **kwargs):             # <<<<<<<<<<<<<<
 *         clock_timestamp = pd.Timestamp(self._current_timestamp, unit="s", tz="UTC")
 *         self.logger().log(log_level, f"{msg} [clock={str(clock_timestamp)}]", **kwargs)
 */
  __pyx_tuple__90 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_log_level, __pyx_n_s_msg, __pyx_n_s_kwargs, __pyx_n_s_clock_timestamp); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_log_with_clock, 152, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(0, 152, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":179
 *         return sorted(past_trades, key=lambda x: x.timestamp)
 * 
 *     def market_status_data_frame(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         cdef:
 *             ConnectorBase market
 */
  __pyx_tuple__92 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_market_trading_pair_tuples, __pyx_n_s_market, __pyx_n_s_trading_pair, __pyx_n_s_base_asset, __pyx_n_s_quote_asset, __pyx_n_s_bid_price, __pyx_n_s_ask_price, __pyx_n_s_markets_data, __pyx_n_s_markets_columns, __pyx_n_s_market_trading_pair_tuple, __pyx_n_s_mid_price); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_market_status_data_frame, 179, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(0, 179, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":207
 *             self.logger().error("Error formatting market stats.", exc_info=True)
 * 
 *     def wallet_balance_data_frame(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         cdef:
 *             ConnectorBase market
 */
  __pyx_tuple__94 = PyTuple_Pack(15, __pyx_n_s_self, __pyx_n_s_market_trading_pair_tuples, __pyx_n_s_market, __pyx_n_s_base_asset, __pyx_n_s_quote_asset, __pyx_n_s_base_balance, __pyx_n_s_quote_balance, __pyx_n_s_base_asset_conversion_rate, __pyx_n_s_quote_asset_conversion_rate, __pyx_n_s_assets_data, __pyx_n_s_assets_columns, __pyx_n_s_market_trading_pair_tuple, __pyx_n_s_trading_pair, __pyx_n_s_available_base_balance, __pyx_n_s_available_quote_balance); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 15, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_wallet_balance_data_frame, 207, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(0, 207, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":235
 *             self.logger().error("Error formatting wallet balance stats.", exc_info=True)
 * 
 *     def balance_warning(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> List[str]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             double base_balance
 */
  __pyx_tuple__96 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_market_trading_pair_tuples, __pyx_n_s_base_balance, __pyx_n_s_quote_balance, __pyx_n_s_warning_lines, __pyx_n_s_market_trading_pair_tuple); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_balance_warning, 235, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 235, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":253
 *         return warning_lines
 * 
 *     def network_warning(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> List[str]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list warning_lines = []
 */
  __pyx_tuple__98 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_market_trading_pair_tuples, __pyx_n_s_warning_lines, __pyx_n_s_trading_pairs, __pyx_n_s_market_trading_pair_tuple, __pyx_n_s_market_trading_pair_tuple); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_network_warning, 253, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 253, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":299
 *             self._sb_markets.add(typed_market)
 * 
 *     def add_markets(self, markets: List[ConnectorBase]):             # <<<<<<<<<<<<<<
 *         self.c_add_markets(markets)
 * 
 */
  __pyx_tuple__100 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_markets); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_add_markets, 299, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(0, 299, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":323
 *             self._sb_markets.remove(typed_market)
 * 
 *     def remove_markets(self, markets: List[ConnectorBase]):             # <<<<<<<<<<<<<<
 *         self.c_remove_markets(markets)
 * 
 */
  __pyx_tuple__102 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_markets); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_remove_markets, 323, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 323, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":343
 *         return total_flat_fees
 * 
 *     def cum_flat_fees(self, quote_asset: str, flat_fees: List):             # <<<<<<<<<<<<<<
 *         return self.c_sum_flat_fees(quote_asset, flat_fees)
 * 
 */
  __pyx_tuple__104 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_quote_asset, __pyx_n_s_flat_fees); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_cum_flat_fees, 343, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(0, 343, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":437
 *     # ----------------------------------------------------------------------------------------------------------
 * 
 *     def buy_with_specific_market(self, market_trading_pair_tuple, amount,             # <<<<<<<<<<<<<<
 *                                  order_type=OrderType.MARKET,
 *                                  price=s_decimal_nan,
 */
  __pyx_tuple__106 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_market_trading_pair_tuple, __pyx_n_s_amount, __pyx_n_s_order_type, __pyx_n_s_price, __pyx_n_s_expiration_seconds, __pyx_n_s_position_action); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_buy_with_specific_market, 437, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(0, 437, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":482
 *         return order_id
 * 
 *     def sell_with_specific_market(self, market_trading_pair_tuple, amount,             # <<<<<<<<<<<<<<
 *                                   order_type=OrderType.MARKET,
 *                                   price=s_decimal_nan,
 */
  __pyx_tuple__108 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_market_trading_pair_tuple, __pyx_n_s_amount, __pyx_n_s_order_type, __pyx_n_s_price, __pyx_n_s_expiration_seconds, __pyx_n_s_position_action); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_sell_with_specific_market, 482, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(0, 482, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":535
 *             market.c_cancel(market_trading_pair_tuple.trading_pair, order_id)
 * 
 *     def cancel_order(self, market_trading_pair_tuple: MarketTradingPairTuple, order_id: str):             # <<<<<<<<<<<<<<
 *         self.c_cancel_order(market_trading_pair_tuple, order_id)
 *     # ----------------------------------------------------------------------------------------------------------
 */
  __pyx_tuple__110 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_market_trading_pair_tuple, __pyx_n_s_order_id); if (unlikely(!__pyx_tuple__110)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__110);
  __Pyx_GIVEREF(__pyx_tuple__110);
  __pyx_codeobj__111 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__110, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_cancel_order, 535, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__111)) __PYX_ERR(0, 535, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":548
 *         self._sb_order_tracker.c_start_tracking_limit_order(market_pair, order_id, is_buy, price, quantity)
 * 
 *     def start_tracking_limit_order(self, market_pair: MarketTradingPairTuple, order_id: str, is_buy: bool, price: Decimal,             # <<<<<<<<<<<<<<
 *                                    quantity: Decimal):
 * 
 */
  __pyx_tuple__112 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_market_pair, __pyx_n_s_order_id, __pyx_n_s_is_buy, __pyx_n_s_price, __pyx_n_s_quantity); if (unlikely(!__pyx_tuple__112)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__112);
  __Pyx_GIVEREF(__pyx_tuple__112);
  __pyx_codeobj__113 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__112, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_start_tracking_limit_order, 548, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__113)) __PYX_ERR(0, 548, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":556
 *         self._sb_order_tracker.c_stop_tracking_limit_order(market_pair, order_id)
 * 
 *     def stop_tracking_limit_order(self, market_pair: MarketTradingPairTuple, order_id: str):             # <<<<<<<<<<<<<<
 *         self.c_stop_tracking_limit_order(market_pair, order_id)
 * 
 */
  __pyx_tuple__114 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_market_pair, __pyx_n_s_order_id); if (unlikely(!__pyx_tuple__114)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__114);
  __Pyx_GIVEREF(__pyx_tuple__114);
  __pyx_codeobj__115 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__114, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_stop_tracking_limit_order, 556, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__115)) __PYX_ERR(0, 556, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":562
 *         self._sb_order_tracker.c_start_tracking_market_order(market_pair, order_id, is_buy, quantity)
 * 
 *     def start_tracking_market_order(self, market_pair: MarketTradingPairTuple, order_id: str, is_buy: bool, quantity: Decimal):             # <<<<<<<<<<<<<<
 *         self.c_start_tracking_market_order(market_pair, order_id, is_buy, quantity)
 * 
 */
  __pyx_tuple__116 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_market_pair, __pyx_n_s_order_id, __pyx_n_s_is_buy, __pyx_n_s_quantity); if (unlikely(!__pyx_tuple__116)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__116);
  __Pyx_GIVEREF(__pyx_tuple__116);
  __pyx_codeobj__117 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__116, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_start_tracking_market_order, 562, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__117)) __PYX_ERR(0, 562, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":568
 *         self._sb_order_tracker.c_stop_tracking_market_order(market_pair, order_id)
 * 
 *     def stop_tracking_market_order(self, market_pair: MarketTradingPairTuple, order_id: str):             # <<<<<<<<<<<<<<
 *         self.c_stop_tracking_market_order(market_pair, order_id)
 * 
 */
  __pyx_tuple__118 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_market_pair, __pyx_n_s_order_id); if (unlikely(!__pyx_tuple__118)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__118);
  __Pyx_GIVEREF(__pyx_tuple__118);
  __pyx_codeobj__119 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__118, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_stop_tracking_market_order, 568, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__119)) __PYX_ERR(0, 568, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":585
 *         return restored_order_ids
 * 
 *     def track_restored_orders(self, market_pair: MarketTradingPairTuple):             # <<<<<<<<<<<<<<
 *         return self.c_track_restored_orders(market_pair)
 * 
 */
  __pyx_tuple__120 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_market_pair); if (unlikely(!__pyx_tuple__120)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__120);
  __Pyx_GIVEREF(__pyx_tuple__120);
  __pyx_codeobj__121 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__120, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_track_restored_orders, 585, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__121)) __PYX_ERR(0, 585, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":588
 *         return self.c_track_restored_orders(market_pair)
 * 
 *     def notify_hb_app(self, msg: str):             # <<<<<<<<<<<<<<
 *         """
 *         Method called to display message on the Output Panel(upper left)
 */
  __pyx_tuple__122 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_msg, __pyx_n_s_HummingbotApplication); if (unlikely(!__pyx_tuple__122)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__122);
  __Pyx_GIVEREF(__pyx_tuple__122);
  __pyx_codeobj__123 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__122, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_notify_hb_app, 588, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__123)) __PYX_ERR(0, 588, __pyx_L1_error)

  /* "hummingbot/strategy/strategy_base.pyx":596
 *         HummingbotApplication.main_application()._notify(msg)
 * 
 *     def notify_hb_app_with_timestamp(self, msg: str):             # <<<<<<<<<<<<<<
 *         """
 *         Method called to display message on the Output Panel(upper left)
 */
  __pyx_tuple__124 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_msg, __pyx_n_s_timestamp); if (unlikely(!__pyx_tuple__124)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__124);
  __Pyx_GIVEREF(__pyx_tuple__124);
  __pyx_codeobj__125 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__124, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_strategy_bas, __pyx_n_s_notify_hb_app_with_timestamp, 596, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__125)) __PYX_ERR(0, 596, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__126 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__126)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__126);
  __Pyx_GIVEREF(__pyx_tuple__126);
  __pyx_codeobj__127 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__126, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__127)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __pyx_tuple__128 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__128)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__128);
  __Pyx_GIVEREF(__pyx_tuple__128);
  __pyx_codeobj__129 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__128, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__129)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __pyx_unpickle_BaseStrategyEventListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_tuple__130 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__130)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__130);
  __Pyx_GIVEREF(__pyx_tuple__130);
  __pyx_codeobj__131 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__130, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_BaseStrategyEvent, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__131)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__132 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__132)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__132);
  __Pyx_GIVEREF(__pyx_tuple__132);
  __pyx_codeobj__133 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__132, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_BuyOrderCompleted, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__133)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__134 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__134)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__134);
  __Pyx_GIVEREF(__pyx_tuple__134);
  __pyx_codeobj__135 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__134, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_SellOrderComplete, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__135)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__136 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__136)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__136);
  __Pyx_GIVEREF(__pyx_tuple__136);
  __pyx_codeobj__137 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__136, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_FundingPaymentCom, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__137)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__138 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__138)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__138);
  __Pyx_GIVEREF(__pyx_tuple__138);
  __pyx_codeobj__139 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__138, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_OrderFilledListen, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__139)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__140 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__140)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__140);
  __Pyx_GIVEREF(__pyx_tuple__140);
  __pyx_codeobj__141 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__140, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_OrderFailedListen, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__141)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__142 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__142)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__142);
  __Pyx_GIVEREF(__pyx_tuple__142);
  __pyx_codeobj__143 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__142, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_OrderCancelledLis, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__143)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__144 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__144)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__144);
  __Pyx_GIVEREF(__pyx_tuple__144);
  __pyx_codeobj__145 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__144, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_OrderExpiredListe, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__145)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__146 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__146)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__146);
  __Pyx_GIVEREF(__pyx_tuple__146);
  __pyx_codeobj__147 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__146, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_BuyOrderCreatedLi, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__147)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__148 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__148)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__148);
  __Pyx_GIVEREF(__pyx_tuple__148);
  __pyx_codeobj__149 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__148, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_SellOrderCreatedL, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__149)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__150 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__150)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__150);
  __Pyx_GIVEREF(__pyx_tuple__150);
  __pyx_codeobj__151 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__150, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_RangePositionCrea, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__151)) __PYX_ERR(1, 1, __pyx_L1_error)
  __pyx_tuple__152 = PyTuple_Pack(5, __pyx_n_s_pyx_type, __pyx_n_s_pyx_checksum, __pyx_n_s_pyx_state, __pyx_n_s_pyx_PickleError, __pyx_n_s_pyx_result); if (unlikely(!__pyx_tuple__152)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__152);
  __Pyx_GIVEREF(__pyx_tuple__152);
  __pyx_codeobj__153 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__152, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_pyx_unpickle_RangePositionRemo, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__153)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_InitString(__pyx_string_tab[0], &__pyx_kp_u_) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[1], &__pyx_kp_u_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[2], &__pyx_kp_u_0_0001) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[3], &__pyx_n_u_Asset) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[4], &__pyx_kp_u_Available_Balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[5], &__pyx_n_s_BUY_ORDER_COMPLETED_EVENT_TAG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[6], &__pyx_n_s_BUY_ORDER_CREATED_EVENT_TAG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[7], &__pyx_n_s_BaseStrategyEventListener) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[8], &__pyx_n_s_BaseStrategyEventListener___redu) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[9], &__pyx_n_s_BaseStrategyEventListener___sets) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[10], &__pyx_kp_u_Best_Ask_Price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[11], &__pyx_kp_u_Best_Bid_Price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[12], &__pyx_n_s_BuyOrderCompleted) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[13], &__pyx_n_s_BuyOrderCompletedListener) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[14], &__pyx_n_s_BuyOrderCompletedListener___redu) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[15], &__pyx_n_s_BuyOrderCompletedListener___sets) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[16], &__pyx_n_s_BuyOrderCreated) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[17], &__pyx_n_s_BuyOrderCreatedListener) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[18], &__pyx_n_s_BuyOrderCreatedListener___reduce) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[19], &__pyx_n_s_BuyOrderCreatedListener___setsta) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[20], &__pyx_n_s_CONNECTED) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[21], &__pyx_kp_u_Cancelling_the_limit_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[22], &__pyx_n_s_DataFrame) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[23], &__pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[24], &__pyx_kp_u_Delegates_are_not_allowed_to_exe) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[25], &__pyx_n_s_DerivativeBase) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[26], &__pyx_kp_u_Error_formatting_market_stats) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[27], &__pyx_kp_u_Error_formatting_wallet_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[28], &__pyx_n_u_Exchange) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[29], &__pyx_n_s_FUNDING_PAYMENT_COMPLETED_EVENT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[30], &__pyx_kp_u_Flat_fee_in_other_token_than_quo) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[31], &__pyx_n_s_FundingPaymentCompleted) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[32], &__pyx_n_s_FundingPaymentCompletedListener) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[33], &__pyx_n_s_FundingPaymentCompletedListener_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[34], &__pyx_n_s_FundingPaymentCompletedListener_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[35], &__pyx_n_s_HummingbotApplication) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[36], &__pyx_n_s_INFO) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[37], &__pyx_kp_s_Incompatible_checksums_s_vs_0xdc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[38], &__pyx_n_s_List) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[39], &__pyx_kp_s_List_ConnectorBase) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[40], &__pyx_kp_s_List_MarketTradingPairTuple) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[41], &__pyx_kp_s_List_str) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[42], &__pyx_n_s_MARKET) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[43], &__pyx_n_u_Market) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[44], &__pyx_n_s_MarketEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[45], &__pyx_n_s_MarketTradingPairTuple) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[46], &__pyx_kp_u_Market_object_for_buy_order_is_n) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[47], &__pyx_kp_u_Market_object_for_sell_order_is) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[48], &__pyx_kp_u_Markets_are_offline_for_the) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[49], &__pyx_kp_u_Mid_Price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[50], &__pyx_n_s_NaN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[51], &__pyx_n_u_NaN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[52], &__pyx_n_s_NetworkStatus) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[53], &__pyx_kp_u_None) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[54], &__pyx_n_s_NotImplementedError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[55], &__pyx_n_s_OPEN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[56], &__pyx_n_s_ORDER_CANCELLED_EVENT_TAG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[57], &__pyx_n_s_ORDER_EXPIRED_EVENT_TAG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[58], &__pyx_n_s_ORDER_FAILURE_EVENT_TAG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[59], &__pyx_n_s_ORDER_FILLED_EVENT_TAG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[60], &__pyx_n_s_OrderCancelled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[61], &__pyx_n_s_OrderCancelledListener) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[62], &__pyx_n_s_OrderCancelledListener___reduce) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[63], &__pyx_n_s_OrderCancelledListener___setstat) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[64], &__pyx_n_s_OrderExpired) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[65], &__pyx_n_s_OrderExpiredListener) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[66], &__pyx_n_s_OrderExpiredListener___reduce_cy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[67], &__pyx_n_s_OrderExpiredListener___setstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[68], &__pyx_n_s_OrderFailedListener) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[69], &__pyx_n_s_OrderFailedListener___reduce_cyt) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[70], &__pyx_n_s_OrderFailedListener___setstate_c) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[71], &__pyx_n_s_OrderFailure) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[72], &__pyx_n_s_OrderFilled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[73], &__pyx_n_s_OrderFilledEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[74], &__pyx_n_s_OrderFilledListener) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[75], &__pyx_n_s_OrderFilledListener___reduce_cyt) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[76], &__pyx_n_s_OrderFilledListener___setstate_c) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[77], &__pyx_n_s_OrderTracker) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[78], &__pyx_n_s_OrderType) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[79], &__pyx_n_s_PickleError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[80], &__pyx_n_s_PositionAction) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[81], &__pyx_n_s_RANGE_POSITION_CREATED_EVENT_TAG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[82], &__pyx_n_s_RANGE_POSITION_REMOVED_EVENT_TAG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[83], &__pyx_n_s_RangePositionCreated) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[84], &__pyx_n_s_RangePositionCreatedListener) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[85], &__pyx_n_s_RangePositionCreatedListener___r) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[86], &__pyx_n_s_RangePositionCreatedListener___s) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[87], &__pyx_n_s_RangePositionRemoved) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[88], &__pyx_n_s_RangePositionRemovedListener) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[89], &__pyx_n_s_RangePositionRemovedListener___r) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[90], &__pyx_n_s_RangePositionRemovedListener___s) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[91], &__pyx_n_s_RuntimeError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[92], &__pyx_n_s_SELL_ORDER_COMPLETED_EVENT_TAG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[93], &__pyx_n_s_SELL_ORDER_CREATED_EVENT_TAG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[94], &__pyx_n_s_SellOrderCompleted) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[95], &__pyx_n_s_SellOrderCompletedListener) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[96], &__pyx_n_s_SellOrderCompletedListener___red) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[97], &__pyx_n_s_SellOrderCompletedListener___set) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[98], &__pyx_n_s_SellOrderCreated) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[99], &__pyx_n_s_SellOrderCreatedListener) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[100], &__pyx_n_s_SellOrderCreatedListener___reduc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[101], &__pyx_n_s_SellOrderCreatedListener___setst) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[102], &__pyx_n_s_StrategyBase) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[103], &__pyx_n_s_StrategyBase___get___locals_even) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[104], &__pyx_n_s_StrategyBase___get___locals_lamb) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[105], &__pyx_n_s_StrategyBase___reduce_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[106], &__pyx_n_s_StrategyBase___setstate_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[107], &__pyx_n_s_StrategyBase_add_markets) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[108], &__pyx_n_s_StrategyBase_balance_warning) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[109], &__pyx_n_s_StrategyBase_buy_with_specific_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[110], &__pyx_n_s_StrategyBase_cancel_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[111], &__pyx_n_s_StrategyBase_cum_flat_fees) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[112], &__pyx_n_s_StrategyBase_format_status) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[113], &__pyx_n_s_StrategyBase_init_params) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[114], &__pyx_n_s_StrategyBase_log_with_clock) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[115], &__pyx_n_s_StrategyBase_logger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[116], &__pyx_n_s_StrategyBase_market_status_data) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[117], &__pyx_n_s_StrategyBase_network_warning) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[118], &__pyx_n_s_StrategyBase_notify_hb_app) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[119], &__pyx_n_s_StrategyBase_notify_hb_app_with) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[120], &__pyx_n_s_StrategyBase_remove_markets) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[121], &__pyx_n_s_StrategyBase_sell_with_specific) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[122], &__pyx_n_s_StrategyBase_start_tracking_limi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[123], &__pyx_n_s_StrategyBase_start_tracking_mark) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[124], &__pyx_n_s_StrategyBase_stop_tracking_limit) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[125], &__pyx_n_s_StrategyBase_stop_tracking_marke) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[126], &__pyx_n_s_StrategyBase_track_restored_orde) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[127], &__pyx_n_s_StrategyBase_wallet_balance_data) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[128], &__pyx_n_s_Timestamp) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[129], &__pyx_kp_u_Total_Balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[130], &__pyx_n_s_Trade) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[131], &__pyx_n_s_TypeError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[132], &__pyx_n_u_UTC) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[133], &__pyx_n_s_ValueError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[134], &__pyx_n_s__154) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[135], &__pyx_kp_u__30) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[136], &__pyx_kp_u__31) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[137], &__pyx_kp_u__32) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[138], &__pyx_n_s__33) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[139], &__pyx_kp_u__6) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[140], &__pyx_kp_u__7) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[141], &__pyx_kp_u__8) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[142], &__pyx_n_s_active_markets) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[143], &__pyx_n_s_add_markets) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[144], &__pyx_n_s_all) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[145], &__pyx_n_s_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[146], &__pyx_n_s_args) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[147], &__pyx_n_s_ask_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[148], &__pyx_n_s_assets_columns) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[149], &__pyx_n_s_assets_data) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[150], &__pyx_n_s_asyncio_coroutines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[151], &__pyx_n_s_available_base_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[152], &__pyx_n_s_available_quote_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[153], &__pyx_kp_u_balance_is_too_low_Cannot_place) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[154], &__pyx_n_s_balance_warning) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[155], &__pyx_n_s_base_asset) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[156], &__pyx_n_s_base_asset_conversion_rate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[157], &__pyx_n_s_base_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[158], &__pyx_n_s_bid_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[159], &__pyx_n_s_bool) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[160], &__pyx_n_s_buy_with_specific_market) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[161], &__pyx_n_s_cancel_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[162], &__pyx_n_s_client_order_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[163], &__pyx_n_s_cline_in_traceback) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[164], &__pyx_kp_u_clock) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[165], &__pyx_n_s_clock_timestamp) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[166], &__pyx_n_s_cls) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[167], &__pyx_n_s_columns) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[168], &__pyx_n_s_cum_flat_fees) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[169], &__pyx_n_s_data) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[170], &__pyx_n_s_decimal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[171], &__pyx_n_s_dict) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[172], &__pyx_n_s_dict_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[173], &__pyx_kp_u_disable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[174], &__pyx_n_s_display_name) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[175], &__pyx_n_s_e) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[176], &__pyx_kp_u_enable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[177], &__pyx_n_s_error) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[178], &__pyx_n_s_event_logs) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[179], &__pyx_n_s_event_to_trade) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[180], &__pyx_n_s_exc_info) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[181], &__pyx_n_s_expiration_seconds) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[182], &__pyx_n_u_expiration_ts) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[183], &__pyx_n_s_filter) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[184], &__pyx_n_s_flat_fees) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[185], &__pyx_n_s_format_status) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[186], &__pyx_n_s_fromtimestamp) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[187], &__pyx_kp_u_gc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[188], &__pyx_n_s_get_available_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[189], &__pyx_n_s_get_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[190], &__pyx_n_s_get_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[191], &__pyx_n_s_getstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[192], &__pyx_n_s_hummingbot_client_hummingbot_app) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[193], &__pyx_n_s_hummingbot_connector_derivative) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[194], &__pyx_n_s_hummingbot_core_data_type_trade) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[195], &__pyx_n_s_hummingbot_core_event_events) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[196], &__pyx_n_s_hummingbot_core_network_iterator) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[197], &__pyx_n_s_hummingbot_strategy_market_tradi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[198], &__pyx_kp_s_hummingbot_strategy_strategy_bas) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[199], &__pyx_n_s_hummingbot_strategy_strategy_bas_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[200], &__pyx_n_s_import) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[201], &__pyx_n_s_init) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[202], &__pyx_n_s_init_params) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[203], &__pyx_n_s_initializing) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[204], &__pyx_n_s_int) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[205], &__pyx_n_s_is_buy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[206], &__pyx_n_s_is_coroutine) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[207], &__pyx_n_s_is_limit_type) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[208], &__pyx_kp_u_isenabled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[209], &__pyx_n_s_key) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[210], &__pyx_n_s_kwargs) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[211], &__pyx_n_s_limit_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[212], &__pyx_n_s_log) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[213], &__pyx_n_s_log_level) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[214], &__pyx_n_s_log_with_clock) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[215], &__pyx_n_s_logger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[216], &__pyx_n_s_logging) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[217], &__pyx_kp_s_logging_Logger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[218], &__pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[219], &__pyx_n_s_main_application) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[220], &__pyx_n_s_map) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[221], &__pyx_n_s_market) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[222], &__pyx_kp_u_market_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[223], &__pyx_n_s_market_name) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[224], &__pyx_n_s_market_pair) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[225], &__pyx_n_s_market_status_data_frame) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[226], &__pyx_n_s_market_trading_pair_tuple) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[227], &__pyx_n_s_market_trading_pair_tuples) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[228], &__pyx_n_s_markets) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[229], &__pyx_n_s_markets_columns) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[230], &__pyx_n_s_markets_data) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[231], &__pyx_n_s_mid_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[232], &__pyx_n_s_msg) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[233], &__pyx_n_s_name) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[234], &__pyx_n_s_name_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[235], &__pyx_n_u_nan) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[236], &__pyx_n_s_network_status) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[237], &__pyx_n_s_network_warning) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[238], &__pyx_n_s_new) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[239], &__pyx_n_s_notify) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[240], &__pyx_n_s_notify_hb_app) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[241], &__pyx_n_s_notify_hb_app_with_timestamp) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[242], &__pyx_n_s_ofe) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[243], &__pyx_n_s_order_filled_event) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[244], &__pyx_n_s_order_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[245], &__pyx_n_s_order_tracker) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[246], &__pyx_n_s_order_type) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[247], &__pyx_n_s_owner) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[248], &__pyx_kp_u_pair_Continued_trading_with_the) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[249], &__pyx_n_s_pandas) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[250], &__pyx_n_s_pd) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[251], &__pyx_kp_s_pd_DataFrame) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[252], &__pyx_n_s_pickle) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[253], &__pyx_n_s_position_action) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[254], &__pyx_n_u_position_action) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[255], &__pyx_n_s_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[256], &__pyx_kp_u_price_and_amount_must_be_Decimal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[257], &__pyx_n_s_pyx_PickleError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[258], &__pyx_n_s_pyx_checksum) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[259], &__pyx_n_s_pyx_result) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[260], &__pyx_n_s_pyx_state) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[261], &__pyx_n_s_pyx_type) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[262], &__pyx_n_s_pyx_unpickle_BaseStrategyEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[263], &__pyx_n_s_pyx_unpickle_BuyOrderCompleted) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[264], &__pyx_n_s_pyx_unpickle_BuyOrderCreatedLi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[265], &__pyx_n_s_pyx_unpickle_FundingPaymentCom) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[266], &__pyx_n_s_pyx_unpickle_OrderCancelledLis) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[267], &__pyx_n_s_pyx_unpickle_OrderExpiredListe) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[268], &__pyx_n_s_pyx_unpickle_OrderFailedListen) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[269], &__pyx_n_s_pyx_unpickle_OrderFilledListen) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[270], &__pyx_n_s_pyx_unpickle_RangePositionCrea) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[271], &__pyx_n_s_pyx_unpickle_RangePositionRemo) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[272], &__pyx_n_s_pyx_unpickle_SellOrderComplete) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[273], &__pyx_n_s_pyx_unpickle_SellOrderCreatedL) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[274], &__pyx_n_s_pyx_vtable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[275], &__pyx_n_s_quantity) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[276], &__pyx_n_s_quote_asset) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[277], &__pyx_n_s_quote_asset_conversion_rate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[278], &__pyx_n_s_quote_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[279], &__pyx_n_s_reduce) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[280], &__pyx_n_s_reduce_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[281], &__pyx_n_s_reduce_ex) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[282], &__pyx_n_s_remove_markets) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[283], &__pyx_n_s_return) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[284], &__pyx_n_u_s) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[285], &__pyx_n_s_s_decimal_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[286], &__pyx_n_s_s_decimal_nan) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[287], &__pyx_n_s_self) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[288], &__pyx_kp_s_self__events_cannot_be_converted) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[289], &__pyx_n_s_sell_with_specific_market) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[290], &__pyx_n_s_setstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[291], &__pyx_n_s_setstate_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[292], &__pyx_n_s_sorted) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[293], &__pyx_n_s_spec) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[294], &__pyx_n_s_start_tracking_limit_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[295], &__pyx_n_s_start_tracking_market_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[296], &__pyx_n_s_state) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[297], &__pyx_n_s_stop_tracking_limit_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[298], &__pyx_n_s_stop_tracking_market_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[299], &__pyx_n_s_str) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[300], &__pyx_kp_s_stringsource) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[301], &__pyx_n_s_super) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[302], &__pyx_n_s_test) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[303], &__pyx_n_s_timestamp) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[304], &__pyx_n_s_track_restored_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[305], &__pyx_n_s_trade_fee) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[306], &__pyx_n_s_trade_type) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[307], &__pyx_n_s_trading_pair) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[308], &__pyx_n_s_trading_pairs) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[309], &__pyx_n_s_typing) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[310], &__pyx_n_s_tz) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[311], &__pyx_n_s_unit) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[312], &__pyx_n_s_update) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[313], &__pyx_n_s_use_setstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[314], &__pyx_n_s_value) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[315], &__pyx_n_s_wallet_balance_data_frame) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[316], &__pyx_n_s_warning_lines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[317], &__pyx_n_s_x) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_231533357 = PyInt_FromLong(231533357L); if (unlikely(!__pyx_int_231533357)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.time_iterator"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.time_iterator", "TimeIterator", sizeof(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator = (struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase = &__pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.__pyx_base = *__pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.__pyx_base.c_start = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *, double))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_start;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.__pyx_base.c_stop = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_stop;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.__pyx_base.c_tick = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, double))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_tick;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_add_markets = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_add_markets;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_remove_markets = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_remove_markets;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_did_create_buy_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_create_buy_order;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_did_create_sell_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_create_sell_order;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_did_fill_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_fill_order;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_did_fail_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_fail_order;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_did_cancel_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_cancel_order;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_did_expire_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_expire_order;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_did_complete_buy_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_complete_buy_order;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_did_complete_sell_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_complete_sell_order;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_did_complete_funding_payment = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_complete_funding_payment;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_did_create_range_position_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_create_range_position_order;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_did_remove_range_position_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_remove_range_position_order;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_did_fail_order_tracker = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_fail_order_tracker;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_did_cancel_order_tracker = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_cancel_order_tracker;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_did_expire_order_tracker = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_expire_order_tracker;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_did_complete_buy_order_tracker = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_complete_buy_order_tracker;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_did_complete_sell_order_tracker = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_did_complete_sell_order_tracker;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_buy_with_specific_market = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market *__pyx_optional_args))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_sell_with_specific_market = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market *__pyx_optional_args))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_cancel_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_cancel_order;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_start_tracking_limit_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, int, PyObject *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_start_tracking_limit_order;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_stop_tracking_limit_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_stop_tracking_limit_order;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_start_tracking_market_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, int, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_start_tracking_market_order;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_stop_tracking_market_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_stop_tracking_market_order;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_track_restored_orders = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_track_restored_orders;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_StrategyBase.c_sum_flat_fees = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sum_flat_fees;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase = PyType_FromSpecWithBases(&__pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase_spec, __pyx_t_2); if (unlikely(!__pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  #else
  __pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase.tp_base = __pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator;
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase.tp_dictoffset && __pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase.tp_dict, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  if (__Pyx_MergeVtables(&__pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StrategyBase, __pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_StrategyBase, (PyObject *)&__pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  #endif
  if (__pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase.tp_weaklistoffset == 0) __pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase, __pyx_base.__pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase;
  #else
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase = &__pyx_type_10hummingbot_8strategy_13strategy_base_StrategyBase;
  #endif
  __pyx_t_2 = PyImport_ImportModule("hummingbot.core.event.event_listener"); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener = __Pyx_ImportType(__pyx_t_2, "hummingbot.core.event.event_listener", "EventListener", sizeof(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener = &__pyx_vtable_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener.__pyx_base = *__pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_3 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener = PyType_FromSpecWithBases(&__pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener_spec, __pyx_t_3); if (unlikely(!__pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  #else
  __pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener.tp_base = __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener;
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener.tp_dictoffset && __pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener.tp_dict, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  if (__Pyx_MergeVtables(&__pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BaseStrategyEventListener, __pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BaseStrategyEventListener, (PyObject *)&__pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  #endif
  if (__pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener.tp_weaklistoffset == 0) __pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener, __pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  #else
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener = &__pyx_type_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  #endif
  __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener = &__pyx_vtable_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener.__pyx_base = *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener.__pyx_base.__pyx_base.c_call = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener_c_call;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_3 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener = PyType_FromSpecWithBases(&__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener_spec, __pyx_t_3); if (unlikely(!__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  #else
  __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener.tp_base = __pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener.tp_dictoffset && __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener.tp_dict, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  if (__Pyx_MergeVtables(&__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BuyOrderCompletedListener, __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BuyOrderCompletedListener, (PyObject *)&__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  #endif
  if (__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener.tp_weaklistoffset == 0) __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener, __pyx_base.__pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener;
  #else
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener = &__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener;
  #endif
  __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener = &__pyx_vtable_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener.__pyx_base = *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener.__pyx_base.__pyx_base.c_call = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener_c_call;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_3 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener = PyType_FromSpecWithBases(&__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener_spec, __pyx_t_3); if (unlikely(!__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  #else
  __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener.tp_base = __pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener.tp_dictoffset && __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener.tp_dict, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  if (__Pyx_MergeVtables(&__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SellOrderCompletedListener, __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SellOrderCompletedListener, (PyObject *)&__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  #endif
  if (__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener.tp_weaklistoffset == 0) __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener, __pyx_base.__pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener;
  #else
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener = &__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener;
  #endif
  __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener = &__pyx_vtable_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener.__pyx_base = *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener.__pyx_base.__pyx_base.c_call = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener_c_call;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_3 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener = PyType_FromSpecWithBases(&__pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener_spec, __pyx_t_3); if (unlikely(!__pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  #else
  __pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener.tp_base = __pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener.tp_dictoffset && __pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener.tp_dict, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  if (__Pyx_MergeVtables(&__pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FundingPaymentCompletedListener, __pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_FundingPaymentCompletedListener, (PyObject *)&__pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  #endif
  if (__pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener.tp_weaklistoffset == 0) __pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener, __pyx_base.__pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener;
  #else
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener = &__pyx_type_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener;
  #endif
  __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderFilledListener = &__pyx_vtable_10hummingbot_8strategy_13strategy_base_OrderFilledListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_OrderFilledListener.__pyx_base = *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_OrderFilledListener.__pyx_base.__pyx_base.c_call = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_19OrderFilledListener_c_call;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_3 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener = PyType_FromSpecWithBases(&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener_spec, __pyx_t_3); if (unlikely(!__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  #else
  __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener.tp_base = __pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener.tp_dictoffset && __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderFilledListener) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener.tp_dict, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderFilledListener) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  if (__Pyx_MergeVtables(&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_OrderFilledListener, __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_OrderFilledListener, (PyObject *)&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  #endif
  if (__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener.tp_weaklistoffset == 0) __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFilledListener, __pyx_base.__pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFilledListener = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener;
  #else
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFilledListener = &__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFilledListener;
  #endif
  __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderFailedListener = &__pyx_vtable_10hummingbot_8strategy_13strategy_base_OrderFailedListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_OrderFailedListener.__pyx_base = *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_OrderFailedListener.__pyx_base.__pyx_base.c_call = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_19OrderFailedListener_c_call;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_3 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener = PyType_FromSpecWithBases(&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener_spec, __pyx_t_3); if (unlikely(!__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  #else
  __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener.tp_base = __pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener.tp_dictoffset && __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderFailedListener) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener.tp_dict, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderFailedListener) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  if (__Pyx_MergeVtables(&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_OrderFailedListener, __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_OrderFailedListener, (PyObject *)&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  #endif
  if (__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener.tp_weaklistoffset == 0) __pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderFailedListener, __pyx_base.__pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFailedListener = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener;
  #else
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFailedListener = &__pyx_type_10hummingbot_8strategy_13strategy_base_OrderFailedListener;
  #endif
  __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderCancelledListener = &__pyx_vtable_10hummingbot_8strategy_13strategy_base_OrderCancelledListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_OrderCancelledListener.__pyx_base = *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_OrderCancelledListener.__pyx_base.__pyx_base.c_call = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener_c_call;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_3 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener = PyType_FromSpecWithBases(&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener_spec, __pyx_t_3); if (unlikely(!__pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  #else
  __pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener.tp_base = __pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener.tp_dictoffset && __pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderCancelledListener) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener.tp_dict, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderCancelledListener) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (__Pyx_MergeVtables(&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_OrderCancelledListener, __pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_OrderCancelledListener, (PyObject *)&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  #endif
  if (__pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener.tp_weaklistoffset == 0) __pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderCancelledListener, __pyx_base.__pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderCancelledListener = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener;
  #else
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderCancelledListener = &__pyx_type_10hummingbot_8strategy_13strategy_base_OrderCancelledListener;
  #endif
  __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderExpiredListener = &__pyx_vtable_10hummingbot_8strategy_13strategy_base_OrderExpiredListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_OrderExpiredListener.__pyx_base = *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_OrderExpiredListener.__pyx_base.__pyx_base.c_call = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener_c_call;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_3 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener = PyType_FromSpecWithBases(&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener_spec, __pyx_t_3); if (unlikely(!__pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  #else
  __pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener.tp_base = __pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener.tp_dictoffset && __pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderExpiredListener) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener.tp_dict, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_OrderExpiredListener) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  if (__Pyx_MergeVtables(&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_OrderExpiredListener, __pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_OrderExpiredListener, (PyObject *)&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  #endif
  if (__pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener.tp_weaklistoffset == 0) __pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_OrderExpiredListener, __pyx_base.__pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener) < 0) __PYX_ERR(0, 72, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderExpiredListener = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener;
  #else
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderExpiredListener = &__pyx_type_10hummingbot_8strategy_13strategy_base_OrderExpiredListener;
  #endif
  __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener = &__pyx_vtable_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener.__pyx_base = *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener.__pyx_base.__pyx_base.c_call = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener_c_call;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_3 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener = PyType_FromSpecWithBases(&__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener_spec, __pyx_t_3); if (unlikely(!__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  #else
  __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener.tp_base = __pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener.tp_dictoffset && __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener.tp_dict, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
  if (__Pyx_MergeVtables(&__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BuyOrderCreatedListener, __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BuyOrderCreatedListener, (PyObject *)&__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
  #endif
  if (__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener.tp_weaklistoffset == 0) __pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener, __pyx_base.__pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener) < 0) __PYX_ERR(0, 78, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener;
  #else
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener = &__pyx_type_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener;
  #endif
  __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener = &__pyx_vtable_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener.__pyx_base = *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener.__pyx_base.__pyx_base.c_call = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener_c_call;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_3 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener = PyType_FromSpecWithBases(&__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener_spec, __pyx_t_3); if (unlikely(!__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  #else
  __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener.tp_base = __pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener.tp_dictoffset && __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener.tp_dict, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  if (__Pyx_MergeVtables(&__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SellOrderCreatedListener, __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_SellOrderCreatedListener, (PyObject *)&__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  #endif
  if (__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener.tp_weaklistoffset == 0) __pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener, __pyx_base.__pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener) < 0) __PYX_ERR(0, 83, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener;
  #else
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener = &__pyx_type_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener;
  #endif
  __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener = &__pyx_vtable_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener.__pyx_base = *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener.__pyx_base.__pyx_base.c_call = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener_c_call;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_3 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener = PyType_FromSpecWithBases(&__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener_spec, __pyx_t_3); if (unlikely(!__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  #else
  __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener.tp_base = __pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener.tp_dictoffset && __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener.tp_dict, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  if (__Pyx_MergeVtables(&__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RangePositionCreatedListener, __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RangePositionCreatedListener, (PyObject *)&__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  #endif
  if (__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener.tp_weaklistoffset == 0) __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener, __pyx_base.__pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener) < 0) __PYX_ERR(0, 87, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener;
  #else
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener = &__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener;
  #endif
  __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener = &__pyx_vtable_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener.__pyx_base = *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  __pyx_vtable_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener.__pyx_base.__pyx_base.c_call = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *))__pyx_f_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener_c_call;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_3 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener = PyType_FromSpecWithBases(&__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener_spec, __pyx_t_3); if (unlikely(!__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  #else
  __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener.tp_base = __pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener;
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener.tp_dictoffset && __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener.tp_dict, __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  if (__Pyx_MergeVtables(&__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RangePositionRemovedListener, __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_RangePositionRemovedListener, (PyObject *)&__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  #endif
  if (__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener.tp_weaklistoffset == 0) __pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener, __pyx_base.__pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener) < 0) __PYX_ERR(0, 91, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener;
  #else
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener = &__pyx_type_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ = PyType_FromSpec(&__pyx_type_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get___spec); if (unlikely(!__pyx_type_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__)) __PYX_ERR(0, 156, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__) < 0) __PYX_ERR(0, 156, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__.tp_dictoffset && __pyx_type_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__;
  #else
  __pyx_ptype_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__ = &__pyx_type_10hummingbot_8strategy_13strategy_base___pyx_scope_struct____get__;
  #endif
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.clock"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5clock_Clock = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.clock", "Clock", sizeof(struct __pyx_obj_10hummingbot_4core_5clock_Clock), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5clock_Clock) __PYX_ERR(3, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.pubsub"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_6pubsub_PubSub = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.pubsub", "PubSub", sizeof(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_6pubsub_PubSub) __PYX_ERR(4, 17, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub = (struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_6pubsub_PubSub); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub)) __PYX_ERR(4, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.limit_order"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.limit_order", "LimitOrder", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder) __PYX_ERR(5, 6, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_9data_type_11limit_order_LimitOrder = (struct __pyx_vtabstruct_10hummingbot_4core_9data_type_11limit_order_LimitOrder*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_9data_type_11limit_order_LimitOrder)) __PYX_ERR(5, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.strategy.order_tracker"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker = __Pyx_ImportType(__pyx_t_1, "hummingbot.strategy.order_tracker", "OrderTracker", sizeof(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker) __PYX_ERR(6, 7, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_8strategy_13order_tracker_OrderTracker = (struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker); if (unlikely(!__pyx_vtabptr_10hummingbot_8strategy_13order_tracker_OrderTracker)) __PYX_ERR(6, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_reporter"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_reporter", "EventReporter", sizeof(struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter) __PYX_ERR(7, 4, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter)) __PYX_ERR(7, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_logger"); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_logger", "EventLogger", sizeof(struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger) __PYX_ERR(8, 4, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger = (struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger)) __PYX_ERR(8, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.network_iterator"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.network_iterator", "NetworkIterator", sizeof(struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator) __PYX_ERR(9, 6, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator = (struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator)) __PYX_ERR(9, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.connector_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.connector_base", "ConnectorBase", sizeof(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase) __PYX_ERR(10, 5, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase = (struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase); if (unlikely(!__pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase)) __PYX_ERR(10, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_strategy_base(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_strategy_base},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "strategy_base",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_COMPILING_IN_LIMITED_API
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_COMPILING_IN_LIMITED_API
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initstrategy_base(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initstrategy_base(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_strategy_base(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_strategy_base(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_strategy_base(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'strategy_base' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("strategy_base", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyState_AddModule(__pyx_t_1, &__pyx_moduledef) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_strategy_base(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_hummingbot__strategy__strategy_base) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name_2, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "hummingbot.strategy.strategy_base")) {
      if (unlikely((PyDict_SetItemString(modules, "hummingbot.strategy.strategy_base", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "hummingbot/strategy/strategy_base.pyx":1
 * from decimal import Decimal             # <<<<<<<<<<<<<<
 * import logging
 * import pandas as pd
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Decimal);
  __Pyx_GIVEREF(__pyx_n_s_Decimal);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Decimal);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_decimal, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Decimal, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":2
 * from decimal import Decimal
 * import logging             # <<<<<<<<<<<<<<
 * import pandas as pd
 * from typing import (
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_logging, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_2) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":3
 * from decimal import Decimal
 * import logging
 * import pandas as pd             # <<<<<<<<<<<<<<
 * from typing import (
 *     List)
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_pandas, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pd, __pyx_t_2) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":5
 * import pandas as pd
 * from typing import (
 *     List)             # <<<<<<<<<<<<<<
 * 
 * from hummingbot.core.clock cimport Clock
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_List);
  __Pyx_GIVEREF(__pyx_n_s_List);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_List);

  /* "hummingbot/strategy/strategy_base.pyx":4
 * import logging
 * import pandas as pd
 * from typing import (             # <<<<<<<<<<<<<<
 *     List)
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_typing, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_List); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_List, __pyx_t_2) < 0) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":8
 * 
 * from hummingbot.core.clock cimport Clock
 * from hummingbot.core.event.events import MarketEvent             # <<<<<<<<<<<<<<
 * from hummingbot.core.event.event_listener cimport EventListener
 * from hummingbot.core.network_iterator import NetworkStatus
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_MarketEvent);
  __Pyx_GIVEREF(__pyx_n_s_MarketEvent);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_MarketEvent);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_event_events, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MarketEvent, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":10
 * from hummingbot.core.event.events import MarketEvent
 * from hummingbot.core.event.event_listener cimport EventListener
 * from hummingbot.core.network_iterator import NetworkStatus             # <<<<<<<<<<<<<<
 * from hummingbot.strategy.market_trading_pair_tuple import MarketTradingPairTuple
 * from hummingbot.core.time_iterator cimport TimeIterator
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NetworkStatus);
  __Pyx_GIVEREF(__pyx_n_s_NetworkStatus);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NetworkStatus);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_network_iterator, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NetworkStatus, __pyx_t_2) < 0) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":11
 * from hummingbot.core.event.event_listener cimport EventListener
 * from hummingbot.core.network_iterator import NetworkStatus
 * from hummingbot.strategy.market_trading_pair_tuple import MarketTradingPairTuple             # <<<<<<<<<<<<<<
 * from hummingbot.core.time_iterator cimport TimeIterator
 * from hummingbot.connector.connector_base cimport ConnectorBase
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_MarketTradingPairTuple);
  __Pyx_GIVEREF(__pyx_n_s_MarketTradingPairTuple);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_MarketTradingPairTuple);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_strategy_market_tradi, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_MarketTradingPairTuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MarketTradingPairTuple, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":14
 * from hummingbot.core.time_iterator cimport TimeIterator
 * from hummingbot.connector.connector_base cimport ConnectorBase
 * from hummingbot.core.data_type.trade import Trade             # <<<<<<<<<<<<<<
 * from hummingbot.core.event.events import (
 *     OrderFilledEvent,
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Trade);
  __Pyx_GIVEREF(__pyx_n_s_Trade);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Trade);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_data_type_trade, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Trade); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Trade, __pyx_t_2) < 0) __PYX_ERR(0, 14, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":16
 * from hummingbot.core.data_type.trade import Trade
 * from hummingbot.core.event.events import (
 *     OrderFilledEvent,             # <<<<<<<<<<<<<<
 *     OrderType,
 *     PositionAction
 */
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_OrderFilledEvent);
  __Pyx_GIVEREF(__pyx_n_s_OrderFilledEvent);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_OrderFilledEvent);
  __Pyx_INCREF(__pyx_n_s_OrderType);
  __Pyx_GIVEREF(__pyx_n_s_OrderType);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_OrderType);
  __Pyx_INCREF(__pyx_n_s_PositionAction);
  __Pyx_GIVEREF(__pyx_n_s_PositionAction);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_PositionAction);

  /* "hummingbot/strategy/strategy_base.pyx":15
 * from hummingbot.connector.connector_base cimport ConnectorBase
 * from hummingbot.core.data_type.trade import Trade
 * from hummingbot.core.event.events import (             # <<<<<<<<<<<<<<
 *     OrderFilledEvent,
 *     OrderType,
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_event_events, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_OrderFilledEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderFilledEvent, __pyx_t_1) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderType, __pyx_t_1) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_PositionAction); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PositionAction, __pyx_t_1) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":21
 * )
 * 
 * from .order_tracker import OrderTracker             # <<<<<<<<<<<<<<
 * from hummingbot.connector.derivative_base import DerivativeBase
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_OrderTracker);
  __Pyx_GIVEREF(__pyx_n_s_OrderTracker);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_OrderTracker);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_order_tracker, __pyx_t_2, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":22
 * 
 * from .order_tracker import OrderTracker
 * from hummingbot.connector.derivative_base import DerivativeBase             # <<<<<<<<<<<<<<
 * 
 * NaN = float("nan")
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_DerivativeBase);
  __Pyx_GIVEREF(__pyx_n_s_DerivativeBase);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_DerivativeBase);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_connector_derivative, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_DerivativeBase); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_DerivativeBase, __pyx_t_1) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":24
 * from hummingbot.connector.derivative_base import DerivativeBase
 * 
 * NaN = float("nan")             # <<<<<<<<<<<<<<
 * s_decimal_nan = Decimal("NaN")
 * s_decimal_0 = Decimal("0")
 */
  __pyx_t_3 = __Pyx_PyUnicode_AsDouble(__pyx_n_u_nan); if (unlikely(__pyx_t_3 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 24, __pyx_L1_error)
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NaN, __pyx_t_2) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":25
 * 
 * NaN = float("nan")
 * s_decimal_nan = Decimal("NaN")             # <<<<<<<<<<<<<<
 * s_decimal_0 = Decimal("0")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_s_decimal_nan, __pyx_t_1) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":26
 * NaN = float("nan")
 * s_decimal_nan = Decimal("NaN")
 * s_decimal_0 = Decimal("0")             # <<<<<<<<<<<<<<
 * 
 * # <editor-fold desc="+ Event listeners">
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_s_decimal_0, __pyx_t_2) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseStrategyEventListener___redu, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BaseStrategyEventListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BaseStrategyEventListener__set_state(self, __pyx_state)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_25BaseStrategyEventListener_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BaseStrategyEventListener___sets, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_BaseStrategyEventListener);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BuyOrderCompletedListener___redu, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BuyOrderCompletedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BuyOrderCompletedListener__set_state(self, __pyx_state)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_25BuyOrderCompletedListener_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BuyOrderCompletedListener___sets, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCompletedListener);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SellOrderCompletedListener___red, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_SellOrderCompletedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_SellOrderCompletedListener__set_state(self, __pyx_state)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_26SellOrderCompletedListener_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SellOrderCompletedListener___set, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCompletedListener);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_FundingPaymentCompletedListener_2, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_FundingPaymentCompletedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_FundingPaymentCompletedListener__set_state(self, __pyx_state)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_31FundingPaymentCompletedListener_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_FundingPaymentCompletedListener_3, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__51)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_FundingPaymentCompletedListener);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_19OrderFilledListener_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OrderFilledListener___reduce_cyt, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__53)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFilledListener->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFilledListener);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderFilledListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderFilledListener__set_state(self, __pyx_state)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_19OrderFilledListener_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OrderFilledListener___setstate_c, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__55)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFilledListener->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFilledListener);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_19OrderFailedListener_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OrderFailedListener___reduce_cyt, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__57)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFailedListener->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFailedListener);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderFailedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderFailedListener__set_state(self, __pyx_state)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_19OrderFailedListener_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OrderFailedListener___setstate_c, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFailedListener->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderFailedListener);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OrderCancelledListener___reduce, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderCancelledListener->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderCancelledListener);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderCancelledListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderCancelledListener__set_state(self, __pyx_state)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_22OrderCancelledListener_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OrderCancelledListener___setstat, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderCancelledListener->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderCancelledListener);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OrderExpiredListener___reduce_cy, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__65)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderExpiredListener->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderExpiredListener);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_OrderExpiredListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_OrderExpiredListener__set_state(self, __pyx_state)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_20OrderExpiredListener_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_OrderExpiredListener___setstate, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__67)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderExpiredListener->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_OrderExpiredListener);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BuyOrderCreatedListener___reduce, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_BuyOrderCreatedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_BuyOrderCreatedListener__set_state(self, __pyx_state)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_23BuyOrderCreatedListener_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BuyOrderCreatedListener___setsta, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_BuyOrderCreatedListener);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SellOrderCreatedListener___reduc, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__73)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_SellOrderCreatedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_SellOrderCreatedListener__set_state(self, __pyx_state)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_24SellOrderCreatedListener_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_SellOrderCreatedListener___setst, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__75)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_SellOrderCreatedListener);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RangePositionCreatedListener___r, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RangePositionCreatedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RangePositionCreatedListener__set_state(self, __pyx_state)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_28RangePositionCreatedListener_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RangePositionCreatedListener___s, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionCreatedListener);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     cdef tuple state
 *     cdef object _dict
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener_1__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RangePositionRemovedListener___r, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__81)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener->tp_dict, __pyx_n_s_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener);

  /* "(tree fragment)":16
 *     else:
 *         return __pyx_unpickle_RangePositionRemovedListener, (type(self), 0xdcceb2d, state)
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_unpickle_RangePositionRemovedListener__set_state(self, __pyx_state)
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_28RangePositionRemovedListener_3__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_RangePositionRemovedListener___s, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener->tp_dict, __pyx_n_s_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_RangePositionRemovedListener);

  /* "hummingbot/strategy/strategy_base.pyx":98
 * 
 * cdef class StrategyBase(TimeIterator):
 *     BUY_ORDER_COMPLETED_EVENT_TAG = MarketEvent.BuyOrderCompleted.value             # <<<<<<<<<<<<<<
 *     SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value
 *     FUNDING_PAYMENT_COMPLETED_EVENT_TAG = MarketEvent.FundingPaymentCompleted.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_BuyOrderCompleted); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_BUY_ORDER_COMPLETED_EVENT_TAG, __pyx_t_2) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":99
 * cdef class StrategyBase(TimeIterator):
 *     BUY_ORDER_COMPLETED_EVENT_TAG = MarketEvent.BuyOrderCompleted.value
 *     SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value             # <<<<<<<<<<<<<<
 *     FUNDING_PAYMENT_COMPLETED_EVENT_TAG = MarketEvent.FundingPaymentCompleted.value
 *     ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_SellOrderCompleted); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_SELL_ORDER_COMPLETED_EVENT_TAG, __pyx_t_2) < 0) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":100
 *     BUY_ORDER_COMPLETED_EVENT_TAG = MarketEvent.BuyOrderCompleted.value
 *     SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value
 *     FUNDING_PAYMENT_COMPLETED_EVENT_TAG = MarketEvent.FundingPaymentCompleted.value             # <<<<<<<<<<<<<<
 *     ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value
 *     ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_FundingPaymentCompleted); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_FUNDING_PAYMENT_COMPLETED_EVENT, __pyx_t_2) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":101
 *     SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value
 *     FUNDING_PAYMENT_COMPLETED_EVENT_TAG = MarketEvent.FundingPaymentCompleted.value
 *     ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value             # <<<<<<<<<<<<<<
 *     ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value
 *     ORDER_EXPIRED_EVENT_TAG = MarketEvent.OrderExpired.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_OrderFilled); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_ORDER_FILLED_EVENT_TAG, __pyx_t_2) < 0) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":102
 *     FUNDING_PAYMENT_COMPLETED_EVENT_TAG = MarketEvent.FundingPaymentCompleted.value
 *     ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value
 *     ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value             # <<<<<<<<<<<<<<
 *     ORDER_EXPIRED_EVENT_TAG = MarketEvent.OrderExpired.value
 *     ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_OrderCancelled); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_ORDER_CANCELLED_EVENT_TAG, __pyx_t_2) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":103
 *     ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value
 *     ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value
 *     ORDER_EXPIRED_EVENT_TAG = MarketEvent.OrderExpired.value             # <<<<<<<<<<<<<<
 *     ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value
 *     BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_OrderExpired); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_ORDER_EXPIRED_EVENT_TAG, __pyx_t_2) < 0) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":104
 *     ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value
 *     ORDER_EXPIRED_EVENT_TAG = MarketEvent.OrderExpired.value
 *     ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value             # <<<<<<<<<<<<<<
 *     BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value
 *     SELL_ORDER_CREATED_EVENT_TAG = MarketEvent.SellOrderCreated.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_OrderFailure); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_ORDER_FAILURE_EVENT_TAG, __pyx_t_2) < 0) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":105
 *     ORDER_EXPIRED_EVENT_TAG = MarketEvent.OrderExpired.value
 *     ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value
 *     BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value             # <<<<<<<<<<<<<<
 *     SELL_ORDER_CREATED_EVENT_TAG = MarketEvent.SellOrderCreated.value
 *     RANGE_POSITION_CREATED_EVENT_TAG = MarketEvent.RangePositionCreated.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_BuyOrderCreated); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_BUY_ORDER_CREATED_EVENT_TAG, __pyx_t_2) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":106
 *     ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value
 *     BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value
 *     SELL_ORDER_CREATED_EVENT_TAG = MarketEvent.SellOrderCreated.value             # <<<<<<<<<<<<<<
 *     RANGE_POSITION_CREATED_EVENT_TAG = MarketEvent.RangePositionCreated.value
 *     RANGE_POSITION_REMOVED_EVENT_TAG = MarketEvent.RangePositionRemoved.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_SellOrderCreated); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_SELL_ORDER_CREATED_EVENT_TAG, __pyx_t_2) < 0) __PYX_ERR(0, 106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":107
 *     BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value
 *     SELL_ORDER_CREATED_EVENT_TAG = MarketEvent.SellOrderCreated.value
 *     RANGE_POSITION_CREATED_EVENT_TAG = MarketEvent.RangePositionCreated.value             # <<<<<<<<<<<<<<
 *     RANGE_POSITION_REMOVED_EVENT_TAG = MarketEvent.RangePositionRemoved.value
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_RangePositionCreated); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_RANGE_POSITION_CREATED_EVENT_TAG, __pyx_t_2) < 0) __PYX_ERR(0, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":108
 *     SELL_ORDER_CREATED_EVENT_TAG = MarketEvent.SellOrderCreated.value
 *     RANGE_POSITION_CREATED_EVENT_TAG = MarketEvent.RangePositionCreated.value
 *     RANGE_POSITION_REMOVED_EVENT_TAG = MarketEvent.RangePositionRemoved.value             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_RangePositionRemoved); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_value); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_RANGE_POSITION_REMOVED_EVENT_TAG, __pyx_t_2) < 0) __PYX_ERR(0, 108, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":110
 *     RANGE_POSITION_REMOVED_EVENT_TAG = MarketEvent.RangePositionRemoved.value
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls) -> logging.Logger:
 *         raise NotImplementedError
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_kp_s_logging_Logger) < 0) __PYX_ERR(0, 110, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_1logger, __Pyx_CYFUNCTION_CLASSMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_logger, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__85)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_logger, __pyx_t_1) < 0) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);
  __Pyx_GetNameInClass(__pyx_t_1, (PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase, __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_logger, __pyx_t_2) < 0) __PYX_ERR(0, 110, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":133
 *         self._sb_order_tracker = OrderTracker()
 * 
 *     def init_params(self, *args, **kwargs):             # <<<<<<<<<<<<<<
 *         """
 *         Assigns strategy parameters, this function must be called directly after init.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_5init_params, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_init_params, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_init_params, __pyx_t_2) < 0) __PYX_ERR(0, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":149
 *         return self._sb_order_tracker
 * 
 *     def format_status(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_7format_status, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_format_status, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__89)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_format_status, __pyx_t_2) < 0) __PYX_ERR(0, 149, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":152
 *         raise NotImplementedError
 * 
 *     def log_with_clock(self, log_level: int, msg: str, **kwargs):             # <<<<<<<<<<<<<<
 *         clock_timestamp = pd.Timestamp(self._current_timestamp, unit="s", tz="UTC")
 *         self.logger().log(log_level, f"{msg} [clock={str(clock_timestamp)}]", **kwargs)
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_log_level, __pyx_n_s_int) < 0) __PYX_ERR(0, 152, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_msg, __pyx_n_s_str) < 0) __PYX_ERR(0, 152, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_9log_with_clock, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_log_with_clock, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__91)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_log_with_clock, __pyx_t_1) < 0) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":179
 *         return sorted(past_trades, key=lambda x: x.timestamp)
 * 
 *     def market_status_data_frame(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         cdef:
 *             ConnectorBase market
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_market_trading_pair_tuples, __pyx_kp_s_List_MarketTradingPairTuple) < 0) __PYX_ERR(0, 179, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_kp_s_pd_DataFrame) < 0) __PYX_ERR(0, 179, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_11market_status_data_frame, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_market_status_data, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__93)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_market_status_data_frame, __pyx_t_2) < 0) __PYX_ERR(0, 179, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":207
 *             self.logger().error("Error formatting market stats.", exc_info=True)
 * 
 *     def wallet_balance_data_frame(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         cdef:
 *             ConnectorBase market
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_market_trading_pair_tuples, __pyx_kp_s_List_MarketTradingPairTuple) < 0) __PYX_ERR(0, 207, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_kp_s_pd_DataFrame) < 0) __PYX_ERR(0, 207, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_13wallet_balance_data_frame, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_wallet_balance_data, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__95)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_wallet_balance_data_frame, __pyx_t_1) < 0) __PYX_ERR(0, 207, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":235
 *             self.logger().error("Error formatting wallet balance stats.", exc_info=True)
 * 
 *     def balance_warning(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> List[str]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             double base_balance
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_market_trading_pair_tuples, __pyx_kp_s_List_MarketTradingPairTuple) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_kp_s_List_str) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_15balance_warning, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_balance_warning, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_balance_warning, __pyx_t_2) < 0) __PYX_ERR(0, 235, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":253
 *         return warning_lines
 * 
 *     def network_warning(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> List[str]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list warning_lines = []
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_market_trading_pair_tuples, __pyx_kp_s_List_MarketTradingPairTuple) < 0) __PYX_ERR(0, 253, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_kp_s_List_str) < 0) __PYX_ERR(0, 253, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_17network_warning, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_network_warning, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_network_warning, __pyx_t_1) < 0) __PYX_ERR(0, 253, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":299
 *             self._sb_markets.add(typed_market)
 * 
 *     def add_markets(self, markets: List[ConnectorBase]):             # <<<<<<<<<<<<<<
 *         self.c_add_markets(markets)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_markets, __pyx_kp_s_List_ConnectorBase) < 0) __PYX_ERR(0, 299, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_19add_markets, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_add_markets, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__101)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_add_markets, __pyx_t_2) < 0) __PYX_ERR(0, 299, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":323
 *             self._sb_markets.remove(typed_market)
 * 
 *     def remove_markets(self, markets: List[ConnectorBase]):             # <<<<<<<<<<<<<<
 *         self.c_remove_markets(markets)
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_markets, __pyx_kp_s_List_ConnectorBase) < 0) __PYX_ERR(0, 323, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_21remove_markets, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_remove_markets, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_remove_markets, __pyx_t_1) < 0) __PYX_ERR(0, 323, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":343
 *         return total_flat_fees
 * 
 *     def cum_flat_fees(self, quote_asset: str, flat_fees: List):             # <<<<<<<<<<<<<<
 *         return self.c_sum_flat_fees(quote_asset, flat_fees)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_quote_asset, __pyx_n_s_str) < 0) __PYX_ERR(0, 343, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_flat_fees, __pyx_n_s_List) < 0) __PYX_ERR(0, 343, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_23cum_flat_fees, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_cum_flat_fees, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__105)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_cum_flat_fees, __pyx_t_2) < 0) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":438
 * 
 *     def buy_with_specific_market(self, market_trading_pair_tuple, amount,
 *                                  order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *                                  price=s_decimal_nan,
 *                                  expiration_seconds=NaN,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__10 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":439
 *     def buy_with_specific_market(self, market_trading_pair_tuple, amount,
 *                                  order_type=OrderType.MARKET,
 *                                  price=s_decimal_nan,             # <<<<<<<<<<<<<<
 *                                  expiration_seconds=NaN,
 *                                  position_action=PositionAction.OPEN):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_nan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__11 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":440
 *                                  order_type=OrderType.MARKET,
 *                                  price=s_decimal_nan,
 *                                  expiration_seconds=NaN,             # <<<<<<<<<<<<<<
 *                                  position_action=PositionAction.OPEN):
 *         return self.c_buy_with_specific_market(market_trading_pair_tuple, amount,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_NaN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__12 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":441
 *                                  price=s_decimal_nan,
 *                                  expiration_seconds=NaN,
 *                                  position_action=PositionAction.OPEN):             # <<<<<<<<<<<<<<
 *         return self.c_buy_with_specific_market(market_trading_pair_tuple, amount,
 *                                                order_type,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_PositionAction); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_OPEN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__13 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":438
 * 
 *     def buy_with_specific_market(self, market_trading_pair_tuple, amount,
 *                                  order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *                                  price=s_decimal_nan,
 *                                  expiration_seconds=NaN,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 438, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":439
 *     def buy_with_specific_market(self, market_trading_pair_tuple, amount,
 *                                  order_type=OrderType.MARKET,
 *                                  price=s_decimal_nan,             # <<<<<<<<<<<<<<
 *                                  expiration_seconds=NaN,
 *                                  position_action=PositionAction.OPEN):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_nan); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "hummingbot/strategy/strategy_base.pyx":440
 *                                  order_type=OrderType.MARKET,
 *                                  price=s_decimal_nan,
 *                                  expiration_seconds=NaN,             # <<<<<<<<<<<<<<
 *                                  position_action=PositionAction.OPEN):
 *         return self.c_buy_with_specific_market(market_trading_pair_tuple, amount,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_NaN); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 440, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "hummingbot/strategy/strategy_base.pyx":441
 *                                  price=s_decimal_nan,
 *                                  expiration_seconds=NaN,
 *                                  position_action=PositionAction.OPEN):             # <<<<<<<<<<<<<<
 *         return self.c_buy_with_specific_market(market_trading_pair_tuple, amount,
 *                                                order_type,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PositionAction); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_OPEN); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":437
 *     # ----------------------------------------------------------------------------------------------------------
 * 
 *     def buy_with_specific_market(self, market_trading_pair_tuple, amount,             # <<<<<<<<<<<<<<
 *                                  order_type=OrderType.MARKET,
 *                                  price=s_decimal_nan,
 */
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_6);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_25buy_with_specific_market, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_buy_with_specific_m, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__107)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_6, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_buy_with_specific_market, __pyx_t_6) < 0) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":449
 * 
 *     cdef str c_buy_with_specific_market(self, object market_trading_pair_tuple, object amount,
 *                                         object order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *                                         object price=s_decimal_nan,
 *                                         double expiration_seconds=NaN,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 449, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_k__14 = __pyx_t_5;
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":450
 *     cdef str c_buy_with_specific_market(self, object market_trading_pair_tuple, object amount,
 *                                         object order_type=OrderType.MARKET,
 *                                         object price=s_decimal_nan,             # <<<<<<<<<<<<<<
 *                                         double expiration_seconds=NaN,
 *                                         position_action=PositionAction.OPEN):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_s_decimal_nan); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 450, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_k__15 = __pyx_t_5;
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":451
 *                                         object order_type=OrderType.MARKET,
 *                                         object price=s_decimal_nan,
 *                                         double expiration_seconds=NaN,             # <<<<<<<<<<<<<<
 *                                         position_action=PositionAction.OPEN):
 *         if self._sb_delegate_lock:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_NaN); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 451, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_k__16 = __pyx_t_3;

  /* "hummingbot/strategy/strategy_base.pyx":452
 *                                         object price=s_decimal_nan,
 *                                         double expiration_seconds=NaN,
 *                                         position_action=PositionAction.OPEN):             # <<<<<<<<<<<<<<
 *         if self._sb_delegate_lock:
 *             raise RuntimeError("Delegates are not allowed to execute orders directly.")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PositionAction); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_OPEN); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 452, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_k__17 = __pyx_t_6;
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_6 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":483
 * 
 *     def sell_with_specific_market(self, market_trading_pair_tuple, amount,
 *                                   order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *                                   price=s_decimal_nan,
 *                                   expiration_seconds=NaN,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_k__21 = __pyx_t_5;
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":484
 *     def sell_with_specific_market(self, market_trading_pair_tuple, amount,
 *                                   order_type=OrderType.MARKET,
 *                                   price=s_decimal_nan,             # <<<<<<<<<<<<<<
 *                                   expiration_seconds=NaN,
 *                                   position_action=PositionAction.OPEN):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_s_decimal_nan); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_k__22 = __pyx_t_5;
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":485
 *                                   order_type=OrderType.MARKET,
 *                                   price=s_decimal_nan,
 *                                   expiration_seconds=NaN,             # <<<<<<<<<<<<<<
 *                                   position_action=PositionAction.OPEN):
 *         return self.c_sell_with_specific_market(market_trading_pair_tuple, amount,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_NaN); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_k__23 = __pyx_t_5;
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":486
 *                                   price=s_decimal_nan,
 *                                   expiration_seconds=NaN,
 *                                   position_action=PositionAction.OPEN):             # <<<<<<<<<<<<<<
 *         return self.c_sell_with_specific_market(market_trading_pair_tuple, amount,
 *                                                 order_type,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_PositionAction); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_OPEN); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_k__24 = __pyx_t_6;
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_6 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":483
 * 
 *     def sell_with_specific_market(self, market_trading_pair_tuple, amount,
 *                                   order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *                                   price=s_decimal_nan,
 *                                   expiration_seconds=NaN,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":484
 *     def sell_with_specific_market(self, market_trading_pair_tuple, amount,
 *                                   order_type=OrderType.MARKET,
 *                                   price=s_decimal_nan,             # <<<<<<<<<<<<<<
 *                                   expiration_seconds=NaN,
 *                                   position_action=PositionAction.OPEN):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_s_decimal_nan); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 484, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "hummingbot/strategy/strategy_base.pyx":485
 *                                   order_type=OrderType.MARKET,
 *                                   price=s_decimal_nan,
 *                                   expiration_seconds=NaN,             # <<<<<<<<<<<<<<
 *                                   position_action=PositionAction.OPEN):
 *         return self.c_sell_with_specific_market(market_trading_pair_tuple, amount,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_NaN); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "hummingbot/strategy/strategy_base.pyx":486
 *                                   price=s_decimal_nan,
 *                                   expiration_seconds=NaN,
 *                                   position_action=PositionAction.OPEN):             # <<<<<<<<<<<<<<
 *         return self.c_sell_with_specific_market(market_trading_pair_tuple, amount,
 *                                                 order_type,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PositionAction); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_OPEN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":482
 *         return order_id
 * 
 *     def sell_with_specific_market(self, market_trading_pair_tuple, amount,             # <<<<<<<<<<<<<<
 *                                   order_type=OrderType.MARKET,
 *                                   price=s_decimal_nan,
 */
  __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_1);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_4 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_27sell_with_specific_market, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_sell_with_specific, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__109)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_sell_with_specific_market, __pyx_t_1) < 0) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":494
 * 
 *     cdef str c_sell_with_specific_market(self, object market_trading_pair_tuple, object amount,
 *                                          object order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *                                          object price=s_decimal_nan,
 *                                          double expiration_seconds=NaN,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 494, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__25 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":495
 *     cdef str c_sell_with_specific_market(self, object market_trading_pair_tuple, object amount,
 *                                          object order_type=OrderType.MARKET,
 *                                          object price=s_decimal_nan,             # <<<<<<<<<<<<<<
 *                                          double expiration_seconds=NaN,
 *                                          position_action=PositionAction.OPEN):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_nan); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 495, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__26 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":496
 *                                          object order_type=OrderType.MARKET,
 *                                          object price=s_decimal_nan,
 *                                          double expiration_seconds=NaN,             # <<<<<<<<<<<<<<
 *                                          position_action=PositionAction.OPEN):
 *         if self._sb_delegate_lock:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_NaN); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_3 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 496, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__27 = __pyx_t_3;

  /* "hummingbot/strategy/strategy_base.pyx":497
 *                                          object price=s_decimal_nan,
 *                                          double expiration_seconds=NaN,
 *                                          position_action=PositionAction.OPEN):             # <<<<<<<<<<<<<<
 *         if self._sb_delegate_lock:
 *             raise RuntimeError("Delegates are not allowed to execute orders directly.")
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PositionAction); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_OPEN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__28 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":535
 *             market.c_cancel(market_trading_pair_tuple.trading_pair, order_id)
 * 
 *     def cancel_order(self, market_trading_pair_tuple: MarketTradingPairTuple, order_id: str):             # <<<<<<<<<<<<<<
 *         self.c_cancel_order(market_trading_pair_tuple, order_id)
 *     # ----------------------------------------------------------------------------------------------------------
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_market_trading_pair_tuple, __pyx_n_s_MarketTradingPairTuple) < 0) __PYX_ERR(0, 535, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order_id, __pyx_n_s_str) < 0) __PYX_ERR(0, 535, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_29cancel_order, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_cancel_order, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__111)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_cancel_order, __pyx_t_2) < 0) __PYX_ERR(0, 535, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":548
 *         self._sb_order_tracker.c_start_tracking_limit_order(market_pair, order_id, is_buy, price, quantity)
 * 
 *     def start_tracking_limit_order(self, market_pair: MarketTradingPairTuple, order_id: str, is_buy: bool, price: Decimal,             # <<<<<<<<<<<<<<
 *                                    quantity: Decimal):
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_market_pair, __pyx_n_s_MarketTradingPairTuple) < 0) __PYX_ERR(0, 548, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_order_id, __pyx_n_s_str) < 0) __PYX_ERR(0, 548, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_is_buy, __pyx_n_s_bool) < 0) __PYX_ERR(0, 548, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_price, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 548, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_quantity, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 548, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_31start_tracking_limit_order, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_start_tracking_limi, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__113)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_start_tracking_limit_order, __pyx_t_1) < 0) __PYX_ERR(0, 548, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":556
 *         self._sb_order_tracker.c_stop_tracking_limit_order(market_pair, order_id)
 * 
 *     def stop_tracking_limit_order(self, market_pair: MarketTradingPairTuple, order_id: str):             # <<<<<<<<<<<<<<
 *         self.c_stop_tracking_limit_order(market_pair, order_id)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_market_pair, __pyx_n_s_MarketTradingPairTuple) < 0) __PYX_ERR(0, 556, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order_id, __pyx_n_s_str) < 0) __PYX_ERR(0, 556, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_33stop_tracking_limit_order, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_stop_tracking_limit, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__115)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_stop_tracking_limit_order, __pyx_t_2) < 0) __PYX_ERR(0, 556, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":562
 *         self._sb_order_tracker.c_start_tracking_market_order(market_pair, order_id, is_buy, quantity)
 * 
 *     def start_tracking_market_order(self, market_pair: MarketTradingPairTuple, order_id: str, is_buy: bool, quantity: Decimal):             # <<<<<<<<<<<<<<
 *         self.c_start_tracking_market_order(market_pair, order_id, is_buy, quantity)
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_market_pair, __pyx_n_s_MarketTradingPairTuple) < 0) __PYX_ERR(0, 562, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_order_id, __pyx_n_s_str) < 0) __PYX_ERR(0, 562, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_is_buy, __pyx_n_s_bool) < 0) __PYX_ERR(0, 562, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_quantity, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 562, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_35start_tracking_market_order, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_start_tracking_mark, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__117)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_start_tracking_market_order, __pyx_t_1) < 0) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":568
 *         self._sb_order_tracker.c_stop_tracking_market_order(market_pair, order_id)
 * 
 *     def stop_tracking_market_order(self, market_pair: MarketTradingPairTuple, order_id: str):             # <<<<<<<<<<<<<<
 *         self.c_stop_tracking_market_order(market_pair, order_id)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_market_pair, __pyx_n_s_MarketTradingPairTuple) < 0) __PYX_ERR(0, 568, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order_id, __pyx_n_s_str) < 0) __PYX_ERR(0, 568, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_37stop_tracking_market_order, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_stop_tracking_marke, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__119)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_stop_tracking_market_order, __pyx_t_2) < 0) __PYX_ERR(0, 568, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":585
 *         return restored_order_ids
 * 
 *     def track_restored_orders(self, market_pair: MarketTradingPairTuple):             # <<<<<<<<<<<<<<
 *         return self.c_track_restored_orders(market_pair)
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_market_pair, __pyx_n_s_MarketTradingPairTuple) < 0) __PYX_ERR(0, 585, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_39track_restored_orders, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_track_restored_orde, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__121)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_track_restored_orders, __pyx_t_1) < 0) __PYX_ERR(0, 585, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":588
 *         return self.c_track_restored_orders(market_pair)
 * 
 *     def notify_hb_app(self, msg: str):             # <<<<<<<<<<<<<<
 *         """
 *         Method called to display message on the Output Panel(upper left)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_msg, __pyx_n_s_str) < 0) __PYX_ERR(0, 588, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_41notify_hb_app, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_notify_hb_app, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__123)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_notify_hb_app, __pyx_t_2) < 0) __PYX_ERR(0, 588, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "hummingbot/strategy/strategy_base.pyx":596
 *         HummingbotApplication.main_application()._notify(msg)
 * 
 *     def notify_hb_app_with_timestamp(self, msg: str):             # <<<<<<<<<<<<<<
 *         """
 *         Method called to display message on the Output Panel(upper left)
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_msg, __pyx_n_s_str) < 0) __PYX_ERR(0, 596, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_43notify_hb_app_with_timestamp, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase_notify_hb_app_with, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__125)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dict, __pyx_n_s_notify_hb_app_with_timestamp, __pyx_t_1) < 0) __PYX_ERR(0, 596, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_45__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase___reduce_cython, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__127)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_12StrategyBase_47__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_StrategyBase___setstate_cython, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__129)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_BaseStrategyEventListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_1__pyx_unpickle_BaseStrategyEventListener, 0, __pyx_n_s_pyx_unpickle_BaseStrategyEvent, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__131)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_BaseStrategyEvent, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_BaseStrategyEventListener__set_state(<BaseStrategyEventListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BaseStrategyEventListener__set_state(BaseStrategyEventListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_3__pyx_unpickle_BuyOrderCompletedListener, 0, __pyx_n_s_pyx_unpickle_BuyOrderCompleted, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__133)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_BuyOrderCompleted, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_SellOrderCompletedListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_5__pyx_unpickle_SellOrderCompletedListener, 0, __pyx_n_s_pyx_unpickle_SellOrderComplete, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__135)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_SellOrderComplete, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_SellOrderCompletedListener__set_state(<SellOrderCompletedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_SellOrderCompletedListener__set_state(SellOrderCompletedListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_7__pyx_unpickle_FundingPaymentCompletedListener, 0, __pyx_n_s_pyx_unpickle_FundingPaymentCom, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__137)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_FundingPaymentCom, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_OrderFilledListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_9__pyx_unpickle_OrderFilledListener, 0, __pyx_n_s_pyx_unpickle_OrderFilledListen, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__139)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_OrderFilledListen, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_OrderFilledListener__set_state(<OrderFilledListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderFilledListener__set_state(OrderFilledListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_11__pyx_unpickle_OrderFailedListener, 0, __pyx_n_s_pyx_unpickle_OrderFailedListen, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__141)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_OrderFailedListen, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_OrderCancelledListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_13__pyx_unpickle_OrderCancelledListener, 0, __pyx_n_s_pyx_unpickle_OrderCancelledLis, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__143)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_OrderCancelledLis, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_OrderCancelledListener__set_state(<OrderCancelledListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_OrderCancelledListener__set_state(OrderCancelledListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_15__pyx_unpickle_OrderExpiredListener, 0, __pyx_n_s_pyx_unpickle_OrderExpiredListe, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__145)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_OrderExpiredListe, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_BuyOrderCreatedListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_17__pyx_unpickle_BuyOrderCreatedListener, 0, __pyx_n_s_pyx_unpickle_BuyOrderCreatedLi, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__147)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_BuyOrderCreatedLi, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_BuyOrderCreatedListener__set_state(<BuyOrderCreatedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_BuyOrderCreatedListener__set_state(BuyOrderCreatedListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_19__pyx_unpickle_SellOrderCreatedListener, 0, __pyx_n_s_pyx_unpickle_SellOrderCreatedL, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__149)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_SellOrderCreatedL, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __pyx_unpickle_RangePositionCreatedListener(__pyx_type, long __pyx_checksum, __pyx_state):             # <<<<<<<<<<<<<<
 *     cdef object __pyx_PickleError
 *     cdef object __pyx_result
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_21__pyx_unpickle_RangePositionCreatedListener, 0, __pyx_n_s_pyx_unpickle_RangePositionCrea, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__151)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_RangePositionCrea, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":11
 *         __pyx_unpickle_RangePositionCreatedListener__set_state(<RangePositionCreatedListener> __pyx_result, __pyx_state)
 *     return __pyx_result
 * cdef __pyx_unpickle_RangePositionCreatedListener__set_state(RangePositionCreatedListener __pyx_result, tuple __pyx_state):             # <<<<<<<<<<<<<<
 *     __pyx_result._current_event_caller = __pyx_state[0]; __pyx_result._current_event_tag = __pyx_state[1]; __pyx_result._owner = __pyx_state[2]
 *     if len(__pyx_state) > 3 and hasattr(__pyx_result, '__dict__'):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_13strategy_base_23__pyx_unpickle_RangePositionRemovedListener, 0, __pyx_n_s_pyx_unpickle_RangePositionRemo, NULL, __pyx_n_s_hummingbot_strategy_strategy_bas_2, __pyx_d, ((PyObject *)__pyx_codeobj__153)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pyx_unpickle_RangePositionRemo, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/strategy_base.pyx":1
 * from decimal import Decimal             # <<<<<<<<<<<<<<
 * import logging
 * import pandas as pd
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init hummingbot.strategy.strategy_base", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(__pyx_m);
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init hummingbot.strategy.strategy_base");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;  // error
            return kwvalues[i];
        }
    }
    return NULL;  // not found (no exception set)
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        if (kwds_is_tuple) {
            if (pos >= PyTuple_GET_SIZE(kwds)) break;
            key = PyTuple_GET_ITEM(kwds, pos);
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]);
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
    Py_DECREF(argstuple);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
#ifdef __Pyx_CyFunction_USED
        if (__Pyx_IsCyOrPyCFunction(func))
#else
        if (PyCFunction_Check(func))
#endif
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
                return __Pyx_PyObject_CallMethO(func, NULL);
            }
        }
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (PyCFunction_Check(func))
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
                return __Pyx_PyObject_CallMethO(func, args[0]);
            }
        }
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    #if CYTHON_VECTORCALL
    vectorcallfunc f = _PyVectorcall_Function(func);
    if (f) {
        return f(func, args, (size_t)nargs, kwargs);
    }
    #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
    if (__Pyx_CyFunction_CheckExact(func)) {
        __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
        if (f) return f(func, args, (size_t)nargs, kwargs);
    }
    #endif
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        if (unlikely(PyTuple_GET_SIZE(kw) == 0))
            return 1;
        if (!kw_allowed) {
            key = PyTuple_GET_ITEM(kw, 0);
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < PyTuple_GET_SIZE(kw); pos++) {
            key = PyTuple_GET_ITEM(kw, pos);
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* GetAttr3 */
static PyObject *__Pyx_GetAttr3Default(PyObject *d) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (unlikely(!__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        return NULL;
    __Pyx_PyErr_Clear();
    Py_INCREF(d);
    return d;
}
static CYTHON_INLINE PyObject *__Pyx_GetAttr3(PyObject *o, PyObject *n, PyObject *d) {
    PyObject *r;
#if CYTHON_USE_TYPE_SLOTS
    if (likely(PyString_Check(n))) {
        r = __Pyx_PyObject_GetAttrStrNoError(o, n);
        if (unlikely(!r) && likely(!PyErr_Occurred())) {
            r = __Pyx_NewRef(d);
        }
        return r;
    }
#endif
    r = PyObject_GetAttr(o, n);
    return (likely(r)) ? r : __Pyx_GetAttr3Default(d);
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY ||  CYTHON_COMPILING_IN_LIMITED_API
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg = NULL;
    return __Pyx_PyObject_FastCall(func, (&arg)+1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyUnicode_Unicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj) {
    if (unlikely(obj == Py_None))
        obj = __pyx_kp_u_None;
    return __Pyx_NewRef(obj);
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* FetchCommonType */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    PyObject *abi_module = PyImport_AddModule((char*) __PYX_ABI_MODULE_NAME);
    if (!abi_module) return NULL;
    Py_INCREF(abi_module);
    return abi_module;
}
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, type->tp_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              type->tp_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, type->tp_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *py_basicsize, *cached_type = NULL;
    Py_ssize_t basicsize;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, spec->name);
    if (cached_type) {
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (!py_basicsize) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred()) goto bad;
        if (__Pyx_VerifyCachedType(
              cached_type,
              spec->name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    cached_type = PyType_FromSpecWithBases(spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (PyObject_SetAttrString(abi_module, spec->name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
        PyList_SET_ITEM(fromlist, 0, marker);
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if PY_VERSION_HEX < 0x030500A0
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         cyfunc->func.m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", cyfunc->func.m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(__pyx_CyFunctionObject, func.vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#ifdef _Py_TPFLAGS_HAVE_VECTORCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(void) {
#if CYTHON_COMPILING_IN_LIMITED_API
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(&__pyx_CyFunctionType_spec, NULL);
#else
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        
            if (8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53))) {
                return PyFloat_FromDouble((double)a / (double)b);
            }
            return PyInt_Type.tp_as_number->nb_true_divide(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (unlikely(size == 0)) {
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            }
        }
                if ((8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53)))
                        || __Pyx_sst_abs(size) <= 52 / PyLong_SHIFT) {
                    return PyFloat_FromDouble((double)a / (double)b);
                }
                return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            return PyLong_FromLong(x);
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("divide", return NULL)
            result = ((double)a) / (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
}
#endif

/* pybytes_as_double */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj) {
    PyObject *float_value;
#if PY_MAJOR_VERSION >= 3
    float_value = PyFloat_FromString(obj);
#else
    float_value = PyFloat_FromString(obj, 0);
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
    return (double)-1;
}
static const char* __Pyx__PyBytes_AsDouble_Copy(const char* start, char* buffer, Py_ssize_t length) {
    int last_was_punctuation = 1;
    Py_ssize_t i;
    for (i=0; i < length; i++) {
        char chr = start[i];
        int is_punctuation = (chr == '_') | (chr == '.') | (chr == 'e') | (chr == 'E');
        *buffer = chr;
        buffer += (chr != '_');
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyBytes_AsDouble_inf_nan(const char* start, Py_ssize_t length) {
    int matches = 1;
    char sign = start[0];
    int is_signed = (sign == '+') | (sign == '-');
    start += is_signed;
    length -= is_signed;
    switch (start[0]) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            matches &= (start[1] == 'a' || start[1] == 'A');
            matches &= (start[2] == 'n' || start[2] == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            matches &= (start[1] == 'n' || start[1] == 'N');
            matches &= (start[2] == 'f' || start[2] == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            matches &= (start[3] == 'i' || start[3] == 'I');
            matches &= (start[4] == 'n' || start[4] == 'N');
            matches &= (start[5] == 'i' || start[5] == 'I');
            matches &= (start[6] == 't' || start[6] == 'T');
            matches &= (start[7] == 'y' || start[7] == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static CYTHON_INLINE int __Pyx__PyBytes_AsDouble_IsSpace(char ch) {
    return (ch == 0x20) | !((ch < 0x9) | (ch > 0xd));
}
static CYTHON_UNUSED double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length) {
    double value;
    Py_ssize_t i, digits;
    const char *last = start + length;
    char *end;
    while (__Pyx__PyBytes_AsDouble_IsSpace(*start))
        start++;
    while (start < last - 1 && __Pyx__PyBytes_AsDouble_IsSpace(last[-1]))
        last--;
    length = last - start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyBytes_AsDouble_inf_nan(start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    digits = 0;
    for (i=0; i < length; digits += start[i++] != '_');
    if (likely(digits == length)) {
        value = PyOS_string_to_double(start, &end, NULL);
    } else if (digits < 40) {
        char number[40];
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((digits + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}

/* pynumber_float */
static CYTHON_INLINE PyObject* __Pyx__PyNumber_Float(PyObject* obj) {
    double val;
    if (PyLong_CheckExact(obj)) {
#if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)obj)->ob_digit;
        switch (Py_SIZE(obj)) {
            case 0:
                val = 0.0;
                goto no_error;
            case 1:
                val = (double) digits[0];
                goto no_error;
            case -1:
                val = (double) - (sdigit) digits[0];
                goto no_error;
            default:
                val = PyLong_AsDouble(obj);
        }
#else
        val = PyLong_AsDouble(obj);
#endif
    } else if (PyUnicode_CheckExact(obj)) {
        val = __Pyx_PyUnicode_AsDouble(obj);
    } else if (PyBytes_CheckExact(obj)) {
        val = __Pyx_PyBytes_AsDouble(obj);
    } else if (PyByteArray_CheckExact(obj)) {
        val = __Pyx_PyByteArray_AsDouble(obj);
    } else {
        return PyNumber_Float(obj);
    }
    if (unlikely(val == -1 && PyErr_Occurred())) {
        return NULL;
    }
no_error:
    return PyFloat_FromDouble(val);
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* pyobject_as_double */
static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    if (PyUnicode_CheckExact(obj)) {
        return __Pyx_PyUnicode_AsDouble(obj);
    } else if (PyBytes_CheckExact(obj)) {
        return __Pyx_PyBytes_AsDouble(obj);
    } else if (PyByteArray_CheckExact(obj)) {
        return __Pyx_PyByteArray_AsDouble(obj);
    } else {
        PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
        float_value = PyNumber_Float(obj);  if ((0)) goto bad;
        (void)__Pyx_PyObject_CallOneArg;
#else
        PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
        if (likely(nb) && likely(nb->nb_float)) {
            float_value = nb->nb_float(obj);
            if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
                __Pyx_TypeName float_value_type_name = __Pyx_PyType_GetName(Py_TYPE(float_value));
                PyErr_Format(PyExc_TypeError,
                    "__float__ returned non-float (type " __Pyx_FMT_TYPENAME ")",
                    float_value_type_name);
                __Pyx_DECREF_TypeName(float_value_type_name);
                Py_DECREF(float_value);
                goto bad;
            }
        } else {
            float_value = __Pyx_PyObject_CallOneArg((PyObject*)&PyFloat_Type, obj);
        }
#endif
        if (likely(float_value)) {
            double value = PyFloat_AS_DOUBLE(float_value);
            Py_DECREF(float_value);
            return value;
        }
    }
bad:
    return (double)-1;
}

/* pyfrozenset_new */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if ((PY_VERSION_HEX >= 0x031000A1) || likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* PySetContains */
static int __Pyx_PySet_ContainsUnhashable(PyObject *set, PyObject *key) {
    int result = -1;
    if (PySet_Check(key) && PyErr_ExceptionMatches(PyExc_TypeError)) {
        PyObject *tmpkey;
        PyErr_Clear();
        tmpkey = __Pyx_PyFrozenSet_New(key);
        if (tmpkey != NULL) {
            result = PySet_Contains(set, tmpkey);
            Py_DECREF(tmpkey);
        }
    }
    return result;
}
static CYTHON_INLINE int __Pyx_PySet_ContainsTF(PyObject* key, PyObject* set, int eq) {
    int result = PySet_Contains(set, key);
    if (unlikely(result < 0)) {
        result = __Pyx_PySet_ContainsUnhashable(set, key);
    }
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* py_set_discard_unhashable */
static int __Pyx_PySet_DiscardUnhashable(PyObject *set, PyObject *key) {
    PyObject *tmpkey;
    int rv;
    if (likely(!PySet_Check(key) || !PyErr_ExceptionMatches(PyExc_TypeError)))
        return -1;
    PyErr_Clear();
    tmpkey = __Pyx_PyFrozenSet_New(key);
    if (tmpkey == NULL)
        return -1;
    rv = PySet_Discard(set, tmpkey);
    Py_DECREF(tmpkey);
    return rv;
}

/* py_set_remove */
static int __Pyx_PySet_RemoveNotFound(PyObject *set, PyObject *key, int found) {
    if (unlikely(found < 0)) {
        found = __Pyx_PySet_DiscardUnhashable(set, key);
    }
    if (likely(found == 0)) {
        PyObject *tup;
        tup = PyTuple_Pack(1, key);
        if (!tup)
            return -1;
        PyErr_SetObject(PyExc_KeyError, tup);
        Py_DECREF(tup);
        return -1;
    }
    return found;
}
static CYTHON_INLINE int __Pyx_PySet_Remove(PyObject *set, PyObject *key) {
    int found = PySet_Discard(set, key);
    if (unlikely(found != 1)) {
        return __Pyx_PySet_RemoveNotFound(set, key, found);
    }
    return 0;
}

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                #if CYTHON_COMPILING_IN_LIMITED_API
                module = PyImport_ImportModuleLevelObject(
                    name, empty_dict, empty_dict, from_list, 1);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                #endif
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            #if CYTHON_COMPILING_IN_LIMITED_API
            module = PyImport_ImportModuleLevelObject(
                name, empty_dict, empty_dict, from_list, level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportFrom */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* GetAttr */
static CYTHON_INLINE PyObject *__Pyx_GetAttr(PyObject *o, PyObject *n) {
#if CYTHON_USE_TYPE_SLOTS
#if PY_MAJOR_VERSION >= 3
    if (likely(PyUnicode_Check(n)))
#else
    if (likely(PyString_Check(n)))
#endif
        return __Pyx_PyObject_GetAttrStr(o, n);
#endif
    return PyObject_GetAttr(o, n);
}

/* HasAttr */
static CYTHON_INLINE int __Pyx_HasAttr(PyObject *o, PyObject *n) {
    PyObject *r;
    if (unlikely(!__Pyx_PyBaseString_Check(n))) {
        PyErr_SetString(PyExc_TypeError,
                        "hasattr(): attribute name must be string");
        return -1;
    }
    r = __Pyx_GetAttr(o, n);
    if (!r) {
        PyErr_Clear();
        return 0;
    } else {
        Py_DECREF(r);
        return 1;
    }
}

/* CallNextTpDealloc */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* PyType_Ready */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_PyType_Ready(PyTypeObject *t) {
    int r;
    PyObject *bases = t->tp_bases;
    if (bases)
    {
        Py_ssize_t i, n = PyTuple_GET_SIZE(bases);
        for (i = 1; i < n; i++)
        {
            PyObject *b0 = PyTuple_GET_ITEM(bases, i);
            PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
            if (PyClass_Check(b0))
            {
                PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                             PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
                return -1;
            }
#endif
            b = (PyTypeObject*)b0;
            if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
            {
                __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                PyErr_Format(PyExc_TypeError,
                    "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
                __Pyx_DECREF_TypeName(b_name);
                return -1;
            }
            if (t->tp_dictoffset == 0 && b->tp_dictoffset)
            {
                __Pyx_TypeName t_name = __Pyx_PyType_GetName(t);
                __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                PyErr_Format(PyExc_TypeError,
                    "extension type '" __Pyx_FMT_TYPENAME "' has no __dict__ slot, "
                    "but base type '" __Pyx_FMT_TYPENAME "' has: "
                    "either add 'cdef dict __dict__' to the extension type "
                    "or add '__slots__ = [...]' to the base type",
                    t_name, b_name);
                __Pyx_DECREF_TypeName(t_name);
                __Pyx_DECREF_TypeName(b_name);
                return -1;
            }
        }
    }
#if PY_VERSION_HEX >= 0x03050000
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
}
#endif

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_SetVtable(PyObject *type, void *vtable) {
#else
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#endif
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (!ob)
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (PyObject_SetAttr(type, __pyx_n_s_pyx_vtable, ob) < 0)
#else
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* MergeVTables */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i;
    void** base_vtables;
    __Pyx_TypeName tp_base_name;
    __Pyx_TypeName base_name;
    void* unknown = (void*)-1;
    PyObject* bases = type->tp_bases;
    int base_depth = 0;
    {
        PyTypeObject* base = type->tp_base;
        while (base) {
            base_depth += 1;
            base = base->tp_base;
        }
    }
    base_vtables = (void**) malloc(sizeof(void*) * (base_depth + 1));
    base_vtables[0] = unknown;
    for (i = 1; i < PyTuple_GET_SIZE(bases); i++) {
        void* base_vtable = __Pyx_GetVtable(((PyTypeObject*)PyTuple_GET_ITEM(bases, i)));
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = type->tp_base;
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = base->tp_base;
            }
        }
    }
    PyErr_Clear();
    free(base_vtables);
    return 0;
bad:
    tp_base_name = __Pyx_PyType_GetName(type->tp_base);
    base_name = __Pyx_PyType_GetName((PyTypeObject*)PyTuple_GET_ITEM(bases, i));
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
    free(base_vtables);
    return -1;
}
#endif

/* SetupReduce */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* ImportDottedModule */
  #if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__33;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    Py_ssize_t i, nparts;
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (likely(module))
        return module;
    return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* ClassMethod */
  static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    #if PY_MAJOR_VERSION == 2
    static PyTypeObject *methoddescr_type = NULL;
    if (unlikely(methoddescr_type == NULL)) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (unlikely(!meth)) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    #else
    PyTypeObject *methoddescr_type = &PyMethodDescr_Type;
    #endif
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
}

/* GetNameInClass */
  static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    PyObject *dict;
    assert(PyType_Check(nmspace));
#if CYTHON_USE_TYPE_SLOTS
    dict = ((PyTypeObject*)nmspace)->tp_dict;
    Py_XINCREF(dict);
#else
    dict = PyObject_GetAttr(nmspace, __pyx_n_s_dict);
#endif
    if (likely(dict)) {
        result = PyObject_GetItem(dict, name);
        Py_DECREF(dict);
        if (result) {
            return result;
        }
    }
    PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if CYTHON_COMPILING_IN_LIMITED_API
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    if (c_line) {
        (void) __pyx_cfilenm;
        c_line = __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    _PyTraceback_Add(funcname, filename, c_line ? -c_line : py_line);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int64_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int64_t, digit, digits[0])
                case 2:
                    if ((8 * sizeof(int64_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 2 * PyLong_SHIFT)) {
                            return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int64_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 3 * PyLong_SHIFT)) {
                            return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int64_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 4 * PyLong_SHIFT)) {
                            return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int64_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int64_t,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int64_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (int64_t) ((((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int64_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (int64_t) ((((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int64_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (int64_t) ((((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(int64_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int64_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            int64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int64_t) -1;
        }
    } else {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* FormatTypeName */
  #if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name_2);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XSETREF(name, __Pyx_NewRef(__pyx_n_s__154));
    }
    return name;
}
#endif

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* FastTypeChecks */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  #if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
