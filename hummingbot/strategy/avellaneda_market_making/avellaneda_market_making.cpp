/* Generated by Cython 3.0a7 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "hummingbot\\core\\cpp\\LimitOrder.h",
            "hummingbot\\core\\cpp\\OrderBookEntry.h",
            "hummingbot\\core\\cpp\\PyRef.h"
        ],
        "include_dirs": [
            ".\\hummingbot\\core",
            ".\\hummingbot\\core\\data_type"
        ],
        "language": "c++",
        "name": "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making",
        "sources": [
            "hummingbot\\strategy\\avellaneda_market_making\\avellaneda_market_making.pyx"
        ]
    },
    "module_name": "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#define CYTHON_ABI "3_0a7"
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030000A7
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP487_INIT_SUBCLASS
  #define CYTHON_PEP487_INIT_SUBCLASS 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(CYTHON_LIMITED_API)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030800B2
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#elif PY_VERSION_HEX >= 0x030800A4
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#elif CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static inline void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
#else
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__hummingbot__strategy__avellaneda_market_making__avellaneda_market_making
#define __PYX_HAVE_API__hummingbot__strategy__avellaneda_market_making__avellaneda_market_making
/* Early includes */
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <unordered_map>
#include <unordered_set>
#include "cpp/PyRef.h"
#include <string.h>
#include <string>
#include "../cpp/LimitOrder.h"
#include <set>
#include <vector>
#include "../cpp/OrderBookEntry.h"
#include <stdio.h>

    /* Using NumPy API declarations from "numpy/__init__.cython-30.pxd" */
    
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "hummingbot\\\\strategy\\\\avellaneda_market_making\\\\avellaneda_market_making.pyx",
  "stringsource",
  "__init__.cython-30.pxd",
  "hummingbot\\\\core\\\\clock.pxd",
  "hummingbot\\\\core\\\\event\\\\event_listener.pxd",
  "hummingbot\\\\core\\\\pubsub.pxd",
  "hummingbot\\\\core\\\\time_iterator.pxd",
  "hummingbot\\\\core\\\\data_type\\\\limit_order.pxd",
  "hummingbot\\\\strategy\\\\order_tracker.pxd",
  "hummingbot\\\\core\\\\event\\\\event_reporter.pxd",
  "hummingbot\\\\core\\\\event\\\\event_logger.pxd",
  "hummingbot\\\\core\\\\data_type\\\\order_book_query_result.pxd",
  "type.pxd",
  "hummingbot\\\\core\\\\data_type\\\\order_book.pxd",
  "hummingbot\\\\core\\\\network_iterator.pxd",
  "hummingbot\\\\connector\\\\connector_base.pxd",
  "hummingbot\\\\connector\\\\exchange_base.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* #### Code section: numeric_typedefs ### */

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":732
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":733
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":734
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":735
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":739
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":740
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":741
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":742
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":746
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":747
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":756
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":757
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":758
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":760
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":761
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":762
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":764
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":765
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":767
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":768
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":769
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* #### Code section: complex_type_declarations ### */
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_10hummingbot_4core_5clock_Clock;
struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener;
struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub;
struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator;
struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder;
struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker;
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase;
struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter;
struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger;
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult;
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult;
struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook;
struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator;
struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase;
struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase;
struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy;
struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start;
struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr;
struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal;
struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr;
struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr;

/* "hummingbot/core/pubsub.pxd":10
 * from hummingbot.core.event.event_listener cimport EventListener
 * 
 * ctypedef unordered_set[PyRef] EventListenersCollection             # <<<<<<<<<<<<<<
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 */
typedef std::unordered_set<PyRef>  __pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection;

/* "hummingbot/core/pubsub.pxd":11
 * 
 * ctypedef unordered_set[PyRef] EventListenersCollection
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 */
typedef std::unordered_set<PyRef> ::iterator __pyx_t_10hummingbot_4core_6pubsub_EventListenersIterator;

/* "hummingbot/core/pubsub.pxd":12
 * ctypedef unordered_set[PyRef] EventListenersCollection
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair
 */
typedef std::unordered_map<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection>  __pyx_t_10hummingbot_4core_6pubsub_Events;

/* "hummingbot/core/pubsub.pxd":13
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator             # <<<<<<<<<<<<<<
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair
 * 
 */
typedef std::unordered_map<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection> ::iterator __pyx_t_10hummingbot_4core_6pubsub_EventsIterator;

/* "hummingbot/core/pubsub.pxd":14
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::pair<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection>  __pyx_t_10hummingbot_4core_6pubsub_EventsPair;
struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market;
struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market;

/* "hummingbot/strategy/strategy_base.pxd":45
 *     cdef c_did_complete_sell_order_tracker(self, object order_completed_event)
 * 
 *     cdef str c_buy_with_specific_market(self, object market_trading_pair_tuple, object amount, object order_type = *,             # <<<<<<<<<<<<<<
 *                                         object price = *, double expiration_seconds = *, position_action = *)
 *     cdef str c_sell_with_specific_market(self, object market_trading_pair_tuple, object amount, object order_type = *,
 */
struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  double expiration_seconds;
  PyObject *position_action;
};

/* "hummingbot/strategy/strategy_base.pxd":47
 *     cdef str c_buy_with_specific_market(self, object market_trading_pair_tuple, object amount, object order_type = *,
 *                                         object price = *, double expiration_seconds = *, position_action = *)
 *     cdef str c_sell_with_specific_market(self, object market_trading_pair_tuple, object amount, object order_type = *,             # <<<<<<<<<<<<<<
 *                                          object price = *, double expiration_seconds = *, position_action = *, )
 *     cdef c_cancel_order(self, object market_pair, str order_id)
 */
struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  double expiration_seconds;
  PyObject *position_action;
};

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":771
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":772
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":773
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":775
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount;

/* "hummingbot/connector/connector_base.pxd":18
 *         public dict _exchange_order_ids
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/connector_base.pxd":19
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 *     cdef c_stop_tracking_order(self, str order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/connector_base.pxd":28
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object order_size)
 *     cdef object c_quantize_order_price(self, str trading_pair, object price)
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price=*)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount {
  int __pyx_n;
  PyObject *price;
};
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_buy;
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_sell;

/* "hummingbot/connector/exchange_base.pxd":14
 *         object _order_book_tracker
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_buy {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/exchange_base.pxd":15
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 *     cdef c_stop_tracking_order(self, str order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_sell {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/core/clock.pxd":3
 * # distutils: language=c++
 * 
 * cdef class Clock:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _clock_mode
 */
struct __pyx_obj_10hummingbot_4core_5clock_Clock {
  PyObject_HEAD
  PyObject *_clock_mode;
  double _tick_size;
  double _start_time;
  double _end_time;
  PyObject *_child_iterators;
  PyObject *_current_context;
  double _current_tick;
  int _started;
};


/* "hummingbot/core/event/event_listener.pxd":6
 * 
 * 
 * cdef class EventListener:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object __weakref__
 */
struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener *__pyx_vtab;
  PyObject *__weakref__;
  int64_t _current_event_tag;
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *_current_event_caller;
};


/* "hummingbot/core/pubsub.pxd":17
 * 
 * 
 * cdef class PubSub:             # <<<<<<<<<<<<<<
 *     cdef:
 *         Events _events
 */
struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub *__pyx_vtab;
  __pyx_t_10hummingbot_4core_6pubsub_Events _events;
  PyObject *__weakref__;
};


/* "hummingbot/core/time_iterator.pxd":7
 * 
 * 
 * cdef class TimeIterator(PubSub):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double _current_timestamp
 */
struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator {
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  double _current_timestamp;
  struct __pyx_obj_10hummingbot_4core_5clock_Clock *_clock;
};


/* "hummingbot/core/data_type/limit_order.pxd":6
 * 
 * 
 * cdef class LimitOrder:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CPPLimitOrder _cpp_limit_order
 */
struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_vtab;
  LimitOrder _cpp_limit_order;
};


/* "order_tracker.pxd":7
 * 
 * 
 * cdef class OrderTracker(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         dict _tracked_limit_orders
 */
struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_tracked_limit_orders;
  PyObject *_tracked_market_orders;
  PyObject *_order_id_to_market_pair;
  PyObject *_shadow_tracked_limit_orders;
  PyObject *_shadow_order_id_to_market_pair;
  PyObject *_shadow_gc_requests;
  PyObject *_in_flight_cancels;
  PyObject *_in_flight_pending_created;
};


/* "hummingbot/strategy/strategy_base.pxd":8
 * from .order_tracker cimport OrderTracker
 * 
 * cdef class StrategyBase(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         set _sb_markets
 */
struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_sb_markets;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_create_buy_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_create_sell_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_fill_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_fail_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_cancel_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_expire_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_complete_buy_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_complete_sell_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_complete_funding_payment_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_create_range_position_order_listener;
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *_sb_remove_range_position_order_listener;
  int _sb_delegate_lock;
  struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *_sb_order_tracker;
};


/* "hummingbot/core/event/event_reporter.pxd":4
 * 
 * 
 * cdef class EventReporter(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str event_source
 */
struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter {
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
  PyObject *event_source;
};


/* "hummingbot/core/event/event_logger.pxd":4
 * 
 * 
 * cdef class EventLogger(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str _event_source
 */
struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger {
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
  PyObject *_event_source;
  PyObject *_logged_events;
  PyObject *_waiting;
  PyObject *_wait_returns;
};


/* "order_book_query_result.pxd":3
 * # distutils: language=c++
 * 
 * cdef class OrderBookQueryResult:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public double query_price
 */
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult {
  PyObject_HEAD
  double query_price;
  double query_volume;
  double result_price;
  double result_volume;
};


/* "order_book_query_result.pxd":11
 * 
 * 
 * cdef class ClientOrderBookQueryResult:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public object query_price
 */
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult {
  PyObject_HEAD
  PyObject *query_price;
  PyObject *query_volume;
  PyObject *result_price;
  PyObject *result_volume;
};


/* "hummingbot/core/data_type/order_book.pxd":12
 * 
 * 
 * cdef class OrderBook(PubSub):             # <<<<<<<<<<<<<<
 *     cdef set[OrderBookEntry] _bid_book
 *     cdef set[OrderBookEntry] _ask_book
 */
struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook {
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  std::set<OrderBookEntry>  _bid_book;
  std::set<OrderBookEntry>  _ask_book;
  int64_t _snapshot_uid;
  int64_t _last_diff_uid;
  double _best_bid;
  double _best_ask;
  double _last_trade_price;
  double _last_applied_trade;
  double _last_trade_price_rest_updated;
  int _dex;
};


/* "hummingbot/core/network_iterator.pxd":6
 * 
 * 
 * cdef class NetworkIterator(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _network_status
 */
struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_network_status;
  double _last_connected_timestamp;
  double _check_network_interval;
  double _check_network_timeout;
  double _network_error_wait_time;
  PyObject *_check_network_task;
};


/* "hummingbot/connector/connector_base.pxd":5
 * from hummingbot.core.network_iterator cimport NetworkIterator
 * 
 * cdef class ConnectorBase(NetworkIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         EventReporter _event_reporter
 */
struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase {
  struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_base;
  struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter *_event_reporter;
  struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger *_event_logger;
  int _trading_required;
  PyObject *_account_available_balances;
  PyObject *_account_balances;
  int _real_time_balance_update;
  PyObject *_in_flight_orders_snapshot;
  double _in_flight_orders_snapshot_timestamp;
  PyObject *_current_trade_fills;
  PyObject *_exchange_order_ids;
};


/* "hummingbot/connector/exchange_base.pxd":10
 * )
 * 
 * cdef class ExchangeBase(ConnectorBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _order_book_tracker
 */
struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase {
  struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase __pyx_base;
  PyObject *_order_book_tracker;
};


/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pxd":7
 * 
 * 
 * cdef class AvellanedaMarketMakingStrategy(StrategyBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _market_info
 */
struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy {
  struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase __pyx_base;
  PyObject *_market_info;
  PyObject *_minimum_spread;
  PyObject *_order_amount;
  double _order_refresh_time;
  double _max_order_age;
  PyObject *_order_refresh_tolerance_pct;
  double _filled_order_delay;
  int _order_levels;
  PyObject *_order_override;
  int _hanging_orders_enabled;
  PyObject *_hanging_orders_tracker;
  PyObject *_inventory_target_base_pct;
  int _order_optimization_enabled;
  int _add_transaction_costs_to_orders;
  int _hb_app_notification;
  int _is_debug;
  double _cancel_timestamp;
  double _create_timestamp;
  PyObject *_limit_order_type;
  int _all_markets_ready;
  int _filled_buys_balance;
  int _filled_sells_balance;
  double _last_timestamp;
  double _status_report_interval;
  int64_t _logging_options;
  PyObject *_last_own_trade_price;
  int _volatility_sampling_period;
  double _last_sampling_timestamp;
  int _parameters_based_on_spread;
  int _ticks_to_be_ready;
  PyObject *_min_spread;
  PyObject *_max_spread;
  PyObject *_vol_to_spread_multiplier;
  PyObject *_volatility_sensibility;
  PyObject *_inventory_risk_aversion;
  PyObject *_kappa;
  PyObject *_gamma;
  PyObject *_eta;
  PyObject *_closing_time;
  PyObject *_time_left;
  PyObject *_q_adjustment_factor;
  PyObject *_reserved_price;
  PyObject *_optimal_spread;
  PyObject *_optimal_bid;
  PyObject *_optimal_ask;
  PyObject *_latest_parameter_calculation_vol;
  PyObject *_debug_csv_path;
  PyObject *_avg_vol;
  int _should_wait_order_cancel_confirmation;
};


/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":545
 *         return self.c_cancel_order(self._market_info, order_id)
 * 
 *     cdef c_start(self, Clock clock, double timestamp):             # <<<<<<<<<<<<<<
 *         StrategyBase.c_start(self, clock, timestamp)
 *         self._last_timestamp = timestamp
 */
struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start {
  PyObject_HEAD
  PyObject *__pyx_v_order_id;
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self;
};


/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":555
 *             restored_order_ids = self.c_track_restored_orders(self.market_info)
 *             for order_id in restored_order_ids:
 *                 order = next(o for o in self.market_info.market.limit_orders if o.client_order_id == order_id)             # <<<<<<<<<<<<<<
 *                 if order:
 *                     self._hanging_orders_tracker.add_order(order)
 */
struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start *__pyx_outer_scope;
  PyObject *__pyx_v_o;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1217
 *         return self.c_to_create_orders(proposal)
 * 
 *     cdef c_execute_orders_proposal(self, object proposal):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double expiration_seconds = (self._order_refresh_time
 */
struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal {
  PyObject_HEAD
  PyObject *__pyx_v_ask_order_id;
  PyObject *__pyx_v_bid_order_id;
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self;
};


/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1248
 *                 orders_created = True
 *                 if idx < number_of_pairs:
 *                     order = next((o for o in self.active_orders if o.client_order_id == bid_order_id))             # <<<<<<<<<<<<<<
 *                     if order:
 *                         self._hanging_orders_tracker.add_current_pairs_of_proposal_orders_executed_by_strategy(
 */
struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal *__pyx_outer_scope;
  PyObject *__pyx_v_o;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1271
 *                 orders_created = True
 *                 if idx < number_of_pairs:
 *                     order = next((o for o in self.active_orders if o.client_order_id == ask_order_id))             # <<<<<<<<<<<<<<
 *                     if order:
 *                         self._hanging_orders_tracker.current_created_pairs_of_orders[idx].sell_order = order
 */
struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal *__pyx_outer_scope;
  PyObject *__pyx_v_o;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};



/* "hummingbot/core/event/event_listener.pxd":6
 * 
 * 
 * cdef class EventListener:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object __weakref__
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener {
  PyObject *(*c_set_event_info)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, int64_t, struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *);
  PyObject *(*c_call)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener *__pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener;


/* "hummingbot/core/pubsub.pxd":17
 * 
 * 
 * cdef class PubSub:             # <<<<<<<<<<<<<<
 *     cdef:
 *         Events _events
 */

struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub {
  PyObject *(*c_log_exception)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, PyObject *);
  PyObject *(*c_add_listener)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *);
  PyObject *(*c_remove_listener)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *);
  PyObject *(*c_remove_dead_listeners)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t);
  PyObject *(*c_get_listeners)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t);
  PyObject *(*c_trigger_event)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub *__pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub;


/* "hummingbot/core/time_iterator.pxd":7
 * 
 * 
 * cdef class TimeIterator(PubSub):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double _current_timestamp
 */

struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator {
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  PyObject *(*c_start)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *, double);
  PyObject *(*c_stop)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *);
  PyObject *(*c_tick)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, double);
};
static struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator *__pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator;


/* "hummingbot/core/data_type/limit_order.pxd":6
 * 
 * 
 * cdef class LimitOrder:             # <<<<<<<<<<<<<<
 *     cdef:
 *         CPPLimitOrder _cpp_limit_order
 */

struct __pyx_vtabstruct_10hummingbot_4core_9data_type_11limit_order_LimitOrder {
  long (*c_age)(struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *);
  long (*c_age_til)(struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *, long);
};
static struct __pyx_vtabstruct_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_vtabptr_10hummingbot_4core_9data_type_11limit_order_LimitOrder;


/* "order_tracker.pxd":7
 * 
 * 
 * cdef class OrderTracker(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         dict _tracked_limit_orders
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *(*c_get_limit_orders)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *);
  PyObject *(*c_get_market_orders)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *);
  PyObject *(*c_get_shadow_limit_orders)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *);
  int (*c_has_in_flight_cancel)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  int (*c_check_and_track_cancel)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  PyObject *(*c_get_market_pair_from_order_id)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  PyObject *(*c_get_shadow_market_pair_from_order_id)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *(*c_get_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *);
  PyObject *(*c_get_market_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *(*c_get_shadow_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  PyObject *(*c_start_tracking_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *, int, PyObject *, PyObject *);
  PyObject *(*c_stop_tracking_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *);
  PyObject *(*c_start_tracking_market_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *, int, PyObject *);
  PyObject *(*c_stop_tracking_market_order)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *, PyObject *);
  PyObject *(*c_check_and_cleanup_shadow_records)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *);
  PyObject *(*c_add_create_order_pending)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
  PyObject *(*c_remove_create_order_pending)(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *__pyx_vtabptr_10hummingbot_8strategy_13order_tracker_OrderTracker;


/* "hummingbot/strategy/strategy_base.pxd":8
 * from .order_tracker cimport OrderTracker
 * 
 * cdef class StrategyBase(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         set _sb_markets
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *(*c_add_markets)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_remove_markets)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_create_buy_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_create_sell_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_fill_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_fail_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_cancel_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_expire_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_buy_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_sell_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_funding_payment)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_create_range_position_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_remove_range_position_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_fail_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_cancel_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_expire_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_buy_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_did_complete_sell_order_tracker)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_buy_with_specific_market)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market *__pyx_optional_args);
  PyObject *(*c_sell_with_specific_market)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market *__pyx_optional_args);
  PyObject *(*c_cancel_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *);
  PyObject *(*c_start_tracking_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, int, PyObject *, PyObject *);
  PyObject *(*c_stop_tracking_limit_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *);
  PyObject *(*c_start_tracking_market_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *, int, PyObject *);
  PyObject *(*c_stop_tracking_market_order)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *);
  PyObject *(*c_track_restored_orders)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *);
  PyObject *(*c_sum_flat_fees)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase;


/* "hummingbot/core/event/event_reporter.pxd":4
 * 
 * 
 * cdef class EventReporter(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str event_source
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter {
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter *__pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter;


/* "hummingbot/core/event/event_logger.pxd":4
 * 
 * 
 * cdef class EventLogger(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str _event_source
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger {
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger *__pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger;


/* "hummingbot/core/data_type/order_book.pxd":12
 * 
 * 
 * cdef class OrderBook(PubSub):             # <<<<<<<<<<<<<<
 *     cdef set[OrderBookEntry] _bid_book
 *     cdef set[OrderBookEntry] _ask_book
 */

struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook {
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  PyObject *(*c_apply_diffs)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, std::vector<OrderBookEntry> , std::vector<OrderBookEntry> , int64_t);
  PyObject *(*c_apply_snapshot)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, std::vector<OrderBookEntry> , std::vector<OrderBookEntry> , int64_t);
  PyObject *(*c_apply_trade)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyObject *);
  PyObject *(*c_apply_numpy_diffs)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyArrayObject *, PyArrayObject *);
  PyObject *(*c_apply_numpy_snapshot)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyArrayObject *, PyArrayObject *);
  double (*c_get_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_price_for_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_price_for_quote_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_volume_for_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_quote_volume_for_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_vwap_for_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_quote_volume_for_base_amount)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
};
static struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook;


/* "hummingbot/core/network_iterator.pxd":6
 * 
 * 
 * cdef class NetworkIterator(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _network_status
 */

struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator *__pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator;


/* "hummingbot/connector/connector_base.pxd":5
 * from hummingbot.core.network_iterator cimport NetworkIterator
 * 
 * cdef class ConnectorBase(NetworkIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         EventReporter _event_reporter
 */

struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase {
  struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_base;
  PyObject *(*c_buy)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy *__pyx_optional_args);
  PyObject *(*c_sell)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell *__pyx_optional_args);
  PyObject *(*c_cancel)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_stop_tracking_order)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_balance)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_available_balance)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_price)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, int);
  PyObject *(*c_get_order_price_quantum)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_get_order_size_quantum)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_quantize_order_price)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_quantize_order_amount)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount *__pyx_optional_args);
};
static struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *__pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase;


/* "hummingbot/connector/exchange_base.pxd":10
 * )
 * 
 * cdef class ExchangeBase(ConnectorBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _order_book_tracker
 */

struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase {
  struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase __pyx_base;
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *(*c_get_order_book)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_quote_volume_for_base_amount)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_volume_for_price)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_quote_volume_for_price)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_vwap_for_volume)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_price_for_volume)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  PyObject *(*c_get_fee)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase;


/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":50
 * 
 * 
 * cdef class AvellanedaMarketMakingStrategy(StrategyBase):             # <<<<<<<<<<<<<<
 *     OPTION_LOG_CREATE_ORDER = 1 << 3
 *     OPTION_LOG_MAKER_ORDER_FILLED = 1 << 4
 */

struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy {
  struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase __pyx_base;
  PyObject *(*c_get_mid_price)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *);
  PyObject *(*_create_proposal_based_on_order_override)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *);
  PyObject *(*_create_proposal_based_on_order_levels)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *);
  PyObject *(*_create_basic_proposal)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *);
  PyObject *(*c_create_base_proposal)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *);
  PyObject *(*c_get_adjusted_available_balance)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *);
  PyObject *(*c_apply_order_price_modifiers)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *);
  PyObject *(*c_apply_order_amount_eta_transformation)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *);
  PyObject *(*c_apply_budget_constraint)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *);
  PyObject *(*c_apply_order_optimization)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *);
  PyObject *(*c_apply_add_transaction_costs)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *);
  int (*c_is_within_tolerance)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *, PyObject *);
  PyObject *(*c_cancel_active_orders)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *);
  PyObject *(*c_cancel_active_orders_on_max_age_limit)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *);
  int (*c_to_create_orders)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *);
  PyObject *(*c_execute_orders_proposal)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *);
  PyObject *(*c_set_timers)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *);
  double (*c_get_spread)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *);
  PyObject *(*c_collect_market_variables)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, double);
  int (*c_is_algorithm_ready)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *);
  PyObject *(*c_calculate_reserved_price_and_optimal_spread)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *);
  PyObject *(*c_calculate_target_inventory)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *);
  PyObject *(*c_recalculate_parameters)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *);
  PyObject *(*c_did_complete_order)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_vtabptr_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) (&args[nargs])
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_Occurred(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* set_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set);
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ObjectGetItem.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key);
#else
#define __Pyx_PyObject_GetItem(obj, key)  PyObject_GetItem(obj, key)
#endif

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* pybytes_as_double.proto */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj);
static double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length);
static CYTHON_INLINE double __Pyx_PyBytes_AsDouble(PyObject *obj) {
    return __Pyx__PyBytes_AsDouble(obj, PyBytes_AS_STRING(obj), PyBytes_GET_SIZE(obj));
}
static CYTHON_INLINE double __Pyx_PyByteArray_AsDouble(PyObject *obj) {
    return __Pyx__PyBytes_AsDouble(obj, PyByteArray_AS_STRING(obj), PyByteArray_GET_SIZE(obj));
}

/* pyunicode_as_double.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static const char* __Pyx__PyUnicode_AsDouble_Copy(const void* data, const int kind, char* buffer, Py_ssize_t start, Py_ssize_t end) {
    int last_was_punctuation;
    Py_ssize_t i;
    last_was_punctuation = 1;
    for (i=start; i <= end; i++) {
        Py_UCS4 chr = PyUnicode_READ(kind, data, i);
        int is_punctuation = (chr == '_') | (chr == '.');
        *buffer = (char)chr;
        buffer += (chr != '_');
        if (unlikely(chr > 127)) goto parse_failure;
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyUnicode_AsDouble_inf_nan(const void* data, int kind, Py_ssize_t start, Py_ssize_t length) {
    int matches = 1;
    Py_UCS4 chr;
    Py_UCS4 sign = PyUnicode_READ(kind, data, start);
    int is_signed = (sign == '-') | (sign == '+');
    start += is_signed;
    length -= is_signed;
    switch (PyUnicode_READ(kind, data, start)) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'a') | (chr == 'A');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'n') | (chr == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+1);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+2);
            matches &= (chr == 'f') | (chr == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            chr = PyUnicode_READ(kind, data, start+3);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+4);
            matches &= (chr == 'n') | (chr == 'N');
            chr = PyUnicode_READ(kind, data, start+5);
            matches &= (chr == 'i') | (chr == 'I');
            chr = PyUnicode_READ(kind, data, start+6);
            matches &= (chr == 't') | (chr == 'T');
            chr = PyUnicode_READ(kind, data, start+7);
            matches &= (chr == 'y') | (chr == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static double __Pyx_PyUnicode_AsDouble_WithSpaces(PyObject *obj) {
    double value;
    const char *last;
    char *end;
    Py_ssize_t start, length = PyUnicode_GET_LENGTH(obj);
    const int kind = PyUnicode_KIND(obj);
    const void* data = PyUnicode_DATA(obj);
    start = 0;
    while (Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, start)))
        start++;
    while (start < length - 1 && Py_UNICODE_ISSPACE(PyUnicode_READ(kind, data, length - 1)))
        length--;
    length -= start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyUnicode_AsDouble_inf_nan(data, kind, start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    if (length < 40) {
        char number[40];
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((length + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyUnicode_AsDouble_Copy(data, kind, number, start, start + length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}
#endif
static CYTHON_INLINE double __Pyx_PyUnicode_AsDouble(PyObject *obj) {
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
    if (unlikely(__Pyx_PyUnicode_READY(obj) == -1))
        return (double)-1;
    if (likely(PyUnicode_IS_ASCII(obj))) {
        const char *s;
        Py_ssize_t length;
        s = PyUnicode_AsUTF8AndSize(obj, &length);
        return __Pyx__PyBytes_AsDouble(obj, s, length);
    }
    return __Pyx_PyUnicode_AsDouble_WithSpaces(obj);
#else
    return __Pyx_SlowPyString_AsDouble(obj);
#endif
}

/* pyobject_as_double.proto */
static double __Pyx__PyObject_AsDouble(PyObject* obj);
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj)\
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) :\
 likely(PyInt_CheckExact(obj)) ?\
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj)\
((likely(PyFloat_CheckExact(obj))) ?  PyFloat_AS_DOUBLE(obj) :\
 likely(PyLong_CheckExact(obj)) ?\
 PyLong_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectFormat.proto */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* s, PyObject* f);
#else
#define __Pyx_PyObject_Format(s, f) PyObject_Format(s, f)
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#if CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyType_Spec *spec, PyObject *bases);
#endif

/* PyMethodNew.proto */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_CyFunctionType = 0;
#endif
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_IsCyOrPyCFunction(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func.vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* py_abs.proto */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *num);
#define __Pyx_PyNumber_Absolute(x)\
    ((likely(PyLong_CheckExact(x))) ?\
         (likely(Py_SIZE(x) >= 0) ? (Py_INCREF(x), (x)) : __Pyx_PyLong_AbsNeg(x)) :\
         PyNumber_Absolute(x))
#else
#define __Pyx_PyNumber_Absolute(x)  PyNumber_Absolute(x)
#endif

/* PyFloatBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_TrueDivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyFloat_TrueDivideObjC(op1, op2, floatval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* SliceObject.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

/* pynumber_float.proto */
static CYTHON_INLINE PyObject* __Pyx__PyNumber_Float(PyObject* obj);
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : __Pyx__PyNumber_Float(x))

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* ListExtend.proto */
static CYTHON_INLINE int __Pyx_PyList_Extend(PyObject* L, PyObject* v) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject* none = _PyList_Extend((PyListObject*)L, v);
    if (unlikely(!none))
        return -1;
    Py_DECREF(none);
    return 0;
#else
    return PyList_SetSlice(L, PY_SSIZE_T_MAX, PY_SSIZE_T_MAX, v);
#endif
}

/* PyObject_Str.proto */
#define __Pyx_PyObject_Str(obj)\
    (likely(PyString_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))

/* UnicodeConcatInPlace.proto */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
    #if CYTHON_REFNANNY
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)
    #else
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right)
    #endif
    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    );
#else
#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat
#endif
#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ?\
    PyNumber_InPlaceAdd(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* pep479.proto */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen);

/* IterNext.proto */
#define __Pyx_PyIter_Next(obj) __Pyx_PyIter_Next2(obj, NULL)
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject *, PyObject *);

/* None.proto */
static CYTHON_INLINE long __Pyx_mod_long(long, long);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* BuildPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char);

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char);

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_MultiplyObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_MultiplyObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceMultiply(op1, op2) : PyNumber_Multiply(op1, op2))
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* WriteUnraisableException.proto */
static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_MultiplyCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_MultiplyCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceMultiply(op1, op2) : PyNumber_Multiply(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractCObj(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_TrueDivideObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceTrueDivide(op1, op2) : PyNumber_TrueDivide(op1, op2))
#endif

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* PyUnicode_Unicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* CIntToPyUnicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* PyType_Ready.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_PyType_Ready(PyTypeObject *t);
#else
#define __Pyx_PyType_Ready(t) PyType_Ready(t)
#endif

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
struct __pyx_CoroutineObject;
typedef PyObject *(*__pyx_coroutine_body_t)(struct __pyx_CoroutineObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct __pyx_CoroutineObject {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) __Pyx_IS_TYPE(obj, __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str);
#else
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);
#endif

/* #### Code section: module_declarations ### */
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_get_mid_price(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_start(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, struct __pyx_obj_10hummingbot_4core_5clock_Clock *__pyx_v_clock, double __pyx_v_timestamp); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_stop(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, struct __pyx_obj_10hummingbot_4core_5clock_Clock *__pyx_v_clock); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_tick(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, double __pyx_v_timestamp); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_collect_market_variables(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, double __pyx_v_timestamp); /* proto*/
static double __pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_get_spread(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_calculate_reserved_price_and_optimal_spread(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_calculate_target_inventory(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_recalculate_parameters(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto*/
static int __pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_is_algorithm_ready(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy__create_proposal_based_on_order_override(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy__create_proposal_based_on_order_levels(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy__create_basic_proposal(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_create_base_proposal(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_get_adjusted_available_balance(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_orders); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_apply_order_price_modifiers(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_apply_budget_constraint(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_apply_order_optimization(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_apply_order_amount_eta_transformation(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_apply_add_transaction_costs(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_did_fill_order(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_filled_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_did_complete_buy_order(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_completed_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_did_complete_sell_order(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_completed_event); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_did_complete_order(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_completed_event); /* proto*/
static int __pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_is_within_tolerance(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_current_prices, PyObject *__pyx_v_proposal_prices); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_cancel_active_orders_on_max_age_limit(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_cancel_active_orders(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal); /* proto*/
static int __pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_to_create_orders(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_execute_orders_proposal(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal); /* proto*/
static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_set_timers(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self); /* proto*/

/* Module declarations from "libc.stdint" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.clock" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5clock_Clock = 0;
#endif

/* Module declarations from "libcpp.utility" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.unordered_map" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.unordered_set" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.PyRef" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.event.event_listener" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener = 0;
#endif

/* Module declarations from "hummingbot.core.pubsub" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_6pubsub_PubSub = 0;
#endif

/* Module declarations from "hummingbot.core.time_iterator" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator = 0;
#endif

/* Module declarations from "libcpp" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libc.string" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.string" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.data_type.LimitOrder" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.data_type.limit_order" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder = 0;
#endif

/* Module declarations from "hummingbot.strategy.order_tracker" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker = 0;
#endif

/* Module declarations from "hummingbot.strategy.strategy_base" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase = 0;
#endif

/* Module declarations from "hummingbot.core.event.event_reporter" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter = 0;
#endif

/* Module declarations from "hummingbot.core.event.event_logger" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger = 0;
#endif

/* Module declarations from "libcpp.set" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.vector" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.data_type.OrderBookEntry" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.data_type.order_book_query_result" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult = 0;
#endif

/* Module declarations from "libc.stdio" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "__builtin__" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cpython.type" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;
#endif

/* Module declarations from "cpython" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cpython.object" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cpython.ref" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "numpy" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "numpy" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
#endif

/* Module declarations from "hummingbot.core.data_type.order_book" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook = 0;
#endif

/* Module declarations from "hummingbot.core.network_iterator" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator = 0;
#endif

/* Module declarations from "hummingbot.connector.connector_base" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase = 0;
#endif

/* Module declarations from "hummingbot.connector.exchange_base" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase = 0;
#endif

/* Module declarations from "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr = 0;
#endif
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making"
extern int __pyx_module_is_main_hummingbot__strategy__avellaneda_market_making__avellaneda_market_making;
int __pyx_module_is_main_hummingbot__strategy__avellaneda_market_making__avellaneda_market_making = 0;

/* Implementation of "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_all;
static PyObject *__pyx_builtin_round;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_max;
static PyObject *__pyx_builtin_sorted;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_ImportError;
/* #### Code section: string_decls ### */
static const char __pyx_k_1[] = ".1%";
static const char __pyx_k_2[] = ".2%";
static const char __pyx_k_a[] = "a";
static const char __pyx_k_e[] = "e";
static const char __pyx_k_o[] = "o";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_q[] = "% | q=";
static const char __pyx_k_s[] = "s";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_10[] = "10";
static const char __pyx_k_3f[] = ".3f";
static const char __pyx_k_4f[] = ".4f";
static const char __pyx_k_5E[] = ".5E";
static const char __pyx_k_df[] = "df";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_ln[] = "ln";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_os[] = "os";
static const char __pyx_k_pd[] = "pd";
static const char __pyx_k_0_1[] = "0.1";
static const char __pyx_k_0_2[] = "0.2";
static const char __pyx_k_0_5[] = "0.5";
static const char __pyx_k_100[] = "100";
static const char __pyx_k_1_2[] = "1";
static const char __pyx_k_1_3[] = "1.3";
static const char __pyx_k_1e5[] = "1e5";
static const char __pyx_k_2_2[] = "2";
static const char __pyx_k_Age[] = "Age";
static const char __pyx_k_BUY[] = "BUY";
static const char __pyx_k_Inf[] = "Inf";
static const char __pyx_k_NaN[] = "NaN";
static const char __pyx_k__15[] = "";
static const char __pyx_k__16[] = ")";
static const char __pyx_k__17[] = "//";
static const char __pyx_k__19[] = "\n";
static const char __pyx_k__20[] = "    ";
static const char __pyx_k__21[] = "{:<";
static const char __pyx_k__22[] = "}";
static const char __pyx_k__23[] = "%";
static const char __pyx_k__24[] = "(";
static const char __pyx_k__25[] = " ";
static const char __pyx_k__26[] = " (";
static const char __pyx_k__27[] = " @ ";
static const char __pyx_k__28[] = ", ";
static const char __pyx_k__32[] = "*";
static const char __pyx_k__88[] = "_";
static const char __pyx_k_age[] = "age";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_ask[] = "% | ask=";
static const char __pyx_k_bid[] = "bid=";
static const char __pyx_k_buy[] = "buy";
static const char __pyx_k_cls[] = "cls";
static const char __pyx_k_eta[] = "eta";
static const char __pyx_k_exp[] = "exp";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_int[] = "int";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_len[] = "len";
static const char __pyx_k_log[] = "log";
static const char __pyx_k_max[] = "max";
static const char __pyx_k_msg[] = "msg";
static const char __pyx_k_n_a[] = "n/a";
static const char __pyx_k_nan[] = "nan";
static const char __pyx_k_num[] = "num";
static const char __pyx_k_str[] = "str";
static const char __pyx_k_vol[] = " | vol=";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_0_15[] = "0.15";
static const char __pyx_k_Dict[] = "Dict";
static const char __pyx_k_INFO[] = "INFO";
static const char __pyx_k_List[] = "List";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_SELL[] = "SELL";
static const char __pyx_k_Type[] = "Type";
static const char __pyx_k__133[] = "?";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_base[] = "base";
static const char __pyx_k_bool[] = "bool";
static const char __pyx_k_buys[] = "buys";
static const char __pyx_k_ceil[] = "ceil";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_hang[] = "hang";
static const char __pyx_k_info[] = "info";
static const char __pyx_k_line[] = "line";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_math[] = "math";
static const char __pyx_k_mode[] = "mode";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_path[] = "path";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_sell[] = "sell";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_size[] = "size";
static const char __pyx_k_sort[] = "sort";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_time[] = "time";
static const char __pyx_k_unit[] = "unit";
static const char __pyx_k_0_005[] = "0.005";
static const char __pyx_k_1e100[] = "1e100";
static const char __pyx_k_Clock[] = "Clock";
static const char __pyx_k_H_M_S[] = "%H:%M:%S";
static const char __pyx_k_LIMIT[] = "LIMIT";
static const char __pyx_k_Level[] = "Level";
static const char __pyx_k_Maker[] = ") Maker ";
static const char __pyx_k_Price[] = "Price";
static const char __pyx_k_Tuple[] = "Tuple";
static const char __pyx_k_apply[] = "apply";
static const char __pyx_k_clock[] = "clock";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_float[] = "float";
static const char __pyx_k_floor[] = "floor";
static const char __pyx_k_gamma[] = "gamma";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_isnan[] = "isnan";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_kappa[] = "kappa";
static const char __pyx_k_level[] = "level";
static const char __pyx_k_lines[] = "lines";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_order[] = " order ";
static const char __pyx_k_price[] = "price";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_ready[] = "ready";
static const char __pyx_k_regex[] = "regex";
static const char __pyx_k_round[] = "round";
static const char __pyx_k_sells[] = "sells";
static const char __pyx_k_split[] = "split";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_upper[] = "upper";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_vol_2[] = "vol";
static const char __pyx_k_Assets[] = "  Assets:";
static const char __pyx_k_Market[] = "Market";
static const char __pyx_k_Orders[] = "  Orders:";
static const char __pyx_k_Spread[] = "Spread";
static const char __pyx_k_amount[] = "amount";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_exists[] = "exists";
static const char __pyx_k_filled[] = " filled.";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_header[] = "header";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_is_buy[] = "is_buy";
static const char __pyx_k_logger[] = "logger";
static const char __pyx_k_market[] = "market";
static const char __pyx_k_name_2[] = "name";
static const char __pyx_k_orders[] = "orders";
static const char __pyx_k_pandas[] = "pandas";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_return[] = "return";
static const char __pyx_k_sorted[] = "sorted";
static const char __pyx_k_spread[] = "spread";
static const char __pyx_k_to_csv[] = "to_csv";
static const char __pyx_k_typing[] = "typing";
static const char __pyx_k_unlink[] = "unlink";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_Current[] = "Current %";
static const char __pyx_k_Decimal[] = "Decimal";
static const char __pyx_k_Maker_2[] = "Maker ";
static const char __pyx_k_Markets[] = "  Markets:";
static const char __pyx_k_columns[] = "columns";
static const char __pyx_k_decimal[] = "decimal";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_lvl_buy[] = "lvl_buy";
static const char __pyx_k_new_ask[] = "new_ask";
static const char __pyx_k_new_bid[] = "new_bid";
static const char __pyx_k_order_2[] = "order";
static const char __pyx_k_percent[] = "percent";
static const char __pyx_k_replace[] = "replace";
static const char __pyx_k_reverse[] = "reverse";
static const char __pyx_k_seconds[] = "seconds";
static const char __pyx_k_warning[] = "warning";
static const char __pyx_k_Best_Ask[] = "Best Ask";
static const char __pyx_k_Best_Bid[] = "Best Bid";
static const char __pyx_k_Creating[] = ") Creating ";
static const char __pyx_k_Exchange[] = "Exchange";
static const char __pyx_k_MidPrice[] = "MidPrice";
static const char __pyx_k_Proposal[] = "Proposal";
static const char __pyx_k_WARNINGS[] = "*** WARNINGS ***";
static const char __pyx_k_best_ask[] = "best_ask";
static const char __pyx_k_best_bid[] = "best_bid";
static const char __pyx_k_datetime[] = "datetime";
static const char __pyx_k_df_lines[] = "df_lines";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_is_debug[] = "is_debug";
static const char __pyx_k_logspace[] = "logspace";
static const char __pyx_k_lvl_sell[] = "lvl_sell";
static const char __pyx_k_no_sells[] = "no_sells";
static const char __pyx_k_order_id[] = "order_id";
static const char __pyx_k_proposal[] = "proposal";
static const char __pyx_k_quantity[] = "quantity";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_strftime[] = "strftime";
static const char __pyx_k_CONNECTED[] = "CONNECTED";
static const char __pyx_k_DataFrame[] = "DataFrame";
static const char __pyx_k_OrderType[] = "OrderType";
static const char __pyx_k_PriceSize[] = "PriceSize";
static const char __pyx_k_Timestamp[] = "Timestamp";
static const char __pyx_k_TradeType[] = "TradeType";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_add_order[] = "add_order";
static const char __pyx_k_ask_price[] = "ask_price";
static const char __pyx_k_assets_df[] = "assets_df";
static const char __pyx_k_bid_price[] = "bid_price";
static const char __pyx_k_df_header[] = "df_header";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_getLogger[] = "getLogger";
static const char __pyx_k_get_price[] = "get_price";
static const char __pyx_k_is_filled[] = " is filled.";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_mid_price[] = "mid_price";
static const char __pyx_k_normalize[] = "normalize";
static const char __pyx_k_order_age[] = "order_age";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_ref_price[] = "ref_price";
static const char __pyx_k_timedelta[] = "timedelta";
static const char __pyx_k_timestamp[] = "timestamp";
static const char __pyx_k_to_string[] = "to_string";
static const char __pyx_k_Amount_Adj[] = "Amount (Adj)";
static const char __pyx_k_LimitOrder[] = "LimitOrder";
static const char __pyx_k_add_sample[] = "add_sample";
static const char __pyx_k_all_orders[] = "all_orders";
static const char __pyx_k_base_asset[] = "base_asset";
static const char __pyx_k_base_ratio[] = "base_ratio";
static const char __pyx_k_base_value[] = "base_value";
static const char __pyx_k_formatters[] = "formatters";
static const char __pyx_k_get_spread[] = "get_spread";
static const char __pyx_k_markets_df[] = "markets_df";
static const char __pyx_k_max_spread[] = "max_spread";
static const char __pyx_k_min_spread[] = "min_spread";
static const char __pyx_k_pmm_logger[] = "pmm_logger";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_sell_order[] = "sell_order";
static const char __pyx_k_set_timers[] = "set_timers";
static const char __pyx_k_target_inv[] = "target_inv";
static const char __pyx_k_trade_type[] = "trade_type";
static const char __pyx_k_volatility[] = "    volatility= ";
static const char __pyx_k_Amount_Orig[] = "Amount (Orig)";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_amount_orig[] = "amount_orig";
static const char __pyx_k_current_inv[] = "current_inv";
static const char __pyx_k_current_vol[] = "current_vol";
static const char __pyx_k_get_balance[] = "get_balance";
static const char __pyx_k_init_params[] = "init_params";
static const char __pyx_k_market_info[] = "market_info";
static const char __pyx_k_non_hanging[] = "non_hanging";
static const char __pyx_k_optimal_ask[] = "optimal_ask";
static const char __pyx_k_optimal_bid[] = "optimal_bid";
static const char __pyx_k_quote_asset[] = "quote_asset";
static const char __pyx_k_quote_ratio[] = "quote_ratio";
static const char __pyx_k_radar_relay[] = "radar_relay";
static const char __pyx_k_risk_factor[] = "risk_factor";
static const char __pyx_k_ExchangeBase[] = "ExchangeBase";
static const char __pyx_k_List_Decimal[] = "List[Decimal]";
static const char __pyx_k_StrategyBase[] = "StrategyBase";
static const char __pyx_k_bamboo_relay[] = "bamboo_relay";
static const char __pyx_k_base_balance[] = "base_balance";
static const char __pyx_k_cancel_order[] = "cancel_order";
static const char __pyx_k_closing_time[] = "closing_time";
static const char __pyx_k_display_name[] = "display_name";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_limit_orders[] = "limit_orders";
static const char __pyx_k_market_books[] = "market_books";
static const char __pyx_k_markets_data[] = "markets_data";
static const char __pyx_k_order_amount[] = "order_amount";
static const char __pyx_k_order_levels[] = "order_levels";
static const char __pyx_k_pd_DataFrame[] = "pd.DataFrame";
static const char __pyx_k_process_tick[] = "process_tick";
static const char __pyx_k_result_price[] = "result_price";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_trading_pair[] = "trading_pair";
static const char __pyx_k_Current_Value[] = "Current Value (";
static const char __pyx_k_NetworkStatus[] = "NetworkStatus";
static const char __pyx_k_Total_Balance[] = "Total Balance";
static const char __pyx_k_active_orders[] = "active_orders";
static const char __pyx_k_base_currency[] = "base_currency";
static const char __pyx_k_class_getitem[] = "__class_getitem__";
static const char __pyx_k_current_value[] = "current_value";
static const char __pyx_k_format_status[] = "format_status";
static const char __pyx_k_get_mid_price[] = "get_mid_price";
static const char __pyx_k_map_df_to_str[] = "map_df_to_str";
static const char __pyx_k_max_order_age[] = "max_order_age";
static const char __pyx_k_notify_hb_app[] = "notify_hb_app";
static const char __pyx_k_quote_balance[] = "quote_balance";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_risk_factor_2[] = "    risk_factor(\316\263)= ";
static const char __pyx_k_s_decimal_one[] = "s_decimal_one";
static const char __pyx_k_warning_lines[] = "warning_lines";
static const char __pyx_k_OPTION_LOG_ALL[] = "OPTION_LOG_ALL";
static const char __pyx_k_Reserved_Price[] = "Reserved Price";
static const char __pyx_k_active_markets[] = "active_markets";
static const char __pyx_k_current_prices[] = "current_prices";
static const char __pyx_k_debug_csv_path[] = "debug_csv_path";
static const char __pyx_k_get_last_price[] = "get_last_price";
static const char __pyx_k_get_volatility[] = "get_volatility";
static const char __pyx_k_log_with_clock[] = "log_with_clock";
static const char __pyx_k_network_status[] = "network_status";
static const char __pyx_k_optimal_spread[] = "optimal_spread";
static const char __pyx_k_order_override[] = "order_override";
static const char __pyx_k_quote_currency[] = "quote_currency";
static const char __pyx_k_reserved_price[] = "reserved_price";
static const char __pyx_k_s_decimal_zero[] = "s_decimal_zero";
static const char __pyx_k_total_in_quote[] = "total_in_quote";
static const char __pyx_k_volatility_pct[] = "volatility_pct";
static const char __pyx_k_List_LimitOrder[] = "List[LimitOrder]";
static const char __pyx_k_balance_warning[] = "balance_warning";
static const char __pyx_k_client_order_id[] = "client_order_id";
static const char __pyx_k_logging_options[] = "logging_options";
static const char __pyx_k_markets_columns[] = "markets_columns";
static const char __pyx_k_network_warning[] = "network_warning";
static const char __pyx_k_proposal_prices[] = "proposal_prices";
static const char __pyx_k_reference_price[] = "reference_price";
static const char __pyx_k_register_events[] = "register_events";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_use_coordinator[] = "use_coordinator";
static const char __pyx_k_active_orders_df[] = "active_orders_df";
static const char __pyx_k_first_col_length[] = "first_col_length";
static const char __pyx_k_get_limit_orders[] = "get_limit_orders";
static const char __pyx_k_is_hanging_order[] = "is_hanging_order";
static const char __pyx_k_to_create_orders[] = "to_create_orders";
static const char __pyx_k_0x_active_cancels[] = "0x_active_cancels";
static const char __pyx_k_Available_Balance[] = "Available Balance";
static const char __pyx_k_Dict_str_List_str[] = "Dict[str, List[str]]";
static const char __pyx_k_FileNotFoundError[] = "FileNotFoundError";
static const char __pyx_k_all_markets_ready[] = "all_markets_ready";
static const char __pyx_k_ask_level_spreads[] = "ask_level_spreads";
static const char __pyx_k_bid_level_spreads[] = "bid_level_spreads";
static const char __pyx_k_global_config_map[] = "global_config_map";
static const char __pyx_k_in_flight_cancels[] = "in_flight_cancels";
static const char __pyx_k_mid_price_std_dev[] = "mid_price std_dev";
static const char __pyx_k_pure_mm_assets_df[] = "pure_mm_assets_df";
static const char __pyx_k_s_decimal_neg_one[] = "s_decimal_neg_one";
static const char __pyx_k_unregister_events[] = "unregister_events";
static const char __pyx_k_Maker_buy_order_of[] = ") Maker buy order of ";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_filled_order_delay[] = "filled_order_delay";
static const char __pyx_k_is_algorithm_ready[] = "is_algorithm_ready";
static const char __pyx_k_optimal_ask_spread[] = "optimal_ask_spread";
static const char __pyx_k_optimal_ask_to_mid[] = "optimal_ask_to_mid_%";
static const char __pyx_k_optimal_bid_spread[] = "optimal_bid_spread";
static const char __pyx_k_optimal_bid_to_mid[] = "optimal_bid_to_mid_%";
static const char __pyx_k_order_refresh_time[] = "order_refresh_time";
static const char __pyx_k_time_left_fraction[] = "time_left_fraction";
static const char __pyx_k_CreatedPairOfOrders[] = "CreatedPairOfOrders";
static const char __pyx_k_Maker_sell_order_of[] = ") Maker sell order of ";
static const char __pyx_k_Strategy_parameters[] = "  Strategy parameters:";
static const char __pyx_k_hb_app_notification[] = "hb_app_notification";
static const char __pyx_k_is_within_tolerance[] = "is_within_tolerance";
static const char __pyx_k_to_show_current_pct[] = "to_show_current_pct";
static const char __pyx_k_HangingOrdersTracker[] = "HangingOrdersTracker";
static const char __pyx_k_cancel_active_orders[] = "cancel_active_orders";
static const char __pyx_k_create_base_proposal[] = "create_base_proposal";
static const char __pyx_k_dump_debug_variables[] = "dump_debug_variables";
static const char __pyx_k_get_maker_order_type[] = "get_maker_order_type";
static const char __pyx_k_get_price_for_volume[] = "get_price_for_volume";
static const char __pyx_k_inventory_target_pct[] = "inventory_target_pct";
static const char __pyx_k_create_basic_proposal[] = "create_basic_proposal";
static const char __pyx_k_get_available_balance[] = "get_available_balance";
static const char __pyx_k_hummingbot_core_utils[] = "hummingbot.core.utils";
static const char __pyx_k_Calculating_volatility[] = "Calculating volatility... ";
static const char __pyx_k_MarketTradingPairTuple[] = "MarketTradingPairTuple";
static const char __pyx_k_No_active_maker_orders[] = "  No active maker orders.";
static const char __pyx_k_all_non_hanging_orders[] = "all_non_hanging_orders";
static const char __pyx_k_available_base_balance[] = "available_base_balance";
static const char __pyx_k_get_min_and_max_spread[] = "_get_min_and_max_spread";
static const char __pyx_k_hanging_orders_enabled[] = "hanging_orders_enabled";
static const char __pyx_k_hanging_orders_tracker[] = "hanging_orders_tracker";
static const char __pyx_k_recalculate_parameters[] = "recalculate_parameters";
static const char __pyx_k_status_report_interval[] = "status_report_interval";
static const char __pyx_k_volatility_buffer_size[] = "volatility_buffer_size";
static const char __pyx_k_volatility_sensibility[] = "volatility_sensibility";
static const char __pyx_k_OPTION_LOG_CREATE_ORDER[] = "OPTION_LOG_CREATE_ORDER";
static const char __pyx_k_apply_budget_constraint[] = "apply_budget_constraint";
static const char __pyx_k_available_quote_balance[] = "available_quote_balance";
static const char __pyx_k_execute_orders_proposal[] = "execute_orders_proposal";
static const char __pyx_k_inventory_risk_aversion[] = "inventory_risk_aversion";
static const char __pyx_k_is_sampling_buffer_full[] = "is_sampling_buffer_full";
static const char __pyx_k_order_book_depth_factor[] = "order_book_depth_factor";
static const char __pyx_k_OPTION_LOG_STATUS_REPORT[] = "OPTION_LOG_STATUS_REPORT";
static const char __pyx_k_apply_order_optimization[] = "apply_order_optimization";
static const char __pyx_k_ask_orders_at_Size_Price[] = " ask orders at (Size, Price): ";
static const char __pyx_k_bid_orders_at_Size_Price[] = " bid orders at (Size, Price): ";
static const char __pyx_k_candidate_hanging_orders[] = "candidate_hanging_orders";
static const char __pyx_k_collect_market_variables[] = "collect_market_variables";
static const char __pyx_k_market_status_data_frame[] = "market_status_data_frame";
static const char __pyx_k_seconds_to_start_trading[] = " seconds to start trading";
static const char __pyx_k_vol_to_spread_multiplier[] = "vol_to_spread_multiplier";
static const char __pyx_k_active_non_hanging_orders[] = "active_non_hanging_orders";
static const char __pyx_k_hanging_orders_cancel_pct[] = "hanging_orders_cancel_pct";
static const char __pyx_k_hummingbot_strategy_utils[] = "hummingbot.strategy.utils";
static const char __pyx_k_inventory_target_base_pct[] = "inventory_target_base_pct";
static const char __pyx_k_order_amount_shape_factor[] = "order_amount_shape_factor";
static const char __pyx_k_order_book_depth_factor_2[] = "    order_book_depth_factor(\316\272)= ";
static const char __pyx_k_InstantVolatilityIndicator[] = "InstantVolatilityIndicator";
static const char __pyx_k_RADAR_RELAY_TYPE_EXCHANGES[] = "RADAR_RELAY_TYPE_EXCHANGES";
static const char __pyx_k_calculate_target_inventory[] = "calculate_target_inventory";
static const char __pyx_k_has_been_completely_filled[] = ") has been completely filled.";
static const char __pyx_k_is_potential_hanging_order[] = "is_potential_hanging_order";
static const char __pyx_k_market_trading_pair_tuples[] = "market_trading_pair_tuples";
static const char __pyx_k_order_optimization_enabled[] = "order_optimization_enabled";
static const char __pyx_k_parameters_based_on_spread[] = "parameters_based_on_spread";
static const char __pyx_k_List_MarketTradingPairTuple[] = "List[MarketTradingPairTuple]";
static const char __pyx_k_apply_add_transaction_costs[] = "apply_add_transaction_costs";
static const char __pyx_k_apply_order_price_modifiers[] = "apply_order_price_modifiers";
static const char __pyx_k_get_logspaced_level_spreads[] = "_get_logspaced_level_spreads";
static const char __pyx_k_order_refresh_tolerance_pct[] = "order_refresh_tolerance_pct";
static const char __pyx_k_hummingbot_core_event_events[] = "hummingbot.core.event.events";
static const char __pyx_k_market_info_to_active_orders[] = "market_info_to_active_orders";
static const char __pyx_k_market_pair_to_active_orders[] = "market_pair_to_active_orders";
static const char __pyx_k_notify_hb_app_with_timestamp[] = "notify_hb_app_with_timestamp";
static const char __pyx_k_OPTION_LOG_MAKER_ORDER_FILLED[] = "OPTION_LOG_MAKER_ORDER_FILLED";
static const char __pyx_k_is_order_id_in_hanging_orders[] = "is_order_id_in_hanging_orders";
static const char __pyx_k_AvellanedaMarketMakingStrategy[] = "AvellanedaMarketMakingStrategy";
static const char __pyx_k_active_orders_df_locals_lambda[] = "active_orders_df.<locals>.<lambda>";
static const char __pyx_k_current_vol_to_calculation_vol[] = "current_vol_to_calculation_vol";
static const char __pyx_k_get_adjusted_available_balance[] = "get_adjusted_available_balance";
static const char __pyx_k_hummingbot_strategy_data_types[] = "hummingbot.strategy.data_types";
static const char __pyx_k_Market_connectors_are_not_ready[] = "Market connectors are not ready.";
static const char __pyx_k_Markets_are_not_ready_No_market[] = "Markets are not ready. No market making trades are permitted.";
static const char __pyx_k_add_transaction_costs_to_orders[] = "add_transaction_costs_to_orders";
static const char __pyx_k_current_created_pairs_of_orders[] = "current_created_pairs_of_orders";
static const char __pyx_k_hummingbot_client_config_global[] = "hummingbot.client.config.global_config_map";
static const char __pyx_k_hummingbot_core_data_type_limit[] = "hummingbot.core.data_type.limit_order";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_time_until_end_of_trading_cycle[] = "    time until end of trading cycle= ";
static const char __pyx_k_AvellanedaMarketMakingStrategy_2[] = "AvellanedaMarketMakingStrategy._get_min_and_max_spread";
static const char __pyx_k_AvellanedaMarketMakingStrategy_3[] = "AvellanedaMarketMakingStrategy._get_logspaced_level_spreads";
static const char __pyx_k_AvellanedaMarketMakingStrategy_4[] = "AvellanedaMarketMakingStrategy.__reduce_cython__";
static const char __pyx_k_AvellanedaMarketMakingStrategy_5[] = "AvellanedaMarketMakingStrategy.__setstate_cython__";
static const char __pyx_k_AvellanedaMarketMakingStrategy_a[] = "AvellanedaMarketMakingStrategy.all_markets_ready";
static const char __pyx_k_AvellanedaMarketMakingStrategy_c[] = "AvellanedaMarketMakingStrategy.c_start.<locals>.genexpr";
static const char __pyx_k_AvellanedaMarketMakingStrategy_d[] = "AvellanedaMarketMakingStrategy.dump_debug_variables";
static const char __pyx_k_AvellanedaMarketMakingStrategy_e[] = "AvellanedaMarketMakingStrategy.execute_orders_proposal";
static const char __pyx_k_AvellanedaMarketMakingStrategy_f[] = "AvellanedaMarketMakingStrategy.format_status";
static const char __pyx_k_AvellanedaMarketMakingStrategy_g[] = "AvellanedaMarketMakingStrategy.get_price";
static const char __pyx_k_AvellanedaMarketMakingStrategy_i[] = "AvellanedaMarketMakingStrategy.init_params";
static const char __pyx_k_AvellanedaMarketMakingStrategy_l[] = "AvellanedaMarketMakingStrategy.logger";
static const char __pyx_k_AvellanedaMarketMakingStrategy_m[] = "AvellanedaMarketMakingStrategy.market_status_data_frame";
static const char __pyx_k_AvellanedaMarketMakingStrategy_n[] = "AvellanedaMarketMakingStrategy.notify_hb_app";
static const char __pyx_k_AvellanedaMarketMakingStrategy_p[] = "AvellanedaMarketMakingStrategy.pure_mm_assets_df";
static const char __pyx_k_AvellanedaMarketMakingStrategy_r[] = "AvellanedaMarketMakingStrategy.recalculate_parameters";
static const char __pyx_k_AvellanedaMarketMakingStrategy_s[] = "AvellanedaMarketMakingStrategy.start";
static const char __pyx_k_AvellanedaMarketMakingStrategy_t[] = "AvellanedaMarketMakingStrategy.to_create_orders";
static const char __pyx_k_AvellanedaMarketMakingStrategy_v[] = "AvellanedaMarketMakingStrategy.volatility_diff_from_last_parameter_calculation";
static const char __pyx_k_Recycling_algorithm_time_left_an[] = "Recycling algorithm time left and parameters if needed.";
static const char __pyx_k_Tuple_List_Proposal_List_Proposa[] = "Tuple[List[Proposal], List[Proposal]]";
static const char __pyx_k_WARNING_Some_markets_are_not_con[] = "WARNING: Some markets are not connected or are down at the moment. Market making may be dangerous when markets or networks are unstable.";
static const char __pyx_k_add_current_pairs_of_proposal_or[] = "add_current_pairs_of_proposal_orders_executed_by_strategy";
static const char __pyx_k_adjusted_available_balance_for_o[] = "adjusted_available_balance_for_orders_budget_constrain";
static const char __pyx_k_apply_order_amount_eta_transform[] = "apply_order_amount_eta_transformation";
static const char __pyx_k_calculate_reserved_price_and_opt[] = "calculate_reserved_price_and_optimal_spread";
static const char __pyx_k_candidate_hanging_orders_from_pa[] = "candidate_hanging_orders_from_pairs";
static const char __pyx_k_create_proposal_based_on_order_l[] = "create_proposal_based_on_order_levels";
static const char __pyx_k_create_proposal_based_on_order_o[] = "create_proposal_based_on_order_override";
static const char __pyx_k_hummingbot_connector_exchange_ba[] = "hummingbot.connector.exchange_base";
static const char __pyx_k_hummingbot_core_network_iterator[] = "hummingbot.core.network_iterator";
static const char __pyx_k_hummingbot_strategy___utils___tr[] = "hummingbot.strategy.__utils__.trailing_indicators.instant_volatility";
static const char __pyx_k_hummingbot_strategy_avellaneda_m[] = "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making";
static const char __pyx_k_hummingbot_strategy_hanging_orde[] = "hummingbot.strategy.hanging_orders_tracker";
static const char __pyx_k_hummingbot_strategy_market_tradi[] = "hummingbot.strategy.market_trading_pair_tuple";
static const char __pyx_k_hummingbot_strategy_strategy_bas[] = "hummingbot.strategy.strategy_base";
static const char __pyx_k_is_order_id_in_completed_hanging[] = "is_order_id_in_completed_hanging_orders";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_self__events_cannot_be_converted[] = "self._events cannot be converted to a Python object for pickling";
static const char __pyx_k_should_wait_order_cancel_confirm[] = "should_wait_order_cancel_confirmation";
static const char __pyx_k_update_strategy_orders_with_equi[] = "update_strategy_orders_with_equivalent_orders";
static const char __pyx_k_volatility_diff_from_last_parame[] = "volatility_diff_from_last_parameter_calculation";
static const char __pyx_k_AvellanedaMarketMakingStrategy_a_2[] = "AvellanedaMarketMakingStrategy.active_orders_df";
static const char __pyx_k_AvellanedaMarketMakingStrategy_a_3[] = "AvellanedaMarketMakingStrategy.apply_order_price_modifiers";
static const char __pyx_k_AvellanedaMarketMakingStrategy_a_4[] = "AvellanedaMarketMakingStrategy.apply_budget_constraint";
static const char __pyx_k_AvellanedaMarketMakingStrategy_a_5[] = "AvellanedaMarketMakingStrategy.adjusted_available_balance_for_orders_budget_constrain";
static const char __pyx_k_AvellanedaMarketMakingStrategy_a_6[] = "AvellanedaMarketMakingStrategy.apply_order_optimization";
static const char __pyx_k_AvellanedaMarketMakingStrategy_a_7[] = "AvellanedaMarketMakingStrategy.apply_order_amount_eta_transformation";
static const char __pyx_k_AvellanedaMarketMakingStrategy_a_8[] = "AvellanedaMarketMakingStrategy.apply_add_transaction_costs";
static const char __pyx_k_AvellanedaMarketMakingStrategy_c_2[] = "AvellanedaMarketMakingStrategy.c_apply_order_optimization.<locals>.<lambda>";
static const char __pyx_k_AvellanedaMarketMakingStrategy_c_3[] = "AvellanedaMarketMakingStrategy.c_execute_orders_proposal.<locals>.genexpr";
static const char __pyx_k_AvellanedaMarketMakingStrategy_c_4[] = "AvellanedaMarketMakingStrategy.cancel_order";
static const char __pyx_k_AvellanedaMarketMakingStrategy_c_5[] = "AvellanedaMarketMakingStrategy.collect_market_variables";
static const char __pyx_k_AvellanedaMarketMakingStrategy_c_6[] = "AvellanedaMarketMakingStrategy.calculate_reserved_price_and_optimal_spread";
static const char __pyx_k_AvellanedaMarketMakingStrategy_c_7[] = "AvellanedaMarketMakingStrategy.calculate_target_inventory";
static const char __pyx_k_AvellanedaMarketMakingStrategy_c_8[] = "AvellanedaMarketMakingStrategy.create_proposal_based_on_order_override";
static const char __pyx_k_AvellanedaMarketMakingStrategy_c_9[] = "AvellanedaMarketMakingStrategy.create_proposal_based_on_order_levels";
static const char __pyx_k_AvellanedaMarketMakingStrategy_g_2[] = "AvellanedaMarketMakingStrategy.get_last_price";
static const char __pyx_k_AvellanedaMarketMakingStrategy_g_3[] = "AvellanedaMarketMakingStrategy.get_mid_price";
static const char __pyx_k_AvellanedaMarketMakingStrategy_g_4[] = "AvellanedaMarketMakingStrategy.get_spread";
static const char __pyx_k_AvellanedaMarketMakingStrategy_g_5[] = "AvellanedaMarketMakingStrategy.get_volatility";
static const char __pyx_k_AvellanedaMarketMakingStrategy_g_6[] = "AvellanedaMarketMakingStrategy.get_adjusted_available_balance";
static const char __pyx_k_AvellanedaMarketMakingStrategy_i_2[] = "AvellanedaMarketMakingStrategy.is_algorithm_ready";
static const char __pyx_k_AvellanedaMarketMakingStrategy_i_3[] = "AvellanedaMarketMakingStrategy.is_within_tolerance";
static const char __pyx_k_AvellanedaMarketMakingStrategy_s_2[] = "AvellanedaMarketMakingStrategy.set_timers";
static const char __pyx_k_hummingbot_strategy_avellaneda_m_2[] = "hummingbot\\strategy\\avellaneda_market_making\\avellaneda_market_making.pyx";
static const char __pyx_k_AvellanedaMarketMakingStrategy_c_10[] = "AvellanedaMarketMakingStrategy.create_basic_proposal";
static const char __pyx_k_AvellanedaMarketMakingStrategy_c_11[] = "AvellanedaMarketMakingStrategy.create_base_proposal";
static const char __pyx_k_AvellanedaMarketMakingStrategy_c_12[] = "AvellanedaMarketMakingStrategy.cancel_active_orders";
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_kp_u_0_005;
static PyObject *__pyx_kp_u_0_1;
static PyObject *__pyx_kp_u_0_15;
static PyObject *__pyx_kp_u_0_2;
static PyObject *__pyx_kp_u_0_5;
static PyObject *__pyx_kp_u_0x_active_cancels;
static PyObject *__pyx_kp_u_1;
static PyObject *__pyx_kp_u_10;
static PyObject *__pyx_kp_u_100;
static PyObject *__pyx_kp_u_1_2;
static PyObject *__pyx_kp_u_1_3;
static PyObject *__pyx_kp_u_1e100;
static PyObject *__pyx_kp_u_1e5;
static PyObject *__pyx_kp_u_2;
static PyObject *__pyx_kp_u_2_2;
static PyObject *__pyx_kp_u_3f;
static PyObject *__pyx_kp_u_4f;
static PyObject *__pyx_kp_u_5E;
static PyObject *__pyx_n_u_Age;
static PyObject *__pyx_kp_u_Amount_Adj;
static PyObject *__pyx_kp_u_Amount_Orig;
static PyObject *__pyx_kp_u_Assets;
static PyObject *__pyx_kp_u_Available_Balance;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_2;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_3;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_4;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_5;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_a;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_a_2;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_a_3;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_a_4;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_a_5;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_a_6;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_a_7;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_a_8;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_10;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_11;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_12;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_2;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_3;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_4;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_5;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_6;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_7;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_8;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_9;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_d;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_e;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_f;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_g;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_g_2;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_g_3;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_g_4;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_g_5;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_g_6;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_i;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_i_2;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_i_3;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_l;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_m;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_n;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_p;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_r;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_s;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_s_2;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_t;
static PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_v;
static PyObject *__pyx_n_s_BUY;
static PyObject *__pyx_kp_u_Best_Ask;
static PyObject *__pyx_kp_u_Best_Bid;
static PyObject *__pyx_n_s_CONNECTED;
static PyObject *__pyx_kp_u_Calculating_volatility;
static PyObject *__pyx_n_s_Clock;
static PyObject *__pyx_n_s_CreatedPairOfOrders;
static PyObject *__pyx_kp_u_Creating;
static PyObject *__pyx_kp_u_Current;
static PyObject *__pyx_kp_u_Current_Value;
static PyObject *__pyx_n_s_DataFrame;
static PyObject *__pyx_n_s_Decimal;
static PyObject *__pyx_n_s_Dict;
static PyObject *__pyx_kp_s_Dict_str_List_str;
static PyObject *__pyx_n_u_Exchange;
static PyObject *__pyx_n_s_ExchangeBase;
static PyObject *__pyx_n_s_FileNotFoundError;
static PyObject *__pyx_kp_u_H_M_S;
static PyObject *__pyx_n_s_HangingOrdersTracker;
static PyObject *__pyx_n_s_INFO;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_n_u_Inf;
static PyObject *__pyx_n_s_InstantVolatilityIndicator;
static PyObject *__pyx_n_s_LIMIT;
static PyObject *__pyx_n_u_Level;
static PyObject *__pyx_n_s_LimitOrder;
static PyObject *__pyx_n_s_List;
static PyObject *__pyx_kp_s_List_Decimal;
static PyObject *__pyx_kp_s_List_LimitOrder;
static PyObject *__pyx_kp_s_List_MarketTradingPairTuple;
static PyObject *__pyx_kp_u_Maker;
static PyObject *__pyx_kp_u_Maker_2;
static PyObject *__pyx_kp_u_Maker_buy_order_of;
static PyObject *__pyx_kp_u_Maker_sell_order_of;
static PyObject *__pyx_n_u_Market;
static PyObject *__pyx_n_s_MarketTradingPairTuple;
static PyObject *__pyx_kp_u_Market_connectors_are_not_ready;
static PyObject *__pyx_kp_u_Markets;
static PyObject *__pyx_kp_u_Markets_are_not_ready_No_market;
static PyObject *__pyx_n_u_MidPrice;
static PyObject *__pyx_n_s_NaN;
static PyObject *__pyx_n_s_NetworkStatus;
static PyObject *__pyx_kp_u_No_active_maker_orders;
static PyObject *__pyx_kp_u_None;
static PyObject *__pyx_n_s_OPTION_LOG_ALL;
static PyObject *__pyx_n_s_OPTION_LOG_CREATE_ORDER;
static PyObject *__pyx_n_s_OPTION_LOG_MAKER_ORDER_FILLED;
static PyObject *__pyx_n_s_OPTION_LOG_STATUS_REPORT;
static PyObject *__pyx_n_s_OrderType;
static PyObject *__pyx_kp_u_Orders;
static PyObject *__pyx_n_u_Price;
static PyObject *__pyx_n_s_PriceSize;
static PyObject *__pyx_n_s_Proposal;
static PyObject *__pyx_n_s_RADAR_RELAY_TYPE_EXCHANGES;
static PyObject *__pyx_kp_u_Recycling_algorithm_time_left_an;
static PyObject *__pyx_kp_u_Reserved_Price;
static PyObject *__pyx_n_s_SELL;
static PyObject *__pyx_n_u_Spread;
static PyObject *__pyx_n_s_StrategyBase;
static PyObject *__pyx_kp_u_Strategy_parameters;
static PyObject *__pyx_n_s_Timestamp;
static PyObject *__pyx_kp_u_Total_Balance;
static PyObject *__pyx_n_s_TradeType;
static PyObject *__pyx_n_s_Tuple;
static PyObject *__pyx_kp_s_Tuple_List_Proposal_List_Proposa;
static PyObject *__pyx_n_u_Type;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_u_WARNINGS;
static PyObject *__pyx_kp_u_WARNING_Some_markets_are_not_con;
static PyObject *__pyx_n_s__133;
static PyObject *__pyx_kp_u__15;
static PyObject *__pyx_kp_u__16;
static PyObject *__pyx_kp_u__17;
static PyObject *__pyx_kp_u__19;
static PyObject *__pyx_kp_u__20;
static PyObject *__pyx_kp_u__21;
static PyObject *__pyx_kp_u__22;
static PyObject *__pyx_kp_u__23;
static PyObject *__pyx_kp_u__24;
static PyObject *__pyx_kp_u__25;
static PyObject *__pyx_kp_u__26;
static PyObject *__pyx_kp_u__27;
static PyObject *__pyx_kp_u__28;
static PyObject *__pyx_n_s__32;
static PyObject *__pyx_n_s__88;
static PyObject *__pyx_n_u_a;
static PyObject *__pyx_n_s_active_markets;
static PyObject *__pyx_n_s_active_non_hanging_orders;
static PyObject *__pyx_n_s_active_orders;
static PyObject *__pyx_n_s_active_orders_df;
static PyObject *__pyx_n_s_active_orders_df_locals_lambda;
static PyObject *__pyx_n_s_add_current_pairs_of_proposal_or;
static PyObject *__pyx_n_s_add_order;
static PyObject *__pyx_n_s_add_sample;
static PyObject *__pyx_n_s_add_transaction_costs_to_orders;
static PyObject *__pyx_n_s_adjusted_available_balance_for_o;
static PyObject *__pyx_n_s_age;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_all_markets_ready;
static PyObject *__pyx_n_s_all_non_hanging_orders;
static PyObject *__pyx_n_s_all_orders;
static PyObject *__pyx_n_s_amount;
static PyObject *__pyx_n_s_amount_orig;
static PyObject *__pyx_n_s_apply;
static PyObject *__pyx_n_s_apply_add_transaction_costs;
static PyObject *__pyx_n_s_apply_budget_constraint;
static PyObject *__pyx_n_s_apply_order_amount_eta_transform;
static PyObject *__pyx_n_s_apply_order_optimization;
static PyObject *__pyx_n_s_apply_order_price_modifiers;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_kp_u_ask;
static PyObject *__pyx_n_s_ask_level_spreads;
static PyObject *__pyx_kp_u_ask_orders_at_Size_Price;
static PyObject *__pyx_n_s_ask_price;
static PyObject *__pyx_n_s_assets_df;
static PyObject *__pyx_n_s_asyncio_coroutines;
static PyObject *__pyx_n_s_available_base_balance;
static PyObject *__pyx_n_s_available_quote_balance;
static PyObject *__pyx_n_s_balance_warning;
static PyObject *__pyx_n_u_bamboo_relay;
static PyObject *__pyx_n_s_base;
static PyObject *__pyx_n_s_base_asset;
static PyObject *__pyx_n_s_base_balance;
static PyObject *__pyx_n_s_base_currency;
static PyObject *__pyx_n_s_base_ratio;
static PyObject *__pyx_n_s_base_value;
static PyObject *__pyx_n_s_best_ask;
static PyObject *__pyx_n_s_best_bid;
static PyObject *__pyx_kp_u_bid;
static PyObject *__pyx_n_s_bid_level_spreads;
static PyObject *__pyx_kp_u_bid_orders_at_Size_Price;
static PyObject *__pyx_n_s_bid_price;
static PyObject *__pyx_n_s_bool;
static PyObject *__pyx_n_u_buy;
static PyObject *__pyx_n_s_buys;
static PyObject *__pyx_n_s_calculate_reserved_price_and_opt;
static PyObject *__pyx_n_s_calculate_target_inventory;
static PyObject *__pyx_n_s_cancel_active_orders;
static PyObject *__pyx_n_s_cancel_order;
static PyObject *__pyx_n_s_candidate_hanging_orders;
static PyObject *__pyx_n_s_candidate_hanging_orders_from_pa;
static PyObject *__pyx_n_s_ceil;
static PyObject *__pyx_n_s_class_getitem;
static PyObject *__pyx_n_s_client_order_id;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_clock;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_closing_time;
static PyObject *__pyx_n_s_cls;
static PyObject *__pyx_n_s_collect_market_variables;
static PyObject *__pyx_n_s_columns;
static PyObject *__pyx_n_s_create_base_proposal;
static PyObject *__pyx_n_s_create_basic_proposal;
static PyObject *__pyx_n_s_create_proposal_based_on_order_l;
static PyObject *__pyx_n_s_create_proposal_based_on_order_o;
static PyObject *__pyx_n_s_current_created_pairs_of_orders;
static PyObject *__pyx_n_u_current_inv;
static PyObject *__pyx_n_s_current_prices;
static PyObject *__pyx_n_s_current_value;
static PyObject *__pyx_n_s_current_vol;
static PyObject *__pyx_n_u_current_vol_to_calculation_vol;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_datetime;
static PyObject *__pyx_n_s_debug_csv_path;
static PyObject *__pyx_n_s_decimal;
static PyObject *__pyx_n_s_df;
static PyObject *__pyx_n_s_df_header;
static PyObject *__pyx_n_s_df_lines;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_kp_u_disable;
static PyObject *__pyx_n_s_display_name;
static PyObject *__pyx_n_s_dump_debug_variables;
static PyObject *__pyx_n_s_e;
static PyObject *__pyx_kp_u_enable;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_u_eta;
static PyObject *__pyx_n_s_execute_orders_proposal;
static PyObject *__pyx_n_s_exists;
static PyObject *__pyx_n_s_exp;
static PyObject *__pyx_kp_u_filled;
static PyObject *__pyx_n_s_filled_order_delay;
static PyObject *__pyx_n_s_first_col_length;
static PyObject *__pyx_n_s_float;
static PyObject *__pyx_n_s_floor;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_n_s_format_status;
static PyObject *__pyx_n_s_formatters;
static PyObject *__pyx_n_u_gamma;
static PyObject *__pyx_kp_u_gc;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_n_s_get_adjusted_available_balance;
static PyObject *__pyx_n_s_get_available_balance;
static PyObject *__pyx_n_s_get_balance;
static PyObject *__pyx_n_s_get_last_price;
static PyObject *__pyx_n_s_get_limit_orders;
static PyObject *__pyx_n_s_get_logspaced_level_spreads;
static PyObject *__pyx_n_s_get_maker_order_type;
static PyObject *__pyx_n_s_get_mid_price;
static PyObject *__pyx_n_s_get_min_and_max_spread;
static PyObject *__pyx_n_s_get_price;
static PyObject *__pyx_n_s_get_price_for_volume;
static PyObject *__pyx_n_s_get_spread;
static PyObject *__pyx_n_s_get_volatility;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_n_s_global_config_map;
static PyObject *__pyx_n_u_hang;
static PyObject *__pyx_n_s_hanging_orders_cancel_pct;
static PyObject *__pyx_n_s_hanging_orders_enabled;
static PyObject *__pyx_n_s_hanging_orders_tracker;
static PyObject *__pyx_kp_u_has_been_completely_filled;
static PyObject *__pyx_n_s_hb_app_notification;
static PyObject *__pyx_n_s_header;
static PyObject *__pyx_n_s_hummingbot_client_config_global;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_ba;
static PyObject *__pyx_n_s_hummingbot_core_data_type_limit;
static PyObject *__pyx_n_s_hummingbot_core_event_events;
static PyObject *__pyx_n_s_hummingbot_core_network_iterator;
static PyObject *__pyx_n_s_hummingbot_core_utils;
static PyObject *__pyx_n_s_hummingbot_strategy___utils___tr;
static PyObject *__pyx_n_s_hummingbot_strategy_avellaneda_m;
static PyObject *__pyx_kp_s_hummingbot_strategy_avellaneda_m_2;
static PyObject *__pyx_n_s_hummingbot_strategy_data_types;
static PyObject *__pyx_n_s_hummingbot_strategy_hanging_orde;
static PyObject *__pyx_n_s_hummingbot_strategy_market_tradi;
static PyObject *__pyx_n_s_hummingbot_strategy_strategy_bas;
static PyObject *__pyx_n_s_hummingbot_strategy_utils;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_in_flight_cancels;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_info;
static PyObject *__pyx_n_s_init_params;
static PyObject *__pyx_n_s_initializing;
static PyObject *__pyx_n_s_int;
static PyObject *__pyx_n_s_inventory_risk_aversion;
static PyObject *__pyx_n_s_inventory_target_base_pct;
static PyObject *__pyx_n_u_inventory_target_pct;
static PyObject *__pyx_n_s_is_algorithm_ready;
static PyObject *__pyx_n_s_is_buy;
static PyObject *__pyx_n_s_is_coroutine;
static PyObject *__pyx_n_s_is_debug;
static PyObject *__pyx_kp_u_is_filled;
static PyObject *__pyx_n_s_is_hanging_order;
static PyObject *__pyx_n_s_is_order_id_in_completed_hanging;
static PyObject *__pyx_n_s_is_order_id_in_hanging_orders;
static PyObject *__pyx_n_s_is_potential_hanging_order;
static PyObject *__pyx_n_s_is_sampling_buffer_full;
static PyObject *__pyx_n_s_is_within_tolerance;
static PyObject *__pyx_kp_u_isenabled;
static PyObject *__pyx_n_s_isnan;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_u_kappa;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_len;
static PyObject *__pyx_n_s_level;
static PyObject *__pyx_n_s_limit_orders;
static PyObject *__pyx_n_s_line;
static PyObject *__pyx_n_s_lines;
static PyObject *__pyx_n_s_ln;
static PyObject *__pyx_n_s_log;
static PyObject *__pyx_n_s_log_with_clock;
static PyObject *__pyx_n_s_logger;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_logging_options;
static PyObject *__pyx_n_s_logspace;
static PyObject *__pyx_n_s_lvl_buy;
static PyObject *__pyx_n_s_lvl_sell;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_map_df_to_str;
static PyObject *__pyx_n_s_market;
static PyObject *__pyx_n_s_market_books;
static PyObject *__pyx_n_s_market_info;
static PyObject *__pyx_n_s_market_info_to_active_orders;
static PyObject *__pyx_n_s_market_pair_to_active_orders;
static PyObject *__pyx_n_s_market_status_data_frame;
static PyObject *__pyx_n_s_market_trading_pair_tuples;
static PyObject *__pyx_n_s_markets_columns;
static PyObject *__pyx_n_s_markets_data;
static PyObject *__pyx_n_s_markets_df;
static PyObject *__pyx_n_s_math;
static PyObject *__pyx_n_s_max;
static PyObject *__pyx_n_s_max_order_age;
static PyObject *__pyx_n_s_max_spread;
static PyObject *__pyx_n_u_max_spread;
static PyObject *__pyx_n_s_mid_price;
static PyObject *__pyx_n_u_mid_price;
static PyObject *__pyx_kp_u_mid_price_std_dev;
static PyObject *__pyx_n_s_min_spread;
static PyObject *__pyx_n_u_min_spread;
static PyObject *__pyx_n_s_mode;
static PyObject *__pyx_n_s_msg;
static PyObject *__pyx_kp_u_n_a;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_nan;
static PyObject *__pyx_n_u_nan;
static PyObject *__pyx_n_s_network_status;
static PyObject *__pyx_n_s_network_warning;
static PyObject *__pyx_n_s_new_ask;
static PyObject *__pyx_n_s_new_bid;
static PyObject *__pyx_n_s_no_sells;
static PyObject *__pyx_n_s_non_hanging;
static PyObject *__pyx_n_s_normalize;
static PyObject *__pyx_n_s_notify_hb_app;
static PyObject *__pyx_n_s_notify_hb_app_with_timestamp;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_num;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_o;
static PyObject *__pyx_n_u_optimal_ask;
static PyObject *__pyx_n_s_optimal_ask_spread;
static PyObject *__pyx_kp_u_optimal_ask_to_mid;
static PyObject *__pyx_n_u_optimal_bid;
static PyObject *__pyx_n_s_optimal_bid_spread;
static PyObject *__pyx_kp_u_optimal_bid_to_mid;
static PyObject *__pyx_n_u_optimal_spread;
static PyObject *__pyx_kp_u_order;
static PyObject *__pyx_n_s_order_2;
static PyObject *__pyx_n_s_order_age;
static PyObject *__pyx_n_s_order_amount;
static PyObject *__pyx_n_s_order_amount_shape_factor;
static PyObject *__pyx_n_s_order_book_depth_factor;
static PyObject *__pyx_kp_u_order_book_depth_factor_2;
static PyObject *__pyx_n_s_order_id;
static PyObject *__pyx_n_s_order_levels;
static PyObject *__pyx_n_s_order_optimization_enabled;
static PyObject *__pyx_n_s_order_override;
static PyObject *__pyx_n_s_order_refresh_time;
static PyObject *__pyx_n_s_order_refresh_tolerance_pct;
static PyObject *__pyx_n_s_orders;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_pandas;
static PyObject *__pyx_n_s_parameters_based_on_spread;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_n_s_pd;
static PyObject *__pyx_kp_s_pd_DataFrame;
static PyObject *__pyx_n_s_percent;
static PyObject *__pyx_n_s_pmm_logger;
static PyObject *__pyx_n_s_price;
static PyObject *__pyx_n_s_process_tick;
static PyObject *__pyx_n_s_proposal;
static PyObject *__pyx_n_s_proposal_prices;
static PyObject *__pyx_n_s_pure_mm_assets_df;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_kp_u_q;
static PyObject *__pyx_n_s_quantity;
static PyObject *__pyx_n_s_quote_asset;
static PyObject *__pyx_n_s_quote_balance;
static PyObject *__pyx_n_s_quote_currency;
static PyObject *__pyx_n_s_quote_ratio;
static PyObject *__pyx_n_u_radar_relay;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_ready;
static PyObject *__pyx_n_s_recalculate_parameters;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_ref_price;
static PyObject *__pyx_n_s_reference_price;
static PyObject *__pyx_n_s_regex;
static PyObject *__pyx_n_s_register_events;
static PyObject *__pyx_n_s_replace;
static PyObject *__pyx_n_u_reserved_price;
static PyObject *__pyx_n_s_result_price;
static PyObject *__pyx_n_s_return;
static PyObject *__pyx_n_s_reverse;
static PyObject *__pyx_n_s_risk_factor;
static PyObject *__pyx_kp_u_risk_factor_2;
static PyObject *__pyx_n_s_round;
static PyObject *__pyx_n_u_s;
static PyObject *__pyx_n_s_s_decimal_neg_one;
static PyObject *__pyx_n_s_s_decimal_one;
static PyObject *__pyx_n_s_s_decimal_zero;
static PyObject *__pyx_n_s_seconds;
static PyObject *__pyx_kp_u_seconds_to_start_trading;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_kp_s_self__events_cannot_be_converted;
static PyObject *__pyx_n_u_sell;
static PyObject *__pyx_n_s_sell_order;
static PyObject *__pyx_n_s_sells;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_set_timers;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_should_wait_order_cancel_confirm;
static PyObject *__pyx_n_s_size;
static PyObject *__pyx_n_s_sort;
static PyObject *__pyx_n_s_sorted;
static PyObject *__pyx_n_s_spec;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_spread;
static PyObject *__pyx_n_u_spread;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_status_report_interval;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_n_s_strftime;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_u_target_inv;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_u_time_left_fraction;
static PyObject *__pyx_kp_u_time_until_end_of_trading_cycle;
static PyObject *__pyx_n_s_timedelta;
static PyObject *__pyx_n_s_timestamp;
static PyObject *__pyx_n_s_to_create_orders;
static PyObject *__pyx_n_s_to_csv;
static PyObject *__pyx_n_s_to_show_current_pct;
static PyObject *__pyx_n_s_to_string;
static PyObject *__pyx_n_s_total_in_quote;
static PyObject *__pyx_n_s_trade_type;
static PyObject *__pyx_n_s_trading_pair;
static PyObject *__pyx_n_s_typing;
static PyObject *__pyx_n_s_unit;
static PyObject *__pyx_n_s_unlink;
static PyObject *__pyx_n_s_unregister_events;
static PyObject *__pyx_n_s_update_strategy_orders_with_equi;
static PyObject *__pyx_n_s_upper;
static PyObject *__pyx_n_s_use_coordinator;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_kp_u_vol;
static PyObject *__pyx_n_s_vol_2;
static PyObject *__pyx_n_s_vol_to_spread_multiplier;
static PyObject *__pyx_n_u_vol_to_spread_multiplier;
static PyObject *__pyx_kp_u_volatility;
static PyObject *__pyx_n_s_volatility_buffer_size;
static PyObject *__pyx_n_s_volatility_diff_from_last_parame;
static PyObject *__pyx_n_s_volatility_pct;
static PyObject *__pyx_n_s_volatility_sensibility;
static PyObject *__pyx_n_s_warning;
static PyObject *__pyx_n_s_warning_lines;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_zip;
#endif
/* #### Code section: decls ### */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_logger(CYTHON_UNUSED PyTypeObject *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_2init_params(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_info, PyObject *__pyx_v_order_amount, double __pyx_v_order_refresh_time, double __pyx_v_max_order_age, PyObject *__pyx_v_order_refresh_tolerance_pct, PyObject *__pyx_v_order_optimization_enabled, double __pyx_v_filled_order_delay, PyObject *__pyx_v_order_levels, PyObject *__pyx_v_order_override, PyObject *__pyx_v_hanging_orders_enabled, PyObject *__pyx_v_hanging_orders_cancel_pct, PyObject *__pyx_v_inventory_target_base_pct, PyObject *__pyx_v_add_transaction_costs_to_orders, PyObject *__pyx_v_logging_options, double __pyx_v_status_report_interval, PyObject *__pyx_v_hb_app_notification, PyObject *__pyx_v_parameters_based_on_spread, PyObject *__pyx_v_min_spread, PyObject *__pyx_v_max_spread, PyObject *__pyx_v_vol_to_spread_multiplier, PyObject *__pyx_v_volatility_sensibility, PyObject *__pyx_v_inventory_risk_aversion, PyObject *__pyx_v_order_book_depth_factor, PyObject *__pyx_v_risk_factor, PyObject *__pyx_v_order_amount_shape_factor, PyObject *__pyx_v_closing_time, PyObject *__pyx_v_debug_csv_path, PyObject *__pyx_v_volatility_buffer_size, PyObject *__pyx_v_should_wait_order_cancel_confirmation, PyObject *__pyx_v_is_debug); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_4all_markets_ready(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_22volatility_sensibility___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_23inventory_risk_aversion___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_32latest_parameter_calculation_vol___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_32latest_parameter_calculation_vol_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7avg_vol___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7avg_vol_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_indicator); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11market_info___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_27order_refresh_tolerance_pct___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_27order_refresh_tolerance_pct_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_amount___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_amount_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25inventory_target_base_pct___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25inventory_target_base_pct_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26order_optimization_enabled___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26order_optimization_enabled_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18order_refresh_time___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18order_refresh_time_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18filled_order_delay___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18filled_order_delay_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, double __pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_24vol_to_spread_multiplier___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_24vol_to_spread_multiplier_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10min_spread___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10min_spread_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10max_spread___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10max_spread_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14order_override___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14order_override_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_levels___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_levels_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13max_order_age___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13max_order_age_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_31add_transaction_costs_to_orders___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_31add_transaction_costs_to_orders_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10base_asset___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11quote_asset___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12trading_pair___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5gamma___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5gamma_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5kappa___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5kappa_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_3eta___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_3eta_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14reserved_price___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14reserved_price_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14optimal_spread___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_ask___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_ask_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_bid___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_bid_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_19q_adjustment_factor___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_19q_adjustment_factor_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_9time_left___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12closing_time___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_6get_price(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_8get_last_price(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10get_mid_price(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_28market_info_to_active_orders___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13active_orders___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25active_non_hanging_orders___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11active_buys___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12active_sells___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_15logging_options___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_15logging_options_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, int64_t __pyx_v_logging_options); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_22hanging_orders_tracker___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12pure_mm_assets_df(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_to_show_current_pct); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14active_orders_df(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_16market_status_data_frame(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_market_trading_pair_tuples); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18format_status(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_20execute_orders_proposal(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_22cancel_order(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_id); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7c_start_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_24start(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, struct __pyx_obj_10hummingbot_4core_5clock_Clock *__pyx_v_clock, double __pyx_v_timestamp); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26collect_market_variables(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, double __pyx_v_timestamp); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_28volatility_diff_from_last_parameter_calculation(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_current_vol); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_30get_spread(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_32get_volatility(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_34calculate_reserved_price_and_optimal_spread(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_36calculate_target_inventory(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_38_get_min_and_max_spread(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_40recalculate_parameters(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_42is_algorithm_ready(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_44_get_logspaced_level_spreads(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_46create_proposal_based_on_order_override(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_48create_proposal_based_on_order_levels(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_50create_basic_proposal(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_52create_base_proposal(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_54get_adjusted_available_balance(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_orders); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_56apply_order_price_modifiers(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_58apply_budget_constraint(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_60adjusted_available_balance_for_orders_budget_constrain(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_62apply_budget_constraint(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_p); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_p); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_64apply_order_optimization(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_66apply_order_amount_eta_transformation(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_68apply_add_transaction_costs(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_70is_within_tolerance(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_current_prices, PyObject *__pyx_v_proposal_prices); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_72cancel_active_orders(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_74to_create_orders(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25c_execute_orders_proposal_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25c_execute_orders_proposal_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_76execute_orders_proposal(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_78set_timers(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_80notify_hb_app(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_msg); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_82dump_debug_variables(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_84__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_86__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyUnicode_Type_upper = {0, 0, 0, 0, 0};
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_float_1e6;
static PyObject *__pyx_float_30_0;
static PyObject *__pyx_float_60_0;
static PyObject *__pyx_float_100_0;
static PyObject *__pyx_float_900_0;
static PyObject *__pyx_float_1800_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_int_8;
static PyObject *__pyx_int_16;
static PyObject *__pyx_int_30;
static PyObject *__pyx_int_32;
static PyObject *__pyx_int_100;
static PyObject *__pyx_int_1000;
static PyObject *__pyx_int_9223372036854775807;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_int_neg_16;
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_k_;
static PyObject *__pyx_k__2;
static PyObject *__pyx_k__3;
static PyObject *__pyx_k__4;
static PyObject *__pyx_k__5;
static PyObject *__pyx_k__6;
static PyObject *__pyx_k__7;
static PyObject *__pyx_k__8;
static PyObject *__pyx_k__9;
static PyObject *__pyx_k__10;
static PyObject *__pyx_k__11;
static PyObject *__pyx_k__12;
static PyObject *__pyx_k__13;
static PyObject *__pyx_k__14;
static PyObject *__pyx_slice__18;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__89;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__93;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__97;
static PyObject *__pyx_tuple__99;
static PyObject *__pyx_tuple__101;
static PyObject *__pyx_tuple__103;
static PyObject *__pyx_tuple__105;
static PyObject *__pyx_tuple__107;
static PyObject *__pyx_tuple__109;
static PyObject *__pyx_tuple__111;
static PyObject *__pyx_tuple__113;
static PyObject *__pyx_tuple__115;
static PyObject *__pyx_tuple__117;
static PyObject *__pyx_tuple__119;
static PyObject *__pyx_tuple__121;
static PyObject *__pyx_tuple__123;
static PyObject *__pyx_tuple__125;
static PyObject *__pyx_tuple__127;
static PyObject *__pyx_tuple__129;
static PyObject *__pyx_tuple__131;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__51;
static PyObject *__pyx_codeobj__53;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__57;
static PyObject *__pyx_codeobj__59;
static PyObject *__pyx_codeobj__61;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__65;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__90;
static PyObject *__pyx_codeobj__92;
static PyObject *__pyx_codeobj__94;
static PyObject *__pyx_codeobj__96;
static PyObject *__pyx_codeobj__98;
static PyObject *__pyx_codeobj__100;
static PyObject *__pyx_codeobj__102;
static PyObject *__pyx_codeobj__104;
static PyObject *__pyx_codeobj__106;
static PyObject *__pyx_codeobj__108;
static PyObject *__pyx_codeobj__110;
static PyObject *__pyx_codeobj__112;
static PyObject *__pyx_codeobj__114;
static PyObject *__pyx_codeobj__116;
static PyObject *__pyx_codeobj__118;
static PyObject *__pyx_codeobj__120;
static PyObject *__pyx_codeobj__122;
static PyObject *__pyx_codeobj__124;
static PyObject *__pyx_codeobj__126;
static PyObject *__pyx_codeobj__128;
static PyObject *__pyx_codeobj__130;
static PyObject *__pyx_codeobj__132;
#endif
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5clock_Clock;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_6pubsub_PubSub;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult;
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  PyTypeObject *__pyx_ptype_5numpy_dtype;
  PyTypeObject *__pyx_ptype_5numpy_flatiter;
  PyTypeObject *__pyx_ptype_5numpy_broadcast;
  PyTypeObject *__pyx_ptype_5numpy_ndarray;
  PyTypeObject *__pyx_ptype_5numpy_generic;
  PyTypeObject *__pyx_ptype_5numpy_number;
  PyTypeObject *__pyx_ptype_5numpy_integer;
  PyTypeObject *__pyx_ptype_5numpy_signedinteger;
  PyTypeObject *__pyx_ptype_5numpy_unsignedinteger;
  PyTypeObject *__pyx_ptype_5numpy_inexact;
  PyTypeObject *__pyx_ptype_5numpy_floating;
  PyTypeObject *__pyx_ptype_5numpy_complexfloating;
  PyTypeObject *__pyx_ptype_5numpy_flexible;
  PyTypeObject *__pyx_ptype_5numpy_character;
  PyTypeObject *__pyx_ptype_5numpy_ufunc;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy;
  PyObject *__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start;
  PyObject *__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr;
  PyObject *__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal;
  PyObject *__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr;
  PyObject *__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr;
  PyTypeObject *__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr;
  PyObject *__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr;
  PyObject *__pyx_kp_u_0_005;
  PyObject *__pyx_kp_u_0_1;
  PyObject *__pyx_kp_u_0_15;
  PyObject *__pyx_kp_u_0_2;
  PyObject *__pyx_kp_u_0_5;
  PyObject *__pyx_kp_u_0x_active_cancels;
  PyObject *__pyx_kp_u_1;
  PyObject *__pyx_kp_u_10;
  PyObject *__pyx_kp_u_100;
  PyObject *__pyx_kp_u_1_2;
  PyObject *__pyx_kp_u_1_3;
  PyObject *__pyx_kp_u_1e100;
  PyObject *__pyx_kp_u_1e5;
  PyObject *__pyx_kp_u_2;
  PyObject *__pyx_kp_u_2_2;
  PyObject *__pyx_kp_u_3f;
  PyObject *__pyx_kp_u_4f;
  PyObject *__pyx_kp_u_5E;
  PyObject *__pyx_n_u_Age;
  PyObject *__pyx_kp_u_Amount_Adj;
  PyObject *__pyx_kp_u_Amount_Orig;
  PyObject *__pyx_kp_u_Assets;
  PyObject *__pyx_kp_u_Available_Balance;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_2;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_3;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_4;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_5;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_a;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_a_2;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_a_3;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_a_4;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_a_5;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_a_6;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_a_7;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_a_8;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_10;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_11;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_12;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_2;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_3;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_4;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_5;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_6;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_7;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_8;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_c_9;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_d;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_e;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_f;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_g;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_g_2;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_g_3;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_g_4;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_g_5;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_g_6;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_i;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_i_2;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_i_3;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_l;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_m;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_n;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_p;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_r;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_s;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_s_2;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_t;
  PyObject *__pyx_n_s_AvellanedaMarketMakingStrategy_v;
  PyObject *__pyx_n_s_BUY;
  PyObject *__pyx_kp_u_Best_Ask;
  PyObject *__pyx_kp_u_Best_Bid;
  PyObject *__pyx_n_s_CONNECTED;
  PyObject *__pyx_kp_u_Calculating_volatility;
  PyObject *__pyx_n_s_Clock;
  PyObject *__pyx_n_s_CreatedPairOfOrders;
  PyObject *__pyx_kp_u_Creating;
  PyObject *__pyx_kp_u_Current;
  PyObject *__pyx_kp_u_Current_Value;
  PyObject *__pyx_n_s_DataFrame;
  PyObject *__pyx_n_s_Decimal;
  PyObject *__pyx_n_s_Dict;
  PyObject *__pyx_kp_s_Dict_str_List_str;
  PyObject *__pyx_n_u_Exchange;
  PyObject *__pyx_n_s_ExchangeBase;
  PyObject *__pyx_n_s_FileNotFoundError;
  PyObject *__pyx_kp_u_H_M_S;
  PyObject *__pyx_n_s_HangingOrdersTracker;
  PyObject *__pyx_n_s_INFO;
  PyObject *__pyx_n_s_ImportError;
  PyObject *__pyx_n_u_Inf;
  PyObject *__pyx_n_s_InstantVolatilityIndicator;
  PyObject *__pyx_n_s_LIMIT;
  PyObject *__pyx_n_u_Level;
  PyObject *__pyx_n_s_LimitOrder;
  PyObject *__pyx_n_s_List;
  PyObject *__pyx_kp_s_List_Decimal;
  PyObject *__pyx_kp_s_List_LimitOrder;
  PyObject *__pyx_kp_s_List_MarketTradingPairTuple;
  PyObject *__pyx_kp_u_Maker;
  PyObject *__pyx_kp_u_Maker_2;
  PyObject *__pyx_kp_u_Maker_buy_order_of;
  PyObject *__pyx_kp_u_Maker_sell_order_of;
  PyObject *__pyx_n_u_Market;
  PyObject *__pyx_n_s_MarketTradingPairTuple;
  PyObject *__pyx_kp_u_Market_connectors_are_not_ready;
  PyObject *__pyx_kp_u_Markets;
  PyObject *__pyx_kp_u_Markets_are_not_ready_No_market;
  PyObject *__pyx_n_u_MidPrice;
  PyObject *__pyx_n_s_NaN;
  PyObject *__pyx_n_s_NetworkStatus;
  PyObject *__pyx_kp_u_No_active_maker_orders;
  PyObject *__pyx_kp_u_None;
  PyObject *__pyx_n_s_OPTION_LOG_ALL;
  PyObject *__pyx_n_s_OPTION_LOG_CREATE_ORDER;
  PyObject *__pyx_n_s_OPTION_LOG_MAKER_ORDER_FILLED;
  PyObject *__pyx_n_s_OPTION_LOG_STATUS_REPORT;
  PyObject *__pyx_n_s_OrderType;
  PyObject *__pyx_kp_u_Orders;
  PyObject *__pyx_n_u_Price;
  PyObject *__pyx_n_s_PriceSize;
  PyObject *__pyx_n_s_Proposal;
  PyObject *__pyx_n_s_RADAR_RELAY_TYPE_EXCHANGES;
  PyObject *__pyx_kp_u_Recycling_algorithm_time_left_an;
  PyObject *__pyx_kp_u_Reserved_Price;
  PyObject *__pyx_n_s_SELL;
  PyObject *__pyx_n_u_Spread;
  PyObject *__pyx_n_s_StrategyBase;
  PyObject *__pyx_kp_u_Strategy_parameters;
  PyObject *__pyx_n_s_Timestamp;
  PyObject *__pyx_kp_u_Total_Balance;
  PyObject *__pyx_n_s_TradeType;
  PyObject *__pyx_n_s_Tuple;
  PyObject *__pyx_kp_s_Tuple_List_Proposal_List_Proposa;
  PyObject *__pyx_n_u_Type;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_kp_u_WARNINGS;
  PyObject *__pyx_kp_u_WARNING_Some_markets_are_not_con;
  PyObject *__pyx_n_s__133;
  PyObject *__pyx_kp_u__15;
  PyObject *__pyx_kp_u__16;
  PyObject *__pyx_kp_u__17;
  PyObject *__pyx_kp_u__19;
  PyObject *__pyx_kp_u__20;
  PyObject *__pyx_kp_u__21;
  PyObject *__pyx_kp_u__22;
  PyObject *__pyx_kp_u__23;
  PyObject *__pyx_kp_u__24;
  PyObject *__pyx_kp_u__25;
  PyObject *__pyx_kp_u__26;
  PyObject *__pyx_kp_u__27;
  PyObject *__pyx_kp_u__28;
  PyObject *__pyx_n_s__32;
  PyObject *__pyx_n_s__88;
  PyObject *__pyx_n_u_a;
  PyObject *__pyx_n_s_active_markets;
  PyObject *__pyx_n_s_active_non_hanging_orders;
  PyObject *__pyx_n_s_active_orders;
  PyObject *__pyx_n_s_active_orders_df;
  PyObject *__pyx_n_s_active_orders_df_locals_lambda;
  PyObject *__pyx_n_s_add_current_pairs_of_proposal_or;
  PyObject *__pyx_n_s_add_order;
  PyObject *__pyx_n_s_add_sample;
  PyObject *__pyx_n_s_add_transaction_costs_to_orders;
  PyObject *__pyx_n_s_adjusted_available_balance_for_o;
  PyObject *__pyx_n_s_age;
  PyObject *__pyx_n_s_all;
  PyObject *__pyx_n_s_all_markets_ready;
  PyObject *__pyx_n_s_all_non_hanging_orders;
  PyObject *__pyx_n_s_all_orders;
  PyObject *__pyx_n_s_amount;
  PyObject *__pyx_n_s_amount_orig;
  PyObject *__pyx_n_s_apply;
  PyObject *__pyx_n_s_apply_add_transaction_costs;
  PyObject *__pyx_n_s_apply_budget_constraint;
  PyObject *__pyx_n_s_apply_order_amount_eta_transform;
  PyObject *__pyx_n_s_apply_order_optimization;
  PyObject *__pyx_n_s_apply_order_price_modifiers;
  PyObject *__pyx_n_s_args;
  PyObject *__pyx_kp_u_ask;
  PyObject *__pyx_n_s_ask_level_spreads;
  PyObject *__pyx_kp_u_ask_orders_at_Size_Price;
  PyObject *__pyx_n_s_ask_price;
  PyObject *__pyx_n_s_assets_df;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_available_base_balance;
  PyObject *__pyx_n_s_available_quote_balance;
  PyObject *__pyx_n_s_balance_warning;
  PyObject *__pyx_n_u_bamboo_relay;
  PyObject *__pyx_n_s_base;
  PyObject *__pyx_n_s_base_asset;
  PyObject *__pyx_n_s_base_balance;
  PyObject *__pyx_n_s_base_currency;
  PyObject *__pyx_n_s_base_ratio;
  PyObject *__pyx_n_s_base_value;
  PyObject *__pyx_n_s_best_ask;
  PyObject *__pyx_n_s_best_bid;
  PyObject *__pyx_kp_u_bid;
  PyObject *__pyx_n_s_bid_level_spreads;
  PyObject *__pyx_kp_u_bid_orders_at_Size_Price;
  PyObject *__pyx_n_s_bid_price;
  PyObject *__pyx_n_s_bool;
  PyObject *__pyx_n_u_buy;
  PyObject *__pyx_n_s_buys;
  PyObject *__pyx_n_s_calculate_reserved_price_and_opt;
  PyObject *__pyx_n_s_calculate_target_inventory;
  PyObject *__pyx_n_s_cancel_active_orders;
  PyObject *__pyx_n_s_cancel_order;
  PyObject *__pyx_n_s_candidate_hanging_orders;
  PyObject *__pyx_n_s_candidate_hanging_orders_from_pa;
  PyObject *__pyx_n_s_ceil;
  PyObject *__pyx_n_s_class_getitem;
  PyObject *__pyx_n_s_client_order_id;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_clock;
  PyObject *__pyx_n_s_close;
  PyObject *__pyx_n_s_closing_time;
  PyObject *__pyx_n_s_cls;
  PyObject *__pyx_n_s_collect_market_variables;
  PyObject *__pyx_n_s_columns;
  PyObject *__pyx_n_s_create_base_proposal;
  PyObject *__pyx_n_s_create_basic_proposal;
  PyObject *__pyx_n_s_create_proposal_based_on_order_l;
  PyObject *__pyx_n_s_create_proposal_based_on_order_o;
  PyObject *__pyx_n_s_current_created_pairs_of_orders;
  PyObject *__pyx_n_u_current_inv;
  PyObject *__pyx_n_s_current_prices;
  PyObject *__pyx_n_s_current_value;
  PyObject *__pyx_n_s_current_vol;
  PyObject *__pyx_n_u_current_vol_to_calculation_vol;
  PyObject *__pyx_n_s_data;
  PyObject *__pyx_n_s_datetime;
  PyObject *__pyx_n_s_debug_csv_path;
  PyObject *__pyx_n_s_decimal;
  PyObject *__pyx_n_s_df;
  PyObject *__pyx_n_s_df_header;
  PyObject *__pyx_n_s_df_lines;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_n_s_display_name;
  PyObject *__pyx_n_s_dump_debug_variables;
  PyObject *__pyx_n_s_e;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_enumerate;
  PyObject *__pyx_n_u_eta;
  PyObject *__pyx_n_s_execute_orders_proposal;
  PyObject *__pyx_n_s_exists;
  PyObject *__pyx_n_s_exp;
  PyObject *__pyx_kp_u_filled;
  PyObject *__pyx_n_s_filled_order_delay;
  PyObject *__pyx_n_s_first_col_length;
  PyObject *__pyx_n_s_float;
  PyObject *__pyx_n_s_floor;
  PyObject *__pyx_n_s_format;
  PyObject *__pyx_n_s_format_status;
  PyObject *__pyx_n_s_formatters;
  PyObject *__pyx_n_u_gamma;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_genexpr;
  PyObject *__pyx_n_s_get;
  PyObject *__pyx_n_s_getLogger;
  PyObject *__pyx_n_s_get_adjusted_available_balance;
  PyObject *__pyx_n_s_get_available_balance;
  PyObject *__pyx_n_s_get_balance;
  PyObject *__pyx_n_s_get_last_price;
  PyObject *__pyx_n_s_get_limit_orders;
  PyObject *__pyx_n_s_get_logspaced_level_spreads;
  PyObject *__pyx_n_s_get_maker_order_type;
  PyObject *__pyx_n_s_get_mid_price;
  PyObject *__pyx_n_s_get_min_and_max_spread;
  PyObject *__pyx_n_s_get_price;
  PyObject *__pyx_n_s_get_price_for_volume;
  PyObject *__pyx_n_s_get_spread;
  PyObject *__pyx_n_s_get_volatility;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_n_s_global_config_map;
  PyObject *__pyx_n_u_hang;
  PyObject *__pyx_n_s_hanging_orders_cancel_pct;
  PyObject *__pyx_n_s_hanging_orders_enabled;
  PyObject *__pyx_n_s_hanging_orders_tracker;
  PyObject *__pyx_kp_u_has_been_completely_filled;
  PyObject *__pyx_n_s_hb_app_notification;
  PyObject *__pyx_n_s_header;
  PyObject *__pyx_n_s_hummingbot_client_config_global;
  PyObject *__pyx_n_s_hummingbot_connector_exchange_ba;
  PyObject *__pyx_n_s_hummingbot_core_data_type_limit;
  PyObject *__pyx_n_s_hummingbot_core_event_events;
  PyObject *__pyx_n_s_hummingbot_core_network_iterator;
  PyObject *__pyx_n_s_hummingbot_core_utils;
  PyObject *__pyx_n_s_hummingbot_strategy___utils___tr;
  PyObject *__pyx_n_s_hummingbot_strategy_avellaneda_m;
  PyObject *__pyx_kp_s_hummingbot_strategy_avellaneda_m_2;
  PyObject *__pyx_n_s_hummingbot_strategy_data_types;
  PyObject *__pyx_n_s_hummingbot_strategy_hanging_orde;
  PyObject *__pyx_n_s_hummingbot_strategy_market_tradi;
  PyObject *__pyx_n_s_hummingbot_strategy_strategy_bas;
  PyObject *__pyx_n_s_hummingbot_strategy_utils;
  PyObject *__pyx_n_s_idx;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_in_flight_cancels;
  PyObject *__pyx_n_s_index;
  PyObject *__pyx_n_s_info;
  PyObject *__pyx_n_s_init_params;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_int;
  PyObject *__pyx_n_s_inventory_risk_aversion;
  PyObject *__pyx_n_s_inventory_target_base_pct;
  PyObject *__pyx_n_u_inventory_target_pct;
  PyObject *__pyx_n_s_is_algorithm_ready;
  PyObject *__pyx_n_s_is_buy;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_is_debug;
  PyObject *__pyx_kp_u_is_filled;
  PyObject *__pyx_n_s_is_hanging_order;
  PyObject *__pyx_n_s_is_order_id_in_completed_hanging;
  PyObject *__pyx_n_s_is_order_id_in_hanging_orders;
  PyObject *__pyx_n_s_is_potential_hanging_order;
  PyObject *__pyx_n_s_is_sampling_buffer_full;
  PyObject *__pyx_n_s_is_within_tolerance;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_isnan;
  PyObject *__pyx_n_s_items;
  PyObject *__pyx_n_u_kappa;
  PyObject *__pyx_n_s_key;
  PyObject *__pyx_n_s_len;
  PyObject *__pyx_n_s_level;
  PyObject *__pyx_n_s_limit_orders;
  PyObject *__pyx_n_s_line;
  PyObject *__pyx_n_s_lines;
  PyObject *__pyx_n_s_ln;
  PyObject *__pyx_n_s_log;
  PyObject *__pyx_n_s_log_with_clock;
  PyObject *__pyx_n_s_logger;
  PyObject *__pyx_n_s_logging;
  PyObject *__pyx_n_s_logging_options;
  PyObject *__pyx_n_s_logspace;
  PyObject *__pyx_n_s_lvl_buy;
  PyObject *__pyx_n_s_lvl_sell;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_map_df_to_str;
  PyObject *__pyx_n_s_market;
  PyObject *__pyx_n_s_market_books;
  PyObject *__pyx_n_s_market_info;
  PyObject *__pyx_n_s_market_info_to_active_orders;
  PyObject *__pyx_n_s_market_pair_to_active_orders;
  PyObject *__pyx_n_s_market_status_data_frame;
  PyObject *__pyx_n_s_market_trading_pair_tuples;
  PyObject *__pyx_n_s_markets_columns;
  PyObject *__pyx_n_s_markets_data;
  PyObject *__pyx_n_s_markets_df;
  PyObject *__pyx_n_s_math;
  PyObject *__pyx_n_s_max;
  PyObject *__pyx_n_s_max_order_age;
  PyObject *__pyx_n_s_max_spread;
  PyObject *__pyx_n_u_max_spread;
  PyObject *__pyx_n_s_mid_price;
  PyObject *__pyx_n_u_mid_price;
  PyObject *__pyx_kp_u_mid_price_std_dev;
  PyObject *__pyx_n_s_min_spread;
  PyObject *__pyx_n_u_min_spread;
  PyObject *__pyx_n_s_mode;
  PyObject *__pyx_n_s_msg;
  PyObject *__pyx_kp_u_n_a;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_name_2;
  PyObject *__pyx_n_s_nan;
  PyObject *__pyx_n_u_nan;
  PyObject *__pyx_n_s_network_status;
  PyObject *__pyx_n_s_network_warning;
  PyObject *__pyx_n_s_new_ask;
  PyObject *__pyx_n_s_new_bid;
  PyObject *__pyx_n_s_no_sells;
  PyObject *__pyx_n_s_non_hanging;
  PyObject *__pyx_n_s_normalize;
  PyObject *__pyx_n_s_notify_hb_app;
  PyObject *__pyx_n_s_notify_hb_app_with_timestamp;
  PyObject *__pyx_n_s_np;
  PyObject *__pyx_n_s_num;
  PyObject *__pyx_n_s_numpy;
  PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
  PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
  PyObject *__pyx_n_s_o;
  PyObject *__pyx_n_u_optimal_ask;
  PyObject *__pyx_n_s_optimal_ask_spread;
  PyObject *__pyx_kp_u_optimal_ask_to_mid;
  PyObject *__pyx_n_u_optimal_bid;
  PyObject *__pyx_n_s_optimal_bid_spread;
  PyObject *__pyx_kp_u_optimal_bid_to_mid;
  PyObject *__pyx_n_u_optimal_spread;
  PyObject *__pyx_kp_u_order;
  PyObject *__pyx_n_s_order_2;
  PyObject *__pyx_n_s_order_age;
  PyObject *__pyx_n_s_order_amount;
  PyObject *__pyx_n_s_order_amount_shape_factor;
  PyObject *__pyx_n_s_order_book_depth_factor;
  PyObject *__pyx_kp_u_order_book_depth_factor_2;
  PyObject *__pyx_n_s_order_id;
  PyObject *__pyx_n_s_order_levels;
  PyObject *__pyx_n_s_order_optimization_enabled;
  PyObject *__pyx_n_s_order_override;
  PyObject *__pyx_n_s_order_refresh_time;
  PyObject *__pyx_n_s_order_refresh_tolerance_pct;
  PyObject *__pyx_n_s_orders;
  PyObject *__pyx_n_s_os;
  PyObject *__pyx_n_s_p;
  PyObject *__pyx_n_s_pandas;
  PyObject *__pyx_n_s_parameters_based_on_spread;
  PyObject *__pyx_n_s_path;
  PyObject *__pyx_n_s_pd;
  PyObject *__pyx_kp_s_pd_DataFrame;
  PyObject *__pyx_n_s_percent;
  PyObject *__pyx_n_s_pmm_logger;
  PyObject *__pyx_n_s_price;
  PyObject *__pyx_n_s_process_tick;
  PyObject *__pyx_n_s_proposal;
  PyObject *__pyx_n_s_proposal_prices;
  PyObject *__pyx_n_s_pure_mm_assets_df;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_kp_u_q;
  PyObject *__pyx_n_s_quantity;
  PyObject *__pyx_n_s_quote_asset;
  PyObject *__pyx_n_s_quote_balance;
  PyObject *__pyx_n_s_quote_currency;
  PyObject *__pyx_n_s_quote_ratio;
  PyObject *__pyx_n_u_radar_relay;
  PyObject *__pyx_n_s_range;
  PyObject *__pyx_n_s_ready;
  PyObject *__pyx_n_s_recalculate_parameters;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_ref_price;
  PyObject *__pyx_n_s_reference_price;
  PyObject *__pyx_n_s_regex;
  PyObject *__pyx_n_s_register_events;
  PyObject *__pyx_n_s_replace;
  PyObject *__pyx_n_u_reserved_price;
  PyObject *__pyx_n_s_result_price;
  PyObject *__pyx_n_s_return;
  PyObject *__pyx_n_s_reverse;
  PyObject *__pyx_n_s_risk_factor;
  PyObject *__pyx_kp_u_risk_factor_2;
  PyObject *__pyx_n_s_round;
  PyObject *__pyx_n_u_s;
  PyObject *__pyx_n_s_s_decimal_neg_one;
  PyObject *__pyx_n_s_s_decimal_one;
  PyObject *__pyx_n_s_s_decimal_zero;
  PyObject *__pyx_n_s_seconds;
  PyObject *__pyx_kp_u_seconds_to_start_trading;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_self__events_cannot_be_converted;
  PyObject *__pyx_n_u_sell;
  PyObject *__pyx_n_s_sell_order;
  PyObject *__pyx_n_s_sells;
  PyObject *__pyx_n_s_send;
  PyObject *__pyx_n_s_set_timers;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_should_wait_order_cancel_confirm;
  PyObject *__pyx_n_s_size;
  PyObject *__pyx_n_s_sort;
  PyObject *__pyx_n_s_sorted;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_split;
  PyObject *__pyx_n_s_spread;
  PyObject *__pyx_n_u_spread;
  PyObject *__pyx_n_s_start;
  PyObject *__pyx_n_s_status_report_interval;
  PyObject *__pyx_n_s_str;
  PyObject *__pyx_n_s_strftime;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_n_u_target_inv;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_throw;
  PyObject *__pyx_n_s_time;
  PyObject *__pyx_n_u_time_left_fraction;
  PyObject *__pyx_kp_u_time_until_end_of_trading_cycle;
  PyObject *__pyx_n_s_timedelta;
  PyObject *__pyx_n_s_timestamp;
  PyObject *__pyx_n_s_to_create_orders;
  PyObject *__pyx_n_s_to_csv;
  PyObject *__pyx_n_s_to_show_current_pct;
  PyObject *__pyx_n_s_to_string;
  PyObject *__pyx_n_s_total_in_quote;
  PyObject *__pyx_n_s_trade_type;
  PyObject *__pyx_n_s_trading_pair;
  PyObject *__pyx_n_s_typing;
  PyObject *__pyx_n_s_unit;
  PyObject *__pyx_n_s_unlink;
  PyObject *__pyx_n_s_unregister_events;
  PyObject *__pyx_n_s_update_strategy_orders_with_equi;
  PyObject *__pyx_n_s_upper;
  PyObject *__pyx_n_s_use_coordinator;
  PyObject *__pyx_n_s_value;
  PyObject *__pyx_n_s_values;
  PyObject *__pyx_kp_u_vol;
  PyObject *__pyx_n_s_vol_2;
  PyObject *__pyx_n_s_vol_to_spread_multiplier;
  PyObject *__pyx_n_u_vol_to_spread_multiplier;
  PyObject *__pyx_kp_u_volatility;
  PyObject *__pyx_n_s_volatility_buffer_size;
  PyObject *__pyx_n_s_volatility_diff_from_last_parame;
  PyObject *__pyx_n_s_volatility_pct;
  PyObject *__pyx_n_s_volatility_sensibility;
  PyObject *__pyx_n_s_warning;
  PyObject *__pyx_n_s_warning_lines;
  PyObject *__pyx_n_s_x;
  PyObject *__pyx_n_s_zip;
  PyObject *__pyx_float_1e6;
  PyObject *__pyx_float_30_0;
  PyObject *__pyx_float_60_0;
  PyObject *__pyx_float_100_0;
  PyObject *__pyx_float_900_0;
  PyObject *__pyx_float_1800_0;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_2;
  PyObject *__pyx_int_4;
  PyObject *__pyx_int_5;
  PyObject *__pyx_int_8;
  PyObject *__pyx_int_16;
  PyObject *__pyx_int_30;
  PyObject *__pyx_int_32;
  PyObject *__pyx_int_100;
  PyObject *__pyx_int_1000;
  PyObject *__pyx_int_9223372036854775807;
  PyObject *__pyx_int_neg_1;
  PyObject *__pyx_int_neg_16;
  PyObject *__pyx_k_;
  PyObject *__pyx_k__2;
  PyObject *__pyx_k__3;
  PyObject *__pyx_k__4;
  PyObject *__pyx_k__5;
  PyObject *__pyx_k__6;
  PyObject *__pyx_k__7;
  PyObject *__pyx_k__8;
  PyObject *__pyx_k__9;
  PyObject *__pyx_k__10;
  PyObject *__pyx_k__11;
  PyObject *__pyx_k__12;
  PyObject *__pyx_k__13;
  PyObject *__pyx_k__14;
  PyObject *__pyx_slice__18;
  PyObject *__pyx_tuple__29;
  PyObject *__pyx_tuple__30;
  PyObject *__pyx_tuple__31;
  PyObject *__pyx_tuple__33;
  PyObject *__pyx_tuple__34;
  PyObject *__pyx_tuple__35;
  PyObject *__pyx_tuple__36;
  PyObject *__pyx_tuple__38;
  PyObject *__pyx_tuple__39;
  PyObject *__pyx_tuple__40;
  PyObject *__pyx_tuple__41;
  PyObject *__pyx_tuple__42;
  PyObject *__pyx_tuple__43;
  PyObject *__pyx_tuple__44;
  PyObject *__pyx_tuple__45;
  PyObject *__pyx_tuple__46;
  PyObject *__pyx_tuple__48;
  PyObject *__pyx_tuple__50;
  PyObject *__pyx_tuple__52;
  PyObject *__pyx_tuple__54;
  PyObject *__pyx_tuple__56;
  PyObject *__pyx_tuple__58;
  PyObject *__pyx_tuple__60;
  PyObject *__pyx_tuple__62;
  PyObject *__pyx_tuple__64;
  PyObject *__pyx_tuple__66;
  PyObject *__pyx_tuple__68;
  PyObject *__pyx_tuple__70;
  PyObject *__pyx_tuple__72;
  PyObject *__pyx_tuple__74;
  PyObject *__pyx_tuple__76;
  PyObject *__pyx_tuple__78;
  PyObject *__pyx_tuple__80;
  PyObject *__pyx_tuple__82;
  PyObject *__pyx_tuple__84;
  PyObject *__pyx_tuple__86;
  PyObject *__pyx_tuple__89;
  PyObject *__pyx_tuple__91;
  PyObject *__pyx_tuple__93;
  PyObject *__pyx_tuple__95;
  PyObject *__pyx_tuple__97;
  PyObject *__pyx_tuple__99;
  PyObject *__pyx_tuple__101;
  PyObject *__pyx_tuple__103;
  PyObject *__pyx_tuple__105;
  PyObject *__pyx_tuple__107;
  PyObject *__pyx_tuple__109;
  PyObject *__pyx_tuple__111;
  PyObject *__pyx_tuple__113;
  PyObject *__pyx_tuple__115;
  PyObject *__pyx_tuple__117;
  PyObject *__pyx_tuple__119;
  PyObject *__pyx_tuple__121;
  PyObject *__pyx_tuple__123;
  PyObject *__pyx_tuple__125;
  PyObject *__pyx_tuple__127;
  PyObject *__pyx_tuple__129;
  PyObject *__pyx_tuple__131;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__47;
  PyObject *__pyx_codeobj__49;
  PyObject *__pyx_codeobj__51;
  PyObject *__pyx_codeobj__53;
  PyObject *__pyx_codeobj__55;
  PyObject *__pyx_codeobj__57;
  PyObject *__pyx_codeobj__59;
  PyObject *__pyx_codeobj__61;
  PyObject *__pyx_codeobj__63;
  PyObject *__pyx_codeobj__65;
  PyObject *__pyx_codeobj__67;
  PyObject *__pyx_codeobj__69;
  PyObject *__pyx_codeobj__71;
  PyObject *__pyx_codeobj__73;
  PyObject *__pyx_codeobj__75;
  PyObject *__pyx_codeobj__77;
  PyObject *__pyx_codeobj__79;
  PyObject *__pyx_codeobj__81;
  PyObject *__pyx_codeobj__83;
  PyObject *__pyx_codeobj__85;
  PyObject *__pyx_codeobj__87;
  PyObject *__pyx_codeobj__90;
  PyObject *__pyx_codeobj__92;
  PyObject *__pyx_codeobj__94;
  PyObject *__pyx_codeobj__96;
  PyObject *__pyx_codeobj__98;
  PyObject *__pyx_codeobj__100;
  PyObject *__pyx_codeobj__102;
  PyObject *__pyx_codeobj__104;
  PyObject *__pyx_codeobj__106;
  PyObject *__pyx_codeobj__108;
  PyObject *__pyx_codeobj__110;
  PyObject *__pyx_codeobj__112;
  PyObject *__pyx_codeobj__114;
  PyObject *__pyx_codeobj__116;
  PyObject *__pyx_codeobj__118;
  PyObject *__pyx_codeobj__120;
  PyObject *__pyx_codeobj__122;
  PyObject *__pyx_codeobj__124;
  PyObject *__pyx_codeobj__126;
  PyObject *__pyx_codeobj__128;
  PyObject *__pyx_codeobj__130;
  PyObject *__pyx_codeobj__132;
} __pyx_mstate;

#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5clock_Clock);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_6pubsub_PubSub);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_dtype);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flatiter);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_broadcast);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ndarray);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_generic);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_number);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_integer);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_inexact);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_floating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flexible);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_character);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ufunc);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr);
  Py_CLEAR(clear_module_state->__pyx_kp_u_0_005);
  Py_CLEAR(clear_module_state->__pyx_kp_u_0_1);
  Py_CLEAR(clear_module_state->__pyx_kp_u_0_15);
  Py_CLEAR(clear_module_state->__pyx_kp_u_0_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_0_5);
  Py_CLEAR(clear_module_state->__pyx_kp_u_0x_active_cancels);
  Py_CLEAR(clear_module_state->__pyx_kp_u_1);
  Py_CLEAR(clear_module_state->__pyx_kp_u_10);
  Py_CLEAR(clear_module_state->__pyx_kp_u_100);
  Py_CLEAR(clear_module_state->__pyx_kp_u_1_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_1_3);
  Py_CLEAR(clear_module_state->__pyx_kp_u_1e100);
  Py_CLEAR(clear_module_state->__pyx_kp_u_1e5);
  Py_CLEAR(clear_module_state->__pyx_kp_u_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_2_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_3f);
  Py_CLEAR(clear_module_state->__pyx_kp_u_4f);
  Py_CLEAR(clear_module_state->__pyx_kp_u_5E);
  Py_CLEAR(clear_module_state->__pyx_n_u_Age);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Amount_Adj);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Amount_Orig);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Assets);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Available_Balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_4);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_5);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_a);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_a_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_a_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_a_4);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_a_5);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_a_6);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_a_7);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_a_8);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_10);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_11);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_12);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_4);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_5);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_6);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_7);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_8);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_9);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_d);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_e);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_f);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_g);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_g_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_g_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_g_4);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_g_5);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_g_6);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_i);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_i_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_i_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_l);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_m);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_n);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_p);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_r);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_s_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_t);
  Py_CLEAR(clear_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_v);
  Py_CLEAR(clear_module_state->__pyx_n_s_BUY);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Best_Ask);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Best_Bid);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONNECTED);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Calculating_volatility);
  Py_CLEAR(clear_module_state->__pyx_n_s_Clock);
  Py_CLEAR(clear_module_state->__pyx_n_s_CreatedPairOfOrders);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Creating);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Current);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Current_Value);
  Py_CLEAR(clear_module_state->__pyx_n_s_DataFrame);
  Py_CLEAR(clear_module_state->__pyx_n_s_Decimal);
  Py_CLEAR(clear_module_state->__pyx_n_s_Dict);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Dict_str_List_str);
  Py_CLEAR(clear_module_state->__pyx_n_u_Exchange);
  Py_CLEAR(clear_module_state->__pyx_n_s_ExchangeBase);
  Py_CLEAR(clear_module_state->__pyx_n_s_FileNotFoundError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_H_M_S);
  Py_CLEAR(clear_module_state->__pyx_n_s_HangingOrdersTracker);
  Py_CLEAR(clear_module_state->__pyx_n_s_INFO);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImportError);
  Py_CLEAR(clear_module_state->__pyx_n_u_Inf);
  Py_CLEAR(clear_module_state->__pyx_n_s_InstantVolatilityIndicator);
  Py_CLEAR(clear_module_state->__pyx_n_s_LIMIT);
  Py_CLEAR(clear_module_state->__pyx_n_u_Level);
  Py_CLEAR(clear_module_state->__pyx_n_s_LimitOrder);
  Py_CLEAR(clear_module_state->__pyx_n_s_List);
  Py_CLEAR(clear_module_state->__pyx_kp_s_List_Decimal);
  Py_CLEAR(clear_module_state->__pyx_kp_s_List_LimitOrder);
  Py_CLEAR(clear_module_state->__pyx_kp_s_List_MarketTradingPairTuple);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Maker);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Maker_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Maker_buy_order_of);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Maker_sell_order_of);
  Py_CLEAR(clear_module_state->__pyx_n_u_Market);
  Py_CLEAR(clear_module_state->__pyx_n_s_MarketTradingPairTuple);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Market_connectors_are_not_ready);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Markets);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Markets_are_not_ready_No_market);
  Py_CLEAR(clear_module_state->__pyx_n_u_MidPrice);
  Py_CLEAR(clear_module_state->__pyx_n_s_NaN);
  Py_CLEAR(clear_module_state->__pyx_n_s_NetworkStatus);
  Py_CLEAR(clear_module_state->__pyx_kp_u_No_active_maker_orders);
  Py_CLEAR(clear_module_state->__pyx_kp_u_None);
  Py_CLEAR(clear_module_state->__pyx_n_s_OPTION_LOG_ALL);
  Py_CLEAR(clear_module_state->__pyx_n_s_OPTION_LOG_CREATE_ORDER);
  Py_CLEAR(clear_module_state->__pyx_n_s_OPTION_LOG_MAKER_ORDER_FILLED);
  Py_CLEAR(clear_module_state->__pyx_n_s_OPTION_LOG_STATUS_REPORT);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderType);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Orders);
  Py_CLEAR(clear_module_state->__pyx_n_u_Price);
  Py_CLEAR(clear_module_state->__pyx_n_s_PriceSize);
  Py_CLEAR(clear_module_state->__pyx_n_s_Proposal);
  Py_CLEAR(clear_module_state->__pyx_n_s_RADAR_RELAY_TYPE_EXCHANGES);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Recycling_algorithm_time_left_an);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Reserved_Price);
  Py_CLEAR(clear_module_state->__pyx_n_s_SELL);
  Py_CLEAR(clear_module_state->__pyx_n_u_Spread);
  Py_CLEAR(clear_module_state->__pyx_n_s_StrategyBase);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Strategy_parameters);
  Py_CLEAR(clear_module_state->__pyx_n_s_Timestamp);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Total_Balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_TradeType);
  Py_CLEAR(clear_module_state->__pyx_n_s_Tuple);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Tuple_List_Proposal_List_Proposa);
  Py_CLEAR(clear_module_state->__pyx_n_u_Type);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_WARNINGS);
  Py_CLEAR(clear_module_state->__pyx_kp_u_WARNING_Some_markets_are_not_con);
  Py_CLEAR(clear_module_state->__pyx_n_s__133);
  Py_CLEAR(clear_module_state->__pyx_kp_u__15);
  Py_CLEAR(clear_module_state->__pyx_kp_u__16);
  Py_CLEAR(clear_module_state->__pyx_kp_u__17);
  Py_CLEAR(clear_module_state->__pyx_kp_u__19);
  Py_CLEAR(clear_module_state->__pyx_kp_u__20);
  Py_CLEAR(clear_module_state->__pyx_kp_u__21);
  Py_CLEAR(clear_module_state->__pyx_kp_u__22);
  Py_CLEAR(clear_module_state->__pyx_kp_u__23);
  Py_CLEAR(clear_module_state->__pyx_kp_u__24);
  Py_CLEAR(clear_module_state->__pyx_kp_u__25);
  Py_CLEAR(clear_module_state->__pyx_kp_u__26);
  Py_CLEAR(clear_module_state->__pyx_kp_u__27);
  Py_CLEAR(clear_module_state->__pyx_kp_u__28);
  Py_CLEAR(clear_module_state->__pyx_n_s__32);
  Py_CLEAR(clear_module_state->__pyx_n_s__88);
  Py_CLEAR(clear_module_state->__pyx_n_u_a);
  Py_CLEAR(clear_module_state->__pyx_n_s_active_markets);
  Py_CLEAR(clear_module_state->__pyx_n_s_active_non_hanging_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_active_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_active_orders_df);
  Py_CLEAR(clear_module_state->__pyx_n_s_active_orders_df_locals_lambda);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_current_pairs_of_proposal_or);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_sample);
  Py_CLEAR(clear_module_state->__pyx_n_s_add_transaction_costs_to_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_adjusted_available_balance_for_o);
  Py_CLEAR(clear_module_state->__pyx_n_s_age);
  Py_CLEAR(clear_module_state->__pyx_n_s_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_all_markets_ready);
  Py_CLEAR(clear_module_state->__pyx_n_s_all_non_hanging_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_all_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_amount_orig);
  Py_CLEAR(clear_module_state->__pyx_n_s_apply);
  Py_CLEAR(clear_module_state->__pyx_n_s_apply_add_transaction_costs);
  Py_CLEAR(clear_module_state->__pyx_n_s_apply_budget_constraint);
  Py_CLEAR(clear_module_state->__pyx_n_s_apply_order_amount_eta_transform);
  Py_CLEAR(clear_module_state->__pyx_n_s_apply_order_optimization);
  Py_CLEAR(clear_module_state->__pyx_n_s_apply_order_price_modifiers);
  Py_CLEAR(clear_module_state->__pyx_n_s_args);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ask);
  Py_CLEAR(clear_module_state->__pyx_n_s_ask_level_spreads);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ask_orders_at_Size_Price);
  Py_CLEAR(clear_module_state->__pyx_n_s_ask_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_assets_df);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_available_base_balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_available_quote_balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_balance_warning);
  Py_CLEAR(clear_module_state->__pyx_n_u_bamboo_relay);
  Py_CLEAR(clear_module_state->__pyx_n_s_base);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_asset);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_currency);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_best_ask);
  Py_CLEAR(clear_module_state->__pyx_n_s_best_bid);
  Py_CLEAR(clear_module_state->__pyx_kp_u_bid);
  Py_CLEAR(clear_module_state->__pyx_n_s_bid_level_spreads);
  Py_CLEAR(clear_module_state->__pyx_kp_u_bid_orders_at_Size_Price);
  Py_CLEAR(clear_module_state->__pyx_n_s_bid_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_bool);
  Py_CLEAR(clear_module_state->__pyx_n_u_buy);
  Py_CLEAR(clear_module_state->__pyx_n_s_buys);
  Py_CLEAR(clear_module_state->__pyx_n_s_calculate_reserved_price_and_opt);
  Py_CLEAR(clear_module_state->__pyx_n_s_calculate_target_inventory);
  Py_CLEAR(clear_module_state->__pyx_n_s_cancel_active_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_cancel_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_candidate_hanging_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_candidate_hanging_orders_from_pa);
  Py_CLEAR(clear_module_state->__pyx_n_s_ceil);
  Py_CLEAR(clear_module_state->__pyx_n_s_class_getitem);
  Py_CLEAR(clear_module_state->__pyx_n_s_client_order_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_clock);
  Py_CLEAR(clear_module_state->__pyx_n_s_close);
  Py_CLEAR(clear_module_state->__pyx_n_s_closing_time);
  Py_CLEAR(clear_module_state->__pyx_n_s_cls);
  Py_CLEAR(clear_module_state->__pyx_n_s_collect_market_variables);
  Py_CLEAR(clear_module_state->__pyx_n_s_columns);
  Py_CLEAR(clear_module_state->__pyx_n_s_create_base_proposal);
  Py_CLEAR(clear_module_state->__pyx_n_s_create_basic_proposal);
  Py_CLEAR(clear_module_state->__pyx_n_s_create_proposal_based_on_order_l);
  Py_CLEAR(clear_module_state->__pyx_n_s_create_proposal_based_on_order_o);
  Py_CLEAR(clear_module_state->__pyx_n_s_current_created_pairs_of_orders);
  Py_CLEAR(clear_module_state->__pyx_n_u_current_inv);
  Py_CLEAR(clear_module_state->__pyx_n_s_current_prices);
  Py_CLEAR(clear_module_state->__pyx_n_s_current_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_current_vol);
  Py_CLEAR(clear_module_state->__pyx_n_u_current_vol_to_calculation_vol);
  Py_CLEAR(clear_module_state->__pyx_n_s_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_datetime);
  Py_CLEAR(clear_module_state->__pyx_n_s_debug_csv_path);
  Py_CLEAR(clear_module_state->__pyx_n_s_decimal);
  Py_CLEAR(clear_module_state->__pyx_n_s_df);
  Py_CLEAR(clear_module_state->__pyx_n_s_df_header);
  Py_CLEAR(clear_module_state->__pyx_n_s_df_lines);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_n_s_display_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_dump_debug_variables);
  Py_CLEAR(clear_module_state->__pyx_n_s_e);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_enumerate);
  Py_CLEAR(clear_module_state->__pyx_n_u_eta);
  Py_CLEAR(clear_module_state->__pyx_n_s_execute_orders_proposal);
  Py_CLEAR(clear_module_state->__pyx_n_s_exists);
  Py_CLEAR(clear_module_state->__pyx_n_s_exp);
  Py_CLEAR(clear_module_state->__pyx_kp_u_filled);
  Py_CLEAR(clear_module_state->__pyx_n_s_filled_order_delay);
  Py_CLEAR(clear_module_state->__pyx_n_s_first_col_length);
  Py_CLEAR(clear_module_state->__pyx_n_s_float);
  Py_CLEAR(clear_module_state->__pyx_n_s_floor);
  Py_CLEAR(clear_module_state->__pyx_n_s_format);
  Py_CLEAR(clear_module_state->__pyx_n_s_format_status);
  Py_CLEAR(clear_module_state->__pyx_n_s_formatters);
  Py_CLEAR(clear_module_state->__pyx_n_u_gamma);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_getLogger);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_adjusted_available_balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_available_balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_last_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_limit_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_logspaced_level_spreads);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_maker_order_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_mid_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_min_and_max_spread);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_price_for_volume);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_spread);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_volatility);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_global_config_map);
  Py_CLEAR(clear_module_state->__pyx_n_u_hang);
  Py_CLEAR(clear_module_state->__pyx_n_s_hanging_orders_cancel_pct);
  Py_CLEAR(clear_module_state->__pyx_n_s_hanging_orders_enabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_hanging_orders_tracker);
  Py_CLEAR(clear_module_state->__pyx_kp_u_has_been_completely_filled);
  Py_CLEAR(clear_module_state->__pyx_n_s_hb_app_notification);
  Py_CLEAR(clear_module_state->__pyx_n_s_header);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_client_config_global);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_connector_exchange_ba);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_data_type_limit);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_event_events);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_network_iterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_utils);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_strategy___utils___tr);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_strategy_avellaneda_m);
  Py_CLEAR(clear_module_state->__pyx_kp_s_hummingbot_strategy_avellaneda_m_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_strategy_data_types);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_strategy_hanging_orde);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_strategy_market_tradi);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_strategy_strategy_bas);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_strategy_utils);
  Py_CLEAR(clear_module_state->__pyx_n_s_idx);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_in_flight_cancels);
  Py_CLEAR(clear_module_state->__pyx_n_s_index);
  Py_CLEAR(clear_module_state->__pyx_n_s_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_init_params);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_int);
  Py_CLEAR(clear_module_state->__pyx_n_s_inventory_risk_aversion);
  Py_CLEAR(clear_module_state->__pyx_n_s_inventory_target_base_pct);
  Py_CLEAR(clear_module_state->__pyx_n_u_inventory_target_pct);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_algorithm_ready);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_buy);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_debug);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_filled);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_hanging_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_order_id_in_completed_hanging);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_order_id_in_hanging_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_potential_hanging_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_sampling_buffer_full);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_within_tolerance);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_isnan);
  Py_CLEAR(clear_module_state->__pyx_n_s_items);
  Py_CLEAR(clear_module_state->__pyx_n_u_kappa);
  Py_CLEAR(clear_module_state->__pyx_n_s_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_len);
  Py_CLEAR(clear_module_state->__pyx_n_s_level);
  Py_CLEAR(clear_module_state->__pyx_n_s_limit_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_line);
  Py_CLEAR(clear_module_state->__pyx_n_s_lines);
  Py_CLEAR(clear_module_state->__pyx_n_s_ln);
  Py_CLEAR(clear_module_state->__pyx_n_s_log);
  Py_CLEAR(clear_module_state->__pyx_n_s_log_with_clock);
  Py_CLEAR(clear_module_state->__pyx_n_s_logger);
  Py_CLEAR(clear_module_state->__pyx_n_s_logging);
  Py_CLEAR(clear_module_state->__pyx_n_s_logging_options);
  Py_CLEAR(clear_module_state->__pyx_n_s_logspace);
  Py_CLEAR(clear_module_state->__pyx_n_s_lvl_buy);
  Py_CLEAR(clear_module_state->__pyx_n_s_lvl_sell);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_map_df_to_str);
  Py_CLEAR(clear_module_state->__pyx_n_s_market);
  Py_CLEAR(clear_module_state->__pyx_n_s_market_books);
  Py_CLEAR(clear_module_state->__pyx_n_s_market_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_market_info_to_active_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_market_pair_to_active_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_market_status_data_frame);
  Py_CLEAR(clear_module_state->__pyx_n_s_market_trading_pair_tuples);
  Py_CLEAR(clear_module_state->__pyx_n_s_markets_columns);
  Py_CLEAR(clear_module_state->__pyx_n_s_markets_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_markets_df);
  Py_CLEAR(clear_module_state->__pyx_n_s_math);
  Py_CLEAR(clear_module_state->__pyx_n_s_max);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_order_age);
  Py_CLEAR(clear_module_state->__pyx_n_s_max_spread);
  Py_CLEAR(clear_module_state->__pyx_n_u_max_spread);
  Py_CLEAR(clear_module_state->__pyx_n_s_mid_price);
  Py_CLEAR(clear_module_state->__pyx_n_u_mid_price);
  Py_CLEAR(clear_module_state->__pyx_kp_u_mid_price_std_dev);
  Py_CLEAR(clear_module_state->__pyx_n_s_min_spread);
  Py_CLEAR(clear_module_state->__pyx_n_u_min_spread);
  Py_CLEAR(clear_module_state->__pyx_n_s_mode);
  Py_CLEAR(clear_module_state->__pyx_n_s_msg);
  Py_CLEAR(clear_module_state->__pyx_kp_u_n_a);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_name_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_nan);
  Py_CLEAR(clear_module_state->__pyx_n_u_nan);
  Py_CLEAR(clear_module_state->__pyx_n_s_network_status);
  Py_CLEAR(clear_module_state->__pyx_n_s_network_warning);
  Py_CLEAR(clear_module_state->__pyx_n_s_new_ask);
  Py_CLEAR(clear_module_state->__pyx_n_s_new_bid);
  Py_CLEAR(clear_module_state->__pyx_n_s_no_sells);
  Py_CLEAR(clear_module_state->__pyx_n_s_non_hanging);
  Py_CLEAR(clear_module_state->__pyx_n_s_normalize);
  Py_CLEAR(clear_module_state->__pyx_n_s_notify_hb_app);
  Py_CLEAR(clear_module_state->__pyx_n_s_notify_hb_app_with_timestamp);
  Py_CLEAR(clear_module_state->__pyx_n_s_np);
  Py_CLEAR(clear_module_state->__pyx_n_s_num);
  Py_CLEAR(clear_module_state->__pyx_n_s_numpy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy_core_multiarray_failed_to);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy_core_umath_failed_to_impor);
  Py_CLEAR(clear_module_state->__pyx_n_s_o);
  Py_CLEAR(clear_module_state->__pyx_n_u_optimal_ask);
  Py_CLEAR(clear_module_state->__pyx_n_s_optimal_ask_spread);
  Py_CLEAR(clear_module_state->__pyx_kp_u_optimal_ask_to_mid);
  Py_CLEAR(clear_module_state->__pyx_n_u_optimal_bid);
  Py_CLEAR(clear_module_state->__pyx_n_s_optimal_bid_spread);
  Py_CLEAR(clear_module_state->__pyx_kp_u_optimal_bid_to_mid);
  Py_CLEAR(clear_module_state->__pyx_n_u_optimal_spread);
  Py_CLEAR(clear_module_state->__pyx_kp_u_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_age);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_amount_shape_factor);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_book_depth_factor);
  Py_CLEAR(clear_module_state->__pyx_kp_u_order_book_depth_factor_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_levels);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_optimization_enabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_override);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_refresh_time);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_refresh_tolerance_pct);
  Py_CLEAR(clear_module_state->__pyx_n_s_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_os);
  Py_CLEAR(clear_module_state->__pyx_n_s_p);
  Py_CLEAR(clear_module_state->__pyx_n_s_pandas);
  Py_CLEAR(clear_module_state->__pyx_n_s_parameters_based_on_spread);
  Py_CLEAR(clear_module_state->__pyx_n_s_path);
  Py_CLEAR(clear_module_state->__pyx_n_s_pd);
  Py_CLEAR(clear_module_state->__pyx_kp_s_pd_DataFrame);
  Py_CLEAR(clear_module_state->__pyx_n_s_percent);
  Py_CLEAR(clear_module_state->__pyx_n_s_pmm_logger);
  Py_CLEAR(clear_module_state->__pyx_n_s_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_process_tick);
  Py_CLEAR(clear_module_state->__pyx_n_s_proposal);
  Py_CLEAR(clear_module_state->__pyx_n_s_proposal_prices);
  Py_CLEAR(clear_module_state->__pyx_n_s_pure_mm_assets_df);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_q);
  Py_CLEAR(clear_module_state->__pyx_n_s_quantity);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_asset);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_currency);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_ratio);
  Py_CLEAR(clear_module_state->__pyx_n_u_radar_relay);
  Py_CLEAR(clear_module_state->__pyx_n_s_range);
  Py_CLEAR(clear_module_state->__pyx_n_s_ready);
  Py_CLEAR(clear_module_state->__pyx_n_s_recalculate_parameters);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_ref_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_reference_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_regex);
  Py_CLEAR(clear_module_state->__pyx_n_s_register_events);
  Py_CLEAR(clear_module_state->__pyx_n_s_replace);
  Py_CLEAR(clear_module_state->__pyx_n_u_reserved_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_result_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_return);
  Py_CLEAR(clear_module_state->__pyx_n_s_reverse);
  Py_CLEAR(clear_module_state->__pyx_n_s_risk_factor);
  Py_CLEAR(clear_module_state->__pyx_kp_u_risk_factor_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_round);
  Py_CLEAR(clear_module_state->__pyx_n_u_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_s_decimal_neg_one);
  Py_CLEAR(clear_module_state->__pyx_n_s_s_decimal_one);
  Py_CLEAR(clear_module_state->__pyx_n_s_s_decimal_zero);
  Py_CLEAR(clear_module_state->__pyx_n_s_seconds);
  Py_CLEAR(clear_module_state->__pyx_kp_u_seconds_to_start_trading);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self__events_cannot_be_converted);
  Py_CLEAR(clear_module_state->__pyx_n_u_sell);
  Py_CLEAR(clear_module_state->__pyx_n_s_sell_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_sells);
  Py_CLEAR(clear_module_state->__pyx_n_s_send);
  Py_CLEAR(clear_module_state->__pyx_n_s_set_timers);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_should_wait_order_cancel_confirm);
  Py_CLEAR(clear_module_state->__pyx_n_s_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_sort);
  Py_CLEAR(clear_module_state->__pyx_n_s_sorted);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_split);
  Py_CLEAR(clear_module_state->__pyx_n_s_spread);
  Py_CLEAR(clear_module_state->__pyx_n_u_spread);
  Py_CLEAR(clear_module_state->__pyx_n_s_start);
  Py_CLEAR(clear_module_state->__pyx_n_s_status_report_interval);
  Py_CLEAR(clear_module_state->__pyx_n_s_str);
  Py_CLEAR(clear_module_state->__pyx_n_s_strftime);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_super);
  Py_CLEAR(clear_module_state->__pyx_n_u_target_inv);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_throw);
  Py_CLEAR(clear_module_state->__pyx_n_s_time);
  Py_CLEAR(clear_module_state->__pyx_n_u_time_left_fraction);
  Py_CLEAR(clear_module_state->__pyx_kp_u_time_until_end_of_trading_cycle);
  Py_CLEAR(clear_module_state->__pyx_n_s_timedelta);
  Py_CLEAR(clear_module_state->__pyx_n_s_timestamp);
  Py_CLEAR(clear_module_state->__pyx_n_s_to_create_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_to_csv);
  Py_CLEAR(clear_module_state->__pyx_n_s_to_show_current_pct);
  Py_CLEAR(clear_module_state->__pyx_n_s_to_string);
  Py_CLEAR(clear_module_state->__pyx_n_s_total_in_quote);
  Py_CLEAR(clear_module_state->__pyx_n_s_trade_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_trading_pair);
  Py_CLEAR(clear_module_state->__pyx_n_s_typing);
  Py_CLEAR(clear_module_state->__pyx_n_s_unit);
  Py_CLEAR(clear_module_state->__pyx_n_s_unlink);
  Py_CLEAR(clear_module_state->__pyx_n_s_unregister_events);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_strategy_orders_with_equi);
  Py_CLEAR(clear_module_state->__pyx_n_s_upper);
  Py_CLEAR(clear_module_state->__pyx_n_s_use_coordinator);
  Py_CLEAR(clear_module_state->__pyx_n_s_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_values);
  Py_CLEAR(clear_module_state->__pyx_kp_u_vol);
  Py_CLEAR(clear_module_state->__pyx_n_s_vol_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_vol_to_spread_multiplier);
  Py_CLEAR(clear_module_state->__pyx_n_u_vol_to_spread_multiplier);
  Py_CLEAR(clear_module_state->__pyx_kp_u_volatility);
  Py_CLEAR(clear_module_state->__pyx_n_s_volatility_buffer_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_volatility_diff_from_last_parame);
  Py_CLEAR(clear_module_state->__pyx_n_s_volatility_pct);
  Py_CLEAR(clear_module_state->__pyx_n_s_volatility_sensibility);
  Py_CLEAR(clear_module_state->__pyx_n_s_warning);
  Py_CLEAR(clear_module_state->__pyx_n_s_warning_lines);
  Py_CLEAR(clear_module_state->__pyx_n_s_x);
  Py_CLEAR(clear_module_state->__pyx_n_s_zip);
  Py_CLEAR(clear_module_state->__pyx_float_1e6);
  Py_CLEAR(clear_module_state->__pyx_float_30_0);
  Py_CLEAR(clear_module_state->__pyx_float_60_0);
  Py_CLEAR(clear_module_state->__pyx_float_100_0);
  Py_CLEAR(clear_module_state->__pyx_float_900_0);
  Py_CLEAR(clear_module_state->__pyx_float_1800_0);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_2);
  Py_CLEAR(clear_module_state->__pyx_int_4);
  Py_CLEAR(clear_module_state->__pyx_int_5);
  Py_CLEAR(clear_module_state->__pyx_int_8);
  Py_CLEAR(clear_module_state->__pyx_int_16);
  Py_CLEAR(clear_module_state->__pyx_int_30);
  Py_CLEAR(clear_module_state->__pyx_int_32);
  Py_CLEAR(clear_module_state->__pyx_int_100);
  Py_CLEAR(clear_module_state->__pyx_int_1000);
  Py_CLEAR(clear_module_state->__pyx_int_9223372036854775807);
  Py_CLEAR(clear_module_state->__pyx_int_neg_1);
  Py_CLEAR(clear_module_state->__pyx_int_neg_16);
  Py_CLEAR(clear_module_state->__pyx_k_);
  Py_CLEAR(clear_module_state->__pyx_k__2);
  Py_CLEAR(clear_module_state->__pyx_k__3);
  Py_CLEAR(clear_module_state->__pyx_k__4);
  Py_CLEAR(clear_module_state->__pyx_k__5);
  Py_CLEAR(clear_module_state->__pyx_k__6);
  Py_CLEAR(clear_module_state->__pyx_k__7);
  Py_CLEAR(clear_module_state->__pyx_k__8);
  Py_CLEAR(clear_module_state->__pyx_k__9);
  Py_CLEAR(clear_module_state->__pyx_k__10);
  Py_CLEAR(clear_module_state->__pyx_k__11);
  Py_CLEAR(clear_module_state->__pyx_k__12);
  Py_CLEAR(clear_module_state->__pyx_k__13);
  Py_CLEAR(clear_module_state->__pyx_k__14);
  Py_CLEAR(clear_module_state->__pyx_slice__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__29);
  Py_CLEAR(clear_module_state->__pyx_tuple__30);
  Py_CLEAR(clear_module_state->__pyx_tuple__31);
  Py_CLEAR(clear_module_state->__pyx_tuple__33);
  Py_CLEAR(clear_module_state->__pyx_tuple__34);
  Py_CLEAR(clear_module_state->__pyx_tuple__35);
  Py_CLEAR(clear_module_state->__pyx_tuple__36);
  Py_CLEAR(clear_module_state->__pyx_tuple__38);
  Py_CLEAR(clear_module_state->__pyx_tuple__39);
  Py_CLEAR(clear_module_state->__pyx_tuple__40);
  Py_CLEAR(clear_module_state->__pyx_tuple__41);
  Py_CLEAR(clear_module_state->__pyx_tuple__42);
  Py_CLEAR(clear_module_state->__pyx_tuple__43);
  Py_CLEAR(clear_module_state->__pyx_tuple__44);
  Py_CLEAR(clear_module_state->__pyx_tuple__45);
  Py_CLEAR(clear_module_state->__pyx_tuple__46);
  Py_CLEAR(clear_module_state->__pyx_tuple__48);
  Py_CLEAR(clear_module_state->__pyx_tuple__50);
  Py_CLEAR(clear_module_state->__pyx_tuple__52);
  Py_CLEAR(clear_module_state->__pyx_tuple__54);
  Py_CLEAR(clear_module_state->__pyx_tuple__56);
  Py_CLEAR(clear_module_state->__pyx_tuple__58);
  Py_CLEAR(clear_module_state->__pyx_tuple__60);
  Py_CLEAR(clear_module_state->__pyx_tuple__62);
  Py_CLEAR(clear_module_state->__pyx_tuple__64);
  Py_CLEAR(clear_module_state->__pyx_tuple__66);
  Py_CLEAR(clear_module_state->__pyx_tuple__68);
  Py_CLEAR(clear_module_state->__pyx_tuple__70);
  Py_CLEAR(clear_module_state->__pyx_tuple__72);
  Py_CLEAR(clear_module_state->__pyx_tuple__74);
  Py_CLEAR(clear_module_state->__pyx_tuple__76);
  Py_CLEAR(clear_module_state->__pyx_tuple__78);
  Py_CLEAR(clear_module_state->__pyx_tuple__80);
  Py_CLEAR(clear_module_state->__pyx_tuple__82);
  Py_CLEAR(clear_module_state->__pyx_tuple__84);
  Py_CLEAR(clear_module_state->__pyx_tuple__86);
  Py_CLEAR(clear_module_state->__pyx_tuple__89);
  Py_CLEAR(clear_module_state->__pyx_tuple__91);
  Py_CLEAR(clear_module_state->__pyx_tuple__93);
  Py_CLEAR(clear_module_state->__pyx_tuple__95);
  Py_CLEAR(clear_module_state->__pyx_tuple__97);
  Py_CLEAR(clear_module_state->__pyx_tuple__99);
  Py_CLEAR(clear_module_state->__pyx_tuple__101);
  Py_CLEAR(clear_module_state->__pyx_tuple__103);
  Py_CLEAR(clear_module_state->__pyx_tuple__105);
  Py_CLEAR(clear_module_state->__pyx_tuple__107);
  Py_CLEAR(clear_module_state->__pyx_tuple__109);
  Py_CLEAR(clear_module_state->__pyx_tuple__111);
  Py_CLEAR(clear_module_state->__pyx_tuple__113);
  Py_CLEAR(clear_module_state->__pyx_tuple__115);
  Py_CLEAR(clear_module_state->__pyx_tuple__117);
  Py_CLEAR(clear_module_state->__pyx_tuple__119);
  Py_CLEAR(clear_module_state->__pyx_tuple__121);
  Py_CLEAR(clear_module_state->__pyx_tuple__123);
  Py_CLEAR(clear_module_state->__pyx_tuple__125);
  Py_CLEAR(clear_module_state->__pyx_tuple__127);
  Py_CLEAR(clear_module_state->__pyx_tuple__129);
  Py_CLEAR(clear_module_state->__pyx_tuple__131);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__47);
  Py_CLEAR(clear_module_state->__pyx_codeobj__49);
  Py_CLEAR(clear_module_state->__pyx_codeobj__51);
  Py_CLEAR(clear_module_state->__pyx_codeobj__53);
  Py_CLEAR(clear_module_state->__pyx_codeobj__55);
  Py_CLEAR(clear_module_state->__pyx_codeobj__57);
  Py_CLEAR(clear_module_state->__pyx_codeobj__59);
  Py_CLEAR(clear_module_state->__pyx_codeobj__61);
  Py_CLEAR(clear_module_state->__pyx_codeobj__63);
  Py_CLEAR(clear_module_state->__pyx_codeobj__65);
  Py_CLEAR(clear_module_state->__pyx_codeobj__67);
  Py_CLEAR(clear_module_state->__pyx_codeobj__69);
  Py_CLEAR(clear_module_state->__pyx_codeobj__71);
  Py_CLEAR(clear_module_state->__pyx_codeobj__73);
  Py_CLEAR(clear_module_state->__pyx_codeobj__75);
  Py_CLEAR(clear_module_state->__pyx_codeobj__77);
  Py_CLEAR(clear_module_state->__pyx_codeobj__79);
  Py_CLEAR(clear_module_state->__pyx_codeobj__81);
  Py_CLEAR(clear_module_state->__pyx_codeobj__83);
  Py_CLEAR(clear_module_state->__pyx_codeobj__85);
  Py_CLEAR(clear_module_state->__pyx_codeobj__87);
  Py_CLEAR(clear_module_state->__pyx_codeobj__90);
  Py_CLEAR(clear_module_state->__pyx_codeobj__92);
  Py_CLEAR(clear_module_state->__pyx_codeobj__94);
  Py_CLEAR(clear_module_state->__pyx_codeobj__96);
  Py_CLEAR(clear_module_state->__pyx_codeobj__98);
  Py_CLEAR(clear_module_state->__pyx_codeobj__100);
  Py_CLEAR(clear_module_state->__pyx_codeobj__102);
  Py_CLEAR(clear_module_state->__pyx_codeobj__104);
  Py_CLEAR(clear_module_state->__pyx_codeobj__106);
  Py_CLEAR(clear_module_state->__pyx_codeobj__108);
  Py_CLEAR(clear_module_state->__pyx_codeobj__110);
  Py_CLEAR(clear_module_state->__pyx_codeobj__112);
  Py_CLEAR(clear_module_state->__pyx_codeobj__114);
  Py_CLEAR(clear_module_state->__pyx_codeobj__116);
  Py_CLEAR(clear_module_state->__pyx_codeobj__118);
  Py_CLEAR(clear_module_state->__pyx_codeobj__120);
  Py_CLEAR(clear_module_state->__pyx_codeobj__122);
  Py_CLEAR(clear_module_state->__pyx_codeobj__124);
  Py_CLEAR(clear_module_state->__pyx_codeobj__126);
  Py_CLEAR(clear_module_state->__pyx_codeobj__128);
  Py_CLEAR(clear_module_state->__pyx_codeobj__130);
  Py_CLEAR(clear_module_state->__pyx_codeobj__132);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5clock_Clock);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_6pubsub_PubSub);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_dtype);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flatiter);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_broadcast);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ndarray);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_generic);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_number);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_integer);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_inexact);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_floating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flexible);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_character);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ufunc);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr);
  Py_VISIT(traverse_module_state->__pyx_kp_u_0_005);
  Py_VISIT(traverse_module_state->__pyx_kp_u_0_1);
  Py_VISIT(traverse_module_state->__pyx_kp_u_0_15);
  Py_VISIT(traverse_module_state->__pyx_kp_u_0_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_0_5);
  Py_VISIT(traverse_module_state->__pyx_kp_u_0x_active_cancels);
  Py_VISIT(traverse_module_state->__pyx_kp_u_1);
  Py_VISIT(traverse_module_state->__pyx_kp_u_10);
  Py_VISIT(traverse_module_state->__pyx_kp_u_100);
  Py_VISIT(traverse_module_state->__pyx_kp_u_1_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_1_3);
  Py_VISIT(traverse_module_state->__pyx_kp_u_1e100);
  Py_VISIT(traverse_module_state->__pyx_kp_u_1e5);
  Py_VISIT(traverse_module_state->__pyx_kp_u_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_2_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_3f);
  Py_VISIT(traverse_module_state->__pyx_kp_u_4f);
  Py_VISIT(traverse_module_state->__pyx_kp_u_5E);
  Py_VISIT(traverse_module_state->__pyx_n_u_Age);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Amount_Adj);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Amount_Orig);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Assets);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Available_Balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_4);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_5);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_a);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_a_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_a_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_a_4);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_a_5);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_a_6);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_a_7);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_a_8);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_10);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_11);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_12);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_4);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_5);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_6);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_7);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_8);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_c_9);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_d);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_e);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_f);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_g);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_g_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_g_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_g_4);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_g_5);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_g_6);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_i);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_i_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_i_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_l);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_m);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_n);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_p);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_r);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_s_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_t);
  Py_VISIT(traverse_module_state->__pyx_n_s_AvellanedaMarketMakingStrategy_v);
  Py_VISIT(traverse_module_state->__pyx_n_s_BUY);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Best_Ask);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Best_Bid);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONNECTED);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Calculating_volatility);
  Py_VISIT(traverse_module_state->__pyx_n_s_Clock);
  Py_VISIT(traverse_module_state->__pyx_n_s_CreatedPairOfOrders);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Creating);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Current);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Current_Value);
  Py_VISIT(traverse_module_state->__pyx_n_s_DataFrame);
  Py_VISIT(traverse_module_state->__pyx_n_s_Decimal);
  Py_VISIT(traverse_module_state->__pyx_n_s_Dict);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Dict_str_List_str);
  Py_VISIT(traverse_module_state->__pyx_n_u_Exchange);
  Py_VISIT(traverse_module_state->__pyx_n_s_ExchangeBase);
  Py_VISIT(traverse_module_state->__pyx_n_s_FileNotFoundError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_H_M_S);
  Py_VISIT(traverse_module_state->__pyx_n_s_HangingOrdersTracker);
  Py_VISIT(traverse_module_state->__pyx_n_s_INFO);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImportError);
  Py_VISIT(traverse_module_state->__pyx_n_u_Inf);
  Py_VISIT(traverse_module_state->__pyx_n_s_InstantVolatilityIndicator);
  Py_VISIT(traverse_module_state->__pyx_n_s_LIMIT);
  Py_VISIT(traverse_module_state->__pyx_n_u_Level);
  Py_VISIT(traverse_module_state->__pyx_n_s_LimitOrder);
  Py_VISIT(traverse_module_state->__pyx_n_s_List);
  Py_VISIT(traverse_module_state->__pyx_kp_s_List_Decimal);
  Py_VISIT(traverse_module_state->__pyx_kp_s_List_LimitOrder);
  Py_VISIT(traverse_module_state->__pyx_kp_s_List_MarketTradingPairTuple);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Maker);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Maker_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Maker_buy_order_of);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Maker_sell_order_of);
  Py_VISIT(traverse_module_state->__pyx_n_u_Market);
  Py_VISIT(traverse_module_state->__pyx_n_s_MarketTradingPairTuple);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Market_connectors_are_not_ready);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Markets);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Markets_are_not_ready_No_market);
  Py_VISIT(traverse_module_state->__pyx_n_u_MidPrice);
  Py_VISIT(traverse_module_state->__pyx_n_s_NaN);
  Py_VISIT(traverse_module_state->__pyx_n_s_NetworkStatus);
  Py_VISIT(traverse_module_state->__pyx_kp_u_No_active_maker_orders);
  Py_VISIT(traverse_module_state->__pyx_kp_u_None);
  Py_VISIT(traverse_module_state->__pyx_n_s_OPTION_LOG_ALL);
  Py_VISIT(traverse_module_state->__pyx_n_s_OPTION_LOG_CREATE_ORDER);
  Py_VISIT(traverse_module_state->__pyx_n_s_OPTION_LOG_MAKER_ORDER_FILLED);
  Py_VISIT(traverse_module_state->__pyx_n_s_OPTION_LOG_STATUS_REPORT);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderType);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Orders);
  Py_VISIT(traverse_module_state->__pyx_n_u_Price);
  Py_VISIT(traverse_module_state->__pyx_n_s_PriceSize);
  Py_VISIT(traverse_module_state->__pyx_n_s_Proposal);
  Py_VISIT(traverse_module_state->__pyx_n_s_RADAR_RELAY_TYPE_EXCHANGES);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Recycling_algorithm_time_left_an);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Reserved_Price);
  Py_VISIT(traverse_module_state->__pyx_n_s_SELL);
  Py_VISIT(traverse_module_state->__pyx_n_u_Spread);
  Py_VISIT(traverse_module_state->__pyx_n_s_StrategyBase);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Strategy_parameters);
  Py_VISIT(traverse_module_state->__pyx_n_s_Timestamp);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Total_Balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_TradeType);
  Py_VISIT(traverse_module_state->__pyx_n_s_Tuple);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Tuple_List_Proposal_List_Proposa);
  Py_VISIT(traverse_module_state->__pyx_n_u_Type);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_WARNINGS);
  Py_VISIT(traverse_module_state->__pyx_kp_u_WARNING_Some_markets_are_not_con);
  Py_VISIT(traverse_module_state->__pyx_n_s__133);
  Py_VISIT(traverse_module_state->__pyx_kp_u__15);
  Py_VISIT(traverse_module_state->__pyx_kp_u__16);
  Py_VISIT(traverse_module_state->__pyx_kp_u__17);
  Py_VISIT(traverse_module_state->__pyx_kp_u__19);
  Py_VISIT(traverse_module_state->__pyx_kp_u__20);
  Py_VISIT(traverse_module_state->__pyx_kp_u__21);
  Py_VISIT(traverse_module_state->__pyx_kp_u__22);
  Py_VISIT(traverse_module_state->__pyx_kp_u__23);
  Py_VISIT(traverse_module_state->__pyx_kp_u__24);
  Py_VISIT(traverse_module_state->__pyx_kp_u__25);
  Py_VISIT(traverse_module_state->__pyx_kp_u__26);
  Py_VISIT(traverse_module_state->__pyx_kp_u__27);
  Py_VISIT(traverse_module_state->__pyx_kp_u__28);
  Py_VISIT(traverse_module_state->__pyx_n_s__32);
  Py_VISIT(traverse_module_state->__pyx_n_s__88);
  Py_VISIT(traverse_module_state->__pyx_n_u_a);
  Py_VISIT(traverse_module_state->__pyx_n_s_active_markets);
  Py_VISIT(traverse_module_state->__pyx_n_s_active_non_hanging_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_active_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_active_orders_df);
  Py_VISIT(traverse_module_state->__pyx_n_s_active_orders_df_locals_lambda);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_current_pairs_of_proposal_or);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_sample);
  Py_VISIT(traverse_module_state->__pyx_n_s_add_transaction_costs_to_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_adjusted_available_balance_for_o);
  Py_VISIT(traverse_module_state->__pyx_n_s_age);
  Py_VISIT(traverse_module_state->__pyx_n_s_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_all_markets_ready);
  Py_VISIT(traverse_module_state->__pyx_n_s_all_non_hanging_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_all_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_amount_orig);
  Py_VISIT(traverse_module_state->__pyx_n_s_apply);
  Py_VISIT(traverse_module_state->__pyx_n_s_apply_add_transaction_costs);
  Py_VISIT(traverse_module_state->__pyx_n_s_apply_budget_constraint);
  Py_VISIT(traverse_module_state->__pyx_n_s_apply_order_amount_eta_transform);
  Py_VISIT(traverse_module_state->__pyx_n_s_apply_order_optimization);
  Py_VISIT(traverse_module_state->__pyx_n_s_apply_order_price_modifiers);
  Py_VISIT(traverse_module_state->__pyx_n_s_args);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ask);
  Py_VISIT(traverse_module_state->__pyx_n_s_ask_level_spreads);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ask_orders_at_Size_Price);
  Py_VISIT(traverse_module_state->__pyx_n_s_ask_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_assets_df);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_available_base_balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_available_quote_balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_balance_warning);
  Py_VISIT(traverse_module_state->__pyx_n_u_bamboo_relay);
  Py_VISIT(traverse_module_state->__pyx_n_s_base);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_asset);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_currency);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_best_ask);
  Py_VISIT(traverse_module_state->__pyx_n_s_best_bid);
  Py_VISIT(traverse_module_state->__pyx_kp_u_bid);
  Py_VISIT(traverse_module_state->__pyx_n_s_bid_level_spreads);
  Py_VISIT(traverse_module_state->__pyx_kp_u_bid_orders_at_Size_Price);
  Py_VISIT(traverse_module_state->__pyx_n_s_bid_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_bool);
  Py_VISIT(traverse_module_state->__pyx_n_u_buy);
  Py_VISIT(traverse_module_state->__pyx_n_s_buys);
  Py_VISIT(traverse_module_state->__pyx_n_s_calculate_reserved_price_and_opt);
  Py_VISIT(traverse_module_state->__pyx_n_s_calculate_target_inventory);
  Py_VISIT(traverse_module_state->__pyx_n_s_cancel_active_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_cancel_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_candidate_hanging_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_candidate_hanging_orders_from_pa);
  Py_VISIT(traverse_module_state->__pyx_n_s_ceil);
  Py_VISIT(traverse_module_state->__pyx_n_s_class_getitem);
  Py_VISIT(traverse_module_state->__pyx_n_s_client_order_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_clock);
  Py_VISIT(traverse_module_state->__pyx_n_s_close);
  Py_VISIT(traverse_module_state->__pyx_n_s_closing_time);
  Py_VISIT(traverse_module_state->__pyx_n_s_cls);
  Py_VISIT(traverse_module_state->__pyx_n_s_collect_market_variables);
  Py_VISIT(traverse_module_state->__pyx_n_s_columns);
  Py_VISIT(traverse_module_state->__pyx_n_s_create_base_proposal);
  Py_VISIT(traverse_module_state->__pyx_n_s_create_basic_proposal);
  Py_VISIT(traverse_module_state->__pyx_n_s_create_proposal_based_on_order_l);
  Py_VISIT(traverse_module_state->__pyx_n_s_create_proposal_based_on_order_o);
  Py_VISIT(traverse_module_state->__pyx_n_s_current_created_pairs_of_orders);
  Py_VISIT(traverse_module_state->__pyx_n_u_current_inv);
  Py_VISIT(traverse_module_state->__pyx_n_s_current_prices);
  Py_VISIT(traverse_module_state->__pyx_n_s_current_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_current_vol);
  Py_VISIT(traverse_module_state->__pyx_n_u_current_vol_to_calculation_vol);
  Py_VISIT(traverse_module_state->__pyx_n_s_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_datetime);
  Py_VISIT(traverse_module_state->__pyx_n_s_debug_csv_path);
  Py_VISIT(traverse_module_state->__pyx_n_s_decimal);
  Py_VISIT(traverse_module_state->__pyx_n_s_df);
  Py_VISIT(traverse_module_state->__pyx_n_s_df_header);
  Py_VISIT(traverse_module_state->__pyx_n_s_df_lines);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_n_s_display_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_dump_debug_variables);
  Py_VISIT(traverse_module_state->__pyx_n_s_e);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_enumerate);
  Py_VISIT(traverse_module_state->__pyx_n_u_eta);
  Py_VISIT(traverse_module_state->__pyx_n_s_execute_orders_proposal);
  Py_VISIT(traverse_module_state->__pyx_n_s_exists);
  Py_VISIT(traverse_module_state->__pyx_n_s_exp);
  Py_VISIT(traverse_module_state->__pyx_kp_u_filled);
  Py_VISIT(traverse_module_state->__pyx_n_s_filled_order_delay);
  Py_VISIT(traverse_module_state->__pyx_n_s_first_col_length);
  Py_VISIT(traverse_module_state->__pyx_n_s_float);
  Py_VISIT(traverse_module_state->__pyx_n_s_floor);
  Py_VISIT(traverse_module_state->__pyx_n_s_format);
  Py_VISIT(traverse_module_state->__pyx_n_s_format_status);
  Py_VISIT(traverse_module_state->__pyx_n_s_formatters);
  Py_VISIT(traverse_module_state->__pyx_n_u_gamma);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_getLogger);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_adjusted_available_balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_available_balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_last_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_limit_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_logspaced_level_spreads);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_maker_order_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_mid_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_min_and_max_spread);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_price_for_volume);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_spread);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_volatility);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_global_config_map);
  Py_VISIT(traverse_module_state->__pyx_n_u_hang);
  Py_VISIT(traverse_module_state->__pyx_n_s_hanging_orders_cancel_pct);
  Py_VISIT(traverse_module_state->__pyx_n_s_hanging_orders_enabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_hanging_orders_tracker);
  Py_VISIT(traverse_module_state->__pyx_kp_u_has_been_completely_filled);
  Py_VISIT(traverse_module_state->__pyx_n_s_hb_app_notification);
  Py_VISIT(traverse_module_state->__pyx_n_s_header);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_client_config_global);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_connector_exchange_ba);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_data_type_limit);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_event_events);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_network_iterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_utils);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_strategy___utils___tr);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_strategy_avellaneda_m);
  Py_VISIT(traverse_module_state->__pyx_kp_s_hummingbot_strategy_avellaneda_m_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_strategy_data_types);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_strategy_hanging_orde);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_strategy_market_tradi);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_strategy_strategy_bas);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_strategy_utils);
  Py_VISIT(traverse_module_state->__pyx_n_s_idx);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_in_flight_cancels);
  Py_VISIT(traverse_module_state->__pyx_n_s_index);
  Py_VISIT(traverse_module_state->__pyx_n_s_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_init_params);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_int);
  Py_VISIT(traverse_module_state->__pyx_n_s_inventory_risk_aversion);
  Py_VISIT(traverse_module_state->__pyx_n_s_inventory_target_base_pct);
  Py_VISIT(traverse_module_state->__pyx_n_u_inventory_target_pct);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_algorithm_ready);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_buy);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_debug);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_filled);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_hanging_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_order_id_in_completed_hanging);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_order_id_in_hanging_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_potential_hanging_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_sampling_buffer_full);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_within_tolerance);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_isnan);
  Py_VISIT(traverse_module_state->__pyx_n_s_items);
  Py_VISIT(traverse_module_state->__pyx_n_u_kappa);
  Py_VISIT(traverse_module_state->__pyx_n_s_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_len);
  Py_VISIT(traverse_module_state->__pyx_n_s_level);
  Py_VISIT(traverse_module_state->__pyx_n_s_limit_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_line);
  Py_VISIT(traverse_module_state->__pyx_n_s_lines);
  Py_VISIT(traverse_module_state->__pyx_n_s_ln);
  Py_VISIT(traverse_module_state->__pyx_n_s_log);
  Py_VISIT(traverse_module_state->__pyx_n_s_log_with_clock);
  Py_VISIT(traverse_module_state->__pyx_n_s_logger);
  Py_VISIT(traverse_module_state->__pyx_n_s_logging);
  Py_VISIT(traverse_module_state->__pyx_n_s_logging_options);
  Py_VISIT(traverse_module_state->__pyx_n_s_logspace);
  Py_VISIT(traverse_module_state->__pyx_n_s_lvl_buy);
  Py_VISIT(traverse_module_state->__pyx_n_s_lvl_sell);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_map_df_to_str);
  Py_VISIT(traverse_module_state->__pyx_n_s_market);
  Py_VISIT(traverse_module_state->__pyx_n_s_market_books);
  Py_VISIT(traverse_module_state->__pyx_n_s_market_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_market_info_to_active_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_market_pair_to_active_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_market_status_data_frame);
  Py_VISIT(traverse_module_state->__pyx_n_s_market_trading_pair_tuples);
  Py_VISIT(traverse_module_state->__pyx_n_s_markets_columns);
  Py_VISIT(traverse_module_state->__pyx_n_s_markets_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_markets_df);
  Py_VISIT(traverse_module_state->__pyx_n_s_math);
  Py_VISIT(traverse_module_state->__pyx_n_s_max);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_order_age);
  Py_VISIT(traverse_module_state->__pyx_n_s_max_spread);
  Py_VISIT(traverse_module_state->__pyx_n_u_max_spread);
  Py_VISIT(traverse_module_state->__pyx_n_s_mid_price);
  Py_VISIT(traverse_module_state->__pyx_n_u_mid_price);
  Py_VISIT(traverse_module_state->__pyx_kp_u_mid_price_std_dev);
  Py_VISIT(traverse_module_state->__pyx_n_s_min_spread);
  Py_VISIT(traverse_module_state->__pyx_n_u_min_spread);
  Py_VISIT(traverse_module_state->__pyx_n_s_mode);
  Py_VISIT(traverse_module_state->__pyx_n_s_msg);
  Py_VISIT(traverse_module_state->__pyx_kp_u_n_a);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_name_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_nan);
  Py_VISIT(traverse_module_state->__pyx_n_u_nan);
  Py_VISIT(traverse_module_state->__pyx_n_s_network_status);
  Py_VISIT(traverse_module_state->__pyx_n_s_network_warning);
  Py_VISIT(traverse_module_state->__pyx_n_s_new_ask);
  Py_VISIT(traverse_module_state->__pyx_n_s_new_bid);
  Py_VISIT(traverse_module_state->__pyx_n_s_no_sells);
  Py_VISIT(traverse_module_state->__pyx_n_s_non_hanging);
  Py_VISIT(traverse_module_state->__pyx_n_s_normalize);
  Py_VISIT(traverse_module_state->__pyx_n_s_notify_hb_app);
  Py_VISIT(traverse_module_state->__pyx_n_s_notify_hb_app_with_timestamp);
  Py_VISIT(traverse_module_state->__pyx_n_s_np);
  Py_VISIT(traverse_module_state->__pyx_n_s_num);
  Py_VISIT(traverse_module_state->__pyx_n_s_numpy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy_core_multiarray_failed_to);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy_core_umath_failed_to_impor);
  Py_VISIT(traverse_module_state->__pyx_n_s_o);
  Py_VISIT(traverse_module_state->__pyx_n_u_optimal_ask);
  Py_VISIT(traverse_module_state->__pyx_n_s_optimal_ask_spread);
  Py_VISIT(traverse_module_state->__pyx_kp_u_optimal_ask_to_mid);
  Py_VISIT(traverse_module_state->__pyx_n_u_optimal_bid);
  Py_VISIT(traverse_module_state->__pyx_n_s_optimal_bid_spread);
  Py_VISIT(traverse_module_state->__pyx_kp_u_optimal_bid_to_mid);
  Py_VISIT(traverse_module_state->__pyx_n_u_optimal_spread);
  Py_VISIT(traverse_module_state->__pyx_kp_u_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_age);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_amount_shape_factor);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_book_depth_factor);
  Py_VISIT(traverse_module_state->__pyx_kp_u_order_book_depth_factor_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_levels);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_optimization_enabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_override);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_refresh_time);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_refresh_tolerance_pct);
  Py_VISIT(traverse_module_state->__pyx_n_s_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_os);
  Py_VISIT(traverse_module_state->__pyx_n_s_p);
  Py_VISIT(traverse_module_state->__pyx_n_s_pandas);
  Py_VISIT(traverse_module_state->__pyx_n_s_parameters_based_on_spread);
  Py_VISIT(traverse_module_state->__pyx_n_s_path);
  Py_VISIT(traverse_module_state->__pyx_n_s_pd);
  Py_VISIT(traverse_module_state->__pyx_kp_s_pd_DataFrame);
  Py_VISIT(traverse_module_state->__pyx_n_s_percent);
  Py_VISIT(traverse_module_state->__pyx_n_s_pmm_logger);
  Py_VISIT(traverse_module_state->__pyx_n_s_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_process_tick);
  Py_VISIT(traverse_module_state->__pyx_n_s_proposal);
  Py_VISIT(traverse_module_state->__pyx_n_s_proposal_prices);
  Py_VISIT(traverse_module_state->__pyx_n_s_pure_mm_assets_df);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_q);
  Py_VISIT(traverse_module_state->__pyx_n_s_quantity);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_asset);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_currency);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_ratio);
  Py_VISIT(traverse_module_state->__pyx_n_u_radar_relay);
  Py_VISIT(traverse_module_state->__pyx_n_s_range);
  Py_VISIT(traverse_module_state->__pyx_n_s_ready);
  Py_VISIT(traverse_module_state->__pyx_n_s_recalculate_parameters);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_ref_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_reference_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_regex);
  Py_VISIT(traverse_module_state->__pyx_n_s_register_events);
  Py_VISIT(traverse_module_state->__pyx_n_s_replace);
  Py_VISIT(traverse_module_state->__pyx_n_u_reserved_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_result_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_return);
  Py_VISIT(traverse_module_state->__pyx_n_s_reverse);
  Py_VISIT(traverse_module_state->__pyx_n_s_risk_factor);
  Py_VISIT(traverse_module_state->__pyx_kp_u_risk_factor_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_round);
  Py_VISIT(traverse_module_state->__pyx_n_u_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_s_decimal_neg_one);
  Py_VISIT(traverse_module_state->__pyx_n_s_s_decimal_one);
  Py_VISIT(traverse_module_state->__pyx_n_s_s_decimal_zero);
  Py_VISIT(traverse_module_state->__pyx_n_s_seconds);
  Py_VISIT(traverse_module_state->__pyx_kp_u_seconds_to_start_trading);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self__events_cannot_be_converted);
  Py_VISIT(traverse_module_state->__pyx_n_u_sell);
  Py_VISIT(traverse_module_state->__pyx_n_s_sell_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_sells);
  Py_VISIT(traverse_module_state->__pyx_n_s_send);
  Py_VISIT(traverse_module_state->__pyx_n_s_set_timers);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_should_wait_order_cancel_confirm);
  Py_VISIT(traverse_module_state->__pyx_n_s_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_sort);
  Py_VISIT(traverse_module_state->__pyx_n_s_sorted);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_split);
  Py_VISIT(traverse_module_state->__pyx_n_s_spread);
  Py_VISIT(traverse_module_state->__pyx_n_u_spread);
  Py_VISIT(traverse_module_state->__pyx_n_s_start);
  Py_VISIT(traverse_module_state->__pyx_n_s_status_report_interval);
  Py_VISIT(traverse_module_state->__pyx_n_s_str);
  Py_VISIT(traverse_module_state->__pyx_n_s_strftime);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_super);
  Py_VISIT(traverse_module_state->__pyx_n_u_target_inv);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_throw);
  Py_VISIT(traverse_module_state->__pyx_n_s_time);
  Py_VISIT(traverse_module_state->__pyx_n_u_time_left_fraction);
  Py_VISIT(traverse_module_state->__pyx_kp_u_time_until_end_of_trading_cycle);
  Py_VISIT(traverse_module_state->__pyx_n_s_timedelta);
  Py_VISIT(traverse_module_state->__pyx_n_s_timestamp);
  Py_VISIT(traverse_module_state->__pyx_n_s_to_create_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_to_csv);
  Py_VISIT(traverse_module_state->__pyx_n_s_to_show_current_pct);
  Py_VISIT(traverse_module_state->__pyx_n_s_to_string);
  Py_VISIT(traverse_module_state->__pyx_n_s_total_in_quote);
  Py_VISIT(traverse_module_state->__pyx_n_s_trade_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_trading_pair);
  Py_VISIT(traverse_module_state->__pyx_n_s_typing);
  Py_VISIT(traverse_module_state->__pyx_n_s_unit);
  Py_VISIT(traverse_module_state->__pyx_n_s_unlink);
  Py_VISIT(traverse_module_state->__pyx_n_s_unregister_events);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_strategy_orders_with_equi);
  Py_VISIT(traverse_module_state->__pyx_n_s_upper);
  Py_VISIT(traverse_module_state->__pyx_n_s_use_coordinator);
  Py_VISIT(traverse_module_state->__pyx_n_s_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_values);
  Py_VISIT(traverse_module_state->__pyx_kp_u_vol);
  Py_VISIT(traverse_module_state->__pyx_n_s_vol_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_vol_to_spread_multiplier);
  Py_VISIT(traverse_module_state->__pyx_n_u_vol_to_spread_multiplier);
  Py_VISIT(traverse_module_state->__pyx_kp_u_volatility);
  Py_VISIT(traverse_module_state->__pyx_n_s_volatility_buffer_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_volatility_diff_from_last_parame);
  Py_VISIT(traverse_module_state->__pyx_n_s_volatility_pct);
  Py_VISIT(traverse_module_state->__pyx_n_s_volatility_sensibility);
  Py_VISIT(traverse_module_state->__pyx_n_s_warning);
  Py_VISIT(traverse_module_state->__pyx_n_s_warning_lines);
  Py_VISIT(traverse_module_state->__pyx_n_s_x);
  Py_VISIT(traverse_module_state->__pyx_n_s_zip);
  Py_VISIT(traverse_module_state->__pyx_float_1e6);
  Py_VISIT(traverse_module_state->__pyx_float_30_0);
  Py_VISIT(traverse_module_state->__pyx_float_60_0);
  Py_VISIT(traverse_module_state->__pyx_float_100_0);
  Py_VISIT(traverse_module_state->__pyx_float_900_0);
  Py_VISIT(traverse_module_state->__pyx_float_1800_0);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_2);
  Py_VISIT(traverse_module_state->__pyx_int_4);
  Py_VISIT(traverse_module_state->__pyx_int_5);
  Py_VISIT(traverse_module_state->__pyx_int_8);
  Py_VISIT(traverse_module_state->__pyx_int_16);
  Py_VISIT(traverse_module_state->__pyx_int_30);
  Py_VISIT(traverse_module_state->__pyx_int_32);
  Py_VISIT(traverse_module_state->__pyx_int_100);
  Py_VISIT(traverse_module_state->__pyx_int_1000);
  Py_VISIT(traverse_module_state->__pyx_int_9223372036854775807);
  Py_VISIT(traverse_module_state->__pyx_int_neg_1);
  Py_VISIT(traverse_module_state->__pyx_int_neg_16);
  Py_VISIT(traverse_module_state->__pyx_k_);
  Py_VISIT(traverse_module_state->__pyx_k__2);
  Py_VISIT(traverse_module_state->__pyx_k__3);
  Py_VISIT(traverse_module_state->__pyx_k__4);
  Py_VISIT(traverse_module_state->__pyx_k__5);
  Py_VISIT(traverse_module_state->__pyx_k__6);
  Py_VISIT(traverse_module_state->__pyx_k__7);
  Py_VISIT(traverse_module_state->__pyx_k__8);
  Py_VISIT(traverse_module_state->__pyx_k__9);
  Py_VISIT(traverse_module_state->__pyx_k__10);
  Py_VISIT(traverse_module_state->__pyx_k__11);
  Py_VISIT(traverse_module_state->__pyx_k__12);
  Py_VISIT(traverse_module_state->__pyx_k__13);
  Py_VISIT(traverse_module_state->__pyx_k__14);
  Py_VISIT(traverse_module_state->__pyx_slice__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__29);
  Py_VISIT(traverse_module_state->__pyx_tuple__30);
  Py_VISIT(traverse_module_state->__pyx_tuple__31);
  Py_VISIT(traverse_module_state->__pyx_tuple__33);
  Py_VISIT(traverse_module_state->__pyx_tuple__34);
  Py_VISIT(traverse_module_state->__pyx_tuple__35);
  Py_VISIT(traverse_module_state->__pyx_tuple__36);
  Py_VISIT(traverse_module_state->__pyx_tuple__38);
  Py_VISIT(traverse_module_state->__pyx_tuple__39);
  Py_VISIT(traverse_module_state->__pyx_tuple__40);
  Py_VISIT(traverse_module_state->__pyx_tuple__41);
  Py_VISIT(traverse_module_state->__pyx_tuple__42);
  Py_VISIT(traverse_module_state->__pyx_tuple__43);
  Py_VISIT(traverse_module_state->__pyx_tuple__44);
  Py_VISIT(traverse_module_state->__pyx_tuple__45);
  Py_VISIT(traverse_module_state->__pyx_tuple__46);
  Py_VISIT(traverse_module_state->__pyx_tuple__48);
  Py_VISIT(traverse_module_state->__pyx_tuple__50);
  Py_VISIT(traverse_module_state->__pyx_tuple__52);
  Py_VISIT(traverse_module_state->__pyx_tuple__54);
  Py_VISIT(traverse_module_state->__pyx_tuple__56);
  Py_VISIT(traverse_module_state->__pyx_tuple__58);
  Py_VISIT(traverse_module_state->__pyx_tuple__60);
  Py_VISIT(traverse_module_state->__pyx_tuple__62);
  Py_VISIT(traverse_module_state->__pyx_tuple__64);
  Py_VISIT(traverse_module_state->__pyx_tuple__66);
  Py_VISIT(traverse_module_state->__pyx_tuple__68);
  Py_VISIT(traverse_module_state->__pyx_tuple__70);
  Py_VISIT(traverse_module_state->__pyx_tuple__72);
  Py_VISIT(traverse_module_state->__pyx_tuple__74);
  Py_VISIT(traverse_module_state->__pyx_tuple__76);
  Py_VISIT(traverse_module_state->__pyx_tuple__78);
  Py_VISIT(traverse_module_state->__pyx_tuple__80);
  Py_VISIT(traverse_module_state->__pyx_tuple__82);
  Py_VISIT(traverse_module_state->__pyx_tuple__84);
  Py_VISIT(traverse_module_state->__pyx_tuple__86);
  Py_VISIT(traverse_module_state->__pyx_tuple__89);
  Py_VISIT(traverse_module_state->__pyx_tuple__91);
  Py_VISIT(traverse_module_state->__pyx_tuple__93);
  Py_VISIT(traverse_module_state->__pyx_tuple__95);
  Py_VISIT(traverse_module_state->__pyx_tuple__97);
  Py_VISIT(traverse_module_state->__pyx_tuple__99);
  Py_VISIT(traverse_module_state->__pyx_tuple__101);
  Py_VISIT(traverse_module_state->__pyx_tuple__103);
  Py_VISIT(traverse_module_state->__pyx_tuple__105);
  Py_VISIT(traverse_module_state->__pyx_tuple__107);
  Py_VISIT(traverse_module_state->__pyx_tuple__109);
  Py_VISIT(traverse_module_state->__pyx_tuple__111);
  Py_VISIT(traverse_module_state->__pyx_tuple__113);
  Py_VISIT(traverse_module_state->__pyx_tuple__115);
  Py_VISIT(traverse_module_state->__pyx_tuple__117);
  Py_VISIT(traverse_module_state->__pyx_tuple__119);
  Py_VISIT(traverse_module_state->__pyx_tuple__121);
  Py_VISIT(traverse_module_state->__pyx_tuple__123);
  Py_VISIT(traverse_module_state->__pyx_tuple__125);
  Py_VISIT(traverse_module_state->__pyx_tuple__127);
  Py_VISIT(traverse_module_state->__pyx_tuple__129);
  Py_VISIT(traverse_module_state->__pyx_tuple__131);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__47);
  Py_VISIT(traverse_module_state->__pyx_codeobj__49);
  Py_VISIT(traverse_module_state->__pyx_codeobj__51);
  Py_VISIT(traverse_module_state->__pyx_codeobj__53);
  Py_VISIT(traverse_module_state->__pyx_codeobj__55);
  Py_VISIT(traverse_module_state->__pyx_codeobj__57);
  Py_VISIT(traverse_module_state->__pyx_codeobj__59);
  Py_VISIT(traverse_module_state->__pyx_codeobj__61);
  Py_VISIT(traverse_module_state->__pyx_codeobj__63);
  Py_VISIT(traverse_module_state->__pyx_codeobj__65);
  Py_VISIT(traverse_module_state->__pyx_codeobj__67);
  Py_VISIT(traverse_module_state->__pyx_codeobj__69);
  Py_VISIT(traverse_module_state->__pyx_codeobj__71);
  Py_VISIT(traverse_module_state->__pyx_codeobj__73);
  Py_VISIT(traverse_module_state->__pyx_codeobj__75);
  Py_VISIT(traverse_module_state->__pyx_codeobj__77);
  Py_VISIT(traverse_module_state->__pyx_codeobj__79);
  Py_VISIT(traverse_module_state->__pyx_codeobj__81);
  Py_VISIT(traverse_module_state->__pyx_codeobj__83);
  Py_VISIT(traverse_module_state->__pyx_codeobj__85);
  Py_VISIT(traverse_module_state->__pyx_codeobj__87);
  Py_VISIT(traverse_module_state->__pyx_codeobj__90);
  Py_VISIT(traverse_module_state->__pyx_codeobj__92);
  Py_VISIT(traverse_module_state->__pyx_codeobj__94);
  Py_VISIT(traverse_module_state->__pyx_codeobj__96);
  Py_VISIT(traverse_module_state->__pyx_codeobj__98);
  Py_VISIT(traverse_module_state->__pyx_codeobj__100);
  Py_VISIT(traverse_module_state->__pyx_codeobj__102);
  Py_VISIT(traverse_module_state->__pyx_codeobj__104);
  Py_VISIT(traverse_module_state->__pyx_codeobj__106);
  Py_VISIT(traverse_module_state->__pyx_codeobj__108);
  Py_VISIT(traverse_module_state->__pyx_codeobj__110);
  Py_VISIT(traverse_module_state->__pyx_codeobj__112);
  Py_VISIT(traverse_module_state->__pyx_codeobj__114);
  Py_VISIT(traverse_module_state->__pyx_codeobj__116);
  Py_VISIT(traverse_module_state->__pyx_codeobj__118);
  Py_VISIT(traverse_module_state->__pyx_codeobj__120);
  Py_VISIT(traverse_module_state->__pyx_codeobj__122);
  Py_VISIT(traverse_module_state->__pyx_codeobj__124);
  Py_VISIT(traverse_module_state->__pyx_codeobj__126);
  Py_VISIT(traverse_module_state->__pyx_codeobj__128);
  Py_VISIT(traverse_module_state->__pyx_codeobj__130);
  Py_VISIT(traverse_module_state->__pyx_codeobj__132);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#if CYTHON_COMPILING_IN_LIMITED_API
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#define __pyx_ptype_10hummingbot_4core_5clock_Clock __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5clock_Clock
#define __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener
#define __pyx_ptype_10hummingbot_4core_6pubsub_PubSub __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_6pubsub_PubSub
#define __pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator
#define __pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder
#define __pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker
#define __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase
#define __pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter
#define __pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger
#define __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult
#define __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#define __pyx_ptype_5numpy_dtype __pyx_mstate_global->__pyx_ptype_5numpy_dtype
#define __pyx_ptype_5numpy_flatiter __pyx_mstate_global->__pyx_ptype_5numpy_flatiter
#define __pyx_ptype_5numpy_broadcast __pyx_mstate_global->__pyx_ptype_5numpy_broadcast
#define __pyx_ptype_5numpy_ndarray __pyx_mstate_global->__pyx_ptype_5numpy_ndarray
#define __pyx_ptype_5numpy_generic __pyx_mstate_global->__pyx_ptype_5numpy_generic
#define __pyx_ptype_5numpy_number __pyx_mstate_global->__pyx_ptype_5numpy_number
#define __pyx_ptype_5numpy_integer __pyx_mstate_global->__pyx_ptype_5numpy_integer
#define __pyx_ptype_5numpy_signedinteger __pyx_mstate_global->__pyx_ptype_5numpy_signedinteger
#define __pyx_ptype_5numpy_unsignedinteger __pyx_mstate_global->__pyx_ptype_5numpy_unsignedinteger
#define __pyx_ptype_5numpy_inexact __pyx_mstate_global->__pyx_ptype_5numpy_inexact
#define __pyx_ptype_5numpy_floating __pyx_mstate_global->__pyx_ptype_5numpy_floating
#define __pyx_ptype_5numpy_complexfloating __pyx_mstate_global->__pyx_ptype_5numpy_complexfloating
#define __pyx_ptype_5numpy_flexible __pyx_mstate_global->__pyx_ptype_5numpy_flexible
#define __pyx_ptype_5numpy_character __pyx_mstate_global->__pyx_ptype_5numpy_character
#define __pyx_ptype_5numpy_ufunc __pyx_mstate_global->__pyx_ptype_5numpy_ufunc
#define __pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook
#define __pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator
#define __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase
#define __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase
#define __pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy
#define __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy
#define __pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start
#define __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start
#define __pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr
#define __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr
#define __pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal
#define __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal
#define __pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr
#define __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr
#define __pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr __pyx_mstate_global->__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr
#define __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr __pyx_mstate_global->__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr
#define __pyx_kp_u_0_005 __pyx_mstate_global->__pyx_kp_u_0_005
#define __pyx_kp_u_0_1 __pyx_mstate_global->__pyx_kp_u_0_1
#define __pyx_kp_u_0_15 __pyx_mstate_global->__pyx_kp_u_0_15
#define __pyx_kp_u_0_2 __pyx_mstate_global->__pyx_kp_u_0_2
#define __pyx_kp_u_0_5 __pyx_mstate_global->__pyx_kp_u_0_5
#define __pyx_kp_u_0x_active_cancels __pyx_mstate_global->__pyx_kp_u_0x_active_cancels
#define __pyx_kp_u_1 __pyx_mstate_global->__pyx_kp_u_1
#define __pyx_kp_u_10 __pyx_mstate_global->__pyx_kp_u_10
#define __pyx_kp_u_100 __pyx_mstate_global->__pyx_kp_u_100
#define __pyx_kp_u_1_2 __pyx_mstate_global->__pyx_kp_u_1_2
#define __pyx_kp_u_1_3 __pyx_mstate_global->__pyx_kp_u_1_3
#define __pyx_kp_u_1e100 __pyx_mstate_global->__pyx_kp_u_1e100
#define __pyx_kp_u_1e5 __pyx_mstate_global->__pyx_kp_u_1e5
#define __pyx_kp_u_2 __pyx_mstate_global->__pyx_kp_u_2
#define __pyx_kp_u_2_2 __pyx_mstate_global->__pyx_kp_u_2_2
#define __pyx_kp_u_3f __pyx_mstate_global->__pyx_kp_u_3f
#define __pyx_kp_u_4f __pyx_mstate_global->__pyx_kp_u_4f
#define __pyx_kp_u_5E __pyx_mstate_global->__pyx_kp_u_5E
#define __pyx_n_u_Age __pyx_mstate_global->__pyx_n_u_Age
#define __pyx_kp_u_Amount_Adj __pyx_mstate_global->__pyx_kp_u_Amount_Adj
#define __pyx_kp_u_Amount_Orig __pyx_mstate_global->__pyx_kp_u_Amount_Orig
#define __pyx_kp_u_Assets __pyx_mstate_global->__pyx_kp_u_Assets
#define __pyx_kp_u_Available_Balance __pyx_mstate_global->__pyx_kp_u_Available_Balance
#define __pyx_n_s_AvellanedaMarketMakingStrategy __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy
#define __pyx_n_s_AvellanedaMarketMakingStrategy_2 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_2
#define __pyx_n_s_AvellanedaMarketMakingStrategy_3 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_3
#define __pyx_n_s_AvellanedaMarketMakingStrategy_4 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_4
#define __pyx_n_s_AvellanedaMarketMakingStrategy_5 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_5
#define __pyx_n_s_AvellanedaMarketMakingStrategy_a __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_a
#define __pyx_n_s_AvellanedaMarketMakingStrategy_a_2 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_a_2
#define __pyx_n_s_AvellanedaMarketMakingStrategy_a_3 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_a_3
#define __pyx_n_s_AvellanedaMarketMakingStrategy_a_4 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_a_4
#define __pyx_n_s_AvellanedaMarketMakingStrategy_a_5 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_a_5
#define __pyx_n_s_AvellanedaMarketMakingStrategy_a_6 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_a_6
#define __pyx_n_s_AvellanedaMarketMakingStrategy_a_7 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_a_7
#define __pyx_n_s_AvellanedaMarketMakingStrategy_a_8 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_a_8
#define __pyx_n_s_AvellanedaMarketMakingStrategy_c __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_c
#define __pyx_n_s_AvellanedaMarketMakingStrategy_c_10 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_c_10
#define __pyx_n_s_AvellanedaMarketMakingStrategy_c_11 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_c_11
#define __pyx_n_s_AvellanedaMarketMakingStrategy_c_12 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_c_12
#define __pyx_n_s_AvellanedaMarketMakingStrategy_c_2 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_c_2
#define __pyx_n_s_AvellanedaMarketMakingStrategy_c_3 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_c_3
#define __pyx_n_s_AvellanedaMarketMakingStrategy_c_4 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_c_4
#define __pyx_n_s_AvellanedaMarketMakingStrategy_c_5 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_c_5
#define __pyx_n_s_AvellanedaMarketMakingStrategy_c_6 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_c_6
#define __pyx_n_s_AvellanedaMarketMakingStrategy_c_7 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_c_7
#define __pyx_n_s_AvellanedaMarketMakingStrategy_c_8 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_c_8
#define __pyx_n_s_AvellanedaMarketMakingStrategy_c_9 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_c_9
#define __pyx_n_s_AvellanedaMarketMakingStrategy_d __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_d
#define __pyx_n_s_AvellanedaMarketMakingStrategy_e __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_e
#define __pyx_n_s_AvellanedaMarketMakingStrategy_f __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_f
#define __pyx_n_s_AvellanedaMarketMakingStrategy_g __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_g
#define __pyx_n_s_AvellanedaMarketMakingStrategy_g_2 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_g_2
#define __pyx_n_s_AvellanedaMarketMakingStrategy_g_3 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_g_3
#define __pyx_n_s_AvellanedaMarketMakingStrategy_g_4 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_g_4
#define __pyx_n_s_AvellanedaMarketMakingStrategy_g_5 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_g_5
#define __pyx_n_s_AvellanedaMarketMakingStrategy_g_6 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_g_6
#define __pyx_n_s_AvellanedaMarketMakingStrategy_i __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_i
#define __pyx_n_s_AvellanedaMarketMakingStrategy_i_2 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_i_2
#define __pyx_n_s_AvellanedaMarketMakingStrategy_i_3 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_i_3
#define __pyx_n_s_AvellanedaMarketMakingStrategy_l __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_l
#define __pyx_n_s_AvellanedaMarketMakingStrategy_m __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_m
#define __pyx_n_s_AvellanedaMarketMakingStrategy_n __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_n
#define __pyx_n_s_AvellanedaMarketMakingStrategy_p __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_p
#define __pyx_n_s_AvellanedaMarketMakingStrategy_r __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_r
#define __pyx_n_s_AvellanedaMarketMakingStrategy_s __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_s
#define __pyx_n_s_AvellanedaMarketMakingStrategy_s_2 __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_s_2
#define __pyx_n_s_AvellanedaMarketMakingStrategy_t __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_t
#define __pyx_n_s_AvellanedaMarketMakingStrategy_v __pyx_mstate_global->__pyx_n_s_AvellanedaMarketMakingStrategy_v
#define __pyx_n_s_BUY __pyx_mstate_global->__pyx_n_s_BUY
#define __pyx_kp_u_Best_Ask __pyx_mstate_global->__pyx_kp_u_Best_Ask
#define __pyx_kp_u_Best_Bid __pyx_mstate_global->__pyx_kp_u_Best_Bid
#define __pyx_n_s_CONNECTED __pyx_mstate_global->__pyx_n_s_CONNECTED
#define __pyx_kp_u_Calculating_volatility __pyx_mstate_global->__pyx_kp_u_Calculating_volatility
#define __pyx_n_s_Clock __pyx_mstate_global->__pyx_n_s_Clock
#define __pyx_n_s_CreatedPairOfOrders __pyx_mstate_global->__pyx_n_s_CreatedPairOfOrders
#define __pyx_kp_u_Creating __pyx_mstate_global->__pyx_kp_u_Creating
#define __pyx_kp_u_Current __pyx_mstate_global->__pyx_kp_u_Current
#define __pyx_kp_u_Current_Value __pyx_mstate_global->__pyx_kp_u_Current_Value
#define __pyx_n_s_DataFrame __pyx_mstate_global->__pyx_n_s_DataFrame
#define __pyx_n_s_Decimal __pyx_mstate_global->__pyx_n_s_Decimal
#define __pyx_n_s_Dict __pyx_mstate_global->__pyx_n_s_Dict
#define __pyx_kp_s_Dict_str_List_str __pyx_mstate_global->__pyx_kp_s_Dict_str_List_str
#define __pyx_n_u_Exchange __pyx_mstate_global->__pyx_n_u_Exchange
#define __pyx_n_s_ExchangeBase __pyx_mstate_global->__pyx_n_s_ExchangeBase
#define __pyx_n_s_FileNotFoundError __pyx_mstate_global->__pyx_n_s_FileNotFoundError
#define __pyx_kp_u_H_M_S __pyx_mstate_global->__pyx_kp_u_H_M_S
#define __pyx_n_s_HangingOrdersTracker __pyx_mstate_global->__pyx_n_s_HangingOrdersTracker
#define __pyx_n_s_INFO __pyx_mstate_global->__pyx_n_s_INFO
#define __pyx_n_s_ImportError __pyx_mstate_global->__pyx_n_s_ImportError
#define __pyx_n_u_Inf __pyx_mstate_global->__pyx_n_u_Inf
#define __pyx_n_s_InstantVolatilityIndicator __pyx_mstate_global->__pyx_n_s_InstantVolatilityIndicator
#define __pyx_n_s_LIMIT __pyx_mstate_global->__pyx_n_s_LIMIT
#define __pyx_n_u_Level __pyx_mstate_global->__pyx_n_u_Level
#define __pyx_n_s_LimitOrder __pyx_mstate_global->__pyx_n_s_LimitOrder
#define __pyx_n_s_List __pyx_mstate_global->__pyx_n_s_List
#define __pyx_kp_s_List_Decimal __pyx_mstate_global->__pyx_kp_s_List_Decimal
#define __pyx_kp_s_List_LimitOrder __pyx_mstate_global->__pyx_kp_s_List_LimitOrder
#define __pyx_kp_s_List_MarketTradingPairTuple __pyx_mstate_global->__pyx_kp_s_List_MarketTradingPairTuple
#define __pyx_kp_u_Maker __pyx_mstate_global->__pyx_kp_u_Maker
#define __pyx_kp_u_Maker_2 __pyx_mstate_global->__pyx_kp_u_Maker_2
#define __pyx_kp_u_Maker_buy_order_of __pyx_mstate_global->__pyx_kp_u_Maker_buy_order_of
#define __pyx_kp_u_Maker_sell_order_of __pyx_mstate_global->__pyx_kp_u_Maker_sell_order_of
#define __pyx_n_u_Market __pyx_mstate_global->__pyx_n_u_Market
#define __pyx_n_s_MarketTradingPairTuple __pyx_mstate_global->__pyx_n_s_MarketTradingPairTuple
#define __pyx_kp_u_Market_connectors_are_not_ready __pyx_mstate_global->__pyx_kp_u_Market_connectors_are_not_ready
#define __pyx_kp_u_Markets __pyx_mstate_global->__pyx_kp_u_Markets
#define __pyx_kp_u_Markets_are_not_ready_No_market __pyx_mstate_global->__pyx_kp_u_Markets_are_not_ready_No_market
#define __pyx_n_u_MidPrice __pyx_mstate_global->__pyx_n_u_MidPrice
#define __pyx_n_s_NaN __pyx_mstate_global->__pyx_n_s_NaN
#define __pyx_n_s_NetworkStatus __pyx_mstate_global->__pyx_n_s_NetworkStatus
#define __pyx_kp_u_No_active_maker_orders __pyx_mstate_global->__pyx_kp_u_No_active_maker_orders
#define __pyx_kp_u_None __pyx_mstate_global->__pyx_kp_u_None
#define __pyx_n_s_OPTION_LOG_ALL __pyx_mstate_global->__pyx_n_s_OPTION_LOG_ALL
#define __pyx_n_s_OPTION_LOG_CREATE_ORDER __pyx_mstate_global->__pyx_n_s_OPTION_LOG_CREATE_ORDER
#define __pyx_n_s_OPTION_LOG_MAKER_ORDER_FILLED __pyx_mstate_global->__pyx_n_s_OPTION_LOG_MAKER_ORDER_FILLED
#define __pyx_n_s_OPTION_LOG_STATUS_REPORT __pyx_mstate_global->__pyx_n_s_OPTION_LOG_STATUS_REPORT
#define __pyx_n_s_OrderType __pyx_mstate_global->__pyx_n_s_OrderType
#define __pyx_kp_u_Orders __pyx_mstate_global->__pyx_kp_u_Orders
#define __pyx_n_u_Price __pyx_mstate_global->__pyx_n_u_Price
#define __pyx_n_s_PriceSize __pyx_mstate_global->__pyx_n_s_PriceSize
#define __pyx_n_s_Proposal __pyx_mstate_global->__pyx_n_s_Proposal
#define __pyx_n_s_RADAR_RELAY_TYPE_EXCHANGES __pyx_mstate_global->__pyx_n_s_RADAR_RELAY_TYPE_EXCHANGES
#define __pyx_kp_u_Recycling_algorithm_time_left_an __pyx_mstate_global->__pyx_kp_u_Recycling_algorithm_time_left_an
#define __pyx_kp_u_Reserved_Price __pyx_mstate_global->__pyx_kp_u_Reserved_Price
#define __pyx_n_s_SELL __pyx_mstate_global->__pyx_n_s_SELL
#define __pyx_n_u_Spread __pyx_mstate_global->__pyx_n_u_Spread
#define __pyx_n_s_StrategyBase __pyx_mstate_global->__pyx_n_s_StrategyBase
#define __pyx_kp_u_Strategy_parameters __pyx_mstate_global->__pyx_kp_u_Strategy_parameters
#define __pyx_n_s_Timestamp __pyx_mstate_global->__pyx_n_s_Timestamp
#define __pyx_kp_u_Total_Balance __pyx_mstate_global->__pyx_kp_u_Total_Balance
#define __pyx_n_s_TradeType __pyx_mstate_global->__pyx_n_s_TradeType
#define __pyx_n_s_Tuple __pyx_mstate_global->__pyx_n_s_Tuple
#define __pyx_kp_s_Tuple_List_Proposal_List_Proposa __pyx_mstate_global->__pyx_kp_s_Tuple_List_Proposal_List_Proposa
#define __pyx_n_u_Type __pyx_mstate_global->__pyx_n_u_Type
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_kp_u_WARNINGS __pyx_mstate_global->__pyx_kp_u_WARNINGS
#define __pyx_kp_u_WARNING_Some_markets_are_not_con __pyx_mstate_global->__pyx_kp_u_WARNING_Some_markets_are_not_con
#define __pyx_n_s__133 __pyx_mstate_global->__pyx_n_s__133
#define __pyx_kp_u__15 __pyx_mstate_global->__pyx_kp_u__15
#define __pyx_kp_u__16 __pyx_mstate_global->__pyx_kp_u__16
#define __pyx_kp_u__17 __pyx_mstate_global->__pyx_kp_u__17
#define __pyx_kp_u__19 __pyx_mstate_global->__pyx_kp_u__19
#define __pyx_kp_u__20 __pyx_mstate_global->__pyx_kp_u__20
#define __pyx_kp_u__21 __pyx_mstate_global->__pyx_kp_u__21
#define __pyx_kp_u__22 __pyx_mstate_global->__pyx_kp_u__22
#define __pyx_kp_u__23 __pyx_mstate_global->__pyx_kp_u__23
#define __pyx_kp_u__24 __pyx_mstate_global->__pyx_kp_u__24
#define __pyx_kp_u__25 __pyx_mstate_global->__pyx_kp_u__25
#define __pyx_kp_u__26 __pyx_mstate_global->__pyx_kp_u__26
#define __pyx_kp_u__27 __pyx_mstate_global->__pyx_kp_u__27
#define __pyx_kp_u__28 __pyx_mstate_global->__pyx_kp_u__28
#define __pyx_n_s__32 __pyx_mstate_global->__pyx_n_s__32
#define __pyx_n_s__88 __pyx_mstate_global->__pyx_n_s__88
#define __pyx_n_u_a __pyx_mstate_global->__pyx_n_u_a
#define __pyx_n_s_active_markets __pyx_mstate_global->__pyx_n_s_active_markets
#define __pyx_n_s_active_non_hanging_orders __pyx_mstate_global->__pyx_n_s_active_non_hanging_orders
#define __pyx_n_s_active_orders __pyx_mstate_global->__pyx_n_s_active_orders
#define __pyx_n_s_active_orders_df __pyx_mstate_global->__pyx_n_s_active_orders_df
#define __pyx_n_s_active_orders_df_locals_lambda __pyx_mstate_global->__pyx_n_s_active_orders_df_locals_lambda
#define __pyx_n_s_add_current_pairs_of_proposal_or __pyx_mstate_global->__pyx_n_s_add_current_pairs_of_proposal_or
#define __pyx_n_s_add_order __pyx_mstate_global->__pyx_n_s_add_order
#define __pyx_n_s_add_sample __pyx_mstate_global->__pyx_n_s_add_sample
#define __pyx_n_s_add_transaction_costs_to_orders __pyx_mstate_global->__pyx_n_s_add_transaction_costs_to_orders
#define __pyx_n_s_adjusted_available_balance_for_o __pyx_mstate_global->__pyx_n_s_adjusted_available_balance_for_o
#define __pyx_n_s_age __pyx_mstate_global->__pyx_n_s_age
#define __pyx_n_s_all __pyx_mstate_global->__pyx_n_s_all
#define __pyx_n_s_all_markets_ready __pyx_mstate_global->__pyx_n_s_all_markets_ready
#define __pyx_n_s_all_non_hanging_orders __pyx_mstate_global->__pyx_n_s_all_non_hanging_orders
#define __pyx_n_s_all_orders __pyx_mstate_global->__pyx_n_s_all_orders
#define __pyx_n_s_amount __pyx_mstate_global->__pyx_n_s_amount
#define __pyx_n_s_amount_orig __pyx_mstate_global->__pyx_n_s_amount_orig
#define __pyx_n_s_apply __pyx_mstate_global->__pyx_n_s_apply
#define __pyx_n_s_apply_add_transaction_costs __pyx_mstate_global->__pyx_n_s_apply_add_transaction_costs
#define __pyx_n_s_apply_budget_constraint __pyx_mstate_global->__pyx_n_s_apply_budget_constraint
#define __pyx_n_s_apply_order_amount_eta_transform __pyx_mstate_global->__pyx_n_s_apply_order_amount_eta_transform
#define __pyx_n_s_apply_order_optimization __pyx_mstate_global->__pyx_n_s_apply_order_optimization
#define __pyx_n_s_apply_order_price_modifiers __pyx_mstate_global->__pyx_n_s_apply_order_price_modifiers
#define __pyx_n_s_args __pyx_mstate_global->__pyx_n_s_args
#define __pyx_kp_u_ask __pyx_mstate_global->__pyx_kp_u_ask
#define __pyx_n_s_ask_level_spreads __pyx_mstate_global->__pyx_n_s_ask_level_spreads
#define __pyx_kp_u_ask_orders_at_Size_Price __pyx_mstate_global->__pyx_kp_u_ask_orders_at_Size_Price
#define __pyx_n_s_ask_price __pyx_mstate_global->__pyx_n_s_ask_price
#define __pyx_n_s_assets_df __pyx_mstate_global->__pyx_n_s_assets_df
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_available_base_balance __pyx_mstate_global->__pyx_n_s_available_base_balance
#define __pyx_n_s_available_quote_balance __pyx_mstate_global->__pyx_n_s_available_quote_balance
#define __pyx_n_s_balance_warning __pyx_mstate_global->__pyx_n_s_balance_warning
#define __pyx_n_u_bamboo_relay __pyx_mstate_global->__pyx_n_u_bamboo_relay
#define __pyx_n_s_base __pyx_mstate_global->__pyx_n_s_base
#define __pyx_n_s_base_asset __pyx_mstate_global->__pyx_n_s_base_asset
#define __pyx_n_s_base_balance __pyx_mstate_global->__pyx_n_s_base_balance
#define __pyx_n_s_base_currency __pyx_mstate_global->__pyx_n_s_base_currency
#define __pyx_n_s_base_ratio __pyx_mstate_global->__pyx_n_s_base_ratio
#define __pyx_n_s_base_value __pyx_mstate_global->__pyx_n_s_base_value
#define __pyx_n_s_best_ask __pyx_mstate_global->__pyx_n_s_best_ask
#define __pyx_n_s_best_bid __pyx_mstate_global->__pyx_n_s_best_bid
#define __pyx_kp_u_bid __pyx_mstate_global->__pyx_kp_u_bid
#define __pyx_n_s_bid_level_spreads __pyx_mstate_global->__pyx_n_s_bid_level_spreads
#define __pyx_kp_u_bid_orders_at_Size_Price __pyx_mstate_global->__pyx_kp_u_bid_orders_at_Size_Price
#define __pyx_n_s_bid_price __pyx_mstate_global->__pyx_n_s_bid_price
#define __pyx_n_s_bool __pyx_mstate_global->__pyx_n_s_bool
#define __pyx_n_u_buy __pyx_mstate_global->__pyx_n_u_buy
#define __pyx_n_s_buys __pyx_mstate_global->__pyx_n_s_buys
#define __pyx_n_s_calculate_reserved_price_and_opt __pyx_mstate_global->__pyx_n_s_calculate_reserved_price_and_opt
#define __pyx_n_s_calculate_target_inventory __pyx_mstate_global->__pyx_n_s_calculate_target_inventory
#define __pyx_n_s_cancel_active_orders __pyx_mstate_global->__pyx_n_s_cancel_active_orders
#define __pyx_n_s_cancel_order __pyx_mstate_global->__pyx_n_s_cancel_order
#define __pyx_n_s_candidate_hanging_orders __pyx_mstate_global->__pyx_n_s_candidate_hanging_orders
#define __pyx_n_s_candidate_hanging_orders_from_pa __pyx_mstate_global->__pyx_n_s_candidate_hanging_orders_from_pa
#define __pyx_n_s_ceil __pyx_mstate_global->__pyx_n_s_ceil
#define __pyx_n_s_class_getitem __pyx_mstate_global->__pyx_n_s_class_getitem
#define __pyx_n_s_client_order_id __pyx_mstate_global->__pyx_n_s_client_order_id
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_clock __pyx_mstate_global->__pyx_n_s_clock
#define __pyx_n_s_close __pyx_mstate_global->__pyx_n_s_close
#define __pyx_n_s_closing_time __pyx_mstate_global->__pyx_n_s_closing_time
#define __pyx_n_s_cls __pyx_mstate_global->__pyx_n_s_cls
#define __pyx_n_s_collect_market_variables __pyx_mstate_global->__pyx_n_s_collect_market_variables
#define __pyx_n_s_columns __pyx_mstate_global->__pyx_n_s_columns
#define __pyx_n_s_create_base_proposal __pyx_mstate_global->__pyx_n_s_create_base_proposal
#define __pyx_n_s_create_basic_proposal __pyx_mstate_global->__pyx_n_s_create_basic_proposal
#define __pyx_n_s_create_proposal_based_on_order_l __pyx_mstate_global->__pyx_n_s_create_proposal_based_on_order_l
#define __pyx_n_s_create_proposal_based_on_order_o __pyx_mstate_global->__pyx_n_s_create_proposal_based_on_order_o
#define __pyx_n_s_current_created_pairs_of_orders __pyx_mstate_global->__pyx_n_s_current_created_pairs_of_orders
#define __pyx_n_u_current_inv __pyx_mstate_global->__pyx_n_u_current_inv
#define __pyx_n_s_current_prices __pyx_mstate_global->__pyx_n_s_current_prices
#define __pyx_n_s_current_value __pyx_mstate_global->__pyx_n_s_current_value
#define __pyx_n_s_current_vol __pyx_mstate_global->__pyx_n_s_current_vol
#define __pyx_n_u_current_vol_to_calculation_vol __pyx_mstate_global->__pyx_n_u_current_vol_to_calculation_vol
#define __pyx_n_s_data __pyx_mstate_global->__pyx_n_s_data
#define __pyx_n_s_datetime __pyx_mstate_global->__pyx_n_s_datetime
#define __pyx_n_s_debug_csv_path __pyx_mstate_global->__pyx_n_s_debug_csv_path
#define __pyx_n_s_decimal __pyx_mstate_global->__pyx_n_s_decimal
#define __pyx_n_s_df __pyx_mstate_global->__pyx_n_s_df
#define __pyx_n_s_df_header __pyx_mstate_global->__pyx_n_s_df_header
#define __pyx_n_s_df_lines __pyx_mstate_global->__pyx_n_s_df_lines
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_n_s_display_name __pyx_mstate_global->__pyx_n_s_display_name
#define __pyx_n_s_dump_debug_variables __pyx_mstate_global->__pyx_n_s_dump_debug_variables
#define __pyx_n_s_e __pyx_mstate_global->__pyx_n_s_e
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_enumerate __pyx_mstate_global->__pyx_n_s_enumerate
#define __pyx_n_u_eta __pyx_mstate_global->__pyx_n_u_eta
#define __pyx_n_s_execute_orders_proposal __pyx_mstate_global->__pyx_n_s_execute_orders_proposal
#define __pyx_n_s_exists __pyx_mstate_global->__pyx_n_s_exists
#define __pyx_n_s_exp __pyx_mstate_global->__pyx_n_s_exp
#define __pyx_kp_u_filled __pyx_mstate_global->__pyx_kp_u_filled
#define __pyx_n_s_filled_order_delay __pyx_mstate_global->__pyx_n_s_filled_order_delay
#define __pyx_n_s_first_col_length __pyx_mstate_global->__pyx_n_s_first_col_length
#define __pyx_n_s_float __pyx_mstate_global->__pyx_n_s_float
#define __pyx_n_s_floor __pyx_mstate_global->__pyx_n_s_floor
#define __pyx_n_s_format __pyx_mstate_global->__pyx_n_s_format
#define __pyx_n_s_format_status __pyx_mstate_global->__pyx_n_s_format_status
#define __pyx_n_s_formatters __pyx_mstate_global->__pyx_n_s_formatters
#define __pyx_n_u_gamma __pyx_mstate_global->__pyx_n_u_gamma
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_genexpr __pyx_mstate_global->__pyx_n_s_genexpr
#define __pyx_n_s_get __pyx_mstate_global->__pyx_n_s_get
#define __pyx_n_s_getLogger __pyx_mstate_global->__pyx_n_s_getLogger
#define __pyx_n_s_get_adjusted_available_balance __pyx_mstate_global->__pyx_n_s_get_adjusted_available_balance
#define __pyx_n_s_get_available_balance __pyx_mstate_global->__pyx_n_s_get_available_balance
#define __pyx_n_s_get_balance __pyx_mstate_global->__pyx_n_s_get_balance
#define __pyx_n_s_get_last_price __pyx_mstate_global->__pyx_n_s_get_last_price
#define __pyx_n_s_get_limit_orders __pyx_mstate_global->__pyx_n_s_get_limit_orders
#define __pyx_n_s_get_logspaced_level_spreads __pyx_mstate_global->__pyx_n_s_get_logspaced_level_spreads
#define __pyx_n_s_get_maker_order_type __pyx_mstate_global->__pyx_n_s_get_maker_order_type
#define __pyx_n_s_get_mid_price __pyx_mstate_global->__pyx_n_s_get_mid_price
#define __pyx_n_s_get_min_and_max_spread __pyx_mstate_global->__pyx_n_s_get_min_and_max_spread
#define __pyx_n_s_get_price __pyx_mstate_global->__pyx_n_s_get_price
#define __pyx_n_s_get_price_for_volume __pyx_mstate_global->__pyx_n_s_get_price_for_volume
#define __pyx_n_s_get_spread __pyx_mstate_global->__pyx_n_s_get_spread
#define __pyx_n_s_get_volatility __pyx_mstate_global->__pyx_n_s_get_volatility
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_n_s_global_config_map __pyx_mstate_global->__pyx_n_s_global_config_map
#define __pyx_n_u_hang __pyx_mstate_global->__pyx_n_u_hang
#define __pyx_n_s_hanging_orders_cancel_pct __pyx_mstate_global->__pyx_n_s_hanging_orders_cancel_pct
#define __pyx_n_s_hanging_orders_enabled __pyx_mstate_global->__pyx_n_s_hanging_orders_enabled
#define __pyx_n_s_hanging_orders_tracker __pyx_mstate_global->__pyx_n_s_hanging_orders_tracker
#define __pyx_kp_u_has_been_completely_filled __pyx_mstate_global->__pyx_kp_u_has_been_completely_filled
#define __pyx_n_s_hb_app_notification __pyx_mstate_global->__pyx_n_s_hb_app_notification
#define __pyx_n_s_header __pyx_mstate_global->__pyx_n_s_header
#define __pyx_n_s_hummingbot_client_config_global __pyx_mstate_global->__pyx_n_s_hummingbot_client_config_global
#define __pyx_n_s_hummingbot_connector_exchange_ba __pyx_mstate_global->__pyx_n_s_hummingbot_connector_exchange_ba
#define __pyx_n_s_hummingbot_core_data_type_limit __pyx_mstate_global->__pyx_n_s_hummingbot_core_data_type_limit
#define __pyx_n_s_hummingbot_core_event_events __pyx_mstate_global->__pyx_n_s_hummingbot_core_event_events
#define __pyx_n_s_hummingbot_core_network_iterator __pyx_mstate_global->__pyx_n_s_hummingbot_core_network_iterator
#define __pyx_n_s_hummingbot_core_utils __pyx_mstate_global->__pyx_n_s_hummingbot_core_utils
#define __pyx_n_s_hummingbot_strategy___utils___tr __pyx_mstate_global->__pyx_n_s_hummingbot_strategy___utils___tr
#define __pyx_n_s_hummingbot_strategy_avellaneda_m __pyx_mstate_global->__pyx_n_s_hummingbot_strategy_avellaneda_m
#define __pyx_kp_s_hummingbot_strategy_avellaneda_m_2 __pyx_mstate_global->__pyx_kp_s_hummingbot_strategy_avellaneda_m_2
#define __pyx_n_s_hummingbot_strategy_data_types __pyx_mstate_global->__pyx_n_s_hummingbot_strategy_data_types
#define __pyx_n_s_hummingbot_strategy_hanging_orde __pyx_mstate_global->__pyx_n_s_hummingbot_strategy_hanging_orde
#define __pyx_n_s_hummingbot_strategy_market_tradi __pyx_mstate_global->__pyx_n_s_hummingbot_strategy_market_tradi
#define __pyx_n_s_hummingbot_strategy_strategy_bas __pyx_mstate_global->__pyx_n_s_hummingbot_strategy_strategy_bas
#define __pyx_n_s_hummingbot_strategy_utils __pyx_mstate_global->__pyx_n_s_hummingbot_strategy_utils
#define __pyx_n_s_idx __pyx_mstate_global->__pyx_n_s_idx
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_in_flight_cancels __pyx_mstate_global->__pyx_n_s_in_flight_cancels
#define __pyx_n_s_index __pyx_mstate_global->__pyx_n_s_index
#define __pyx_n_s_info __pyx_mstate_global->__pyx_n_s_info
#define __pyx_n_s_init_params __pyx_mstate_global->__pyx_n_s_init_params
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_int __pyx_mstate_global->__pyx_n_s_int
#define __pyx_n_s_inventory_risk_aversion __pyx_mstate_global->__pyx_n_s_inventory_risk_aversion
#define __pyx_n_s_inventory_target_base_pct __pyx_mstate_global->__pyx_n_s_inventory_target_base_pct
#define __pyx_n_u_inventory_target_pct __pyx_mstate_global->__pyx_n_u_inventory_target_pct
#define __pyx_n_s_is_algorithm_ready __pyx_mstate_global->__pyx_n_s_is_algorithm_ready
#define __pyx_n_s_is_buy __pyx_mstate_global->__pyx_n_s_is_buy
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_is_debug __pyx_mstate_global->__pyx_n_s_is_debug
#define __pyx_kp_u_is_filled __pyx_mstate_global->__pyx_kp_u_is_filled
#define __pyx_n_s_is_hanging_order __pyx_mstate_global->__pyx_n_s_is_hanging_order
#define __pyx_n_s_is_order_id_in_completed_hanging __pyx_mstate_global->__pyx_n_s_is_order_id_in_completed_hanging
#define __pyx_n_s_is_order_id_in_hanging_orders __pyx_mstate_global->__pyx_n_s_is_order_id_in_hanging_orders
#define __pyx_n_s_is_potential_hanging_order __pyx_mstate_global->__pyx_n_s_is_potential_hanging_order
#define __pyx_n_s_is_sampling_buffer_full __pyx_mstate_global->__pyx_n_s_is_sampling_buffer_full
#define __pyx_n_s_is_within_tolerance __pyx_mstate_global->__pyx_n_s_is_within_tolerance
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_isnan __pyx_mstate_global->__pyx_n_s_isnan
#define __pyx_n_s_items __pyx_mstate_global->__pyx_n_s_items
#define __pyx_n_u_kappa __pyx_mstate_global->__pyx_n_u_kappa
#define __pyx_n_s_key __pyx_mstate_global->__pyx_n_s_key
#define __pyx_n_s_len __pyx_mstate_global->__pyx_n_s_len
#define __pyx_n_s_level __pyx_mstate_global->__pyx_n_s_level
#define __pyx_n_s_limit_orders __pyx_mstate_global->__pyx_n_s_limit_orders
#define __pyx_n_s_line __pyx_mstate_global->__pyx_n_s_line
#define __pyx_n_s_lines __pyx_mstate_global->__pyx_n_s_lines
#define __pyx_n_s_ln __pyx_mstate_global->__pyx_n_s_ln
#define __pyx_n_s_log __pyx_mstate_global->__pyx_n_s_log
#define __pyx_n_s_log_with_clock __pyx_mstate_global->__pyx_n_s_log_with_clock
#define __pyx_n_s_logger __pyx_mstate_global->__pyx_n_s_logger
#define __pyx_n_s_logging __pyx_mstate_global->__pyx_n_s_logging
#define __pyx_n_s_logging_options __pyx_mstate_global->__pyx_n_s_logging_options
#define __pyx_n_s_logspace __pyx_mstate_global->__pyx_n_s_logspace
#define __pyx_n_s_lvl_buy __pyx_mstate_global->__pyx_n_s_lvl_buy
#define __pyx_n_s_lvl_sell __pyx_mstate_global->__pyx_n_s_lvl_sell
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_map_df_to_str __pyx_mstate_global->__pyx_n_s_map_df_to_str
#define __pyx_n_s_market __pyx_mstate_global->__pyx_n_s_market
#define __pyx_n_s_market_books __pyx_mstate_global->__pyx_n_s_market_books
#define __pyx_n_s_market_info __pyx_mstate_global->__pyx_n_s_market_info
#define __pyx_n_s_market_info_to_active_orders __pyx_mstate_global->__pyx_n_s_market_info_to_active_orders
#define __pyx_n_s_market_pair_to_active_orders __pyx_mstate_global->__pyx_n_s_market_pair_to_active_orders
#define __pyx_n_s_market_status_data_frame __pyx_mstate_global->__pyx_n_s_market_status_data_frame
#define __pyx_n_s_market_trading_pair_tuples __pyx_mstate_global->__pyx_n_s_market_trading_pair_tuples
#define __pyx_n_s_markets_columns __pyx_mstate_global->__pyx_n_s_markets_columns
#define __pyx_n_s_markets_data __pyx_mstate_global->__pyx_n_s_markets_data
#define __pyx_n_s_markets_df __pyx_mstate_global->__pyx_n_s_markets_df
#define __pyx_n_s_math __pyx_mstate_global->__pyx_n_s_math
#define __pyx_n_s_max __pyx_mstate_global->__pyx_n_s_max
#define __pyx_n_s_max_order_age __pyx_mstate_global->__pyx_n_s_max_order_age
#define __pyx_n_s_max_spread __pyx_mstate_global->__pyx_n_s_max_spread
#define __pyx_n_u_max_spread __pyx_mstate_global->__pyx_n_u_max_spread
#define __pyx_n_s_mid_price __pyx_mstate_global->__pyx_n_s_mid_price
#define __pyx_n_u_mid_price __pyx_mstate_global->__pyx_n_u_mid_price
#define __pyx_kp_u_mid_price_std_dev __pyx_mstate_global->__pyx_kp_u_mid_price_std_dev
#define __pyx_n_s_min_spread __pyx_mstate_global->__pyx_n_s_min_spread
#define __pyx_n_u_min_spread __pyx_mstate_global->__pyx_n_u_min_spread
#define __pyx_n_s_mode __pyx_mstate_global->__pyx_n_s_mode
#define __pyx_n_s_msg __pyx_mstate_global->__pyx_n_s_msg
#define __pyx_kp_u_n_a __pyx_mstate_global->__pyx_kp_u_n_a
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_name_2 __pyx_mstate_global->__pyx_n_s_name_2
#define __pyx_n_s_nan __pyx_mstate_global->__pyx_n_s_nan
#define __pyx_n_u_nan __pyx_mstate_global->__pyx_n_u_nan
#define __pyx_n_s_network_status __pyx_mstate_global->__pyx_n_s_network_status
#define __pyx_n_s_network_warning __pyx_mstate_global->__pyx_n_s_network_warning
#define __pyx_n_s_new_ask __pyx_mstate_global->__pyx_n_s_new_ask
#define __pyx_n_s_new_bid __pyx_mstate_global->__pyx_n_s_new_bid
#define __pyx_n_s_no_sells __pyx_mstate_global->__pyx_n_s_no_sells
#define __pyx_n_s_non_hanging __pyx_mstate_global->__pyx_n_s_non_hanging
#define __pyx_n_s_normalize __pyx_mstate_global->__pyx_n_s_normalize
#define __pyx_n_s_notify_hb_app __pyx_mstate_global->__pyx_n_s_notify_hb_app
#define __pyx_n_s_notify_hb_app_with_timestamp __pyx_mstate_global->__pyx_n_s_notify_hb_app_with_timestamp
#define __pyx_n_s_np __pyx_mstate_global->__pyx_n_s_np
#define __pyx_n_s_num __pyx_mstate_global->__pyx_n_s_num
#define __pyx_n_s_numpy __pyx_mstate_global->__pyx_n_s_numpy
#define __pyx_kp_u_numpy_core_multiarray_failed_to __pyx_mstate_global->__pyx_kp_u_numpy_core_multiarray_failed_to
#define __pyx_kp_u_numpy_core_umath_failed_to_impor __pyx_mstate_global->__pyx_kp_u_numpy_core_umath_failed_to_impor
#define __pyx_n_s_o __pyx_mstate_global->__pyx_n_s_o
#define __pyx_n_u_optimal_ask __pyx_mstate_global->__pyx_n_u_optimal_ask
#define __pyx_n_s_optimal_ask_spread __pyx_mstate_global->__pyx_n_s_optimal_ask_spread
#define __pyx_kp_u_optimal_ask_to_mid __pyx_mstate_global->__pyx_kp_u_optimal_ask_to_mid
#define __pyx_n_u_optimal_bid __pyx_mstate_global->__pyx_n_u_optimal_bid
#define __pyx_n_s_optimal_bid_spread __pyx_mstate_global->__pyx_n_s_optimal_bid_spread
#define __pyx_kp_u_optimal_bid_to_mid __pyx_mstate_global->__pyx_kp_u_optimal_bid_to_mid
#define __pyx_n_u_optimal_spread __pyx_mstate_global->__pyx_n_u_optimal_spread
#define __pyx_kp_u_order __pyx_mstate_global->__pyx_kp_u_order
#define __pyx_n_s_order_2 __pyx_mstate_global->__pyx_n_s_order_2
#define __pyx_n_s_order_age __pyx_mstate_global->__pyx_n_s_order_age
#define __pyx_n_s_order_amount __pyx_mstate_global->__pyx_n_s_order_amount
#define __pyx_n_s_order_amount_shape_factor __pyx_mstate_global->__pyx_n_s_order_amount_shape_factor
#define __pyx_n_s_order_book_depth_factor __pyx_mstate_global->__pyx_n_s_order_book_depth_factor
#define __pyx_kp_u_order_book_depth_factor_2 __pyx_mstate_global->__pyx_kp_u_order_book_depth_factor_2
#define __pyx_n_s_order_id __pyx_mstate_global->__pyx_n_s_order_id
#define __pyx_n_s_order_levels __pyx_mstate_global->__pyx_n_s_order_levels
#define __pyx_n_s_order_optimization_enabled __pyx_mstate_global->__pyx_n_s_order_optimization_enabled
#define __pyx_n_s_order_override __pyx_mstate_global->__pyx_n_s_order_override
#define __pyx_n_s_order_refresh_time __pyx_mstate_global->__pyx_n_s_order_refresh_time
#define __pyx_n_s_order_refresh_tolerance_pct __pyx_mstate_global->__pyx_n_s_order_refresh_tolerance_pct
#define __pyx_n_s_orders __pyx_mstate_global->__pyx_n_s_orders
#define __pyx_n_s_os __pyx_mstate_global->__pyx_n_s_os
#define __pyx_n_s_p __pyx_mstate_global->__pyx_n_s_p
#define __pyx_n_s_pandas __pyx_mstate_global->__pyx_n_s_pandas
#define __pyx_n_s_parameters_based_on_spread __pyx_mstate_global->__pyx_n_s_parameters_based_on_spread
#define __pyx_n_s_path __pyx_mstate_global->__pyx_n_s_path
#define __pyx_n_s_pd __pyx_mstate_global->__pyx_n_s_pd
#define __pyx_kp_s_pd_DataFrame __pyx_mstate_global->__pyx_kp_s_pd_DataFrame
#define __pyx_n_s_percent __pyx_mstate_global->__pyx_n_s_percent
#define __pyx_n_s_pmm_logger __pyx_mstate_global->__pyx_n_s_pmm_logger
#define __pyx_n_s_price __pyx_mstate_global->__pyx_n_s_price
#define __pyx_n_s_process_tick __pyx_mstate_global->__pyx_n_s_process_tick
#define __pyx_n_s_proposal __pyx_mstate_global->__pyx_n_s_proposal
#define __pyx_n_s_proposal_prices __pyx_mstate_global->__pyx_n_s_proposal_prices
#define __pyx_n_s_pure_mm_assets_df __pyx_mstate_global->__pyx_n_s_pure_mm_assets_df
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_kp_u_q __pyx_mstate_global->__pyx_kp_u_q
#define __pyx_n_s_quantity __pyx_mstate_global->__pyx_n_s_quantity
#define __pyx_n_s_quote_asset __pyx_mstate_global->__pyx_n_s_quote_asset
#define __pyx_n_s_quote_balance __pyx_mstate_global->__pyx_n_s_quote_balance
#define __pyx_n_s_quote_currency __pyx_mstate_global->__pyx_n_s_quote_currency
#define __pyx_n_s_quote_ratio __pyx_mstate_global->__pyx_n_s_quote_ratio
#define __pyx_n_u_radar_relay __pyx_mstate_global->__pyx_n_u_radar_relay
#define __pyx_n_s_range __pyx_mstate_global->__pyx_n_s_range
#define __pyx_n_s_ready __pyx_mstate_global->__pyx_n_s_ready
#define __pyx_n_s_recalculate_parameters __pyx_mstate_global->__pyx_n_s_recalculate_parameters
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_ref_price __pyx_mstate_global->__pyx_n_s_ref_price
#define __pyx_n_s_reference_price __pyx_mstate_global->__pyx_n_s_reference_price
#define __pyx_n_s_regex __pyx_mstate_global->__pyx_n_s_regex
#define __pyx_n_s_register_events __pyx_mstate_global->__pyx_n_s_register_events
#define __pyx_n_s_replace __pyx_mstate_global->__pyx_n_s_replace
#define __pyx_n_u_reserved_price __pyx_mstate_global->__pyx_n_u_reserved_price
#define __pyx_n_s_result_price __pyx_mstate_global->__pyx_n_s_result_price
#define __pyx_n_s_return __pyx_mstate_global->__pyx_n_s_return
#define __pyx_n_s_reverse __pyx_mstate_global->__pyx_n_s_reverse
#define __pyx_n_s_risk_factor __pyx_mstate_global->__pyx_n_s_risk_factor
#define __pyx_kp_u_risk_factor_2 __pyx_mstate_global->__pyx_kp_u_risk_factor_2
#define __pyx_n_s_round __pyx_mstate_global->__pyx_n_s_round
#define __pyx_n_u_s __pyx_mstate_global->__pyx_n_u_s
#define __pyx_n_s_s_decimal_neg_one __pyx_mstate_global->__pyx_n_s_s_decimal_neg_one
#define __pyx_n_s_s_decimal_one __pyx_mstate_global->__pyx_n_s_s_decimal_one
#define __pyx_n_s_s_decimal_zero __pyx_mstate_global->__pyx_n_s_s_decimal_zero
#define __pyx_n_s_seconds __pyx_mstate_global->__pyx_n_s_seconds
#define __pyx_kp_u_seconds_to_start_trading __pyx_mstate_global->__pyx_kp_u_seconds_to_start_trading
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_s_self__events_cannot_be_converted __pyx_mstate_global->__pyx_kp_s_self__events_cannot_be_converted
#define __pyx_n_u_sell __pyx_mstate_global->__pyx_n_u_sell
#define __pyx_n_s_sell_order __pyx_mstate_global->__pyx_n_s_sell_order
#define __pyx_n_s_sells __pyx_mstate_global->__pyx_n_s_sells
#define __pyx_n_s_send __pyx_mstate_global->__pyx_n_s_send
#define __pyx_n_s_set_timers __pyx_mstate_global->__pyx_n_s_set_timers
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_should_wait_order_cancel_confirm __pyx_mstate_global->__pyx_n_s_should_wait_order_cancel_confirm
#define __pyx_n_s_size __pyx_mstate_global->__pyx_n_s_size
#define __pyx_n_s_sort __pyx_mstate_global->__pyx_n_s_sort
#define __pyx_n_s_sorted __pyx_mstate_global->__pyx_n_s_sorted
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_split __pyx_mstate_global->__pyx_n_s_split
#define __pyx_n_s_spread __pyx_mstate_global->__pyx_n_s_spread
#define __pyx_n_u_spread __pyx_mstate_global->__pyx_n_u_spread
#define __pyx_n_s_start __pyx_mstate_global->__pyx_n_s_start
#define __pyx_n_s_status_report_interval __pyx_mstate_global->__pyx_n_s_status_report_interval
#define __pyx_n_s_str __pyx_mstate_global->__pyx_n_s_str
#define __pyx_n_s_strftime __pyx_mstate_global->__pyx_n_s_strftime
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_super __pyx_mstate_global->__pyx_n_s_super
#define __pyx_n_u_target_inv __pyx_mstate_global->__pyx_n_u_target_inv
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_throw __pyx_mstate_global->__pyx_n_s_throw
#define __pyx_n_s_time __pyx_mstate_global->__pyx_n_s_time
#define __pyx_n_u_time_left_fraction __pyx_mstate_global->__pyx_n_u_time_left_fraction
#define __pyx_kp_u_time_until_end_of_trading_cycle __pyx_mstate_global->__pyx_kp_u_time_until_end_of_trading_cycle
#define __pyx_n_s_timedelta __pyx_mstate_global->__pyx_n_s_timedelta
#define __pyx_n_s_timestamp __pyx_mstate_global->__pyx_n_s_timestamp
#define __pyx_n_s_to_create_orders __pyx_mstate_global->__pyx_n_s_to_create_orders
#define __pyx_n_s_to_csv __pyx_mstate_global->__pyx_n_s_to_csv
#define __pyx_n_s_to_show_current_pct __pyx_mstate_global->__pyx_n_s_to_show_current_pct
#define __pyx_n_s_to_string __pyx_mstate_global->__pyx_n_s_to_string
#define __pyx_n_s_total_in_quote __pyx_mstate_global->__pyx_n_s_total_in_quote
#define __pyx_n_s_trade_type __pyx_mstate_global->__pyx_n_s_trade_type
#define __pyx_n_s_trading_pair __pyx_mstate_global->__pyx_n_s_trading_pair
#define __pyx_n_s_typing __pyx_mstate_global->__pyx_n_s_typing
#define __pyx_n_s_unit __pyx_mstate_global->__pyx_n_s_unit
#define __pyx_n_s_unlink __pyx_mstate_global->__pyx_n_s_unlink
#define __pyx_n_s_unregister_events __pyx_mstate_global->__pyx_n_s_unregister_events
#define __pyx_n_s_update_strategy_orders_with_equi __pyx_mstate_global->__pyx_n_s_update_strategy_orders_with_equi
#define __pyx_n_s_upper __pyx_mstate_global->__pyx_n_s_upper
#define __pyx_n_s_use_coordinator __pyx_mstate_global->__pyx_n_s_use_coordinator
#define __pyx_n_s_value __pyx_mstate_global->__pyx_n_s_value
#define __pyx_n_s_values __pyx_mstate_global->__pyx_n_s_values
#define __pyx_kp_u_vol __pyx_mstate_global->__pyx_kp_u_vol
#define __pyx_n_s_vol_2 __pyx_mstate_global->__pyx_n_s_vol_2
#define __pyx_n_s_vol_to_spread_multiplier __pyx_mstate_global->__pyx_n_s_vol_to_spread_multiplier
#define __pyx_n_u_vol_to_spread_multiplier __pyx_mstate_global->__pyx_n_u_vol_to_spread_multiplier
#define __pyx_kp_u_volatility __pyx_mstate_global->__pyx_kp_u_volatility
#define __pyx_n_s_volatility_buffer_size __pyx_mstate_global->__pyx_n_s_volatility_buffer_size
#define __pyx_n_s_volatility_diff_from_last_parame __pyx_mstate_global->__pyx_n_s_volatility_diff_from_last_parame
#define __pyx_n_s_volatility_pct __pyx_mstate_global->__pyx_n_s_volatility_pct
#define __pyx_n_s_volatility_sensibility __pyx_mstate_global->__pyx_n_s_volatility_sensibility
#define __pyx_n_s_warning __pyx_mstate_global->__pyx_n_s_warning
#define __pyx_n_s_warning_lines __pyx_mstate_global->__pyx_n_s_warning_lines
#define __pyx_n_s_x __pyx_mstate_global->__pyx_n_s_x
#define __pyx_n_s_zip __pyx_mstate_global->__pyx_n_s_zip
#define __pyx_float_1e6 __pyx_mstate_global->__pyx_float_1e6
#define __pyx_float_30_0 __pyx_mstate_global->__pyx_float_30_0
#define __pyx_float_60_0 __pyx_mstate_global->__pyx_float_60_0
#define __pyx_float_100_0 __pyx_mstate_global->__pyx_float_100_0
#define __pyx_float_900_0 __pyx_mstate_global->__pyx_float_900_0
#define __pyx_float_1800_0 __pyx_mstate_global->__pyx_float_1800_0
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_2 __pyx_mstate_global->__pyx_int_2
#define __pyx_int_4 __pyx_mstate_global->__pyx_int_4
#define __pyx_int_5 __pyx_mstate_global->__pyx_int_5
#define __pyx_int_8 __pyx_mstate_global->__pyx_int_8
#define __pyx_int_16 __pyx_mstate_global->__pyx_int_16
#define __pyx_int_30 __pyx_mstate_global->__pyx_int_30
#define __pyx_int_32 __pyx_mstate_global->__pyx_int_32
#define __pyx_int_100 __pyx_mstate_global->__pyx_int_100
#define __pyx_int_1000 __pyx_mstate_global->__pyx_int_1000
#define __pyx_int_9223372036854775807 __pyx_mstate_global->__pyx_int_9223372036854775807
#define __pyx_int_neg_1 __pyx_mstate_global->__pyx_int_neg_1
#define __pyx_int_neg_16 __pyx_mstate_global->__pyx_int_neg_16
#define __pyx_k_ __pyx_mstate_global->__pyx_k_
#define __pyx_k__2 __pyx_mstate_global->__pyx_k__2
#define __pyx_k__3 __pyx_mstate_global->__pyx_k__3
#define __pyx_k__4 __pyx_mstate_global->__pyx_k__4
#define __pyx_k__5 __pyx_mstate_global->__pyx_k__5
#define __pyx_k__6 __pyx_mstate_global->__pyx_k__6
#define __pyx_k__7 __pyx_mstate_global->__pyx_k__7
#define __pyx_k__8 __pyx_mstate_global->__pyx_k__8
#define __pyx_k__9 __pyx_mstate_global->__pyx_k__9
#define __pyx_k__10 __pyx_mstate_global->__pyx_k__10
#define __pyx_k__11 __pyx_mstate_global->__pyx_k__11
#define __pyx_k__12 __pyx_mstate_global->__pyx_k__12
#define __pyx_k__13 __pyx_mstate_global->__pyx_k__13
#define __pyx_k__14 __pyx_mstate_global->__pyx_k__14
#define __pyx_slice__18 __pyx_mstate_global->__pyx_slice__18
#define __pyx_tuple__29 __pyx_mstate_global->__pyx_tuple__29
#define __pyx_tuple__30 __pyx_mstate_global->__pyx_tuple__30
#define __pyx_tuple__31 __pyx_mstate_global->__pyx_tuple__31
#define __pyx_tuple__33 __pyx_mstate_global->__pyx_tuple__33
#define __pyx_tuple__34 __pyx_mstate_global->__pyx_tuple__34
#define __pyx_tuple__35 __pyx_mstate_global->__pyx_tuple__35
#define __pyx_tuple__36 __pyx_mstate_global->__pyx_tuple__36
#define __pyx_tuple__38 __pyx_mstate_global->__pyx_tuple__38
#define __pyx_tuple__39 __pyx_mstate_global->__pyx_tuple__39
#define __pyx_tuple__40 __pyx_mstate_global->__pyx_tuple__40
#define __pyx_tuple__41 __pyx_mstate_global->__pyx_tuple__41
#define __pyx_tuple__42 __pyx_mstate_global->__pyx_tuple__42
#define __pyx_tuple__43 __pyx_mstate_global->__pyx_tuple__43
#define __pyx_tuple__44 __pyx_mstate_global->__pyx_tuple__44
#define __pyx_tuple__45 __pyx_mstate_global->__pyx_tuple__45
#define __pyx_tuple__46 __pyx_mstate_global->__pyx_tuple__46
#define __pyx_tuple__48 __pyx_mstate_global->__pyx_tuple__48
#define __pyx_tuple__50 __pyx_mstate_global->__pyx_tuple__50
#define __pyx_tuple__52 __pyx_mstate_global->__pyx_tuple__52
#define __pyx_tuple__54 __pyx_mstate_global->__pyx_tuple__54
#define __pyx_tuple__56 __pyx_mstate_global->__pyx_tuple__56
#define __pyx_tuple__58 __pyx_mstate_global->__pyx_tuple__58
#define __pyx_tuple__60 __pyx_mstate_global->__pyx_tuple__60
#define __pyx_tuple__62 __pyx_mstate_global->__pyx_tuple__62
#define __pyx_tuple__64 __pyx_mstate_global->__pyx_tuple__64
#define __pyx_tuple__66 __pyx_mstate_global->__pyx_tuple__66
#define __pyx_tuple__68 __pyx_mstate_global->__pyx_tuple__68
#define __pyx_tuple__70 __pyx_mstate_global->__pyx_tuple__70
#define __pyx_tuple__72 __pyx_mstate_global->__pyx_tuple__72
#define __pyx_tuple__74 __pyx_mstate_global->__pyx_tuple__74
#define __pyx_tuple__76 __pyx_mstate_global->__pyx_tuple__76
#define __pyx_tuple__78 __pyx_mstate_global->__pyx_tuple__78
#define __pyx_tuple__80 __pyx_mstate_global->__pyx_tuple__80
#define __pyx_tuple__82 __pyx_mstate_global->__pyx_tuple__82
#define __pyx_tuple__84 __pyx_mstate_global->__pyx_tuple__84
#define __pyx_tuple__86 __pyx_mstate_global->__pyx_tuple__86
#define __pyx_tuple__89 __pyx_mstate_global->__pyx_tuple__89
#define __pyx_tuple__91 __pyx_mstate_global->__pyx_tuple__91
#define __pyx_tuple__93 __pyx_mstate_global->__pyx_tuple__93
#define __pyx_tuple__95 __pyx_mstate_global->__pyx_tuple__95
#define __pyx_tuple__97 __pyx_mstate_global->__pyx_tuple__97
#define __pyx_tuple__99 __pyx_mstate_global->__pyx_tuple__99
#define __pyx_tuple__101 __pyx_mstate_global->__pyx_tuple__101
#define __pyx_tuple__103 __pyx_mstate_global->__pyx_tuple__103
#define __pyx_tuple__105 __pyx_mstate_global->__pyx_tuple__105
#define __pyx_tuple__107 __pyx_mstate_global->__pyx_tuple__107
#define __pyx_tuple__109 __pyx_mstate_global->__pyx_tuple__109
#define __pyx_tuple__111 __pyx_mstate_global->__pyx_tuple__111
#define __pyx_tuple__113 __pyx_mstate_global->__pyx_tuple__113
#define __pyx_tuple__115 __pyx_mstate_global->__pyx_tuple__115
#define __pyx_tuple__117 __pyx_mstate_global->__pyx_tuple__117
#define __pyx_tuple__119 __pyx_mstate_global->__pyx_tuple__119
#define __pyx_tuple__121 __pyx_mstate_global->__pyx_tuple__121
#define __pyx_tuple__123 __pyx_mstate_global->__pyx_tuple__123
#define __pyx_tuple__125 __pyx_mstate_global->__pyx_tuple__125
#define __pyx_tuple__127 __pyx_mstate_global->__pyx_tuple__127
#define __pyx_tuple__129 __pyx_mstate_global->__pyx_tuple__129
#define __pyx_tuple__131 __pyx_mstate_global->__pyx_tuple__131
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__47 __pyx_mstate_global->__pyx_codeobj__47
#define __pyx_codeobj__49 __pyx_mstate_global->__pyx_codeobj__49
#define __pyx_codeobj__51 __pyx_mstate_global->__pyx_codeobj__51
#define __pyx_codeobj__53 __pyx_mstate_global->__pyx_codeobj__53
#define __pyx_codeobj__55 __pyx_mstate_global->__pyx_codeobj__55
#define __pyx_codeobj__57 __pyx_mstate_global->__pyx_codeobj__57
#define __pyx_codeobj__59 __pyx_mstate_global->__pyx_codeobj__59
#define __pyx_codeobj__61 __pyx_mstate_global->__pyx_codeobj__61
#define __pyx_codeobj__63 __pyx_mstate_global->__pyx_codeobj__63
#define __pyx_codeobj__65 __pyx_mstate_global->__pyx_codeobj__65
#define __pyx_codeobj__67 __pyx_mstate_global->__pyx_codeobj__67
#define __pyx_codeobj__69 __pyx_mstate_global->__pyx_codeobj__69
#define __pyx_codeobj__71 __pyx_mstate_global->__pyx_codeobj__71
#define __pyx_codeobj__73 __pyx_mstate_global->__pyx_codeobj__73
#define __pyx_codeobj__75 __pyx_mstate_global->__pyx_codeobj__75
#define __pyx_codeobj__77 __pyx_mstate_global->__pyx_codeobj__77
#define __pyx_codeobj__79 __pyx_mstate_global->__pyx_codeobj__79
#define __pyx_codeobj__81 __pyx_mstate_global->__pyx_codeobj__81
#define __pyx_codeobj__83 __pyx_mstate_global->__pyx_codeobj__83
#define __pyx_codeobj__85 __pyx_mstate_global->__pyx_codeobj__85
#define __pyx_codeobj__87 __pyx_mstate_global->__pyx_codeobj__87
#define __pyx_codeobj__90 __pyx_mstate_global->__pyx_codeobj__90
#define __pyx_codeobj__92 __pyx_mstate_global->__pyx_codeobj__92
#define __pyx_codeobj__94 __pyx_mstate_global->__pyx_codeobj__94
#define __pyx_codeobj__96 __pyx_mstate_global->__pyx_codeobj__96
#define __pyx_codeobj__98 __pyx_mstate_global->__pyx_codeobj__98
#define __pyx_codeobj__100 __pyx_mstate_global->__pyx_codeobj__100
#define __pyx_codeobj__102 __pyx_mstate_global->__pyx_codeobj__102
#define __pyx_codeobj__104 __pyx_mstate_global->__pyx_codeobj__104
#define __pyx_codeobj__106 __pyx_mstate_global->__pyx_codeobj__106
#define __pyx_codeobj__108 __pyx_mstate_global->__pyx_codeobj__108
#define __pyx_codeobj__110 __pyx_mstate_global->__pyx_codeobj__110
#define __pyx_codeobj__112 __pyx_mstate_global->__pyx_codeobj__112
#define __pyx_codeobj__114 __pyx_mstate_global->__pyx_codeobj__114
#define __pyx_codeobj__116 __pyx_mstate_global->__pyx_codeobj__116
#define __pyx_codeobj__118 __pyx_mstate_global->__pyx_codeobj__118
#define __pyx_codeobj__120 __pyx_mstate_global->__pyx_codeobj__120
#define __pyx_codeobj__122 __pyx_mstate_global->__pyx_codeobj__122
#define __pyx_codeobj__124 __pyx_mstate_global->__pyx_codeobj__124
#define __pyx_codeobj__126 __pyx_mstate_global->__pyx_codeobj__126
#define __pyx_codeobj__128 __pyx_mstate_global->__pyx_codeobj__128
#define __pyx_codeobj__130 __pyx_mstate_global->__pyx_codeobj__130
#define __pyx_codeobj__132 __pyx_mstate_global->__pyx_codeobj__132
#endif
/* #### Code section: module_code ### */

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":59
 *     RADAR_RELAY_TYPE_EXCHANGES = {"radar_relay", "bamboo_relay"}
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls):
 *         global pmm_logger
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_1logger(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_1logger = {"logger", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_1logger, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_1logger(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logger (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("logger", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "logger", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_logger(((PyTypeObject*)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_logger(CYTHON_UNUSED PyTypeObject *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("logger", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":62
 *     def logger(cls):
 *         global pmm_logger
 *         if pmm_logger is None:             # <<<<<<<<<<<<<<
 *             pmm_logger = logging.getLogger(__name__)
 *         return pmm_logger
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pmm_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":63
 *         global pmm_logger
 *         if pmm_logger is None:
 *             pmm_logger = logging.getLogger(__name__)             # <<<<<<<<<<<<<<
 *         return pmm_logger
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logging); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_pmm_logger, __pyx_t_1) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":62
 *     def logger(cls):
 *         global pmm_logger
 *         if pmm_logger is None:             # <<<<<<<<<<<<<<
 *             pmm_logger = logging.getLogger(__name__)
 *         return pmm_logger
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":64
 *         if pmm_logger is None:
 *             pmm_logger = logging.getLogger(__name__)
 *         return pmm_logger             # <<<<<<<<<<<<<<
 * 
 *     def init_params(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pmm_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":59
 *     RADAR_RELAY_TYPE_EXCHANGES = {"radar_relay", "bamboo_relay"}
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls):
 *         global pmm_logger
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.logger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":66
 *         return pmm_logger
 * 
 *     def init_params(self,             # <<<<<<<<<<<<<<
 *                     market_info: MarketTradingPairTuple,
 *                     order_amount: Decimal,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_3init_params(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_3init_params = {"init_params", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_3init_params, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_3init_params(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_market_info = 0;
  PyObject *__pyx_v_order_amount = 0;
  double __pyx_v_order_refresh_time;
  double __pyx_v_max_order_age;
  PyObject *__pyx_v_order_refresh_tolerance_pct = 0;
  PyObject *__pyx_v_order_optimization_enabled = 0;
  double __pyx_v_filled_order_delay;
  PyObject *__pyx_v_order_levels = 0;
  PyObject *__pyx_v_order_override = 0;
  PyObject *__pyx_v_hanging_orders_enabled = 0;
  PyObject *__pyx_v_hanging_orders_cancel_pct = 0;
  PyObject *__pyx_v_inventory_target_base_pct = 0;
  PyObject *__pyx_v_add_transaction_costs_to_orders = 0;
  PyObject *__pyx_v_logging_options = 0;
  double __pyx_v_status_report_interval;
  PyObject *__pyx_v_hb_app_notification = 0;
  PyObject *__pyx_v_parameters_based_on_spread = 0;
  PyObject *__pyx_v_min_spread = 0;
  PyObject *__pyx_v_max_spread = 0;
  PyObject *__pyx_v_vol_to_spread_multiplier = 0;
  PyObject *__pyx_v_volatility_sensibility = 0;
  PyObject *__pyx_v_inventory_risk_aversion = 0;
  PyObject *__pyx_v_order_book_depth_factor = 0;
  PyObject *__pyx_v_risk_factor = 0;
  PyObject *__pyx_v_order_amount_shape_factor = 0;
  PyObject *__pyx_v_closing_time = 0;
  PyObject *__pyx_v_debug_csv_path = 0;
  PyObject *__pyx_v_volatility_buffer_size = 0;
  PyObject *__pyx_v_should_wait_order_cancel_confirmation = 0;
  PyObject *__pyx_v_is_debug = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("init_params (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_info,&__pyx_n_s_order_amount,&__pyx_n_s_order_refresh_time,&__pyx_n_s_max_order_age,&__pyx_n_s_order_refresh_tolerance_pct,&__pyx_n_s_order_optimization_enabled,&__pyx_n_s_filled_order_delay,&__pyx_n_s_order_levels,&__pyx_n_s_order_override,&__pyx_n_s_hanging_orders_enabled,&__pyx_n_s_hanging_orders_cancel_pct,&__pyx_n_s_inventory_target_base_pct,&__pyx_n_s_add_transaction_costs_to_orders,&__pyx_n_s_logging_options,&__pyx_n_s_status_report_interval,&__pyx_n_s_hb_app_notification,&__pyx_n_s_parameters_based_on_spread,&__pyx_n_s_min_spread,&__pyx_n_s_max_spread,&__pyx_n_s_vol_to_spread_multiplier,&__pyx_n_s_volatility_sensibility,&__pyx_n_s_inventory_risk_aversion,&__pyx_n_s_order_book_depth_factor,&__pyx_n_s_risk_factor,&__pyx_n_s_order_amount_shape_factor,&__pyx_n_s_closing_time,&__pyx_n_s_debug_csv_path,&__pyx_n_s_volatility_buffer_size,&__pyx_n_s_should_wait_order_cancel_confirm,&__pyx_n_s_is_debug,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_info,&__pyx_n_s_order_amount,&__pyx_n_s_order_refresh_time,&__pyx_n_s_max_order_age,&__pyx_n_s_order_refresh_tolerance_pct,&__pyx_n_s_order_optimization_enabled,&__pyx_n_s_filled_order_delay,&__pyx_n_s_order_levels,&__pyx_n_s_order_override,&__pyx_n_s_hanging_orders_enabled,&__pyx_n_s_hanging_orders_cancel_pct,&__pyx_n_s_inventory_target_base_pct,&__pyx_n_s_add_transaction_costs_to_orders,&__pyx_n_s_logging_options,&__pyx_n_s_status_report_interval,&__pyx_n_s_hb_app_notification,&__pyx_n_s_parameters_based_on_spread,&__pyx_n_s_min_spread,&__pyx_n_s_max_spread,&__pyx_n_s_vol_to_spread_multiplier,&__pyx_n_s_volatility_sensibility,&__pyx_n_s_inventory_risk_aversion,&__pyx_n_s_order_book_depth_factor,&__pyx_n_s_risk_factor,&__pyx_n_s_order_amount_shape_factor,&__pyx_n_s_closing_time,&__pyx_n_s_debug_csv_path,&__pyx_n_s_volatility_buffer_size,&__pyx_n_s_should_wait_order_cancel_confirm,&__pyx_n_s_is_debug,0};
    #endif
    PyObject* values[30] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    values[4] = __pyx_k_;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":72
 *                     max_order_age: float = 1800,
 *                     order_refresh_tolerance_pct: Decimal = s_decimal_neg_one,
 *                     order_optimization_enabled = True,             # <<<<<<<<<<<<<<
 *                     filled_order_delay: float = 60.0,
 *                     order_levels: int = 0,
 */
    values[5] = ((PyObject *)Py_True);
    values[7] = ((PyObject *)__pyx_int_0);
    values[8] = __pyx_k__2;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":76
 *                     order_levels: int = 0,
 *                     order_override: Dict[str, List[str]] = {},
 *                     hanging_orders_enabled: bool = False,             # <<<<<<<<<<<<<<
 *                     hanging_orders_cancel_pct: Decimal = Decimal("0.1"),
 *                     inventory_target_base_pct: Decimal = s_decimal_zero,
 */
    values[9] = ((PyObject *)Py_False);
    values[10] = __pyx_k__3;
    values[11] = __pyx_k__4;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":79
 *                     hanging_orders_cancel_pct: Decimal = Decimal("0.1"),
 *                     inventory_target_base_pct: Decimal = s_decimal_zero,
 *                     add_transaction_costs_to_orders: bool = True,             # <<<<<<<<<<<<<<
 *                     logging_options: int = OPTION_LOG_ALL,
 *                     status_report_interval: float = 900,
 */
    values[12] = ((PyObject *)Py_True);
    values[13] = __pyx_k__5;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":82
 *                     logging_options: int = OPTION_LOG_ALL,
 *                     status_report_interval: float = 900,
 *                     hb_app_notification: bool = False,             # <<<<<<<<<<<<<<
 *                     parameters_based_on_spread: bool = True,
 *                     min_spread: Decimal = Decimal("0.15"),
 */
    values[15] = ((PyObject *)Py_False);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":83
 *                     status_report_interval: float = 900,
 *                     hb_app_notification: bool = False,
 *                     parameters_based_on_spread: bool = True,             # <<<<<<<<<<<<<<
 *                     min_spread: Decimal = Decimal("0.15"),
 *                     max_spread: Decimal = Decimal("2"),
 */
    values[16] = ((PyObject *)Py_True);
    values[17] = __pyx_k__6;
    values[18] = __pyx_k__7;
    values[19] = __pyx_k__8;
    values[20] = __pyx_k__9;
    values[21] = __pyx_k__10;
    values[22] = __pyx_k__11;
    values[23] = __pyx_k__12;
    values[24] = __pyx_k__13;
    values[25] = __pyx_k__14;
    values[26] = ((PyObject*)__pyx_kp_u__15);
    values[27] = ((PyObject *)__pyx_int_30);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":95
 *                     debug_csv_path: str = '',
 *                     volatility_buffer_size: int = 30,
 *                     should_wait_order_cancel_confirmation = True,             # <<<<<<<<<<<<<<
 *                     is_debug: bool = False,
 *                     ):
 */
    values[28] = ((PyObject *)Py_True);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":96
 *                     volatility_buffer_size: int = 30,
 *                     should_wait_order_cancel_confirmation = True,
 *                     is_debug: bool = False,             # <<<<<<<<<<<<<<
 *                     ):
 *         self._sb_order_tracker = OrderTracker()
 */
    values[29] = ((PyObject *)Py_False);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case 30: values[29] = __Pyx_Arg_FASTCALL(__pyx_args, 29);
        CYTHON_FALLTHROUGH;
        case 29: values[28] = __Pyx_Arg_FASTCALL(__pyx_args, 28);
        CYTHON_FALLTHROUGH;
        case 28: values[27] = __Pyx_Arg_FASTCALL(__pyx_args, 27);
        CYTHON_FALLTHROUGH;
        case 27: values[26] = __Pyx_Arg_FASTCALL(__pyx_args, 26);
        CYTHON_FALLTHROUGH;
        case 26: values[25] = __Pyx_Arg_FASTCALL(__pyx_args, 25);
        CYTHON_FALLTHROUGH;
        case 25: values[24] = __Pyx_Arg_FASTCALL(__pyx_args, 24);
        CYTHON_FALLTHROUGH;
        case 24: values[23] = __Pyx_Arg_FASTCALL(__pyx_args, 23);
        CYTHON_FALLTHROUGH;
        case 23: values[22] = __Pyx_Arg_FASTCALL(__pyx_args, 22);
        CYTHON_FALLTHROUGH;
        case 22: values[21] = __Pyx_Arg_FASTCALL(__pyx_args, 21);
        CYTHON_FALLTHROUGH;
        case 21: values[20] = __Pyx_Arg_FASTCALL(__pyx_args, 20);
        CYTHON_FALLTHROUGH;
        case 20: values[19] = __Pyx_Arg_FASTCALL(__pyx_args, 19);
        CYTHON_FALLTHROUGH;
        case 19: values[18] = __Pyx_Arg_FASTCALL(__pyx_args, 18);
        CYTHON_FALLTHROUGH;
        case 18: values[17] = __Pyx_Arg_FASTCALL(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = __Pyx_Arg_FASTCALL(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = __Pyx_Arg_FASTCALL(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = __Pyx_Arg_FASTCALL(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = __Pyx_Arg_FASTCALL(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = __Pyx_Arg_FASTCALL(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = __Pyx_Arg_FASTCALL(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = __Pyx_Arg_FASTCALL(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = __Pyx_Arg_FASTCALL(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_market_info)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_amount)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("init_params", 0, 2, 30, 1); __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_refresh_time);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_max_order_age);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_refresh_tolerance_pct);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_optimization_enabled);
          if (value) { values[5] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_filled_order_delay);
          if (value) { values[6] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  7:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_levels);
          if (value) { values[7] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  8:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_override);
          if (value) { values[8] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  9:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hanging_orders_enabled);
          if (value) { values[9] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 10:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hanging_orders_cancel_pct);
          if (value) { values[10] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 11:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_inventory_target_base_pct);
          if (value) { values[11] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 12:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_add_transaction_costs_to_orders);
          if (value) { values[12] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 13:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_logging_options);
          if (value) { values[13] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 14:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_status_report_interval);
          if (value) { values[14] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 15:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_hb_app_notification);
          if (value) { values[15] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 16:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_parameters_based_on_spread);
          if (value) { values[16] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 17:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_min_spread);
          if (value) { values[17] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 18:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_max_spread);
          if (value) { values[18] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 19:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_vol_to_spread_multiplier);
          if (value) { values[19] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 20:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_volatility_sensibility);
          if (value) { values[20] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 21:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_inventory_risk_aversion);
          if (value) { values[21] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 22:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_book_depth_factor);
          if (value) { values[22] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 23:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_risk_factor);
          if (value) { values[23] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 24:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_amount_shape_factor);
          if (value) { values[24] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 25:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_closing_time);
          if (value) { values[25] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 26:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_debug_csv_path);
          if (value) { values[26] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 27:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_volatility_buffer_size);
          if (value) { values[27] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 28:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_should_wait_order_cancel_confirm);
          if (value) { values[28] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case 29:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_is_debug);
          if (value) { values[29] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 66, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "init_params") < 0)) __PYX_ERR(0, 66, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case 30: values[29] = __Pyx_Arg_FASTCALL(__pyx_args, 29);
        CYTHON_FALLTHROUGH;
        case 29: values[28] = __Pyx_Arg_FASTCALL(__pyx_args, 28);
        CYTHON_FALLTHROUGH;
        case 28: values[27] = __Pyx_Arg_FASTCALL(__pyx_args, 27);
        CYTHON_FALLTHROUGH;
        case 27: values[26] = __Pyx_Arg_FASTCALL(__pyx_args, 26);
        CYTHON_FALLTHROUGH;
        case 26: values[25] = __Pyx_Arg_FASTCALL(__pyx_args, 25);
        CYTHON_FALLTHROUGH;
        case 25: values[24] = __Pyx_Arg_FASTCALL(__pyx_args, 24);
        CYTHON_FALLTHROUGH;
        case 24: values[23] = __Pyx_Arg_FASTCALL(__pyx_args, 23);
        CYTHON_FALLTHROUGH;
        case 23: values[22] = __Pyx_Arg_FASTCALL(__pyx_args, 22);
        CYTHON_FALLTHROUGH;
        case 22: values[21] = __Pyx_Arg_FASTCALL(__pyx_args, 21);
        CYTHON_FALLTHROUGH;
        case 21: values[20] = __Pyx_Arg_FASTCALL(__pyx_args, 20);
        CYTHON_FALLTHROUGH;
        case 20: values[19] = __Pyx_Arg_FASTCALL(__pyx_args, 19);
        CYTHON_FALLTHROUGH;
        case 19: values[18] = __Pyx_Arg_FASTCALL(__pyx_args, 18);
        CYTHON_FALLTHROUGH;
        case 18: values[17] = __Pyx_Arg_FASTCALL(__pyx_args, 17);
        CYTHON_FALLTHROUGH;
        case 17: values[16] = __Pyx_Arg_FASTCALL(__pyx_args, 16);
        CYTHON_FALLTHROUGH;
        case 16: values[15] = __Pyx_Arg_FASTCALL(__pyx_args, 15);
        CYTHON_FALLTHROUGH;
        case 15: values[14] = __Pyx_Arg_FASTCALL(__pyx_args, 14);
        CYTHON_FALLTHROUGH;
        case 14: values[13] = __Pyx_Arg_FASTCALL(__pyx_args, 13);
        CYTHON_FALLTHROUGH;
        case 13: values[12] = __Pyx_Arg_FASTCALL(__pyx_args, 12);
        CYTHON_FALLTHROUGH;
        case 12: values[11] = __Pyx_Arg_FASTCALL(__pyx_args, 11);
        CYTHON_FALLTHROUGH;
        case 11: values[10] = __Pyx_Arg_FASTCALL(__pyx_args, 10);
        CYTHON_FALLTHROUGH;
        case 10: values[9] = __Pyx_Arg_FASTCALL(__pyx_args, 9);
        CYTHON_FALLTHROUGH;
        case  9: values[8] = __Pyx_Arg_FASTCALL(__pyx_args, 8);
        CYTHON_FALLTHROUGH;
        case  8: values[7] = __Pyx_Arg_FASTCALL(__pyx_args, 7);
        CYTHON_FALLTHROUGH;
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_market_info = values[0];
    __pyx_v_order_amount = values[1];
    if (values[2]) {
      __pyx_v_order_refresh_time = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_order_refresh_time == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 69, __pyx_L3_error)
    } else {
      __pyx_v_order_refresh_time = ((double)30.0);
    }
    if (values[3]) {
      __pyx_v_max_order_age = __pyx_PyFloat_AsDouble(values[3]); if (unlikely((__pyx_v_max_order_age == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 70, __pyx_L3_error)
    } else {
      __pyx_v_max_order_age = ((double)1800.0);
    }
    __pyx_v_order_refresh_tolerance_pct = values[4];
    __pyx_v_order_optimization_enabled = values[5];
    if (values[6]) {
      __pyx_v_filled_order_delay = __pyx_PyFloat_AsDouble(values[6]); if (unlikely((__pyx_v_filled_order_delay == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 73, __pyx_L3_error)
    } else {
      __pyx_v_filled_order_delay = ((double)60.0);
    }
    __pyx_v_order_levels = values[7];
    __pyx_v_order_override = values[8];
    __pyx_v_hanging_orders_enabled = values[9];
    __pyx_v_hanging_orders_cancel_pct = values[10];
    __pyx_v_inventory_target_base_pct = values[11];
    __pyx_v_add_transaction_costs_to_orders = values[12];
    __pyx_v_logging_options = values[13];
    if (values[14]) {
      __pyx_v_status_report_interval = __pyx_PyFloat_AsDouble(values[14]); if (unlikely((__pyx_v_status_report_interval == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 81, __pyx_L3_error)
    } else {
      __pyx_v_status_report_interval = ((double)900.0);
    }
    __pyx_v_hb_app_notification = values[15];
    __pyx_v_parameters_based_on_spread = values[16];
    __pyx_v_min_spread = values[17];
    __pyx_v_max_spread = values[18];
    __pyx_v_vol_to_spread_multiplier = values[19];
    __pyx_v_volatility_sensibility = values[20];
    __pyx_v_inventory_risk_aversion = values[21];
    __pyx_v_order_book_depth_factor = values[22];
    __pyx_v_risk_factor = values[23];
    __pyx_v_order_amount_shape_factor = values[24];
    __pyx_v_closing_time = values[25];
    __pyx_v_debug_csv_path = ((PyObject*)values[26]);
    __pyx_v_volatility_buffer_size = values[27];
    __pyx_v_should_wait_order_cancel_confirmation = values[28];
    __pyx_v_is_debug = values[29];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("init_params", 0, 2, 30, __pyx_nargs); __PYX_ERR(0, 66, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.init_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_debug_csv_path), (&PyUnicode_Type), 1, "debug_csv_path", 1))) __PYX_ERR(0, 93, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_2init_params(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_market_info, __pyx_v_order_amount, __pyx_v_order_refresh_time, __pyx_v_max_order_age, __pyx_v_order_refresh_tolerance_pct, __pyx_v_order_optimization_enabled, __pyx_v_filled_order_delay, __pyx_v_order_levels, __pyx_v_order_override, __pyx_v_hanging_orders_enabled, __pyx_v_hanging_orders_cancel_pct, __pyx_v_inventory_target_base_pct, __pyx_v_add_transaction_costs_to_orders, __pyx_v_logging_options, __pyx_v_status_report_interval, __pyx_v_hb_app_notification, __pyx_v_parameters_based_on_spread, __pyx_v_min_spread, __pyx_v_max_spread, __pyx_v_vol_to_spread_multiplier, __pyx_v_volatility_sensibility, __pyx_v_inventory_risk_aversion, __pyx_v_order_book_depth_factor, __pyx_v_risk_factor, __pyx_v_order_amount_shape_factor, __pyx_v_closing_time, __pyx_v_debug_csv_path, __pyx_v_volatility_buffer_size, __pyx_v_should_wait_order_cancel_confirmation, __pyx_v_is_debug);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":66
 *         return pmm_logger
 * 
 *     def init_params(self,             # <<<<<<<<<<<<<<
 *                     market_info: MarketTradingPairTuple,
 *                     order_amount: Decimal,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_2init_params(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_market_info, PyObject *__pyx_v_order_amount, double __pyx_v_order_refresh_time, double __pyx_v_max_order_age, PyObject *__pyx_v_order_refresh_tolerance_pct, PyObject *__pyx_v_order_optimization_enabled, double __pyx_v_filled_order_delay, PyObject *__pyx_v_order_levels, PyObject *__pyx_v_order_override, PyObject *__pyx_v_hanging_orders_enabled, PyObject *__pyx_v_hanging_orders_cancel_pct, PyObject *__pyx_v_inventory_target_base_pct, PyObject *__pyx_v_add_transaction_costs_to_orders, PyObject *__pyx_v_logging_options, double __pyx_v_status_report_interval, PyObject *__pyx_v_hb_app_notification, PyObject *__pyx_v_parameters_based_on_spread, PyObject *__pyx_v_min_spread, PyObject *__pyx_v_max_spread, PyObject *__pyx_v_vol_to_spread_multiplier, PyObject *__pyx_v_volatility_sensibility, PyObject *__pyx_v_inventory_risk_aversion, PyObject *__pyx_v_order_book_depth_factor, PyObject *__pyx_v_risk_factor, PyObject *__pyx_v_order_amount_shape_factor, PyObject *__pyx_v_closing_time, PyObject *__pyx_v_debug_csv_path, PyObject *__pyx_v_volatility_buffer_size, PyObject *__pyx_v_should_wait_order_cancel_confirmation, PyObject *__pyx_v_is_debug) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int64_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init_params", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":98
 *                     is_debug: bool = False,
 *                     ):
 *         self._sb_order_tracker = OrderTracker()             # <<<<<<<<<<<<<<
 *         self._market_info = market_info
 *         self._order_amount = order_amount
 */
  __pyx_t_1 = __Pyx_PyObject_CallNoArg(((PyObject *)__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->__pyx_base._sb_order_tracker);
  __Pyx_DECREF((PyObject *)__pyx_v_self->__pyx_base._sb_order_tracker);
  __pyx_v_self->__pyx_base._sb_order_tracker = ((struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":99
 *                     ):
 *         self._sb_order_tracker = OrderTracker()
 *         self._market_info = market_info             # <<<<<<<<<<<<<<
 *         self._order_amount = order_amount
 *         self._order_optimization_enabled = order_optimization_enabled
 */
  __Pyx_INCREF(__pyx_v_market_info);
  __Pyx_GIVEREF(__pyx_v_market_info);
  __Pyx_GOTREF(__pyx_v_self->_market_info);
  __Pyx_DECREF(__pyx_v_self->_market_info);
  __pyx_v_self->_market_info = __pyx_v_market_info;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":100
 *         self._sb_order_tracker = OrderTracker()
 *         self._market_info = market_info
 *         self._order_amount = order_amount             # <<<<<<<<<<<<<<
 *         self._order_optimization_enabled = order_optimization_enabled
 *         self._order_refresh_time = order_refresh_time
 */
  __Pyx_INCREF(__pyx_v_order_amount);
  __Pyx_GIVEREF(__pyx_v_order_amount);
  __Pyx_GOTREF(__pyx_v_self->_order_amount);
  __Pyx_DECREF(__pyx_v_self->_order_amount);
  __pyx_v_self->_order_amount = __pyx_v_order_amount;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":101
 *         self._market_info = market_info
 *         self._order_amount = order_amount
 *         self._order_optimization_enabled = order_optimization_enabled             # <<<<<<<<<<<<<<
 *         self._order_refresh_time = order_refresh_time
 *         self._max_order_age = max_order_age
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_order_optimization_enabled); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 101, __pyx_L1_error)
  __pyx_v_self->_order_optimization_enabled = __pyx_t_2;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":102
 *         self._order_amount = order_amount
 *         self._order_optimization_enabled = order_optimization_enabled
 *         self._order_refresh_time = order_refresh_time             # <<<<<<<<<<<<<<
 *         self._max_order_age = max_order_age
 *         self._order_refresh_tolerance_pct = order_refresh_tolerance_pct
 */
  __pyx_v_self->_order_refresh_time = __pyx_v_order_refresh_time;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":103
 *         self._order_optimization_enabled = order_optimization_enabled
 *         self._order_refresh_time = order_refresh_time
 *         self._max_order_age = max_order_age             # <<<<<<<<<<<<<<
 *         self._order_refresh_tolerance_pct = order_refresh_tolerance_pct
 *         self._filled_order_delay = filled_order_delay
 */
  __pyx_v_self->_max_order_age = __pyx_v_max_order_age;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":104
 *         self._order_refresh_time = order_refresh_time
 *         self._max_order_age = max_order_age
 *         self._order_refresh_tolerance_pct = order_refresh_tolerance_pct             # <<<<<<<<<<<<<<
 *         self._filled_order_delay = filled_order_delay
 *         self._order_levels = order_levels
 */
  __Pyx_INCREF(__pyx_v_order_refresh_tolerance_pct);
  __Pyx_GIVEREF(__pyx_v_order_refresh_tolerance_pct);
  __Pyx_GOTREF(__pyx_v_self->_order_refresh_tolerance_pct);
  __Pyx_DECREF(__pyx_v_self->_order_refresh_tolerance_pct);
  __pyx_v_self->_order_refresh_tolerance_pct = __pyx_v_order_refresh_tolerance_pct;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":105
 *         self._max_order_age = max_order_age
 *         self._order_refresh_tolerance_pct = order_refresh_tolerance_pct
 *         self._filled_order_delay = filled_order_delay             # <<<<<<<<<<<<<<
 *         self._order_levels = order_levels
 *         self._order_override = order_override
 */
  __pyx_v_self->_filled_order_delay = __pyx_v_filled_order_delay;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":106
 *         self._order_refresh_tolerance_pct = order_refresh_tolerance_pct
 *         self._filled_order_delay = filled_order_delay
 *         self._order_levels = order_levels             # <<<<<<<<<<<<<<
 *         self._order_override = order_override
 *         self._inventory_target_base_pct = inventory_target_base_pct
 */
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_order_levels); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 106, __pyx_L1_error)
  __pyx_v_self->_order_levels = __pyx_t_3;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":107
 *         self._filled_order_delay = filled_order_delay
 *         self._order_levels = order_levels
 *         self._order_override = order_override             # <<<<<<<<<<<<<<
 *         self._inventory_target_base_pct = inventory_target_base_pct
 *         self._add_transaction_costs_to_orders = add_transaction_costs_to_orders
 */
  __Pyx_INCREF(__pyx_v_order_override);
  __Pyx_GIVEREF(__pyx_v_order_override);
  __Pyx_GOTREF(__pyx_v_self->_order_override);
  __Pyx_DECREF(__pyx_v_self->_order_override);
  __pyx_v_self->_order_override = __pyx_v_order_override;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":108
 *         self._order_levels = order_levels
 *         self._order_override = order_override
 *         self._inventory_target_base_pct = inventory_target_base_pct             # <<<<<<<<<<<<<<
 *         self._add_transaction_costs_to_orders = add_transaction_costs_to_orders
 *         self._hb_app_notification = hb_app_notification
 */
  __Pyx_INCREF(__pyx_v_inventory_target_base_pct);
  __Pyx_GIVEREF(__pyx_v_inventory_target_base_pct);
  __Pyx_GOTREF(__pyx_v_self->_inventory_target_base_pct);
  __Pyx_DECREF(__pyx_v_self->_inventory_target_base_pct);
  __pyx_v_self->_inventory_target_base_pct = __pyx_v_inventory_target_base_pct;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":109
 *         self._order_override = order_override
 *         self._inventory_target_base_pct = inventory_target_base_pct
 *         self._add_transaction_costs_to_orders = add_transaction_costs_to_orders             # <<<<<<<<<<<<<<
 *         self._hb_app_notification = hb_app_notification
 *         self._hanging_orders_enabled = hanging_orders_enabled
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_add_transaction_costs_to_orders); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 109, __pyx_L1_error)
  __pyx_v_self->_add_transaction_costs_to_orders = __pyx_t_2;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":110
 *         self._inventory_target_base_pct = inventory_target_base_pct
 *         self._add_transaction_costs_to_orders = add_transaction_costs_to_orders
 *         self._hb_app_notification = hb_app_notification             # <<<<<<<<<<<<<<
 *         self._hanging_orders_enabled = hanging_orders_enabled
 *         self._hanging_orders_tracker = HangingOrdersTracker(self,
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_hb_app_notification); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 110, __pyx_L1_error)
  __pyx_v_self->_hb_app_notification = __pyx_t_2;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":111
 *         self._add_transaction_costs_to_orders = add_transaction_costs_to_orders
 *         self._hb_app_notification = hb_app_notification
 *         self._hanging_orders_enabled = hanging_orders_enabled             # <<<<<<<<<<<<<<
 *         self._hanging_orders_tracker = HangingOrdersTracker(self,
 *                                                             hanging_orders_cancel_pct)
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_hanging_orders_enabled); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 111, __pyx_L1_error)
  __pyx_v_self->_hanging_orders_enabled = __pyx_t_2;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":112
 *         self._hb_app_notification = hb_app_notification
 *         self._hanging_orders_enabled = hanging_orders_enabled
 *         self._hanging_orders_tracker = HangingOrdersTracker(self,             # <<<<<<<<<<<<<<
 *                                                             hanging_orders_cancel_pct)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_HangingOrdersTracker); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":113
 *         self._hanging_orders_enabled = hanging_orders_enabled
 *         self._hanging_orders_tracker = HangingOrdersTracker(self,
 *                                                             hanging_orders_cancel_pct)             # <<<<<<<<<<<<<<
 * 
 *         self._cancel_timestamp = 0
 */
  __pyx_t_5 = NULL;
  __pyx_t_3 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_3 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, ((PyObject *)__pyx_v_self), __pyx_v_hanging_orders_cancel_pct};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_3, 2+__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":112
 *         self._hb_app_notification = hb_app_notification
 *         self._hanging_orders_enabled = hanging_orders_enabled
 *         self._hanging_orders_tracker = HangingOrdersTracker(self,             # <<<<<<<<<<<<<<
 *                                                             hanging_orders_cancel_pct)
 * 
 */
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_hanging_orders_tracker);
  __Pyx_DECREF(__pyx_v_self->_hanging_orders_tracker);
  __pyx_v_self->_hanging_orders_tracker = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":115
 *                                                             hanging_orders_cancel_pct)
 * 
 *         self._cancel_timestamp = 0             # <<<<<<<<<<<<<<
 *         self._create_timestamp = 0
 *         self._limit_order_type = self._market_info.market.get_maker_order_type()
 */
  __pyx_v_self->_cancel_timestamp = 0.0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":116
 * 
 *         self._cancel_timestamp = 0
 *         self._create_timestamp = 0             # <<<<<<<<<<<<<<
 *         self._limit_order_type = self._market_info.market.get_maker_order_type()
 *         self._all_markets_ready = False
 */
  __pyx_v_self->_create_timestamp = 0.0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":117
 *         self._cancel_timestamp = 0
 *         self._create_timestamp = 0
 *         self._limit_order_type = self._market_info.market.get_maker_order_type()             # <<<<<<<<<<<<<<
 *         self._all_markets_ready = False
 *         self._filled_buys_balance = 0
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_get_maker_order_type); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_3 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_3 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_4, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_3, 0+__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_limit_order_type);
  __Pyx_DECREF(__pyx_v_self->_limit_order_type);
  __pyx_v_self->_limit_order_type = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":118
 *         self._create_timestamp = 0
 *         self._limit_order_type = self._market_info.market.get_maker_order_type()
 *         self._all_markets_ready = False             # <<<<<<<<<<<<<<
 *         self._filled_buys_balance = 0
 *         self._filled_sells_balance = 0
 */
  __pyx_v_self->_all_markets_ready = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":119
 *         self._limit_order_type = self._market_info.market.get_maker_order_type()
 *         self._all_markets_ready = False
 *         self._filled_buys_balance = 0             # <<<<<<<<<<<<<<
 *         self._filled_sells_balance = 0
 *         self._logging_options = logging_options
 */
  __pyx_v_self->_filled_buys_balance = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":120
 *         self._all_markets_ready = False
 *         self._filled_buys_balance = 0
 *         self._filled_sells_balance = 0             # <<<<<<<<<<<<<<
 *         self._logging_options = logging_options
 *         self._last_timestamp = 0
 */
  __pyx_v_self->_filled_sells_balance = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":121
 *         self._filled_buys_balance = 0
 *         self._filled_sells_balance = 0
 *         self._logging_options = logging_options             # <<<<<<<<<<<<<<
 *         self._last_timestamp = 0
 *         self._status_report_interval = status_report_interval
 */
  __pyx_t_6 = __Pyx_PyInt_As_int64_t(__pyx_v_logging_options); if (unlikely((__pyx_t_6 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 121, __pyx_L1_error)
  __pyx_v_self->_logging_options = __pyx_t_6;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":122
 *         self._filled_sells_balance = 0
 *         self._logging_options = logging_options
 *         self._last_timestamp = 0             # <<<<<<<<<<<<<<
 *         self._status_report_interval = status_report_interval
 *         self._last_own_trade_price = Decimal('nan')
 */
  __pyx_v_self->_last_timestamp = 0.0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":123
 *         self._logging_options = logging_options
 *         self._last_timestamp = 0
 *         self._status_report_interval = status_report_interval             # <<<<<<<<<<<<<<
 *         self._last_own_trade_price = Decimal('nan')
 * 
 */
  __pyx_v_self->_status_report_interval = __pyx_v_status_report_interval;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":124
 *         self._last_timestamp = 0
 *         self._status_report_interval = status_report_interval
 *         self._last_own_trade_price = Decimal('nan')             # <<<<<<<<<<<<<<
 * 
 *         self.c_add_markets([market_info.market])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  __pyx_t_3 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_3 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_n_u_nan};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_3, 1+__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_last_own_trade_price);
  __Pyx_DECREF(__pyx_v_self->_last_own_trade_price);
  __pyx_v_self->_last_own_trade_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":126
 *         self._last_own_trade_price = Decimal('nan')
 * 
 *         self.c_add_markets([market_info.market])             # <<<<<<<<<<<<<<
 *         self._ticks_to_be_ready = volatility_buffer_size
 *         self._parameters_based_on_spread = parameters_based_on_spread
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyList_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_add_markets(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), ((PyObject*)__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":127
 * 
 *         self.c_add_markets([market_info.market])
 *         self._ticks_to_be_ready = volatility_buffer_size             # <<<<<<<<<<<<<<
 *         self._parameters_based_on_spread = parameters_based_on_spread
 *         self._min_spread = min_spread
 */
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_volatility_buffer_size); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 127, __pyx_L1_error)
  __pyx_v_self->_ticks_to_be_ready = __pyx_t_3;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":128
 *         self.c_add_markets([market_info.market])
 *         self._ticks_to_be_ready = volatility_buffer_size
 *         self._parameters_based_on_spread = parameters_based_on_spread             # <<<<<<<<<<<<<<
 *         self._min_spread = min_spread
 *         self._max_spread = max_spread
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_parameters_based_on_spread); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 128, __pyx_L1_error)
  __pyx_v_self->_parameters_based_on_spread = __pyx_t_2;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":129
 *         self._ticks_to_be_ready = volatility_buffer_size
 *         self._parameters_based_on_spread = parameters_based_on_spread
 *         self._min_spread = min_spread             # <<<<<<<<<<<<<<
 *         self._max_spread = max_spread
 *         self._vol_to_spread_multiplier = vol_to_spread_multiplier
 */
  __Pyx_INCREF(__pyx_v_min_spread);
  __Pyx_GIVEREF(__pyx_v_min_spread);
  __Pyx_GOTREF(__pyx_v_self->_min_spread);
  __Pyx_DECREF(__pyx_v_self->_min_spread);
  __pyx_v_self->_min_spread = __pyx_v_min_spread;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":130
 *         self._parameters_based_on_spread = parameters_based_on_spread
 *         self._min_spread = min_spread
 *         self._max_spread = max_spread             # <<<<<<<<<<<<<<
 *         self._vol_to_spread_multiplier = vol_to_spread_multiplier
 *         self._volatility_sensibility = volatility_sensibility
 */
  __Pyx_INCREF(__pyx_v_max_spread);
  __Pyx_GIVEREF(__pyx_v_max_spread);
  __Pyx_GOTREF(__pyx_v_self->_max_spread);
  __Pyx_DECREF(__pyx_v_self->_max_spread);
  __pyx_v_self->_max_spread = __pyx_v_max_spread;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":131
 *         self._min_spread = min_spread
 *         self._max_spread = max_spread
 *         self._vol_to_spread_multiplier = vol_to_spread_multiplier             # <<<<<<<<<<<<<<
 *         self._volatility_sensibility = volatility_sensibility
 *         self._inventory_risk_aversion = inventory_risk_aversion
 */
  __Pyx_INCREF(__pyx_v_vol_to_spread_multiplier);
  __Pyx_GIVEREF(__pyx_v_vol_to_spread_multiplier);
  __Pyx_GOTREF(__pyx_v_self->_vol_to_spread_multiplier);
  __Pyx_DECREF(__pyx_v_self->_vol_to_spread_multiplier);
  __pyx_v_self->_vol_to_spread_multiplier = __pyx_v_vol_to_spread_multiplier;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":132
 *         self._max_spread = max_spread
 *         self._vol_to_spread_multiplier = vol_to_spread_multiplier
 *         self._volatility_sensibility = volatility_sensibility             # <<<<<<<<<<<<<<
 *         self._inventory_risk_aversion = inventory_risk_aversion
 *         self._avg_vol = InstantVolatilityIndicator(volatility_buffer_size, 1)
 */
  __Pyx_INCREF(__pyx_v_volatility_sensibility);
  __Pyx_GIVEREF(__pyx_v_volatility_sensibility);
  __Pyx_GOTREF(__pyx_v_self->_volatility_sensibility);
  __Pyx_DECREF(__pyx_v_self->_volatility_sensibility);
  __pyx_v_self->_volatility_sensibility = __pyx_v_volatility_sensibility;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":133
 *         self._vol_to_spread_multiplier = vol_to_spread_multiplier
 *         self._volatility_sensibility = volatility_sensibility
 *         self._inventory_risk_aversion = inventory_risk_aversion             # <<<<<<<<<<<<<<
 *         self._avg_vol = InstantVolatilityIndicator(volatility_buffer_size, 1)
 *         self._last_sampling_timestamp = 0
 */
  __Pyx_INCREF(__pyx_v_inventory_risk_aversion);
  __Pyx_GIVEREF(__pyx_v_inventory_risk_aversion);
  __Pyx_GOTREF(__pyx_v_self->_inventory_risk_aversion);
  __Pyx_DECREF(__pyx_v_self->_inventory_risk_aversion);
  __pyx_v_self->_inventory_risk_aversion = __pyx_v_inventory_risk_aversion;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":134
 *         self._volatility_sensibility = volatility_sensibility
 *         self._inventory_risk_aversion = inventory_risk_aversion
 *         self._avg_vol = InstantVolatilityIndicator(volatility_buffer_size, 1)             # <<<<<<<<<<<<<<
 *         self._last_sampling_timestamp = 0
 *         self._kappa = order_book_depth_factor
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_InstantVolatilityIndicator); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  __pyx_t_3 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_3 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_v_volatility_buffer_size, __pyx_int_1};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_3, 2+__pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_avg_vol);
  __Pyx_DECREF(__pyx_v_self->_avg_vol);
  __pyx_v_self->_avg_vol = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":135
 *         self._inventory_risk_aversion = inventory_risk_aversion
 *         self._avg_vol = InstantVolatilityIndicator(volatility_buffer_size, 1)
 *         self._last_sampling_timestamp = 0             # <<<<<<<<<<<<<<
 *         self._kappa = order_book_depth_factor
 *         self._gamma = risk_factor
 */
  __pyx_v_self->_last_sampling_timestamp = 0.0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":136
 *         self._avg_vol = InstantVolatilityIndicator(volatility_buffer_size, 1)
 *         self._last_sampling_timestamp = 0
 *         self._kappa = order_book_depth_factor             # <<<<<<<<<<<<<<
 *         self._gamma = risk_factor
 *         self._eta = order_amount_shape_factor
 */
  __Pyx_INCREF(__pyx_v_order_book_depth_factor);
  __Pyx_GIVEREF(__pyx_v_order_book_depth_factor);
  __Pyx_GOTREF(__pyx_v_self->_kappa);
  __Pyx_DECREF(__pyx_v_self->_kappa);
  __pyx_v_self->_kappa = __pyx_v_order_book_depth_factor;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":137
 *         self._last_sampling_timestamp = 0
 *         self._kappa = order_book_depth_factor
 *         self._gamma = risk_factor             # <<<<<<<<<<<<<<
 *         self._eta = order_amount_shape_factor
 *         self._time_left = closing_time
 */
  __Pyx_INCREF(__pyx_v_risk_factor);
  __Pyx_GIVEREF(__pyx_v_risk_factor);
  __Pyx_GOTREF(__pyx_v_self->_gamma);
  __Pyx_DECREF(__pyx_v_self->_gamma);
  __pyx_v_self->_gamma = __pyx_v_risk_factor;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":138
 *         self._kappa = order_book_depth_factor
 *         self._gamma = risk_factor
 *         self._eta = order_amount_shape_factor             # <<<<<<<<<<<<<<
 *         self._time_left = closing_time
 *         self._closing_time = closing_time
 */
  __Pyx_INCREF(__pyx_v_order_amount_shape_factor);
  __Pyx_GIVEREF(__pyx_v_order_amount_shape_factor);
  __Pyx_GOTREF(__pyx_v_self->_eta);
  __Pyx_DECREF(__pyx_v_self->_eta);
  __pyx_v_self->_eta = __pyx_v_order_amount_shape_factor;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":139
 *         self._gamma = risk_factor
 *         self._eta = order_amount_shape_factor
 *         self._time_left = closing_time             # <<<<<<<<<<<<<<
 *         self._closing_time = closing_time
 *         self._latest_parameter_calculation_vol = s_decimal_zero
 */
  __Pyx_INCREF(__pyx_v_closing_time);
  __Pyx_GIVEREF(__pyx_v_closing_time);
  __Pyx_GOTREF(__pyx_v_self->_time_left);
  __Pyx_DECREF(__pyx_v_self->_time_left);
  __pyx_v_self->_time_left = __pyx_v_closing_time;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":140
 *         self._eta = order_amount_shape_factor
 *         self._time_left = closing_time
 *         self._closing_time = closing_time             # <<<<<<<<<<<<<<
 *         self._latest_parameter_calculation_vol = s_decimal_zero
 *         self._reserved_price = s_decimal_zero
 */
  __Pyx_INCREF(__pyx_v_closing_time);
  __Pyx_GIVEREF(__pyx_v_closing_time);
  __Pyx_GOTREF(__pyx_v_self->_closing_time);
  __Pyx_DECREF(__pyx_v_self->_closing_time);
  __pyx_v_self->_closing_time = __pyx_v_closing_time;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":141
 *         self._time_left = closing_time
 *         self._closing_time = closing_time
 *         self._latest_parameter_calculation_vol = s_decimal_zero             # <<<<<<<<<<<<<<
 *         self._reserved_price = s_decimal_zero
 *         self._optimal_spread = s_decimal_zero
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_latest_parameter_calculation_vol);
  __Pyx_DECREF(__pyx_v_self->_latest_parameter_calculation_vol);
  __pyx_v_self->_latest_parameter_calculation_vol = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":142
 *         self._closing_time = closing_time
 *         self._latest_parameter_calculation_vol = s_decimal_zero
 *         self._reserved_price = s_decimal_zero             # <<<<<<<<<<<<<<
 *         self._optimal_spread = s_decimal_zero
 *         self._optimal_ask = s_decimal_zero
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_reserved_price);
  __Pyx_DECREF(__pyx_v_self->_reserved_price);
  __pyx_v_self->_reserved_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":143
 *         self._latest_parameter_calculation_vol = s_decimal_zero
 *         self._reserved_price = s_decimal_zero
 *         self._optimal_spread = s_decimal_zero             # <<<<<<<<<<<<<<
 *         self._optimal_ask = s_decimal_zero
 *         self._optimal_bid = s_decimal_zero
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 143, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_optimal_spread);
  __Pyx_DECREF(__pyx_v_self->_optimal_spread);
  __pyx_v_self->_optimal_spread = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":144
 *         self._reserved_price = s_decimal_zero
 *         self._optimal_spread = s_decimal_zero
 *         self._optimal_ask = s_decimal_zero             # <<<<<<<<<<<<<<
 *         self._optimal_bid = s_decimal_zero
 *         self._should_wait_order_cancel_confirmation = should_wait_order_cancel_confirmation
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_optimal_ask);
  __Pyx_DECREF(__pyx_v_self->_optimal_ask);
  __pyx_v_self->_optimal_ask = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":145
 *         self._optimal_spread = s_decimal_zero
 *         self._optimal_ask = s_decimal_zero
 *         self._optimal_bid = s_decimal_zero             # <<<<<<<<<<<<<<
 *         self._should_wait_order_cancel_confirmation = should_wait_order_cancel_confirmation
 *         self._debug_csv_path = debug_csv_path
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_optimal_bid);
  __Pyx_DECREF(__pyx_v_self->_optimal_bid);
  __pyx_v_self->_optimal_bid = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":146
 *         self._optimal_ask = s_decimal_zero
 *         self._optimal_bid = s_decimal_zero
 *         self._should_wait_order_cancel_confirmation = should_wait_order_cancel_confirmation             # <<<<<<<<<<<<<<
 *         self._debug_csv_path = debug_csv_path
 *         self._is_debug = is_debug
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_should_wait_order_cancel_confirmation); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 146, __pyx_L1_error)
  __pyx_v_self->_should_wait_order_cancel_confirmation = __pyx_t_2;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":147
 *         self._optimal_bid = s_decimal_zero
 *         self._should_wait_order_cancel_confirmation = should_wait_order_cancel_confirmation
 *         self._debug_csv_path = debug_csv_path             # <<<<<<<<<<<<<<
 *         self._is_debug = is_debug
 *         try:
 */
  __Pyx_INCREF(__pyx_v_debug_csv_path);
  __Pyx_GIVEREF(__pyx_v_debug_csv_path);
  __Pyx_GOTREF(__pyx_v_self->_debug_csv_path);
  __Pyx_DECREF(__pyx_v_self->_debug_csv_path);
  __pyx_v_self->_debug_csv_path = __pyx_v_debug_csv_path;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":148
 *         self._should_wait_order_cancel_confirmation = should_wait_order_cancel_confirmation
 *         self._debug_csv_path = debug_csv_path
 *         self._is_debug = is_debug             # <<<<<<<<<<<<<<
 *         try:
 *             if self._is_debug:
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_is_debug); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 148, __pyx_L1_error)
  __pyx_v_self->_is_debug = __pyx_t_2;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":149
 *         self._debug_csv_path = debug_csv_path
 *         self._is_debug = is_debug
 *         try:             # <<<<<<<<<<<<<<
 *             if self._is_debug:
 *                 os.unlink(self._debug_csv_path)
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_9);
    /*try:*/ {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":150
 *         self._is_debug = is_debug
 *         try:
 *             if self._is_debug:             # <<<<<<<<<<<<<<
 *                 os.unlink(self._debug_csv_path)
 *         except FileNotFoundError:
 */
      __pyx_t_2 = (__pyx_v_self->_is_debug != 0);
      if (__pyx_t_2) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":151
 *         try:
 *             if self._is_debug:
 *                 os.unlink(self._debug_csv_path)             # <<<<<<<<<<<<<<
 *         except FileNotFoundError:
 *             pass
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_os); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 151, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_unlink); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 151, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        __pyx_t_3 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_3 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_self->_debug_csv_path};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_3, 1+__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":150
 *         self._is_debug = is_debug
 *         try:
 *             if self._is_debug:             # <<<<<<<<<<<<<<
 *                 os.unlink(self._debug_csv_path)
 *         except FileNotFoundError:
 */
      }

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":149
 *         self._debug_csv_path = debug_csv_path
 *         self._is_debug = is_debug
 *         try:             # <<<<<<<<<<<<<<
 *             if self._is_debug:
 *                 os.unlink(self._debug_csv_path)
 */
    }
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":152
 *             if self._is_debug:
 *                 os.unlink(self._debug_csv_path)
 *         except FileNotFoundError:             # <<<<<<<<<<<<<<
 *             pass
 * 
 */
    __Pyx_ErrFetch(&__pyx_t_1, &__pyx_t_4, &__pyx_t_5);
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_FileNotFoundError); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 152, __pyx_L5_except_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_3 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_1, __pyx_t_10);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_ErrRestore(__pyx_t_1, __pyx_t_4, __pyx_t_5);
    __pyx_t_1 = 0; __pyx_t_4 = 0; __pyx_t_5 = 0;
    if (__pyx_t_3) {
      __Pyx_ErrRestore(0,0,0);
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":149
 *         self._debug_csv_path = debug_csv_path
 *         self._is_debug = is_debug
 *         try:             # <<<<<<<<<<<<<<
 *             if self._is_debug:
 *                 os.unlink(self._debug_csv_path)
 */
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
    __pyx_L8_try_end:;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":66
 *         return pmm_logger
 * 
 *     def init_params(self,             # <<<<<<<<<<<<<<
 *                     market_info: MarketTradingPairTuple,
 *                     order_amount: Decimal,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.init_params", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":155
 *             pass
 * 
 *     def all_markets_ready(self):             # <<<<<<<<<<<<<<
 *         return all([market.ready for market in self._sb_markets])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5all_markets_ready(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5all_markets_ready = {"all_markets_ready", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5all_markets_ready, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5all_markets_ready(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("all_markets_ready (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("all_markets_ready", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "all_markets_ready", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_4all_markets_ready(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_4all_markets_ready(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_7genexpr__pyx_v_market = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("all_markets_ready", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":156
 * 
 *     def all_markets_ready(self):
 *         return all([market.ready for market in self._sb_markets])             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 156, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_set_iterator(__pyx_v_self->__pyx_base._sb_markets, 1, (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 156, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_6;
    __pyx_t_6 = 0;
    while (1) {
      __pyx_t_7 = __Pyx_set_iter_next(__pyx_t_2, __pyx_t_4, &__pyx_t_3, &__pyx_t_6, __pyx_t_5);
      if (unlikely(__pyx_t_7 == 0)) break;
      if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 156, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_market, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_7genexpr__pyx_v_market, __pyx_n_s_ready); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 156, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 156, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_market); __pyx_7genexpr__pyx_v_market = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_market); __pyx_7genexpr__pyx_v_market = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_builtin_all, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":155
 *             pass
 * 
 *     def all_markets_ready(self):             # <<<<<<<<<<<<<<
 *         return all([market.ready for market in self._sb_markets])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.all_markets_ready", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_market);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":158
 *         return all([market.ready for market in self._sb_markets])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def volatility_sensibility(self) -> Decimal:
 *         return self._volatility_sensibility
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_22volatility_sensibility_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_22volatility_sensibility_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_22volatility_sensibility___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_22volatility_sensibility___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":160
 *     @property
 *     def volatility_sensibility(self) -> Decimal:
 *         return self._volatility_sensibility             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_volatility_sensibility);
  __pyx_r = __pyx_v_self->_volatility_sensibility;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":158
 *         return all([market.ready for market in self._sb_markets])
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def volatility_sensibility(self) -> Decimal:
 *         return self._volatility_sensibility
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":162
 *         return self._volatility_sensibility
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def inventory_risk_aversion(self) -> Decimal:
 *         return self._inventory_risk_aversion
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_23inventory_risk_aversion_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_23inventory_risk_aversion_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_23inventory_risk_aversion___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_23inventory_risk_aversion___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":164
 *     @property
 *     def inventory_risk_aversion(self) -> Decimal:
 *         return self._inventory_risk_aversion             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_inventory_risk_aversion);
  __pyx_r = __pyx_v_self->_inventory_risk_aversion;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":162
 *         return self._volatility_sensibility
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def inventory_risk_aversion(self) -> Decimal:
 *         return self._inventory_risk_aversion
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":166
 *         return self._inventory_risk_aversion
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def latest_parameter_calculation_vol(self):
 *         return self._latest_parameter_calculation_vol
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_32latest_parameter_calculation_vol_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_32latest_parameter_calculation_vol_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_32latest_parameter_calculation_vol___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_32latest_parameter_calculation_vol___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":168
 *     @property
 *     def latest_parameter_calculation_vol(self):
 *         return self._latest_parameter_calculation_vol             # <<<<<<<<<<<<<<
 * 
 *     @latest_parameter_calculation_vol.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_latest_parameter_calculation_vol);
  __pyx_r = __pyx_v_self->_latest_parameter_calculation_vol;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":166
 *         return self._inventory_risk_aversion
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def latest_parameter_calculation_vol(self):
 *         return self._latest_parameter_calculation_vol
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":170
 *         return self._latest_parameter_calculation_vol
 * 
 *     @latest_parameter_calculation_vol.setter             # <<<<<<<<<<<<<<
 *     def latest_parameter_calculation_vol(self, value):
 *         self._latest_parameter_calculation_vol = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_32latest_parameter_calculation_vol_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_32latest_parameter_calculation_vol_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_32latest_parameter_calculation_vol_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_32latest_parameter_calculation_vol_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":172
 *     @latest_parameter_calculation_vol.setter
 *     def latest_parameter_calculation_vol(self, value):
 *         self._latest_parameter_calculation_vol = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_latest_parameter_calculation_vol);
  __Pyx_DECREF(__pyx_v_self->_latest_parameter_calculation_vol);
  __pyx_v_self->_latest_parameter_calculation_vol = __pyx_v_value;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":170
 *         return self._latest_parameter_calculation_vol
 * 
 *     @latest_parameter_calculation_vol.setter             # <<<<<<<<<<<<<<
 *     def latest_parameter_calculation_vol(self, value):
 *         self._latest_parameter_calculation_vol = value
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":174
 *         self._latest_parameter_calculation_vol = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def avg_vol(self):
 *         return self._avg_vol
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7avg_vol_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7avg_vol_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7avg_vol___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7avg_vol___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":176
 *     @property
 *     def avg_vol(self):
 *         return self._avg_vol             # <<<<<<<<<<<<<<
 * 
 *     @avg_vol.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_avg_vol);
  __pyx_r = __pyx_v_self->_avg_vol;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":174
 *         self._latest_parameter_calculation_vol = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def avg_vol(self):
 *         return self._avg_vol
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":178
 *         return self._avg_vol
 * 
 *     @avg_vol.setter             # <<<<<<<<<<<<<<
 *     def avg_vol(self, indicator: InstantVolatilityIndicator):
 *         self._avg_vol = indicator
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7avg_vol_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indicator); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7avg_vol_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_indicator) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7avg_vol_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_indicator));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7avg_vol_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_indicator) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":180
 *     @avg_vol.setter
 *     def avg_vol(self, indicator: InstantVolatilityIndicator):
 *         self._avg_vol = indicator             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF(__pyx_v_indicator);
  __Pyx_GIVEREF(__pyx_v_indicator);
  __Pyx_GOTREF(__pyx_v_self->_avg_vol);
  __Pyx_DECREF(__pyx_v_self->_avg_vol);
  __pyx_v_self->_avg_vol = __pyx_v_indicator;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":178
 *         return self._avg_vol
 * 
 *     @avg_vol.setter             # <<<<<<<<<<<<<<
 *     def avg_vol(self, indicator: InstantVolatilityIndicator):
 *         self._avg_vol = indicator
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":182
 *         self._avg_vol = indicator
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def market_info(self) -> MarketTradingPairTuple:
 *         return self._market_info
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11market_info_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11market_info_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11market_info___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11market_info___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":184
 *     @property
 *     def market_info(self) -> MarketTradingPairTuple:
 *         return self._market_info             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_market_info);
  __pyx_r = __pyx_v_self->_market_info;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":182
 *         self._avg_vol = indicator
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def market_info(self) -> MarketTradingPairTuple:
 *         return self._market_info
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":186
 *         return self._market_info
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def order_refresh_tolerance_pct(self) -> Decimal:
 *         return self._order_refresh_tolerance_pct
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_27order_refresh_tolerance_pct_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_27order_refresh_tolerance_pct_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_27order_refresh_tolerance_pct___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_27order_refresh_tolerance_pct___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":188
 *     @property
 *     def order_refresh_tolerance_pct(self) -> Decimal:
 *         return self._order_refresh_tolerance_pct             # <<<<<<<<<<<<<<
 * 
 *     @order_refresh_tolerance_pct.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_order_refresh_tolerance_pct);
  __pyx_r = __pyx_v_self->_order_refresh_tolerance_pct;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":186
 *         return self._market_info
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def order_refresh_tolerance_pct(self) -> Decimal:
 *         return self._order_refresh_tolerance_pct
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":190
 *         return self._order_refresh_tolerance_pct
 * 
 *     @order_refresh_tolerance_pct.setter             # <<<<<<<<<<<<<<
 *     def order_refresh_tolerance_pct(self, value: Decimal):
 *         self._order_refresh_tolerance_pct = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_27order_refresh_tolerance_pct_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_27order_refresh_tolerance_pct_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_27order_refresh_tolerance_pct_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_27order_refresh_tolerance_pct_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":192
 *     @order_refresh_tolerance_pct.setter
 *     def order_refresh_tolerance_pct(self, value: Decimal):
 *         self._order_refresh_tolerance_pct = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_order_refresh_tolerance_pct);
  __Pyx_DECREF(__pyx_v_self->_order_refresh_tolerance_pct);
  __pyx_v_self->_order_refresh_tolerance_pct = __pyx_v_value;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":190
 *         return self._order_refresh_tolerance_pct
 * 
 *     @order_refresh_tolerance_pct.setter             # <<<<<<<<<<<<<<
 *     def order_refresh_tolerance_pct(self, value: Decimal):
 *         self._order_refresh_tolerance_pct = value
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":194
 *         self._order_refresh_tolerance_pct = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def order_amount(self) -> Decimal:
 *         return self._order_amount
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_amount_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_amount_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_amount___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_amount___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":196
 *     @property
 *     def order_amount(self) -> Decimal:
 *         return self._order_amount             # <<<<<<<<<<<<<<
 * 
 *     @order_amount.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_order_amount);
  __pyx_r = __pyx_v_self->_order_amount;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":194
 *         self._order_refresh_tolerance_pct = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def order_amount(self) -> Decimal:
 *         return self._order_amount
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":198
 *         return self._order_amount
 * 
 *     @order_amount.setter             # <<<<<<<<<<<<<<
 *     def order_amount(self, value: Decimal):
 *         self._order_amount = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_amount_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_amount_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_amount_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_amount_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":200
 *     @order_amount.setter
 *     def order_amount(self, value: Decimal):
 *         self._order_amount = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_order_amount);
  __Pyx_DECREF(__pyx_v_self->_order_amount);
  __pyx_v_self->_order_amount = __pyx_v_value;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":198
 *         return self._order_amount
 * 
 *     @order_amount.setter             # <<<<<<<<<<<<<<
 *     def order_amount(self, value: Decimal):
 *         self._order_amount = value
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":202
 *         self._order_amount = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def inventory_target_base_pct(self) -> Decimal:
 *         return self._inventory_target_base_pct
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25inventory_target_base_pct_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25inventory_target_base_pct_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25inventory_target_base_pct___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25inventory_target_base_pct___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":204
 *     @property
 *     def inventory_target_base_pct(self) -> Decimal:
 *         return self._inventory_target_base_pct             # <<<<<<<<<<<<<<
 * 
 *     @inventory_target_base_pct.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_inventory_target_base_pct);
  __pyx_r = __pyx_v_self->_inventory_target_base_pct;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":202
 *         self._order_amount = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def inventory_target_base_pct(self) -> Decimal:
 *         return self._inventory_target_base_pct
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":206
 *         return self._inventory_target_base_pct
 * 
 *     @inventory_target_base_pct.setter             # <<<<<<<<<<<<<<
 *     def inventory_target_base_pct(self, value: Decimal):
 *         self._inventory_target_base_pct = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25inventory_target_base_pct_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25inventory_target_base_pct_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25inventory_target_base_pct_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25inventory_target_base_pct_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":208
 *     @inventory_target_base_pct.setter
 *     def inventory_target_base_pct(self, value: Decimal):
 *         self._inventory_target_base_pct = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_inventory_target_base_pct);
  __Pyx_DECREF(__pyx_v_self->_inventory_target_base_pct);
  __pyx_v_self->_inventory_target_base_pct = __pyx_v_value;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":206
 *         return self._inventory_target_base_pct
 * 
 *     @inventory_target_base_pct.setter             # <<<<<<<<<<<<<<
 *     def inventory_target_base_pct(self, value: Decimal):
 *         self._inventory_target_base_pct = value
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":210
 *         self._inventory_target_base_pct = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def order_optimization_enabled(self) -> bool:
 *         return self._order_optimization_enabled
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26order_optimization_enabled_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26order_optimization_enabled_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26order_optimization_enabled___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26order_optimization_enabled___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":212
 *     @property
 *     def order_optimization_enabled(self) -> bool:
 *         return self._order_optimization_enabled             # <<<<<<<<<<<<<<
 * 
 *     @order_optimization_enabled.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_order_optimization_enabled); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":210
 *         self._inventory_target_base_pct = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def order_optimization_enabled(self) -> bool:
 *         return self._order_optimization_enabled
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.order_optimization_enabled.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":214
 *         return self._order_optimization_enabled
 * 
 *     @order_optimization_enabled.setter             # <<<<<<<<<<<<<<
 *     def order_optimization_enabled(self, value: bool):
 *         self._order_optimization_enabled = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26order_optimization_enabled_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26order_optimization_enabled_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26order_optimization_enabled_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26order_optimization_enabled_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":216
 *     @order_optimization_enabled.setter
 *     def order_optimization_enabled(self, value: bool):
 *         self._order_optimization_enabled = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 216, __pyx_L1_error)
  __pyx_v_self->_order_optimization_enabled = __pyx_t_1;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":214
 *         return self._order_optimization_enabled
 * 
 *     @order_optimization_enabled.setter             # <<<<<<<<<<<<<<
 *     def order_optimization_enabled(self, value: bool):
 *         self._order_optimization_enabled = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.order_optimization_enabled.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":218
 *         self._order_optimization_enabled = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def order_refresh_time(self) -> float:
 *         return self._order_refresh_time
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18order_refresh_time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18order_refresh_time_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18order_refresh_time___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18order_refresh_time___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":220
 *     @property
 *     def order_refresh_time(self) -> float:
 *         return self._order_refresh_time             # <<<<<<<<<<<<<<
 * 
 *     @order_refresh_time.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_order_refresh_time); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":218
 *         self._order_optimization_enabled = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def order_refresh_time(self) -> float:
 *         return self._order_refresh_time
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.order_refresh_time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":222
 *         return self._order_refresh_time
 * 
 *     @order_refresh_time.setter             # <<<<<<<<<<<<<<
 *     def order_refresh_time(self, value: float):
 *         self._order_refresh_time = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18order_refresh_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18order_refresh_time_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 223, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.order_refresh_time.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18order_refresh_time_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18order_refresh_time_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, double __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":224
 *     @order_refresh_time.setter
 *     def order_refresh_time(self, value: float):
 *         self._order_refresh_time = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_order_refresh_time = __pyx_v_value;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":222
 *         return self._order_refresh_time
 * 
 *     @order_refresh_time.setter             # <<<<<<<<<<<<<<
 *     def order_refresh_time(self, value: float):
 *         self._order_refresh_time = value
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":226
 *         self._order_refresh_time = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def filled_order_delay(self) -> float:
 *         return self._filled_order_delay
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18filled_order_delay_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18filled_order_delay_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18filled_order_delay___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18filled_order_delay___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":228
 *     @property
 *     def filled_order_delay(self) -> float:
 *         return self._filled_order_delay             # <<<<<<<<<<<<<<
 * 
 *     @filled_order_delay.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_filled_order_delay); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":226
 *         self._order_refresh_time = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def filled_order_delay(self) -> float:
 *         return self._filled_order_delay
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.filled_order_delay.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":230
 *         return self._filled_order_delay
 * 
 *     @filled_order_delay.setter             # <<<<<<<<<<<<<<
 *     def filled_order_delay(self, value: float):
 *         self._filled_order_delay = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18filled_order_delay_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18filled_order_delay_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  double __pyx_v_value;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __pyx_PyFloat_AsDouble(__pyx_arg_value); if (unlikely((__pyx_v_value == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 231, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.filled_order_delay.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18filled_order_delay_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((double)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18filled_order_delay_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, double __pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":232
 *     @filled_order_delay.setter
 *     def filled_order_delay(self, value: float):
 *         self._filled_order_delay = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_filled_order_delay = __pyx_v_value;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":230
 *         return self._filled_order_delay
 * 
 *     @filled_order_delay.setter             # <<<<<<<<<<<<<<
 *     def filled_order_delay(self, value: float):
 *         self._filled_order_delay = value
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":234
 *         self._filled_order_delay = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def vol_to_spread_multiplier(self) -> Decimal:
 *         return self._vol_to_spread_multiplier
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_24vol_to_spread_multiplier_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_24vol_to_spread_multiplier_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_24vol_to_spread_multiplier___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_24vol_to_spread_multiplier___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":236
 *     @property
 *     def vol_to_spread_multiplier(self) -> Decimal:
 *         return self._vol_to_spread_multiplier             # <<<<<<<<<<<<<<
 * 
 *     @vol_to_spread_multiplier.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_vol_to_spread_multiplier);
  __pyx_r = __pyx_v_self->_vol_to_spread_multiplier;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":234
 *         self._filled_order_delay = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def vol_to_spread_multiplier(self) -> Decimal:
 *         return self._vol_to_spread_multiplier
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":238
 *         return self._vol_to_spread_multiplier
 * 
 *     @vol_to_spread_multiplier.setter             # <<<<<<<<<<<<<<
 *     def vol_to_spread_multiplier(self, value):
 *         self._vol_to_spread_multiplier = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_24vol_to_spread_multiplier_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_24vol_to_spread_multiplier_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_24vol_to_spread_multiplier_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_24vol_to_spread_multiplier_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":240
 *     @vol_to_spread_multiplier.setter
 *     def vol_to_spread_multiplier(self, value):
 *         self._vol_to_spread_multiplier = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_vol_to_spread_multiplier);
  __Pyx_DECREF(__pyx_v_self->_vol_to_spread_multiplier);
  __pyx_v_self->_vol_to_spread_multiplier = __pyx_v_value;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":238
 *         return self._vol_to_spread_multiplier
 * 
 *     @vol_to_spread_multiplier.setter             # <<<<<<<<<<<<<<
 *     def vol_to_spread_multiplier(self, value):
 *         self._vol_to_spread_multiplier = value
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":242
 *         self._vol_to_spread_multiplier = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def min_spread(self) -> Decimal:
 *         return self._min_spread
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10min_spread_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10min_spread_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10min_spread___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10min_spread___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":244
 *     @property
 *     def min_spread(self) -> Decimal:
 *         return self._min_spread             # <<<<<<<<<<<<<<
 * 
 *     @min_spread.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_min_spread);
  __pyx_r = __pyx_v_self->_min_spread;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":242
 *         self._vol_to_spread_multiplier = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def min_spread(self) -> Decimal:
 *         return self._min_spread
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":246
 *         return self._min_spread
 * 
 *     @min_spread.setter             # <<<<<<<<<<<<<<
 *     def min_spread(self, value):
 *         self._min_spread = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10min_spread_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10min_spread_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10min_spread_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10min_spread_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":248
 *     @min_spread.setter
 *     def min_spread(self, value):
 *         self._min_spread = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_min_spread);
  __Pyx_DECREF(__pyx_v_self->_min_spread);
  __pyx_v_self->_min_spread = __pyx_v_value;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":246
 *         return self._min_spread
 * 
 *     @min_spread.setter             # <<<<<<<<<<<<<<
 *     def min_spread(self, value):
 *         self._min_spread = value
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":250
 *         self._min_spread = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def max_spread(self) -> Decimal:
 *         return self._max_spread
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10max_spread_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10max_spread_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10max_spread___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10max_spread___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":252
 *     @property
 *     def max_spread(self) -> Decimal:
 *         return self._max_spread             # <<<<<<<<<<<<<<
 * 
 *     @max_spread.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_max_spread);
  __pyx_r = __pyx_v_self->_max_spread;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":250
 *         self._min_spread = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def max_spread(self) -> Decimal:
 *         return self._max_spread
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":254
 *         return self._max_spread
 * 
 *     @max_spread.setter             # <<<<<<<<<<<<<<
 *     def max_spread(self, value):
 *         self._max_spread = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10max_spread_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10max_spread_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10max_spread_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10max_spread_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":256
 *     @max_spread.setter
 *     def max_spread(self, value):
 *         self._max_spread = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_max_spread);
  __Pyx_DECREF(__pyx_v_self->_max_spread);
  __pyx_v_self->_max_spread = __pyx_v_value;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":254
 *         return self._max_spread
 * 
 *     @max_spread.setter             # <<<<<<<<<<<<<<
 *     def max_spread(self, value):
 *         self._max_spread = value
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":258
 *         self._max_spread = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def order_override(self) -> Dict[str, any]:
 *         return self._order_override
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14order_override_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14order_override_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14order_override___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14order_override___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":260
 *     @property
 *     def order_override(self) -> Dict[str, any]:
 *         return self._order_override             # <<<<<<<<<<<<<<
 * 
 *     @order_override.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_order_override);
  __pyx_r = __pyx_v_self->_order_override;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":258
 *         self._max_spread = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def order_override(self) -> Dict[str, any]:
 *         return self._order_override
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":262
 *         return self._order_override
 * 
 *     @order_override.setter             # <<<<<<<<<<<<<<
 *     def order_override(self, value):
 *         self._order_override = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14order_override_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14order_override_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14order_override_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14order_override_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":264
 *     @order_override.setter
 *     def order_override(self, value):
 *         self._order_override = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_order_override);
  __Pyx_DECREF(__pyx_v_self->_order_override);
  __pyx_v_self->_order_override = __pyx_v_value;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":262
 *         return self._order_override
 * 
 *     @order_override.setter             # <<<<<<<<<<<<<<
 *     def order_override(self, value):
 *         self._order_override = value
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":266
 *         self._order_override = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def order_levels(self) -> int:
 *         return self._order_levels
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_levels_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_levels_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_levels___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_levels___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":268
 *     @property
 *     def order_levels(self) -> int:
 *         return self._order_levels             # <<<<<<<<<<<<<<
 * 
 *     @order_levels.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->_order_levels); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":266
 *         self._order_override = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def order_levels(self) -> int:
 *         return self._order_levels
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.order_levels.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":270
 *         return self._order_levels
 * 
 *     @order_levels.setter             # <<<<<<<<<<<<<<
 *     def order_levels(self, value):
 *         self._order_levels = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_levels_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_levels_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_levels_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_levels_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":272
 *     @order_levels.setter
 *     def order_levels(self, value):
 *         self._order_levels = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 272, __pyx_L1_error)
  __pyx_v_self->_order_levels = __pyx_t_1;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":270
 *         return self._order_levels
 * 
 *     @order_levels.setter             # <<<<<<<<<<<<<<
 *     def order_levels(self, value):
 *         self._order_levels = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.order_levels.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":274
 *         self._order_levels = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def max_order_age(self):
 *         return self._max_order_age
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13max_order_age_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13max_order_age_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13max_order_age___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13max_order_age___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":276
 *     @property
 *     def max_order_age(self):
 *         return self._max_order_age             # <<<<<<<<<<<<<<
 * 
 *     @max_order_age.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->_max_order_age); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":274
 *         self._order_levels = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def max_order_age(self):
 *         return self._max_order_age
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.max_order_age.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":278
 *         return self._max_order_age
 * 
 *     @max_order_age.setter             # <<<<<<<<<<<<<<
 *     def max_order_age(self, value):
 *         self._max_order_age = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13max_order_age_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13max_order_age_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13max_order_age_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13max_order_age_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":280
 *     @max_order_age.setter
 *     def max_order_age(self, value):
 *         self._max_order_age = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 280, __pyx_L1_error)
  __pyx_v_self->_max_order_age = __pyx_t_1;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":278
 *         return self._max_order_age
 * 
 *     @max_order_age.setter             # <<<<<<<<<<<<<<
 *     def max_order_age(self, value):
 *         self._max_order_age = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.max_order_age.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":282
 *         self._max_order_age = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def add_transaction_costs_to_orders(self) -> bool:
 *         return self._add_transaction_costs_to_orders
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_31add_transaction_costs_to_orders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_31add_transaction_costs_to_orders_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_31add_transaction_costs_to_orders___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_31add_transaction_costs_to_orders___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":284
 *     @property
 *     def add_transaction_costs_to_orders(self) -> bool:
 *         return self._add_transaction_costs_to_orders             # <<<<<<<<<<<<<<
 * 
 *     @add_transaction_costs_to_orders.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->_add_transaction_costs_to_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":282
 *         self._max_order_age = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def add_transaction_costs_to_orders(self) -> bool:
 *         return self._add_transaction_costs_to_orders
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.add_transaction_costs_to_orders.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":286
 *         return self._add_transaction_costs_to_orders
 * 
 *     @add_transaction_costs_to_orders.setter             # <<<<<<<<<<<<<<
 *     def add_transaction_costs_to_orders(self, value: bool):
 *         self._add_transaction_costs_to_orders = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_31add_transaction_costs_to_orders_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_31add_transaction_costs_to_orders_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_31add_transaction_costs_to_orders_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_31add_transaction_costs_to_orders_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":288
 *     @add_transaction_costs_to_orders.setter
 *     def add_transaction_costs_to_orders(self, value: bool):
 *         self._add_transaction_costs_to_orders = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_value); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 288, __pyx_L1_error)
  __pyx_v_self->_add_transaction_costs_to_orders = __pyx_t_1;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":286
 *         return self._add_transaction_costs_to_orders
 * 
 *     @add_transaction_costs_to_orders.setter             # <<<<<<<<<<<<<<
 *     def add_transaction_costs_to_orders(self, value: bool):
 *         self._add_transaction_costs_to_orders = value
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.add_transaction_costs_to_orders.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":290
 *         self._add_transaction_costs_to_orders = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def base_asset(self):
 *         return self._market_info.base_asset
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10base_asset_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10base_asset_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10base_asset___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10base_asset___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":292
 *     @property
 *     def base_asset(self):
 *         return self._market_info.base_asset             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 292, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":290
 *         self._add_transaction_costs_to_orders = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def base_asset(self):
 *         return self._market_info.base_asset
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.base_asset.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":294
 *         return self._market_info.base_asset
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def quote_asset(self):
 *         return self._market_info.quote_asset
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11quote_asset_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11quote_asset_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11quote_asset___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11quote_asset___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":296
 *     @property
 *     def quote_asset(self):
 *         return self._market_info.quote_asset             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":294
 *         return self._market_info.base_asset
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def quote_asset(self):
 *         return self._market_info.quote_asset
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.quote_asset.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":298
 *         return self._market_info.quote_asset
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def trading_pair(self):
 *         return self._market_info.trading_pair
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12trading_pair_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12trading_pair_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12trading_pair___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12trading_pair___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":300
 *     @property
 *     def trading_pair(self):
 *         return self._market_info.trading_pair             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":298
 *         return self._market_info.quote_asset
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def trading_pair(self):
 *         return self._market_info.trading_pair
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.trading_pair.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":302
 *         return self._market_info.trading_pair
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def gamma(self):
 *         return self._gamma
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5gamma_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5gamma_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5gamma___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5gamma___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":304
 *     @property
 *     def gamma(self):
 *         return self._gamma             # <<<<<<<<<<<<<<
 * 
 *     @gamma.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_gamma);
  __pyx_r = __pyx_v_self->_gamma;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":302
 *         return self._market_info.trading_pair
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def gamma(self):
 *         return self._gamma
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":306
 *         return self._gamma
 * 
 *     @gamma.setter             # <<<<<<<<<<<<<<
 *     def gamma(self, value):
 *         self._gamma = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5gamma_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5gamma_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5gamma_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5gamma_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":308
 *     @gamma.setter
 *     def gamma(self, value):
 *         self._gamma = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_gamma);
  __Pyx_DECREF(__pyx_v_self->_gamma);
  __pyx_v_self->_gamma = __pyx_v_value;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":306
 *         return self._gamma
 * 
 *     @gamma.setter             # <<<<<<<<<<<<<<
 *     def gamma(self, value):
 *         self._gamma = value
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":310
 *         self._gamma = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def kappa(self):
 *         return self._kappa
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5kappa_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5kappa_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5kappa___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5kappa___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":312
 *     @property
 *     def kappa(self):
 *         return self._kappa             # <<<<<<<<<<<<<<
 * 
 *     @kappa.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_kappa);
  __pyx_r = __pyx_v_self->_kappa;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":310
 *         self._gamma = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def kappa(self):
 *         return self._kappa
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":314
 *         return self._kappa
 * 
 *     @kappa.setter             # <<<<<<<<<<<<<<
 *     def kappa(self, value):
 *         self._kappa = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5kappa_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5kappa_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5kappa_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5kappa_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":316
 *     @kappa.setter
 *     def kappa(self, value):
 *         self._kappa = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_kappa);
  __Pyx_DECREF(__pyx_v_self->_kappa);
  __pyx_v_self->_kappa = __pyx_v_value;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":314
 *         return self._kappa
 * 
 *     @kappa.setter             # <<<<<<<<<<<<<<
 *     def kappa(self, value):
 *         self._kappa = value
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":318
 *         self._kappa = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def eta(self):
 *         return self._eta
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_3eta_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_3eta_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_3eta___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_3eta___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":320
 *     @property
 *     def eta(self):
 *         return self._eta             # <<<<<<<<<<<<<<
 * 
 *     @eta.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_eta);
  __pyx_r = __pyx_v_self->_eta;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":318
 *         self._kappa = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def eta(self):
 *         return self._eta
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":322
 *         return self._eta
 * 
 *     @eta.setter             # <<<<<<<<<<<<<<
 *     def eta(self, value):
 *         self._eta = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_3eta_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_3eta_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_3eta_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_3eta_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":324
 *     @eta.setter
 *     def eta(self, value):
 *         self._eta = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_eta);
  __Pyx_DECREF(__pyx_v_self->_eta);
  __pyx_v_self->_eta = __pyx_v_value;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":322
 *         return self._eta
 * 
 *     @eta.setter             # <<<<<<<<<<<<<<
 *     def eta(self, value):
 *         self._eta = value
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":326
 *         self._eta = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def reserved_price(self):
 *         return self._reserved_price
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14reserved_price_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14reserved_price_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14reserved_price___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14reserved_price___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":328
 *     @property
 *     def reserved_price(self):
 *         return self._reserved_price             # <<<<<<<<<<<<<<
 * 
 *     @reserved_price.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_reserved_price);
  __pyx_r = __pyx_v_self->_reserved_price;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":326
 *         self._eta = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def reserved_price(self):
 *         return self._reserved_price
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":330
 *         return self._reserved_price
 * 
 *     @reserved_price.setter             # <<<<<<<<<<<<<<
 *     def reserved_price(self, value):
 *         self._reserved_price = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14reserved_price_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14reserved_price_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14reserved_price_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14reserved_price_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":332
 *     @reserved_price.setter
 *     def reserved_price(self, value):
 *         self._reserved_price = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_reserved_price);
  __Pyx_DECREF(__pyx_v_self->_reserved_price);
  __pyx_v_self->_reserved_price = __pyx_v_value;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":330
 *         return self._reserved_price
 * 
 *     @reserved_price.setter             # <<<<<<<<<<<<<<
 *     def reserved_price(self, value):
 *         self._reserved_price = value
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":334
 *         self._reserved_price = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def optimal_spread(self):
 *         return self._optimal_spread
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14optimal_spread_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14optimal_spread_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14optimal_spread___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14optimal_spread___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":336
 *     @property
 *     def optimal_spread(self):
 *         return self._optimal_spread             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_optimal_spread);
  __pyx_r = __pyx_v_self->_optimal_spread;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":334
 *         self._reserved_price = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def optimal_spread(self):
 *         return self._optimal_spread
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":338
 *         return self._optimal_spread
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def optimal_ask(self):
 *         return self._optimal_ask
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_ask_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_ask_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_ask___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_ask___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":340
 *     @property
 *     def optimal_ask(self):
 *         return self._optimal_ask             # <<<<<<<<<<<<<<
 * 
 *     @optimal_ask.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_optimal_ask);
  __pyx_r = __pyx_v_self->_optimal_ask;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":338
 *         return self._optimal_spread
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def optimal_ask(self):
 *         return self._optimal_ask
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":342
 *         return self._optimal_ask
 * 
 *     @optimal_ask.setter             # <<<<<<<<<<<<<<
 *     def optimal_ask(self, value):
 *         self._optimal_ask = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_ask_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_ask_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_ask_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_ask_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":344
 *     @optimal_ask.setter
 *     def optimal_ask(self, value):
 *         self._optimal_ask = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_optimal_ask);
  __Pyx_DECREF(__pyx_v_self->_optimal_ask);
  __pyx_v_self->_optimal_ask = __pyx_v_value;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":342
 *         return self._optimal_ask
 * 
 *     @optimal_ask.setter             # <<<<<<<<<<<<<<
 *     def optimal_ask(self, value):
 *         self._optimal_ask = value
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":346
 *         self._optimal_ask = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def optimal_bid(self):
 *         return self._optimal_bid
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_bid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_bid_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_bid___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_bid___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":348
 *     @property
 *     def optimal_bid(self):
 *         return self._optimal_bid             # <<<<<<<<<<<<<<
 * 
 *     @optimal_bid.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_optimal_bid);
  __pyx_r = __pyx_v_self->_optimal_bid;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":346
 *         self._optimal_ask = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def optimal_bid(self):
 *         return self._optimal_bid
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":350
 *         return self._optimal_bid
 * 
 *     @optimal_bid.setter             # <<<<<<<<<<<<<<
 *     def optimal_bid(self, value):
 *         self._optimal_bid = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_bid_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_bid_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_bid_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_bid_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":352
 *     @optimal_bid.setter
 *     def optimal_bid(self, value):
 *         self._optimal_bid = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_optimal_bid);
  __Pyx_DECREF(__pyx_v_self->_optimal_bid);
  __pyx_v_self->_optimal_bid = __pyx_v_value;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":350
 *         return self._optimal_bid
 * 
 *     @optimal_bid.setter             # <<<<<<<<<<<<<<
 *     def optimal_bid(self, value):
 *         self._optimal_bid = value
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":354
 *         self._optimal_bid = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def q_adjustment_factor(self):
 *         return self._q_adjustment_factor
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_19q_adjustment_factor_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_19q_adjustment_factor_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_19q_adjustment_factor___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_19q_adjustment_factor___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":356
 *     @property
 *     def q_adjustment_factor(self):
 *         return self._q_adjustment_factor             # <<<<<<<<<<<<<<
 * 
 *     @q_adjustment_factor.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_q_adjustment_factor);
  __pyx_r = __pyx_v_self->_q_adjustment_factor;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":354
 *         self._optimal_bid = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def q_adjustment_factor(self):
 *         return self._q_adjustment_factor
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":358
 *         return self._q_adjustment_factor
 * 
 *     @q_adjustment_factor.setter             # <<<<<<<<<<<<<<
 *     def q_adjustment_factor(self, value):
 *         self._q_adjustment_factor = value
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_19q_adjustment_factor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_19q_adjustment_factor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_19q_adjustment_factor_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_19q_adjustment_factor_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":360
 *     @q_adjustment_factor.setter
 *     def q_adjustment_factor(self, value):
 *         self._q_adjustment_factor = value             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_q_adjustment_factor);
  __Pyx_DECREF(__pyx_v_self->_q_adjustment_factor);
  __pyx_v_self->_q_adjustment_factor = __pyx_v_value;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":358
 *         return self._q_adjustment_factor
 * 
 *     @q_adjustment_factor.setter             # <<<<<<<<<<<<<<
 *     def q_adjustment_factor(self, value):
 *         self._q_adjustment_factor = value
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":362
 *         self._q_adjustment_factor = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def time_left(self):
 *         return self._time_left
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_9time_left_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_9time_left_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_9time_left___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_9time_left___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":364
 *     @property
 *     def time_left(self):
 *         return self._time_left             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_time_left);
  __pyx_r = __pyx_v_self->_time_left;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":362
 *         self._q_adjustment_factor = value
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def time_left(self):
 *         return self._time_left
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":366
 *         return self._time_left
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def closing_time(self):
 *         return self._closing_time
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12closing_time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12closing_time_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12closing_time___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12closing_time___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":368
 *     @property
 *     def closing_time(self):
 *         return self._closing_time             # <<<<<<<<<<<<<<
 * 
 *     def get_price(self) -> float:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_closing_time);
  __pyx_r = __pyx_v_self->_closing_time;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":366
 *         return self._time_left
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def closing_time(self):
 *         return self._closing_time
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":370
 *         return self._closing_time
 * 
 *     def get_price(self) -> float:             # <<<<<<<<<<<<<<
 *         return self.get_mid_price()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7get_price(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7get_price = {"get_price", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7get_price, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7get_price(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_price (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_price", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_price", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_6get_price(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_6get_price(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_price", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":371
 * 
 *     def get_price(self) -> float:
 *         return self.get_mid_price()             # <<<<<<<<<<<<<<
 * 
 *     def get_last_price(self) -> float:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 371, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 371, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":370
 *         return self._closing_time
 * 
 *     def get_price(self) -> float:             # <<<<<<<<<<<<<<
 *         return self.get_mid_price()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.get_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":373
 *         return self.get_mid_price()
 * 
 *     def get_last_price(self) -> float:             # <<<<<<<<<<<<<<
 *         return self._market_info.get_last_price()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_9get_last_price(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_9get_last_price = {"get_last_price", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_9get_last_price, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_9get_last_price(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_last_price (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_last_price", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_last_price", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_8get_last_price(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_8get_last_price(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_last_price", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":374
 * 
 *     def get_last_price(self) -> float:
 *         return self._market_info.get_last_price()             # <<<<<<<<<<<<<<
 * 
 *     def get_mid_price(self) -> float:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_get_last_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 374, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":373
 *         return self.get_mid_price()
 * 
 *     def get_last_price(self) -> float:             # <<<<<<<<<<<<<<
 *         return self._market_info.get_last_price()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.get_last_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":376
 *         return self._market_info.get_last_price()
 * 
 *     def get_mid_price(self) -> float:             # <<<<<<<<<<<<<<
 *         return self.c_get_mid_price()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11get_mid_price(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11get_mid_price = {"get_mid_price", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11get_mid_price, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11get_mid_price(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_mid_price (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_mid_price", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_mid_price", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10get_mid_price(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10get_mid_price(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_mid_price", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":377
 * 
 *     def get_mid_price(self) -> float:
 *         return self.c_get_mid_price()             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_get_mid_price(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_mid_price(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":376
 *         return self._market_info.get_last_price()
 * 
 *     def get_mid_price(self) -> float:             # <<<<<<<<<<<<<<
 *         return self.c_get_mid_price()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.get_mid_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":379
 *         return self.c_get_mid_price()
 * 
 *     cdef object c_get_mid_price(self):             # <<<<<<<<<<<<<<
 *         return self._market_info.get_mid_price()
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_get_mid_price(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_mid_price", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":380
 * 
 *     cdef object c_get_mid_price(self):
 *         return self._market_info.get_mid_price()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 380, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 380, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":379
 *         return self.c_get_mid_price()
 * 
 *     cdef object c_get_mid_price(self):             # <<<<<<<<<<<<<<
 *         return self._market_info.get_mid_price()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_get_mid_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":382
 *         return self._market_info.get_mid_price()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def market_info_to_active_orders(self) -> Dict[MarketTradingPairTuple, List[LimitOrder]]:
 *         return self._sb_order_tracker.market_pair_to_active_orders
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_28market_info_to_active_orders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_28market_info_to_active_orders_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_28market_info_to_active_orders___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_28market_info_to_active_orders___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":384
 *     @property
 *     def market_info_to_active_orders(self) -> Dict[MarketTradingPairTuple, List[LimitOrder]]:
 *         return self._sb_order_tracker.market_pair_to_active_orders             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base._sb_order_tracker), __pyx_n_s_market_pair_to_active_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 384, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":382
 *         return self._market_info.get_mid_price()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def market_info_to_active_orders(self) -> Dict[MarketTradingPairTuple, List[LimitOrder]]:
 *         return self._sb_order_tracker.market_pair_to_active_orders
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.market_info_to_active_orders.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":386
 *         return self._sb_order_tracker.market_pair_to_active_orders
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def active_orders(self) -> List[LimitOrder]:
 *         if self._market_info not in self.market_info_to_active_orders:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13active_orders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13active_orders_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13active_orders___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13active_orders___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":388
 *     @property
 *     def active_orders(self) -> List[LimitOrder]:
 *         if self._market_info not in self.market_info_to_active_orders:             # <<<<<<<<<<<<<<
 *             return []
 *         return self.market_info_to_active_orders[self._market_info]
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_info_to_active_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_v_self->_market_info, __pyx_t_1, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":389
 *     def active_orders(self) -> List[LimitOrder]:
 *         if self._market_info not in self.market_info_to_active_orders:
 *             return []             # <<<<<<<<<<<<<<
 *         return self.market_info_to_active_orders[self._market_info]
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 389, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":388
 *     @property
 *     def active_orders(self) -> List[LimitOrder]:
 *         if self._market_info not in self.market_info_to_active_orders:             # <<<<<<<<<<<<<<
 *             return []
 *         return self.market_info_to_active_orders[self._market_info]
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":390
 *         if self._market_info not in self.market_info_to_active_orders:
 *             return []
 *         return self.market_info_to_active_orders[self._market_info]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_info_to_active_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_v_self->_market_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 390, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":386
 *         return self._sb_order_tracker.market_pair_to_active_orders
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def active_orders(self) -> List[LimitOrder]:
 *         if self._market_info not in self.market_info_to_active_orders:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.active_orders.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":392
 *         return self.market_info_to_active_orders[self._market_info]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def active_non_hanging_orders(self) -> List[LimitOrder]:
 *         orders = [o for o in self.active_orders if not self._hanging_orders_tracker.is_order_id_in_hanging_orders(o.client_order_id)]
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25active_non_hanging_orders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25active_non_hanging_orders_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25active_non_hanging_orders___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25active_non_hanging_orders___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_v_orders = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_o = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":394
 *     @property
 *     def active_non_hanging_orders(self) -> List[LimitOrder]:
 *         orders = [o for o in self.active_orders if not self._hanging_orders_tracker.is_order_id_in_hanging_orders(o.client_order_id)]             # <<<<<<<<<<<<<<
 *         return orders
 * 
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 394, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_active_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 394, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 394, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 394, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 394, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 394, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 394, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 394, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 394, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_o, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_hanging_orders_tracker, __pyx_n_s_is_order_id_in_hanging_orders); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 394, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr1__pyx_v_o, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 394, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = NULL;
      __pyx_t_9 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_9 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_7};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 394, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 394, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_11 = ((!__pyx_t_10) != 0);
      if (__pyx_t_11) {
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_8genexpr1__pyx_v_o))) __PYX_ERR(0, 394, __pyx_L5_error)
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_o); __pyx_8genexpr1__pyx_v_o = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_o); __pyx_8genexpr1__pyx_v_o = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __pyx_v_orders = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":395
 *     def active_non_hanging_orders(self) -> List[LimitOrder]:
 *         orders = [o for o in self.active_orders if not self._hanging_orders_tracker.is_order_id_in_hanging_orders(o.client_order_id)]
 *         return orders             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_orders);
  __pyx_r = __pyx_v_orders;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":392
 *         return self.market_info_to_active_orders[self._market_info]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def active_non_hanging_orders(self) -> List[LimitOrder]:
 *         orders = [o for o in self.active_orders if not self._hanging_orders_tracker.is_order_id_in_hanging_orders(o.client_order_id)]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.active_non_hanging_orders.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_orders);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":397
 *         return orders
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def active_buys(self) -> List[LimitOrder]:
 *         return [o for o in self.active_orders if o.is_buy]
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11active_buys_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11active_buys_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11active_buys___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11active_buys___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_8genexpr2__pyx_v_o = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":399
 *     @property
 *     def active_buys(self) -> List[LimitOrder]:
 *         return [o for o in self.active_orders if o.is_buy]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 399, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_active_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 399, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 399, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 399, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 399, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 399, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 399, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 399, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 399, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_o, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr2__pyx_v_o, __pyx_n_s_is_buy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 399, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 399, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_6) {
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_8genexpr2__pyx_v_o))) __PYX_ERR(0, 399, __pyx_L5_error)
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_o); __pyx_8genexpr2__pyx_v_o = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_o); __pyx_8genexpr2__pyx_v_o = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":397
 *         return orders
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def active_buys(self) -> List[LimitOrder]:
 *         return [o for o in self.active_orders if o.is_buy]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.active_buys.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":401
 *         return [o for o in self.active_orders if o.is_buy]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def active_sells(self) -> List[LimitOrder]:
 *         return [o for o in self.active_orders if not o.is_buy]
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12active_sells_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12active_sells_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12active_sells___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12active_sells___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_8genexpr3__pyx_v_o = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":403
 *     @property
 *     def active_sells(self) -> List[LimitOrder]:
 *         return [o for o in self.active_orders if not o.is_buy]             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 403, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_active_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 403, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 403, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 403, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 403, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 403, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_o, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr3__pyx_v_o, __pyx_n_s_is_buy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 403, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_7 = ((!__pyx_t_6) != 0);
      if (__pyx_t_7) {
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_8genexpr3__pyx_v_o))) __PYX_ERR(0, 403, __pyx_L5_error)
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_o); __pyx_8genexpr3__pyx_v_o = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_o); __pyx_8genexpr3__pyx_v_o = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":401
 *         return [o for o in self.active_orders if o.is_buy]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def active_sells(self) -> List[LimitOrder]:
 *         return [o for o in self.active_orders if not o.is_buy]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.active_sells.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":405
 *         return [o for o in self.active_orders if not o.is_buy]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def logging_options(self) -> int:
 *         return self._logging_options
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_15logging_options_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_15logging_options_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_15logging_options___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_15logging_options___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":407
 *     @property
 *     def logging_options(self) -> int:
 *         return self._logging_options             # <<<<<<<<<<<<<<
 * 
 *     @logging_options.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 407, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":405
 *         return [o for o in self.active_orders if not o.is_buy]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def logging_options(self) -> int:
 *         return self._logging_options
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.logging_options.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":409
 *         return self._logging_options
 * 
 *     @logging_options.setter             # <<<<<<<<<<<<<<
 *     def logging_options(self, int64_t logging_options):
 *         self._logging_options = logging_options
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_15logging_options_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_logging_options); /*proto*/
static int __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_15logging_options_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_logging_options) {
  int64_t __pyx_v_logging_options;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_logging_options); {
    __pyx_v_logging_options = __Pyx_PyInt_As_int64_t(__pyx_arg_logging_options); if (unlikely((__pyx_v_logging_options == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 410, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.logging_options.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_15logging_options_2__set__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), ((int64_t)__pyx_v_logging_options));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_15logging_options_2__set__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, int64_t __pyx_v_logging_options) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":411
 *     @logging_options.setter
 *     def logging_options(self, int64_t logging_options):
 *         self._logging_options = logging_options             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->_logging_options = __pyx_v_logging_options;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":409
 *         return self._logging_options
 * 
 *     @logging_options.setter             # <<<<<<<<<<<<<<
 *     def logging_options(self, int64_t logging_options):
 *         self._logging_options = logging_options
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":413
 *         self._logging_options = logging_options
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def hanging_orders_tracker(self):
 *         return self._hanging_orders_tracker
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_22hanging_orders_tracker_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_22hanging_orders_tracker_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_22hanging_orders_tracker___get__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_22hanging_orders_tracker___get__(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":415
 *     @property
 *     def hanging_orders_tracker(self):
 *         return self._hanging_orders_tracker             # <<<<<<<<<<<<<<
 * 
 *     def pure_mm_assets_df(self, to_show_current_pct: bool) -> pd.DataFrame:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_hanging_orders_tracker);
  __pyx_r = __pyx_v_self->_hanging_orders_tracker;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":413
 *         self._logging_options = logging_options
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def hanging_orders_tracker(self):
 *         return self._hanging_orders_tracker
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":417
 *         return self._hanging_orders_tracker
 * 
 *     def pure_mm_assets_df(self, to_show_current_pct: bool) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         market, trading_pair, base_asset, quote_asset = self._market_info
 *         price = self._market_info.get_mid_price()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13pure_mm_assets_df(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13pure_mm_assets_df = {"pure_mm_assets_df", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13pure_mm_assets_df, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13pure_mm_assets_df(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_to_show_current_pct = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pure_mm_assets_df (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_to_show_current_pct,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_to_show_current_pct,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_to_show_current_pct)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 417, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "pure_mm_assets_df") < 0)) __PYX_ERR(0, 417, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_to_show_current_pct = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pure_mm_assets_df", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 417, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.pure_mm_assets_df", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12pure_mm_assets_df(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_to_show_current_pct);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12pure_mm_assets_df(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_to_show_current_pct) {
  PyObject *__pyx_v_market = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_trading_pair = NULL;
  PyObject *__pyx_v_base_asset = NULL;
  PyObject *__pyx_v_quote_asset = NULL;
  PyObject *__pyx_v_price = NULL;
  double __pyx_v_base_balance;
  double __pyx_v_quote_balance;
  double __pyx_v_available_base_balance;
  double __pyx_v_available_quote_balance;
  double __pyx_v_base_value;
  double __pyx_v_total_in_quote;
  double __pyx_v_base_ratio;
  double __pyx_v_quote_ratio;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_v_df = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  double __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_UCS4 __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pure_mm_assets_df", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":418
 * 
 *     def pure_mm_assets_df(self, to_show_current_pct: bool) -> pd.DataFrame:
 *         market, trading_pair, base_asset, quote_asset = self._market_info             # <<<<<<<<<<<<<<
 *         price = self._market_info.get_mid_price()
 *         base_balance = float(market.get_balance(base_asset))
 */
  __pyx_t_1 = __pyx_v_self->_market_info;
  __Pyx_INCREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 418, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 418, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5};
    __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 418, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_7(__pyx_t_6); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 4) < 0) __PYX_ERR(0, 418, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 418, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_market = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_trading_pair = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_base_asset = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_quote_asset = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":419
 *     def pure_mm_assets_df(self, to_show_current_pct: bool) -> pd.DataFrame:
 *         market, trading_pair, base_asset, quote_asset = self._market_info
 *         price = self._market_info.get_mid_price()             # <<<<<<<<<<<<<<
 *         base_balance = float(market.get_balance(base_asset))
 *         quote_balance = float(market.get_balance(quote_asset))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_get_mid_price); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 419, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_4, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 419, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_v_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":420
 *         market, trading_pair, base_asset, quote_asset = self._market_info
 *         price = self._market_info.get_mid_price()
 *         base_balance = float(market.get_balance(base_asset))             # <<<<<<<<<<<<<<
 *         quote_balance = float(market.get_balance(quote_asset))
 *         available_base_balance = float(market.get_available_balance(base_asset))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market, __pyx_n_s_get_balance); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_base_asset};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_9 = __Pyx_PyObject_AsDouble(__pyx_t_1); if (unlikely(__pyx_t_9 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 420, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_base_balance = __pyx_t_9;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":421
 *         price = self._market_info.get_mid_price()
 *         base_balance = float(market.get_balance(base_asset))
 *         quote_balance = float(market.get_balance(quote_asset))             # <<<<<<<<<<<<<<
 *         available_base_balance = float(market.get_available_balance(base_asset))
 *         available_quote_balance = float(market.get_available_balance(quote_asset))
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market, __pyx_n_s_get_balance); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_quote_asset};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 421, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_9 = __Pyx_PyObject_AsDouble(__pyx_t_1); if (unlikely(__pyx_t_9 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 421, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_quote_balance = __pyx_t_9;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":422
 *         base_balance = float(market.get_balance(base_asset))
 *         quote_balance = float(market.get_balance(quote_asset))
 *         available_base_balance = float(market.get_available_balance(base_asset))             # <<<<<<<<<<<<<<
 *         available_quote_balance = float(market.get_available_balance(quote_asset))
 *         base_value = base_balance * float(price)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market, __pyx_n_s_get_available_balance); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_base_asset};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 422, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_9 = __Pyx_PyObject_AsDouble(__pyx_t_1); if (unlikely(__pyx_t_9 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 422, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_available_base_balance = __pyx_t_9;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":423
 *         quote_balance = float(market.get_balance(quote_asset))
 *         available_base_balance = float(market.get_available_balance(base_asset))
 *         available_quote_balance = float(market.get_available_balance(quote_asset))             # <<<<<<<<<<<<<<
 *         base_value = base_balance * float(price)
 *         total_in_quote = base_value + quote_balance
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market, __pyx_n_s_get_available_balance); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_quote_asset};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_9 = __Pyx_PyObject_AsDouble(__pyx_t_1); if (unlikely(__pyx_t_9 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_available_quote_balance = __pyx_t_9;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":424
 *         available_base_balance = float(market.get_available_balance(base_asset))
 *         available_quote_balance = float(market.get_available_balance(quote_asset))
 *         base_value = base_balance * float(price)             # <<<<<<<<<<<<<<
 *         total_in_quote = base_value + quote_balance
 *         base_ratio = base_value / total_in_quote if total_in_quote > 0 else 0
 */
  __pyx_t_9 = __Pyx_PyObject_AsDouble(__pyx_v_price); if (unlikely(__pyx_t_9 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 424, __pyx_L1_error)
  __pyx_v_base_value = (__pyx_v_base_balance * __pyx_t_9);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":425
 *         available_quote_balance = float(market.get_available_balance(quote_asset))
 *         base_value = base_balance * float(price)
 *         total_in_quote = base_value + quote_balance             # <<<<<<<<<<<<<<
 *         base_ratio = base_value / total_in_quote if total_in_quote > 0 else 0
 *         quote_ratio = quote_balance / total_in_quote if total_in_quote > 0 else 0
 */
  __pyx_v_total_in_quote = (__pyx_v_base_value + __pyx_v_quote_balance);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":426
 *         base_value = base_balance * float(price)
 *         total_in_quote = base_value + quote_balance
 *         base_ratio = base_value / total_in_quote if total_in_quote > 0 else 0             # <<<<<<<<<<<<<<
 *         quote_ratio = quote_balance / total_in_quote if total_in_quote > 0 else 0
 *         data = [
 */
  if (((__pyx_v_total_in_quote > 0.0) != 0)) {
    if (unlikely(__pyx_v_total_in_quote == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 426, __pyx_L1_error)
    }
    __pyx_t_9 = (__pyx_v_base_value / __pyx_v_total_in_quote);
  } else {
    __pyx_t_9 = 0.0;
  }
  __pyx_v_base_ratio = __pyx_t_9;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":427
 *         total_in_quote = base_value + quote_balance
 *         base_ratio = base_value / total_in_quote if total_in_quote > 0 else 0
 *         quote_ratio = quote_balance / total_in_quote if total_in_quote > 0 else 0             # <<<<<<<<<<<<<<
 *         data = [
 *             ["", base_asset, quote_asset],
 */
  if (((__pyx_v_total_in_quote > 0.0) != 0)) {
    if (unlikely(__pyx_v_total_in_quote == 0)) {
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      __PYX_ERR(0, 427, __pyx_L1_error)
    }
    __pyx_t_9 = (__pyx_v_quote_balance / __pyx_v_total_in_quote);
  } else {
    __pyx_t_9 = 0.0;
  }
  __pyx_v_quote_ratio = __pyx_t_9;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":429
 *         quote_ratio = quote_balance / total_in_quote if total_in_quote > 0 else 0
 *         data = [
 *             ["", base_asset, quote_asset],             # <<<<<<<<<<<<<<
 *             ["Total Balance", round(base_balance, 4), round(quote_balance, 4)],
 *             ["Available Balance", round(available_base_balance, 4), round(available_quote_balance, 4)],
 */
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 429, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_kp_u__15);
  __Pyx_GIVEREF(__pyx_kp_u__15);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u__15);
  __Pyx_INCREF(__pyx_v_base_asset);
  __Pyx_GIVEREF(__pyx_v_base_asset);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_v_base_asset);
  __Pyx_INCREF(__pyx_v_quote_asset);
  __Pyx_GIVEREF(__pyx_v_quote_asset);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_v_quote_asset);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":430
 *         data = [
 *             ["", base_asset, quote_asset],
 *             ["Total Balance", round(base_balance, 4), round(quote_balance, 4)],             # <<<<<<<<<<<<<<
 *             ["Available Balance", round(available_base_balance, 4), round(available_quote_balance, 4)],
 *             [f"Current Value ({quote_asset})", round(base_value, 4), round(quote_balance, 4)]
 */
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_base_balance); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_5);
  __Pyx_INCREF(__pyx_int_4);
  __Pyx_GIVEREF(__pyx_int_4);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_int_4);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_quote_balance); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __Pyx_INCREF(__pyx_int_4);
  __Pyx_GIVEREF(__pyx_int_4);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_int_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 430, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_kp_u_Total_Balance);
  __Pyx_GIVEREF(__pyx_kp_u_Total_Balance);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Total_Balance);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_3, 2, __pyx_t_4);
  __pyx_t_5 = 0;
  __pyx_t_4 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":431
 *             ["", base_asset, quote_asset],
 *             ["Total Balance", round(base_balance, 4), round(quote_balance, 4)],
 *             ["Available Balance", round(available_base_balance, 4), round(available_quote_balance, 4)],             # <<<<<<<<<<<<<<
 *             [f"Current Value ({quote_asset})", round(base_value, 4), round(quote_balance, 4)]
 *         ]
 */
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_available_base_balance); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_INCREF(__pyx_int_4);
  __Pyx_GIVEREF(__pyx_int_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_int_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_available_quote_balance); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_5);
  __Pyx_INCREF(__pyx_int_4);
  __Pyx_GIVEREF(__pyx_int_4);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_int_4);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_2, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 431, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_u_Available_Balance);
  __Pyx_GIVEREF(__pyx_kp_u_Available_Balance);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Available_Balance);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_t_5);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":432
 *             ["Total Balance", round(base_balance, 4), round(quote_balance, 4)],
 *             ["Available Balance", round(available_base_balance, 4), round(available_quote_balance, 4)],
 *             [f"Current Value ({quote_asset})", round(base_value, 4), round(quote_balance, 4)]             # <<<<<<<<<<<<<<
 *         ]
 *         if to_show_current_pct:
 */
  __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_10 = 0;
  __pyx_t_11 = 127;
  __Pyx_INCREF(__pyx_kp_u_Current_Value);
  __pyx_t_10 += 15;
  __Pyx_GIVEREF(__pyx_kp_u_Current_Value);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u_Current_Value);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_quote_asset, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_11 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_11) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_11;
  __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_4 = 0;
  __Pyx_INCREF(__pyx_kp_u__16);
  __pyx_t_10 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__16);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u__16);
  __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_5, 3, __pyx_t_10, __pyx_t_11); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble(__pyx_v_base_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
  __Pyx_INCREF(__pyx_int_4);
  __Pyx_GIVEREF(__pyx_int_4);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_int_4);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyFloat_FromDouble(__pyx_v_quote_balance); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_12 = PyTuple_New(2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_int_4);
  __Pyx_GIVEREF(__pyx_int_4);
  PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_int_4);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_12, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_12 = PyList_New(3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 432, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_12, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyList_SET_ITEM(__pyx_t_12, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyList_SET_ITEM(__pyx_t_12, 2, __pyx_t_6);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":428
 *         base_ratio = base_value / total_in_quote if total_in_quote > 0 else 0
 *         quote_ratio = quote_balance / total_in_quote if total_in_quote > 0 else 0
 *         data = [             # <<<<<<<<<<<<<<
 *             ["", base_asset, quote_asset],
 *             ["Total Balance", round(base_balance, 4), round(quote_balance, 4)],
 */
  __pyx_t_6 = PyList_New(4); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 428, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_1);
  PyList_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_12);
  PyList_SET_ITEM(__pyx_t_6, 3, __pyx_t_12);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_2 = 0;
  __pyx_t_12 = 0;
  __pyx_v_data = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":434
 *             [f"Current Value ({quote_asset})", round(base_value, 4), round(quote_balance, 4)]
 *         ]
 *         if to_show_current_pct:             # <<<<<<<<<<<<<<
 *             data.append(["Current %", f"{base_ratio:.1%}", f"{quote_ratio:.1%}"])
 *         df = pd.DataFrame(data=data)
 */
  __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_v_to_show_current_pct); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 434, __pyx_L1_error)
  if (__pyx_t_13) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":435
 *         ]
 *         if to_show_current_pct:
 *             data.append(["Current %", f"{base_ratio:.1%}", f"{quote_ratio:.1%}"])             # <<<<<<<<<<<<<<
 *         df = pd.DataFrame(data=data)
 *         return df
 */
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_base_ratio); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_12 = __Pyx_PyObject_Format(__pyx_t_6, __pyx_kp_u_1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyFloat_FromDouble(__pyx_v_quote_ratio); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_PyObject_Format(__pyx_t_6, __pyx_kp_u_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyList_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_kp_u_Current);
    __Pyx_GIVEREF(__pyx_kp_u_Current);
    PyList_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_Current);
    __Pyx_GIVEREF(__pyx_t_12);
    PyList_SET_ITEM(__pyx_t_6, 1, __pyx_t_12);
    __Pyx_GIVEREF(__pyx_t_2);
    PyList_SET_ITEM(__pyx_t_6, 2, __pyx_t_2);
    __pyx_t_12 = 0;
    __pyx_t_2 = 0;
    __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_data, __pyx_t_6); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 435, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":434
 *             [f"Current Value ({quote_asset})", round(base_value, 4), round(quote_balance, 4)]
 *         ]
 *         if to_show_current_pct:             # <<<<<<<<<<<<<<
 *             data.append(["Current %", f"{base_ratio:.1%}", f"{quote_ratio:.1%}"])
 *         df = pd.DataFrame(data=data)
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":436
 *         if to_show_current_pct:
 *             data.append(["Current %", f"{base_ratio:.1%}", f"{quote_ratio:.1%}"])
 *         df = pd.DataFrame(data=data)             # <<<<<<<<<<<<<<
 *         return df
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_pd); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_data, __pyx_v_data) < 0) __PYX_ERR(0, 436, __pyx_L1_error)
  __pyx_t_12 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_6); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_v_df = __pyx_t_12;
  __pyx_t_12 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":437
 *             data.append(["Current %", f"{base_ratio:.1%}", f"{quote_ratio:.1%}"])
 *         df = pd.DataFrame(data=data)
 *         return df             # <<<<<<<<<<<<<<
 * 
 *     def active_orders_df(self) -> pd.DataFrame:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_df);
  __pyx_r = __pyx_v_df;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":417
 *         return self._hanging_orders_tracker
 * 
 *     def pure_mm_assets_df(self, to_show_current_pct: bool) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         market, trading_pair, base_asset, quote_asset = self._market_info
 *         price = self._market_info.get_mid_price()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.pure_mm_assets_df", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_trading_pair);
  __Pyx_XDECREF(__pyx_v_base_asset);
  __Pyx_XDECREF(__pyx_v_quote_asset);
  __Pyx_XDECREF(__pyx_v_price);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_df);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":439
 *         return df
 * 
 *     def active_orders_df(self) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         market, trading_pair, base_asset, quote_asset = self._market_info
 *         price = self.get_price()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_15active_orders_df(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_15active_orders_df = {"active_orders_df", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_15active_orders_df, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_15active_orders_df(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("active_orders_df (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("active_orders_df", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "active_orders_df", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14active_orders_df(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":445
 *         no_sells = len([o for o in active_orders if not o.is_buy and o.client_order_id and
 *                         not self._hanging_orders_tracker.is_order_id_in_hanging_orders(o.client_order_id)])
 *         active_orders.sort(key=lambda x: x.price, reverse=True)             # <<<<<<<<<<<<<<
 *         columns = ["Level", "Type", "Price", "Spread", "Amount (Orig)", "Amount (Adj)", "Age"]
 *         data = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_16active_orders_df_lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_16active_orders_df_lambda = {"lambda", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_16active_orders_df_lambda, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_16active_orders_df_lambda(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_x = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_x)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 445, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lambda") < 0)) __PYX_ERR(0, 445, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_x = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 445, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.active_orders_df.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, __pyx_v_x);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.active_orders_df.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":439
 *         return df
 * 
 *     def active_orders_df(self) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         market, trading_pair, base_asset, quote_asset = self._market_info
 *         price = self.get_price()
 */

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14active_orders_df(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  CYTHON_UNUSED PyObject *__pyx_v_market = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_trading_pair = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_base_asset = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_quote_asset = NULL;
  PyObject *__pyx_v_price = NULL;
  PyObject *__pyx_v_active_orders = NULL;
  PyObject *__pyx_v_no_sells = NULL;
  PyObject *__pyx_v_columns = NULL;
  PyObject *__pyx_v_data = NULL;
  PyObject *__pyx_v_lvl_buy = NULL;
  PyObject *__pyx_v_lvl_sell = NULL;
  Py_ssize_t __pyx_v_idx;
  PyObject *__pyx_v_order = NULL;
  PyObject *__pyx_v_is_hanging_order = NULL;
  PyObject *__pyx_v_level = NULL;
  PyObject *__pyx_v_spread = NULL;
  PyObject *__pyx_v_age = NULL;
  PyObject *__pyx_v_amount_orig = NULL;
  PyObject *__pyx_8genexpr4__pyx_v_o = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  Py_ssize_t __pyx_t_14;
  Py_ssize_t __pyx_t_15;
  int __pyx_t_16;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("active_orders_df", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":440
 * 
 *     def active_orders_df(self) -> pd.DataFrame:
 *         market, trading_pair, base_asset, quote_asset = self._market_info             # <<<<<<<<<<<<<<
 *         price = self.get_price()
 *         active_orders = self.active_orders
 */
  __pyx_t_1 = __pyx_v_self->_market_info;
  __Pyx_INCREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 440, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 440, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5};
    __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_7(__pyx_t_6); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 4) < 0) __PYX_ERR(0, 440, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 440, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_market = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_trading_pair = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_base_asset = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_quote_asset = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":441
 *     def active_orders_df(self) -> pd.DataFrame:
 *         market, trading_pair, base_asset, quote_asset = self._market_info
 *         price = self.get_price()             # <<<<<<<<<<<<<<
 *         active_orders = self.active_orders
 *         no_sells = len([o for o in active_orders if not o.is_buy and o.client_order_id and
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_price); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  __pyx_t_8 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_8 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_4, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_v_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":442
 *         market, trading_pair, base_asset, quote_asset = self._market_info
 *         price = self.get_price()
 *         active_orders = self.active_orders             # <<<<<<<<<<<<<<
 *         no_sells = len([o for o in active_orders if not o.is_buy and o.client_order_id and
 *                         not self._hanging_orders_tracker.is_order_id_in_hanging_orders(o.client_order_id)])
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_active_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_active_orders = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":443
 *         price = self.get_price()
 *         active_orders = self.active_orders
 *         no_sells = len([o for o in active_orders if not o.is_buy and o.client_order_id and             # <<<<<<<<<<<<<<
 *                         not self._hanging_orders_tracker.is_order_id_in_hanging_orders(o.client_order_id)])
 *         active_orders.sort(key=lambda x: x.price, reverse=True)
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L7_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (likely(PyList_CheckExact(__pyx_v_active_orders)) || PyTuple_CheckExact(__pyx_v_active_orders)) {
      __pyx_t_5 = __pyx_v_active_orders; __Pyx_INCREF(__pyx_t_5); __pyx_t_9 = 0;
      __pyx_t_10 = NULL;
    } else {
      __pyx_t_9 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_v_active_orders); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 443, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 443, __pyx_L7_error)
    }
    for (;;) {
      if (likely(!__pyx_t_10)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely((0 < 0))) __PYX_ERR(0, 443, __pyx_L7_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 443, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_9); __Pyx_INCREF(__pyx_t_4); __pyx_t_9++; if (unlikely((0 < 0))) __PYX_ERR(0, 443, __pyx_L7_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 443, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_10(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 443, __pyx_L7_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_o, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr4__pyx_v_o, __pyx_n_s_is_buy); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 443, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 443, __pyx_L7_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = ((!__pyx_t_12) != 0);
      if (__pyx_t_13) {
      } else {
        __pyx_t_11 = __pyx_t_13;
        goto __pyx_L11_bool_binop_done;
      }
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr4__pyx_v_o, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 443, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 443, __pyx_L7_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_13) {
      } else {
        __pyx_t_11 = __pyx_t_13;
        goto __pyx_L11_bool_binop_done;
      }

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":444
 *         active_orders = self.active_orders
 *         no_sells = len([o for o in active_orders if not o.is_buy and o.client_order_id and
 *                         not self._hanging_orders_tracker.is_order_id_in_hanging_orders(o.client_order_id)])             # <<<<<<<<<<<<<<
 *         active_orders.sort(key=lambda x: x.price, reverse=True)
 *         columns = ["Level", "Type", "Price", "Spread", "Amount (Orig)", "Amount (Adj)", "Age"]
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_hanging_orders_tracker, __pyx_n_s_is_order_id_in_hanging_orders); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 444, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr4__pyx_v_o, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 444, __pyx_L7_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_8 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_2};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 444, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 444, __pyx_L7_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_12 = ((!__pyx_t_13) != 0);
      __pyx_t_11 = __pyx_t_12;
      __pyx_L11_bool_binop_done:;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":443
 *         price = self.get_price()
 *         active_orders = self.active_orders
 *         no_sells = len([o for o in active_orders if not o.is_buy and o.client_order_id and             # <<<<<<<<<<<<<<
 *                         not self._hanging_orders_tracker.is_order_id_in_hanging_orders(o.client_order_id)])
 *         active_orders.sort(key=lambda x: x.price, reverse=True)
 */
      if (__pyx_t_11) {
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_8genexpr4__pyx_v_o))) __PYX_ERR(0, 443, __pyx_L7_error)
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_o); __pyx_8genexpr4__pyx_v_o = 0;
    goto __pyx_L14_exit_scope;
    __pyx_L7_error:;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_o); __pyx_8genexpr4__pyx_v_o = 0;
    goto __pyx_L1_error;
    __pyx_L14_exit_scope:;
  } /* exit inner scope */
  __pyx_t_9 = PyList_GET_SIZE(__pyx_t_1); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_no_sells = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":445
 *         no_sells = len([o for o in active_orders if not o.is_buy and o.client_order_id and
 *                         not self._hanging_orders_tracker.is_order_id_in_hanging_orders(o.client_order_id)])
 *         active_orders.sort(key=lambda x: x.price, reverse=True)             # <<<<<<<<<<<<<<
 *         columns = ["Level", "Type", "Price", "Spread", "Amount (Orig)", "Amount (Adj)", "Age"]
 *         data = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_active_orders, __pyx_n_s_sort); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_16active_orders_df_lambda, 0, __pyx_n_s_active_orders_df_locals_lambda, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_key, __pyx_t_4) < 0) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_reverse, Py_True) < 0) __PYX_ERR(0, 445, __pyx_L1_error)
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 445, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":446
 *                         not self._hanging_orders_tracker.is_order_id_in_hanging_orders(o.client_order_id)])
 *         active_orders.sort(key=lambda x: x.price, reverse=True)
 *         columns = ["Level", "Type", "Price", "Spread", "Amount (Orig)", "Amount (Adj)", "Age"]             # <<<<<<<<<<<<<<
 *         data = []
 *         lvl_buy, lvl_sell = 0, 0
 */
  __pyx_t_4 = PyList_New(7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 446, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_n_u_Level);
  __Pyx_GIVEREF(__pyx_n_u_Level);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_n_u_Level);
  __Pyx_INCREF(__pyx_n_u_Type);
  __Pyx_GIVEREF(__pyx_n_u_Type);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_n_u_Type);
  __Pyx_INCREF(__pyx_n_u_Price);
  __Pyx_GIVEREF(__pyx_n_u_Price);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_n_u_Price);
  __Pyx_INCREF(__pyx_n_u_Spread);
  __Pyx_GIVEREF(__pyx_n_u_Spread);
  PyList_SET_ITEM(__pyx_t_4, 3, __pyx_n_u_Spread);
  __Pyx_INCREF(__pyx_kp_u_Amount_Orig);
  __Pyx_GIVEREF(__pyx_kp_u_Amount_Orig);
  PyList_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_Amount_Orig);
  __Pyx_INCREF(__pyx_kp_u_Amount_Adj);
  __Pyx_GIVEREF(__pyx_kp_u_Amount_Adj);
  PyList_SET_ITEM(__pyx_t_4, 5, __pyx_kp_u_Amount_Adj);
  __Pyx_INCREF(__pyx_n_u_Age);
  __Pyx_GIVEREF(__pyx_n_u_Age);
  PyList_SET_ITEM(__pyx_t_4, 6, __pyx_n_u_Age);
  __pyx_v_columns = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":447
 *         active_orders.sort(key=lambda x: x.price, reverse=True)
 *         columns = ["Level", "Type", "Price", "Spread", "Amount (Orig)", "Amount (Adj)", "Age"]
 *         data = []             # <<<<<<<<<<<<<<
 *         lvl_buy, lvl_sell = 0, 0
 *         for idx in range(0, len(active_orders)):
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 447, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_data = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":448
 *         columns = ["Level", "Type", "Price", "Spread", "Amount (Orig)", "Amount (Adj)", "Age"]
 *         data = []
 *         lvl_buy, lvl_sell = 0, 0             # <<<<<<<<<<<<<<
 *         for idx in range(0, len(active_orders)):
 *             order = active_orders[idx]
 */
  __pyx_t_4 = __pyx_int_0;
  __Pyx_INCREF(__pyx_t_4);
  __pyx_t_5 = __pyx_int_0;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_v_lvl_buy = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_lvl_sell = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":449
 *         data = []
 *         lvl_buy, lvl_sell = 0, 0
 *         for idx in range(0, len(active_orders)):             # <<<<<<<<<<<<<<
 *             order = active_orders[idx]
 *             is_hanging_order = self._hanging_orders_tracker.is_order_id_in_hanging_orders(order.client_order_id)
 */
  __pyx_t_9 = PyObject_Length(__pyx_v_active_orders); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 449, __pyx_L1_error)
  __pyx_t_14 = __pyx_t_9;
  for (__pyx_t_15 = 0; __pyx_t_15 < __pyx_t_14; __pyx_t_15+=1) {
    __pyx_v_idx = __pyx_t_15;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":450
 *         lvl_buy, lvl_sell = 0, 0
 *         for idx in range(0, len(active_orders)):
 *             order = active_orders[idx]             # <<<<<<<<<<<<<<
 *             is_hanging_order = self._hanging_orders_tracker.is_order_id_in_hanging_orders(order.client_order_id)
 *             if not is_hanging_order:
 */
    __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_active_orders, __pyx_v_idx, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 450, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_order, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":451
 *         for idx in range(0, len(active_orders)):
 *             order = active_orders[idx]
 *             is_hanging_order = self._hanging_orders_tracker.is_order_id_in_hanging_orders(order.client_order_id)             # <<<<<<<<<<<<<<
 *             if not is_hanging_order:
 *                 if order.is_buy:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_hanging_orders_tracker, __pyx_n_s_is_order_id_in_hanging_orders); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 451, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_1};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 451, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_is_hanging_order, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":452
 *             order = active_orders[idx]
 *             is_hanging_order = self._hanging_orders_tracker.is_order_id_in_hanging_orders(order.client_order_id)
 *             if not is_hanging_order:             # <<<<<<<<<<<<<<
 *                 if order.is_buy:
 *                     level = lvl_buy + 1
 */
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_is_hanging_order); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 452, __pyx_L1_error)
    __pyx_t_12 = ((!__pyx_t_11) != 0);
    if (__pyx_t_12) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":453
 *             is_hanging_order = self._hanging_orders_tracker.is_order_id_in_hanging_orders(order.client_order_id)
 *             if not is_hanging_order:
 *                 if order.is_buy:             # <<<<<<<<<<<<<<
 *                     level = lvl_buy + 1
 *                     lvl_buy += 1
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_is_buy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 453, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 453, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_12) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":454
 *             if not is_hanging_order:
 *                 if order.is_buy:
 *                     level = lvl_buy + 1             # <<<<<<<<<<<<<<
 *                     lvl_buy += 1
 *                 else:
 */
        __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_lvl_buy, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 454, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_XDECREF_SET(__pyx_v_level, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":455
 *                 if order.is_buy:
 *                     level = lvl_buy + 1
 *                     lvl_buy += 1             # <<<<<<<<<<<<<<
 *                 else:
 *                     level = no_sells - lvl_sell
 */
        __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_lvl_buy, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 455, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF_SET(__pyx_v_lvl_buy, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":453
 *             is_hanging_order = self._hanging_orders_tracker.is_order_id_in_hanging_orders(order.client_order_id)
 *             if not is_hanging_order:
 *                 if order.is_buy:             # <<<<<<<<<<<<<<
 *                     level = lvl_buy + 1
 *                     lvl_buy += 1
 */
        goto __pyx_L18;
      }

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":457
 *                     lvl_buy += 1
 *                 else:
 *                     level = no_sells - lvl_sell             # <<<<<<<<<<<<<<
 *                     lvl_sell += 1
 *             spread = 0 if price == 0 else abs(order.price - price) / price
 */
      /*else*/ {
        __pyx_t_5 = PyNumber_Subtract(__pyx_v_no_sells, __pyx_v_lvl_sell); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 457, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_XDECREF_SET(__pyx_v_level, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":458
 *                 else:
 *                     level = no_sells - lvl_sell
 *                     lvl_sell += 1             # <<<<<<<<<<<<<<
 *             spread = 0 if price == 0 else abs(order.price - price) / price
 *             age = "n/a"
 */
        __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_lvl_sell, __pyx_int_1, 1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 458, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF_SET(__pyx_v_lvl_sell, __pyx_t_5);
        __pyx_t_5 = 0;
      }
      __pyx_L18:;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":452
 *             order = active_orders[idx]
 *             is_hanging_order = self._hanging_orders_tracker.is_order_id_in_hanging_orders(order.client_order_id)
 *             if not is_hanging_order:             # <<<<<<<<<<<<<<
 *                 if order.is_buy:
 *                     level = lvl_buy + 1
 */
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":459
 *                     level = no_sells - lvl_sell
 *                     lvl_sell += 1
 *             spread = 0 if price == 0 else abs(order.price - price) / price             # <<<<<<<<<<<<<<
 *             age = "n/a"
 *             # // indicates order is a paper order so 'n/a'. For real orders, calculate age.
 */
    __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_v_price, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_12 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 459, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_12) {
      __Pyx_INCREF(__pyx_int_0);
      __pyx_t_5 = __pyx_int_0;
    } else {
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = PyNumber_Subtract(__pyx_t_4, __pyx_v_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyNumber_Absolute(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 459, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_v_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 459, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __pyx_t_1;
      __pyx_t_1 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_spread, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":460
 *                     lvl_sell += 1
 *             spread = 0 if price == 0 else abs(order.price - price) / price
 *             age = "n/a"             # <<<<<<<<<<<<<<
 *             # // indicates order is a paper order so 'n/a'. For real orders, calculate age.
 *             if "//" not in order.client_order_id:
 */
    __Pyx_INCREF(__pyx_kp_u_n_a);
    __Pyx_XDECREF_SET(__pyx_v_age, __pyx_kp_u_n_a);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":462
 *             age = "n/a"
 *             # // indicates order is a paper order so 'n/a'. For real orders, calculate age.
 *             if "//" not in order.client_order_id:             # <<<<<<<<<<<<<<
 *                 age = pd.Timestamp(int(time.time()) - int(order.client_order_id[-16:]) / 1e6,
 *                                    unit='s').strftime('%H:%M:%S')
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 462, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_kp_u__17, __pyx_t_5, Py_NE)); if (unlikely((__pyx_t_12 < 0))) __PYX_ERR(0, 462, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_11 = (__pyx_t_12 != 0);
    if (__pyx_t_11) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":463
 *             # // indicates order is a paper order so 'n/a'. For real orders, calculate age.
 *             if "//" not in order.client_order_id:
 *                 age = pd.Timestamp(int(time.time()) - int(order.client_order_id[-16:]) / 1e6,             # <<<<<<<<<<<<<<
 *                                    unit='s').strftime('%H:%M:%S')
 *             amount_orig = self._order_amount
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_pd); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Timestamp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 463, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_time); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_8 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_3, };
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_2 = __Pyx_PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetSlice(__pyx_t_1, -16L, 0, NULL, NULL, &__pyx_slice__18, 1, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyNumber_Int(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyFloat_TrueDivideObjC(__pyx_t_1, __pyx_float_1e6, 1e6, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Subtract(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 463, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 463, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":464
 *             if "//" not in order.client_order_id:
 *                 age = pd.Timestamp(int(time.time()) - int(order.client_order_id[-16:]) / 1e6,
 *                                    unit='s').strftime('%H:%M:%S')             # <<<<<<<<<<<<<<
 *             amount_orig = self._order_amount
 *             if is_hanging_order:
 */
      __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_unit, __pyx_n_u_s) < 0) __PYX_ERR(0, 464, __pyx_L1_error)

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":463
 *             # // indicates order is a paper order so 'n/a'. For real orders, calculate age.
 *             if "//" not in order.client_order_id:
 *                 age = pd.Timestamp(int(time.time()) - int(order.client_order_id[-16:]) / 1e6,             # <<<<<<<<<<<<<<
 *                                    unit='s').strftime('%H:%M:%S')
 *             amount_orig = self._order_amount
 */
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 463, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":464
 *             if "//" not in order.client_order_id:
 *                 age = pd.Timestamp(int(time.time()) - int(order.client_order_id[-16:]) / 1e6,
 *                                    unit='s').strftime('%H:%M:%S')             # <<<<<<<<<<<<<<
 *             amount_orig = self._order_amount
 *             if is_hanging_order:
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_strftime); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_8 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_u_H_M_S};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 464, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF_SET(__pyx_v_age, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":462
 *             age = "n/a"
 *             # // indicates order is a paper order so 'n/a'. For real orders, calculate age.
 *             if "//" not in order.client_order_id:             # <<<<<<<<<<<<<<
 *                 age = pd.Timestamp(int(time.time()) - int(order.client_order_id[-16:]) / 1e6,
 *                                    unit='s').strftime('%H:%M:%S')
 */
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":465
 *                 age = pd.Timestamp(int(time.time()) - int(order.client_order_id[-16:]) / 1e6,
 *                                    unit='s').strftime('%H:%M:%S')
 *             amount_orig = self._order_amount             # <<<<<<<<<<<<<<
 *             if is_hanging_order:
 *                 amount_orig = float(order.quantity)
 */
    __pyx_t_5 = __pyx_v_self->_order_amount;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_XDECREF_SET(__pyx_v_amount_orig, __pyx_t_5);
    __pyx_t_5 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":466
 *                                    unit='s').strftime('%H:%M:%S')
 *             amount_orig = self._order_amount
 *             if is_hanging_order:             # <<<<<<<<<<<<<<
 *                 amount_orig = float(order.quantity)
 *                 level = "hang"
 */
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_v_is_hanging_order); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 466, __pyx_L1_error)
    if (__pyx_t_11) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":467
 *             amount_orig = self._order_amount
 *             if is_hanging_order:
 *                 amount_orig = float(order.quantity)             # <<<<<<<<<<<<<<
 *                 level = "hang"
 *             data.append([
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_quantity); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 467, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 467, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_amount_orig, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":468
 *             if is_hanging_order:
 *                 amount_orig = float(order.quantity)
 *                 level = "hang"             # <<<<<<<<<<<<<<
 *             data.append([
 *                 level,
 */
      __Pyx_INCREF(__pyx_n_u_hang);
      __Pyx_XDECREF_SET(__pyx_v_level, __pyx_n_u_hang);

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":466
 *                                    unit='s').strftime('%H:%M:%S')
 *             amount_orig = self._order_amount
 *             if is_hanging_order:             # <<<<<<<<<<<<<<
 *                 amount_orig = float(order.quantity)
 *                 level = "hang"
 */
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":470
 *                 level = "hang"
 *             data.append([
 *                 level,             # <<<<<<<<<<<<<<
 *                 "buy" if order.is_buy else "sell",
 *                 float(order.price),
 */
    if (unlikely(!__pyx_v_level)) { __Pyx_RaiseUnboundLocalError("level"); __PYX_ERR(0, 470, __pyx_L1_error) }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":471
 *             data.append([
 *                 level,
 *                 "buy" if order.is_buy else "sell",             # <<<<<<<<<<<<<<
 *                 float(order.price),
 *                 f"{spread:.2%}",
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_is_buy); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_11 < 0))) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_11) {
      __Pyx_INCREF(__pyx_n_u_buy);
      __pyx_t_1 = __pyx_n_u_buy;
    } else {
      __Pyx_INCREF(__pyx_n_u_sell);
      __pyx_t_1 = __pyx_n_u_sell;
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":472
 *                 level,
 *                 "buy" if order.is_buy else "sell",
 *                 float(order.price),             # <<<<<<<<<<<<<<
 *                 f"{spread:.2%}",
 *                 amount_orig,
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_price); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyNumber_Float(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":473
 *                 "buy" if order.is_buy else "sell",
 *                 float(order.price),
 *                 f"{spread:.2%}",             # <<<<<<<<<<<<<<
 *                 amount_orig,
 *                 float(order.quantity),
 */
    __pyx_t_5 = __Pyx_PyObject_Format(__pyx_v_spread, __pyx_kp_u_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 473, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":475
 *                 f"{spread:.2%}",
 *                 amount_orig,
 *                 float(order.quantity),             # <<<<<<<<<<<<<<
 *                 age
 *             ])
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_quantity); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyNumber_Float(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 475, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":469
 *                 amount_orig = float(order.quantity)
 *                 level = "hang"
 *             data.append([             # <<<<<<<<<<<<<<
 *                 level,
 *                 "buy" if order.is_buy else "sell",
 */
    __pyx_t_3 = PyList_New(7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_level);
    __Pyx_GIVEREF(__pyx_v_level);
    PyList_SET_ITEM(__pyx_t_3, 0, __pyx_v_level);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyList_SET_ITEM(__pyx_t_3, 2, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyList_SET_ITEM(__pyx_t_3, 3, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_amount_orig);
    __Pyx_GIVEREF(__pyx_v_amount_orig);
    PyList_SET_ITEM(__pyx_t_3, 4, __pyx_v_amount_orig);
    __Pyx_GIVEREF(__pyx_t_4);
    PyList_SET_ITEM(__pyx_t_3, 5, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_age);
    __Pyx_GIVEREF(__pyx_v_age);
    PyList_SET_ITEM(__pyx_t_3, 6, __pyx_v_age);
    __pyx_t_1 = 0;
    __pyx_t_2 = 0;
    __pyx_t_5 = 0;
    __pyx_t_4 = 0;
    __pyx_t_16 = __Pyx_PyList_Append(__pyx_v_data, __pyx_t_3); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":479
 *             ])
 * 
 *         return pd.DataFrame(data=data, columns=columns)             # <<<<<<<<<<<<<<
 * 
 *     def market_status_data_frame(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> pd.DataFrame:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, __pyx_v_data) < 0) __PYX_ERR(0, 479, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_columns, __pyx_v_columns) < 0) __PYX_ERR(0, 479, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 479, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":439
 *         return df
 * 
 *     def active_orders_df(self) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         market, trading_pair, base_asset, quote_asset = self._market_info
 *         price = self.get_price()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.active_orders_df", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_trading_pair);
  __Pyx_XDECREF(__pyx_v_base_asset);
  __Pyx_XDECREF(__pyx_v_quote_asset);
  __Pyx_XDECREF(__pyx_v_price);
  __Pyx_XDECREF(__pyx_v_active_orders);
  __Pyx_XDECREF(__pyx_v_no_sells);
  __Pyx_XDECREF(__pyx_v_columns);
  __Pyx_XDECREF(__pyx_v_data);
  __Pyx_XDECREF(__pyx_v_lvl_buy);
  __Pyx_XDECREF(__pyx_v_lvl_sell);
  __Pyx_XDECREF(__pyx_v_order);
  __Pyx_XDECREF(__pyx_v_is_hanging_order);
  __Pyx_XDECREF(__pyx_v_level);
  __Pyx_XDECREF(__pyx_v_spread);
  __Pyx_XDECREF(__pyx_v_age);
  __Pyx_XDECREF(__pyx_v_amount_orig);
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":481
 *         return pd.DataFrame(data=data, columns=columns)
 * 
 *     def market_status_data_frame(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         markets_data = []
 *         markets_columns = ["Exchange", "Market", "Best Bid", "Best Ask", f"MidPrice"]
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_17market_status_data_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_17market_status_data_frame = {"market_status_data_frame", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_17market_status_data_frame, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_17market_status_data_frame(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_market_trading_pair_tuples = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("market_status_data_frame (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_trading_pair_tuples,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_trading_pair_tuples,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_market_trading_pair_tuples)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 481, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "market_status_data_frame") < 0)) __PYX_ERR(0, 481, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_market_trading_pair_tuples = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("market_status_data_frame", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 481, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.market_status_data_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_16market_status_data_frame(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_market_trading_pair_tuples);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_16market_status_data_frame(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_market_trading_pair_tuples) {
  PyObject *__pyx_v_markets_data = NULL;
  PyObject *__pyx_v_markets_columns = NULL;
  PyObject *__pyx_v_market_books = NULL;
  PyObject *__pyx_v_market = NULL;
  PyObject *__pyx_v_trading_pair = NULL;
  PyObject *__pyx_v_bid_price = NULL;
  PyObject *__pyx_v_ask_price = NULL;
  PyObject *__pyx_v_ref_price = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("market_status_data_frame", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":482
 * 
 *     def market_status_data_frame(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> pd.DataFrame:
 *         markets_data = []             # <<<<<<<<<<<<<<
 *         markets_columns = ["Exchange", "Market", "Best Bid", "Best Ask", f"MidPrice"]
 *         markets_columns.append('Reserved Price')
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 482, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_markets_data = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":483
 *     def market_status_data_frame(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> pd.DataFrame:
 *         markets_data = []
 *         markets_columns = ["Exchange", "Market", "Best Bid", "Best Ask", f"MidPrice"]             # <<<<<<<<<<<<<<
 *         markets_columns.append('Reserved Price')
 *         market_books = [(self._market_info.market, self._market_info.trading_pair)]
 */
  __pyx_t_1 = PyList_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 483, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_u_Exchange);
  __Pyx_GIVEREF(__pyx_n_u_Exchange);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_u_Exchange);
  __Pyx_INCREF(__pyx_n_u_Market);
  __Pyx_GIVEREF(__pyx_n_u_Market);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_u_Market);
  __Pyx_INCREF(__pyx_kp_u_Best_Bid);
  __Pyx_GIVEREF(__pyx_kp_u_Best_Bid);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_Best_Bid);
  __Pyx_INCREF(__pyx_kp_u_Best_Ask);
  __Pyx_GIVEREF(__pyx_kp_u_Best_Ask);
  PyList_SET_ITEM(__pyx_t_1, 3, __pyx_kp_u_Best_Ask);
  __Pyx_INCREF(__pyx_n_u_MidPrice);
  __Pyx_GIVEREF(__pyx_n_u_MidPrice);
  PyList_SET_ITEM(__pyx_t_1, 4, __pyx_n_u_MidPrice);
  __pyx_v_markets_columns = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":484
 *         markets_data = []
 *         markets_columns = ["Exchange", "Market", "Best Bid", "Best Ask", f"MidPrice"]
 *         markets_columns.append('Reserved Price')             # <<<<<<<<<<<<<<
 *         market_books = [(self._market_info.market, self._market_info.trading_pair)]
 *         for market, trading_pair in market_books:
 */
  __pyx_t_2 = __Pyx_PyList_Append(__pyx_v_markets_columns, __pyx_kp_u_Reserved_Price); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 484, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":485
 *         markets_columns = ["Exchange", "Market", "Best Bid", "Best Ask", f"MidPrice"]
 *         markets_columns.append('Reserved Price')
 *         market_books = [(self._market_info.market, self._market_info.trading_pair)]             # <<<<<<<<<<<<<<
 *         for market, trading_pair in market_books:
 *             bid_price = market.get_price(trading_pair, False)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_4);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_v_market_books = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":486
 *         markets_columns.append('Reserved Price')
 *         market_books = [(self._market_info.market, self._market_info.trading_pair)]
 *         for market, trading_pair in market_books:             # <<<<<<<<<<<<<<
 *             bid_price = market.get_price(trading_pair, False)
 *             ask_price = market.get_price(trading_pair, True)
 */
  __pyx_t_3 = __pyx_v_market_books; __Pyx_INCREF(__pyx_t_3); __pyx_t_5 = 0;
  for (;;) {
    if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_5); __Pyx_INCREF(__pyx_t_4); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 486, __pyx_L1_error)
    #else
    __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 486, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    #endif
    if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
      PyObject* sequence = __pyx_t_4;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 486, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_1 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_1 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 486, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 486, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_7 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 486, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_7);
      index = 0; __pyx_t_1 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_1)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      index = 1; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 2) < 0) __PYX_ERR(0, 486, __pyx_L1_error)
      __pyx_t_8 = NULL;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_unpacking_done;
      __pyx_L5_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 486, __pyx_L1_error)
      __pyx_L6_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_market, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_trading_pair, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":487
 *         market_books = [(self._market_info.market, self._market_info.trading_pair)]
 *         for market, trading_pair in market_books:
 *             bid_price = market.get_price(trading_pair, False)             # <<<<<<<<<<<<<<
 *             ask_price = market.get_price(trading_pair, True)
 *             ref_price = self.get_price()
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market, __pyx_n_s_get_price); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 487, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_9 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_1, __pyx_v_trading_pair, Py_False};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_9, 2+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 487, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_bid_price, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":488
 *         for market, trading_pair in market_books:
 *             bid_price = market.get_price(trading_pair, False)
 *             ask_price = market.get_price(trading_pair, True)             # <<<<<<<<<<<<<<
 *             ref_price = self.get_price()
 *             markets_data.append([
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_market, __pyx_n_s_get_price); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_9 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_1, __pyx_v_trading_pair, Py_True};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_9, 2+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 488, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_ask_price, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":489
 *             bid_price = market.get_price(trading_pair, False)
 *             ask_price = market.get_price(trading_pair, True)
 *             ref_price = self.get_price()             # <<<<<<<<<<<<<<
 *             markets_data.append([
 *                 market.display_name,
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_price); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_9 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_1, };
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_XDECREF_SET(__pyx_v_ref_price, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":491
 *             ref_price = self.get_price()
 *             markets_data.append([
 *                 market.display_name,             # <<<<<<<<<<<<<<
 *                 trading_pair,
 *                 float(bid_price),
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_market, __pyx_n_s_display_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 491, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":493
 *                 market.display_name,
 *                 trading_pair,
 *                 float(bid_price),             # <<<<<<<<<<<<<<
 *                 float(ask_price),
 *                 float(ref_price),
 */
    __pyx_t_6 = __Pyx_PyNumber_Float(__pyx_v_bid_price); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 493, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":494
 *                 trading_pair,
 *                 float(bid_price),
 *                 float(ask_price),             # <<<<<<<<<<<<<<
 *                 float(ref_price),
 *                 round(self._reserved_price, 5),
 */
    __pyx_t_1 = __Pyx_PyNumber_Float(__pyx_v_ask_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 494, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":495
 *                 float(bid_price),
 *                 float(ask_price),
 *                 float(ref_price),             # <<<<<<<<<<<<<<
 *                 round(self._reserved_price, 5),
 *             ])
 */
    __pyx_t_7 = __Pyx_PyNumber_Float(__pyx_v_ref_price); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":496
 *                 float(ask_price),
 *                 float(ref_price),
 *                 round(self._reserved_price, 5),             # <<<<<<<<<<<<<<
 *             ])
 *         return pd.DataFrame(data=markets_data, columns=markets_columns).replace(np.nan, '', regex=True)
 */
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_INCREF(__pyx_v_self->_reserved_price);
    __Pyx_GIVEREF(__pyx_v_self->_reserved_price);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_v_self->_reserved_price);
    __Pyx_INCREF(__pyx_int_5);
    __Pyx_GIVEREF(__pyx_int_5);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_int_5);
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_round, __pyx_t_10, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 496, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":490
 *             ask_price = market.get_price(trading_pair, True)
 *             ref_price = self.get_price()
 *             markets_data.append([             # <<<<<<<<<<<<<<
 *                 market.display_name,
 *                 trading_pair,
 */
    __pyx_t_10 = PyList_New(6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 490, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GIVEREF(__pyx_t_4);
    PyList_SET_ITEM(__pyx_t_10, 0, __pyx_t_4);
    __Pyx_INCREF(__pyx_v_trading_pair);
    __Pyx_GIVEREF(__pyx_v_trading_pair);
    PyList_SET_ITEM(__pyx_t_10, 1, __pyx_v_trading_pair);
    __Pyx_GIVEREF(__pyx_t_6);
    PyList_SET_ITEM(__pyx_t_10, 2, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyList_SET_ITEM(__pyx_t_10, 3, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_7);
    PyList_SET_ITEM(__pyx_t_10, 4, __pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_11);
    PyList_SET_ITEM(__pyx_t_10, 5, __pyx_t_11);
    __pyx_t_4 = 0;
    __pyx_t_6 = 0;
    __pyx_t_1 = 0;
    __pyx_t_7 = 0;
    __pyx_t_11 = 0;
    __pyx_t_2 = __Pyx_PyList_Append(__pyx_v_markets_data, __pyx_t_10); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 490, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":486
 *         markets_columns.append('Reserved Price')
 *         market_books = [(self._market_info.market, self._market_info.trading_pair)]
 *         for market, trading_pair in market_books:             # <<<<<<<<<<<<<<
 *             bid_price = market.get_price(trading_pair, False)
 *             ask_price = market.get_price(trading_pair, True)
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":498
 *                 round(self._reserved_price, 5),
 *             ])
 *         return pd.DataFrame(data=markets_data, columns=markets_columns).replace(np.nan, '', regex=True)             # <<<<<<<<<<<<<<
 * 
 *     def format_status(self) -> str:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_pd); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, __pyx_v_markets_data) < 0) __PYX_ERR(0, 498, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_columns, __pyx_v_markets_columns) < 0) __PYX_ERR(0, 498, __pyx_L1_error)
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_replace); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_np); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_nan); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = PyTuple_New(2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10);
  __Pyx_INCREF(__pyx_kp_u__15);
  __Pyx_GIVEREF(__pyx_kp_u__15);
  PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_kp_u__15);
  __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_regex, Py_True) < 0) __PYX_ERR(0, 498, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_11, __pyx_t_10); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 498, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":481
 *         return pd.DataFrame(data=data, columns=columns)
 * 
 *     def market_status_data_frame(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         markets_data = []
 *         markets_columns = ["Exchange", "Market", "Best Bid", "Best Ask", f"MidPrice"]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.market_status_data_frame", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_markets_data);
  __Pyx_XDECREF(__pyx_v_markets_columns);
  __Pyx_XDECREF(__pyx_v_market_books);
  __Pyx_XDECREF(__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_trading_pair);
  __Pyx_XDECREF(__pyx_v_bid_price);
  __Pyx_XDECREF(__pyx_v_ask_price);
  __Pyx_XDECREF(__pyx_v_ref_price);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":500
 *         return pd.DataFrame(data=markets_data, columns=markets_columns).replace(np.nan, '', regex=True)
 * 
 *     def format_status(self) -> str:             # <<<<<<<<<<<<<<
 *         if not self._all_markets_ready:
 *             return "Market connectors are not ready."
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_19format_status(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_19format_status = {"format_status", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_19format_status, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_19format_status(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("format_status (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("format_status", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "format_status", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18format_status(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18format_status(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_v_lines = 0;
  PyObject *__pyx_v_warning_lines = 0;
  PyObject *__pyx_v_markets_df = NULL;
  PyObject *__pyx_v_assets_df = NULL;
  PyObject *__pyx_v_first_col_length = NULL;
  PyObject *__pyx_v_df_lines = NULL;
  PyObject *__pyx_v_df = NULL;
  PyObject *__pyx_v_volatility_pct = NULL;
  PyObject *__pyx_8genexpr5__pyx_v_line = NULL;
  PyObject *__pyx_8genexpr6__pyx_v_line = NULL;
  PyObject *__pyx_8genexpr7__pyx_v_line = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  Py_UCS4 __pyx_t_15;
  int __pyx_t_16;
  double __pyx_t_17;
  int __pyx_t_18;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("format_status", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":501
 * 
 *     def format_status(self) -> str:
 *         if not self._all_markets_ready:             # <<<<<<<<<<<<<<
 *             return "Market connectors are not ready."
 *         cdef:
 */
  __pyx_t_1 = ((!(__pyx_v_self->_all_markets_ready != 0)) != 0);
  if (__pyx_t_1) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":502
 *     def format_status(self) -> str:
 *         if not self._all_markets_ready:
 *             return "Market connectors are not ready."             # <<<<<<<<<<<<<<
 *         cdef:
 *             list lines = []
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_kp_u_Market_connectors_are_not_ready);
    __pyx_r = __pyx_kp_u_Market_connectors_are_not_ready;
    goto __pyx_L0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":501
 * 
 *     def format_status(self) -> str:
 *         if not self._all_markets_ready:             # <<<<<<<<<<<<<<
 *             return "Market connectors are not ready."
 *         cdef:
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":504
 *             return "Market connectors are not ready."
 *         cdef:
 *             list lines = []             # <<<<<<<<<<<<<<
 *             list warning_lines = []
 *         warning_lines.extend(self.network_warning([self._market_info]))
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 504, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_lines = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":505
 *         cdef:
 *             list lines = []
 *             list warning_lines = []             # <<<<<<<<<<<<<<
 *         warning_lines.extend(self.network_warning([self._market_info]))
 * 
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 505, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_warning_lines = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":506
 *             list lines = []
 *             list warning_lines = []
 *         warning_lines.extend(self.network_warning([self._market_info]))             # <<<<<<<<<<<<<<
 * 
 *         markets_df = self.market_status_data_frame([self._market_info])
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_network_warning); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_self->_market_info);
  __Pyx_GIVEREF(__pyx_v_self->_market_info);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_self->_market_info);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 506, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_7 = __Pyx_PyList_Extend(__pyx_v_warning_lines, __pyx_t_2); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 506, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":508
 *         warning_lines.extend(self.network_warning([self._market_info]))
 * 
 *         markets_df = self.market_status_data_frame([self._market_info])             # <<<<<<<<<<<<<<
 *         lines.extend(["", "  Markets:"] + ["    " + line for line in markets_df.to_string(index=False).split("\n")])
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_status_data_frame); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 508, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_self->_market_info);
  __Pyx_GIVEREF(__pyx_v_self->_market_info);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_self->_market_info);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_markets_df = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":509
 * 
 *         markets_df = self.market_status_data_frame([self._market_info])
 *         lines.extend(["", "  Markets:"] + ["    " + line for line in markets_df.to_string(index=False).split("\n")])             # <<<<<<<<<<<<<<
 * 
 *         assets_df = map_df_to_str(self.pure_mm_assets_df(True))
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_kp_u__15);
  __Pyx_GIVEREF(__pyx_kp_u__15);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u__15);
  __Pyx_INCREF(__pyx_kp_u_Markets);
  __Pyx_GIVEREF(__pyx_kp_u_Markets);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_kp_u_Markets);
  { /* enter inner scope */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 509, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_markets_df, __pyx_n_s_to_string); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 509, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 509, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_index, Py_False) < 0) __PYX_ERR(0, 509, __pyx_L6_error)
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 509, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_split); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 509, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_kp_u__19};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 509, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_8 = __pyx_t_4; __Pyx_INCREF(__pyx_t_8); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_10 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 509, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 509, __pyx_L6_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_11)) {
        if (likely(PyList_CheckExact(__pyx_t_8))) {
          if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_10); __Pyx_INCREF(__pyx_t_4); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 509, __pyx_L6_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 509, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_10); __Pyx_INCREF(__pyx_t_4); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 509, __pyx_L6_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_8, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 509, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_11(__pyx_t_8);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 509, __pyx_L6_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr5__pyx_v_line, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = PyNumber_Add(__pyx_kp_u__20, __pyx_8genexpr5__pyx_v_line); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 509, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 509, __pyx_L6_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_line); __pyx_8genexpr5__pyx_v_line = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L6_error:;
    __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_line); __pyx_8genexpr5__pyx_v_line = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __pyx_t_8 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __Pyx_PyList_Extend(__pyx_v_lines, __pyx_t_8); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 509, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":511
 *         lines.extend(["", "  Markets:"] + ["    " + line for line in markets_df.to_string(index=False).split("\n")])
 * 
 *         assets_df = map_df_to_str(self.pure_mm_assets_df(True))             # <<<<<<<<<<<<<<
 *         first_col_length = max(*assets_df[0].apply(len))
 *         df_lines = assets_df.to_string(index=False, header=False,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_map_df_to_str); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_pure_mm_assets_df); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_9, Py_True};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_2};
    __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 511, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_assets_df = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":512
 * 
 *         assets_df = map_df_to_str(self.pure_mm_assets_df(True))
 *         first_col_length = max(*assets_df[0].apply(len))             # <<<<<<<<<<<<<<
 *         df_lines = assets_df.to_string(index=False, header=False,
 *                                        formatters={0: ("{:<" + str(first_col_length) + "}").format}).split("\n")
 */
  __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_assets_df, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_apply); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_GetBuiltinName(__pyx_n_s_len); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 512, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = __Pyx_PySequence_Tuple(__pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_max, __pyx_t_2, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 512, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_first_col_length = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":513
 *         assets_df = map_df_to_str(self.pure_mm_assets_df(True))
 *         first_col_length = max(*assets_df[0].apply(len))
 *         df_lines = assets_df.to_string(index=False, header=False,             # <<<<<<<<<<<<<<
 *                                        formatters={0: ("{:<" + str(first_col_length) + "}").format}).split("\n")
 *         lines.extend(["", "  Assets:"] + ["    " + line for line in df_lines])
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_assets_df, __pyx_n_s_to_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_index, Py_False) < 0) __PYX_ERR(0, 513, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_header, Py_False) < 0) __PYX_ERR(0, 513, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":514
 *         first_col_length = max(*assets_df[0].apply(len))
 *         df_lines = assets_df.to_string(index=False, header=False,
 *                                        formatters={0: ("{:<" + str(first_col_length) + "}").format}).split("\n")             # <<<<<<<<<<<<<<
 *         lines.extend(["", "  Assets:"] + ["    " + line for line in df_lines])
 * 
 */
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __Pyx_PyObject_Str(__pyx_v_first_col_length); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_5 = PyNumber_Add(__pyx_kp_u__21, __pyx_t_9); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_5, __pyx_kp_u__22); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_format); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_int_0, __pyx_t_5) < 0) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_formatters, __pyx_t_4) < 0) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":513
 *         assets_df = map_df_to_str(self.pure_mm_assets_df(True))
 *         first_col_length = max(*assets_df[0].apply(len))
 *         df_lines = assets_df.to_string(index=False, header=False,             # <<<<<<<<<<<<<<
 *                                        formatters={0: ("{:<" + str(first_col_length) + "}").format}).split("\n")
 *         lines.extend(["", "  Assets:"] + ["    " + line for line in df_lines])
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 513, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":514
 *         first_col_length = max(*assets_df[0].apply(len))
 *         df_lines = assets_df.to_string(index=False, header=False,
 *                                        formatters={0: ("{:<" + str(first_col_length) + "}").format}).split("\n")             # <<<<<<<<<<<<<<
 *         lines.extend(["", "  Assets:"] + ["    " + line for line in df_lines])
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_split); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_u__19};
    __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 514, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_df_lines = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":515
 *         df_lines = assets_df.to_string(index=False, header=False,
 *                                        formatters={0: ("{:<" + str(first_col_length) + "}").format}).split("\n")
 *         lines.extend(["", "  Assets:"] + ["    " + line for line in df_lines])             # <<<<<<<<<<<<<<
 * 
 *         # See if there are any open orders.
 */
  __pyx_t_8 = PyList_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_INCREF(__pyx_kp_u__15);
  __Pyx_GIVEREF(__pyx_kp_u__15);
  PyList_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u__15);
  __Pyx_INCREF(__pyx_kp_u_Assets);
  __Pyx_GIVEREF(__pyx_kp_u_Assets);
  PyList_SET_ITEM(__pyx_t_8, 1, __pyx_kp_u_Assets);
  { /* enter inner scope */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 515, __pyx_L12_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_v_df_lines)) || PyTuple_CheckExact(__pyx_v_df_lines)) {
      __pyx_t_4 = __pyx_v_df_lines; __Pyx_INCREF(__pyx_t_4); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_10 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_v_df_lines); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 515, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 515, __pyx_L12_error)
    }
    for (;;) {
      if (likely(!__pyx_t_11)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_10); __Pyx_INCREF(__pyx_t_2); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 515, __pyx_L12_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_10); __Pyx_INCREF(__pyx_t_2); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 515, __pyx_L12_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_4, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_11(__pyx_t_4);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 515, __pyx_L12_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_8genexpr6__pyx_v_line, __pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Add(__pyx_kp_u__20, __pyx_8genexpr6__pyx_v_line); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 515, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 515, __pyx_L12_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_line); __pyx_8genexpr6__pyx_v_line = 0;
    goto __pyx_L15_exit_scope;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_line); __pyx_8genexpr6__pyx_v_line = 0;
    goto __pyx_L1_error;
    __pyx_L15_exit_scope:;
  } /* exit inner scope */
  __pyx_t_4 = PyNumber_Add(__pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = __Pyx_PyList_Extend(__pyx_v_lines, __pyx_t_4); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 515, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":518
 * 
 *         # See if there are any open orders.
 *         if len(self.active_orders) > 0:             # <<<<<<<<<<<<<<
 *             df = self.active_orders_df()
 *             lines.extend(["", "  Orders:"] + ["    " + line for line in df.to_string(index=False).split("\n")])
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_active_orders); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_10 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 518, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_1 = ((__pyx_t_10 > 0) != 0);
  if (__pyx_t_1) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":519
 *         # See if there are any open orders.
 *         if len(self.active_orders) > 0:
 *             df = self.active_orders_df()             # <<<<<<<<<<<<<<
 *             lines.extend(["", "  Orders:"] + ["    " + line for line in df.to_string(index=False).split("\n")])
 *         else:
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_active_orders_df); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 519, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_8, };
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 519, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_v_df = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":520
 *         if len(self.active_orders) > 0:
 *             df = self.active_orders_df()
 *             lines.extend(["", "  Orders:"] + ["    " + line for line in df.to_string(index=False).split("\n")])             # <<<<<<<<<<<<<<
 *         else:
 *             lines.extend(["", "  No active maker orders."])
 */
    __pyx_t_4 = PyList_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_kp_u__15);
    __Pyx_GIVEREF(__pyx_kp_u__15);
    PyList_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u__15);
    __Pyx_INCREF(__pyx_kp_u_Orders);
    __Pyx_GIVEREF(__pyx_kp_u_Orders);
    PyList_SET_ITEM(__pyx_t_4, 1, __pyx_kp_u_Orders);
    { /* enter inner scope */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 520, __pyx_L19_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_df, __pyx_n_s_to_string); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 520, __pyx_L19_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 520, __pyx_L19_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_index, Py_False) < 0) __PYX_ERR(0, 520, __pyx_L19_error)
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 520, __pyx_L19_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_split); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 520, __pyx_L19_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_9 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_6 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_kp_u__19};
        __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 520, __pyx_L19_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
        __pyx_t_5 = __pyx_t_8; __Pyx_INCREF(__pyx_t_5); __pyx_t_10 = 0;
        __pyx_t_11 = NULL;
      } else {
        __pyx_t_10 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 520, __pyx_L19_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 520, __pyx_L19_error)
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      for (;;) {
        if (likely(!__pyx_t_11)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_8); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 520, __pyx_L19_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 520, __pyx_L19_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          } else {
            if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_8); __pyx_t_10++; if (unlikely((0 < 0))) __PYX_ERR(0, 520, __pyx_L19_error)
            #else
            __pyx_t_8 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 520, __pyx_L19_error)
            __Pyx_GOTREF(__pyx_t_8);
            #endif
          }
        } else {
          __pyx_t_8 = __pyx_t_11(__pyx_t_5);
          if (unlikely(!__pyx_t_8)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 520, __pyx_L19_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_8);
        }
        __Pyx_XDECREF_SET(__pyx_8genexpr7__pyx_v_line, __pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_Add(__pyx_kp_u__20, __pyx_8genexpr7__pyx_v_line); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 520, __pyx_L19_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_8))) __PYX_ERR(0, 520, __pyx_L19_error)
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_line); __pyx_8genexpr7__pyx_v_line = 0;
      goto __pyx_L22_exit_scope;
      __pyx_L19_error:;
      __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_line); __pyx_8genexpr7__pyx_v_line = 0;
      goto __pyx_L1_error;
      __pyx_L22_exit_scope:;
    } /* exit inner scope */
    __pyx_t_5 = PyNumber_Add(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 520, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_7 = __Pyx_PyList_Extend(__pyx_v_lines, __pyx_t_5); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 520, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":518
 * 
 *         # See if there are any open orders.
 *         if len(self.active_orders) > 0:             # <<<<<<<<<<<<<<
 *             df = self.active_orders_df()
 *             lines.extend(["", "  Orders:"] + ["    " + line for line in df.to_string(index=False).split("\n")])
 */
    goto __pyx_L16;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":522
 *             lines.extend(["", "  Orders:"] + ["    " + line for line in df.to_string(index=False).split("\n")])
 *         else:
 *             lines.extend(["", "  No active maker orders."])             # <<<<<<<<<<<<<<
 * 
 *         volatility_pct = self._avg_vol.current_value / float(self.get_price()) * 100.0
 */
  /*else*/ {
    __pyx_t_7 = __Pyx_ListComp_Append(__pyx_v_lines, __pyx_kp_u__15); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 522, __pyx_L1_error)
    __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_lines, __pyx_kp_u_No_active_maker_orders); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 522, __pyx_L1_error)
    (void)((__pyx_t_7 | __pyx_t_12));
  }
  __pyx_L16:;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":524
 *             lines.extend(["", "  No active maker orders."])
 * 
 *         volatility_pct = self._avg_vol.current_value / float(self.get_price()) * 100.0             # <<<<<<<<<<<<<<
 *         if all((self._gamma, self._kappa, not isnan(volatility_pct))):
 *             lines.extend(["", f"  Strategy parameters:",
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_avg_vol, __pyx_n_s_current_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_price); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_8, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 524, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = __Pyx_PyNumber_Float(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_3, __pyx_float_100_0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 524, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_volatility_pct = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":525
 * 
 *         volatility_pct = self._avg_vol.current_value / float(self.get_price()) * 100.0
 *         if all((self._gamma, self._kappa, not isnan(volatility_pct))):             # <<<<<<<<<<<<<<
 *             lines.extend(["", f"  Strategy parameters:",
 *                           f"    risk_factor(\u03B3)= {self._gamma:.5E}",
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_isnan); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_volatility_pct};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong((!__pyx_t_1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_self->_gamma);
  __Pyx_GIVEREF(__pyx_v_self->_gamma);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_self->_gamma);
  __Pyx_INCREF(__pyx_v_self->_kappa);
  __Pyx_GIVEREF(__pyx_v_self->_kappa);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_self->_kappa);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_t_4);
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_all, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 525, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_1) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":526
 *         volatility_pct = self._avg_vol.current_value / float(self.get_price()) * 100.0
 *         if all((self._gamma, self._kappa, not isnan(volatility_pct))):
 *             lines.extend(["", f"  Strategy parameters:",             # <<<<<<<<<<<<<<
 *                           f"    risk_factor(\u03B3)= {self._gamma:.5E}",
 *                           f"    order_book_depth_factor(\u03BA)= {self._kappa:.5E}",
 */
    __pyx_t_12 = __Pyx_ListComp_Append(__pyx_v_lines, __pyx_kp_u__15); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 526, __pyx_L1_error)
    __pyx_t_7 = __Pyx_ListComp_Append(__pyx_v_lines, __pyx_kp_u_Strategy_parameters); if (unlikely(__pyx_t_7 == ((int)-1))) __PYX_ERR(0, 526, __pyx_L1_error)

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":527
 *         if all((self._gamma, self._kappa, not isnan(volatility_pct))):
 *             lines.extend(["", f"  Strategy parameters:",
 *                           f"    risk_factor(\u03B3)= {self._gamma:.5E}",             # <<<<<<<<<<<<<<
 *                           f"    order_book_depth_factor(\u03BA)= {self._kappa:.5E}",
 *                           f"    volatility= {volatility_pct:.3f}%",
 */
    __pyx_t_4 = __Pyx_PyObject_Format(__pyx_v_self->_gamma, __pyx_kp_u_5E); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_risk_factor_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 527, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":526
 *         volatility_pct = self._avg_vol.current_value / float(self.get_price()) * 100.0
 *         if all((self._gamma, self._kappa, not isnan(volatility_pct))):
 *             lines.extend(["", f"  Strategy parameters:",             # <<<<<<<<<<<<<<
 *                           f"    risk_factor(\u03B3)= {self._gamma:.5E}",
 *                           f"    order_book_depth_factor(\u03BA)= {self._kappa:.5E}",
 */
    __pyx_t_13 = __Pyx_ListComp_Append(__pyx_v_lines, __pyx_t_3); if (unlikely(__pyx_t_13 == ((int)-1))) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":528
 *             lines.extend(["", f"  Strategy parameters:",
 *                           f"    risk_factor(\u03B3)= {self._gamma:.5E}",
 *                           f"    order_book_depth_factor(\u03BA)= {self._kappa:.5E}",             # <<<<<<<<<<<<<<
 *                           f"    volatility= {volatility_pct:.3f}%",
 *                           f"    time until end of trading cycle= {str(datetime.timedelta(seconds=float(self._time_left)//1e3))}"])
 */
    __pyx_t_3 = __Pyx_PyObject_Format(__pyx_v_self->_kappa, __pyx_kp_u_5E); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_order_book_depth_factor_2, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 528, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":526
 *         volatility_pct = self._avg_vol.current_value / float(self.get_price()) * 100.0
 *         if all((self._gamma, self._kappa, not isnan(volatility_pct))):
 *             lines.extend(["", f"  Strategy parameters:",             # <<<<<<<<<<<<<<
 *                           f"    risk_factor(\u03B3)= {self._gamma:.5E}",
 *                           f"    order_book_depth_factor(\u03BA)= {self._kappa:.5E}",
 */
    __pyx_t_14 = __Pyx_ListComp_Append(__pyx_v_lines, __pyx_t_4); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":529
 *                           f"    risk_factor(\u03B3)= {self._gamma:.5E}",
 *                           f"    order_book_depth_factor(\u03BA)= {self._kappa:.5E}",
 *                           f"    volatility= {volatility_pct:.3f}%",             # <<<<<<<<<<<<<<
 *                           f"    time until end of trading cycle= {str(datetime.timedelta(seconds=float(self._time_left)//1e3))}"])
 * 
 */
    __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = 0;
    __pyx_t_15 = 127;
    __Pyx_INCREF(__pyx_kp_u_volatility);
    __pyx_t_10 += 16;
    __Pyx_GIVEREF(__pyx_kp_u_volatility);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_volatility);
    __pyx_t_3 = __Pyx_PyObject_Format(__pyx_v_volatility_pct, __pyx_kp_u_3f); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_15 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_15) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_15;
    __pyx_t_10 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_kp_u__23);
    __pyx_t_10 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__23);
    PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u__23);
    __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_4, 3, __pyx_t_10, __pyx_t_15); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 529, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":526
 *         volatility_pct = self._avg_vol.current_value / float(self.get_price()) * 100.0
 *         if all((self._gamma, self._kappa, not isnan(volatility_pct))):
 *             lines.extend(["", f"  Strategy parameters:",             # <<<<<<<<<<<<<<
 *                           f"    risk_factor(\u03B3)= {self._gamma:.5E}",
 *                           f"    order_book_depth_factor(\u03BA)= {self._kappa:.5E}",
 */
    __pyx_t_16 = __Pyx_ListComp_Append(__pyx_v_lines, __pyx_t_3); if (unlikely(__pyx_t_16 == ((int)-1))) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":530
 *                           f"    order_book_depth_factor(\u03BA)= {self._kappa:.5E}",
 *                           f"    volatility= {volatility_pct:.3f}%",
 *                           f"    time until end of trading cycle= {str(datetime.timedelta(seconds=float(self._time_left)//1e3))}"])             # <<<<<<<<<<<<<<
 * 
 *         warning_lines.extend(self.balance_warning([self._market_info]))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_datetime); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_timedelta); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_17 = __Pyx_PyObject_AsDouble(__pyx_v_self->_time_left); if (unlikely(__pyx_t_17 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 530, __pyx_L1_error)
    __pyx_t_5 = PyFloat_FromDouble(floor(__pyx_t_17 / 1e3)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_seconds, __pyx_t_5) < 0) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Str(__pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyNumber_Add(__pyx_kp_u_time_until_end_of_trading_cycle, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 530, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":526
 *         volatility_pct = self._avg_vol.current_value / float(self.get_price()) * 100.0
 *         if all((self._gamma, self._kappa, not isnan(volatility_pct))):
 *             lines.extend(["", f"  Strategy parameters:",             # <<<<<<<<<<<<<<
 *                           f"    risk_factor(\u03B3)= {self._gamma:.5E}",
 *                           f"    order_book_depth_factor(\u03BA)= {self._kappa:.5E}",
 */
    __pyx_t_18 = __Pyx_PyList_Append(__pyx_v_lines, __pyx_t_5); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    (void)((__pyx_t_12 | (__pyx_t_7 | (__pyx_t_13 | (__pyx_t_14 | (__pyx_t_16 | __pyx_t_18))))));

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":525
 * 
 *         volatility_pct = self._avg_vol.current_value / float(self.get_price()) * 100.0
 *         if all((self._gamma, self._kappa, not isnan(volatility_pct))):             # <<<<<<<<<<<<<<
 *             lines.extend(["", f"  Strategy parameters:",
 *                           f"    risk_factor(\u03B3)= {self._gamma:.5E}",
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":532
 *                           f"    time until end of trading cycle= {str(datetime.timedelta(seconds=float(self._time_left)//1e3))}"])
 * 
 *         warning_lines.extend(self.balance_warning([self._market_info]))             # <<<<<<<<<<<<<<
 * 
 *         if len(warning_lines) > 0:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_balance_warning); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyList_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_self->_market_info);
  __Pyx_GIVEREF(__pyx_v_self->_market_info);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_v_self->_market_info);
  __pyx_t_8 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_4};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 532, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_18 = __Pyx_PyList_Extend(__pyx_v_warning_lines, __pyx_t_5); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(0, 532, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":534
 *         warning_lines.extend(self.balance_warning([self._market_info]))
 * 
 *         if len(warning_lines) > 0:             # <<<<<<<<<<<<<<
 *             lines.extend(["", "*** WARNINGS ***"] + warning_lines)
 * 
 */
  __pyx_t_10 = PyList_GET_SIZE(__pyx_v_warning_lines); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 534, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_10 > 0) != 0);
  if (__pyx_t_1) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":535
 * 
 *         if len(warning_lines) > 0:
 *             lines.extend(["", "*** WARNINGS ***"] + warning_lines)             # <<<<<<<<<<<<<<
 * 
 *         return "\n".join(lines)
 */
    __pyx_t_5 = PyList_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 535, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_kp_u__15);
    __Pyx_GIVEREF(__pyx_kp_u__15);
    PyList_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u__15);
    __Pyx_INCREF(__pyx_kp_u_WARNINGS);
    __Pyx_GIVEREF(__pyx_kp_u_WARNINGS);
    PyList_SET_ITEM(__pyx_t_5, 1, __pyx_kp_u_WARNINGS);
    __pyx_t_3 = PyNumber_Add(__pyx_t_5, __pyx_v_warning_lines); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 535, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_18 = __Pyx_PyList_Extend(__pyx_v_lines, __pyx_t_3); if (unlikely(__pyx_t_18 == ((int)-1))) __PYX_ERR(0, 535, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":534
 *         warning_lines.extend(self.balance_warning([self._market_info]))
 * 
 *         if len(warning_lines) > 0:             # <<<<<<<<<<<<<<
 *             lines.extend(["", "*** WARNINGS ***"] + warning_lines)
 * 
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":537
 *             lines.extend(["", "*** WARNINGS ***"] + warning_lines)
 * 
 *         return "\n".join(lines)             # <<<<<<<<<<<<<<
 * 
 *     def execute_orders_proposal(self, proposal: Proposal):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyUnicode_Join(__pyx_kp_u__19, __pyx_v_lines); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":500
 *         return pd.DataFrame(data=markets_data, columns=markets_columns).replace(np.nan, '', regex=True)
 * 
 *     def format_status(self) -> str:             # <<<<<<<<<<<<<<
 *         if not self._all_markets_ready:
 *             return "Market connectors are not ready."
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.format_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_lines);
  __Pyx_XDECREF(__pyx_v_warning_lines);
  __Pyx_XDECREF(__pyx_v_markets_df);
  __Pyx_XDECREF(__pyx_v_assets_df);
  __Pyx_XDECREF(__pyx_v_first_col_length);
  __Pyx_XDECREF(__pyx_v_df_lines);
  __Pyx_XDECREF(__pyx_v_df);
  __Pyx_XDECREF(__pyx_v_volatility_pct);
  __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_line);
  __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_line);
  __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_line);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":539
 *         return "\n".join(lines)
 * 
 *     def execute_orders_proposal(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_execute_orders_proposal(proposal)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_21execute_orders_proposal(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_21execute_orders_proposal = {"execute_orders_proposal", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_21execute_orders_proposal, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_21execute_orders_proposal(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_proposal = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_orders_proposal (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_proposal)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 539, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "execute_orders_proposal") < 0)) __PYX_ERR(0, 539, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_proposal = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("execute_orders_proposal", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 539, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.execute_orders_proposal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_20execute_orders_proposal(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_proposal);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_20execute_orders_proposal(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("execute_orders_proposal", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":540
 * 
 *     def execute_orders_proposal(self, proposal: Proposal):
 *         return self.c_execute_orders_proposal(proposal)             # <<<<<<<<<<<<<<
 * 
 *     def cancel_order(self, order_id: str):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_execute_orders_proposal(__pyx_v_self, __pyx_v_proposal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 540, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":539
 *         return "\n".join(lines)
 * 
 *     def execute_orders_proposal(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_execute_orders_proposal(proposal)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.execute_orders_proposal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":542
 *         return self.c_execute_orders_proposal(proposal)
 * 
 *     def cancel_order(self, order_id: str):             # <<<<<<<<<<<<<<
 *         return self.c_cancel_order(self._market_info, order_id)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_23cancel_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_23cancel_order = {"cancel_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_23cancel_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_23cancel_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_order_id = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_order (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_id,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_id,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_id)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 542, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "cancel_order") < 0)) __PYX_ERR(0, 542, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_order_id = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cancel_order", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 542, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.cancel_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order_id), (&PyUnicode_Type), 1, "order_id", 1))) __PYX_ERR(0, 542, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_22cancel_order(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_order_id);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_22cancel_order(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cancel_order", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":543
 * 
 *     def cancel_order(self, order_id: str):
 *         return self.c_cancel_order(self._market_info, order_id)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_start(self, Clock clock, double timestamp):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_v_self->_market_info;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_cancel_order(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_t_1, __pyx_v_order_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 543, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":542
 *         return self.c_execute_orders_proposal(proposal)
 * 
 *     def cancel_order(self, order_id: str):             # <<<<<<<<<<<<<<
 *         return self.c_cancel_order(self._market_info, order_id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.cancel_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7c_start_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":555
 *             restored_order_ids = self.c_track_restored_orders(self.market_info)
 *             for order_id in restored_order_ids:
 *                 order = next(o for o in self.market_info.market.limit_orders if o.client_order_id == order_id)             # <<<<<<<<<<<<<<
 *                 if order:
 *                     self._hanging_orders_tracker.add_order(order)
 */

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7c_start_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr *)__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 555, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7c_start_2generator, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_AvellanedaMarketMakingStrategy_c, __pyx_n_s_hummingbot_strategy_avellaneda_m); if (unlikely(!gen)) __PYX_ERR(0, 555, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_start.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7c_start_2generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 555, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 555, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_market_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_market); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_limit_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 555, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 555, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 555, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 555, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_o);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_o, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_o, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_order_id)) { __Pyx_RaiseClosureNameError("order_id"); __PYX_ERR(0, 555, __pyx_L1_error) }
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_order_id, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 555, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 555, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_6) {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_o);
      __pyx_r = __pyx_cur_scope->__pyx_v_o;
      __Pyx_XGIVEREF(__pyx_t_2);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_yield:;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 555, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":545
 *         return self.c_cancel_order(self._market_info, order_id)
 * 
 *     cdef c_start(self, Clock clock, double timestamp):             # <<<<<<<<<<<<<<
 *         StrategyBase.c_start(self, clock, timestamp)
 *         self._last_timestamp = timestamp
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_start(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, struct __pyx_obj_10hummingbot_4core_5clock_Clock *__pyx_v_clock, double __pyx_v_timestamp) {
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start *__pyx_cur_scope;
  PyObject *__pyx_v_restored_order_ids = NULL;
  PyObject *__pyx_v_order = NULL;
  PyObject *__pyx_gb_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7c_start_2generator = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_start", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start *)__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 545, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":546
 * 
 *     cdef c_start(self, Clock clock, double timestamp):
 *         StrategyBase.c_start(self, clock, timestamp)             # <<<<<<<<<<<<<<
 *         self._last_timestamp = timestamp
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase->__pyx_base.c_start(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_t_1), __pyx_v_clock, __pyx_v_timestamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 546, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":547
 *     cdef c_start(self, Clock clock, double timestamp):
 *         StrategyBase.c_start(self, clock, timestamp)
 *         self._last_timestamp = timestamp             # <<<<<<<<<<<<<<
 * 
 *         self._hanging_orders_tracker.register_events(self.active_markets)
 */
  __pyx_cur_scope->__pyx_v_self->_last_timestamp = __pyx_v_timestamp;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":549
 *         self._last_timestamp = timestamp
 * 
 *         self._hanging_orders_tracker.register_events(self.active_markets)             # <<<<<<<<<<<<<<
 * 
 *         if self._hanging_orders_enabled:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_hanging_orders_tracker, __pyx_n_s_register_events); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_active_markets); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 549, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 549, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":551
 *         self._hanging_orders_tracker.register_events(self.active_markets)
 * 
 *         if self._hanging_orders_enabled:             # <<<<<<<<<<<<<<
 *             # start tracking any restored limit order
 *             restored_order_ids = self.c_track_restored_orders(self.market_info)
 */
  __pyx_t_6 = (__pyx_cur_scope->__pyx_v_self->_hanging_orders_enabled != 0);
  if (__pyx_t_6) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":553
 *         if self._hanging_orders_enabled:
 *             # start tracking any restored limit order
 *             restored_order_ids = self.c_track_restored_orders(self.market_info)             # <<<<<<<<<<<<<<
 *             for order_id in restored_order_ids:
 *                 order = next(o for o in self.market_info.market.limit_orders if o.client_order_id == order_id)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_market_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_track_restored_orders(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_cur_scope->__pyx_v_self), __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 553, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_restored_order_ids = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":554
 *             # start tracking any restored limit order
 *             restored_order_ids = self.c_track_restored_orders(self.market_info)
 *             for order_id in restored_order_ids:             # <<<<<<<<<<<<<<
 *                 order = next(o for o in self.market_info.market.limit_orders if o.client_order_id == order_id)
 *                 if order:
 */
    if (likely(PyList_CheckExact(__pyx_v_restored_order_ids)) || PyTuple_CheckExact(__pyx_v_restored_order_ids)) {
      __pyx_t_1 = __pyx_v_restored_order_ids; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_restored_order_ids); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 554, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 554, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 554, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 554, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 554, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_8(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 554, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order_id);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order_id, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":555
 *             restored_order_ids = self.c_track_restored_orders(self.market_info)
 *             for order_id in restored_order_ids:
 *                 order = next(o for o in self.market_info.market.limit_orders if o.client_order_id == order_id)             # <<<<<<<<<<<<<<
 *                 if order:
 *                     self._hanging_orders_tracker.add_order(order)
 */
      __pyx_t_2 = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7c_start_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 555, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyIter_Next(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 555, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_order, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":556
 *             for order_id in restored_order_ids:
 *                 order = next(o for o in self.market_info.market.limit_orders if o.client_order_id == order_id)
 *                 if order:             # <<<<<<<<<<<<<<
 *                     self._hanging_orders_tracker.add_order(order)
 *                     self._hanging_orders_tracker.update_strategy_orders_with_equivalent_orders()
 */
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_v_order); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 556, __pyx_L1_error)
      if (__pyx_t_6) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":557
 *                 order = next(o for o in self.market_info.market.limit_orders if o.client_order_id == order_id)
 *                 if order:
 *                     self._hanging_orders_tracker.add_order(order)             # <<<<<<<<<<<<<<
 *                     self._hanging_orders_tracker.update_strategy_orders_with_equivalent_orders()
 * 
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_hanging_orders_tracker, __pyx_n_s_add_order); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 557, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_5 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_order};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 557, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":558
 *                 if order:
 *                     self._hanging_orders_tracker.add_order(order)
 *                     self._hanging_orders_tracker.update_strategy_orders_with_equivalent_orders()             # <<<<<<<<<<<<<<
 * 
 *         self._time_left = self._closing_time
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_hanging_orders_tracker, __pyx_n_s_update_strategy_orders_with_equi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 558, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_4 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_5 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_4, };
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 558, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":556
 *             for order_id in restored_order_ids:
 *                 order = next(o for o in self.market_info.market.limit_orders if o.client_order_id == order_id)
 *                 if order:             # <<<<<<<<<<<<<<
 *                     self._hanging_orders_tracker.add_order(order)
 *                     self._hanging_orders_tracker.update_strategy_orders_with_equivalent_orders()
 */
      }

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":554
 *             # start tracking any restored limit order
 *             restored_order_ids = self.c_track_restored_orders(self.market_info)
 *             for order_id in restored_order_ids:             # <<<<<<<<<<<<<<
 *                 order = next(o for o in self.market_info.market.limit_orders if o.client_order_id == order_id)
 *                 if order:
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":551
 *         self._hanging_orders_tracker.register_events(self.active_markets)
 * 
 *         if self._hanging_orders_enabled:             # <<<<<<<<<<<<<<
 *             # start tracking any restored limit order
 *             restored_order_ids = self.c_track_restored_orders(self.market_info)
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":560
 *                     self._hanging_orders_tracker.update_strategy_orders_with_equivalent_orders()
 * 
 *         self._time_left = self._closing_time             # <<<<<<<<<<<<<<
 * 
 *     def start(self, clock: Clock, timestamp: float):
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->_closing_time;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_time_left);
  __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_time_left);
  __pyx_cur_scope->__pyx_v_self->_time_left = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":545
 *         return self.c_cancel_order(self._market_info, order_id)
 * 
 *     cdef c_start(self, Clock clock, double timestamp):             # <<<<<<<<<<<<<<
 *         StrategyBase.c_start(self, clock, timestamp)
 *         self._last_timestamp = timestamp
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_start", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_restored_order_ids);
  __Pyx_XDECREF(__pyx_v_order);
  __Pyx_XDECREF(__pyx_gb_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7c_start_2generator);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":562
 *         self._time_left = self._closing_time
 * 
 *     def start(self, clock: Clock, timestamp: float):             # <<<<<<<<<<<<<<
 *         self.c_start(clock, timestamp)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25start(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25start = {"start", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25start, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25start(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_10hummingbot_4core_5clock_Clock *__pyx_v_clock = 0;
  double __pyx_v_timestamp;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_clock,&__pyx_n_s_timestamp,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_clock,&__pyx_n_s_timestamp,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_clock)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 562, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_timestamp)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 562, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("start", 1, 2, 2, 1); __PYX_ERR(0, 562, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "start") < 0)) __PYX_ERR(0, 562, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_clock = ((struct __pyx_obj_10hummingbot_4core_5clock_Clock *)values[0]);
    __pyx_v_timestamp = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_timestamp == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 562, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("start", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 562, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.start", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_clock), __pyx_ptype_10hummingbot_4core_5clock_Clock, 1, "clock", 0))) __PYX_ERR(0, 562, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_24start(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_clock, __pyx_v_timestamp);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_24start(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, struct __pyx_obj_10hummingbot_4core_5clock_Clock *__pyx_v_clock, double __pyx_v_timestamp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("start", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":563
 * 
 *     def start(self, clock: Clock, timestamp: float):
 *         self.c_start(clock, timestamp)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_stop(self, Clock clock):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_start(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self), __pyx_v_clock, __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 563, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":562
 *         self._time_left = self._closing_time
 * 
 *     def start(self, clock: Clock, timestamp: float):             # <<<<<<<<<<<<<<
 *         self.c_start(clock, timestamp)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.start", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":565
 *         self.c_start(clock, timestamp)
 * 
 *     cdef c_stop(self, Clock clock):             # <<<<<<<<<<<<<<
 *         self._hanging_orders_tracker.unregister_events(self.active_markets)
 *         StrategyBase.c_stop(self, clock)
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_stop(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, struct __pyx_obj_10hummingbot_4core_5clock_Clock *__pyx_v_clock) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_stop", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":566
 * 
 *     cdef c_stop(self, Clock clock):
 *         self._hanging_orders_tracker.unregister_events(self.active_markets)             # <<<<<<<<<<<<<<
 *         StrategyBase.c_stop(self, clock)
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_hanging_orders_tracker, __pyx_n_s_unregister_events); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_active_markets); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 566, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":567
 *     cdef c_stop(self, Clock clock):
 *         self._hanging_orders_tracker.unregister_events(self.active_markets)
 *         StrategyBase.c_stop(self, clock)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_tick(self, double timestamp):
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase->__pyx_base.c_stop(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self), __pyx_v_clock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 567, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":565
 *         self.c_start(clock, timestamp)
 * 
 *     cdef c_stop(self, Clock clock):             # <<<<<<<<<<<<<<
 *         self._hanging_orders_tracker.unregister_events(self.active_markets)
 *         StrategyBase.c_stop(self, clock)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_stop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":569
 *         StrategyBase.c_stop(self, clock)
 * 
 *     cdef c_tick(self, double timestamp):             # <<<<<<<<<<<<<<
 *         StrategyBase.c_tick(self, timestamp)
 *         cdef:
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_tick(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, double __pyx_v_timestamp) {
  int64_t __pyx_v_current_tick;
  int64_t __pyx_v_last_tick;
  int __pyx_v_should_report_warnings;
  PyObject *__pyx_v_proposal = 0;
  PyObject *__pyx_8genexpr9__pyx_v_mkt = NULL;
  PyObject *__pyx_9genexpr10__pyx_v_mkt = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  Py_UCS4 __pyx_t_13;
  char const *__pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_tick", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":570
 * 
 *     cdef c_tick(self, double timestamp):
 *         StrategyBase.c_tick(self, timestamp)             # <<<<<<<<<<<<<<
 *         cdef:
 *             int64_t current_tick = <int64_t>(timestamp // self._status_report_interval)
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase->__pyx_base.c_tick(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self), __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 570, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":572
 *         StrategyBase.c_tick(self, timestamp)
 *         cdef:
 *             int64_t current_tick = <int64_t>(timestamp // self._status_report_interval)             # <<<<<<<<<<<<<<
 *             int64_t last_tick = <int64_t>(self._last_timestamp // self._status_report_interval)
 *             bint should_report_warnings = ((current_tick > last_tick) and
 */
  if (unlikely(__pyx_v_self->_status_report_interval == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 572, __pyx_L1_error)
  }
  __pyx_v_current_tick = ((int64_t)floor(__pyx_v_timestamp / __pyx_v_self->_status_report_interval));

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":573
 *         cdef:
 *             int64_t current_tick = <int64_t>(timestamp // self._status_report_interval)
 *             int64_t last_tick = <int64_t>(self._last_timestamp // self._status_report_interval)             # <<<<<<<<<<<<<<
 *             bint should_report_warnings = ((current_tick > last_tick) and
 *                                            (self._logging_options & self.OPTION_LOG_STATUS_REPORT))
 */
  if (unlikely(__pyx_v_self->_status_report_interval == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 573, __pyx_L1_error)
  }
  __pyx_v_last_tick = ((int64_t)floor(__pyx_v_self->_last_timestamp / __pyx_v_self->_status_report_interval));

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":574
 *             int64_t current_tick = <int64_t>(timestamp // self._status_report_interval)
 *             int64_t last_tick = <int64_t>(self._last_timestamp // self._status_report_interval)
 *             bint should_report_warnings = ((current_tick > last_tick) and             # <<<<<<<<<<<<<<
 *                                            (self._logging_options & self.OPTION_LOG_STATUS_REPORT))
 *             object proposal
 */
  __pyx_t_3 = ((__pyx_v_current_tick > __pyx_v_last_tick) != 0);
  if (__pyx_t_3) {
  } else {
    __pyx_t_2 = __pyx_t_3;
    goto __pyx_L3_bool_binop_done;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":575
 *             int64_t last_tick = <int64_t>(self._last_timestamp // self._status_report_interval)
 *             bint should_report_warnings = ((current_tick > last_tick) and
 *                                            (self._logging_options & self.OPTION_LOG_STATUS_REPORT))             # <<<<<<<<<<<<<<
 *             object proposal
 * 
 */
  __pyx_t_1 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_STATUS_REPORT); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_And(__pyx_t_1, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 575, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = __pyx_t_3;
  __pyx_L3_bool_binop_done:;
  __pyx_v_should_report_warnings = __pyx_t_2;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":578
 *             object proposal
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             if not self._all_markets_ready:
 *                 self._all_markets_ready = all([mkt.ready for mkt in self._sb_markets])
 */
  /*try:*/ {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":579
 * 
 *         try:
 *             if not self._all_markets_ready:             # <<<<<<<<<<<<<<
 *                 self._all_markets_ready = all([mkt.ready for mkt in self._sb_markets])
 *                 if not self._all_markets_ready:
 */
    __pyx_t_2 = ((!(__pyx_v_self->_all_markets_ready != 0)) != 0);
    if (__pyx_t_2) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":580
 *         try:
 *             if not self._all_markets_ready:
 *                 self._all_markets_ready = all([mkt.ready for mkt in self._sb_markets])             # <<<<<<<<<<<<<<
 *                 if not self._all_markets_ready:
 *                     # Markets not ready yet. Don't do anything.
 */
      { /* enter inner scope */
        __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 580, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = 0;
        __pyx_t_1 = __Pyx_set_iterator(__pyx_v_self->__pyx_base._sb_markets, 1, (&__pyx_t_7), (&__pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 580, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_XDECREF(__pyx_t_4);
        __pyx_t_4 = __pyx_t_1;
        __pyx_t_1 = 0;
        while (1) {
          __pyx_t_9 = __Pyx_set_iter_next(__pyx_t_4, __pyx_t_7, &__pyx_t_6, &__pyx_t_1, __pyx_t_8);
          if (unlikely(__pyx_t_9 == 0)) break;
          if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 580, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_XDECREF_SET(__pyx_8genexpr9__pyx_v_mkt, __pyx_t_1);
          __pyx_t_1 = 0;
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr9__pyx_v_mkt, __pyx_n_s_ready); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 580, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 580, __pyx_L11_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_mkt); __pyx_8genexpr9__pyx_v_mkt = 0;
        goto __pyx_L14_exit_scope;
        __pyx_L11_error:;
        __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_mkt); __pyx_8genexpr9__pyx_v_mkt = 0;
        goto __pyx_L6_error;
        __pyx_L14_exit_scope:;
      } /* exit inner scope */
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_all, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 580, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 580, __pyx_L6_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_self->_all_markets_ready = __pyx_t_2;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":581
 *             if not self._all_markets_ready:
 *                 self._all_markets_ready = all([mkt.ready for mkt in self._sb_markets])
 *                 if not self._all_markets_ready:             # <<<<<<<<<<<<<<
 *                     # Markets not ready yet. Don't do anything.
 *                     if should_report_warnings:
 */
      __pyx_t_2 = ((!(__pyx_v_self->_all_markets_ready != 0)) != 0);
      if (__pyx_t_2) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":583
 *                 if not self._all_markets_ready:
 *                     # Markets not ready yet. Don't do anything.
 *                     if should_report_warnings:             # <<<<<<<<<<<<<<
 *                         self.logger().warning(f"Markets are not ready. No market making trades are permitted.")
 *                     return
 */
        __pyx_t_2 = (__pyx_v_should_report_warnings != 0);
        if (__pyx_t_2) {

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":584
 *                     # Markets not ready yet. Don't do anything.
 *                     if should_report_warnings:
 *                         self.logger().warning(f"Markets are not ready. No market making trades are permitted.")             # <<<<<<<<<<<<<<
 *                     return
 * 
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_10 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
              __pyx_t_8 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_10, };
            __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 584, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_warning); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
              __pyx_t_8 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_kp_u_Markets_are_not_ready_No_market};
            __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 584, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":583
 *                 if not self._all_markets_ready:
 *                     # Markets not ready yet. Don't do anything.
 *                     if should_report_warnings:             # <<<<<<<<<<<<<<
 *                         self.logger().warning(f"Markets are not ready. No market making trades are permitted.")
 *                     return
 */
        }

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":585
 *                     if should_report_warnings:
 *                         self.logger().warning(f"Markets are not ready. No market making trades are permitted.")
 *                     return             # <<<<<<<<<<<<<<
 * 
 *             if should_report_warnings:
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = Py_None; __Pyx_INCREF(Py_None);
        goto __pyx_L5_return;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":581
 *             if not self._all_markets_ready:
 *                 self._all_markets_ready = all([mkt.ready for mkt in self._sb_markets])
 *                 if not self._all_markets_ready:             # <<<<<<<<<<<<<<
 *                     # Markets not ready yet. Don't do anything.
 *                     if should_report_warnings:
 */
      }

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":579
 * 
 *         try:
 *             if not self._all_markets_ready:             # <<<<<<<<<<<<<<
 *                 self._all_markets_ready = all([mkt.ready for mkt in self._sb_markets])
 *                 if not self._all_markets_ready:
 */
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":587
 *                     return
 * 
 *             if should_report_warnings:             # <<<<<<<<<<<<<<
 *                 if not all([mkt.network_status is NetworkStatus.CONNECTED for mkt in self._sb_markets]):
 *                     self.logger().warning(f"WARNING: Some markets are not connected or are down at the moment. Market "
 */
    __pyx_t_2 = (__pyx_v_should_report_warnings != 0);
    if (__pyx_t_2) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":588
 * 
 *             if should_report_warnings:
 *                 if not all([mkt.network_status is NetworkStatus.CONNECTED for mkt in self._sb_markets]):             # <<<<<<<<<<<<<<
 *                     self.logger().warning(f"WARNING: Some markets are not connected or are down at the moment. Market "
 *                                           f"making may be dangerous when markets or networks are unstable.")
 */
      { /* enter inner scope */
        __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 588, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = 0;
        __pyx_t_5 = __Pyx_set_iterator(__pyx_v_self->__pyx_base._sb_markets, 1, (&__pyx_t_6), (&__pyx_t_8)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 588, __pyx_L21_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_1);
        __pyx_t_1 = __pyx_t_5;
        __pyx_t_5 = 0;
        while (1) {
          __pyx_t_9 = __Pyx_set_iter_next(__pyx_t_1, __pyx_t_6, &__pyx_t_7, &__pyx_t_5, __pyx_t_8);
          if (unlikely(__pyx_t_9 == 0)) break;
          if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(0, 588, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_XDECREF_SET(__pyx_9genexpr10__pyx_v_mkt, __pyx_t_5);
          __pyx_t_5 = 0;
          __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr10__pyx_v_mkt, __pyx_n_s_network_status); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 588, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 588, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_CONNECTED); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 588, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_2 = (__pyx_t_5 == __pyx_t_11);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyBool_FromLong(__pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 588, __pyx_L21_error)
          __Pyx_GOTREF(__pyx_t_11);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 588, __pyx_L21_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_mkt); __pyx_9genexpr10__pyx_v_mkt = 0;
        goto __pyx_L24_exit_scope;
        __pyx_L21_error:;
        __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_mkt); __pyx_9genexpr10__pyx_v_mkt = 0;
        goto __pyx_L6_error;
        __pyx_L24_exit_scope:;
      } /* exit inner scope */
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_all, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 588, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 588, __pyx_L6_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_3 = ((!__pyx_t_2) != 0);
      if (__pyx_t_3) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":589
 *             if should_report_warnings:
 *                 if not all([mkt.network_status is NetworkStatus.CONNECTED for mkt in self._sb_markets]):
 *                     self.logger().warning(f"WARNING: Some markets are not connected or are down at the moment. Market "             # <<<<<<<<<<<<<<
 *                                           f"making may be dangerous when markets or networks are unstable.")
 * 
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 589, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_5 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_5, };
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 589, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_warning); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 589, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_u_WARNING_Some_markets_are_not_con};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 589, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":588
 * 
 *             if should_report_warnings:
 *                 if not all([mkt.network_status is NetworkStatus.CONNECTED for mkt in self._sb_markets]):             # <<<<<<<<<<<<<<
 *                     self.logger().warning(f"WARNING: Some markets are not connected or are down at the moment. Market "
 *                                           f"making may be dangerous when markets or networks are unstable.")
 */
      }

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":587
 *                     return
 * 
 *             if should_report_warnings:             # <<<<<<<<<<<<<<
 *                 if not all([mkt.network_status is NetworkStatus.CONNECTED for mkt in self._sb_markets]):
 *                     self.logger().warning(f"WARNING: Some markets are not connected or are down at the moment. Market "
 */
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":592
 *                                           f"making may be dangerous when markets or networks are unstable.")
 * 
 *             self.c_collect_market_variables(timestamp)             # <<<<<<<<<<<<<<
 *             if self.c_is_algorithm_ready():
 *                 proposal = None
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_collect_market_variables(__pyx_v_self, __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 592, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":593
 * 
 *             self.c_collect_market_variables(timestamp)
 *             if self.c_is_algorithm_ready():             # <<<<<<<<<<<<<<
 *                 proposal = None
 *                 if self._create_timestamp <= self._current_timestamp:
 */
    __pyx_t_3 = (((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_is_algorithm_ready(__pyx_v_self) != 0);
    if (__pyx_t_3) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":594
 *             self.c_collect_market_variables(timestamp)
 *             if self.c_is_algorithm_ready():
 *                 proposal = None             # <<<<<<<<<<<<<<
 *                 if self._create_timestamp <= self._current_timestamp:
 *                     # If gamma or kappa are -1 then it's the first time they are calculated.
 */
      __Pyx_INCREF(Py_None);
      __pyx_v_proposal = Py_None;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":595
 *             if self.c_is_algorithm_ready():
 *                 proposal = None
 *                 if self._create_timestamp <= self._current_timestamp:             # <<<<<<<<<<<<<<
 *                     # If gamma or kappa are -1 then it's the first time they are calculated.
 *                     # Also, if volatility goes beyond the threshold specified, we consider volatility regime has changed
 */
      __pyx_t_3 = ((__pyx_v_self->_create_timestamp <= __pyx_v_self->__pyx_base.__pyx_base._current_timestamp) != 0);
      if (__pyx_t_3) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":599
 *                     # Also, if volatility goes beyond the threshold specified, we consider volatility regime has changed
 *                     # so parameters need to be recalculated.
 *                     if (self._gamma is None) or (self._kappa is None) or \             # <<<<<<<<<<<<<<
 *                             (self._parameters_based_on_spread and
 *                              self.volatility_diff_from_last_parameter_calculation(self.get_volatility()) >
 */
        __pyx_t_2 = (__pyx_v_self->_gamma == Py_None);
        __pyx_t_12 = (__pyx_t_2 != 0);
        if (!__pyx_t_12) {
        } else {
          __pyx_t_3 = __pyx_t_12;
          goto __pyx_L28_bool_binop_done;
        }
        __pyx_t_12 = (__pyx_v_self->_kappa == Py_None);
        __pyx_t_2 = (__pyx_t_12 != 0);
        if (!__pyx_t_2) {
        } else {
          __pyx_t_3 = __pyx_t_2;
          goto __pyx_L28_bool_binop_done;
        }

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":600
 *                     # so parameters need to be recalculated.
 *                     if (self._gamma is None) or (self._kappa is None) or \
 *                             (self._parameters_based_on_spread and             # <<<<<<<<<<<<<<
 *                              self.volatility_diff_from_last_parameter_calculation(self.get_volatility()) >
 *                              self._volatility_sensibility):
 */
        __pyx_t_2 = (__pyx_v_self->_parameters_based_on_spread != 0);
        if (__pyx_t_2) {
        } else {
          __pyx_t_3 = __pyx_t_2;
          goto __pyx_L28_bool_binop_done;
        }

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":601
 *                     if (self._gamma is None) or (self._kappa is None) or \
 *                             (self._parameters_based_on_spread and
 *                              self.volatility_diff_from_last_parameter_calculation(self.get_volatility()) >             # <<<<<<<<<<<<<<
 *                              self._volatility_sensibility):
 *                         self.c_recalculate_parameters()
 */
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_volatility_diff_from_last_parame); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 601, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_volatility); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 601, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_10 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_10, };
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 601, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __pyx_t_5 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 601, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":602
 *                             (self._parameters_based_on_spread and
 *                              self.volatility_diff_from_last_parameter_calculation(self.get_volatility()) >
 *                              self._volatility_sensibility):             # <<<<<<<<<<<<<<
 *                         self.c_recalculate_parameters()
 *                     self.c_calculate_reserved_price_and_optimal_spread()
 */
        __pyx_t_11 = PyObject_RichCompare(__pyx_t_1, __pyx_v_self->_volatility_sensibility, Py_GT); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 601, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":601
 *                     if (self._gamma is None) or (self._kappa is None) or \
 *                             (self._parameters_based_on_spread and
 *                              self.volatility_diff_from_last_parameter_calculation(self.get_volatility()) >             # <<<<<<<<<<<<<<
 *                              self._volatility_sensibility):
 *                         self.c_recalculate_parameters()
 */
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 601, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_3 = __pyx_t_2;
        __pyx_L28_bool_binop_done:;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":599
 *                     # Also, if volatility goes beyond the threshold specified, we consider volatility regime has changed
 *                     # so parameters need to be recalculated.
 *                     if (self._gamma is None) or (self._kappa is None) or \             # <<<<<<<<<<<<<<
 *                             (self._parameters_based_on_spread and
 *                              self.volatility_diff_from_last_parameter_calculation(self.get_volatility()) >
 */
        if (__pyx_t_3) {

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":603
 *                              self.volatility_diff_from_last_parameter_calculation(self.get_volatility()) >
 *                              self._volatility_sensibility):
 *                         self.c_recalculate_parameters()             # <<<<<<<<<<<<<<
 *                     self.c_calculate_reserved_price_and_optimal_spread()
 * 
 */
          __pyx_t_11 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_recalculate_parameters(__pyx_v_self); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 603, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":599
 *                     # Also, if volatility goes beyond the threshold specified, we consider volatility regime has changed
 *                     # so parameters need to be recalculated.
 *                     if (self._gamma is None) or (self._kappa is None) or \             # <<<<<<<<<<<<<<
 *                             (self._parameters_based_on_spread and
 *                              self.volatility_diff_from_last_parameter_calculation(self.get_volatility()) >
 */
        }

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":604
 *                              self._volatility_sensibility):
 *                         self.c_recalculate_parameters()
 *                     self.c_calculate_reserved_price_and_optimal_spread()             # <<<<<<<<<<<<<<
 * 
 *                     # 1. Create base order proposals
 */
        __pyx_t_11 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_reserved_price_and_optimal_spread(__pyx_v_self); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 604, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":607
 * 
 *                     # 1. Create base order proposals
 *                     proposal = self.c_create_base_proposal()             # <<<<<<<<<<<<<<
 *                     # 2. Apply functions that modify orders amount
 *                     self.c_apply_order_amount_eta_transformation(proposal)
 */
        __pyx_t_11 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_create_base_proposal(__pyx_v_self); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 607, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF_SET(__pyx_v_proposal, __pyx_t_11);
        __pyx_t_11 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":609
 *                     proposal = self.c_create_base_proposal()
 *                     # 2. Apply functions that modify orders amount
 *                     self.c_apply_order_amount_eta_transformation(proposal)             # <<<<<<<<<<<<<<
 *                     # 3. Apply functions that modify orders price
 *                     self.c_apply_order_price_modifiers(proposal)
 */
        __pyx_t_11 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_apply_order_amount_eta_transformation(__pyx_v_self, __pyx_v_proposal); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 609, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":611
 *                     self.c_apply_order_amount_eta_transformation(proposal)
 *                     # 3. Apply functions that modify orders price
 *                     self.c_apply_order_price_modifiers(proposal)             # <<<<<<<<<<<<<<
 *                     # 4. Apply budget constraint, i.e. can't buy/sell more than what you have.
 *                     self.c_apply_budget_constraint(proposal)
 */
        __pyx_t_11 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_apply_order_price_modifiers(__pyx_v_self, __pyx_v_proposal); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 611, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":613
 *                     self.c_apply_order_price_modifiers(proposal)
 *                     # 4. Apply budget constraint, i.e. can't buy/sell more than what you have.
 *                     self.c_apply_budget_constraint(proposal)             # <<<<<<<<<<<<<<
 * 
 *                 self._hanging_orders_tracker.process_tick()
 */
        __pyx_t_11 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_apply_budget_constraint(__pyx_v_self, __pyx_v_proposal); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 613, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":595
 *             if self.c_is_algorithm_ready():
 *                 proposal = None
 *                 if self._create_timestamp <= self._current_timestamp:             # <<<<<<<<<<<<<<
 *                     # If gamma or kappa are -1 then it's the first time they are calculated.
 *                     # Also, if volatility goes beyond the threshold specified, we consider volatility regime has changed
 */
      }

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":615
 *                     self.c_apply_budget_constraint(proposal)
 * 
 *                 self._hanging_orders_tracker.process_tick()             # <<<<<<<<<<<<<<
 *                 self.c_cancel_active_orders_on_max_age_limit()
 *                 self.c_cancel_active_orders(proposal)
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_hanging_orders_tracker, __pyx_n_s_process_tick); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 615, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_8 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_4, };
        __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 615, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":616
 * 
 *                 self._hanging_orders_tracker.process_tick()
 *                 self.c_cancel_active_orders_on_max_age_limit()             # <<<<<<<<<<<<<<
 *                 self.c_cancel_active_orders(proposal)
 * 
 */
      __pyx_t_11 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_cancel_active_orders_on_max_age_limit(__pyx_v_self); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 616, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":617
 *                 self._hanging_orders_tracker.process_tick()
 *                 self.c_cancel_active_orders_on_max_age_limit()
 *                 self.c_cancel_active_orders(proposal)             # <<<<<<<<<<<<<<
 * 
 *                 if self.c_to_create_orders(proposal):
 */
      __pyx_t_11 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_cancel_active_orders(__pyx_v_self, __pyx_v_proposal); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 617, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":619
 *                 self.c_cancel_active_orders(proposal)
 * 
 *                 if self.c_to_create_orders(proposal):             # <<<<<<<<<<<<<<
 *                     self.c_execute_orders_proposal(proposal)
 * 
 */
      __pyx_t_3 = (((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_to_create_orders(__pyx_v_self, __pyx_v_proposal) != 0);
      if (__pyx_t_3) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":620
 * 
 *                 if self.c_to_create_orders(proposal):
 *                     self.c_execute_orders_proposal(proposal)             # <<<<<<<<<<<<<<
 * 
 *                 if self._is_debug:
 */
        __pyx_t_11 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_execute_orders_proposal(__pyx_v_self, __pyx_v_proposal); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 620, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":619
 *                 self.c_cancel_active_orders(proposal)
 * 
 *                 if self.c_to_create_orders(proposal):             # <<<<<<<<<<<<<<
 *                     self.c_execute_orders_proposal(proposal)
 * 
 */
      }

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":622
 *                     self.c_execute_orders_proposal(proposal)
 * 
 *                 if self._is_debug:             # <<<<<<<<<<<<<<
 *                     self.dump_debug_variables()
 *             else:
 */
      __pyx_t_3 = (__pyx_v_self->_is_debug != 0);
      if (__pyx_t_3) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":623
 * 
 *                 if self._is_debug:
 *                     self.dump_debug_variables()             # <<<<<<<<<<<<<<
 *             else:
 *                 self._ticks_to_be_ready -= 1
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_dump_debug_variables); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_4, };
          __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 623, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":622
 *                     self.c_execute_orders_proposal(proposal)
 * 
 *                 if self._is_debug:             # <<<<<<<<<<<<<<
 *                     self.dump_debug_variables()
 *             else:
 */
      }

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":593
 * 
 *             self.c_collect_market_variables(timestamp)
 *             if self.c_is_algorithm_ready():             # <<<<<<<<<<<<<<
 *                 proposal = None
 *                 if self._create_timestamp <= self._current_timestamp:
 */
      goto __pyx_L25;
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":625
 *                     self.dump_debug_variables()
 *             else:
 *                 self._ticks_to_be_ready -= 1             # <<<<<<<<<<<<<<
 *                 if self._ticks_to_be_ready % 5 == 0:
 *                     self.logger().info(f"Calculating volatility... {self._ticks_to_be_ready} seconds to start trading")
 */
    /*else*/ {
      __pyx_v_self->_ticks_to_be_ready = (__pyx_v_self->_ticks_to_be_ready - 1);

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":626
 *             else:
 *                 self._ticks_to_be_ready -= 1
 *                 if self._ticks_to_be_ready % 5 == 0:             # <<<<<<<<<<<<<<
 *                     self.logger().info(f"Calculating volatility... {self._ticks_to_be_ready} seconds to start trading")
 *         finally:
 */
      __pyx_t_3 = ((__Pyx_mod_long(__pyx_v_self->_ticks_to_be_ready, 5) == 0) != 0);
      if (__pyx_t_3) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":627
 *                 self._ticks_to_be_ready -= 1
 *                 if self._ticks_to_be_ready % 5 == 0:
 *                     self.logger().info(f"Calculating volatility... {self._ticks_to_be_ready} seconds to start trading")             # <<<<<<<<<<<<<<
 *         finally:
 *             self._last_timestamp = timestamp
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 627, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_5, };
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 627, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 627, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 627, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = 0;
        __pyx_t_13 = 127;
        __Pyx_INCREF(__pyx_kp_u_Calculating_volatility);
        __pyx_t_6 += 26;
        __Pyx_GIVEREF(__pyx_kp_u_Calculating_volatility);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Calculating_volatility);
        __pyx_t_5 = __Pyx_PyUnicode_From_int(__pyx_v_self->_ticks_to_be_ready, 0, ' ', 'd'); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 627, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_5);
        __pyx_t_5 = 0;
        __Pyx_INCREF(__pyx_kp_u_seconds_to_start_trading);
        __pyx_t_6 += 25;
        __Pyx_GIVEREF(__pyx_kp_u_seconds_to_start_trading);
        PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_seconds_to_start_trading);
        __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_6, __pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 627, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_1)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_1);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_5};
          __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 627, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":626
 *             else:
 *                 self._ticks_to_be_ready -= 1
 *                 if self._ticks_to_be_ready % 5 == 0:             # <<<<<<<<<<<<<<
 *                     self.logger().info(f"Calculating volatility... {self._ticks_to_be_ready} seconds to start trading")
 *         finally:
 */
      }
    }
    __pyx_L25:;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":629
 *                     self.logger().info(f"Calculating volatility... {self._ticks_to_be_ready} seconds to start trading")
 *         finally:
 *             self._last_timestamp = timestamp             # <<<<<<<<<<<<<<
 * 
 *     cdef c_collect_market_variables(self, double timestamp):
 */
  /*finally:*/ {
    /*normal exit:*/{
      __pyx_v_self->_last_timestamp = __pyx_v_timestamp;
      goto __pyx_L7;
    }
    __pyx_L6_error:;
    /*exception exit:*/{
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
      if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17) < 0)) __Pyx_ErrFetch(&__pyx_t_15, &__pyx_t_16, &__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_t_17);
      __Pyx_XGOTREF(__pyx_t_18);
      __Pyx_XGOTREF(__pyx_t_19);
      __Pyx_XGOTREF(__pyx_t_20);
      __pyx_t_8 = __pyx_lineno; __pyx_t_9 = __pyx_clineno; __pyx_t_14 = __pyx_filename;
      {
        __pyx_v_self->_last_timestamp = __pyx_v_timestamp;
      }
      if (PY_MAJOR_VERSION >= 3) {
        __Pyx_XGIVEREF(__pyx_t_18);
        __Pyx_XGIVEREF(__pyx_t_19);
        __Pyx_XGIVEREF(__pyx_t_20);
        __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
      }
      __Pyx_XGIVEREF(__pyx_t_15);
      __Pyx_XGIVEREF(__pyx_t_16);
      __Pyx_XGIVEREF(__pyx_t_17);
      __Pyx_ErrRestore(__pyx_t_15, __pyx_t_16, __pyx_t_17);
      __pyx_t_15 = 0; __pyx_t_16 = 0; __pyx_t_17 = 0; __pyx_t_18 = 0; __pyx_t_19 = 0; __pyx_t_20 = 0;
      __pyx_lineno = __pyx_t_8; __pyx_clineno = __pyx_t_9; __pyx_filename = __pyx_t_14;
      goto __pyx_L1_error;
    }
    __pyx_L5_return: {
      __pyx_t_20 = __pyx_r;
      __pyx_r = 0;
      __pyx_v_self->_last_timestamp = __pyx_v_timestamp;
      __pyx_r = __pyx_t_20;
      __pyx_t_20 = 0;
      goto __pyx_L0;
    }
    __pyx_L7:;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":569
 *         StrategyBase.c_stop(self, clock)
 * 
 *     cdef c_tick(self, double timestamp):             # <<<<<<<<<<<<<<
 *         StrategyBase.c_tick(self, timestamp)
 *         cdef:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_tick", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_proposal);
  __Pyx_XDECREF(__pyx_8genexpr9__pyx_v_mkt);
  __Pyx_XDECREF(__pyx_9genexpr10__pyx_v_mkt);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":631
 *             self._last_timestamp = timestamp
 * 
 *     cdef c_collect_market_variables(self, double timestamp):             # <<<<<<<<<<<<<<
 *         market, trading_pair, base_asset, quote_asset = self._market_info
 *         self._last_sampling_timestamp = timestamp
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_collect_market_variables(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, double __pyx_v_timestamp) {
  PyObject *__pyx_v_market = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_trading_pair = NULL;
  PyObject *__pyx_v_base_asset = NULL;
  PyObject *__pyx_v_quote_asset = NULL;
  PyObject *__pyx_v_price = NULL;
  PyObject *__pyx_v_base_balance = NULL;
  PyObject *__pyx_v_quote_balance = NULL;
  PyObject *__pyx_v_inventory_in_base = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  long __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_collect_market_variables", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":632
 * 
 *     cdef c_collect_market_variables(self, double timestamp):
 *         market, trading_pair, base_asset, quote_asset = self._market_info             # <<<<<<<<<<<<<<
 *         self._last_sampling_timestamp = timestamp
 *         self._time_left = max(self._time_left - Decimal(timestamp - self._last_timestamp) * 1000, 0)
 */
  __pyx_t_1 = __pyx_v_self->_market_info;
  __Pyx_INCREF(__pyx_t_1);
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 4)) {
      if (size > 4) __Pyx_RaiseTooManyValuesError(4);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 632, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
      __pyx_t_4 = PyList_GET_ITEM(sequence, 2); 
      __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_5);
    #else
    {
      Py_ssize_t i;
      PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5};
      for (i=0; i < 4; i++) {
        PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) __PYX_ERR(0, 632, __pyx_L1_error)
        __Pyx_GOTREF(item);
        *(temps[i]) = item;
      }
    }
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    PyObject** temps[4] = {&__pyx_t_2,&__pyx_t_3,&__pyx_t_4,&__pyx_t_5};
    __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 632, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_6);
    for (index=0; index < 4; index++) {
      PyObject* item = __pyx_t_7(__pyx_t_6); if (unlikely(!item)) goto __pyx_L3_unpacking_failed;
      __Pyx_GOTREF(item);
      *(temps[index]) = item;
    }
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 4) < 0) __PYX_ERR(0, 632, __pyx_L1_error)
    __pyx_t_7 = NULL;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 632, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_market = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_trading_pair = __pyx_t_3;
  __pyx_t_3 = 0;
  __pyx_v_base_asset = __pyx_t_4;
  __pyx_t_4 = 0;
  __pyx_v_quote_asset = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":633
 *     cdef c_collect_market_variables(self, double timestamp):
 *         market, trading_pair, base_asset, quote_asset = self._market_info
 *         self._last_sampling_timestamp = timestamp             # <<<<<<<<<<<<<<
 *         self._time_left = max(self._time_left - Decimal(timestamp - self._last_timestamp) * 1000, 0)
 *         price = self.get_price()
 */
  __pyx_v_self->_last_sampling_timestamp = __pyx_v_timestamp;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":634
 *         market, trading_pair, base_asset, quote_asset = self._market_info
 *         self._last_sampling_timestamp = timestamp
 *         self._time_left = max(self._time_left - Decimal(timestamp - self._last_timestamp) * 1000, 0)             # <<<<<<<<<<<<<<
 *         price = self.get_price()
 *         self._avg_vol.add_sample(price)
 */
  __pyx_t_8 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_timestamp - __pyx_v_self->_last_timestamp)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_9 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = __Pyx_PyInt_MultiplyObjC(__pyx_t_1, __pyx_int_1000, 0x3E8, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_self->_time_left, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_4 = __Pyx_PyInt_From_long(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 634, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_10) {
    __pyx_t_3 = __Pyx_PyInt_From_long(__pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 634, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_5 = __pyx_t_1;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_t_5;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_time_left);
  __Pyx_DECREF(__pyx_v_self->_time_left);
  __pyx_v_self->_time_left = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":635
 *         self._last_sampling_timestamp = timestamp
 *         self._time_left = max(self._time_left - Decimal(timestamp - self._last_timestamp) * 1000, 0)
 *         price = self.get_price()             # <<<<<<<<<<<<<<
 *         self._avg_vol.add_sample(price)
 *         # Calculate adjustment factor to have 0.01% of inventory resolution
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_price); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 635, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_9 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 635, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_v_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":636
 *         self._time_left = max(self._time_left - Decimal(timestamp - self._last_timestamp) * 1000, 0)
 *         price = self.get_price()
 *         self._avg_vol.add_sample(price)             # <<<<<<<<<<<<<<
 *         # Calculate adjustment factor to have 0.01% of inventory resolution
 *         base_balance = market.get_balance(base_asset)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_avg_vol, __pyx_n_s_add_sample); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 636, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_9 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_price};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 636, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":638
 *         self._avg_vol.add_sample(price)
 *         # Calculate adjustment factor to have 0.01% of inventory resolution
 *         base_balance = market.get_balance(base_asset)             # <<<<<<<<<<<<<<
 *         quote_balance = market.get_balance(quote_asset)
 *         inventory_in_base = quote_balance / price + base_balance
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market, __pyx_n_s_get_balance); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 638, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_9 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_base_asset};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 638, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_v_base_balance = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":639
 *         # Calculate adjustment factor to have 0.01% of inventory resolution
 *         base_balance = market.get_balance(base_asset)
 *         quote_balance = market.get_balance(quote_asset)             # <<<<<<<<<<<<<<
 *         inventory_in_base = quote_balance / price + base_balance
 *         self._q_adjustment_factor = (Decimal("1e5") / inventory_in_base) if inventory_in_base else Decimal("1e5")
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market, __pyx_n_s_get_balance); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_9 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_quote_asset};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 639, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_v_quote_balance = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":640
 *         base_balance = market.get_balance(base_asset)
 *         quote_balance = market.get_balance(quote_asset)
 *         inventory_in_base = quote_balance / price + base_balance             # <<<<<<<<<<<<<<
 *         self._q_adjustment_factor = (Decimal("1e5") / inventory_in_base) if inventory_in_base else Decimal("1e5")
 *         if self._time_left == 0:
 */
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_quote_balance, __pyx_v_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_v_base_balance); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 640, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_inventory_in_base = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":641
 *         quote_balance = market.get_balance(quote_asset)
 *         inventory_in_base = quote_balance / price + base_balance
 *         self._q_adjustment_factor = (Decimal("1e5") / inventory_in_base) if inventory_in_base else Decimal("1e5")             # <<<<<<<<<<<<<<
 *         if self._time_left == 0:
 *             # Re-cycle algorithm
 */
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_v_inventory_in_base); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 641, __pyx_L1_error)
  if (__pyx_t_10) {
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_9 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_u_1e5};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_inventory_in_base); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_5 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_9 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_kp_u_1e5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_5 = __pyx_t_3;
    __pyx_t_3 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_5);
  __Pyx_GOTREF(__pyx_v_self->_q_adjustment_factor);
  __Pyx_DECREF(__pyx_v_self->_q_adjustment_factor);
  __pyx_v_self->_q_adjustment_factor = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":642
 *         inventory_in_base = quote_balance / price + base_balance
 *         self._q_adjustment_factor = (Decimal("1e5") / inventory_in_base) if inventory_in_base else Decimal("1e5")
 *         if self._time_left == 0:             # <<<<<<<<<<<<<<
 *             # Re-cycle algorithm
 *             self._time_left = self._closing_time
 */
  __pyx_t_5 = __Pyx_PyInt_EqObjC(__pyx_v_self->_time_left, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 642, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_10) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":644
 *         if self._time_left == 0:
 *             # Re-cycle algorithm
 *             self._time_left = self._closing_time             # <<<<<<<<<<<<<<
 *             if self._parameters_based_on_spread:
 *                 self.c_recalculate_parameters()
 */
    __pyx_t_5 = __pyx_v_self->_closing_time;
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_v_self->_time_left);
    __Pyx_DECREF(__pyx_v_self->_time_left);
    __pyx_v_self->_time_left = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":645
 *             # Re-cycle algorithm
 *             self._time_left = self._closing_time
 *             if self._parameters_based_on_spread:             # <<<<<<<<<<<<<<
 *                 self.c_recalculate_parameters()
 *             self.logger().info("Recycling algorithm time left and parameters if needed.")
 */
    __pyx_t_10 = (__pyx_v_self->_parameters_based_on_spread != 0);
    if (__pyx_t_10) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":646
 *             self._time_left = self._closing_time
 *             if self._parameters_based_on_spread:
 *                 self.c_recalculate_parameters()             # <<<<<<<<<<<<<<
 *             self.logger().info("Recycling algorithm time left and parameters if needed.")
 * 
 */
      __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_recalculate_parameters(__pyx_v_self); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 646, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":645
 *             # Re-cycle algorithm
 *             self._time_left = self._closing_time
 *             if self._parameters_based_on_spread:             # <<<<<<<<<<<<<<
 *                 self.c_recalculate_parameters()
 *             self.logger().info("Recycling algorithm time left and parameters if needed.")
 */
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":647
 *             if self._parameters_based_on_spread:
 *                 self.c_recalculate_parameters()
 *             self.logger().info("Recycling algorithm time left and parameters if needed.")             # <<<<<<<<<<<<<<
 * 
 *     def collect_market_variables(self, timestamp: float):
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_9 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_4, };
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_9, 0+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 647, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 647, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_9 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_u_Recycling_algorithm_time_left_an};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 647, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":642
 *         inventory_in_base = quote_balance / price + base_balance
 *         self._q_adjustment_factor = (Decimal("1e5") / inventory_in_base) if inventory_in_base else Decimal("1e5")
 *         if self._time_left == 0:             # <<<<<<<<<<<<<<
 *             # Re-cycle algorithm
 *             self._time_left = self._closing_time
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":631
 *             self._last_timestamp = timestamp
 * 
 *     cdef c_collect_market_variables(self, double timestamp):             # <<<<<<<<<<<<<<
 *         market, trading_pair, base_asset, quote_asset = self._market_info
 *         self._last_sampling_timestamp = timestamp
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_collect_market_variables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_trading_pair);
  __Pyx_XDECREF(__pyx_v_base_asset);
  __Pyx_XDECREF(__pyx_v_quote_asset);
  __Pyx_XDECREF(__pyx_v_price);
  __Pyx_XDECREF(__pyx_v_base_balance);
  __Pyx_XDECREF(__pyx_v_quote_balance);
  __Pyx_XDECREF(__pyx_v_inventory_in_base);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":649
 *             self.logger().info("Recycling algorithm time left and parameters if needed.")
 * 
 *     def collect_market_variables(self, timestamp: float):             # <<<<<<<<<<<<<<
 *         self.c_collect_market_variables(timestamp)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_27collect_market_variables(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_27collect_market_variables = {"collect_market_variables", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_27collect_market_variables, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_27collect_market_variables(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_timestamp;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("collect_market_variables (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timestamp,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timestamp,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_timestamp)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 649, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "collect_market_variables") < 0)) __PYX_ERR(0, 649, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_timestamp = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_timestamp == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 649, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("collect_market_variables", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 649, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.collect_market_variables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26collect_market_variables(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_timestamp);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26collect_market_variables(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, double __pyx_v_timestamp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("collect_market_variables", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":650
 * 
 *     def collect_market_variables(self, timestamp: float):
 *         self.c_collect_market_variables(timestamp)             # <<<<<<<<<<<<<<
 * 
 *     def volatility_diff_from_last_parameter_calculation(self, current_vol) -> Decimal:
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_collect_market_variables(__pyx_v_self, __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 650, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":649
 *             self.logger().info("Recycling algorithm time left and parameters if needed.")
 * 
 *     def collect_market_variables(self, timestamp: float):             # <<<<<<<<<<<<<<
 *         self.c_collect_market_variables(timestamp)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.collect_market_variables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":652
 *         self.c_collect_market_variables(timestamp)
 * 
 *     def volatility_diff_from_last_parameter_calculation(self, current_vol) -> Decimal:             # <<<<<<<<<<<<<<
 *         if self._latest_parameter_calculation_vol == 0:
 *             return s_decimal_zero
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_29volatility_diff_from_last_parameter_calculation(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_29volatility_diff_from_last_parameter_calculation = {"volatility_diff_from_last_parameter_calculation", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_29volatility_diff_from_last_parameter_calculation, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_29volatility_diff_from_last_parameter_calculation(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_current_vol = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("volatility_diff_from_last_parameter_calculation (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_current_vol,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_current_vol,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_current_vol)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 652, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "volatility_diff_from_last_parameter_calculation") < 0)) __PYX_ERR(0, 652, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_current_vol = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("volatility_diff_from_last_parameter_calculation", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 652, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.volatility_diff_from_last_parameter_calculation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_28volatility_diff_from_last_parameter_calculation(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_current_vol);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_28volatility_diff_from_last_parameter_calculation(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_current_vol) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("volatility_diff_from_last_parameter_calculation", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":653
 * 
 *     def volatility_diff_from_last_parameter_calculation(self, current_vol) -> Decimal:
 *         if self._latest_parameter_calculation_vol == 0:             # <<<<<<<<<<<<<<
 *             return s_decimal_zero
 *         return abs(self._latest_parameter_calculation_vol - Decimal(str(current_vol))) / self._latest_parameter_calculation_vol
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_self->_latest_parameter_calculation_vol, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 653, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":654
 *     def volatility_diff_from_last_parameter_calculation(self, current_vol) -> Decimal:
 *         if self._latest_parameter_calculation_vol == 0:
 *             return s_decimal_zero             # <<<<<<<<<<<<<<
 *         return abs(self._latest_parameter_calculation_vol - Decimal(str(current_vol))) / self._latest_parameter_calculation_vol
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 654, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":653
 * 
 *     def volatility_diff_from_last_parameter_calculation(self, current_vol) -> Decimal:
 *         if self._latest_parameter_calculation_vol == 0:             # <<<<<<<<<<<<<<
 *             return s_decimal_zero
 *         return abs(self._latest_parameter_calculation_vol - Decimal(str(current_vol))) / self._latest_parameter_calculation_vol
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":655
 *         if self._latest_parameter_calculation_vol == 0:
 *             return s_decimal_zero
 *         return abs(self._latest_parameter_calculation_vol - Decimal(str(current_vol))) / self._latest_parameter_calculation_vol             # <<<<<<<<<<<<<<
 * 
 *     cdef double c_get_spread(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Str(__pyx_v_current_vol); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 655, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyNumber_Subtract(__pyx_v_self->_latest_parameter_calculation_vol, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyNumber_Absolute(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_self->_latest_parameter_calculation_vol); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 655, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":652
 *         self.c_collect_market_variables(timestamp)
 * 
 *     def volatility_diff_from_last_parameter_calculation(self, current_vol) -> Decimal:             # <<<<<<<<<<<<<<
 *         if self._latest_parameter_calculation_vol == 0:
 *             return s_decimal_zero
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.volatility_diff_from_last_parameter_calculation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":657
 *         return abs(self._latest_parameter_calculation_vol - Decimal(str(current_vol))) / self._latest_parameter_calculation_vol
 * 
 *     cdef double c_get_spread(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

static double __pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_get_spread(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_market = 0;
  PyObject *__pyx_v_trading_pair = 0;
  double __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  double __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_spread", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":659
 *     cdef double c_get_spread(self):
 *         cdef:
 *             ExchangeBase market = self._market_info.market             # <<<<<<<<<<<<<<
 *             str trading_pair = self._market_info.trading_pair
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 659, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 659, __pyx_L1_error)
  __pyx_v_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":660
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 *             str trading_pair = self._market_info.trading_pair             # <<<<<<<<<<<<<<
 * 
 *         return market.c_get_price(trading_pair, True) - market.c_get_price(trading_pair, False)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 660, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 660, __pyx_L1_error)
  __pyx_v_trading_pair = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":662
 *             str trading_pair = self._market_info.trading_pair
 * 
 *         return market.c_get_price(trading_pair, True) - market.c_get_price(trading_pair, False)             # <<<<<<<<<<<<<<
 * 
 *     def get_spread(self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), __pyx_v_trading_pair, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), __pyx_v_trading_pair, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 662, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":657
 *         return abs(self._latest_parameter_calculation_vol - Decimal(str(current_vol))) / self._latest_parameter_calculation_vol
 * 
 *     cdef double c_get_spread(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_get_spread", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_trading_pair);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":664
 *         return market.c_get_price(trading_pair, True) - market.c_get_price(trading_pair, False)
 * 
 *     def get_spread(self):             # <<<<<<<<<<<<<<
 *         return self.c_get_spread()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_31get_spread(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_31get_spread = {"get_spread", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_31get_spread, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_31get_spread(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_spread (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_spread", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_spread", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_30get_spread(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_30get_spread(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_spread", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":665
 * 
 *     def get_spread(self):
 *         return self.c_get_spread()             # <<<<<<<<<<<<<<
 * 
 *     def get_volatility(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_spread(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 665, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":664
 *         return market.c_get_price(trading_pair, True) - market.c_get_price(trading_pair, False)
 * 
 *     def get_spread(self):             # <<<<<<<<<<<<<<
 *         return self.c_get_spread()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.get_spread", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":667
 *         return self.c_get_spread()
 * 
 *     def get_volatility(self):             # <<<<<<<<<<<<<<
 *         vol = Decimal(str(self._avg_vol.current_value))
 *         if vol == s_decimal_zero:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_33get_volatility(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_33get_volatility = {"get_volatility", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_33get_volatility, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_33get_volatility(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_volatility (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_volatility", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_volatility", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_32get_volatility(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_32get_volatility(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_v_vol = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_volatility", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":668
 * 
 *     def get_volatility(self):
 *         vol = Decimal(str(self._avg_vol.current_value))             # <<<<<<<<<<<<<<
 *         if vol == s_decimal_zero:
 *             if self._latest_parameter_calculation_vol != s_decimal_zero:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_avg_vol, __pyx_n_s_current_value); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Str(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 668, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 668, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_vol = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":669
 *     def get_volatility(self):
 *         vol = Decimal(str(self._avg_vol.current_value))
 *         if vol == s_decimal_zero:             # <<<<<<<<<<<<<<
 *             if self._latest_parameter_calculation_vol != s_decimal_zero:
 *                 vol = Decimal(str(self._latest_parameter_calculation_vol))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_vol, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 669, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":670
 *         vol = Decimal(str(self._avg_vol.current_value))
 *         if vol == s_decimal_zero:
 *             if self._latest_parameter_calculation_vol != s_decimal_zero:             # <<<<<<<<<<<<<<
 *                 vol = Decimal(str(self._latest_parameter_calculation_vol))
 *             else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_self->_latest_parameter_calculation_vol, __pyx_t_2, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 670, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":671
 *         if vol == s_decimal_zero:
 *             if self._latest_parameter_calculation_vol != s_decimal_zero:
 *                 vol = Decimal(str(self._latest_parameter_calculation_vol))             # <<<<<<<<<<<<<<
 *             else:
 *                 # Default value at start time if price has no activity
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 671, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = __Pyx_PyObject_Str(__pyx_v_self->_latest_parameter_calculation_vol); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 671, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_5 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_4};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 671, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF_SET(__pyx_v_vol, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":670
 *         vol = Decimal(str(self._avg_vol.current_value))
 *         if vol == s_decimal_zero:
 *             if self._latest_parameter_calculation_vol != s_decimal_zero:             # <<<<<<<<<<<<<<
 *                 vol = Decimal(str(self._latest_parameter_calculation_vol))
 *             else:
 */
      goto __pyx_L4;
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":674
 *             else:
 *                 # Default value at start time if price has no activity
 *                 vol = Decimal(str(self.c_get_spread() / 2))             # <<<<<<<<<<<<<<
 *         return vol
 * 
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 674, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyFloat_FromDouble((((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_spread(__pyx_v_self) / 2.0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 674, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_Str(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 674, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_5 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 674, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF_SET(__pyx_v_vol, __pyx_t_1);
      __pyx_t_1 = 0;
    }
    __pyx_L4:;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":669
 *     def get_volatility(self):
 *         vol = Decimal(str(self._avg_vol.current_value))
 *         if vol == s_decimal_zero:             # <<<<<<<<<<<<<<
 *             if self._latest_parameter_calculation_vol != s_decimal_zero:
 *                 vol = Decimal(str(self._latest_parameter_calculation_vol))
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":675
 *                 # Default value at start time if price has no activity
 *                 vol = Decimal(str(self.c_get_spread() / 2))
 *         return vol             # <<<<<<<<<<<<<<
 * 
 *     cdef c_calculate_reserved_price_and_optimal_spread(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_vol);
  __pyx_r = __pyx_v_vol;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":667
 *         return self.c_get_spread()
 * 
 *     def get_volatility(self):             # <<<<<<<<<<<<<<
 *         vol = Decimal(str(self._avg_vol.current_value))
 *         if vol == s_decimal_zero:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.get_volatility", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vol);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":677
 *         return vol
 * 
 *     cdef c_calculate_reserved_price_and_optimal_spread(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_calculate_reserved_price_and_optimal_spread(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_market = 0;
  PyObject *__pyx_v_time_left_fraction = NULL;
  PyObject *__pyx_v_price = NULL;
  PyObject *__pyx_v_q = NULL;
  PyObject *__pyx_v_vol = NULL;
  PyObject *__pyx_v_mid_price_variance = NULL;
  PyObject *__pyx_v_spread_inflation_due_to_volatility = NULL;
  PyObject *__pyx_v_min_limit_bid = NULL;
  PyObject *__pyx_v_max_limit_bid = NULL;
  PyObject *__pyx_v_min_limit_ask = NULL;
  PyObject *__pyx_v_max_limit_ask = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  Py_UCS4 __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_calculate_reserved_price_and_optimal_spread", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":679
 *     cdef c_calculate_reserved_price_and_optimal_spread(self):
 *         cdef:
 *             ExchangeBase market = self._market_info.market             # <<<<<<<<<<<<<<
 * 
 *         time_left_fraction = Decimal(str(self._time_left / self._closing_time))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 679, __pyx_L1_error)
  __pyx_v_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":681
 *             ExchangeBase market = self._market_info.market
 * 
 *         time_left_fraction = Decimal(str(self._time_left / self._closing_time))             # <<<<<<<<<<<<<<
 * 
 *         price = self.get_price()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_self->_time_left, __pyx_v_self->_closing_time); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Str(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 681, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_time_left_fraction = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":683
 *         time_left_fraction = Decimal(str(self._time_left / self._closing_time))
 * 
 *         price = self.get_price()             # <<<<<<<<<<<<<<
 *         q = (market.get_balance(self.base_asset) - Decimal(str(self.c_calculate_target_inventory()))) * self._q_adjustment_factor
 *         vol = self.get_volatility()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 683, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_4, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 683, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":684
 * 
 *         price = self.get_price()
 *         q = (market.get_balance(self.base_asset) - Decimal(str(self.c_calculate_target_inventory()))) * self._q_adjustment_factor             # <<<<<<<<<<<<<<
 *         vol = self.get_volatility()
 *         mid_price_variance = vol ** 2
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_market), __pyx_n_s_get_balance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base_asset); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 684, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_target_inventory(__pyx_v_self); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_Str(__pyx_t_3); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_6};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 684, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_4, __pyx_v_self->_q_adjustment_factor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_q = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":685
 *         price = self.get_price()
 *         q = (market.get_balance(self.base_asset) - Decimal(str(self.c_calculate_target_inventory()))) * self._q_adjustment_factor
 *         vol = self.get_volatility()             # <<<<<<<<<<<<<<
 *         mid_price_variance = vol ** 2
 * 
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_volatility); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_1, };
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 685, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_v_vol = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":686
 *         q = (market.get_balance(self.base_asset) - Decimal(str(self.c_calculate_target_inventory()))) * self._q_adjustment_factor
 *         vol = self.get_volatility()
 *         mid_price_variance = vol ** 2             # <<<<<<<<<<<<<<
 * 
 *         if all((q, self._gamma, self._kappa)):
 */
  __pyx_t_2 = PyNumber_Power(__pyx_v_vol, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 686, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_mid_price_variance = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":688
 *         mid_price_variance = vol ** 2
 * 
 *         if all((q, self._gamma, self._kappa)):             # <<<<<<<<<<<<<<
 *             self._reserved_price = price - (q * self._gamma * mid_price_variance * time_left_fraction)
 *             self._optimal_spread = self._gamma * mid_price_variance * time_left_fraction + 2 * Decimal(
 */
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_q);
  __Pyx_GIVEREF(__pyx_v_q);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_q);
  __Pyx_INCREF(__pyx_v_self->_gamma);
  __Pyx_GIVEREF(__pyx_v_self->_gamma);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_v_self->_gamma);
  __Pyx_INCREF(__pyx_v_self->_kappa);
  __Pyx_GIVEREF(__pyx_v_self->_kappa);
  PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_v_self->_kappa);
  __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_all, __pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 688, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_7) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":689
 * 
 *         if all((q, self._gamma, self._kappa)):
 *             self._reserved_price = price - (q * self._gamma * mid_price_variance * time_left_fraction)             # <<<<<<<<<<<<<<
 *             self._optimal_spread = self._gamma * mid_price_variance * time_left_fraction + 2 * Decimal(
 *                 1 + self._gamma / self._kappa).ln() / self._gamma
 */
    __pyx_t_4 = PyNumber_Multiply(__pyx_v_q, __pyx_v_self->_gamma); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_4, __pyx_v_mid_price_variance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_v_time_left_fraction); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Subtract(__pyx_v_price, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->_reserved_price);
    __Pyx_DECREF(__pyx_v_self->_reserved_price);
    __pyx_v_self->_reserved_price = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":690
 *         if all((q, self._gamma, self._kappa)):
 *             self._reserved_price = price - (q * self._gamma * mid_price_variance * time_left_fraction)
 *             self._optimal_spread = self._gamma * mid_price_variance * time_left_fraction + 2 * Decimal(             # <<<<<<<<<<<<<<
 *                 1 + self._gamma / self._kappa).ln() / self._gamma
 * 
 */
    __pyx_t_2 = PyNumber_Multiply(__pyx_v_self->_gamma, __pyx_v_mid_price_variance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 690, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = PyNumber_Multiply(__pyx_t_2, __pyx_v_time_left_fraction); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 690, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":691
 *             self._reserved_price = price - (q * self._gamma * mid_price_variance * time_left_fraction)
 *             self._optimal_spread = self._gamma * mid_price_variance * time_left_fraction + 2 * Decimal(
 *                 1 + self._gamma / self._kappa).ln() / self._gamma             # <<<<<<<<<<<<<<
 * 
 *             if self._parameters_based_on_spread:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 690, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_self->_gamma, __pyx_v_self->_kappa); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_t_3, 1, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_8};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 690, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ln); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_1, };
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 691, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":690
 *         if all((q, self._gamma, self._kappa)):
 *             self._reserved_price = price - (q * self._gamma * mid_price_variance * time_left_fraction)
 *             self._optimal_spread = self._gamma * mid_price_variance * time_left_fraction + 2 * Decimal(             # <<<<<<<<<<<<<<
 *                 1 + self._gamma / self._kappa).ln() / self._gamma
 * 
 */
    __pyx_t_6 = __Pyx_PyInt_MultiplyCObj(__pyx_int_2, __pyx_t_2, 2, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 690, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":691
 *             self._reserved_price = price - (q * self._gamma * mid_price_variance * time_left_fraction)
 *             self._optimal_spread = self._gamma * mid_price_variance * time_left_fraction + 2 * Decimal(
 *                 1 + self._gamma / self._kappa).ln() / self._gamma             # <<<<<<<<<<<<<<
 * 
 *             if self._parameters_based_on_spread:
 */
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_6, __pyx_v_self->_gamma); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 691, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":690
 *         if all((q, self._gamma, self._kappa)):
 *             self._reserved_price = price - (q * self._gamma * mid_price_variance * time_left_fraction)
 *             self._optimal_spread = self._gamma * mid_price_variance * time_left_fraction + 2 * Decimal(             # <<<<<<<<<<<<<<
 *                 1 + self._gamma / self._kappa).ln() / self._gamma
 * 
 */
    __pyx_t_6 = PyNumber_Add(__pyx_t_4, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 690, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GIVEREF(__pyx_t_6);
    __Pyx_GOTREF(__pyx_v_self->_optimal_spread);
    __Pyx_DECREF(__pyx_v_self->_optimal_spread);
    __pyx_v_self->_optimal_spread = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":693
 *                 1 + self._gamma / self._kappa).ln() / self._gamma
 * 
 *             if self._parameters_based_on_spread:             # <<<<<<<<<<<<<<
 *                 spread_inflation_due_to_volatility = max(self._vol_to_spread_multiplier * vol,
 *                                                          price * self._min_spread) / (price * self._min_spread)
 */
    __pyx_t_7 = (__pyx_v_self->_parameters_based_on_spread != 0);
    if (__pyx_t_7) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":695
 *             if self._parameters_based_on_spread:
 *                 spread_inflation_due_to_volatility = max(self._vol_to_spread_multiplier * vol,
 *                                                          price * self._min_spread) / (price * self._min_spread)             # <<<<<<<<<<<<<<
 *                 min_limit_bid = price * (1 - self._max_spread * spread_inflation_due_to_volatility)
 *                 max_limit_bid = price * (1 - self._min_spread * spread_inflation_due_to_volatility)
 */
      __pyx_t_6 = PyNumber_Multiply(__pyx_v_price, __pyx_v_self->_min_spread); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 695, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":694
 * 
 *             if self._parameters_based_on_spread:
 *                 spread_inflation_due_to_volatility = max(self._vol_to_spread_multiplier * vol,             # <<<<<<<<<<<<<<
 *                                                          price * self._min_spread) / (price * self._min_spread)
 *                 min_limit_bid = price * (1 - self._max_spread * spread_inflation_due_to_volatility)
 */
      __pyx_t_2 = PyNumber_Multiply(__pyx_v_self->_vol_to_spread_multiplier, __pyx_v_vol); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 694, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":695
 *             if self._parameters_based_on_spread:
 *                 spread_inflation_due_to_volatility = max(self._vol_to_spread_multiplier * vol,
 *                                                          price * self._min_spread) / (price * self._min_spread)             # <<<<<<<<<<<<<<
 *                 min_limit_bid = price * (1 - self._max_spread * spread_inflation_due_to_volatility)
 *                 max_limit_bid = price * (1 - self._min_spread * spread_inflation_due_to_volatility)
 */
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_6, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 695, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 695, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_7) {
        __Pyx_INCREF(__pyx_t_6);
        __pyx_t_4 = __pyx_t_6;
      } else {
        __Pyx_INCREF(__pyx_t_2);
        __pyx_t_4 = __pyx_t_2;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyNumber_Multiply(__pyx_v_price, __pyx_v_self->_min_spread); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 695, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 695, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_spread_inflation_due_to_volatility = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":696
 *                 spread_inflation_due_to_volatility = max(self._vol_to_spread_multiplier * vol,
 *                                                          price * self._min_spread) / (price * self._min_spread)
 *                 min_limit_bid = price * (1 - self._max_spread * spread_inflation_due_to_volatility)             # <<<<<<<<<<<<<<
 *                 max_limit_bid = price * (1 - self._min_spread * spread_inflation_due_to_volatility)
 *                 min_limit_ask = price * (1 + self._min_spread * spread_inflation_due_to_volatility)
 */
      __pyx_t_2 = PyNumber_Multiply(__pyx_v_self->_max_spread, __pyx_v_spread_inflation_due_to_volatility); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 696, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_2, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 696, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Multiply(__pyx_v_price, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 696, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_min_limit_bid = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":697
 *                                                          price * self._min_spread) / (price * self._min_spread)
 *                 min_limit_bid = price * (1 - self._max_spread * spread_inflation_due_to_volatility)
 *                 max_limit_bid = price * (1 - self._min_spread * spread_inflation_due_to_volatility)             # <<<<<<<<<<<<<<
 *                 min_limit_ask = price * (1 + self._min_spread * spread_inflation_due_to_volatility)
 *                 max_limit_ask = price * (1 + self._max_spread * spread_inflation_due_to_volatility)
 */
      __pyx_t_2 = PyNumber_Multiply(__pyx_v_self->_min_spread, __pyx_v_spread_inflation_due_to_volatility); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 697, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyInt_SubtractCObj(__pyx_int_1, __pyx_t_2, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 697, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Multiply(__pyx_v_price, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 697, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_max_limit_bid = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":698
 *                 min_limit_bid = price * (1 - self._max_spread * spread_inflation_due_to_volatility)
 *                 max_limit_bid = price * (1 - self._min_spread * spread_inflation_due_to_volatility)
 *                 min_limit_ask = price * (1 + self._min_spread * spread_inflation_due_to_volatility)             # <<<<<<<<<<<<<<
 *                 max_limit_ask = price * (1 + self._max_spread * spread_inflation_due_to_volatility)
 *             else:
 */
      __pyx_t_2 = PyNumber_Multiply(__pyx_v_self->_min_spread, __pyx_v_spread_inflation_due_to_volatility); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 698, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_t_2, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 698, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Multiply(__pyx_v_price, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 698, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_min_limit_ask = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":699
 *                 max_limit_bid = price * (1 - self._min_spread * spread_inflation_due_to_volatility)
 *                 min_limit_ask = price * (1 + self._min_spread * spread_inflation_due_to_volatility)
 *                 max_limit_ask = price * (1 + self._max_spread * spread_inflation_due_to_volatility)             # <<<<<<<<<<<<<<
 *             else:
 *                 min_limit_bid = s_decimal_zero
 */
      __pyx_t_2 = PyNumber_Multiply(__pyx_v_self->_max_spread, __pyx_v_spread_inflation_due_to_volatility); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_6 = __Pyx_PyInt_AddCObj(__pyx_int_1, __pyx_t_2, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Multiply(__pyx_v_price, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 699, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_max_limit_ask = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":693
 *                 1 + self._gamma / self._kappa).ln() / self._gamma
 * 
 *             if self._parameters_based_on_spread:             # <<<<<<<<<<<<<<
 *                 spread_inflation_due_to_volatility = max(self._vol_to_spread_multiplier * vol,
 *                                                          price * self._min_spread) / (price * self._min_spread)
 */
      goto __pyx_L4;
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":701
 *                 max_limit_ask = price * (1 + self._max_spread * spread_inflation_due_to_volatility)
 *             else:
 *                 min_limit_bid = s_decimal_zero             # <<<<<<<<<<<<<<
 *                 max_limit_bid = min_limit_ask = price
 *                 max_limit_ask = Decimal("Inf")
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 701, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_v_min_limit_bid = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":702
 *             else:
 *                 min_limit_bid = s_decimal_zero
 *                 max_limit_bid = min_limit_ask = price             # <<<<<<<<<<<<<<
 *                 max_limit_ask = Decimal("Inf")
 * 
 */
      __Pyx_INCREF(__pyx_v_price);
      __pyx_v_max_limit_bid = __pyx_v_price;
      __Pyx_INCREF(__pyx_v_price);
      __pyx_v_min_limit_ask = __pyx_v_price;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":703
 *                 min_limit_bid = s_decimal_zero
 *                 max_limit_bid = min_limit_ask = price
 *                 max_limit_ask = Decimal("Inf")             # <<<<<<<<<<<<<<
 * 
 *             self._optimal_ask = min(max(self._reserved_price + self._optimal_spread / 2,
 */
      __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 703, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_5 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_n_u_Inf};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 703, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_v_max_limit_ask = __pyx_t_2;
      __pyx_t_2 = 0;
    }
    __pyx_L4:;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":707
 *             self._optimal_ask = min(max(self._reserved_price + self._optimal_spread / 2,
 *                                         min_limit_ask),
 *                                     max_limit_ask)             # <<<<<<<<<<<<<<
 *             self._optimal_bid = min(max(self._reserved_price - self._optimal_spread / 2,
 *                                         min_limit_bid),
 */
    __Pyx_INCREF(__pyx_v_max_limit_ask);
    __pyx_t_2 = __pyx_v_max_limit_ask;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":706
 * 
 *             self._optimal_ask = min(max(self._reserved_price + self._optimal_spread / 2,
 *                                         min_limit_ask),             # <<<<<<<<<<<<<<
 *                                     max_limit_ask)
 *             self._optimal_bid = min(max(self._reserved_price - self._optimal_spread / 2,
 */
    __Pyx_INCREF(__pyx_v_min_limit_ask);
    __pyx_t_6 = __pyx_v_min_limit_ask;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":705
 *                 max_limit_ask = Decimal("Inf")
 * 
 *             self._optimal_ask = min(max(self._reserved_price + self._optimal_spread / 2,             # <<<<<<<<<<<<<<
 *                                         min_limit_ask),
 *                                     max_limit_ask)
 */
    __pyx_t_4 = __Pyx_PyInt_TrueDivideObjC(__pyx_v_self->_optimal_spread, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 705, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = PyNumber_Add(__pyx_v_self->_reserved_price, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 705, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":706
 * 
 *             self._optimal_ask = min(max(self._reserved_price + self._optimal_spread / 2,
 *                                         min_limit_ask),             # <<<<<<<<<<<<<<
 *                                     max_limit_ask)
 *             self._optimal_bid = min(max(self._reserved_price - self._optimal_spread / 2,
 */
    __pyx_t_8 = PyObject_RichCompare(__pyx_t_6, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 706, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 706, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_7) {
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_4 = __pyx_t_6;
    } else {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_4 = __pyx_t_1;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_6 = __pyx_t_4;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":707
 *             self._optimal_ask = min(max(self._reserved_price + self._optimal_spread / 2,
 *                                         min_limit_ask),
 *                                     max_limit_ask)             # <<<<<<<<<<<<<<
 *             self._optimal_bid = min(max(self._reserved_price - self._optimal_spread / 2,
 *                                         min_limit_bid),
 */
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_6, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 707, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 707, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_7) {
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_4 = __pyx_t_2;
    } else {
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_4 = __pyx_t_6;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __pyx_t_4;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":705
 *                 max_limit_ask = Decimal("Inf")
 * 
 *             self._optimal_ask = min(max(self._reserved_price + self._optimal_spread / 2,             # <<<<<<<<<<<<<<
 *                                         min_limit_ask),
 *                                     max_limit_ask)
 */
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->_optimal_ask);
    __Pyx_DECREF(__pyx_v_self->_optimal_ask);
    __pyx_v_self->_optimal_ask = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":710
 *             self._optimal_bid = min(max(self._reserved_price - self._optimal_spread / 2,
 *                                         min_limit_bid),
 *                                     max_limit_bid)             # <<<<<<<<<<<<<<
 *             # This is not what the algorithm will use as proposed bid and ask. This is just the raw output.
 *             # Optimal bid and optimal ask prices will be used
 */
    __Pyx_INCREF(__pyx_v_max_limit_bid);
    __pyx_t_2 = __pyx_v_max_limit_bid;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":709
 *                                     max_limit_ask)
 *             self._optimal_bid = min(max(self._reserved_price - self._optimal_spread / 2,
 *                                         min_limit_bid),             # <<<<<<<<<<<<<<
 *                                     max_limit_bid)
 *             # This is not what the algorithm will use as proposed bid and ask. This is just the raw output.
 */
    __Pyx_INCREF(__pyx_v_min_limit_bid);
    __pyx_t_4 = __pyx_v_min_limit_bid;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":708
 *                                         min_limit_ask),
 *                                     max_limit_ask)
 *             self._optimal_bid = min(max(self._reserved_price - self._optimal_spread / 2,             # <<<<<<<<<<<<<<
 *                                         min_limit_bid),
 *                                     max_limit_bid)
 */
    __pyx_t_6 = __Pyx_PyInt_TrueDivideObjC(__pyx_v_self->_optimal_spread, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyNumber_Subtract(__pyx_v_self->_reserved_price, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 708, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":709
 *                                     max_limit_ask)
 *             self._optimal_bid = min(max(self._reserved_price - self._optimal_spread / 2,
 *                                         min_limit_bid),             # <<<<<<<<<<<<<<
 *                                     max_limit_bid)
 *             # This is not what the algorithm will use as proposed bid and ask. This is just the raw output.
 */
    __pyx_t_8 = PyObject_RichCompare(__pyx_t_4, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 709, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 709, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (__pyx_t_7) {
      __Pyx_INCREF(__pyx_t_4);
      __pyx_t_6 = __pyx_t_4;
    } else {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_6 = __pyx_t_1;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_INCREF(__pyx_t_6);
    __pyx_t_4 = __pyx_t_6;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":710
 *             self._optimal_bid = min(max(self._reserved_price - self._optimal_spread / 2,
 *                                         min_limit_bid),
 *                                     max_limit_bid)             # <<<<<<<<<<<<<<
 *             # This is not what the algorithm will use as proposed bid and ask. This is just the raw output.
 *             # Optimal bid and optimal ask prices will be used
 */
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_2, __pyx_t_4, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 710, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 710, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_7) {
      __Pyx_INCREF(__pyx_t_2);
      __pyx_t_6 = __pyx_t_2;
    } else {
      __Pyx_INCREF(__pyx_t_4);
      __pyx_t_6 = __pyx_t_4;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __pyx_t_6;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":708
 *                                         min_limit_ask),
 *                                     max_limit_ask)
 *             self._optimal_bid = min(max(self._reserved_price - self._optimal_spread / 2,             # <<<<<<<<<<<<<<
 *                                         min_limit_bid),
 *                                     max_limit_bid)
 */
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->_optimal_bid);
    __Pyx_DECREF(__pyx_v_self->_optimal_bid);
    __pyx_v_self->_optimal_bid = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":713
 *             # This is not what the algorithm will use as proposed bid and ask. This is just the raw output.
 *             # Optimal bid and optimal ask prices will be used
 *             if self._is_debug:             # <<<<<<<<<<<<<<
 *                 self.logger().info(f"bid={(price-(self._reserved_price - self._optimal_spread / 2)) / price * 100:.4f}% | "
 *                                    f"ask={((self._reserved_price + self._optimal_spread / 2) - price) / price * 100:.4f}% | "
 */
    __pyx_t_7 = (__pyx_v_self->_is_debug != 0);
    if (__pyx_t_7) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":714
 *             # Optimal bid and optimal ask prices will be used
 *             if self._is_debug:
 *                 self.logger().info(f"bid={(price-(self._reserved_price - self._optimal_spread / 2)) / price * 100:.4f}% | "             # <<<<<<<<<<<<<<
 *                                    f"ask={((self._reserved_price + self._optimal_spread / 2) - price) / price * 100:.4f}% | "
 *                                    f"q={q/self._q_adjustment_factor:.4f} | "
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 714, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_1)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_1);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_5 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_1, };
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 714, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 714, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 714, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = 0;
      __pyx_t_10 = 127;
      __Pyx_INCREF(__pyx_kp_u_bid);
      __pyx_t_9 += 4;
      __Pyx_GIVEREF(__pyx_kp_u_bid);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_kp_u_bid);
      __pyx_t_1 = __Pyx_PyInt_TrueDivideObjC(__pyx_v_self->_optimal_spread, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 714, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = PyNumber_Subtract(__pyx_v_self->_reserved_price, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 714, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Subtract(__pyx_v_price, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 714, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_price); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 714, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyInt_MultiplyObjC(__pyx_t_8, __pyx_int_100, 0x64, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 714, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Format(__pyx_t_1, __pyx_kp_u_4f); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 714, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_INCREF(__pyx_kp_u_ask);
      __pyx_t_9 += 8;
      __Pyx_GIVEREF(__pyx_kp_u_ask);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_kp_u_ask);

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":715
 *             if self._is_debug:
 *                 self.logger().info(f"bid={(price-(self._reserved_price - self._optimal_spread / 2)) / price * 100:.4f}% | "
 *                                    f"ask={((self._reserved_price + self._optimal_spread / 2) - price) / price * 100:.4f}% | "             # <<<<<<<<<<<<<<
 *                                    f"q={q/self._q_adjustment_factor:.4f} | "
 *                                    f"vol={vol:.4f}")
 */
      __pyx_t_8 = __Pyx_PyInt_TrueDivideObjC(__pyx_v_self->_optimal_spread, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 715, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = PyNumber_Add(__pyx_v_self->_reserved_price, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 715, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Subtract(__pyx_t_1, __pyx_v_price); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 715, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_8, __pyx_v_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 715, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyInt_MultiplyObjC(__pyx_t_1, __pyx_int_100, 0x64, 0, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 715, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_Format(__pyx_t_8, __pyx_kp_u_4f); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 715, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_INCREF(__pyx_kp_u_q);
      __pyx_t_9 += 6;
      __Pyx_GIVEREF(__pyx_kp_u_q);
      PyTuple_SET_ITEM(__pyx_t_6, 4, __pyx_kp_u_q);

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":716
 *                 self.logger().info(f"bid={(price-(self._reserved_price - self._optimal_spread / 2)) / price * 100:.4f}% | "
 *                                    f"ask={((self._reserved_price + self._optimal_spread / 2) - price) / price * 100:.4f}% | "
 *                                    f"q={q/self._q_adjustment_factor:.4f} | "             # <<<<<<<<<<<<<<
 *                                    f"vol={vol:.4f}")
 * 
 */
      __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_q, __pyx_v_self->_q_adjustment_factor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 716, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = __Pyx_PyObject_Format(__pyx_t_1, __pyx_kp_u_4f); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 716, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_6, 5, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_INCREF(__pyx_kp_u_vol);
      __pyx_t_9 += 7;
      __Pyx_GIVEREF(__pyx_kp_u_vol);
      PyTuple_SET_ITEM(__pyx_t_6, 6, __pyx_kp_u_vol);

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":717
 *                                    f"ask={((self._reserved_price + self._optimal_spread / 2) - price) / price * 100:.4f}% | "
 *                                    f"q={q/self._q_adjustment_factor:.4f} | "
 *                                    f"vol={vol:.4f}")             # <<<<<<<<<<<<<<
 * 
 *     def calculate_reserved_price_and_optimal_spread(self):
 */
      __pyx_t_8 = __Pyx_PyObject_Format(__pyx_v_vol, __pyx_kp_u_4f); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 717, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_10) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_10;
      __pyx_t_9 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_6, 7, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":714
 *             # Optimal bid and optimal ask prices will be used
 *             if self._is_debug:
 *                 self.logger().info(f"bid={(price-(self._reserved_price - self._optimal_spread / 2)) / price * 100:.4f}% | "             # <<<<<<<<<<<<<<
 *                                    f"ask={((self._reserved_price + self._optimal_spread / 2) - price) / price * 100:.4f}% | "
 *                                    f"q={q/self._q_adjustment_factor:.4f} | "
 */
      __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_6, 8, __pyx_t_9, __pyx_t_10); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 714, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
          __pyx_t_5 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_8};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 714, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":713
 *             # This is not what the algorithm will use as proposed bid and ask. This is just the raw output.
 *             # Optimal bid and optimal ask prices will be used
 *             if self._is_debug:             # <<<<<<<<<<<<<<
 *                 self.logger().info(f"bid={(price-(self._reserved_price - self._optimal_spread / 2)) / price * 100:.4f}% | "
 *                                    f"ask={((self._reserved_price + self._optimal_spread / 2) - price) / price * 100:.4f}% | "
 */
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":688
 *         mid_price_variance = vol ** 2
 * 
 *         if all((q, self._gamma, self._kappa)):             # <<<<<<<<<<<<<<
 *             self._reserved_price = price - (q * self._gamma * mid_price_variance * time_left_fraction)
 *             self._optimal_spread = self._gamma * mid_price_variance * time_left_fraction + 2 * Decimal(
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":677
 *         return vol
 * 
 *     cdef c_calculate_reserved_price_and_optimal_spread(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_calculate_reserved_price_and_optimal_spread", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_time_left_fraction);
  __Pyx_XDECREF(__pyx_v_price);
  __Pyx_XDECREF(__pyx_v_q);
  __Pyx_XDECREF(__pyx_v_vol);
  __Pyx_XDECREF(__pyx_v_mid_price_variance);
  __Pyx_XDECREF(__pyx_v_spread_inflation_due_to_volatility);
  __Pyx_XDECREF(__pyx_v_min_limit_bid);
  __Pyx_XDECREF(__pyx_v_max_limit_bid);
  __Pyx_XDECREF(__pyx_v_min_limit_ask);
  __Pyx_XDECREF(__pyx_v_max_limit_ask);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":719
 *                                    f"vol={vol:.4f}")
 * 
 *     def calculate_reserved_price_and_optimal_spread(self):             # <<<<<<<<<<<<<<
 *         return self.c_calculate_reserved_price_and_optimal_spread()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_35calculate_reserved_price_and_optimal_spread(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_35calculate_reserved_price_and_optimal_spread = {"calculate_reserved_price_and_optimal_spread", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_35calculate_reserved_price_and_optimal_spread, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_35calculate_reserved_price_and_optimal_spread(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate_reserved_price_and_optimal_spread (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("calculate_reserved_price_and_optimal_spread", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "calculate_reserved_price_and_optimal_spread", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_34calculate_reserved_price_and_optimal_spread(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_34calculate_reserved_price_and_optimal_spread(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate_reserved_price_and_optimal_spread", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":720
 * 
 *     def calculate_reserved_price_and_optimal_spread(self):
 *         return self.c_calculate_reserved_price_and_optimal_spread()             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_calculate_target_inventory(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_reserved_price_and_optimal_spread(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":719
 *                                    f"vol={vol:.4f}")
 * 
 *     def calculate_reserved_price_and_optimal_spread(self):             # <<<<<<<<<<<<<<
 *         return self.c_calculate_reserved_price_and_optimal_spread()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.calculate_reserved_price_and_optimal_spread", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":722
 *         return self.c_calculate_reserved_price_and_optimal_spread()
 * 
 *     cdef object c_calculate_target_inventory(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_calculate_target_inventory(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_market = 0;
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_base_asset = 0;
  PyObject *__pyx_v_quote_asset = 0;
  PyObject *__pyx_v_base_value = 0;
  PyObject *__pyx_v_inventory_value = 0;
  PyObject *__pyx_v_target_inventory_value = 0;
  PyObject *__pyx_v_price = NULL;
  PyObject *__pyx_v_base_asset_amount = NULL;
  PyObject *__pyx_v_quote_asset_amount = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_calculate_target_inventory", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":724
 *     cdef object c_calculate_target_inventory(self):
 *         cdef:
 *             ExchangeBase market = self._market_info.market             # <<<<<<<<<<<<<<
 *             str trading_pair = self._market_info.trading_pair
 *             str base_asset = self._market_info.base_asset
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 724, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 724, __pyx_L1_error)
  __pyx_v_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":725
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 *             str trading_pair = self._market_info.trading_pair             # <<<<<<<<<<<<<<
 *             str base_asset = self._market_info.base_asset
 *             str quote_asset = self._market_info.quote_asset
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 725, __pyx_L1_error)
  __pyx_v_trading_pair = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":726
 *             ExchangeBase market = self._market_info.market
 *             str trading_pair = self._market_info.trading_pair
 *             str base_asset = self._market_info.base_asset             # <<<<<<<<<<<<<<
 *             str quote_asset = self._market_info.quote_asset
 *             object mid_price
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 726, __pyx_L1_error)
  __pyx_v_base_asset = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":727
 *             str trading_pair = self._market_info.trading_pair
 *             str base_asset = self._market_info.base_asset
 *             str quote_asset = self._market_info.quote_asset             # <<<<<<<<<<<<<<
 *             object mid_price
 *             object base_value
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 727, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 727, __pyx_L1_error)
  __pyx_v_quote_asset = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":733
 *             object target_inventory_value
 * 
 *         price = self.get_price()             # <<<<<<<<<<<<<<
 *         base_asset_amount = market.get_balance(base_asset)
 *         quote_asset_amount = market.get_balance(quote_asset)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":734
 * 
 *         price = self.get_price()
 *         base_asset_amount = market.get_balance(base_asset)             # <<<<<<<<<<<<<<
 *         quote_asset_amount = market.get_balance(quote_asset)
 *         base_value = base_asset_amount * price
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_market), __pyx_n_s_get_balance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 734, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_base_asset};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 734, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_base_asset_amount = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":735
 *         price = self.get_price()
 *         base_asset_amount = market.get_balance(base_asset)
 *         quote_asset_amount = market.get_balance(quote_asset)             # <<<<<<<<<<<<<<
 *         base_value = base_asset_amount * price
 *         inventory_value = base_value + quote_asset_amount
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_market), __pyx_n_s_get_balance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_quote_asset};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_quote_asset_amount = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":736
 *         base_asset_amount = market.get_balance(base_asset)
 *         quote_asset_amount = market.get_balance(quote_asset)
 *         base_value = base_asset_amount * price             # <<<<<<<<<<<<<<
 *         inventory_value = base_value + quote_asset_amount
 *         target_inventory_value = inventory_value * self._inventory_target_base_pct
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_base_asset_amount, __pyx_v_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 736, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_base_value = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":737
 *         quote_asset_amount = market.get_balance(quote_asset)
 *         base_value = base_asset_amount * price
 *         inventory_value = base_value + quote_asset_amount             # <<<<<<<<<<<<<<
 *         target_inventory_value = inventory_value * self._inventory_target_base_pct
 *         return market.c_quantize_order_amount(trading_pair, Decimal(str(target_inventory_value / price)))
 */
  __pyx_t_1 = PyNumber_Add(__pyx_v_base_value, __pyx_v_quote_asset_amount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 737, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_inventory_value = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":738
 *         base_value = base_asset_amount * price
 *         inventory_value = base_value + quote_asset_amount
 *         target_inventory_value = inventory_value * self._inventory_target_base_pct             # <<<<<<<<<<<<<<
 *         return market.c_quantize_order_amount(trading_pair, Decimal(str(target_inventory_value / price)))
 * 
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_inventory_value, __pyx_v_self->_inventory_target_base_pct); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_target_inventory_value = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":739
 *         inventory_value = base_value + quote_asset_amount
 *         target_inventory_value = inventory_value * self._inventory_target_base_pct
 *         return market.c_quantize_order_amount(trading_pair, Decimal(str(target_inventory_value / price)))             # <<<<<<<<<<<<<<
 * 
 *     def calculate_target_inventory(self) -> Decimal:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_target_inventory_value, __pyx_v_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_Str(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 739, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), __pyx_v_trading_pair, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 739, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":722
 *         return self.c_calculate_reserved_price_and_optimal_spread()
 * 
 *     cdef object c_calculate_target_inventory(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_calculate_target_inventory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_trading_pair);
  __Pyx_XDECREF(__pyx_v_base_asset);
  __Pyx_XDECREF(__pyx_v_quote_asset);
  __Pyx_XDECREF(__pyx_v_base_value);
  __Pyx_XDECREF(__pyx_v_inventory_value);
  __Pyx_XDECREF(__pyx_v_target_inventory_value);
  __Pyx_XDECREF(__pyx_v_price);
  __Pyx_XDECREF(__pyx_v_base_asset_amount);
  __Pyx_XDECREF(__pyx_v_quote_asset_amount);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":741
 *         return market.c_quantize_order_amount(trading_pair, Decimal(str(target_inventory_value / price)))
 * 
 *     def calculate_target_inventory(self) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_calculate_target_inventory()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_37calculate_target_inventory(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_37calculate_target_inventory = {"calculate_target_inventory", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_37calculate_target_inventory, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_37calculate_target_inventory(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("calculate_target_inventory (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("calculate_target_inventory", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "calculate_target_inventory", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_36calculate_target_inventory(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_36calculate_target_inventory(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("calculate_target_inventory", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":742
 * 
 *     def calculate_target_inventory(self) -> Decimal:
 *         return self.c_calculate_target_inventory()             # <<<<<<<<<<<<<<
 * 
 *     def _get_min_and_max_spread(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_target_inventory(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 742, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":741
 *         return market.c_quantize_order_amount(trading_pair, Decimal(str(target_inventory_value / price)))
 * 
 *     def calculate_target_inventory(self) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_calculate_target_inventory()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.calculate_target_inventory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":744
 *         return self.c_calculate_target_inventory()
 * 
 *     def _get_min_and_max_spread(self):             # <<<<<<<<<<<<<<
 *         vol = self.get_volatility()
 *         price = self.get_price()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_39_get_min_and_max_spread(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_39_get_min_and_max_spread = {"_get_min_and_max_spread", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_39_get_min_and_max_spread, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_39_get_min_and_max_spread(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_min_and_max_spread (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_get_min_and_max_spread", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_get_min_and_max_spread", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_38_get_min_and_max_spread(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_38_get_min_and_max_spread(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_v_vol = NULL;
  PyObject *__pyx_v_price = NULL;
  PyObject *__pyx_v_min_spread = NULL;
  PyObject *__pyx_v_max_spread = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_min_and_max_spread", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":745
 * 
 *     def _get_min_and_max_spread(self):
 *         vol = self.get_volatility()             # <<<<<<<<<<<<<<
 *         price = self.get_price()
 *         # min_spread will be the expected, unless volatility times the multiplier exceeds it
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_volatility); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_vol = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":746
 *     def _get_min_and_max_spread(self):
 *         vol = self.get_volatility()
 *         price = self.get_price()             # <<<<<<<<<<<<<<
 *         # min_spread will be the expected, unless volatility times the multiplier exceeds it
 *         min_spread = max(self._min_spread * price, self._vol_to_spread_multiplier * vol)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 746, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 746, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":748
 *         price = self.get_price()
 *         # min_spread will be the expected, unless volatility times the multiplier exceeds it
 *         min_spread = max(self._min_spread * price, self._vol_to_spread_multiplier * vol)             # <<<<<<<<<<<<<<
 *         # If min_spread got inflated due to the multiplier, we apply the same inflation to max_spread
 *         max_spread = (self._max_spread * price) * (min_spread / (self._min_spread * price))
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_self->_vol_to_spread_multiplier, __pyx_v_vol); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Multiply(__pyx_v_self->_min_spread, __pyx_v_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 748, __pyx_L1_error)
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_6) {
    __Pyx_INCREF(__pyx_t_1);
    __pyx_t_3 = __pyx_t_1;
  } else {
    __Pyx_INCREF(__pyx_t_2);
    __pyx_t_3 = __pyx_t_2;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __pyx_t_3;
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_min_spread = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":750
 *         min_spread = max(self._min_spread * price, self._vol_to_spread_multiplier * vol)
 *         # If min_spread got inflated due to the multiplier, we apply the same inflation to max_spread
 *         max_spread = (self._max_spread * price) * (min_spread / (self._min_spread * price))             # <<<<<<<<<<<<<<
 *         return min_spread, max_spread
 * 
 */
  __pyx_t_1 = PyNumber_Multiply(__pyx_v_self->_max_spread, __pyx_v_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyNumber_Multiply(__pyx_v_self->_min_spread, __pyx_v_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_min_spread, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Multiply(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_max_spread = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":751
 *         # If min_spread got inflated due to the multiplier, we apply the same inflation to max_spread
 *         max_spread = (self._max_spread * price) * (min_spread / (self._min_spread * price))
 *         return min_spread, max_spread             # <<<<<<<<<<<<<<
 * 
 *     cdef c_recalculate_parameters(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 751, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_v_min_spread);
  __Pyx_GIVEREF(__pyx_v_min_spread);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_min_spread);
  __Pyx_INCREF(__pyx_v_max_spread);
  __Pyx_GIVEREF(__pyx_v_max_spread);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_max_spread);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":744
 *         return self.c_calculate_target_inventory()
 * 
 *     def _get_min_and_max_spread(self):             # <<<<<<<<<<<<<<
 *         vol = self.get_volatility()
 *         price = self.get_price()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy._get_min_and_max_spread", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_vol);
  __Pyx_XDECREF(__pyx_v_price);
  __Pyx_XDECREF(__pyx_v_min_spread);
  __Pyx_XDECREF(__pyx_v_max_spread);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":753
 *         return min_spread, max_spread
 * 
 *     cdef c_recalculate_parameters(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_recalculate_parameters(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_market = 0;
  PyObject *__pyx_v_q = NULL;
  PyObject *__pyx_v_vol = NULL;
  PyObject *__pyx_v_min_spread = NULL;
  PyObject *__pyx_v_max_spread = NULL;
  PyObject *__pyx_v_max_possible_gamma = NULL;
  PyObject *__pyx_v_max_spread_around_reserved_price = NULL;
  PyObject *__pyx_v_q_where_to_decay_order_amount = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_recalculate_parameters", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":755
 *     cdef c_recalculate_parameters(self):
 *         cdef:
 *             ExchangeBase market = self._market_info.market             # <<<<<<<<<<<<<<
 * 
 *         q = (market.get_balance(self.base_asset) - self.c_calculate_target_inventory()) * self._q_adjustment_factor
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 755, __pyx_L1_error)
  __pyx_v_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":757
 *             ExchangeBase market = self._market_info.market
 * 
 *         q = (market.get_balance(self.base_asset) - self.c_calculate_target_inventory()) * self._q_adjustment_factor             # <<<<<<<<<<<<<<
 *         vol = self.get_volatility()
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_market), __pyx_n_s_get_balance); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 757, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_target_inventory(__pyx_v_self); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Multiply(__pyx_t_3, __pyx_v_self->_q_adjustment_factor); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_q = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":758
 * 
 *         q = (market.get_balance(self.base_asset) - self.c_calculate_target_inventory()) * self._q_adjustment_factor
 *         vol = self.get_volatility()             # <<<<<<<<<<<<<<
 * 
 *         if q != 0:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_volatility); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_1, };
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 758, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_vol = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":760
 *         vol = self.get_volatility()
 * 
 *         if q != 0:             # <<<<<<<<<<<<<<
 *             min_spread, max_spread = self._get_min_and_max_spread()
 * 
 */
  __pyx_t_2 = __Pyx_PyInt_NeObjC(__pyx_v_q, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_6) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":761
 * 
 *         if q != 0:
 *             min_spread, max_spread = self._get_min_and_max_spread()             # <<<<<<<<<<<<<<
 * 
 *             # GAMMA
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_min_and_max_spread); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_1, };
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 761, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_2))) || (PyList_CheckExact(__pyx_t_2))) {
      PyObject* sequence = __pyx_t_2;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 761, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_1 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_1 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 761, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 761, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      #endif
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_4 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 761, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4);
      index = 0; __pyx_t_3 = __pyx_t_7(__pyx_t_4); if (unlikely(!__pyx_t_3)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_3);
      index = 1; __pyx_t_1 = __pyx_t_7(__pyx_t_4); if (unlikely(!__pyx_t_1)) goto __pyx_L4_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_1);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_4), 2) < 0) __PYX_ERR(0, 761, __pyx_L1_error)
      __pyx_t_7 = NULL;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L5_unpacking_done;
      __pyx_L4_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_7 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 761, __pyx_L1_error)
      __pyx_L5_unpacking_done:;
    }
    __pyx_v_min_spread = __pyx_t_3;
    __pyx_t_3 = 0;
    __pyx_v_max_spread = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":767
 *             max_possible_gamma = min(
 *                                     (max_spread - min_spread) / (2 * abs(q) * (vol ** 2)),
 *                                     (max_spread * (2 - self._inventory_risk_aversion) /             # <<<<<<<<<<<<<<
 *                                      self._inventory_risk_aversion + min_spread) / (vol ** 2))
 *             self._gamma = self._inventory_risk_aversion * max_possible_gamma
 */
    __pyx_t_2 = __Pyx_PyInt_SubtractCObj(__pyx_int_2, __pyx_v_self->_inventory_risk_aversion, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyNumber_Multiply(__pyx_v_max_spread, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":768
 *                                     (max_spread - min_spread) / (2 * abs(q) * (vol ** 2)),
 *                                     (max_spread * (2 - self._inventory_risk_aversion) /
 *                                      self._inventory_risk_aversion + min_spread) / (vol ** 2))             # <<<<<<<<<<<<<<
 *             self._gamma = self._inventory_risk_aversion * max_possible_gamma
 * 
 */
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_v_self->_inventory_risk_aversion); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 767, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_v_min_spread); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Power(__pyx_v_vol, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":766
 *             # If q or vol are close to 0, gamma will -> Inf. Is this desirable?
 *             max_possible_gamma = min(
 *                                     (max_spread - min_spread) / (2 * abs(q) * (vol ** 2)),             # <<<<<<<<<<<<<<
 *                                     (max_spread * (2 - self._inventory_risk_aversion) /
 *                                      self._inventory_risk_aversion + min_spread) / (vol ** 2))
 */
    __pyx_t_2 = PyNumber_Subtract(__pyx_v_max_spread, __pyx_v_min_spread); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyNumber_Absolute(__pyx_v_q); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_MultiplyCObj(__pyx_int_2, __pyx_t_1, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Power(__pyx_v_vol, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyNumber_Multiply(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":768
 *                                     (max_spread - min_spread) / (2 * abs(q) * (vol ** 2)),
 *                                     (max_spread * (2 - self._inventory_risk_aversion) /
 *                                      self._inventory_risk_aversion + min_spread) / (vol ** 2))             # <<<<<<<<<<<<<<
 *             self._gamma = self._inventory_risk_aversion * max_possible_gamma
 * 
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_3, __pyx_t_1, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 768, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 768, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_6) {
      __Pyx_INCREF(__pyx_t_3);
      __pyx_t_8 = __pyx_t_3;
    } else {
      __Pyx_INCREF(__pyx_t_1);
      __pyx_t_8 = __pyx_t_1;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_t_8;
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_max_possible_gamma = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":769
 *                                     (max_spread * (2 - self._inventory_risk_aversion) /
 *                                      self._inventory_risk_aversion + min_spread) / (vol ** 2))
 *             self._gamma = self._inventory_risk_aversion * max_possible_gamma             # <<<<<<<<<<<<<<
 * 
 *             # KAPPA
 */
    __pyx_t_3 = PyNumber_Multiply(__pyx_v_self->_inventory_risk_aversion, __pyx_v_max_possible_gamma); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 769, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->_gamma);
    __Pyx_DECREF(__pyx_v_self->_gamma);
    __pyx_v_self->_gamma = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":773
 *             # KAPPA
 *             # Want the maximum possible spread but with restrictions to avoid negative kappa or division by 0
 *             max_spread_around_reserved_price = max_spread * (2 - self._inventory_risk_aversion) + min_spread * self._inventory_risk_aversion             # <<<<<<<<<<<<<<
 *             if (max_spread_around_reserved_price * self._gamma - (vol * self._gamma) ** 2) <= s_decimal_zero:
 *                 self._kappa = Decimal('1e100')  # Cap to kappa -> Infinity
 */
    __pyx_t_3 = __Pyx_PyInt_SubtractCObj(__pyx_int_2, __pyx_v_self->_inventory_risk_aversion, 2, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = PyNumber_Multiply(__pyx_v_max_spread, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Multiply(__pyx_v_min_spread, __pyx_v_self->_inventory_risk_aversion); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyNumber_Add(__pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 773, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_max_spread_around_reserved_price = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":774
 *             # Want the maximum possible spread but with restrictions to avoid negative kappa or division by 0
 *             max_spread_around_reserved_price = max_spread * (2 - self._inventory_risk_aversion) + min_spread * self._inventory_risk_aversion
 *             if (max_spread_around_reserved_price * self._gamma - (vol * self._gamma) ** 2) <= s_decimal_zero:             # <<<<<<<<<<<<<<
 *                 self._kappa = Decimal('1e100')  # Cap to kappa -> Infinity
 *             else:
 */
    __pyx_t_1 = PyNumber_Multiply(__pyx_v_max_spread_around_reserved_price, __pyx_v_self->_gamma); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyNumber_Multiply(__pyx_v_vol, __pyx_v_self->_gamma); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = PyNumber_Power(__pyx_t_3, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Subtract(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 774, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_t_8, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 774, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 774, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_6) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":775
 *             max_spread_around_reserved_price = max_spread * (2 - self._inventory_risk_aversion) + min_spread * self._inventory_risk_aversion
 *             if (max_spread_around_reserved_price * self._gamma - (vol * self._gamma) ** 2) <= s_decimal_zero:
 *                 self._kappa = Decimal('1e100')  # Cap to kappa -> Infinity             # <<<<<<<<<<<<<<
 *             else:
 *                 self._kappa = self._gamma / (Decimal.exp((max_spread_around_reserved_price * self._gamma - (vol * self._gamma) ** 2) / 2) - 1)
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 775, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_5 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_u_1e100};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 775, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_v_self->_kappa);
      __Pyx_DECREF(__pyx_v_self->_kappa);
      __pyx_v_self->_kappa = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":774
 *             # Want the maximum possible spread but with restrictions to avoid negative kappa or division by 0
 *             max_spread_around_reserved_price = max_spread * (2 - self._inventory_risk_aversion) + min_spread * self._inventory_risk_aversion
 *             if (max_spread_around_reserved_price * self._gamma - (vol * self._gamma) ** 2) <= s_decimal_zero:             # <<<<<<<<<<<<<<
 *                 self._kappa = Decimal('1e100')  # Cap to kappa -> Infinity
 *             else:
 */
      goto __pyx_L6;
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":777
 *                 self._kappa = Decimal('1e100')  # Cap to kappa -> Infinity
 *             else:
 *                 self._kappa = self._gamma / (Decimal.exp((max_spread_around_reserved_price * self._gamma - (vol * self._gamma) ** 2) / 2) - 1)             # <<<<<<<<<<<<<<
 * 
 *             # ETA
 */
    /*else*/ {
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 777, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_exp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 777, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyNumber_Multiply(__pyx_v_max_spread_around_reserved_price, __pyx_v_self->_gamma); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 777, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_2 = PyNumber_Multiply(__pyx_v_vol, __pyx_v_self->_gamma); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 777, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_4 = PyNumber_Power(__pyx_t_2, __pyx_int_2, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 777, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyNumber_Subtract(__pyx_t_8, __pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 777, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyInt_TrueDivideObjC(__pyx_t_2, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 777, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_4};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 777, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_3 = __Pyx_PyInt_SubtractObjC(__pyx_t_1, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 777, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_v_self->_gamma, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 777, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_v_self->_kappa);
      __Pyx_DECREF(__pyx_v_self->_kappa);
      __pyx_v_self->_kappa = __pyx_t_1;
      __pyx_t_1 = 0;
    }
    __pyx_L6:;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":781
 *             # ETA
 *             # Want order_amount to be 10% of the original number if q is in the opposite extreme from target inventory
 *             q_where_to_decay_order_amount = self.c_calculate_target_inventory() / (self._inventory_risk_aversion * Decimal.ln(Decimal("10")))             # <<<<<<<<<<<<<<
 *             self._eta = s_decimal_one
 *             if q_where_to_decay_order_amount != s_decimal_zero:
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_target_inventory(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_ln); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_kp_u_10};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 781, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __pyx_t_8 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_4};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 781, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = PyNumber_Multiply(__pyx_v_self->_inventory_risk_aversion, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_q_where_to_decay_order_amount = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":782
 *             # Want order_amount to be 10% of the original number if q is in the opposite extreme from target inventory
 *             q_where_to_decay_order_amount = self.c_calculate_target_inventory() / (self._inventory_risk_aversion * Decimal.ln(Decimal("10")))
 *             self._eta = s_decimal_one             # <<<<<<<<<<<<<<
 *             if q_where_to_decay_order_amount != s_decimal_zero:
 *                 self._eta = self._eta / q_where_to_decay_order_amount
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_s_decimal_one); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 782, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_self->_eta);
    __Pyx_DECREF(__pyx_v_self->_eta);
    __pyx_v_self->_eta = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":783
 *             q_where_to_decay_order_amount = self.c_calculate_target_inventory() / (self._inventory_risk_aversion * Decimal.ln(Decimal("10")))
 *             self._eta = s_decimal_one
 *             if q_where_to_decay_order_amount != s_decimal_zero:             # <<<<<<<<<<<<<<
 *                 self._eta = self._eta / q_where_to_decay_order_amount
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_q_where_to_decay_order_amount, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 783, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_6) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":784
 *             self._eta = s_decimal_one
 *             if q_where_to_decay_order_amount != s_decimal_zero:
 *                 self._eta = self._eta / q_where_to_decay_order_amount             # <<<<<<<<<<<<<<
 * 
 *             self._latest_parameter_calculation_vol = vol
 */
      __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_v_self->_eta, __pyx_v_q_where_to_decay_order_amount); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 784, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_v_self->_eta);
      __Pyx_DECREF(__pyx_v_self->_eta);
      __pyx_v_self->_eta = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":783
 *             q_where_to_decay_order_amount = self.c_calculate_target_inventory() / (self._inventory_risk_aversion * Decimal.ln(Decimal("10")))
 *             self._eta = s_decimal_one
 *             if q_where_to_decay_order_amount != s_decimal_zero:             # <<<<<<<<<<<<<<
 *                 self._eta = self._eta / q_where_to_decay_order_amount
 * 
 */
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":786
 *                 self._eta = self._eta / q_where_to_decay_order_amount
 * 
 *             self._latest_parameter_calculation_vol = vol             # <<<<<<<<<<<<<<
 * 
 *     def recalculate_parameters(self):
 */
    __Pyx_INCREF(__pyx_v_vol);
    __Pyx_GIVEREF(__pyx_v_vol);
    __Pyx_GOTREF(__pyx_v_self->_latest_parameter_calculation_vol);
    __Pyx_DECREF(__pyx_v_self->_latest_parameter_calculation_vol);
    __pyx_v_self->_latest_parameter_calculation_vol = __pyx_v_vol;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":760
 *         vol = self.get_volatility()
 * 
 *         if q != 0:             # <<<<<<<<<<<<<<
 *             min_spread, max_spread = self._get_min_and_max_spread()
 * 
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":753
 *         return min_spread, max_spread
 * 
 *     cdef c_recalculate_parameters(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_recalculate_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_q);
  __Pyx_XDECREF(__pyx_v_vol);
  __Pyx_XDECREF(__pyx_v_min_spread);
  __Pyx_XDECREF(__pyx_v_max_spread);
  __Pyx_XDECREF(__pyx_v_max_possible_gamma);
  __Pyx_XDECREF(__pyx_v_max_spread_around_reserved_price);
  __Pyx_XDECREF(__pyx_v_q_where_to_decay_order_amount);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":788
 *             self._latest_parameter_calculation_vol = vol
 * 
 *     def recalculate_parameters(self):             # <<<<<<<<<<<<<<
 *         return self.c_recalculate_parameters()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_41recalculate_parameters(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_41recalculate_parameters = {"recalculate_parameters", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_41recalculate_parameters, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_41recalculate_parameters(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("recalculate_parameters (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("recalculate_parameters", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "recalculate_parameters", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_40recalculate_parameters(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_40recalculate_parameters(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("recalculate_parameters", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":789
 * 
 *     def recalculate_parameters(self):
 *         return self.c_recalculate_parameters()             # <<<<<<<<<<<<<<
 * 
 *     cdef bint c_is_algorithm_ready(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_recalculate_parameters(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 789, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":788
 *             self._latest_parameter_calculation_vol = vol
 * 
 *     def recalculate_parameters(self):             # <<<<<<<<<<<<<<
 *         return self.c_recalculate_parameters()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.recalculate_parameters", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":791
 *         return self.c_recalculate_parameters()
 * 
 *     cdef bint c_is_algorithm_ready(self):             # <<<<<<<<<<<<<<
 *         return self._avg_vol.is_sampling_buffer_full
 * 
 */

static int __pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_is_algorithm_ready(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_is_algorithm_ready", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":792
 * 
 *     cdef bint c_is_algorithm_ready(self):
 *         return self._avg_vol.is_sampling_buffer_full             # <<<<<<<<<<<<<<
 * 
 *     def is_algorithm_ready(self) -> bool:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_avg_vol, __pyx_n_s_is_sampling_buffer_full); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 792, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":791
 *         return self.c_recalculate_parameters()
 * 
 *     cdef bint c_is_algorithm_ready(self):             # <<<<<<<<<<<<<<
 *         return self._avg_vol.is_sampling_buffer_full
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_WriteUnraisable("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_is_algorithm_ready", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":794
 *         return self._avg_vol.is_sampling_buffer_full
 * 
 *     def is_algorithm_ready(self) -> bool:             # <<<<<<<<<<<<<<
 *         return self.c_is_algorithm_ready()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_43is_algorithm_ready(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_43is_algorithm_ready = {"is_algorithm_ready", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_43is_algorithm_ready, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_43is_algorithm_ready(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_algorithm_ready (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("is_algorithm_ready", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "is_algorithm_ready", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_42is_algorithm_ready(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_42is_algorithm_ready(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_algorithm_ready", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":795
 * 
 *     def is_algorithm_ready(self) -> bool:
 *         return self.c_is_algorithm_ready()             # <<<<<<<<<<<<<<
 * 
 *     def _get_logspaced_level_spreads(self, ):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_is_algorithm_ready(__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 795, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":794
 *         return self._avg_vol.is_sampling_buffer_full
 * 
 *     def is_algorithm_ready(self) -> bool:             # <<<<<<<<<<<<<<
 *         return self.c_is_algorithm_ready()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.is_algorithm_ready", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":797
 *         return self.c_is_algorithm_ready()
 * 
 *     def _get_logspaced_level_spreads(self, ):             # <<<<<<<<<<<<<<
 *         reference_price = self.get_price()
 *         _, max_spread = self._get_min_and_max_spread()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_45_get_logspaced_level_spreads(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_45_get_logspaced_level_spreads = {"_get_logspaced_level_spreads", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_45_get_logspaced_level_spreads, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_45_get_logspaced_level_spreads(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_logspaced_level_spreads (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_get_logspaced_level_spreads", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_get_logspaced_level_spreads", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_44_get_logspaced_level_spreads(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_44_get_logspaced_level_spreads(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_v_reference_price = NULL;
  CYTHON_UNUSED PyObject *__pyx_v__ = NULL;
  PyObject *__pyx_v_max_spread = NULL;
  PyObject *__pyx_v_optimal_ask_spread = NULL;
  PyObject *__pyx_v_optimal_bid_spread = NULL;
  PyObject *__pyx_v_bid_level_spreads = NULL;
  PyObject *__pyx_v_ask_level_spreads = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  double __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_logspaced_level_spreads", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":798
 * 
 *     def _get_logspaced_level_spreads(self, ):
 *         reference_price = self.get_price()             # <<<<<<<<<<<<<<
 *         _, max_spread = self._get_min_and_max_spread()
 *         optimal_ask_spread = self._optimal_ask - reference_price
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 798, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_reference_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":799
 *     def _get_logspaced_level_spreads(self, ):
 *         reference_price = self.get_price()
 *         _, max_spread = self._get_min_and_max_spread()             # <<<<<<<<<<<<<<
 *         optimal_ask_spread = self._optimal_ask - reference_price
 *         optimal_bid_spread = reference_price - self._optimal_bid
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_min_and_max_spread); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 799, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 799, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5);
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 799, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 799, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v__ = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_max_spread = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":800
 *         reference_price = self.get_price()
 *         _, max_spread = self._get_min_and_max_spread()
 *         optimal_ask_spread = self._optimal_ask - reference_price             # <<<<<<<<<<<<<<
 *         optimal_bid_spread = reference_price - self._optimal_bid
 *         bid_level_spreads = np.logspace(0, np.log(float(max_spread - optimal_bid_spread) + 1), base=np.e,
 */
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_self->_optimal_ask, __pyx_v_reference_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 800, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_optimal_ask_spread = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":801
 *         _, max_spread = self._get_min_and_max_spread()
 *         optimal_ask_spread = self._optimal_ask - reference_price
 *         optimal_bid_spread = reference_price - self._optimal_bid             # <<<<<<<<<<<<<<
 *         bid_level_spreads = np.logspace(0, np.log(float(max_spread - optimal_bid_spread) + 1), base=np.e,
 *                                         num=self._order_levels) - 1
 */
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_reference_price, __pyx_v_self->_optimal_bid); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 801, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_optimal_bid_spread = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":802
 *         optimal_ask_spread = self._optimal_ask - reference_price
 *         optimal_bid_spread = reference_price - self._optimal_bid
 *         bid_level_spreads = np.logspace(0, np.log(float(max_spread - optimal_bid_spread) + 1), base=np.e,             # <<<<<<<<<<<<<<
 *                                         num=self._order_levels) - 1
 *         ask_level_spreads = np.logspace(0, np.log(float(max_spread - optimal_ask_spread) + 1), base=np.e,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_logspace); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_log); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_v_max_spread, __pyx_v_optimal_bid_spread); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = __Pyx_PyObject_AsDouble(__pyx_t_2); if (unlikely(__pyx_t_7 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyFloat_FromDouble((__pyx_t_7 + 1.0)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 802, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_np); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_e); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_base, __pyx_t_8) < 0) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":803
 *         optimal_bid_spread = reference_price - self._optimal_bid
 *         bid_level_spreads = np.logspace(0, np.log(float(max_spread - optimal_bid_spread) + 1), base=np.e,
 *                                         num=self._order_levels) - 1             # <<<<<<<<<<<<<<
 *         ask_level_spreads = np.logspace(0, np.log(float(max_spread - optimal_ask_spread) + 1), base=np.e,
 *                                         num=self._order_levels) - 1
 */
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_self->_order_levels); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_num, __pyx_t_8) < 0) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":802
 *         optimal_ask_spread = self._optimal_ask - reference_price
 *         optimal_bid_spread = reference_price - self._optimal_bid
 *         bid_level_spreads = np.logspace(0, np.log(float(max_spread - optimal_bid_spread) + 1), base=np.e,             # <<<<<<<<<<<<<<
 *                                         num=self._order_levels) - 1
 *         ask_level_spreads = np.logspace(0, np.log(float(max_spread - optimal_ask_spread) + 1), base=np.e,
 */
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":803
 *         optimal_bid_spread = reference_price - self._optimal_bid
 *         bid_level_spreads = np.logspace(0, np.log(float(max_spread - optimal_bid_spread) + 1), base=np.e,
 *                                         num=self._order_levels) - 1             # <<<<<<<<<<<<<<
 *         ask_level_spreads = np.logspace(0, np.log(float(max_spread - optimal_ask_spread) + 1), base=np.e,
 *                                         num=self._order_levels) - 1
 */
  __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_t_8, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 803, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_bid_level_spreads = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":804
 *         bid_level_spreads = np.logspace(0, np.log(float(max_spread - optimal_bid_spread) + 1), base=np.e,
 *                                         num=self._order_levels) - 1
 *         ask_level_spreads = np.logspace(0, np.log(float(max_spread - optimal_ask_spread) + 1), base=np.e,             # <<<<<<<<<<<<<<
 *                                         num=self._order_levels) - 1
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_np); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_logspace); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_log); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyNumber_Subtract(__pyx_v_max_spread, __pyx_v_optimal_ask_spread); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyObject_AsDouble(__pyx_t_5); if (unlikely(__pyx_t_7 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyFloat_FromDouble((__pyx_t_7 + 1.0)); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_np); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_e); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_base, __pyx_t_2) < 0) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":805
 *                                         num=self._order_levels) - 1
 *         ask_level_spreads = np.logspace(0, np.log(float(max_spread - optimal_ask_spread) + 1), base=np.e,
 *                                         num=self._order_levels) - 1             # <<<<<<<<<<<<<<
 * 
 *         return bid_level_spreads, ask_level_spreads
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_order_levels); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_num, __pyx_t_2) < 0) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":804
 *         bid_level_spreads = np.logspace(0, np.log(float(max_spread - optimal_bid_spread) + 1), base=np.e,
 *                                         num=self._order_levels) - 1
 *         ask_level_spreads = np.logspace(0, np.log(float(max_spread - optimal_ask_spread) + 1), base=np.e,             # <<<<<<<<<<<<<<
 *                                         num=self._order_levels) - 1
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":805
 *                                         num=self._order_levels) - 1
 *         ask_level_spreads = np.logspace(0, np.log(float(max_spread - optimal_ask_spread) + 1), base=np.e,
 *                                         num=self._order_levels) - 1             # <<<<<<<<<<<<<<
 * 
 *         return bid_level_spreads, ask_level_spreads
 */
  __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 805, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ask_level_spreads = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":807
 *                                         num=self._order_levels) - 1
 * 
 *         return bid_level_spreads, ask_level_spreads             # <<<<<<<<<<<<<<
 * 
 *     cdef _create_proposal_based_on_order_override(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 807, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_bid_level_spreads);
  __Pyx_GIVEREF(__pyx_v_bid_level_spreads);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_bid_level_spreads);
  __Pyx_INCREF(__pyx_v_ask_level_spreads);
  __Pyx_GIVEREF(__pyx_v_ask_level_spreads);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_ask_level_spreads);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":797
 *         return self.c_is_algorithm_ready()
 * 
 *     def _get_logspaced_level_spreads(self, ):             # <<<<<<<<<<<<<<
 *         reference_price = self.get_price()
 *         _, max_spread = self._get_min_and_max_spread()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy._get_logspaced_level_spreads", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_reference_price);
  __Pyx_XDECREF(__pyx_v__);
  __Pyx_XDECREF(__pyx_v_max_spread);
  __Pyx_XDECREF(__pyx_v_optimal_ask_spread);
  __Pyx_XDECREF(__pyx_v_optimal_bid_spread);
  __Pyx_XDECREF(__pyx_v_bid_level_spreads);
  __Pyx_XDECREF(__pyx_v_ask_level_spreads);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":809
 *         return bid_level_spreads, ask_level_spreads
 * 
 *     cdef _create_proposal_based_on_order_override(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy__create_proposal_based_on_order_override(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_market = 0;
  PyObject *__pyx_v_buys = 0;
  PyObject *__pyx_v_sells = 0;
  PyObject *__pyx_v_reference_price = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_key = NULL;
  PyObject *__pyx_v_value = NULL;
  PyObject *__pyx_v_list_to_be_appended = NULL;
  PyObject *__pyx_v_size = NULL;
  PyObject *__pyx_v_price = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_create_proposal_based_on_order_override", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":811
 *     cdef _create_proposal_based_on_order_override(self):
 *         cdef:
 *             ExchangeBase market = self._market_info.market             # <<<<<<<<<<<<<<
 *             list buys = []
 *             list sells = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 811, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 811, __pyx_L1_error)
  __pyx_v_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":812
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 *             list buys = []             # <<<<<<<<<<<<<<
 *             list sells = []
 *         reference_price = self.get_price()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_buys = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":813
 *             ExchangeBase market = self._market_info.market
 *             list buys = []
 *             list sells = []             # <<<<<<<<<<<<<<
 *         reference_price = self.get_price()
 *         for key, value in self._order_override.items():
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 813, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sells = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":814
 *             list buys = []
 *             list sells = []
 *         reference_price = self.get_price()             # <<<<<<<<<<<<<<
 *         for key, value in self._order_override.items():
 *             if str(value[0]) in ["buy", "sell"]:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 814, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_reference_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":815
 *             list sells = []
 *         reference_price = self.get_price()
 *         for key, value in self._order_override.items():             # <<<<<<<<<<<<<<
 *             if str(value[0]) in ["buy", "sell"]:
 *                 list_to_be_appended = buys if str(value[0]) == "buy" else sells
 */
  __pyx_t_5 = 0;
  if (unlikely(__pyx_v_self->_order_override == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
    __PYX_ERR(0, 815, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_dict_iterator(__pyx_v_self->_order_override, 0, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_4)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 815, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_2;
  __pyx_t_2 = 0;
  while (1) {
    __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_6, &__pyx_t_5, &__pyx_t_2, &__pyx_t_3, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_7 == 0)) break;
    if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 815, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_key, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_XDECREF_SET(__pyx_v_value, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":816
 *         reference_price = self.get_price()
 *         for key, value in self._order_override.items():
 *             if str(value[0]) in ["buy", "sell"]:             # <<<<<<<<<<<<<<
 *                 list_to_be_appended = buys if str(value[0]) == "buy" else sells
 *                 size = Decimal(str(value[2]))
 */
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_Str(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 816, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_9 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_buy, Py_EQ)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 816, __pyx_L1_error)
    __pyx_t_10 = (__pyx_t_9 != 0);
    if (!__pyx_t_10) {
    } else {
      __pyx_t_8 = __pyx_t_10;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_10 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_sell, Py_EQ)); if (unlikely((__pyx_t_10 < 0))) __PYX_ERR(0, 816, __pyx_L1_error)
    __pyx_t_9 = (__pyx_t_10 != 0);
    __pyx_t_8 = __pyx_t_9;
    __pyx_L6_bool_binop_done:;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_9 = (__pyx_t_8 != 0);
    if (__pyx_t_9) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":817
 *         for key, value in self._order_override.items():
 *             if str(value[0]) in ["buy", "sell"]:
 *                 list_to_be_appended = buys if str(value[0]) == "buy" else sells             # <<<<<<<<<<<<<<
 *                 size = Decimal(str(value[2]))
 *                 size = market.c_quantize_order_amount(self.trading_pair, size)
 */
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 817, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = __Pyx_PyObject_Str(__pyx_t_3); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 817, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_9 = (__Pyx_PyUnicode_Equals(__pyx_t_11, __pyx_n_u_buy, Py_EQ)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 817, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if ((__pyx_t_9 != 0)) {
        __Pyx_INCREF(__pyx_v_buys);
        __pyx_t_2 = __pyx_v_buys;
      } else {
        __Pyx_INCREF(__pyx_v_sells);
        __pyx_t_2 = __pyx_v_sells;
      }
      __Pyx_XDECREF_SET(__pyx_v_list_to_be_appended, ((PyObject*)__pyx_t_2));
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":818
 *             if str(value[0]) in ["buy", "sell"]:
 *                 list_to_be_appended = buys if str(value[0]) == "buy" else sells
 *                 size = Decimal(str(value[2]))             # <<<<<<<<<<<<<<
 *                 size = market.c_quantize_order_amount(self.trading_pair, size)
 *                 if str(value[0]) == "buy":
 */
      __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 818, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 818, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_12 = __Pyx_PyObject_Str(__pyx_t_3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 818, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_7 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_12};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 818, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      __Pyx_XDECREF_SET(__pyx_v_size, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":819
 *                 list_to_be_appended = buys if str(value[0]) == "buy" else sells
 *                 size = Decimal(str(value[2]))
 *                 size = market.c_quantize_order_amount(self.trading_pair, size)             # <<<<<<<<<<<<<<
 *                 if str(value[0]) == "buy":
 *                     price = reference_price * (Decimal("1") - Decimal(str(value[1])) / Decimal("100"))
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 819, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 819, __pyx_L1_error)
      __pyx_t_11 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), ((PyObject*)__pyx_t_2), __pyx_v_size, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 819, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF_SET(__pyx_v_size, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":820
 *                 size = Decimal(str(value[2]))
 *                 size = market.c_quantize_order_amount(self.trading_pair, size)
 *                 if str(value[0]) == "buy":             # <<<<<<<<<<<<<<
 *                     price = reference_price * (Decimal("1") - Decimal(str(value[1])) / Decimal("100"))
 *                 elif str(value[0]) == "sell":
 */
      __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_2 = __Pyx_PyObject_Str(__pyx_t_11); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_9 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_buy, Py_EQ)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 820, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_8 = (__pyx_t_9 != 0);
      if (__pyx_t_8) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":821
 *                 size = market.c_quantize_order_amount(self.trading_pair, size)
 *                 if str(value[0]) == "buy":
 *                     price = reference_price * (Decimal("1") - Decimal(str(value[1])) / Decimal("100"))             # <<<<<<<<<<<<<<
 *                 elif str(value[0]) == "sell":
 *                     price = reference_price * (Decimal("1") + Decimal(str(value[1])) / Decimal("100"))
 */
        __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 821, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_12 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_kp_u_1_2};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 821, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 821, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 821, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_13 = __Pyx_PyObject_Str(__pyx_t_3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 821, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_13};
          __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 821, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 821, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_3 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_u_100};
          __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 821, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
        __pyx_t_13 = __Pyx_PyNumber_Divide(__pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 821, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_12 = PyNumber_Subtract(__pyx_t_2, __pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 821, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = PyNumber_Multiply(__pyx_v_reference_price, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 821, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF_SET(__pyx_v_price, __pyx_t_13);
        __pyx_t_13 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":820
 *                 size = Decimal(str(value[2]))
 *                 size = market.c_quantize_order_amount(self.trading_pair, size)
 *                 if str(value[0]) == "buy":             # <<<<<<<<<<<<<<
 *                     price = reference_price * (Decimal("1") - Decimal(str(value[1])) / Decimal("100"))
 *                 elif str(value[0]) == "sell":
 */
        goto __pyx_L8;
      }

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":822
 *                 if str(value[0]) == "buy":
 *                     price = reference_price * (Decimal("1") - Decimal(str(value[1])) / Decimal("100"))
 *                 elif str(value[0]) == "sell":             # <<<<<<<<<<<<<<
 *                     price = reference_price * (Decimal("1") + Decimal(str(value[1])) / Decimal("100"))
 *                 price = market.c_quantize_order_price(self.trading_pair, price)
 */
      __pyx_t_13 = __Pyx_GetItemInt(__pyx_v_value, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 822, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __pyx_t_12 = __Pyx_PyObject_Str(__pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 822, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_8 = (__Pyx_PyUnicode_Equals(__pyx_t_12, __pyx_n_u_sell, Py_EQ)); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 822, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_9 = (__pyx_t_8 != 0);
      if (__pyx_t_9) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":823
 *                     price = reference_price * (Decimal("1") - Decimal(str(value[1])) / Decimal("100"))
 *                 elif str(value[0]) == "sell":
 *                     price = reference_price * (Decimal("1") + Decimal(str(value[1])) / Decimal("100"))             # <<<<<<<<<<<<<<
 *                 price = market.c_quantize_order_price(self.trading_pair, price)
 *                 if size > 0 and price > 0:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_2 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
          __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_13);
          if (likely(__pyx_t_2)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
            __Pyx_INCREF(__pyx_t_2);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_13, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_kp_u_1_2};
          __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 823, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        }
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_11 = __Pyx_GetItemInt(__pyx_v_value, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_3 = __Pyx_PyObject_Str(__pyx_t_11); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_3};
          __pyx_t_13 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 823, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_kp_u_100};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 823, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_13, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = PyNumber_Add(__pyx_t_12, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyNumber_Multiply(__pyx_v_reference_price, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 823, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF_SET(__pyx_v_price, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":822
 *                 if str(value[0]) == "buy":
 *                     price = reference_price * (Decimal("1") - Decimal(str(value[1])) / Decimal("100"))
 *                 elif str(value[0]) == "sell":             # <<<<<<<<<<<<<<
 *                     price = reference_price * (Decimal("1") + Decimal(str(value[1])) / Decimal("100"))
 *                 price = market.c_quantize_order_price(self.trading_pair, price)
 */
      }
      __pyx_L8:;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":824
 *                 elif str(value[0]) == "sell":
 *                     price = reference_price * (Decimal("1") + Decimal(str(value[1])) / Decimal("100"))
 *                 price = market.c_quantize_order_price(self.trading_pair, price)             # <<<<<<<<<<<<<<
 *                 if size > 0 and price > 0:
 *                     list_to_be_appended.append(PriceSize(price, size))
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 824, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_3))) __PYX_ERR(0, 824, __pyx_L1_error)
      if (unlikely(!__pyx_v_price)) { __Pyx_RaiseUnboundLocalError("price"); __PYX_ERR(0, 824, __pyx_L1_error) }
      __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), ((PyObject*)__pyx_t_3), __pyx_v_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 824, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_price, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":825
 *                     price = reference_price * (Decimal("1") + Decimal(str(value[1])) / Decimal("100"))
 *                 price = market.c_quantize_order_price(self.trading_pair, price)
 *                 if size > 0 and price > 0:             # <<<<<<<<<<<<<<
 *                     list_to_be_appended.append(PriceSize(price, size))
 *         return buys, sells
 */
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_size, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 825, __pyx_L1_error)
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 825, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_8) {
      } else {
        __pyx_t_9 = __pyx_t_8;
        goto __pyx_L10_bool_binop_done;
      }
      __pyx_t_2 = PyObject_RichCompare(__pyx_v_price, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 825, __pyx_L1_error)
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 825, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_9 = __pyx_t_8;
      __pyx_L10_bool_binop_done:;
      if (__pyx_t_9) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":826
 *                 price = market.c_quantize_order_price(self.trading_pair, price)
 *                 if size > 0 and price > 0:
 *                     list_to_be_appended.append(PriceSize(price, size))             # <<<<<<<<<<<<<<
 *         return buys, sells
 * 
 */
        if (unlikely(__pyx_v_list_to_be_appended == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "append");
          __PYX_ERR(0, 826, __pyx_L1_error)
        }
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_PriceSize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 826, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_12 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_12, __pyx_v_price, __pyx_v_size};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 826, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_14 = __Pyx_PyList_Append(__pyx_v_list_to_be_appended, __pyx_t_2); if (unlikely(__pyx_t_14 == ((int)-1))) __PYX_ERR(0, 826, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":825
 *                     price = reference_price * (Decimal("1") + Decimal(str(value[1])) / Decimal("100"))
 *                 price = market.c_quantize_order_price(self.trading_pair, price)
 *                 if size > 0 and price > 0:             # <<<<<<<<<<<<<<
 *                     list_to_be_appended.append(PriceSize(price, size))
 *         return buys, sells
 */
      }

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":816
 *         reference_price = self.get_price()
 *         for key, value in self._order_override.items():
 *             if str(value[0]) in ["buy", "sell"]:             # <<<<<<<<<<<<<<
 *                 list_to_be_appended = buys if str(value[0]) == "buy" else sells
 *                 size = Decimal(str(value[2]))
 */
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":827
 *                 if size > 0 and price > 0:
 *                     list_to_be_appended.append(PriceSize(price, size))
 *         return buys, sells             # <<<<<<<<<<<<<<
 * 
 *     def create_proposal_based_on_order_override(self) -> Tuple[List[Proposal], List[Proposal]]:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_buys);
  __Pyx_GIVEREF(__pyx_v_buys);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_buys);
  __Pyx_INCREF(__pyx_v_sells);
  __Pyx_GIVEREF(__pyx_v_sells);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_sells);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":809
 *         return bid_level_spreads, ask_level_spreads
 * 
 *     cdef _create_proposal_based_on_order_override(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy._create_proposal_based_on_order_override", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_buys);
  __Pyx_XDECREF(__pyx_v_sells);
  __Pyx_XDECREF(__pyx_v_reference_price);
  __Pyx_XDECREF(__pyx_v_key);
  __Pyx_XDECREF(__pyx_v_value);
  __Pyx_XDECREF(__pyx_v_list_to_be_appended);
  __Pyx_XDECREF(__pyx_v_size);
  __Pyx_XDECREF(__pyx_v_price);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":829
 *         return buys, sells
 * 
 *     def create_proposal_based_on_order_override(self) -> Tuple[List[Proposal], List[Proposal]]:             # <<<<<<<<<<<<<<
 *         return self._create_proposal_based_on_order_override()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_47create_proposal_based_on_order_override(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_47create_proposal_based_on_order_override = {"create_proposal_based_on_order_override", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_47create_proposal_based_on_order_override, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_47create_proposal_based_on_order_override(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_proposal_based_on_order_override (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("create_proposal_based_on_order_override", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "create_proposal_based_on_order_override", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_46create_proposal_based_on_order_override(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_46create_proposal_based_on_order_override(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_proposal_based_on_order_override", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":830
 * 
 *     def create_proposal_based_on_order_override(self) -> Tuple[List[Proposal], List[Proposal]]:
 *         return self._create_proposal_based_on_order_override()             # <<<<<<<<<<<<<<
 * 
 *     cdef _create_proposal_based_on_order_levels(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->_create_proposal_based_on_order_override(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":829
 *         return buys, sells
 * 
 *     def create_proposal_based_on_order_override(self) -> Tuple[List[Proposal], List[Proposal]]:             # <<<<<<<<<<<<<<
 *         return self._create_proposal_based_on_order_override()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.create_proposal_based_on_order_override", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":832
 *         return self._create_proposal_based_on_order_override()
 * 
 *     cdef _create_proposal_based_on_order_levels(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy__create_proposal_based_on_order_levels(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_market = 0;
  PyObject *__pyx_v_buys = 0;
  PyObject *__pyx_v_sells = 0;
  PyObject *__pyx_v_bid_level_spreads = NULL;
  PyObject *__pyx_v_ask_level_spreads = NULL;
  PyObject *__pyx_v_size = NULL;
  int __pyx_v_level;
  PyObject *__pyx_v_bid_price = NULL;
  PyObject *__pyx_v_ask_price = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_create_proposal_based_on_order_levels", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":834
 *     cdef _create_proposal_based_on_order_levels(self):
 *         cdef:
 *             ExchangeBase market = self._market_info.market             # <<<<<<<<<<<<<<
 *             list buys = []
 *             list sells = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 834, __pyx_L1_error)
  __pyx_v_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":835
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 *             list buys = []             # <<<<<<<<<<<<<<
 *             list sells = []
 *         bid_level_spreads, ask_level_spreads = self._get_logspaced_level_spreads()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_buys = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":836
 *             ExchangeBase market = self._market_info.market
 *             list buys = []
 *             list sells = []             # <<<<<<<<<<<<<<
 *         bid_level_spreads, ask_level_spreads = self._get_logspaced_level_spreads()
 *         size = market.c_quantize_order_amount(self.trading_pair, self._order_amount)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sells = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":837
 *             list buys = []
 *             list sells = []
 *         bid_level_spreads, ask_level_spreads = self._get_logspaced_level_spreads()             # <<<<<<<<<<<<<<
 *         size = market.c_quantize_order_amount(self.trading_pair, self._order_amount)
 *         if size > 0:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_logspaced_level_spreads); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 837, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 837, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5);
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 837, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 837, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_bid_level_spreads = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_ask_level_spreads = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":838
 *             list sells = []
 *         bid_level_spreads, ask_level_spreads = self._get_logspaced_level_spreads()
 *         size = market.c_quantize_order_amount(self.trading_pair, self._order_amount)             # <<<<<<<<<<<<<<
 *         if size > 0:
 *             for level in range(self._order_levels):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 838, __pyx_L1_error)
  __pyx_t_3 = __pyx_v_self->_order_amount;
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), ((PyObject*)__pyx_t_1), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 838, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_size = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":839
 *         bid_level_spreads, ask_level_spreads = self._get_logspaced_level_spreads()
 *         size = market.c_quantize_order_amount(self.trading_pair, self._order_amount)
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             for level in range(self._order_levels):
 *                 bid_price = market.c_quantize_order_price(self.trading_pair,
 */
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_size, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_7) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":840
 *         size = market.c_quantize_order_amount(self.trading_pair, self._order_amount)
 *         if size > 0:
 *             for level in range(self._order_levels):             # <<<<<<<<<<<<<<
 *                 bid_price = market.c_quantize_order_price(self.trading_pair,
 *                                                           self._optimal_bid - Decimal(str(bid_level_spreads[level])))
 */
    __pyx_t_4 = __pyx_v_self->_order_levels;
    __pyx_t_8 = __pyx_t_4;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_level = __pyx_t_9;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":841
 *         if size > 0:
 *             for level in range(self._order_levels):
 *                 bid_price = market.c_quantize_order_price(self.trading_pair,             # <<<<<<<<<<<<<<
 *                                                           self._optimal_bid - Decimal(str(bid_level_spreads[level])))
 *                 ask_price = market.c_quantize_order_price(self.trading_pair,
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 841, __pyx_L1_error)

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":842
 *             for level in range(self._order_levels):
 *                 bid_price = market.c_quantize_order_price(self.trading_pair,
 *                                                           self._optimal_bid - Decimal(str(bid_level_spreads[level])))             # <<<<<<<<<<<<<<
 *                 ask_price = market.c_quantize_order_price(self.trading_pair,
 *                                                           self._optimal_ask + Decimal(str(ask_level_spreads[level])))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_bid_level_spreads, __pyx_v_level, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = __Pyx_PyObject_Str(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
          __pyx_t_11 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_10};
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 842, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      }
      __pyx_t_1 = PyNumber_Subtract(__pyx_v_self->_optimal_bid, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 842, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":841
 *         if size > 0:
 *             for level in range(self._order_levels):
 *                 bid_price = market.c_quantize_order_price(self.trading_pair,             # <<<<<<<<<<<<<<
 *                                                           self._optimal_bid - Decimal(str(bid_level_spreads[level])))
 *                 ask_price = market.c_quantize_order_price(self.trading_pair,
 */
      __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), ((PyObject*)__pyx_t_2), __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 841, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF_SET(__pyx_v_bid_price, __pyx_t_3);
      __pyx_t_3 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":843
 *                 bid_price = market.c_quantize_order_price(self.trading_pair,
 *                                                           self._optimal_bid - Decimal(str(bid_level_spreads[level])))
 *                 ask_price = market.c_quantize_order_price(self.trading_pair,             # <<<<<<<<<<<<<<
 *                                                           self._optimal_ask + Decimal(str(ask_level_spreads[level])))
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 843, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_3))) __PYX_ERR(0, 843, __pyx_L1_error)

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":844
 *                                                           self._optimal_bid - Decimal(str(bid_level_spreads[level])))
 *                 ask_price = market.c_quantize_order_price(self.trading_pair,
 *                                                           self._optimal_ask + Decimal(str(ask_level_spreads[level])))             # <<<<<<<<<<<<<<
 * 
 *                 buys.append(PriceSize(bid_price, size))
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_v_ask_level_spreads, __pyx_v_level, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_5 = __Pyx_PyObject_Str(__pyx_t_10); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_11 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_5};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 844, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_2 = PyNumber_Add(__pyx_v_self->_optimal_ask, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":843
 *                 bid_price = market.c_quantize_order_price(self.trading_pair,
 *                                                           self._optimal_bid - Decimal(str(bid_level_spreads[level])))
 *                 ask_price = market.c_quantize_order_price(self.trading_pair,             # <<<<<<<<<<<<<<
 *                                                           self._optimal_ask + Decimal(str(ask_level_spreads[level])))
 * 
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), ((PyObject*)__pyx_t_3), __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 843, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF_SET(__pyx_v_ask_price, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":846
 *                                                           self._optimal_ask + Decimal(str(ask_level_spreads[level])))
 * 
 *                 buys.append(PriceSize(bid_price, size))             # <<<<<<<<<<<<<<
 *                 sells.append(PriceSize(ask_price, size))
 *         return buys, sells
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PriceSize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 846, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_11 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_bid_price, __pyx_v_size};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_11, 2+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 846, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_buys, __pyx_t_1); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 846, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":847
 * 
 *                 buys.append(PriceSize(bid_price, size))
 *                 sells.append(PriceSize(ask_price, size))             # <<<<<<<<<<<<<<
 *         return buys, sells
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PriceSize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 847, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = NULL;
      __pyx_t_11 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_11 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_ask_price, __pyx_v_size};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_11, 2+__pyx_t_11);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 847, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_sells, __pyx_t_1); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 847, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":839
 *         bid_level_spreads, ask_level_spreads = self._get_logspaced_level_spreads()
 *         size = market.c_quantize_order_amount(self.trading_pair, self._order_amount)
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             for level in range(self._order_levels):
 *                 bid_price = market.c_quantize_order_price(self.trading_pair,
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":848
 *                 buys.append(PriceSize(bid_price, size))
 *                 sells.append(PriceSize(ask_price, size))
 *         return buys, sells             # <<<<<<<<<<<<<<
 * 
 *     def create_proposal_based_on_order_levels(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 848, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_buys);
  __Pyx_GIVEREF(__pyx_v_buys);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_buys);
  __Pyx_INCREF(__pyx_v_sells);
  __Pyx_GIVEREF(__pyx_v_sells);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_sells);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":832
 *         return self._create_proposal_based_on_order_override()
 * 
 *     cdef _create_proposal_based_on_order_levels(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy._create_proposal_based_on_order_levels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_buys);
  __Pyx_XDECREF(__pyx_v_sells);
  __Pyx_XDECREF(__pyx_v_bid_level_spreads);
  __Pyx_XDECREF(__pyx_v_ask_level_spreads);
  __Pyx_XDECREF(__pyx_v_size);
  __Pyx_XDECREF(__pyx_v_bid_price);
  __Pyx_XDECREF(__pyx_v_ask_price);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":850
 *         return buys, sells
 * 
 *     def create_proposal_based_on_order_levels(self):             # <<<<<<<<<<<<<<
 *         return self._create_proposal_based_on_order_levels()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_49create_proposal_based_on_order_levels(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_49create_proposal_based_on_order_levels = {"create_proposal_based_on_order_levels", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_49create_proposal_based_on_order_levels, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_49create_proposal_based_on_order_levels(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_proposal_based_on_order_levels (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("create_proposal_based_on_order_levels", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "create_proposal_based_on_order_levels", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_48create_proposal_based_on_order_levels(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_48create_proposal_based_on_order_levels(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_proposal_based_on_order_levels", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":851
 * 
 *     def create_proposal_based_on_order_levels(self):
 *         return self._create_proposal_based_on_order_levels()             # <<<<<<<<<<<<<<
 * 
 *     cdef _create_basic_proposal(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->_create_proposal_based_on_order_levels(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 851, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":850
 *         return buys, sells
 * 
 *     def create_proposal_based_on_order_levels(self):             # <<<<<<<<<<<<<<
 *         return self._create_proposal_based_on_order_levels()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.create_proposal_based_on_order_levels", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":853
 *         return self._create_proposal_based_on_order_levels()
 * 
 *     cdef _create_basic_proposal(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy__create_basic_proposal(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_market = 0;
  PyObject *__pyx_v_buys = 0;
  PyObject *__pyx_v_sells = 0;
  PyObject *__pyx_v_price = NULL;
  PyObject *__pyx_v_size = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_create_basic_proposal", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":855
 *     cdef _create_basic_proposal(self):
 *         cdef:
 *             ExchangeBase market = self._market_info.market             # <<<<<<<<<<<<<<
 *             list buys = []
 *             list sells = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 855, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 855, __pyx_L1_error)
  __pyx_v_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":856
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 *             list buys = []             # <<<<<<<<<<<<<<
 *             list sells = []
 *         price = market.c_quantize_order_price(self.trading_pair, Decimal(str(self._optimal_bid)))
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 856, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_buys = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":857
 *             ExchangeBase market = self._market_info.market
 *             list buys = []
 *             list sells = []             # <<<<<<<<<<<<<<
 *         price = market.c_quantize_order_price(self.trading_pair, Decimal(str(self._optimal_bid)))
 *         size = market.c_quantize_order_amount(self.trading_pair, self._order_amount)
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 857, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sells = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":858
 *             list buys = []
 *             list sells = []
 *         price = market.c_quantize_order_price(self.trading_pair, Decimal(str(self._optimal_bid)))             # <<<<<<<<<<<<<<
 *         size = market.c_quantize_order_amount(self.trading_pair, self._order_amount)
 *         if size > 0:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Str(__pyx_v_self->_optimal_bid); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 858, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), ((PyObject*)__pyx_t_1), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 858, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_price = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":859
 *             list sells = []
 *         price = market.c_quantize_order_price(self.trading_pair, Decimal(str(self._optimal_bid)))
 *         size = market.c_quantize_order_amount(self.trading_pair, self._order_amount)             # <<<<<<<<<<<<<<
 *         if size > 0:
 *             buys.append(PriceSize(price, size))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_3))) __PYX_ERR(0, 859, __pyx_L1_error)
  __pyx_t_2 = __pyx_v_self->_order_amount;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), ((PyObject*)__pyx_t_3), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_size = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":860
 *         price = market.c_quantize_order_price(self.trading_pair, Decimal(str(self._optimal_bid)))
 *         size = market.c_quantize_order_amount(self.trading_pair, self._order_amount)
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             buys.append(PriceSize(price, size))
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_size, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 860, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_7) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":861
 *         size = market.c_quantize_order_amount(self.trading_pair, self._order_amount)
 *         if size > 0:
 *             buys.append(PriceSize(price, size))             # <<<<<<<<<<<<<<
 * 
 *         price = market.c_quantize_order_price(self.trading_pair, Decimal(str(self._optimal_ask)))
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PriceSize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_price, __pyx_v_size};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 861, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_buys, __pyx_t_1); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":860
 *         price = market.c_quantize_order_price(self.trading_pair, Decimal(str(self._optimal_bid)))
 *         size = market.c_quantize_order_amount(self.trading_pair, self._order_amount)
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             buys.append(PriceSize(price, size))
 * 
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":863
 *             buys.append(PriceSize(price, size))
 * 
 *         price = market.c_quantize_order_price(self.trading_pair, Decimal(str(self._optimal_ask)))             # <<<<<<<<<<<<<<
 *         size = market.c_quantize_order_amount(self.trading_pair, self._order_amount)
 *         if size > 0:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_Str(__pyx_v_self->_optimal_ask); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_4};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 863, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), ((PyObject*)__pyx_t_1), __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_price, __pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":864
 * 
 *         price = market.c_quantize_order_price(self.trading_pair, Decimal(str(self._optimal_ask)))
 *         size = market.c_quantize_order_amount(self.trading_pair, self._order_amount)             # <<<<<<<<<<<<<<
 *         if size > 0:
 *             sells.append(PriceSize(price, size))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_3))) __PYX_ERR(0, 864, __pyx_L1_error)
  __pyx_t_2 = __pyx_v_self->_order_amount;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), ((PyObject*)__pyx_t_3), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF_SET(__pyx_v_size, __pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":865
 *         price = market.c_quantize_order_price(self.trading_pair, Decimal(str(self._optimal_ask)))
 *         size = market.c_quantize_order_amount(self.trading_pair, self._order_amount)
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             sells.append(PriceSize(price, size))
 *         return buys, sells
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_size, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 865, __pyx_L1_error)
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 865, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_7) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":866
 *         size = market.c_quantize_order_amount(self.trading_pair, self._order_amount)
 *         if size > 0:
 *             sells.append(PriceSize(price, size))             # <<<<<<<<<<<<<<
 *         return buys, sells
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_PriceSize); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 866, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_price, __pyx_v_size};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_sells, __pyx_t_1); if (unlikely(__pyx_t_8 == ((int)-1))) __PYX_ERR(0, 866, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":865
 *         price = market.c_quantize_order_price(self.trading_pair, Decimal(str(self._optimal_ask)))
 *         size = market.c_quantize_order_amount(self.trading_pair, self._order_amount)
 *         if size > 0:             # <<<<<<<<<<<<<<
 *             sells.append(PriceSize(price, size))
 *         return buys, sells
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":867
 *         if size > 0:
 *             sells.append(PriceSize(price, size))
 *         return buys, sells             # <<<<<<<<<<<<<<
 * 
 *     def create_basic_proposal(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 867, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_buys);
  __Pyx_GIVEREF(__pyx_v_buys);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_buys);
  __Pyx_INCREF(__pyx_v_sells);
  __Pyx_GIVEREF(__pyx_v_sells);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_sells);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":853
 *         return self._create_proposal_based_on_order_levels()
 * 
 *     cdef _create_basic_proposal(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy._create_basic_proposal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_buys);
  __Pyx_XDECREF(__pyx_v_sells);
  __Pyx_XDECREF(__pyx_v_price);
  __Pyx_XDECREF(__pyx_v_size);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":869
 *         return buys, sells
 * 
 *     def create_basic_proposal(self):             # <<<<<<<<<<<<<<
 *         return self._create_basic_proposal()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_51create_basic_proposal(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_51create_basic_proposal = {"create_basic_proposal", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_51create_basic_proposal, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_51create_basic_proposal(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_basic_proposal (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("create_basic_proposal", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "create_basic_proposal", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_50create_basic_proposal(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_50create_basic_proposal(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_basic_proposal", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":870
 * 
 *     def create_basic_proposal(self):
 *         return self._create_basic_proposal()             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_create_base_proposal(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->_create_basic_proposal(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 870, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":869
 *         return buys, sells
 * 
 *     def create_basic_proposal(self):             # <<<<<<<<<<<<<<
 *         return self._create_basic_proposal()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.create_basic_proposal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":872
 *         return self._create_basic_proposal()
 * 
 *     cdef object c_create_base_proposal(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_create_base_proposal(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_market = 0;
  PyObject *__pyx_v_buys = 0;
  PyObject *__pyx_v_sells = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_create_base_proposal", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":874
 *     cdef object c_create_base_proposal(self):
 *         cdef:
 *             ExchangeBase market = self._market_info.market             # <<<<<<<<<<<<<<
 *             list buys = []
 *             list sells = []
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 874, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 874, __pyx_L1_error)
  __pyx_v_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":875
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 *             list buys = []             # <<<<<<<<<<<<<<
 *             list sells = []
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 875, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_buys = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":876
 *             ExchangeBase market = self._market_info.market
 *             list buys = []
 *             list sells = []             # <<<<<<<<<<<<<<
 * 
 *         if self._order_override is not None and len(self._order_override) > 0:
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 876, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_sells = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":878
 *             list sells = []
 * 
 *         if self._order_override is not None and len(self._order_override) > 0:             # <<<<<<<<<<<<<<
 *             # If order_override is set, it will override order_levels
 *             buys, sells = self._create_proposal_based_on_order_override()
 */
  __pyx_t_3 = (__pyx_v_self->_order_override != Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __pyx_v_self->_order_override;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_5 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 878, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = ((__pyx_t_5 > 0) != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":880
 *         if self._order_override is not None and len(self._order_override) > 0:
 *             # If order_override is set, it will override order_levels
 *             buys, sells = self._create_proposal_based_on_order_override()             # <<<<<<<<<<<<<<
 *         elif self._order_levels > 0 and self._parameters_based_on_spread:
 *             # Simple order levels will only be available for automated parameters calculation setup
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->_create_proposal_based_on_order_override(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 880, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 880, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 880, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 880, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
      index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 880, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 880, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    if (!(likely(PyList_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_t_6))) __PYX_ERR(0, 880, __pyx_L1_error)
    if (!(likely(PyList_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_t_7))) __PYX_ERR(0, 880, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_buys, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_sells, ((PyObject*)__pyx_t_7));
    __pyx_t_7 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":878
 *             list sells = []
 * 
 *         if self._order_override is not None and len(self._order_override) > 0:             # <<<<<<<<<<<<<<
 *             # If order_override is set, it will override order_levels
 *             buys, sells = self._create_proposal_based_on_order_override()
 */
    goto __pyx_L3;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":881
 *             # If order_override is set, it will override order_levels
 *             buys, sells = self._create_proposal_based_on_order_override()
 *         elif self._order_levels > 0 and self._parameters_based_on_spread:             # <<<<<<<<<<<<<<
 *             # Simple order levels will only be available for automated parameters calculation setup
 *             buys, sells = self._create_proposal_based_on_order_levels()
 */
  __pyx_t_4 = ((__pyx_v_self->_order_levels > 0) != 0);
  if (__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L8_bool_binop_done;
  }
  __pyx_t_4 = (__pyx_v_self->_parameters_based_on_spread != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L8_bool_binop_done:;
  if (__pyx_t_2) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":883
 *         elif self._order_levels > 0 and self._parameters_based_on_spread:
 *             # Simple order levels will only be available for automated parameters calculation setup
 *             buys, sells = self._create_proposal_based_on_order_levels()             # <<<<<<<<<<<<<<
 *         else:
 *             # No order levels nor order_overrides. Just 1 bid and 1 ask order
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->_create_proposal_based_on_order_levels(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 883, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_6 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      #else
      __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 883, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_6 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 883, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 883, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
      index = 0; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      index = 1; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L10_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 883, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L11_unpacking_done;
      __pyx_L10_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 883, __pyx_L1_error)
      __pyx_L11_unpacking_done:;
    }
    if (!(likely(PyList_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_t_7))) __PYX_ERR(0, 883, __pyx_L1_error)
    if (!(likely(PyList_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_t_6))) __PYX_ERR(0, 883, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_buys, ((PyObject*)__pyx_t_7));
    __pyx_t_7 = 0;
    __Pyx_DECREF_SET(__pyx_v_sells, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":881
 *             # If order_override is set, it will override order_levels
 *             buys, sells = self._create_proposal_based_on_order_override()
 *         elif self._order_levels > 0 and self._parameters_based_on_spread:             # <<<<<<<<<<<<<<
 *             # Simple order levels will only be available for automated parameters calculation setup
 *             buys, sells = self._create_proposal_based_on_order_levels()
 */
    goto __pyx_L3;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":886
 *         else:
 *             # No order levels nor order_overrides. Just 1 bid and 1 ask order
 *             buys, sells = self._create_basic_proposal()             # <<<<<<<<<<<<<<
 * 
 *         return Proposal(buys, sells)
 */
  /*else*/ {
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->_create_basic_proposal(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
      PyObject* sequence = __pyx_t_1;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 886, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_6 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_6 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_7);
      #else
      __pyx_t_6 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 886, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 886, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      #endif
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 886, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8);
      index = 0; __pyx_t_6 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_6)) goto __pyx_L12_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_6);
      index = 1; __pyx_t_7 = __pyx_t_9(__pyx_t_8); if (unlikely(!__pyx_t_7)) goto __pyx_L12_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 2) < 0) __PYX_ERR(0, 886, __pyx_L1_error)
      __pyx_t_9 = NULL;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      goto __pyx_L13_unpacking_done;
      __pyx_L12_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 886, __pyx_L1_error)
      __pyx_L13_unpacking_done:;
    }
    if (!(likely(PyList_CheckExact(__pyx_t_6))||((__pyx_t_6) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_t_6))) __PYX_ERR(0, 886, __pyx_L1_error)
    if (!(likely(PyList_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_t_7))) __PYX_ERR(0, 886, __pyx_L1_error)
    __Pyx_DECREF_SET(__pyx_v_buys, ((PyObject*)__pyx_t_6));
    __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_sells, ((PyObject*)__pyx_t_7));
    __pyx_t_7 = 0;
  }
  __pyx_L3:;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":888
 *             buys, sells = self._create_basic_proposal()
 * 
 *         return Proposal(buys, sells)             # <<<<<<<<<<<<<<
 * 
 *     def create_base_proposal(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Proposal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 888, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_6 = NULL;
  __pyx_t_10 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_7, function);
      __pyx_t_10 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_v_buys, __pyx_v_sells};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_10, 2+__pyx_t_10);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 888, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":872
 *         return self._create_basic_proposal()
 * 
 *     cdef object c_create_base_proposal(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_create_base_proposal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_buys);
  __Pyx_XDECREF(__pyx_v_sells);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":890
 *         return Proposal(buys, sells)
 * 
 *     def create_base_proposal(self):             # <<<<<<<<<<<<<<
 *         return self.c_create_base_proposal()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_53create_base_proposal(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_53create_base_proposal = {"create_base_proposal", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_53create_base_proposal, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_53create_base_proposal(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("create_base_proposal (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("create_base_proposal", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "create_base_proposal", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_52create_base_proposal(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_52create_base_proposal(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("create_base_proposal", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":891
 * 
 *     def create_base_proposal(self):
 *         return self.c_create_base_proposal()             # <<<<<<<<<<<<<<
 * 
 *     cdef tuple c_get_adjusted_available_balance(self, list orders):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_create_base_proposal(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 891, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":890
 *         return Proposal(buys, sells)
 * 
 *     def create_base_proposal(self):             # <<<<<<<<<<<<<<
 *         return self.c_create_base_proposal()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.create_base_proposal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":893
 *         return self.c_create_base_proposal()
 * 
 *     cdef tuple c_get_adjusted_available_balance(self, list orders):             # <<<<<<<<<<<<<<
 *         """
 *         Calculates the available balance, plus the amount attributed to orders.
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_get_adjusted_available_balance(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_orders) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_market = 0;
  PyObject *__pyx_v_base_balance = 0;
  PyObject *__pyx_v_quote_balance = 0;
  PyObject *__pyx_v_order = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_adjusted_available_balance", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":899
 *         """
 *         cdef:
 *             ExchangeBase market = self._market_info.market             # <<<<<<<<<<<<<<
 *             object base_balance = market.c_get_available_balance(self.base_asset)
 *             object quote_balance = market.c_get_available_balance(self.quote_asset)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 899, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 899, __pyx_L1_error)
  __pyx_v_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":900
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 *             object base_balance = market.c_get_available_balance(self.base_asset)             # <<<<<<<<<<<<<<
 *             object quote_balance = market.c_get_available_balance(self.quote_asset)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 900, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), ((PyObject*)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 900, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_base_balance = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":901
 *             ExchangeBase market = self._market_info.market
 *             object base_balance = market.c_get_available_balance(self.base_asset)
 *             object quote_balance = market.c_get_available_balance(self.quote_asset)             # <<<<<<<<<<<<<<
 * 
 *         for order in orders:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 901, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_available_balance(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), ((PyObject*)__pyx_t_2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 901, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_quote_balance = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":903
 *             object quote_balance = market.c_get_available_balance(self.quote_asset)
 * 
 *         for order in orders:             # <<<<<<<<<<<<<<
 *             if order.is_buy:
 *                 quote_balance += order.quantity * order.price
 */
  if (unlikely(__pyx_v_orders == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 903, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_orders; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
  for (;;) {
    if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 903, __pyx_L1_error)
    #else
    __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 903, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_order, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":904
 * 
 *         for order in orders:
 *             if order.is_buy:             # <<<<<<<<<<<<<<
 *                 quote_balance += order.quantity * order.price
 *             else:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_is_buy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 904, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 904, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":905
 *         for order in orders:
 *             if order.is_buy:
 *                 quote_balance += order.quantity * order.price             # <<<<<<<<<<<<<<
 *             else:
 *                 base_balance += order.quantity
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_quantity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_price); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_InPlaceAdd(__pyx_v_quote_balance, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 905, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF_SET(__pyx_v_quote_balance, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":904
 * 
 *         for order in orders:
 *             if order.is_buy:             # <<<<<<<<<<<<<<
 *                 quote_balance += order.quantity * order.price
 *             else:
 */
      goto __pyx_L5;
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":907
 *                 quote_balance += order.quantity * order.price
 *             else:
 *                 base_balance += order.quantity             # <<<<<<<<<<<<<<
 * 
 *         return base_balance, quote_balance
 */
    /*else*/ {
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_quantity); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyNumber_InPlaceAdd(__pyx_v_base_balance, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 907, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF_SET(__pyx_v_base_balance, __pyx_t_6);
      __pyx_t_6 = 0;
    }
    __pyx_L5:;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":903
 *             object quote_balance = market.c_get_available_balance(self.quote_asset)
 * 
 *         for order in orders:             # <<<<<<<<<<<<<<
 *             if order.is_buy:
 *                 quote_balance += order.quantity * order.price
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":909
 *                 base_balance += order.quantity
 * 
 *         return base_balance, quote_balance             # <<<<<<<<<<<<<<
 * 
 *     def get_adjusted_available_balance(self, orders: List[LimitOrder]):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 909, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_base_balance);
  __Pyx_GIVEREF(__pyx_v_base_balance);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_base_balance);
  __Pyx_INCREF(__pyx_v_quote_balance);
  __Pyx_GIVEREF(__pyx_v_quote_balance);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_quote_balance);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":893
 *         return self.c_create_base_proposal()
 * 
 *     cdef tuple c_get_adjusted_available_balance(self, list orders):             # <<<<<<<<<<<<<<
 *         """
 *         Calculates the available balance, plus the amount attributed to orders.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_get_adjusted_available_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_base_balance);
  __Pyx_XDECREF(__pyx_v_quote_balance);
  __Pyx_XDECREF(__pyx_v_order);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":911
 *         return base_balance, quote_balance
 * 
 *     def get_adjusted_available_balance(self, orders: List[LimitOrder]):             # <<<<<<<<<<<<<<
 *         return self.c_get_adjusted_available_balance(orders)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_55get_adjusted_available_balance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_55get_adjusted_available_balance = {"get_adjusted_available_balance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_55get_adjusted_available_balance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_55get_adjusted_available_balance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_orders = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_adjusted_available_balance (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_orders,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_orders,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_orders)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 911, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_adjusted_available_balance") < 0)) __PYX_ERR(0, 911, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_orders = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_adjusted_available_balance", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 911, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.get_adjusted_available_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_54get_adjusted_available_balance(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_orders);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_54get_adjusted_available_balance(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_orders) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_adjusted_available_balance", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":912
 * 
 *     def get_adjusted_available_balance(self, orders: List[LimitOrder]):
 *         return self.c_get_adjusted_available_balance(orders)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_apply_order_price_modifiers(self, object proposal):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyList_CheckExact(__pyx_v_orders))||((__pyx_v_orders) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_v_orders))) __PYX_ERR(0, 912, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_adjusted_available_balance(__pyx_v_self, ((PyObject*)__pyx_v_orders)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 912, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":911
 *         return base_balance, quote_balance
 * 
 *     def get_adjusted_available_balance(self, orders: List[LimitOrder]):             # <<<<<<<<<<<<<<
 *         return self.c_get_adjusted_available_balance(orders)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.get_adjusted_available_balance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":914
 *         return self.c_get_adjusted_available_balance(orders)
 * 
 *     cdef c_apply_order_price_modifiers(self, object proposal):             # <<<<<<<<<<<<<<
 *         if self._order_optimization_enabled:
 *             self.c_apply_order_optimization(proposal)
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_apply_order_price_modifiers(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_apply_order_price_modifiers", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":915
 * 
 *     cdef c_apply_order_price_modifiers(self, object proposal):
 *         if self._order_optimization_enabled:             # <<<<<<<<<<<<<<
 *             self.c_apply_order_optimization(proposal)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_order_optimization_enabled != 0);
  if (__pyx_t_1) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":916
 *     cdef c_apply_order_price_modifiers(self, object proposal):
 *         if self._order_optimization_enabled:
 *             self.c_apply_order_optimization(proposal)             # <<<<<<<<<<<<<<
 * 
 *         if self._add_transaction_costs_to_orders:
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_apply_order_optimization(__pyx_v_self, __pyx_v_proposal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 916, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":915
 * 
 *     cdef c_apply_order_price_modifiers(self, object proposal):
 *         if self._order_optimization_enabled:             # <<<<<<<<<<<<<<
 *             self.c_apply_order_optimization(proposal)
 * 
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":918
 *             self.c_apply_order_optimization(proposal)
 * 
 *         if self._add_transaction_costs_to_orders:             # <<<<<<<<<<<<<<
 *             self.c_apply_add_transaction_costs(proposal)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_add_transaction_costs_to_orders != 0);
  if (__pyx_t_1) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":919
 * 
 *         if self._add_transaction_costs_to_orders:
 *             self.c_apply_add_transaction_costs(proposal)             # <<<<<<<<<<<<<<
 * 
 *     def apply_order_price_modifiers(self, proposal: Proposal):
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_apply_add_transaction_costs(__pyx_v_self, __pyx_v_proposal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 919, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":918
 *             self.c_apply_order_optimization(proposal)
 * 
 *         if self._add_transaction_costs_to_orders:             # <<<<<<<<<<<<<<
 *             self.c_apply_add_transaction_costs(proposal)
 * 
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":914
 *         return self.c_get_adjusted_available_balance(orders)
 * 
 *     cdef c_apply_order_price_modifiers(self, object proposal):             # <<<<<<<<<<<<<<
 *         if self._order_optimization_enabled:
 *             self.c_apply_order_optimization(proposal)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_apply_order_price_modifiers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":921
 *             self.c_apply_add_transaction_costs(proposal)
 * 
 *     def apply_order_price_modifiers(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         self.c_apply_order_price_modifiers(proposal)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_57apply_order_price_modifiers(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_57apply_order_price_modifiers = {"apply_order_price_modifiers", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_57apply_order_price_modifiers, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_57apply_order_price_modifiers(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_proposal = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("apply_order_price_modifiers (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_proposal)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 921, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "apply_order_price_modifiers") < 0)) __PYX_ERR(0, 921, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_proposal = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("apply_order_price_modifiers", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 921, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.apply_order_price_modifiers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_56apply_order_price_modifiers(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_proposal);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_56apply_order_price_modifiers(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("apply_order_price_modifiers", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":922
 * 
 *     def apply_order_price_modifiers(self, proposal: Proposal):
 *         self.c_apply_order_price_modifiers(proposal)             # <<<<<<<<<<<<<<
 * 
 *     def apply_budget_constraint(self, proposal: Proposal):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_apply_order_price_modifiers(__pyx_v_self, __pyx_v_proposal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":921
 *             self.c_apply_add_transaction_costs(proposal)
 * 
 *     def apply_order_price_modifiers(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         self.c_apply_order_price_modifiers(proposal)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.apply_order_price_modifiers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":924
 *         self.c_apply_order_price_modifiers(proposal)
 * 
 *     def apply_budget_constraint(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_apply_budget_constraint(proposal)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_59apply_budget_constraint(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_59apply_budget_constraint = {"apply_budget_constraint", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_59apply_budget_constraint, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_59apply_budget_constraint(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_proposal = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("apply_budget_constraint (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_proposal)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 924, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "apply_budget_constraint") < 0)) __PYX_ERR(0, 924, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_proposal = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("apply_budget_constraint", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 924, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.apply_budget_constraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_58apply_budget_constraint(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_proposal);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_58apply_budget_constraint(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("apply_budget_constraint", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":925
 * 
 *     def apply_budget_constraint(self, proposal: Proposal):
 *         return self.c_apply_budget_constraint(proposal)             # <<<<<<<<<<<<<<
 * 
 *     def adjusted_available_balance_for_orders_budget_constrain(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_apply_budget_constraint(__pyx_v_self, __pyx_v_proposal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":924
 *         self.c_apply_order_price_modifiers(proposal)
 * 
 *     def apply_budget_constraint(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_apply_budget_constraint(proposal)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.apply_budget_constraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":927
 *         return self.c_apply_budget_constraint(proposal)
 * 
 *     def adjusted_available_balance_for_orders_budget_constrain(self):             # <<<<<<<<<<<<<<
 *         candidate_hanging_orders = self.hanging_orders_tracker.candidate_hanging_orders_from_pairs()
 *         non_hanging = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_61adjusted_available_balance_for_orders_budget_constrain(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_61adjusted_available_balance_for_orders_budget_constrain = {"adjusted_available_balance_for_orders_budget_constrain", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_61adjusted_available_balance_for_orders_budget_constrain, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_61adjusted_available_balance_for_orders_budget_constrain(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("adjusted_available_balance_for_orders_budget_constrain (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("adjusted_available_balance_for_orders_budget_constrain", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "adjusted_available_balance_for_orders_budget_constrain", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_60adjusted_available_balance_for_orders_budget_constrain(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_60adjusted_available_balance_for_orders_budget_constrain(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_v_candidate_hanging_orders = NULL;
  PyObject *__pyx_v_non_hanging = NULL;
  PyObject *__pyx_v_all_orders = NULL;
  PyObject *__pyx_v_all_non_hanging_orders = NULL;
  PyObject *__pyx_9genexpr11__pyx_v_order = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("adjusted_available_balance_for_orders_budget_constrain", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":928
 * 
 *     def adjusted_available_balance_for_orders_budget_constrain(self):
 *         candidate_hanging_orders = self.hanging_orders_tracker.candidate_hanging_orders_from_pairs()             # <<<<<<<<<<<<<<
 *         non_hanging = []
 *         if self.market_info in self._sb_order_tracker.get_limit_orders():
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hanging_orders_tracker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_candidate_hanging_orders_from_pa); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 928, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_2, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 928, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_v_candidate_hanging_orders = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":929
 *     def adjusted_available_balance_for_orders_budget_constrain(self):
 *         candidate_hanging_orders = self.hanging_orders_tracker.candidate_hanging_orders_from_pairs()
 *         non_hanging = []             # <<<<<<<<<<<<<<
 *         if self.market_info in self._sb_order_tracker.get_limit_orders():
 *             all_orders = self._sb_order_tracker.get_limit_orders()[self.market_info].values()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_non_hanging = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":930
 *         candidate_hanging_orders = self.hanging_orders_tracker.candidate_hanging_orders_from_pairs()
 *         non_hanging = []
 *         if self.market_info in self._sb_order_tracker.get_limit_orders():             # <<<<<<<<<<<<<<
 *             all_orders = self._sb_order_tracker.get_limit_orders()[self.market_info].values()
 *             non_hanging = [order for order in all_orders
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base._sb_order_tracker), __pyx_n_s_get_limit_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 930, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_5, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 930, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_6 = (__Pyx_PySequence_ContainsTF(__pyx_t_1, __pyx_t_3, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 930, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_7 = (__pyx_t_6 != 0);
  if (__pyx_t_7) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":931
 *         non_hanging = []
 *         if self.market_info in self._sb_order_tracker.get_limit_orders():
 *             all_orders = self._sb_order_tracker.get_limit_orders()[self.market_info].values()             # <<<<<<<<<<<<<<
 *             non_hanging = [order for order in all_orders
 *                            if not self._hanging_orders_tracker.is_order_id_in_hanging_orders(order.client_order_id)]
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base._sb_order_tracker), __pyx_n_s_get_limit_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_5, };
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 931, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_market_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_values); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 931, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_5, };
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 931, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __pyx_v_all_orders = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":932
 *         if self.market_info in self._sb_order_tracker.get_limit_orders():
 *             all_orders = self._sb_order_tracker.get_limit_orders()[self.market_info].values()
 *             non_hanging = [order for order in all_orders             # <<<<<<<<<<<<<<
 *                            if not self._hanging_orders_tracker.is_order_id_in_hanging_orders(order.client_order_id)]
 *         all_non_hanging_orders = list(set(non_hanging) - set(candidate_hanging_orders))
 */
    { /* enter inner scope */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 932, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_v_all_orders)) || PyTuple_CheckExact(__pyx_v_all_orders)) {
        __pyx_t_2 = __pyx_v_all_orders; __Pyx_INCREF(__pyx_t_2); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_all_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 932, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 932, __pyx_L6_error)
      }
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_5); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 932, __pyx_L6_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 932, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_5); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 932, __pyx_L6_error)
            #else
            __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 932, __pyx_L6_error)
            __Pyx_GOTREF(__pyx_t_5);
            #endif
          }
        } else {
          __pyx_t_5 = __pyx_t_9(__pyx_t_2);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 932, __pyx_L6_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_5);
        }
        __Pyx_XDECREF_SET(__pyx_9genexpr11__pyx_v_order, __pyx_t_5);
        __pyx_t_5 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":933
 *             all_orders = self._sb_order_tracker.get_limit_orders()[self.market_info].values()
 *             non_hanging = [order for order in all_orders
 *                            if not self._hanging_orders_tracker.is_order_id_in_hanging_orders(order.client_order_id)]             # <<<<<<<<<<<<<<
 *         all_non_hanging_orders = list(set(non_hanging) - set(candidate_hanging_orders))
 *         return self.c_get_adjusted_available_balance(all_non_hanging_orders)
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_hanging_orders_tracker, __pyx_n_s_is_order_id_in_hanging_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 933, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr11__pyx_v_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 933, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = NULL;
        __pyx_t_4 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_4 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_10};
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 933, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 933, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_6 = ((!__pyx_t_7) != 0);
        if (__pyx_t_6) {

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":932
 *         if self.market_info in self._sb_order_tracker.get_limit_orders():
 *             all_orders = self._sb_order_tracker.get_limit_orders()[self.market_info].values()
 *             non_hanging = [order for order in all_orders             # <<<<<<<<<<<<<<
 *                            if not self._hanging_orders_tracker.is_order_id_in_hanging_orders(order.client_order_id)]
 *         all_non_hanging_orders = list(set(non_hanging) - set(candidate_hanging_orders))
 */
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_9genexpr11__pyx_v_order))) __PYX_ERR(0, 932, __pyx_L6_error)

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":933
 *             all_orders = self._sb_order_tracker.get_limit_orders()[self.market_info].values()
 *             non_hanging = [order for order in all_orders
 *                            if not self._hanging_orders_tracker.is_order_id_in_hanging_orders(order.client_order_id)]             # <<<<<<<<<<<<<<
 *         all_non_hanging_orders = list(set(non_hanging) - set(candidate_hanging_orders))
 *         return self.c_get_adjusted_available_balance(all_non_hanging_orders)
 */
        }

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":932
 *         if self.market_info in self._sb_order_tracker.get_limit_orders():
 *             all_orders = self._sb_order_tracker.get_limit_orders()[self.market_info].values()
 *             non_hanging = [order for order in all_orders             # <<<<<<<<<<<<<<
 *                            if not self._hanging_orders_tracker.is_order_id_in_hanging_orders(order.client_order_id)]
 *         all_non_hanging_orders = list(set(non_hanging) - set(candidate_hanging_orders))
 */
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_order); __pyx_9genexpr11__pyx_v_order = 0;
      goto __pyx_L10_exit_scope;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_order); __pyx_9genexpr11__pyx_v_order = 0;
      goto __pyx_L1_error;
      __pyx_L10_exit_scope:;
    } /* exit inner scope */
    __Pyx_DECREF_SET(__pyx_v_non_hanging, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":930
 *         candidate_hanging_orders = self.hanging_orders_tracker.candidate_hanging_orders_from_pairs()
 *         non_hanging = []
 *         if self.market_info in self._sb_order_tracker.get_limit_orders():             # <<<<<<<<<<<<<<
 *             all_orders = self._sb_order_tracker.get_limit_orders()[self.market_info].values()
 *             non_hanging = [order for order in all_orders
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":934
 *             non_hanging = [order for order in all_orders
 *                            if not self._hanging_orders_tracker.is_order_id_in_hanging_orders(order.client_order_id)]
 *         all_non_hanging_orders = list(set(non_hanging) - set(candidate_hanging_orders))             # <<<<<<<<<<<<<<
 *         return self.c_get_adjusted_available_balance(all_non_hanging_orders)
 * 
 */
  __pyx_t_3 = PySet_New(__pyx_v_non_hanging); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = PySet_New(__pyx_v_candidate_hanging_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = PyNumber_Subtract(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PySequence_ListKeepNew(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 934, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_all_non_hanging_orders = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":935
 *                            if not self._hanging_orders_tracker.is_order_id_in_hanging_orders(order.client_order_id)]
 *         all_non_hanging_orders = list(set(non_hanging) - set(candidate_hanging_orders))
 *         return self.c_get_adjusted_available_balance(all_non_hanging_orders)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_apply_budget_constraint(self, object proposal):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_adjusted_available_balance(__pyx_v_self, __pyx_v_all_non_hanging_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 935, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":927
 *         return self.c_apply_budget_constraint(proposal)
 * 
 *     def adjusted_available_balance_for_orders_budget_constrain(self):             # <<<<<<<<<<<<<<
 *         candidate_hanging_orders = self.hanging_orders_tracker.candidate_hanging_orders_from_pairs()
 *         non_hanging = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.adjusted_available_balance_for_orders_budget_constrain", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_candidate_hanging_orders);
  __Pyx_XDECREF(__pyx_v_non_hanging);
  __Pyx_XDECREF(__pyx_v_all_orders);
  __Pyx_XDECREF(__pyx_v_all_non_hanging_orders);
  __Pyx_XDECREF(__pyx_9genexpr11__pyx_v_order);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":937
 *         return self.c_get_adjusted_available_balance(all_non_hanging_orders)
 * 
 *     cdef c_apply_budget_constraint(self, object proposal):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_apply_budget_constraint(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_market = 0;
  PyObject *__pyx_v_quote_size = 0;
  PyObject *__pyx_v_base_size = 0;
  PyObject *__pyx_v_adjusted_amount = 0;
  PyObject *__pyx_v_base_balance = NULL;
  PyObject *__pyx_v_quote_balance = NULL;
  PyObject *__pyx_v_buy = NULL;
  PyObject *__pyx_v_buy_fee = NULL;
  PyObject *__pyx_v_sell = NULL;
  PyObject *__pyx_9genexpr12__pyx_v_o = NULL;
  PyObject *__pyx_9genexpr13__pyx_v_o = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_apply_budget_constraint", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":939
 *     cdef c_apply_budget_constraint(self, object proposal):
 *         cdef:
 *             ExchangeBase market = self._market_info.market             # <<<<<<<<<<<<<<
 *             object quote_size
 *             object base_size
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 939, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 939, __pyx_L1_error)
  __pyx_v_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":944
 *             object adjusted_amount
 * 
 *         base_balance, quote_balance = self.adjusted_available_balance_for_orders_budget_constrain()             # <<<<<<<<<<<<<<
 * 
 *         for buy in proposal.buys:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_adjusted_available_balance_for_o); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 944, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 944, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
    PyObject* sequence = __pyx_t_1;
    Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
    if (unlikely(size != 2)) {
      if (size > 2) __Pyx_RaiseTooManyValuesError(2);
      else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
      __PYX_ERR(0, 944, __pyx_L1_error)
    }
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    if (likely(PyTuple_CheckExact(sequence))) {
      __pyx_t_2 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 1); 
    } else {
      __pyx_t_2 = PyList_GET_ITEM(sequence, 0); 
      __pyx_t_3 = PyList_GET_ITEM(sequence, 1); 
    }
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_t_3);
    #else
    __pyx_t_2 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 944, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 944, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  } else {
    Py_ssize_t index = -1;
    __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 944, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5);
    index = 0; __pyx_t_2 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_2)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_2);
    index = 1; __pyx_t_3 = __pyx_t_6(__pyx_t_5); if (unlikely(!__pyx_t_3)) goto __pyx_L3_unpacking_failed;
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_IternextUnpackEndCheck(__pyx_t_6(__pyx_t_5), 2) < 0) __PYX_ERR(0, 944, __pyx_L1_error)
    __pyx_t_6 = NULL;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L4_unpacking_done;
    __pyx_L3_unpacking_failed:;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
    if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
    __PYX_ERR(0, 944, __pyx_L1_error)
    __pyx_L4_unpacking_done:;
  }
  __pyx_v_base_balance = __pyx_t_2;
  __pyx_t_2 = 0;
  __pyx_v_quote_balance = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":946
 *         base_balance, quote_balance = self.adjusted_available_balance_for_orders_budget_constrain()
 * 
 *         for buy in proposal.buys:             # <<<<<<<<<<<<<<
 *             buy_fee = market.c_get_fee(self.base_asset, self.quote_asset, OrderType.LIMIT, TradeType.BUY,
 *                                        buy.size, buy.price)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_buys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 946, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 946, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 946, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 946, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 946, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_7); __Pyx_INCREF(__pyx_t_1); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 946, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 946, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_8(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 946, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_buy, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":947
 * 
 *         for buy in proposal.buys:
 *             buy_fee = market.c_get_fee(self.base_asset, self.quote_asset, OrderType.LIMIT, TradeType.BUY,             # <<<<<<<<<<<<<<
 *                                        buy.size, buy.price)
 *             quote_size = buy.size * buy.price * (Decimal(1) + buy_fee.percent)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 947, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_BUY); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":948
 *         for buy in proposal.buys:
 *             buy_fee = market.c_get_fee(self.base_asset, self.quote_asset, OrderType.LIMIT, TradeType.BUY,
 *                                        buy.size, buy.price)             # <<<<<<<<<<<<<<
 *             quote_size = buy.size * buy.price * (Decimal(1) + buy_fee.percent)
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy, __pyx_n_s_size); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy, __pyx_n_s_price); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 948, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":947
 * 
 *         for buy in proposal.buys:
 *             buy_fee = market.c_get_fee(self.base_asset, self.quote_asset, OrderType.LIMIT, TradeType.BUY,             # <<<<<<<<<<<<<<
 *                                        buy.size, buy.price)
 *             quote_size = buy.size * buy.price * (Decimal(1) + buy_fee.percent)
 */
    __pyx_t_12 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_fee(__pyx_v_market, ((PyObject*)__pyx_t_1), ((PyObject*)__pyx_t_2), __pyx_t_9, __pyx_t_10, __pyx_t_5, __pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 947, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF_SET(__pyx_v_buy_fee, __pyx_t_12);
    __pyx_t_12 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":949
 *             buy_fee = market.c_get_fee(self.base_asset, self.quote_asset, OrderType.LIMIT, TradeType.BUY,
 *                                        buy.size, buy.price)
 *             quote_size = buy.size * buy.price * (Decimal(1) + buy_fee.percent)             # <<<<<<<<<<<<<<
 * 
 *             # Adjust buy order size to use remaining balance if less than the order amount
 */
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy, __pyx_n_s_size); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy, __pyx_n_s_price); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_5 = PyNumber_Multiply(__pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_10 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_12);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_12, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_int_1};
      __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 949, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    }
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_fee, __pyx_n_s_percent); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_10 = PyNumber_Add(__pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = PyNumber_Multiply(__pyx_t_5, __pyx_t_10); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 949, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF_SET(__pyx_v_quote_size, __pyx_t_12);
    __pyx_t_12 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":952
 * 
 *             # Adjust buy order size to use remaining balance if less than the order amount
 *             if quote_balance < quote_size:             # <<<<<<<<<<<<<<
 *                 adjusted_amount = quote_balance / (buy.price * (Decimal("1") + buy_fee.percent))
 *                 adjusted_amount = market.c_quantize_order_amount(self.trading_pair, adjusted_amount)
 */
    __pyx_t_12 = PyObject_RichCompare(__pyx_v_quote_balance, __pyx_v_quote_size, Py_LT); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 952, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 952, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (__pyx_t_13) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":953
 *             # Adjust buy order size to use remaining balance if less than the order amount
 *             if quote_balance < quote_size:
 *                 adjusted_amount = quote_balance / (buy.price * (Decimal("1") + buy_fee.percent))             # <<<<<<<<<<<<<<
 *                 adjusted_amount = market.c_quantize_order_amount(self.trading_pair, adjusted_amount)
 *                 buy.size = adjusted_amount
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy, __pyx_n_s_price); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 953, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 953, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = NULL;
      __pyx_t_4 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
          __pyx_t_4 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_kp_u_1_2};
        __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 953, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy_fee, __pyx_n_s_percent); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 953, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = PyNumber_Add(__pyx_t_10, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 953, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyNumber_Multiply(__pyx_t_12, __pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 953, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyNumber_Divide(__pyx_v_quote_balance, __pyx_t_5); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 953, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_adjusted_amount, __pyx_t_11);
      __pyx_t_11 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":954
 *             if quote_balance < quote_size:
 *                 adjusted_amount = quote_balance / (buy.price * (Decimal("1") + buy_fee.percent))
 *                 adjusted_amount = market.c_quantize_order_amount(self.trading_pair, adjusted_amount)             # <<<<<<<<<<<<<<
 *                 buy.size = adjusted_amount
 *                 quote_balance = s_decimal_zero
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 954, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_11))||((__pyx_t_11) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_11))) __PYX_ERR(0, 954, __pyx_L1_error)
      __pyx_t_5 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), ((PyObject*)__pyx_t_11), __pyx_v_adjusted_amount, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 954, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF_SET(__pyx_v_adjusted_amount, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":955
 *                 adjusted_amount = quote_balance / (buy.price * (Decimal("1") + buy_fee.percent))
 *                 adjusted_amount = market.c_quantize_order_amount(self.trading_pair, adjusted_amount)
 *                 buy.size = adjusted_amount             # <<<<<<<<<<<<<<
 *                 quote_balance = s_decimal_zero
 *             elif quote_balance == s_decimal_zero:
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_buy, __pyx_n_s_size, __pyx_v_adjusted_amount) < 0) __PYX_ERR(0, 955, __pyx_L1_error)

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":956
 *                 adjusted_amount = market.c_quantize_order_amount(self.trading_pair, adjusted_amount)
 *                 buy.size = adjusted_amount
 *                 quote_balance = s_decimal_zero             # <<<<<<<<<<<<<<
 *             elif quote_balance == s_decimal_zero:
 *                 buy.size = s_decimal_zero
 */
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 956, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF_SET(__pyx_v_quote_balance, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":952
 * 
 *             # Adjust buy order size to use remaining balance if less than the order amount
 *             if quote_balance < quote_size:             # <<<<<<<<<<<<<<
 *                 adjusted_amount = quote_balance / (buy.price * (Decimal("1") + buy_fee.percent))
 *                 adjusted_amount = market.c_quantize_order_amount(self.trading_pair, adjusted_amount)
 */
      goto __pyx_L7;
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":957
 *                 buy.size = adjusted_amount
 *                 quote_balance = s_decimal_zero
 *             elif quote_balance == s_decimal_zero:             # <<<<<<<<<<<<<<
 *                 buy.size = s_decimal_zero
 *             else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 957, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = PyObject_RichCompare(__pyx_v_quote_balance, __pyx_t_5, Py_EQ); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 957, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 957, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (__pyx_t_13) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":958
 *                 quote_balance = s_decimal_zero
 *             elif quote_balance == s_decimal_zero:
 *                 buy.size = s_decimal_zero             # <<<<<<<<<<<<<<
 *             else:
 *                 quote_balance -= quote_size
 */
      __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 958, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_buy, __pyx_n_s_size, __pyx_t_11) < 0) __PYX_ERR(0, 958, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":957
 *                 buy.size = adjusted_amount
 *                 quote_balance = s_decimal_zero
 *             elif quote_balance == s_decimal_zero:             # <<<<<<<<<<<<<<
 *                 buy.size = s_decimal_zero
 *             else:
 */
      goto __pyx_L7;
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":960
 *                 buy.size = s_decimal_zero
 *             else:
 *                 quote_balance -= quote_size             # <<<<<<<<<<<<<<
 * 
 *         proposal.buys = [o for o in proposal.buys if o.size > 0]
 */
    /*else*/ {
      __pyx_t_11 = PyNumber_InPlaceSubtract(__pyx_v_quote_balance, __pyx_v_quote_size); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 960, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF_SET(__pyx_v_quote_balance, __pyx_t_11);
      __pyx_t_11 = 0;
    }
    __pyx_L7:;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":946
 *         base_balance, quote_balance = self.adjusted_available_balance_for_orders_budget_constrain()
 * 
 *         for buy in proposal.buys:             # <<<<<<<<<<<<<<
 *             buy_fee = market.c_get_fee(self.base_asset, self.quote_asset, OrderType.LIMIT, TradeType.BUY,
 *                                        buy.size, buy.price)
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":962
 *                 quote_balance -= quote_size
 * 
 *         proposal.buys = [o for o in proposal.buys if o.size > 0]             # <<<<<<<<<<<<<<
 * 
 *         for sell in proposal.sells:
 */
  { /* enter inner scope */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 962, __pyx_L10_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_buys); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 962, __pyx_L10_error)
    __Pyx_GOTREF(__pyx_t_11);
    if (likely(PyList_CheckExact(__pyx_t_11)) || PyTuple_CheckExact(__pyx_t_11)) {
      __pyx_t_5 = __pyx_t_11; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 962, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 962, __pyx_L10_error)
    }
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_11 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_11); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 962, __pyx_L10_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 962, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_11); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 962, __pyx_L10_error)
          #else
          __pyx_t_11 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 962, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_11);
          #endif
        }
      } else {
        __pyx_t_11 = __pyx_t_8(__pyx_t_5);
        if (unlikely(!__pyx_t_11)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 962, __pyx_L10_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_11);
      }
      __Pyx_XDECREF_SET(__pyx_9genexpr12__pyx_v_o, __pyx_t_11);
      __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr12__pyx_v_o, __pyx_n_s_size); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 962, __pyx_L10_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = PyObject_RichCompare(__pyx_t_11, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 962, __pyx_L10_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 962, __pyx_L10_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (__pyx_t_13) {
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_9genexpr12__pyx_v_o))) __PYX_ERR(0, 962, __pyx_L10_error)
      }
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_9genexpr12__pyx_v_o); __pyx_9genexpr12__pyx_v_o = 0;
    goto __pyx_L14_exit_scope;
    __pyx_L10_error:;
    __Pyx_XDECREF(__pyx_9genexpr12__pyx_v_o); __pyx_9genexpr12__pyx_v_o = 0;
    goto __pyx_L1_error;
    __pyx_L14_exit_scope:;
  } /* exit inner scope */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_proposal, __pyx_n_s_buys, __pyx_t_3) < 0) __PYX_ERR(0, 962, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":964
 *         proposal.buys = [o for o in proposal.buys if o.size > 0]
 * 
 *         for sell in proposal.sells:             # <<<<<<<<<<<<<<
 *             base_size = sell.size
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_sells); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_5 = __pyx_t_3; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 964, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 964, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 964, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 964, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 964, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 964, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 964, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_sell, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":965
 * 
 *         for sell in proposal.sells:
 *             base_size = sell.size             # <<<<<<<<<<<<<<
 * 
 *             # Adjust sell order size to use remaining balance if less than the order amount
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell, __pyx_n_s_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 965, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_XDECREF_SET(__pyx_v_base_size, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":968
 * 
 *             # Adjust sell order size to use remaining balance if less than the order amount
 *             if base_balance < base_size:             # <<<<<<<<<<<<<<
 *                 adjusted_amount = market.c_quantize_order_amount(self.trading_pair, base_balance)
 *                 sell.size = adjusted_amount
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_base_balance, __pyx_v_base_size, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 968, __pyx_L1_error)
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 968, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_13) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":969
 *             # Adjust sell order size to use remaining balance if less than the order amount
 *             if base_balance < base_size:
 *                 adjusted_amount = market.c_quantize_order_amount(self.trading_pair, base_balance)             # <<<<<<<<<<<<<<
 *                 sell.size = adjusted_amount
 *                 base_balance = s_decimal_zero
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 969, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_3))) __PYX_ERR(0, 969, __pyx_L1_error)
      __pyx_t_12 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), ((PyObject*)__pyx_t_3), __pyx_v_base_balance, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 969, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF_SET(__pyx_v_adjusted_amount, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":970
 *             if base_balance < base_size:
 *                 adjusted_amount = market.c_quantize_order_amount(self.trading_pair, base_balance)
 *                 sell.size = adjusted_amount             # <<<<<<<<<<<<<<
 *                 base_balance = s_decimal_zero
 *             elif base_balance == s_decimal_zero:
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_sell, __pyx_n_s_size, __pyx_v_adjusted_amount) < 0) __PYX_ERR(0, 970, __pyx_L1_error)

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":971
 *                 adjusted_amount = market.c_quantize_order_amount(self.trading_pair, base_balance)
 *                 sell.size = adjusted_amount
 *                 base_balance = s_decimal_zero             # <<<<<<<<<<<<<<
 *             elif base_balance == s_decimal_zero:
 *                 sell.size = s_decimal_zero
 */
      __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 971, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF_SET(__pyx_v_base_balance, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":968
 * 
 *             # Adjust sell order size to use remaining balance if less than the order amount
 *             if base_balance < base_size:             # <<<<<<<<<<<<<<
 *                 adjusted_amount = market.c_quantize_order_amount(self.trading_pair, base_balance)
 *                 sell.size = adjusted_amount
 */
      goto __pyx_L17;
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":972
 *                 sell.size = adjusted_amount
 *                 base_balance = s_decimal_zero
 *             elif base_balance == s_decimal_zero:             # <<<<<<<<<<<<<<
 *                 sell.size = s_decimal_zero
 *             else:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_base_balance, __pyx_t_12, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 972, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_13) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":973
 *                 base_balance = s_decimal_zero
 *             elif base_balance == s_decimal_zero:
 *                 sell.size = s_decimal_zero             # <<<<<<<<<<<<<<
 *             else:
 *                 base_balance -= base_size
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 973, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_sell, __pyx_n_s_size, __pyx_t_3) < 0) __PYX_ERR(0, 973, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":972
 *                 sell.size = adjusted_amount
 *                 base_balance = s_decimal_zero
 *             elif base_balance == s_decimal_zero:             # <<<<<<<<<<<<<<
 *                 sell.size = s_decimal_zero
 *             else:
 */
      goto __pyx_L17;
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":975
 *                 sell.size = s_decimal_zero
 *             else:
 *                 base_balance -= base_size             # <<<<<<<<<<<<<<
 * 
 *         proposal.sells = [o for o in proposal.sells if o.size > 0]
 */
    /*else*/ {
      __pyx_t_3 = PyNumber_InPlaceSubtract(__pyx_v_base_balance, __pyx_v_base_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 975, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF_SET(__pyx_v_base_balance, __pyx_t_3);
      __pyx_t_3 = 0;
    }
    __pyx_L17:;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":964
 *         proposal.buys = [o for o in proposal.buys if o.size > 0]
 * 
 *         for sell in proposal.sells:             # <<<<<<<<<<<<<<
 *             base_size = sell.size
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":977
 *                 base_balance -= base_size
 * 
 *         proposal.sells = [o for o in proposal.sells if o.size > 0]             # <<<<<<<<<<<<<<
 * 
 *     def apply_budget_constraint(self, proposal: Proposal):
 */
  { /* enter inner scope */
    __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 977, __pyx_L20_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_sells); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 977, __pyx_L20_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_12 = __pyx_t_3; __Pyx_INCREF(__pyx_t_12); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 977, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_8 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 977, __pyx_L20_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_12))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_12)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 977, __pyx_L20_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_12, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 977, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_12)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_7); __Pyx_INCREF(__pyx_t_3); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 977, __pyx_L20_error)
          #else
          __pyx_t_3 = PySequence_ITEM(__pyx_t_12, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 977, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_3);
          #endif
        }
      } else {
        __pyx_t_3 = __pyx_t_8(__pyx_t_12);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 977, __pyx_L20_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_3);
      }
      __Pyx_XDECREF_SET(__pyx_9genexpr13__pyx_v_o, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr13__pyx_v_o, __pyx_n_s_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 977, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_11 = PyObject_RichCompare(__pyx_t_3, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_11); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 977, __pyx_L20_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_13 = __Pyx_PyObject_IsTrue(__pyx_t_11); if (unlikely((__pyx_t_13 < 0))) __PYX_ERR(0, 977, __pyx_L20_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (__pyx_t_13) {
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_5, (PyObject*)__pyx_9genexpr13__pyx_v_o))) __PYX_ERR(0, 977, __pyx_L20_error)
      }
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_9genexpr13__pyx_v_o); __pyx_9genexpr13__pyx_v_o = 0;
    goto __pyx_L24_exit_scope;
    __pyx_L20_error:;
    __Pyx_XDECREF(__pyx_9genexpr13__pyx_v_o); __pyx_9genexpr13__pyx_v_o = 0;
    goto __pyx_L1_error;
    __pyx_L24_exit_scope:;
  } /* exit inner scope */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_proposal, __pyx_n_s_sells, __pyx_t_5) < 0) __PYX_ERR(0, 977, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":937
 *         return self.c_get_adjusted_available_balance(all_non_hanging_orders)
 * 
 *     cdef c_apply_budget_constraint(self, object proposal):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_apply_budget_constraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_quote_size);
  __Pyx_XDECREF(__pyx_v_base_size);
  __Pyx_XDECREF(__pyx_v_adjusted_amount);
  __Pyx_XDECREF(__pyx_v_base_balance);
  __Pyx_XDECREF(__pyx_v_quote_balance);
  __Pyx_XDECREF(__pyx_v_buy);
  __Pyx_XDECREF(__pyx_v_buy_fee);
  __Pyx_XDECREF(__pyx_v_sell);
  __Pyx_XDECREF(__pyx_9genexpr12__pyx_v_o);
  __Pyx_XDECREF(__pyx_9genexpr13__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":979
 *         proposal.sells = [o for o in proposal.sells if o.size > 0]
 * 
 *     def apply_budget_constraint(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_apply_budget_constraint(proposal)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_63apply_budget_constraint(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_63apply_budget_constraint = {"apply_budget_constraint", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_63apply_budget_constraint, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_63apply_budget_constraint(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_proposal = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("apply_budget_constraint (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_proposal)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 979, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "apply_budget_constraint") < 0)) __PYX_ERR(0, 979, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_proposal = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("apply_budget_constraint", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 979, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.apply_budget_constraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_62apply_budget_constraint(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_proposal);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_62apply_budget_constraint(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("apply_budget_constraint", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":980
 * 
 *     def apply_budget_constraint(self, proposal: Proposal):
 *         return self.c_apply_budget_constraint(proposal)             # <<<<<<<<<<<<<<
 * 
 *     # Compare the market price with the top bid and top ask price
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_apply_budget_constraint(__pyx_v_self, __pyx_v_proposal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 980, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":979
 *         proposal.sells = [o for o in proposal.sells if o.size > 0]
 * 
 *     def apply_budget_constraint(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_apply_budget_constraint(proposal)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.apply_budget_constraint", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1009
 *             # If the price_above_bid is lower than the price suggested by the top pricing proposal,
 *             # lower the price and from there apply the best_order_spread to each order in the next levels
 *             proposal.buys = sorted(proposal.buys, key = lambda p: p.price, reverse = True)             # <<<<<<<<<<<<<<
 *             for i, proposed in enumerate(proposal.buys):
 *                 if proposal.buys[i].price > price_above_bid:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26c_apply_order_optimization_lambda2(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26c_apply_order_optimization_lambda2 = {"lambda2", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26c_apply_order_optimization_lambda2, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26c_apply_order_optimization_lambda2(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_p = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda2 (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_p)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1009, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lambda2") < 0)) __PYX_ERR(0, 1009, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_p = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda2", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1009, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_apply_order_optimization.lambda2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda2(__pyx_self, __pyx_v_p);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda2(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda2", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_p, __pyx_n_s_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1009, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_apply_order_optimization.lambda2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1027
 *             # If the price_below_ask is higher than the price suggested by the pricing proposal,
 *             # increase your price and from there apply the best_order_spread to each order in the next levels
 *             proposal.sells = sorted(proposal.sells, key = lambda p: p.price)             # <<<<<<<<<<<<<<
 *             for i, proposed in enumerate(proposal.sells):
 *                 if proposal.sells[i].price < price_below_ask:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26c_apply_order_optimization_1lambda3(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26c_apply_order_optimization_1lambda3 = {"lambda3", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26c_apply_order_optimization_1lambda3, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26c_apply_order_optimization_1lambda3(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_p = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda3 (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_p)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1027, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "lambda3") < 0)) __PYX_ERR(0, 1027, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_p = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda3", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1027, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_apply_order_optimization.lambda3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda3(__pyx_self, __pyx_v_p);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda3(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_p) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("lambda3", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_p, __pyx_n_s_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1027, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_apply_order_optimization.lambda3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":983
 * 
 *     # Compare the market price with the top bid and top ask price
 *     cdef c_apply_order_optimization(self, object proposal):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_apply_order_optimization(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_market = 0;
  PyObject *__pyx_v_own_buy_size = 0;
  PyObject *__pyx_v_own_sell_size = 0;
  PyObject *__pyx_v_order = NULL;
  PyObject *__pyx_v_top_bid_price = NULL;
  PyObject *__pyx_v_price_quantum = NULL;
  PyObject *__pyx_v_price_above_bid = NULL;
  PyObject *__pyx_v_i = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_proposed = NULL;
  PyObject *__pyx_v_top_ask_price = NULL;
  PyObject *__pyx_v_price_below_ask = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_apply_order_optimization", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":985
 *     cdef c_apply_order_optimization(self, object proposal):
 *         cdef:
 *             ExchangeBase market = self._market_info.market             # <<<<<<<<<<<<<<
 *             object own_buy_size = s_decimal_zero
 *             object own_sell_size = s_decimal_zero
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 985, __pyx_L1_error)
  __pyx_v_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":986
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 *             object own_buy_size = s_decimal_zero             # <<<<<<<<<<<<<<
 *             object own_sell_size = s_decimal_zero
 *             object best_order_spread
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 986, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_own_buy_size = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":987
 *             ExchangeBase market = self._market_info.market
 *             object own_buy_size = s_decimal_zero
 *             object own_sell_size = s_decimal_zero             # <<<<<<<<<<<<<<
 *             object best_order_spread
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 987, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_own_sell_size = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":990
 *             object best_order_spread
 * 
 *         for order in self.active_orders:             # <<<<<<<<<<<<<<
 *             if order.is_buy:
 *                 own_buy_size = order.quantity
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_active_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 990, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 990, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 990, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 990, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 990, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 990, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 990, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 990, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_order, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":991
 * 
 *         for order in self.active_orders:
 *             if order.is_buy:             # <<<<<<<<<<<<<<
 *                 own_buy_size = order.quantity
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_is_buy); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 991, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 991, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_5) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":992
 *         for order in self.active_orders:
 *             if order.is_buy:
 *                 own_buy_size = order.quantity             # <<<<<<<<<<<<<<
 *             else:
 *                 own_sell_size = order.quantity
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_quantity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 992, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_own_buy_size, __pyx_t_1);
      __pyx_t_1 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":991
 * 
 *         for order in self.active_orders:
 *             if order.is_buy:             # <<<<<<<<<<<<<<
 *                 own_buy_size = order.quantity
 *             else:
 */
      goto __pyx_L5;
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":994
 *                 own_buy_size = order.quantity
 *             else:
 *                 own_sell_size = order.quantity             # <<<<<<<<<<<<<<
 * 
 *         if len(proposal.buys) > 0:
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_quantity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 994, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF_SET(__pyx_v_own_sell_size, __pyx_t_1);
      __pyx_t_1 = 0;
    }
    __pyx_L5:;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":990
 *             object best_order_spread
 * 
 *         for order in self.active_orders:             # <<<<<<<<<<<<<<
 *             if order.is_buy:
 *                 own_buy_size = order.quantity
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":996
 *                 own_sell_size = order.quantity
 * 
 *         if len(proposal.buys) > 0:             # <<<<<<<<<<<<<<
 *             # Get the top bid price in the market using order_optimization_depth and your buy order volume
 *             top_bid_price = self._market_info.get_price_for_volume(
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_buys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 996, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_5 = ((__pyx_t_3 > 0) != 0);
  if (__pyx_t_5) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":998
 *         if len(proposal.buys) > 0:
 *             # Get the top bid price in the market using order_optimization_depth and your buy order volume
 *             top_bid_price = self._market_info.get_price_for_volume(             # <<<<<<<<<<<<<<
 *                 False, own_buy_size).result_price
 *             price_quantum = market.c_get_order_price_quantum(
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_get_price_for_volume); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 998, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":999
 *             # Get the top bid price in the market using order_optimization_depth and your buy order volume
 *             top_bid_price = self._market_info.get_price_for_volume(
 *                 False, own_buy_size).result_price             # <<<<<<<<<<<<<<
 *             price_quantum = market.c_get_order_price_quantum(
 *                 self.trading_pair,
 */
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_6, Py_False, __pyx_v_own_buy_size};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 998, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_result_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 999, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_top_bid_price = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1001
 *                 False, own_buy_size).result_price
 *             price_quantum = market.c_get_order_price_quantum(
 *                 self.trading_pair,             # <<<<<<<<<<<<<<
 *                 top_bid_price
 *             )
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1001, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 1001, __pyx_L1_error)

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1000
 *             top_bid_price = self._market_info.get_price_for_volume(
 *                 False, own_buy_size).result_price
 *             price_quantum = market.c_get_order_price_quantum(             # <<<<<<<<<<<<<<
 *                 self.trading_pair,
 *                 top_bid_price
 */
    __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_order_price_quantum(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), ((PyObject*)__pyx_t_1), __pyx_v_top_bid_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1000, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_price_quantum = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1005
 *             )
 *             # Get the price above the top bid
 *             price_above_bid = (ceil(top_bid_price / price_quantum) + 1) * price_quantum             # <<<<<<<<<<<<<<
 * 
 *             # If the price_above_bid is lower than the price suggested by the top pricing proposal,
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_ceil); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1005, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyNumber_Divide(__pyx_v_top_bid_price, __pyx_v_price_quantum); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1005, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1005, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1005, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_1, __pyx_v_price_quantum); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1005, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_price_above_bid = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1009
 *             # If the price_above_bid is lower than the price suggested by the top pricing proposal,
 *             # lower the price and from there apply the best_order_spread to each order in the next levels
 *             proposal.buys = sorted(proposal.buys, key = lambda p: p.price, reverse = True)             # <<<<<<<<<<<<<<
 *             for i, proposed in enumerate(proposal.buys):
 *                 if proposal.buys[i].price > price_above_bid:
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_buys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1009, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1009, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1009, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26c_apply_order_optimization_lambda2, 0, __pyx_n_s_AvellanedaMarketMakingStrategy_c_2, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1009, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_key, __pyx_t_6) < 0) __PYX_ERR(0, 1009, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_reverse, Py_True) < 0) __PYX_ERR(0, 1009, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1009, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_proposal, __pyx_n_s_buys, __pyx_t_6) < 0) __PYX_ERR(0, 1009, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1010
 *             # lower the price and from there apply the best_order_spread to each order in the next levels
 *             proposal.buys = sorted(proposal.buys, key = lambda p: p.price, reverse = True)
 *             for i, proposed in enumerate(proposal.buys):             # <<<<<<<<<<<<<<
 *                 if proposal.buys[i].price > price_above_bid:
 *                     proposal.buys[i].price = market.c_quantize_order_price(self.trading_pair, price_above_bid)
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_6 = __pyx_int_0;
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_buys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1010, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1010, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1010, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 1010, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1010, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 1010, __pyx_L1_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1010, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_4(__pyx_t_1);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1010, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_v_proposed, __pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_6);
      __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_t_6, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1010, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6);
      __pyx_t_6 = __pyx_t_2;
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1011
 *             proposal.buys = sorted(proposal.buys, key = lambda p: p.price, reverse = True)
 *             for i, proposed in enumerate(proposal.buys):
 *                 if proposal.buys[i].price > price_above_bid:             # <<<<<<<<<<<<<<
 *                     proposal.buys[i].price = market.c_quantize_order_price(self.trading_pair, price_above_bid)
 * 
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_buys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1011, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1011, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1011, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_2, __pyx_v_price_above_bid, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1011, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1011, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_5) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1012
 *             for i, proposed in enumerate(proposal.buys):
 *                 if proposal.buys[i].price > price_above_bid:
 *                     proposal.buys[i].price = market.c_quantize_order_price(self.trading_pair, price_above_bid)             # <<<<<<<<<<<<<<
 * 
 *         if len(proposal.sells) > 0:
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1012, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (!(likely(PyUnicode_CheckExact(__pyx_t_8))||((__pyx_t_8) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_8))) __PYX_ERR(0, 1012, __pyx_L1_error)
        __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), ((PyObject*)__pyx_t_8), __pyx_v_price_above_bid); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1012, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_buys); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1012, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = __Pyx_PyObject_GetItem(__pyx_t_8, __pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1012, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (__Pyx_PyObject_SetAttrStr(__pyx_t_9, __pyx_n_s_price, __pyx_t_2) < 0) __PYX_ERR(0, 1012, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1011
 *             proposal.buys = sorted(proposal.buys, key = lambda p: p.price, reverse = True)
 *             for i, proposed in enumerate(proposal.buys):
 *                 if proposal.buys[i].price > price_above_bid:             # <<<<<<<<<<<<<<
 *                     proposal.buys[i].price = market.c_quantize_order_price(self.trading_pair, price_above_bid)
 * 
 */
      }

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1010
 *             # lower the price and from there apply the best_order_spread to each order in the next levels
 *             proposal.buys = sorted(proposal.buys, key = lambda p: p.price, reverse = True)
 *             for i, proposed in enumerate(proposal.buys):             # <<<<<<<<<<<<<<
 *                 if proposal.buys[i].price > price_above_bid:
 *                     proposal.buys[i].price = market.c_quantize_order_price(self.trading_pair, price_above_bid)
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":996
 *                 own_sell_size = order.quantity
 * 
 *         if len(proposal.buys) > 0:             # <<<<<<<<<<<<<<
 *             # Get the top bid price in the market using order_optimization_depth and your buy order volume
 *             top_bid_price = self._market_info.get_price_for_volume(
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1014
 *                     proposal.buys[i].price = market.c_quantize_order_price(self.trading_pair, price_above_bid)
 * 
 *         if len(proposal.sells) > 0:             # <<<<<<<<<<<<<<
 *             # Get the top ask price in the market using order_optimization_depth and your sell order volume
 *             top_ask_price = self._market_info.get_price_for_volume(
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_sells); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_5 = ((__pyx_t_3 > 0) != 0);
  if (__pyx_t_5) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1016
 *         if len(proposal.sells) > 0:
 *             # Get the top ask price in the market using order_optimization_depth and your sell order volume
 *             top_ask_price = self._market_info.get_price_for_volume(             # <<<<<<<<<<<<<<
 *                 True, own_sell_size).result_price
 *             price_quantum = market.c_get_order_price_quantum(
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_get_price_for_volume); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1017
 *             # Get the top ask price in the market using order_optimization_depth and your sell order volume
 *             top_ask_price = self._market_info.get_price_for_volume(
 *                 True, own_sell_size).result_price             # <<<<<<<<<<<<<<
 *             price_quantum = market.c_get_order_price_quantum(
 *                 self.trading_pair,
 */
    __pyx_t_9 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_9, Py_True, __pyx_v_own_sell_size};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1016, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_result_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1017, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_top_ask_price = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1019
 *                 True, own_sell_size).result_price
 *             price_quantum = market.c_get_order_price_quantum(
 *                 self.trading_pair,             # <<<<<<<<<<<<<<
 *                 top_ask_price
 *             )
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1019, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 1019, __pyx_L1_error)

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1018
 *             top_ask_price = self._market_info.get_price_for_volume(
 *                 True, own_sell_size).result_price
 *             price_quantum = market.c_get_order_price_quantum(             # <<<<<<<<<<<<<<
 *                 self.trading_pair,
 *                 top_ask_price
 */
    __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_order_price_quantum(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), ((PyObject*)__pyx_t_1), __pyx_v_top_ask_price); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF_SET(__pyx_v_price_quantum, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1023
 *             )
 *             # Get the price below the top ask
 *             price_below_ask = (floor(top_ask_price / price_quantum) - 1) * price_quantum             # <<<<<<<<<<<<<<
 * 
 *             # If the price_below_ask is higher than the price suggested by the pricing proposal,
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_floor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1023, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_v_top_ask_price, __pyx_v_price_quantum); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1023, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_2 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_9};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1023, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_1 = __Pyx_PyInt_SubtractObjC(__pyx_t_6, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1023, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyNumber_Multiply(__pyx_t_1, __pyx_v_price_quantum); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1023, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_price_below_ask = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1027
 *             # If the price_below_ask is higher than the price suggested by the pricing proposal,
 *             # increase your price and from there apply the best_order_spread to each order in the next levels
 *             proposal.sells = sorted(proposal.sells, key = lambda p: p.price)             # <<<<<<<<<<<<<<
 *             for i, proposed in enumerate(proposal.sells):
 *                 if proposal.sells[i].price < price_below_ask:
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_sells); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_9 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26c_apply_order_optimization_1lambda3, 0, __pyx_n_s_AvellanedaMarketMakingStrategy_c_2, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_key, __pyx_t_9) < 0) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_sorted, __pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_proposal, __pyx_n_s_sells, __pyx_t_9) < 0) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1028
 *             # increase your price and from there apply the best_order_spread to each order in the next levels
 *             proposal.sells = sorted(proposal.sells, key = lambda p: p.price)
 *             for i, proposed in enumerate(proposal.sells):             # <<<<<<<<<<<<<<
 *                 if proposal.sells[i].price < price_below_ask:
 *                     proposal.sells[i].price = market.c_quantize_order_price(self.trading_pair, price_below_ask)
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_9 = __pyx_int_0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_sells); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1028, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_1 = __pyx_t_6; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
      __pyx_t_4 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1028, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (likely(!__pyx_t_4)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 1028, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1028, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_6); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 1028, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1028, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_4(__pyx_t_1);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1028, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_proposed, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_9);
      __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_9, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1028, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_9);
      __pyx_t_9 = __pyx_t_6;
      __pyx_t_6 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1029
 *             proposal.sells = sorted(proposal.sells, key = lambda p: p.price)
 *             for i, proposed in enumerate(proposal.sells):
 *                 if proposal.sells[i].price < price_below_ask:             # <<<<<<<<<<<<<<
 *                     proposal.sells[i].price = market.c_quantize_order_price(self.trading_pair, price_below_ask)
 * 
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_sells); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_2 = __Pyx_PyObject_GetItem(__pyx_t_6, __pyx_v_i); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_price); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_RichCompare(__pyx_t_6, __pyx_v_price_below_ask, Py_LT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1029, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (__pyx_t_5) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1030
 *             for i, proposed in enumerate(proposal.sells):
 *                 if proposal.sells[i].price < price_below_ask:
 *                     proposal.sells[i].price = market.c_quantize_order_price(self.trading_pair, price_below_ask)             # <<<<<<<<<<<<<<
 * 
 *     def apply_order_optimization(self, proposal: Proposal):
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1030, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 1030, __pyx_L1_error)
        __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), ((PyObject*)__pyx_t_2), __pyx_v_price_below_ask); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1030, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_sells); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1030, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_2, __pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1030, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__Pyx_PyObject_SetAttrStr(__pyx_t_8, __pyx_n_s_price, __pyx_t_6) < 0) __PYX_ERR(0, 1030, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1029
 *             proposal.sells = sorted(proposal.sells, key = lambda p: p.price)
 *             for i, proposed in enumerate(proposal.sells):
 *                 if proposal.sells[i].price < price_below_ask:             # <<<<<<<<<<<<<<
 *                     proposal.sells[i].price = market.c_quantize_order_price(self.trading_pair, price_below_ask)
 * 
 */
      }

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1028
 *             # increase your price and from there apply the best_order_spread to each order in the next levels
 *             proposal.sells = sorted(proposal.sells, key = lambda p: p.price)
 *             for i, proposed in enumerate(proposal.sells):             # <<<<<<<<<<<<<<
 *                 if proposal.sells[i].price < price_below_ask:
 *                     proposal.sells[i].price = market.c_quantize_order_price(self.trading_pair, price_below_ask)
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1014
 *                     proposal.buys[i].price = market.c_quantize_order_price(self.trading_pair, price_above_bid)
 * 
 *         if len(proposal.sells) > 0:             # <<<<<<<<<<<<<<
 *             # Get the top ask price in the market using order_optimization_depth and your sell order volume
 *             top_ask_price = self._market_info.get_price_for_volume(
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":983
 * 
 *     # Compare the market price with the top bid and top ask price
 *     cdef c_apply_order_optimization(self, object proposal):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_apply_order_optimization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_own_buy_size);
  __Pyx_XDECREF(__pyx_v_own_sell_size);
  __Pyx_XDECREF(__pyx_v_order);
  __Pyx_XDECREF(__pyx_v_top_bid_price);
  __Pyx_XDECREF(__pyx_v_price_quantum);
  __Pyx_XDECREF(__pyx_v_price_above_bid);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_proposed);
  __Pyx_XDECREF(__pyx_v_top_ask_price);
  __Pyx_XDECREF(__pyx_v_price_below_ask);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1032
 *                     proposal.sells[i].price = market.c_quantize_order_price(self.trading_pair, price_below_ask)
 * 
 *     def apply_order_optimization(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_apply_order_optimization(proposal)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_65apply_order_optimization(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_65apply_order_optimization = {"apply_order_optimization", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_65apply_order_optimization, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_65apply_order_optimization(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_proposal = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("apply_order_optimization (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_proposal)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1032, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "apply_order_optimization") < 0)) __PYX_ERR(0, 1032, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_proposal = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("apply_order_optimization", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1032, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.apply_order_optimization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_64apply_order_optimization(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_proposal);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_64apply_order_optimization(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("apply_order_optimization", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1033
 * 
 *     def apply_order_optimization(self, proposal: Proposal):
 *         return self.c_apply_order_optimization(proposal)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_apply_order_amount_eta_transformation(self, object proposal):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_apply_order_optimization(__pyx_v_self, __pyx_v_proposal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1033, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1032
 *                     proposal.sells[i].price = market.c_quantize_order_price(self.trading_pair, price_below_ask)
 * 
 *     def apply_order_optimization(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_apply_order_optimization(proposal)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.apply_order_optimization", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1035
 *         return self.c_apply_order_optimization(proposal)
 * 
 *     cdef c_apply_order_amount_eta_transformation(self, object proposal):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_apply_order_amount_eta_transformation(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_market = 0;
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_q = NULL;
  PyObject *__pyx_v_i = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_proposed = NULL;
  PyObject *__pyx_9genexpr14__pyx_v_o = NULL;
  PyObject *__pyx_9genexpr15__pyx_v_o = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_apply_order_amount_eta_transformation", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1037
 *     cdef c_apply_order_amount_eta_transformation(self, object proposal):
 *         cdef:
 *             ExchangeBase market = self._market_info.market             # <<<<<<<<<<<<<<
 *             str trading_pair = self._market_info.trading_pair
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1037, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 1037, __pyx_L1_error)
  __pyx_v_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1038
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 *             str trading_pair = self._market_info.trading_pair             # <<<<<<<<<<<<<<
 * 
 *         # Order amounts should be changed only if order_override is not active
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1038, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 1038, __pyx_L1_error)
  __pyx_v_trading_pair = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1041
 * 
 *         # Order amounts should be changed only if order_override is not active
 *         if (self._order_override is None) or (len(self._order_override) == 0):             # <<<<<<<<<<<<<<
 *             # eta parameter is described in the paper as the shape parameter for having exponentially decreasing order amount
 *             # for orders that go against inventory target (i.e. Want to buy when excess inventory or sell when deficit inventory)
 */
  __pyx_t_3 = (__pyx_v_self->_order_override == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (!__pyx_t_4) {
  } else {
    __pyx_t_2 = __pyx_t_4;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_1 = __pyx_v_self->_order_override;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_5 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = ((__pyx_t_5 == 0) != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1044
 *             # eta parameter is described in the paper as the shape parameter for having exponentially decreasing order amount
 *             # for orders that go against inventory target (i.e. Want to buy when excess inventory or sell when deficit inventory)
 *             q = market.get_balance(self.base_asset) - self.c_calculate_target_inventory()             # <<<<<<<<<<<<<<
 *             if len(proposal.buys) > 0:
 *                 if q > 0:
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_market), __pyx_n_s_get_balance); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    __pyx_t_9 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
        __pyx_t_9 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_7};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1044, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_target_inventory(__pyx_v_self); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyNumber_Subtract(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1044, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_v_q = __pyx_t_7;
    __pyx_t_7 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1045
 *             # for orders that go against inventory target (i.e. Want to buy when excess inventory or sell when deficit inventory)
 *             q = market.get_balance(self.base_asset) - self.c_calculate_target_inventory()
 *             if len(proposal.buys) > 0:             # <<<<<<<<<<<<<<
 *                 if q > 0:
 *                     for i, proposed in enumerate(proposal.buys):
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_buys); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1045, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1045, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_2 = ((__pyx_t_5 > 0) != 0);
    if (__pyx_t_2) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1046
 *             q = market.get_balance(self.base_asset) - self.c_calculate_target_inventory()
 *             if len(proposal.buys) > 0:
 *                 if q > 0:             # <<<<<<<<<<<<<<
 *                     for i, proposed in enumerate(proposal.buys):
 * 
 */
      __pyx_t_7 = PyObject_RichCompare(__pyx_v_q, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1046, __pyx_L1_error)
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1046, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__pyx_t_2) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1047
 *             if len(proposal.buys) > 0:
 *                 if q > 0:
 *                     for i, proposed in enumerate(proposal.buys):             # <<<<<<<<<<<<<<
 * 
 *                         proposal.buys[i].size = market.c_quantize_order_amount(trading_pair, proposal.buys[i].size * Decimal.exp(-self._eta * q))
 */
        __Pyx_INCREF(__pyx_int_0);
        __pyx_t_7 = __pyx_int_0;
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_buys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1047, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
          __pyx_t_1 = __pyx_t_6; __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
          __pyx_t_10 = NULL;
        } else {
          __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1047, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1047, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        for (;;) {
          if (likely(!__pyx_t_10)) {
            if (likely(PyList_CheckExact(__pyx_t_1))) {
              if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1047, __pyx_L1_error)
              #else
              __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1047, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              #endif
            } else {
              if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1047, __pyx_L1_error)
              #else
              __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1047, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              #endif
            }
          } else {
            __pyx_t_6 = __pyx_t_10(__pyx_t_1);
            if (unlikely(!__pyx_t_6)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1047, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_6);
          }
          __Pyx_XDECREF_SET(__pyx_v_proposed, __pyx_t_6);
          __pyx_t_6 = 0;
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_7);
          __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_7, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1047, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7);
          __pyx_t_7 = __pyx_t_6;
          __pyx_t_6 = 0;

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1049
 *                     for i, proposed in enumerate(proposal.buys):
 * 
 *                         proposal.buys[i].size = market.c_quantize_order_amount(trading_pair, proposal.buys[i].size * Decimal.exp(-self._eta * q))             # <<<<<<<<<<<<<<
 *                     proposal.buys = [o for o in proposal.buys if o.size > 0]
 * 
 */
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_buys); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1049, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_8 = __Pyx_PyObject_GetItem(__pyx_t_6, __pyx_v_i); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1049, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_size); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1049, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1049, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_exp); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1049, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = PyNumber_Negative(__pyx_v_self->_eta); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1049, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_13 = PyNumber_Multiply(__pyx_t_11, __pyx_v_q); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1049, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = NULL;
          __pyx_t_9 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
              __pyx_t_9 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_13};
            __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1049, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          }
          __pyx_t_12 = PyNumber_Multiply(__pyx_t_6, __pyx_t_8); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1049, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), __pyx_v_trading_pair, __pyx_t_12, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1049, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_buys); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1049, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_12, __pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1049, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (__Pyx_PyObject_SetAttrStr(__pyx_t_6, __pyx_n_s_size, __pyx_t_8) < 0) __PYX_ERR(0, 1049, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1047
 *             if len(proposal.buys) > 0:
 *                 if q > 0:
 *                     for i, proposed in enumerate(proposal.buys):             # <<<<<<<<<<<<<<
 * 
 *                         proposal.buys[i].size = market.c_quantize_order_amount(trading_pair, proposal.buys[i].size * Decimal.exp(-self._eta * q))
 */
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1050
 * 
 *                         proposal.buys[i].size = market.c_quantize_order_amount(trading_pair, proposal.buys[i].size * Decimal.exp(-self._eta * q))
 *                     proposal.buys = [o for o in proposal.buys if o.size > 0]             # <<<<<<<<<<<<<<
 * 
 *             if len(proposal.sells) > 0:
 */
        { /* enter inner scope */
          __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1050, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_buys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1050, __pyx_L12_error)
          __Pyx_GOTREF(__pyx_t_1);
          if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
            __pyx_t_6 = __pyx_t_1; __Pyx_INCREF(__pyx_t_6); __pyx_t_5 = 0;
            __pyx_t_10 = NULL;
          } else {
            __pyx_t_5 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1050, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1050, __pyx_L12_error)
          }
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          for (;;) {
            if (likely(!__pyx_t_10)) {
              if (likely(PyList_CheckExact(__pyx_t_6))) {
                if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_6)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_1 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1050, __pyx_L12_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_6, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1050, __pyx_L12_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              } else {
                if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1050, __pyx_L12_error)
                #else
                __pyx_t_1 = PySequence_ITEM(__pyx_t_6, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1050, __pyx_L12_error)
                __Pyx_GOTREF(__pyx_t_1);
                #endif
              }
            } else {
              __pyx_t_1 = __pyx_t_10(__pyx_t_6);
              if (unlikely(!__pyx_t_1)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 1050, __pyx_L12_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_1);
            }
            __Pyx_XDECREF_SET(__pyx_9genexpr14__pyx_v_o, __pyx_t_1);
            __pyx_t_1 = 0;
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr14__pyx_v_o, __pyx_n_s_size); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1050, __pyx_L12_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_8 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1050, __pyx_L12_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1050, __pyx_L12_error)
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (__pyx_t_2) {
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_9genexpr14__pyx_v_o))) __PYX_ERR(0, 1050, __pyx_L12_error)
            }
          }
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_9genexpr14__pyx_v_o); __pyx_9genexpr14__pyx_v_o = 0;
          goto __pyx_L16_exit_scope;
          __pyx_L12_error:;
          __Pyx_XDECREF(__pyx_9genexpr14__pyx_v_o); __pyx_9genexpr14__pyx_v_o = 0;
          goto __pyx_L1_error;
          __pyx_L16_exit_scope:;
        } /* exit inner scope */
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_proposal, __pyx_n_s_buys, __pyx_t_7) < 0) __PYX_ERR(0, 1050, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1046
 *             q = market.get_balance(self.base_asset) - self.c_calculate_target_inventory()
 *             if len(proposal.buys) > 0:
 *                 if q > 0:             # <<<<<<<<<<<<<<
 *                     for i, proposed in enumerate(proposal.buys):
 * 
 */
      }

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1045
 *             # for orders that go against inventory target (i.e. Want to buy when excess inventory or sell when deficit inventory)
 *             q = market.get_balance(self.base_asset) - self.c_calculate_target_inventory()
 *             if len(proposal.buys) > 0:             # <<<<<<<<<<<<<<
 *                 if q > 0:
 *                     for i, proposed in enumerate(proposal.buys):
 */
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1052
 *                     proposal.buys = [o for o in proposal.buys if o.size > 0]
 * 
 *             if len(proposal.sells) > 0:             # <<<<<<<<<<<<<<
 *                 if q < 0:
 *                     for i, proposed in enumerate(proposal.sells):
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_sells); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1052, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_5 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_5 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1052, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_2 = ((__pyx_t_5 > 0) != 0);
    if (__pyx_t_2) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1053
 * 
 *             if len(proposal.sells) > 0:
 *                 if q < 0:             # <<<<<<<<<<<<<<
 *                     for i, proposed in enumerate(proposal.sells):
 *                         proposal.sells[i].size = market.c_quantize_order_amount(trading_pair, proposal.sells[i].size * Decimal.exp(self._eta * q))
 */
      __pyx_t_7 = PyObject_RichCompare(__pyx_v_q, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_7); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1053, __pyx_L1_error)
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1053, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (__pyx_t_2) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1054
 *             if len(proposal.sells) > 0:
 *                 if q < 0:
 *                     for i, proposed in enumerate(proposal.sells):             # <<<<<<<<<<<<<<
 *                         proposal.sells[i].size = market.c_quantize_order_amount(trading_pair, proposal.sells[i].size * Decimal.exp(self._eta * q))
 *                     proposal.sells = [o for o in proposal.sells if o.size > 0]
 */
        __Pyx_INCREF(__pyx_int_0);
        __pyx_t_7 = __pyx_int_0;
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_sells); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1054, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
          __pyx_t_8 = __pyx_t_6; __Pyx_INCREF(__pyx_t_8); __pyx_t_5 = 0;
          __pyx_t_10 = NULL;
        } else {
          __pyx_t_5 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1054, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1054, __pyx_L1_error)
        }
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        for (;;) {
          if (likely(!__pyx_t_10)) {
            if (likely(PyList_CheckExact(__pyx_t_8))) {
              if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_8)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_6 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1054, __pyx_L1_error)
              #else
              __pyx_t_6 = PySequence_ITEM(__pyx_t_8, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1054, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              #endif
            } else {
              if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_5); __Pyx_INCREF(__pyx_t_6); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1054, __pyx_L1_error)
              #else
              __pyx_t_6 = PySequence_ITEM(__pyx_t_8, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1054, __pyx_L1_error)
              __Pyx_GOTREF(__pyx_t_6);
              #endif
            }
          } else {
            __pyx_t_6 = __pyx_t_10(__pyx_t_8);
            if (unlikely(!__pyx_t_6)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1054, __pyx_L1_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_6);
          }
          __Pyx_XDECREF_SET(__pyx_v_proposed, __pyx_t_6);
          __pyx_t_6 = 0;
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_7);
          __pyx_t_6 = __Pyx_PyInt_AddObjC(__pyx_t_7, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1054, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_7);
          __pyx_t_7 = __pyx_t_6;
          __pyx_t_6 = 0;

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1055
 *                 if q < 0:
 *                     for i, proposed in enumerate(proposal.sells):
 *                         proposal.sells[i].size = market.c_quantize_order_amount(trading_pair, proposal.sells[i].size * Decimal.exp(self._eta * q))             # <<<<<<<<<<<<<<
 *                     proposal.sells = [o for o in proposal.sells if o.size > 0]
 * 
 */
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_sells); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1055, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_1 = __Pyx_PyObject_GetItem(__pyx_t_6, __pyx_v_i); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_size); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1055, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1055, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_exp); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1055, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_12 = PyNumber_Multiply(__pyx_v_self->_eta, __pyx_v_q); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1055, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_11 = NULL;
          __pyx_t_9 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_13);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_13, function);
              __pyx_t_9 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_12};
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_9, 1+__pyx_t_9);
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
          __pyx_t_13 = PyNumber_Multiply(__pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1055, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), __pyx_v_trading_pair, __pyx_t_13, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_sells); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1055, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_6 = __Pyx_PyObject_GetItem(__pyx_t_13, __pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1055, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (__Pyx_PyObject_SetAttrStr(__pyx_t_6, __pyx_n_s_size, __pyx_t_1) < 0) __PYX_ERR(0, 1055, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1054
 *             if len(proposal.sells) > 0:
 *                 if q < 0:
 *                     for i, proposed in enumerate(proposal.sells):             # <<<<<<<<<<<<<<
 *                         proposal.sells[i].size = market.c_quantize_order_amount(trading_pair, proposal.sells[i].size * Decimal.exp(self._eta * q))
 *                     proposal.sells = [o for o in proposal.sells if o.size > 0]
 */
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1056
 *                     for i, proposed in enumerate(proposal.sells):
 *                         proposal.sells[i].size = market.c_quantize_order_amount(trading_pair, proposal.sells[i].size * Decimal.exp(self._eta * q))
 *                     proposal.sells = [o for o in proposal.sells if o.size > 0]             # <<<<<<<<<<<<<<
 * 
 *     def apply_order_amount_eta_transformation(self, proposal: Proposal):
 */
        { /* enter inner scope */
          __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1056, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_sells); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1056, __pyx_L23_error)
          __Pyx_GOTREF(__pyx_t_8);
          if (likely(PyList_CheckExact(__pyx_t_8)) || PyTuple_CheckExact(__pyx_t_8)) {
            __pyx_t_6 = __pyx_t_8; __Pyx_INCREF(__pyx_t_6); __pyx_t_5 = 0;
            __pyx_t_10 = NULL;
          } else {
            __pyx_t_5 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1056, __pyx_L23_error)
            __Pyx_GOTREF(__pyx_t_6);
            __pyx_t_10 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1056, __pyx_L23_error)
          }
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          for (;;) {
            if (likely(!__pyx_t_10)) {
              if (likely(PyList_CheckExact(__pyx_t_6))) {
                if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_6)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_8 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_5); __Pyx_INCREF(__pyx_t_8); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1056, __pyx_L23_error)
                #else
                __pyx_t_8 = PySequence_ITEM(__pyx_t_6, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1056, __pyx_L23_error)
                __Pyx_GOTREF(__pyx_t_8);
                #endif
              } else {
                if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_5); __Pyx_INCREF(__pyx_t_8); __pyx_t_5++; if (unlikely((0 < 0))) __PYX_ERR(0, 1056, __pyx_L23_error)
                #else
                __pyx_t_8 = PySequence_ITEM(__pyx_t_6, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1056, __pyx_L23_error)
                __Pyx_GOTREF(__pyx_t_8);
                #endif
              }
            } else {
              __pyx_t_8 = __pyx_t_10(__pyx_t_6);
              if (unlikely(!__pyx_t_8)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(0, 1056, __pyx_L23_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_8);
            }
            __Pyx_XDECREF_SET(__pyx_9genexpr15__pyx_v_o, __pyx_t_8);
            __pyx_t_8 = 0;
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr15__pyx_v_o, __pyx_n_s_size); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1056, __pyx_L23_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_1 = PyObject_RichCompare(__pyx_t_8, __pyx_int_0, Py_GT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1056, __pyx_L23_error)
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1056, __pyx_L23_error)
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (__pyx_t_2) {
              if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_9genexpr15__pyx_v_o))) __PYX_ERR(0, 1056, __pyx_L23_error)
            }
          }
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_XDECREF(__pyx_9genexpr15__pyx_v_o); __pyx_9genexpr15__pyx_v_o = 0;
          goto __pyx_L27_exit_scope;
          __pyx_L23_error:;
          __Pyx_XDECREF(__pyx_9genexpr15__pyx_v_o); __pyx_9genexpr15__pyx_v_o = 0;
          goto __pyx_L1_error;
          __pyx_L27_exit_scope:;
        } /* exit inner scope */
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_proposal, __pyx_n_s_sells, __pyx_t_7) < 0) __PYX_ERR(0, 1056, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1053
 * 
 *             if len(proposal.sells) > 0:
 *                 if q < 0:             # <<<<<<<<<<<<<<
 *                     for i, proposed in enumerate(proposal.sells):
 *                         proposal.sells[i].size = market.c_quantize_order_amount(trading_pair, proposal.sells[i].size * Decimal.exp(self._eta * q))
 */
      }

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1052
 *                     proposal.buys = [o for o in proposal.buys if o.size > 0]
 * 
 *             if len(proposal.sells) > 0:             # <<<<<<<<<<<<<<
 *                 if q < 0:
 *                     for i, proposed in enumerate(proposal.sells):
 */
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1041
 * 
 *         # Order amounts should be changed only if order_override is not active
 *         if (self._order_override is None) or (len(self._order_override) == 0):             # <<<<<<<<<<<<<<
 *             # eta parameter is described in the paper as the shape parameter for having exponentially decreasing order amount
 *             # for orders that go against inventory target (i.e. Want to buy when excess inventory or sell when deficit inventory)
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1035
 *         return self.c_apply_order_optimization(proposal)
 * 
 *     cdef c_apply_order_amount_eta_transformation(self, object proposal):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_apply_order_amount_eta_transformation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_trading_pair);
  __Pyx_XDECREF(__pyx_v_q);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XDECREF(__pyx_v_proposed);
  __Pyx_XDECREF(__pyx_9genexpr14__pyx_v_o);
  __Pyx_XDECREF(__pyx_9genexpr15__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1058
 *                     proposal.sells = [o for o in proposal.sells if o.size > 0]
 * 
 *     def apply_order_amount_eta_transformation(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         self.c_apply_order_amount_eta_transformation(proposal)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_67apply_order_amount_eta_transformation(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_67apply_order_amount_eta_transformation = {"apply_order_amount_eta_transformation", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_67apply_order_amount_eta_transformation, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_67apply_order_amount_eta_transformation(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_proposal = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("apply_order_amount_eta_transformation (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_proposal)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1058, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "apply_order_amount_eta_transformation") < 0)) __PYX_ERR(0, 1058, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_proposal = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("apply_order_amount_eta_transformation", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1058, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.apply_order_amount_eta_transformation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_66apply_order_amount_eta_transformation(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_proposal);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_66apply_order_amount_eta_transformation(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("apply_order_amount_eta_transformation", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1059
 * 
 *     def apply_order_amount_eta_transformation(self, proposal: Proposal):
 *         self.c_apply_order_amount_eta_transformation(proposal)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_apply_add_transaction_costs(self, object proposal):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_apply_order_amount_eta_transformation(__pyx_v_self, __pyx_v_proposal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1058
 *                     proposal.sells = [o for o in proposal.sells if o.size > 0]
 * 
 *     def apply_order_amount_eta_transformation(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         self.c_apply_order_amount_eta_transformation(proposal)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.apply_order_amount_eta_transformation", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1061
 *         self.c_apply_order_amount_eta_transformation(proposal)
 * 
 *     cdef c_apply_add_transaction_costs(self, object proposal):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_apply_add_transaction_costs(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal) {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_v_market = 0;
  PyObject *__pyx_v_buy = NULL;
  PyObject *__pyx_v_fee = NULL;
  PyObject *__pyx_v_price = NULL;
  PyObject *__pyx_v_sell = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_apply_add_transaction_costs", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1063
 *     cdef c_apply_add_transaction_costs(self, object proposal):
 *         cdef:
 *             ExchangeBase market = self._market_info.market             # <<<<<<<<<<<<<<
 *         for buy in proposal.buys:
 *             fee = market.c_get_fee(self.base_asset, self.quote_asset,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase))))) __PYX_ERR(0, 1063, __pyx_L1_error)
  __pyx_v_market = ((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1064
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 *         for buy in proposal.buys:             # <<<<<<<<<<<<<<
 *             fee = market.c_get_fee(self.base_asset, self.quote_asset,
 *                                    self._limit_order_type, TradeType.BUY, buy.size, buy.price)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_buys); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1064, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1064, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 1064, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1064, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 1064, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1064, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1064, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_buy, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1065
 *             ExchangeBase market = self._market_info.market
 *         for buy in proposal.buys:
 *             fee = market.c_get_fee(self.base_asset, self.quote_asset,             # <<<<<<<<<<<<<<
 *                                    self._limit_order_type, TradeType.BUY, buy.size, buy.price)
 *             price = buy.price * (Decimal(1) - fee.percent)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base_asset); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 1065, __pyx_L1_error)
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_5))||((__pyx_t_5) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_5))) __PYX_ERR(0, 1065, __pyx_L1_error)

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1066
 *         for buy in proposal.buys:
 *             fee = market.c_get_fee(self.base_asset, self.quote_asset,
 *                                    self._limit_order_type, TradeType.BUY, buy.size, buy.price)             # <<<<<<<<<<<<<<
 *             price = buy.price * (Decimal(1) - fee.percent)
 *             buy.price = market.c_quantize_order_price(self.trading_pair, price)
 */
    __pyx_t_6 = __pyx_v_self->_limit_order_type;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_BUY); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy, __pyx_n_s_size); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy, __pyx_n_s_price); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1065
 *             ExchangeBase market = self._market_info.market
 *         for buy in proposal.buys:
 *             fee = market.c_get_fee(self.base_asset, self.quote_asset,             # <<<<<<<<<<<<<<
 *                                    self._limit_order_type, TradeType.BUY, buy.size, buy.price)
 *             price = buy.price * (Decimal(1) - fee.percent)
 */
    __pyx_t_10 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_fee(__pyx_v_market, ((PyObject*)__pyx_t_1), ((PyObject*)__pyx_t_5), __pyx_t_6, __pyx_t_8, __pyx_t_7, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF_SET(__pyx_v_fee, __pyx_t_10);
    __pyx_t_10 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1067
 *             fee = market.c_get_fee(self.base_asset, self.quote_asset,
 *                                    self._limit_order_type, TradeType.BUY, buy.size, buy.price)
 *             price = buy.price * (Decimal(1) - fee.percent)             # <<<<<<<<<<<<<<
 *             buy.price = market.c_quantize_order_price(self.trading_pair, price)
 *         for sell in proposal.sells:
 */
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy, __pyx_n_s_price); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
        __pyx_t_11 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_int_1};
      __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1067, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_fee, __pyx_n_s_percent); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = PyNumber_Subtract(__pyx_t_9, __pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyNumber_Multiply(__pyx_t_10, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_price, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1068
 *                                    self._limit_order_type, TradeType.BUY, buy.size, buy.price)
 *             price = buy.price * (Decimal(1) - fee.percent)
 *             buy.price = market.c_quantize_order_price(self.trading_pair, price)             # <<<<<<<<<<<<<<
 *         for sell in proposal.sells:
 *             fee = market.c_get_fee(self.base_asset, self.quote_asset,
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_7))) __PYX_ERR(0, 1068, __pyx_L1_error)
    __pyx_t_8 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), ((PyObject*)__pyx_t_7), __pyx_v_price); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_buy, __pyx_n_s_price, __pyx_t_8) < 0) __PYX_ERR(0, 1068, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1064
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 *         for buy in proposal.buys:             # <<<<<<<<<<<<<<
 *             fee = market.c_get_fee(self.base_asset, self.quote_asset,
 *                                    self._limit_order_type, TradeType.BUY, buy.size, buy.price)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1069
 *             price = buy.price * (Decimal(1) - fee.percent)
 *             buy.price = market.c_quantize_order_price(self.trading_pair, price)
 *         for sell in proposal.sells:             # <<<<<<<<<<<<<<
 *             fee = market.c_get_fee(self.base_asset, self.quote_asset,
 *                                    self._limit_order_type, TradeType.SELL, sell.size, sell.price)
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_sells); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_8 = __pyx_t_2; __Pyx_INCREF(__pyx_t_8); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1069, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1069, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 1069, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_8, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1069, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 1069, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_8, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1069, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_8);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1069, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_sell, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1070
 *             buy.price = market.c_quantize_order_price(self.trading_pair, price)
 *         for sell in proposal.sells:
 *             fee = market.c_get_fee(self.base_asset, self.quote_asset,             # <<<<<<<<<<<<<<
 *                                    self._limit_order_type, TradeType.SELL, sell.size, sell.price)
 *             price = sell.price * (Decimal(1) + fee.percent)
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base_asset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1070, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_2))||((__pyx_t_2) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_2))) __PYX_ERR(0, 1070, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1070, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_7))||((__pyx_t_7) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_7))) __PYX_ERR(0, 1070, __pyx_L1_error)

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1071
 *         for sell in proposal.sells:
 *             fee = market.c_get_fee(self.base_asset, self.quote_asset,
 *                                    self._limit_order_type, TradeType.SELL, sell.size, sell.price)             # <<<<<<<<<<<<<<
 *             price = sell.price * (Decimal(1) + fee.percent)
 *             sell.price = market.c_quantize_order_price(self.trading_pair, price)
 */
    __pyx_t_10 = __pyx_v_self->_limit_order_type;
    __Pyx_INCREF(__pyx_t_10);
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1071, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_SELL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1071, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell, __pyx_n_s_size); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1071, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell, __pyx_n_s_price); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1071, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1070
 *             buy.price = market.c_quantize_order_price(self.trading_pair, price)
 *         for sell in proposal.sells:
 *             fee = market.c_get_fee(self.base_asset, self.quote_asset,             # <<<<<<<<<<<<<<
 *                                    self._limit_order_type, TradeType.SELL, sell.size, sell.price)
 *             price = sell.price * (Decimal(1) + fee.percent)
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_fee(__pyx_v_market, ((PyObject*)__pyx_t_2), ((PyObject*)__pyx_t_7), __pyx_t_10, __pyx_t_6, __pyx_t_9, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1070, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF_SET(__pyx_v_fee, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1072
 *             fee = market.c_get_fee(self.base_asset, self.quote_asset,
 *                                    self._limit_order_type, TradeType.SELL, sell.size, sell.price)
 *             price = sell.price * (Decimal(1) + fee.percent)             # <<<<<<<<<<<<<<
 *             sell.price = market.c_quantize_order_price(self.trading_pair, price)
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell, __pyx_n_s_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1072, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1072, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = NULL;
    __pyx_t_11 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_9);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_9, function);
        __pyx_t_11 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_int_1};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_11, 1+__pyx_t_11);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1072, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_fee, __pyx_n_s_percent); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1072, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_6 = PyNumber_Add(__pyx_t_5, __pyx_t_9); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1072, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyNumber_Multiply(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1072, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF_SET(__pyx_v_price, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1073
 *                                    self._limit_order_type, TradeType.SELL, sell.size, sell.price)
 *             price = sell.price * (Decimal(1) + fee.percent)
 *             sell.price = market.c_quantize_order_price(self.trading_pair, price)             # <<<<<<<<<<<<<<
 * 
 *     def apply_add_transaction_costs(self, proposal: Proposal):
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_9))||((__pyx_t_9) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_9))) __PYX_ERR(0, 1073, __pyx_L1_error)
    __pyx_t_6 = ((struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_market->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_quantize_order_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_market), ((PyObject*)__pyx_t_9), __pyx_v_price); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1073, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_sell, __pyx_n_s_price, __pyx_t_6) < 0) __PYX_ERR(0, 1073, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1069
 *             price = buy.price * (Decimal(1) - fee.percent)
 *             buy.price = market.c_quantize_order_price(self.trading_pair, price)
 *         for sell in proposal.sells:             # <<<<<<<<<<<<<<
 *             fee = market.c_get_fee(self.base_asset, self.quote_asset,
 *                                    self._limit_order_type, TradeType.SELL, sell.size, sell.price)
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1061
 *         self.c_apply_order_amount_eta_transformation(proposal)
 * 
 *     cdef c_apply_add_transaction_costs(self, object proposal):             # <<<<<<<<<<<<<<
 *         cdef:
 *             ExchangeBase market = self._market_info.market
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_apply_add_transaction_costs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_buy);
  __Pyx_XDECREF(__pyx_v_fee);
  __Pyx_XDECREF(__pyx_v_price);
  __Pyx_XDECREF(__pyx_v_sell);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1075
 *             sell.price = market.c_quantize_order_price(self.trading_pair, price)
 * 
 *     def apply_add_transaction_costs(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         self.c_apply_add_transaction_costs(proposal)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_69apply_add_transaction_costs(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_69apply_add_transaction_costs = {"apply_add_transaction_costs", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_69apply_add_transaction_costs, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_69apply_add_transaction_costs(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_proposal = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("apply_add_transaction_costs (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_proposal)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1075, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "apply_add_transaction_costs") < 0)) __PYX_ERR(0, 1075, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_proposal = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("apply_add_transaction_costs", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1075, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.apply_add_transaction_costs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_68apply_add_transaction_costs(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_proposal);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_68apply_add_transaction_costs(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("apply_add_transaction_costs", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1076
 * 
 *     def apply_add_transaction_costs(self, proposal: Proposal):
 *         self.c_apply_add_transaction_costs(proposal)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_did_fill_order(self, object order_filled_event):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_apply_add_transaction_costs(__pyx_v_self, __pyx_v_proposal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1075
 *             sell.price = market.c_quantize_order_price(self.trading_pair, price)
 * 
 *     def apply_add_transaction_costs(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         self.c_apply_add_transaction_costs(proposal)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.apply_add_transaction_costs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1078
 *         self.c_apply_add_transaction_costs(proposal)
 * 
 *     cdef c_did_fill_order(self, object order_filled_event):             # <<<<<<<<<<<<<<
 *         cdef:
 *             str order_id = order_filled_event.order_id
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_did_fill_order(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_filled_event) {
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_market_info = 0;
  CYTHON_UNUSED PyObject *__pyx_v_order_fill_record = 0;
  struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_v_limit_order_record = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  Py_UCS4 __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_fill_order", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1080
 *     cdef c_did_fill_order(self, object order_filled_event):
 *         cdef:
 *             str order_id = order_filled_event.order_id             # <<<<<<<<<<<<<<
 *             object market_info = self._sb_order_tracker.c_get_shadow_market_pair_from_order_id(order_id)
 *             tuple order_fill_record
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_filled_event, __pyx_n_s_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 1080, __pyx_L1_error)
  __pyx_v_order_id = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1081
 *         cdef:
 *             str order_id = order_filled_event.order_id
 *             object market_info = self._sb_order_tracker.c_get_shadow_market_pair_from_order_id(order_id)             # <<<<<<<<<<<<<<
 *             tuple order_fill_record
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_shadow_market_pair_from_order_id(__pyx_v_self->__pyx_base._sb_order_tracker, __pyx_v_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_market_info = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1084
 *             tuple order_fill_record
 * 
 *         if market_info is not None:             # <<<<<<<<<<<<<<
 *             limit_order_record = self._sb_order_tracker.c_get_shadow_limit_order(order_id)
 *             order_fill_record = (limit_order_record, order_filled_event)
 */
  __pyx_t_2 = (__pyx_v_market_info != Py_None);
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1085
 * 
 *         if market_info is not None:
 *             limit_order_record = self._sb_order_tracker.c_get_shadow_limit_order(order_id)             # <<<<<<<<<<<<<<
 *             order_fill_record = (limit_order_record, order_filled_event)
 * 
 */
    __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_shadow_limit_order(__pyx_v_self->__pyx_base._sb_order_tracker, __pyx_v_order_id)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1085, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_limit_order_record = ((struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1086
 *         if market_info is not None:
 *             limit_order_record = self._sb_order_tracker.c_get_shadow_limit_order(order_id)
 *             order_fill_record = (limit_order_record, order_filled_event)             # <<<<<<<<<<<<<<
 * 
 *             if order_filled_event.trade_type is TradeType.BUY:
 */
    __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1086, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF((PyObject *)__pyx_v_limit_order_record);
    __Pyx_GIVEREF((PyObject *)__pyx_v_limit_order_record);
    PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_limit_order_record));
    __Pyx_INCREF(__pyx_v_order_filled_event);
    __Pyx_GIVEREF(__pyx_v_order_filled_event);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_v_order_filled_event);
    __pyx_v_order_fill_record = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1088
 *             order_fill_record = (limit_order_record, order_filled_event)
 * 
 *             if order_filled_event.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:
 *                     self.log_with_clock(
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_filled_event, __pyx_n_s_trade_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1088, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1088, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_BUY); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1088, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_3 = (__pyx_t_1 == __pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_2 = (__pyx_t_3 != 0);
    if (__pyx_t_2) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1089
 * 
 *             if order_filled_event.trade_type is TradeType.BUY:
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(
 *                         logging.INFO,
 */
      __pyx_t_5 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1089, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_MAKER_ORDER_FILLED); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1089, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = PyNumber_And(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1089, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1089, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_2) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1090
 *             if order_filled_event.trade_type is TradeType.BUY:
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:
 *                     self.log_with_clock(             # <<<<<<<<<<<<<<
 *                         logging.INFO,
 *                         f"({market_info.trading_pair}) Maker buy order of "
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1090, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1091
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:
 *                     self.log_with_clock(
 *                         logging.INFO,             # <<<<<<<<<<<<<<
 *                         f"({market_info.trading_pair}) Maker buy order of "
 *                         f"{order_filled_event.amount} {market_info.base_asset} filled."
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_logging); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1091, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_INFO); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1091, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1092
 *                     self.log_with_clock(
 *                         logging.INFO,
 *                         f"({market_info.trading_pair}) Maker buy order of "             # <<<<<<<<<<<<<<
 *                         f"{order_filled_event.amount} {market_info.base_asset} filled."
 *                     )
 */
        __pyx_t_5 = PyTuple_New(7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1092, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = 0;
        __pyx_t_8 = 127;
        __Pyx_INCREF(__pyx_kp_u__24);
        __pyx_t_7 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__24);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_kp_u__24);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_info, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1092, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1092, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_8;
        __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_INCREF(__pyx_kp_u_Maker_buy_order_of);
        __pyx_t_7 += 21;
        __Pyx_GIVEREF(__pyx_kp_u_Maker_buy_order_of);
        PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_kp_u_Maker_buy_order_of);

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1093
 *                         logging.INFO,
 *                         f"({market_info.trading_pair}) Maker buy order of "
 *                         f"{order_filled_event.amount} {market_info.base_asset} filled."             # <<<<<<<<<<<<<<
 *                     )
 *             else:
 */
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_filled_event, __pyx_n_s_amount); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1093, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1093, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
        __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u__25);
        __pyx_t_7 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__25);
        PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_kp_u__25);
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_info, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1093, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1093, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_8;
        __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_10);
        PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_t_10);
        __pyx_t_10 = 0;
        __Pyx_INCREF(__pyx_kp_u_filled);
        __pyx_t_7 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_filled);
        PyTuple_SET_ITEM(__pyx_t_5, 6, __pyx_kp_u_filled);

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1092
 *                     self.log_with_clock(
 *                         logging.INFO,
 *                         f"({market_info.trading_pair}) Maker buy order of "             # <<<<<<<<<<<<<<
 *                         f"{order_filled_event.amount} {market_info.base_asset} filled."
 *                     )
 */
        __pyx_t_10 = __Pyx_PyUnicode_Join(__pyx_t_5, 7, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1092, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        __pyx_t_11 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_11 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_t_6, __pyx_t_10};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_11, 2+__pyx_t_11);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1090, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1089
 * 
 *             if order_filled_event.trade_type is TradeType.BUY:
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(
 *                         logging.INFO,
 */
      }

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1088
 *             order_fill_record = (limit_order_record, order_filled_event)
 * 
 *             if order_filled_event.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:
 *                     self.log_with_clock(
 */
      goto __pyx_L4;
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1096
 *                     )
 *             else:
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(
 *                         logging.INFO,
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_PyInt_From_int64_t(__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1096, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_OPTION_LOG_MAKER_ORDER_FILLED); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1096, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_10 = PyNumber_And(__pyx_t_4, __pyx_t_1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1096, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1096, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (__pyx_t_2) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1097
 *             else:
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:
 *                     self.log_with_clock(             # <<<<<<<<<<<<<<
 *                         logging.INFO,
 *                         f"({market_info.trading_pair}) Maker sell order of "
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1097, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1098
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:
 *                     self.log_with_clock(
 *                         logging.INFO,             # <<<<<<<<<<<<<<
 *                         f"({market_info.trading_pair}) Maker sell order of "
 *                         f"{order_filled_event.amount} {market_info.base_asset} filled."
 */
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logging); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1098, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_INFO); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1098, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1099
 *                     self.log_with_clock(
 *                         logging.INFO,
 *                         f"({market_info.trading_pair}) Maker sell order of "             # <<<<<<<<<<<<<<
 *                         f"{order_filled_event.amount} {market_info.base_asset} filled."
 *                     )
 */
        __pyx_t_4 = PyTuple_New(7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1099, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = 0;
        __pyx_t_8 = 127;
        __Pyx_INCREF(__pyx_kp_u__24);
        __pyx_t_7 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__24);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u__24);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_info, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1099, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1099, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
        __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u_Maker_sell_order_of);
        __pyx_t_7 += 22;
        __Pyx_GIVEREF(__pyx_kp_u_Maker_sell_order_of);
        PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u_Maker_sell_order_of);

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1100
 *                         logging.INFO,
 *                         f"({market_info.trading_pair}) Maker sell order of "
 *                         f"{order_filled_event.amount} {market_info.base_asset} filled."             # <<<<<<<<<<<<<<
 *                     )
 * 
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_filled_event, __pyx_n_s_amount); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_t_9, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_8;
        __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_t_5);
        __pyx_t_5 = 0;
        __Pyx_INCREF(__pyx_kp_u__25);
        __pyx_t_7 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__25);
        PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u__25);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market_info, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_9 = __Pyx_PyObject_FormatSimple(__pyx_t_5, __pyx_empty_unicode); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_8;
        __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u_filled);
        __pyx_t_7 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_filled);
        PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u_filled);

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1099
 *                     self.log_with_clock(
 *                         logging.INFO,
 *                         f"({market_info.trading_pair}) Maker sell order of "             # <<<<<<<<<<<<<<
 *                         f"{order_filled_event.amount} {market_info.base_asset} filled."
 *                     )
 */
        __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_4, 7, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1099, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_4 = NULL;
        __pyx_t_11 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_4)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_4);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_11 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_6, __pyx_t_9};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_11, 2+__pyx_t_11);
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1097, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1096
 *                     )
 *             else:
 *                 if self._logging_options & self.OPTION_LOG_MAKER_ORDER_FILLED:             # <<<<<<<<<<<<<<
 *                     self.log_with_clock(
 *                         logging.INFO,
 */
      }
    }
    __pyx_L4:;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1084
 *             tuple order_fill_record
 * 
 *         if market_info is not None:             # <<<<<<<<<<<<<<
 *             limit_order_record = self._sb_order_tracker.c_get_shadow_limit_order(order_id)
 *             order_fill_record = (limit_order_record, order_filled_event)
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1078
 *         self.c_apply_add_transaction_costs(proposal)
 * 
 *     cdef c_did_fill_order(self, object order_filled_event):             # <<<<<<<<<<<<<<
 *         cdef:
 *             str order_id = order_filled_event.order_id
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_did_fill_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF(__pyx_v_market_info);
  __Pyx_XDECREF(__pyx_v_order_fill_record);
  __Pyx_XDECREF((PyObject *)__pyx_v_limit_order_record);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1103
 *                     )
 * 
 *     cdef c_did_complete_buy_order(self, object order_completed_event):             # <<<<<<<<<<<<<<
 *         self.c_did_complete_order(order_completed_event)
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_did_complete_buy_order(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_completed_event) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_complete_buy_order", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1104
 * 
 *     cdef c_did_complete_buy_order(self, object order_completed_event):
 *         self.c_did_complete_order(order_completed_event)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_did_complete_sell_order(self, object order_completed_event):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_did_complete_order(__pyx_v_self, __pyx_v_order_completed_event); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1103
 *                     )
 * 
 *     cdef c_did_complete_buy_order(self, object order_completed_event):             # <<<<<<<<<<<<<<
 *         self.c_did_complete_order(order_completed_event)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_did_complete_buy_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1106
 *         self.c_did_complete_order(order_completed_event)
 * 
 *     cdef c_did_complete_sell_order(self, object order_completed_event):             # <<<<<<<<<<<<<<
 *         self.c_did_complete_order(order_completed_event)
 * 
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_did_complete_sell_order(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_completed_event) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_complete_sell_order", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1107
 * 
 *     cdef c_did_complete_sell_order(self, object order_completed_event):
 *         self.c_did_complete_order(order_completed_event)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_did_complete_order(self, object order_completed_event):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_did_complete_order(__pyx_v_self, __pyx_v_order_completed_event); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1106
 *         self.c_did_complete_order(order_completed_event)
 * 
 *     cdef c_did_complete_sell_order(self, object order_completed_event):             # <<<<<<<<<<<<<<
 *         self.c_did_complete_order(order_completed_event)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_did_complete_sell_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1109
 *         self.c_did_complete_order(order_completed_event)
 * 
 *     cdef c_did_complete_order(self, object order_completed_event):             # <<<<<<<<<<<<<<
 *         cdef:
 *             str order_id = order_completed_event.order_id
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_did_complete_order(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_order_completed_event) {
  PyObject *__pyx_v_order_id = 0;
  struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *__pyx_v_limit_order_record = 0;
  PyObject *__pyx_v_order_action_string = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  double __pyx_t_8;
  double __pyx_t_9;
  double __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  Py_UCS4 __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_complete_order", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1111
 *     cdef c_did_complete_order(self, object order_completed_event):
 *         cdef:
 *             str order_id = order_completed_event.order_id             # <<<<<<<<<<<<<<
 *             LimitOrder limit_order_record = self._sb_order_tracker.c_get_limit_order(self._market_info, order_id)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_order_completed_event, __pyx_n_s_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 1111, __pyx_L1_error)
  __pyx_v_order_id = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1112
 *         cdef:
 *             str order_id = order_completed_event.order_id
 *             LimitOrder limit_order_record = self._sb_order_tracker.c_get_limit_order(self._market_info, order_id)             # <<<<<<<<<<<<<<
 * 
 *         if limit_order_record is None:
 */
  __pyx_t_1 = __pyx_v_self->_market_info;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker *)__pyx_v_self->__pyx_base._sb_order_tracker->__pyx_base.__pyx_base.__pyx_vtab)->c_get_limit_order(__pyx_v_self->__pyx_base._sb_order_tracker, __pyx_t_1, __pyx_v_order_id)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_limit_order_record = ((struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1114
 *             LimitOrder limit_order_record = self._sb_order_tracker.c_get_limit_order(self._market_info, order_id)
 * 
 *         if limit_order_record is None:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  __pyx_t_3 = (((PyObject *)__pyx_v_limit_order_record) == Py_None);
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1115
 * 
 *         if limit_order_record is None:
 *             return             # <<<<<<<<<<<<<<
 * 
 *         # Continue only if the order is not a hanging order
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1114
 *             LimitOrder limit_order_record = self._sb_order_tracker.c_get_limit_order(self._market_info, order_id)
 * 
 *         if limit_order_record is None:             # <<<<<<<<<<<<<<
 *             return
 * 
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1118
 * 
 *         # Continue only if the order is not a hanging order
 *         if (not self._hanging_orders_tracker.is_order_id_in_hanging_orders(order_id)             # <<<<<<<<<<<<<<
 *                 and not self.hanging_orders_tracker.is_order_id_in_completed_hanging_orders(order_id)):
 *             # delay order creation by filled_order_delay (in seconds)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_hanging_orders_tracker, __pyx_n_s_is_order_id_in_hanging_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_order_id};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1118, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = ((!__pyx_t_3) != 0);
  if (__pyx_t_7) {
  } else {
    __pyx_t_4 = __pyx_t_7;
    goto __pyx_L5_bool_binop_done;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1119
 *         # Continue only if the order is not a hanging order
 *         if (not self._hanging_orders_tracker.is_order_id_in_hanging_orders(order_id)
 *                 and not self.hanging_orders_tracker.is_order_id_in_completed_hanging_orders(order_id)):             # <<<<<<<<<<<<<<
 *             # delay order creation by filled_order_delay (in seconds)
 *             self._create_timestamp = self._current_timestamp + self._filled_order_delay
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_hanging_orders_tracker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_is_order_id_in_completed_hanging); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_1)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_1);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_order_id};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = ((!__pyx_t_7) != 0);
  __pyx_t_4 = __pyx_t_3;
  __pyx_L5_bool_binop_done:;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1118
 * 
 *         # Continue only if the order is not a hanging order
 *         if (not self._hanging_orders_tracker.is_order_id_in_hanging_orders(order_id)             # <<<<<<<<<<<<<<
 *                 and not self.hanging_orders_tracker.is_order_id_in_completed_hanging_orders(order_id)):
 *             # delay order creation by filled_order_delay (in seconds)
 */
  if (__pyx_t_4) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1121
 *                 and not self.hanging_orders_tracker.is_order_id_in_completed_hanging_orders(order_id)):
 *             # delay order creation by filled_order_delay (in seconds)
 *             self._create_timestamp = self._current_timestamp + self._filled_order_delay             # <<<<<<<<<<<<<<
 *             self._cancel_timestamp = min(self._cancel_timestamp, self._create_timestamp)
 * 
 */
    __pyx_v_self->_create_timestamp = (__pyx_v_self->__pyx_base.__pyx_base._current_timestamp + __pyx_v_self->_filled_order_delay);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1122
 *             # delay order creation by filled_order_delay (in seconds)
 *             self._create_timestamp = self._current_timestamp + self._filled_order_delay
 *             self._cancel_timestamp = min(self._cancel_timestamp, self._create_timestamp)             # <<<<<<<<<<<<<<
 * 
 *             if limit_order_record.is_buy:
 */
    __pyx_t_8 = __pyx_v_self->_create_timestamp;
    __pyx_t_9 = __pyx_v_self->_cancel_timestamp;
    if (((__pyx_t_8 < __pyx_t_9) != 0)) {
      __pyx_t_10 = __pyx_t_8;
    } else {
      __pyx_t_10 = __pyx_t_9;
    }
    __pyx_v_self->_cancel_timestamp = __pyx_t_10;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1124
 *             self._cancel_timestamp = min(self._cancel_timestamp, self._create_timestamp)
 * 
 *             if limit_order_record.is_buy:             # <<<<<<<<<<<<<<
 *                 self._filled_buys_balance += 1
 *                 order_action_string = "buy"
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_is_buy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 1124, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1125
 * 
 *             if limit_order_record.is_buy:
 *                 self._filled_buys_balance += 1             # <<<<<<<<<<<<<<
 *                 order_action_string = "buy"
 *             else:
 */
      __pyx_v_self->_filled_buys_balance = (__pyx_v_self->_filled_buys_balance + 1);

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1126
 *             if limit_order_record.is_buy:
 *                 self._filled_buys_balance += 1
 *                 order_action_string = "buy"             # <<<<<<<<<<<<<<
 *             else:
 *                 self._filled_sells_balance += 1
 */
      __Pyx_INCREF(__pyx_n_u_buy);
      __pyx_v_order_action_string = __pyx_n_u_buy;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1124
 *             self._cancel_timestamp = min(self._cancel_timestamp, self._create_timestamp)
 * 
 *             if limit_order_record.is_buy:             # <<<<<<<<<<<<<<
 *                 self._filled_buys_balance += 1
 *                 order_action_string = "buy"
 */
      goto __pyx_L7;
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1128
 *                 order_action_string = "buy"
 *             else:
 *                 self._filled_sells_balance += 1             # <<<<<<<<<<<<<<
 *                 order_action_string = "sell"
 * 
 */
    /*else*/ {
      __pyx_v_self->_filled_sells_balance = (__pyx_v_self->_filled_sells_balance + 1);

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1129
 *             else:
 *                 self._filled_sells_balance += 1
 *                 order_action_string = "sell"             # <<<<<<<<<<<<<<
 * 
 *             self._last_own_trade_price = limit_order_record.price
 */
      __Pyx_INCREF(__pyx_n_u_sell);
      __pyx_v_order_action_string = __pyx_n_u_sell;
    }
    __pyx_L7:;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1131
 *                 order_action_string = "sell"
 * 
 *             self._last_own_trade_price = limit_order_record.price             # <<<<<<<<<<<<<<
 * 
 *             self.log_with_clock(
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __Pyx_GOTREF(__pyx_v_self->_last_own_trade_price);
    __Pyx_DECREF(__pyx_v_self->_last_own_trade_price);
    __pyx_v_self->_last_own_trade_price = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1133
 *             self._last_own_trade_price = limit_order_record.price
 * 
 *             self.log_with_clock(             # <<<<<<<<<<<<<<
 *                 logging.INFO,
 *                 f"({self.trading_pair}) Maker {order_action_string} order {order_id} "
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_log_with_clock); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1134
 * 
 *             self.log_with_clock(
 *                 logging.INFO,             # <<<<<<<<<<<<<<
 *                 f"({self.trading_pair}) Maker {order_action_string} order {order_id} "
 *                 f"({limit_order_record.quantity} {limit_order_record.base_currency} @ "
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_logging); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_INFO); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1134, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1135
 *             self.log_with_clock(
 *                 logging.INFO,
 *                 f"({self.trading_pair}) Maker {order_action_string} order {order_id} "             # <<<<<<<<<<<<<<
 *                 f"({limit_order_record.quantity} {limit_order_record.base_currency} @ "
 *                 f"{limit_order_record.price} {limit_order_record.quote_currency}) has been completely filled."
 */
    __pyx_t_1 = PyTuple_New(15); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_12 = 0;
    __pyx_t_13 = 127;
    __Pyx_INCREF(__pyx_kp_u__24);
    __pyx_t_12 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__24);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u__24);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 = __Pyx_PyObject_FormatSimple(__pyx_t_14, __pyx_empty_unicode); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_15);
    __pyx_t_15 = 0;
    __Pyx_INCREF(__pyx_kp_u_Maker);
    __pyx_t_12 += 8;
    __Pyx_GIVEREF(__pyx_kp_u_Maker);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_Maker);
    __Pyx_INCREF(__pyx_v_order_action_string);
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_v_order_action_string) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_v_order_action_string) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_v_order_action_string);
    __Pyx_GIVEREF(__pyx_v_order_action_string);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_v_order_action_string);
    __Pyx_INCREF(__pyx_kp_u_order);
    __pyx_t_12 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_order);
    PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_order);
    __pyx_t_15 = __Pyx_PyUnicode_Unicode(__pyx_v_order_id); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_15);
    __pyx_t_15 = 0;
    __Pyx_INCREF(__pyx_kp_u__26);
    __pyx_t_12 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__26);
    PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u__26);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1136
 *                 logging.INFO,
 *                 f"({self.trading_pair}) Maker {order_action_string} order {order_id} "
 *                 f"({limit_order_record.quantity} {limit_order_record.base_currency} @ "             # <<<<<<<<<<<<<<
 *                 f"{limit_order_record.price} {limit_order_record.quote_currency}) has been completely filled."
 *             )
 */
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_quantity); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_14 = __Pyx_PyObject_FormatSimple(__pyx_t_15, __pyx_empty_unicode); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_14);
    __pyx_t_14 = 0;
    __Pyx_INCREF(__pyx_kp_u__25);
    __pyx_t_12 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__25);
    PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_kp_u__25);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_base_currency); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 = __Pyx_PyObject_FormatSimple(__pyx_t_14, __pyx_empty_unicode); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_1, 9, __pyx_t_15);
    __pyx_t_15 = 0;
    __Pyx_INCREF(__pyx_kp_u__27);
    __pyx_t_12 += 3;
    __Pyx_GIVEREF(__pyx_kp_u__27);
    PyTuple_SET_ITEM(__pyx_t_1, 10, __pyx_kp_u__27);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1137
 *                 f"({self.trading_pair}) Maker {order_action_string} order {order_id} "
 *                 f"({limit_order_record.quantity} {limit_order_record.base_currency} @ "
 *                 f"{limit_order_record.price} {limit_order_record.quote_currency}) has been completely filled."             # <<<<<<<<<<<<<<
 *             )
 *             self.notify_hb_app_with_timestamp(
 */
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_price); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_14 = __Pyx_PyObject_FormatSimple(__pyx_t_15, __pyx_empty_unicode); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
    __Pyx_GIVEREF(__pyx_t_14);
    PyTuple_SET_ITEM(__pyx_t_1, 11, __pyx_t_14);
    __pyx_t_14 = 0;
    __Pyx_INCREF(__pyx_kp_u__25);
    __pyx_t_12 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__25);
    PyTuple_SET_ITEM(__pyx_t_1, 12, __pyx_kp_u__25);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_quote_currency); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 = __Pyx_PyObject_FormatSimple(__pyx_t_14, __pyx_empty_unicode); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_15);
    __Pyx_GIVEREF(__pyx_t_15);
    PyTuple_SET_ITEM(__pyx_t_1, 13, __pyx_t_15);
    __pyx_t_15 = 0;
    __Pyx_INCREF(__pyx_kp_u_has_been_completely_filled);
    __pyx_t_12 += 29;
    __Pyx_GIVEREF(__pyx_kp_u_has_been_completely_filled);
    PyTuple_SET_ITEM(__pyx_t_1, 14, __pyx_kp_u_has_been_completely_filled);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1135
 *             self.log_with_clock(
 *                 logging.INFO,
 *                 f"({self.trading_pair}) Maker {order_action_string} order {order_id} "             # <<<<<<<<<<<<<<
 *                 f"({limit_order_record.quantity} {limit_order_record.base_currency} @ "
 *                 f"{limit_order_record.price} {limit_order_record.quote_currency}) has been completely filled."
 */
    __pyx_t_15 = __Pyx_PyUnicode_Join(__pyx_t_1, 15, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_1)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_1);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_1, __pyx_t_11, __pyx_t_15};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1139
 *                 f"{limit_order_record.price} {limit_order_record.quote_currency}) has been completely filled."
 *             )
 *             self.notify_hb_app_with_timestamp(             # <<<<<<<<<<<<<<
 *                 f"Maker {order_action_string.upper()} order "
 *                 f"{limit_order_record.quantity} {limit_order_record.base_currency} @ "
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_notify_hb_app_with_timestamp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1140
 *             )
 *             self.notify_hb_app_with_timestamp(
 *                 f"Maker {order_action_string.upper()} order "             # <<<<<<<<<<<<<<
 *                 f"{limit_order_record.quantity} {limit_order_record.base_currency} @ "
 *                 f"{limit_order_record.price} {limit_order_record.quote_currency} is filled."
 */
    __pyx_t_15 = PyTuple_New(11); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __pyx_t_12 = 0;
    __pyx_t_13 = 127;
    __Pyx_INCREF(__pyx_kp_u_Maker_2);
    __pyx_t_12 += 6;
    __Pyx_GIVEREF(__pyx_kp_u_Maker_2);
    PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_kp_u_Maker_2);
    __pyx_t_11 = __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyUnicode_Type_upper, __pyx_v_order_action_string); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_t_11, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_kp_u_order);
    __pyx_t_12 += 7;
    __Pyx_GIVEREF(__pyx_kp_u_order);
    PyTuple_SET_ITEM(__pyx_t_15, 2, __pyx_kp_u_order);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1141
 *             self.notify_hb_app_with_timestamp(
 *                 f"Maker {order_action_string.upper()} order "
 *                 f"{limit_order_record.quantity} {limit_order_record.base_currency} @ "             # <<<<<<<<<<<<<<
 *                 f"{limit_order_record.price} {limit_order_record.quote_currency} is filled."
 *             )
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_quantity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_15, 3, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_INCREF(__pyx_kp_u__25);
    __pyx_t_12 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__25);
    PyTuple_SET_ITEM(__pyx_t_15, 4, __pyx_kp_u__25);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_base_currency); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_t_11, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_15, 5, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_kp_u__27);
    __pyx_t_12 += 3;
    __Pyx_GIVEREF(__pyx_kp_u__27);
    PyTuple_SET_ITEM(__pyx_t_15, 6, __pyx_kp_u__27);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1142
 *                 f"Maker {order_action_string.upper()} order "
 *                 f"{limit_order_record.quantity} {limit_order_record.base_currency} @ "
 *                 f"{limit_order_record.price} {limit_order_record.quote_currency} is filled."             # <<<<<<<<<<<<<<
 *             )
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_t_1, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_15, 7, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_INCREF(__pyx_kp_u__25);
    __pyx_t_12 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__25);
    PyTuple_SET_ITEM(__pyx_t_15, 8, __pyx_kp_u__25);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_limit_order_record), __pyx_n_s_quote_currency); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_1 = __Pyx_PyObject_FormatSimple(__pyx_t_11, __pyx_empty_unicode); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_1) : __pyx_t_13;
    __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_15, 9, __pyx_t_1);
    __pyx_t_1 = 0;
    __Pyx_INCREF(__pyx_kp_u_is_filled);
    __pyx_t_12 += 11;
    __Pyx_GIVEREF(__pyx_kp_u_is_filled);
    PyTuple_SET_ITEM(__pyx_t_15, 10, __pyx_kp_u_is_filled);

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1140
 *             )
 *             self.notify_hb_app_with_timestamp(
 *                 f"Maker {order_action_string.upper()} order "             # <<<<<<<<<<<<<<
 *                 f"{limit_order_record.quantity} {limit_order_record.base_currency} @ "
 *                 f"{limit_order_record.price} {limit_order_record.quote_currency} is filled."
 */
    __pyx_t_1 = __Pyx_PyUnicode_Join(__pyx_t_15, 11, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __pyx_t_15 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_15)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_15);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_t_1};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1139, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1118
 * 
 *         # Continue only if the order is not a hanging order
 *         if (not self._hanging_orders_tracker.is_order_id_in_hanging_orders(order_id)             # <<<<<<<<<<<<<<
 *                 and not self.hanging_orders_tracker.is_order_id_in_completed_hanging_orders(order_id)):
 *             # delay order creation by filled_order_delay (in seconds)
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1109
 *         self.c_did_complete_order(order_completed_event)
 * 
 *     cdef c_did_complete_order(self, object order_completed_event):             # <<<<<<<<<<<<<<
 *         cdef:
 *             str order_id = order_completed_event.order_id
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_did_complete_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XDECREF((PyObject *)__pyx_v_limit_order_record);
  __Pyx_XDECREF(__pyx_v_order_action_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1145
 *             )
 * 
 *     cdef bint c_is_within_tolerance(self, list current_prices, list proposal_prices):             # <<<<<<<<<<<<<<
 *         if len(current_prices) != len(proposal_prices):
 *             return False
 */

static int __pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_is_within_tolerance(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_current_prices, PyObject *__pyx_v_proposal_prices) {
  PyObject *__pyx_v_current = NULL;
  PyObject *__pyx_v_proposal = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_is_within_tolerance", 0);
  __Pyx_INCREF(__pyx_v_current_prices);
  __Pyx_INCREF(__pyx_v_proposal_prices);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1146
 * 
 *     cdef bint c_is_within_tolerance(self, list current_prices, list proposal_prices):
 *         if len(current_prices) != len(proposal_prices):             # <<<<<<<<<<<<<<
 *             return False
 *         current_prices = sorted(current_prices)
 */
  if (unlikely(__pyx_v_current_prices == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 1146, __pyx_L1_error)
  }
  __pyx_t_1 = PyList_GET_SIZE(__pyx_v_current_prices); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1146, __pyx_L1_error)
  if (unlikely(__pyx_v_proposal_prices == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 1146, __pyx_L1_error)
  }
  __pyx_t_2 = PyList_GET_SIZE(__pyx_v_proposal_prices); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1146, __pyx_L1_error)
  __pyx_t_3 = ((__pyx_t_1 != __pyx_t_2) != 0);
  if (__pyx_t_3) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1147
 *     cdef bint c_is_within_tolerance(self, list current_prices, list proposal_prices):
 *         if len(current_prices) != len(proposal_prices):
 *             return False             # <<<<<<<<<<<<<<
 *         current_prices = sorted(current_prices)
 *         proposal_prices = sorted(proposal_prices)
 */
    __pyx_r = 0;
    goto __pyx_L0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1146
 * 
 *     cdef bint c_is_within_tolerance(self, list current_prices, list proposal_prices):
 *         if len(current_prices) != len(proposal_prices):             # <<<<<<<<<<<<<<
 *             return False
 *         current_prices = sorted(current_prices)
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1148
 *         if len(current_prices) != len(proposal_prices):
 *             return False
 *         current_prices = sorted(current_prices)             # <<<<<<<<<<<<<<
 *         proposal_prices = sorted(proposal_prices)
 *         for current, proposal in zip(current_prices, proposal_prices):
 */
  __pyx_t_5 = PySequence_List(__pyx_v_current_prices); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_6 = PyList_Sort(__pyx_t_4); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1148, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_current_prices, ((PyObject*)__pyx_t_4));
  __pyx_t_4 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1149
 *             return False
 *         current_prices = sorted(current_prices)
 *         proposal_prices = sorted(proposal_prices)             # <<<<<<<<<<<<<<
 *         for current, proposal in zip(current_prices, proposal_prices):
 *             # if spread diff is more than the tolerance or order quantities are different, return false.
 */
  __pyx_t_5 = PySequence_List(__pyx_v_proposal_prices); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_6 = PyList_Sort(__pyx_t_4); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(0, 1149, __pyx_L1_error)
  __Pyx_DECREF_SET(__pyx_v_proposal_prices, ((PyObject*)__pyx_t_4));
  __pyx_t_4 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1150
 *         current_prices = sorted(current_prices)
 *         proposal_prices = sorted(proposal_prices)
 *         for current, proposal in zip(current_prices, proposal_prices):             # <<<<<<<<<<<<<<
 *             # if spread diff is more than the tolerance or order quantities are different, return false.
 *             if abs(proposal - current) / current > self._order_refresh_tolerance_pct:
 */
  __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_current_prices);
  __Pyx_GIVEREF(__pyx_v_current_prices);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_current_prices);
  __Pyx_INCREF(__pyx_v_proposal_prices);
  __Pyx_GIVEREF(__pyx_v_proposal_prices);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_proposal_prices);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
    __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_2 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1150, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_4))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_5); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1150, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1150, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_2); __Pyx_INCREF(__pyx_t_5); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1150, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1150, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_7(__pyx_t_4);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1150, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if ((likely(PyTuple_CheckExact(__pyx_t_5))) || (PyList_CheckExact(__pyx_t_5))) {
      PyObject* sequence = __pyx_t_5;
      Py_ssize_t size = __Pyx_PySequence_SIZE(sequence);
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        __PYX_ERR(0, 1150, __pyx_L1_error)
      }
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      if (likely(PyTuple_CheckExact(sequence))) {
        __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyTuple_GET_ITEM(sequence, 1); 
      } else {
        __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
        __pyx_t_9 = PyList_GET_ITEM(sequence, 1); 
      }
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      #else
      __pyx_t_8 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1150, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1150, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      #endif
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } else {
      Py_ssize_t index = -1;
      __pyx_t_10 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1150, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_11 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10);
      index = 0; __pyx_t_8 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_8);
      index = 1; __pyx_t_9 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_9)) goto __pyx_L6_unpacking_failed;
      __Pyx_GOTREF(__pyx_t_9);
      if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 2) < 0) __PYX_ERR(0, 1150, __pyx_L1_error)
      __pyx_t_11 = NULL;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L7_unpacking_done;
      __pyx_L6_unpacking_failed:;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
      if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
      __PYX_ERR(0, 1150, __pyx_L1_error)
      __pyx_L7_unpacking_done:;
    }
    __Pyx_XDECREF_SET(__pyx_v_current, __pyx_t_8);
    __pyx_t_8 = 0;
    __Pyx_XDECREF_SET(__pyx_v_proposal, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1152
 *         for current, proposal in zip(current_prices, proposal_prices):
 *             # if spread diff is more than the tolerance or order quantities are different, return false.
 *             if abs(proposal - current) / current > self._order_refresh_tolerance_pct:             # <<<<<<<<<<<<<<
 *                 return False
 *         return True
 */
    __pyx_t_5 = PyNumber_Subtract(__pyx_v_proposal, __pyx_v_current); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = __Pyx_PyNumber_Absolute(__pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_9, __pyx_v_current); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = PyObject_RichCompare(__pyx_t_5, __pyx_v_self->_order_refresh_tolerance_pct, Py_GT); __Pyx_XGOTREF(__pyx_t_9); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1152, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_9); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 1152, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__pyx_t_3) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1153
 *             # if spread diff is more than the tolerance or order quantities are different, return false.
 *             if abs(proposal - current) / current > self._order_refresh_tolerance_pct:
 *                 return False             # <<<<<<<<<<<<<<
 *         return True
 * 
 */
      __pyx_r = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1152
 *         for current, proposal in zip(current_prices, proposal_prices):
 *             # if spread diff is more than the tolerance or order quantities are different, return false.
 *             if abs(proposal - current) / current > self._order_refresh_tolerance_pct:             # <<<<<<<<<<<<<<
 *                 return False
 *         return True
 */
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1150
 *         current_prices = sorted(current_prices)
 *         proposal_prices = sorted(proposal_prices)
 *         for current, proposal in zip(current_prices, proposal_prices):             # <<<<<<<<<<<<<<
 *             # if spread diff is more than the tolerance or order quantities are different, return false.
 *             if abs(proposal - current) / current > self._order_refresh_tolerance_pct:
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1154
 *             if abs(proposal - current) / current > self._order_refresh_tolerance_pct:
 *                 return False
 *         return True             # <<<<<<<<<<<<<<
 * 
 *     def is_within_tolerance(self, current_prices: List[Decimal], proposal_prices: List[Decimal]) -> bool:
 */
  __pyx_r = 1;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1145
 *             )
 * 
 *     cdef bint c_is_within_tolerance(self, list current_prices, list proposal_prices):             # <<<<<<<<<<<<<<
 *         if len(current_prices) != len(proposal_prices):
 *             return False
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_is_within_tolerance", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_current);
  __Pyx_XDECREF(__pyx_v_proposal);
  __Pyx_XDECREF(__pyx_v_current_prices);
  __Pyx_XDECREF(__pyx_v_proposal_prices);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1156
 *         return True
 * 
 *     def is_within_tolerance(self, current_prices: List[Decimal], proposal_prices: List[Decimal]) -> bool:             # <<<<<<<<<<<<<<
 *         return self.c_is_within_tolerance(current_prices, proposal_prices)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_71is_within_tolerance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_71is_within_tolerance = {"is_within_tolerance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_71is_within_tolerance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_71is_within_tolerance(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_current_prices = 0;
  PyObject *__pyx_v_proposal_prices = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_within_tolerance (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_current_prices,&__pyx_n_s_proposal_prices,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_current_prices,&__pyx_n_s_proposal_prices,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_current_prices)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1156, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_proposal_prices)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1156, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("is_within_tolerance", 1, 2, 2, 1); __PYX_ERR(0, 1156, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "is_within_tolerance") < 0)) __PYX_ERR(0, 1156, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_current_prices = values[0];
    __pyx_v_proposal_prices = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_within_tolerance", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1156, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.is_within_tolerance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_70is_within_tolerance(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_current_prices, __pyx_v_proposal_prices);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_70is_within_tolerance(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_current_prices, PyObject *__pyx_v_proposal_prices) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_within_tolerance", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1157
 * 
 *     def is_within_tolerance(self, current_prices: List[Decimal], proposal_prices: List[Decimal]) -> bool:
 *         return self.c_is_within_tolerance(current_prices, proposal_prices)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_cancel_active_orders_on_max_age_limit(self):
 */
  __Pyx_XDECREF(__pyx_r);
  if (!(likely(PyList_CheckExact(__pyx_v_current_prices))||((__pyx_v_current_prices) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_v_current_prices))) __PYX_ERR(0, 1157, __pyx_L1_error)
  if (!(likely(PyList_CheckExact(__pyx_v_proposal_prices))||((__pyx_v_proposal_prices) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_v_proposal_prices))) __PYX_ERR(0, 1157, __pyx_L1_error)
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_is_within_tolerance(__pyx_v_self, ((PyObject*)__pyx_v_current_prices), ((PyObject*)__pyx_v_proposal_prices))); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1156
 *         return True
 * 
 *     def is_within_tolerance(self, current_prices: List[Decimal], proposal_prices: List[Decimal]) -> bool:             # <<<<<<<<<<<<<<
 *         return self.c_is_within_tolerance(current_prices, proposal_prices)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.is_within_tolerance", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1159
 *         return self.c_is_within_tolerance(current_prices, proposal_prices)
 * 
 *     cdef c_cancel_active_orders_on_max_age_limit(self):             # <<<<<<<<<<<<<<
 *         """
 *         Cancels active non hanging orders if they are older than max age limit
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_cancel_active_orders_on_max_age_limit(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_v_active_orders = 0;
  PyObject *__pyx_v_order = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_cancel_active_orders_on_max_age_limit", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1164
 *         """
 *         cdef:
 *             list active_orders = self.active_non_hanging_orders             # <<<<<<<<<<<<<<
 *         for order in active_orders:
 *             if order_age(order) > self._max_order_age:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_active_non_hanging_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyList_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("list", __pyx_t_1))) __PYX_ERR(0, 1164, __pyx_L1_error)
  __pyx_v_active_orders = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1165
 *         cdef:
 *             list active_orders = self.active_non_hanging_orders
 *         for order in active_orders:             # <<<<<<<<<<<<<<
 *             if order_age(order) > self._max_order_age:
 *                 self.c_cancel_order(self._market_info, order.client_order_id)
 */
  if (unlikely(__pyx_v_active_orders == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 1165, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_v_active_orders; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    __pyx_t_3 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 1165, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1165, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_order, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1166
 *             list active_orders = self.active_non_hanging_orders
 *         for order in active_orders:
 *             if order_age(order) > self._max_order_age:             # <<<<<<<<<<<<<<
 *                 self.c_cancel_order(self._market_info, order.client_order_id)
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_order_age); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_order};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->_max_order_age); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_GT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1166, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_7) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1167
 *         for order in active_orders:
 *             if order_age(order) > self._max_order_age:
 *                 self.c_cancel_order(self._market_info, order.client_order_id)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_cancel_active_orders(self, object proposal):
 */
      __pyx_t_5 = __pyx_v_self->_market_info;
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_4))||((__pyx_t_4) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_4))) __PYX_ERR(0, 1167, __pyx_L1_error)
      __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_cancel_order(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_t_5, ((PyObject*)__pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1167, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1166
 *             list active_orders = self.active_non_hanging_orders
 *         for order in active_orders:
 *             if order_age(order) > self._max_order_age:             # <<<<<<<<<<<<<<
 *                 self.c_cancel_order(self._market_info, order.client_order_id)
 * 
 */
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1165
 *         cdef:
 *             list active_orders = self.active_non_hanging_orders
 *         for order in active_orders:             # <<<<<<<<<<<<<<
 *             if order_age(order) > self._max_order_age:
 *                 self.c_cancel_order(self._market_info, order.client_order_id)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1159
 *         return self.c_is_within_tolerance(current_prices, proposal_prices)
 * 
 *     cdef c_cancel_active_orders_on_max_age_limit(self):             # <<<<<<<<<<<<<<
 *         """
 *         Cancels active non hanging orders if they are older than max age limit
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_cancel_active_orders_on_max_age_limit", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_active_orders);
  __Pyx_XDECREF(__pyx_v_order);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1169
 *                 self.c_cancel_order(self._market_info, order.client_order_id)
 * 
 *     cdef c_cancel_active_orders(self, object proposal):             # <<<<<<<<<<<<<<
 *         if self._cancel_timestamp > self._current_timestamp:
 *             return
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_cancel_active_orders(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal) {
  PyObject *__pyx_v_active_buy_prices = 0;
  CYTHON_UNUSED PyObject *__pyx_v_active_sells = 0;
  int __pyx_v_to_defer_canceling;
  PyObject *__pyx_v_active_sell_prices = NULL;
  PyObject *__pyx_v_proposal_buys = NULL;
  PyObject *__pyx_v_proposal_sells = NULL;
  PyObject *__pyx_v_order = NULL;
  PyObject *__pyx_9genexpr16__pyx_v_o = NULL;
  PyObject *__pyx_9genexpr17__pyx_v_o = NULL;
  PyObject *__pyx_9genexpr18__pyx_v_buy = NULL;
  PyObject *__pyx_9genexpr19__pyx_v_sell = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_cancel_active_orders", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1170
 * 
 *     cdef c_cancel_active_orders(self, object proposal):
 *         if self._cancel_timestamp > self._current_timestamp:             # <<<<<<<<<<<<<<
 *             return
 *         if not global_config_map.get("0x_active_cancels").value:
 */
  __pyx_t_1 = ((__pyx_v_self->_cancel_timestamp > __pyx_v_self->__pyx_base.__pyx_base._current_timestamp) != 0);
  if (__pyx_t_1) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1171
 *     cdef c_cancel_active_orders(self, object proposal):
 *         if self._cancel_timestamp > self._current_timestamp:
 *             return             # <<<<<<<<<<<<<<
 *         if not global_config_map.get("0x_active_cancels").value:
 *             if ((self._market_info.market.name in self.RADAR_RELAY_TYPE_EXCHANGES) or
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1170
 * 
 *     cdef c_cancel_active_orders(self, object proposal):
 *         if self._cancel_timestamp > self._current_timestamp:             # <<<<<<<<<<<<<<
 *             return
 *         if not global_config_map.get("0x_active_cancels").value:
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1172
 *         if self._cancel_timestamp > self._current_timestamp:
 *             return
 *         if not global_config_map.get("0x_active_cancels").value:             # <<<<<<<<<<<<<<
 *             if ((self._market_info.market.name in self.RADAR_RELAY_TYPE_EXCHANGES) or
 *                     (self._market_info.market.name == "bamboo_relay" and not self._market_info.market.use_coordinator)):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_global_config_map); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_get); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_u_0x_active_cancels};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1172, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = ((!__pyx_t_1) != 0);
  if (__pyx_t_6) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1173
 *             return
 *         if not global_config_map.get("0x_active_cancels").value:
 *             if ((self._market_info.market.name in self.RADAR_RELAY_TYPE_EXCHANGES) or             # <<<<<<<<<<<<<<
 *                     (self._market_info.market.name == "bamboo_relay" and not self._market_info.market.use_coordinator)):
 *                 return
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_RADAR_RELAY_TYPE_EXCHANGES); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_t_2, __pyx_t_4, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1173, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = (__pyx_t_1 != 0);
    if (!__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1174
 *         if not global_config_map.get("0x_active_cancels").value:
 *             if ((self._market_info.market.name in self.RADAR_RELAY_TYPE_EXCHANGES) or
 *                     (self._market_info.market.name == "bamboo_relay" and not self._market_info.market.use_coordinator)):             # <<<<<<<<<<<<<<
 *                 return
 *         cdef:
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_bamboo_relay, Py_EQ)); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1174, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_7) {
    } else {
      __pyx_t_6 = __pyx_t_7;
      goto __pyx_L6_bool_binop_done;
    }
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_use_coordinator); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_7 < 0))) __PYX_ERR(0, 1174, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = ((!__pyx_t_7) != 0);
    __pyx_t_6 = __pyx_t_1;
    __pyx_L6_bool_binop_done:;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1173
 *             return
 *         if not global_config_map.get("0x_active_cancels").value:
 *             if ((self._market_info.market.name in self.RADAR_RELAY_TYPE_EXCHANGES) or             # <<<<<<<<<<<<<<
 *                     (self._market_info.market.name == "bamboo_relay" and not self._market_info.market.use_coordinator)):
 *                 return
 */
    if (__pyx_t_6) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1175
 *             if ((self._market_info.market.name in self.RADAR_RELAY_TYPE_EXCHANGES) or
 *                     (self._market_info.market.name == "bamboo_relay" and not self._market_info.market.use_coordinator)):
 *                 return             # <<<<<<<<<<<<<<
 *         cdef:
 *             list active_buy_prices = []
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_r = Py_None; __Pyx_INCREF(Py_None);
      goto __pyx_L0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1173
 *             return
 *         if not global_config_map.get("0x_active_cancels").value:
 *             if ((self._market_info.market.name in self.RADAR_RELAY_TYPE_EXCHANGES) or             # <<<<<<<<<<<<<<
 *                     (self._market_info.market.name == "bamboo_relay" and not self._market_info.market.use_coordinator)):
 *                 return
 */
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1172
 *         if self._cancel_timestamp > self._current_timestamp:
 *             return
 *         if not global_config_map.get("0x_active_cancels").value:             # <<<<<<<<<<<<<<
 *             if ((self._market_info.market.name in self.RADAR_RELAY_TYPE_EXCHANGES) or
 *                     (self._market_info.market.name == "bamboo_relay" and not self._market_info.market.use_coordinator)):
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1177
 *                 return
 *         cdef:
 *             list active_buy_prices = []             # <<<<<<<<<<<<<<
 *             list active_sells = []
 *             bint to_defer_canceling = False
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_active_buy_prices = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1178
 *         cdef:
 *             list active_buy_prices = []
 *             list active_sells = []             # <<<<<<<<<<<<<<
 *             bint to_defer_canceling = False
 *         if len(self.active_non_hanging_orders) == 0:
 */
  __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_active_sells = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1179
 *             list active_buy_prices = []
 *             list active_sells = []
 *             bint to_defer_canceling = False             # <<<<<<<<<<<<<<
 *         if len(self.active_non_hanging_orders) == 0:
 *             return
 */
  __pyx_v_to_defer_canceling = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1180
 *             list active_sells = []
 *             bint to_defer_canceling = False
 *         if len(self.active_non_hanging_orders) == 0:             # <<<<<<<<<<<<<<
 *             return
 *         if proposal is not None:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_active_non_hanging_orders); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1180, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = ((__pyx_t_8 == 0) != 0);
  if (__pyx_t_6) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1181
 *             bint to_defer_canceling = False
 *         if len(self.active_non_hanging_orders) == 0:
 *             return             # <<<<<<<<<<<<<<
 *         if proposal is not None:
 *             active_buy_prices = [Decimal(str(o.price)) for o in self.active_non_hanging_orders if o.is_buy]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1180
 *             list active_sells = []
 *             bint to_defer_canceling = False
 *         if len(self.active_non_hanging_orders) == 0:             # <<<<<<<<<<<<<<
 *             return
 *         if proposal is not None:
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1182
 *         if len(self.active_non_hanging_orders) == 0:
 *             return
 *         if proposal is not None:             # <<<<<<<<<<<<<<
 *             active_buy_prices = [Decimal(str(o.price)) for o in self.active_non_hanging_orders if o.is_buy]
 *             active_sell_prices = [Decimal(str(o.price)) for o in self.active_non_hanging_orders if not o.is_buy]
 */
  __pyx_t_6 = (__pyx_v_proposal != Py_None);
  __pyx_t_1 = (__pyx_t_6 != 0);
  if (__pyx_t_1) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1183
 *             return
 *         if proposal is not None:
 *             active_buy_prices = [Decimal(str(o.price)) for o in self.active_non_hanging_orders if o.is_buy]             # <<<<<<<<<<<<<<
 *             active_sell_prices = [Decimal(str(o.price)) for o in self.active_non_hanging_orders if not o.is_buy]
 *             proposal_buys = [buy.price for buy in proposal.buys]
 */
    { /* enter inner scope */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1183, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_active_non_hanging_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1183, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1183, __pyx_L13_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1183, __pyx_L13_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1183, __pyx_L13_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1183, __pyx_L13_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1183, __pyx_L13_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1183, __pyx_L13_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_9(__pyx_t_3);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1183, __pyx_L13_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_XDECREF_SET(__pyx_9genexpr16__pyx_v_o, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr16__pyx_v_o, __pyx_n_s_is_buy); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1183, __pyx_L13_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1183, __pyx_L13_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_1) {
          __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1183, __pyx_L13_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr16__pyx_v_o, __pyx_n_s_price); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1183, __pyx_L13_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = __Pyx_PyObject_Str(__pyx_t_11); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1183, __pyx_L13_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __pyx_t_11 = NULL;
          __pyx_t_5 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_11)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_11);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
              __pyx_t_5 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_12};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1183, __pyx_L13_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 1183, __pyx_L13_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_9genexpr16__pyx_v_o); __pyx_9genexpr16__pyx_v_o = 0;
      goto __pyx_L17_exit_scope;
      __pyx_L13_error:;
      __Pyx_XDECREF(__pyx_9genexpr16__pyx_v_o); __pyx_9genexpr16__pyx_v_o = 0;
      goto __pyx_L1_error;
      __pyx_L17_exit_scope:;
    } /* exit inner scope */
    __Pyx_DECREF_SET(__pyx_v_active_buy_prices, ((PyObject*)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1184
 *         if proposal is not None:
 *             active_buy_prices = [Decimal(str(o.price)) for o in self.active_non_hanging_orders if o.is_buy]
 *             active_sell_prices = [Decimal(str(o.price)) for o in self.active_non_hanging_orders if not o.is_buy]             # <<<<<<<<<<<<<<
 *             proposal_buys = [buy.price for buy in proposal.buys]
 *             proposal_sells = [sell.price for sell in proposal.sells]
 */
    { /* enter inner scope */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1184, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_active_non_hanging_orders); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1184, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1184, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1184, __pyx_L20_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1184, __pyx_L20_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1184, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1184, __pyx_L20_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1184, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_9(__pyx_t_2);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1184, __pyx_L20_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_9genexpr17__pyx_v_o, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr17__pyx_v_o, __pyx_n_s_is_buy); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1184, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1184, __pyx_L20_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_6 = ((!__pyx_t_1) != 0);
        if (__pyx_t_6) {
          __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1184, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr17__pyx_v_o, __pyx_n_s_price); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1184, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_11 = __Pyx_PyObject_Str(__pyx_t_12); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1184, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_t_12 = NULL;
          __pyx_t_5 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
            __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_10);
            if (likely(__pyx_t_12)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
              __Pyx_INCREF(__pyx_t_12);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_10, function);
              __pyx_t_5 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_11};
            __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1184, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          }
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 1184, __pyx_L20_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_9genexpr17__pyx_v_o); __pyx_9genexpr17__pyx_v_o = 0;
      goto __pyx_L24_exit_scope;
      __pyx_L20_error:;
      __Pyx_XDECREF(__pyx_9genexpr17__pyx_v_o); __pyx_9genexpr17__pyx_v_o = 0;
      goto __pyx_L1_error;
      __pyx_L24_exit_scope:;
    } /* exit inner scope */
    __pyx_v_active_sell_prices = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1185
 *             active_buy_prices = [Decimal(str(o.price)) for o in self.active_non_hanging_orders if o.is_buy]
 *             active_sell_prices = [Decimal(str(o.price)) for o in self.active_non_hanging_orders if not o.is_buy]
 *             proposal_buys = [buy.price for buy in proposal.buys]             # <<<<<<<<<<<<<<
 *             proposal_sells = [sell.price for sell in proposal.sells]
 * 
 */
    { /* enter inner scope */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1185, __pyx_L27_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_buys); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1185, __pyx_L27_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
        __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1185, __pyx_L27_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1185, __pyx_L27_error)
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_3))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1185, __pyx_L27_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1185, __pyx_L27_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_2); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1185, __pyx_L27_error)
            #else
            __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1185, __pyx_L27_error)
            __Pyx_GOTREF(__pyx_t_2);
            #endif
          }
        } else {
          __pyx_t_2 = __pyx_t_9(__pyx_t_3);
          if (unlikely(!__pyx_t_2)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1185, __pyx_L27_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_XDECREF_SET(__pyx_9genexpr18__pyx_v_buy, __pyx_t_2);
        __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr18__pyx_v_buy, __pyx_n_s_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1185, __pyx_L27_error)
        __Pyx_GOTREF(__pyx_t_2);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_2))) __PYX_ERR(0, 1185, __pyx_L27_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_9genexpr18__pyx_v_buy); __pyx_9genexpr18__pyx_v_buy = 0;
      goto __pyx_L30_exit_scope;
      __pyx_L27_error:;
      __Pyx_XDECREF(__pyx_9genexpr18__pyx_v_buy); __pyx_9genexpr18__pyx_v_buy = 0;
      goto __pyx_L1_error;
      __pyx_L30_exit_scope:;
    } /* exit inner scope */
    __pyx_v_proposal_buys = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1186
 *             active_sell_prices = [Decimal(str(o.price)) for o in self.active_non_hanging_orders if not o.is_buy]
 *             proposal_buys = [buy.price for buy in proposal.buys]
 *             proposal_sells = [sell.price for sell in proposal.sells]             # <<<<<<<<<<<<<<
 * 
 *             if self.c_is_within_tolerance(active_buy_prices, proposal_buys) and \
 */
    { /* enter inner scope */
      __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1186, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_sells); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1186, __pyx_L33_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
        __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1186, __pyx_L33_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1186, __pyx_L33_error)
      }
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_2))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1186, __pyx_L33_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1186, __pyx_L33_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_3); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1186, __pyx_L33_error)
            #else
            __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1186, __pyx_L33_error)
            __Pyx_GOTREF(__pyx_t_3);
            #endif
          }
        } else {
          __pyx_t_3 = __pyx_t_9(__pyx_t_2);
          if (unlikely(!__pyx_t_3)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 1186, __pyx_L33_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_3);
        }
        __Pyx_XDECREF_SET(__pyx_9genexpr19__pyx_v_sell, __pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr19__pyx_v_sell, __pyx_n_s_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1186, __pyx_L33_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_4, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 1186, __pyx_L33_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_9genexpr19__pyx_v_sell); __pyx_9genexpr19__pyx_v_sell = 0;
      goto __pyx_L36_exit_scope;
      __pyx_L33_error:;
      __Pyx_XDECREF(__pyx_9genexpr19__pyx_v_sell); __pyx_9genexpr19__pyx_v_sell = 0;
      goto __pyx_L1_error;
      __pyx_L36_exit_scope:;
    } /* exit inner scope */
    __pyx_v_proposal_sells = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1188
 *             proposal_sells = [sell.price for sell in proposal.sells]
 * 
 *             if self.c_is_within_tolerance(active_buy_prices, proposal_buys) and \             # <<<<<<<<<<<<<<
 *                     self.c_is_within_tolerance(active_sell_prices, proposal_sells):
 *                 to_defer_canceling = True
 */
    __pyx_t_1 = (((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_is_within_tolerance(__pyx_v_self, __pyx_v_active_buy_prices, __pyx_v_proposal_buys) != 0);
    if (__pyx_t_1) {
    } else {
      __pyx_t_6 = __pyx_t_1;
      goto __pyx_L38_bool_binop_done;
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1189
 * 
 *             if self.c_is_within_tolerance(active_buy_prices, proposal_buys) and \
 *                     self.c_is_within_tolerance(active_sell_prices, proposal_sells):             # <<<<<<<<<<<<<<
 *                 to_defer_canceling = True
 * 
 */
    __pyx_t_1 = (((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_is_within_tolerance(__pyx_v_self, __pyx_v_active_sell_prices, __pyx_v_proposal_sells) != 0);
    __pyx_t_6 = __pyx_t_1;
    __pyx_L38_bool_binop_done:;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1188
 *             proposal_sells = [sell.price for sell in proposal.sells]
 * 
 *             if self.c_is_within_tolerance(active_buy_prices, proposal_buys) and \             # <<<<<<<<<<<<<<
 *                     self.c_is_within_tolerance(active_sell_prices, proposal_sells):
 *                 to_defer_canceling = True
 */
    if (__pyx_t_6) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1190
 *             if self.c_is_within_tolerance(active_buy_prices, proposal_buys) and \
 *                     self.c_is_within_tolerance(active_sell_prices, proposal_sells):
 *                 to_defer_canceling = True             # <<<<<<<<<<<<<<
 * 
 *         if not to_defer_canceling:
 */
      __pyx_v_to_defer_canceling = 1;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1188
 *             proposal_sells = [sell.price for sell in proposal.sells]
 * 
 *             if self.c_is_within_tolerance(active_buy_prices, proposal_buys) and \             # <<<<<<<<<<<<<<
 *                     self.c_is_within_tolerance(active_sell_prices, proposal_sells):
 *                 to_defer_canceling = True
 */
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1182
 *         if len(self.active_non_hanging_orders) == 0:
 *             return
 *         if proposal is not None:             # <<<<<<<<<<<<<<
 *             active_buy_prices = [Decimal(str(o.price)) for o in self.active_non_hanging_orders if o.is_buy]
 *             active_sell_prices = [Decimal(str(o.price)) for o in self.active_non_hanging_orders if not o.is_buy]
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1192
 *                 to_defer_canceling = True
 * 
 *         if not to_defer_canceling:             # <<<<<<<<<<<<<<
 *             self._hanging_orders_tracker.update_strategy_orders_with_equivalent_orders()
 *             for order in self.active_non_hanging_orders:
 */
  __pyx_t_6 = ((!(__pyx_v_to_defer_canceling != 0)) != 0);
  if (__pyx_t_6) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1193
 * 
 *         if not to_defer_canceling:
 *             self._hanging_orders_tracker.update_strategy_orders_with_equivalent_orders()             # <<<<<<<<<<<<<<
 *             for order in self.active_non_hanging_orders:
 *                 # If is about to be added to hanging_orders then don't cancel
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_hanging_orders_tracker, __pyx_n_s_update_strategy_orders_with_equi); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_3, };
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1193, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1194
 *         if not to_defer_canceling:
 *             self._hanging_orders_tracker.update_strategy_orders_with_equivalent_orders()
 *             for order in self.active_non_hanging_orders:             # <<<<<<<<<<<<<<
 *                 # If is about to be added to hanging_orders then don't cancel
 *                 if not self._hanging_orders_tracker.is_potential_hanging_order(order):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_active_non_hanging_orders); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_2 = __pyx_t_4; __Pyx_INCREF(__pyx_t_2); __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_9 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1194, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1194, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1194, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1194, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_2, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1194, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_9(__pyx_t_2);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1194, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_order, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1196
 *             for order in self.active_non_hanging_orders:
 *                 # If is about to be added to hanging_orders then don't cancel
 *                 if not self._hanging_orders_tracker.is_potential_hanging_order(order):             # <<<<<<<<<<<<<<
 *                     self.c_cancel_order(self._market_info, order.client_order_id)
 *         else:
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_hanging_orders_tracker, __pyx_n_s_is_potential_hanging_order); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1196, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_10)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_10);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_v_order};
        __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1196, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1196, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_1 = ((!__pyx_t_6) != 0);
      if (__pyx_t_1) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1197
 *                 # If is about to be added to hanging_orders then don't cancel
 *                 if not self._hanging_orders_tracker.is_potential_hanging_order(order):
 *                     self.c_cancel_order(self._market_info, order.client_order_id)             # <<<<<<<<<<<<<<
 *         else:
 *             self.c_set_timers()
 */
        __pyx_t_4 = __pyx_v_self->_market_info;
        __Pyx_INCREF(__pyx_t_4);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1197, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        if (!(likely(PyUnicode_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_3))) __PYX_ERR(0, 1197, __pyx_L1_error)
        __pyx_t_10 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_cancel_order(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_v_self), __pyx_t_4, ((PyObject*)__pyx_t_3)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1197, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1196
 *             for order in self.active_non_hanging_orders:
 *                 # If is about to be added to hanging_orders then don't cancel
 *                 if not self._hanging_orders_tracker.is_potential_hanging_order(order):             # <<<<<<<<<<<<<<
 *                     self.c_cancel_order(self._market_info, order.client_order_id)
 *         else:
 */
      }

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1194
 *         if not to_defer_canceling:
 *             self._hanging_orders_tracker.update_strategy_orders_with_equivalent_orders()
 *             for order in self.active_non_hanging_orders:             # <<<<<<<<<<<<<<
 *                 # If is about to be added to hanging_orders then don't cancel
 *                 if not self._hanging_orders_tracker.is_potential_hanging_order(order):
 */
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1192
 *                 to_defer_canceling = True
 * 
 *         if not to_defer_canceling:             # <<<<<<<<<<<<<<
 *             self._hanging_orders_tracker.update_strategy_orders_with_equivalent_orders()
 *             for order in self.active_non_hanging_orders:
 */
    goto __pyx_L40;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1199
 *                     self.c_cancel_order(self._market_info, order.client_order_id)
 *         else:
 *             self.c_set_timers()             # <<<<<<<<<<<<<<
 * 
 *     def cancel_active_orders(self, proposal: Proposal):
 */
  /*else*/ {
    __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_set_timers(__pyx_v_self); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1199, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_L40:;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1169
 *                 self.c_cancel_order(self._market_info, order.client_order_id)
 * 
 *     cdef c_cancel_active_orders(self, object proposal):             # <<<<<<<<<<<<<<
 *         if self._cancel_timestamp > self._current_timestamp:
 *             return
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_cancel_active_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_active_buy_prices);
  __Pyx_XDECREF(__pyx_v_active_sells);
  __Pyx_XDECREF(__pyx_v_active_sell_prices);
  __Pyx_XDECREF(__pyx_v_proposal_buys);
  __Pyx_XDECREF(__pyx_v_proposal_sells);
  __Pyx_XDECREF(__pyx_v_order);
  __Pyx_XDECREF(__pyx_9genexpr16__pyx_v_o);
  __Pyx_XDECREF(__pyx_9genexpr17__pyx_v_o);
  __Pyx_XDECREF(__pyx_9genexpr18__pyx_v_buy);
  __Pyx_XDECREF(__pyx_9genexpr19__pyx_v_sell);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1201
 *             self.c_set_timers()
 * 
 *     def cancel_active_orders(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_cancel_active_orders(proposal)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_73cancel_active_orders(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_73cancel_active_orders = {"cancel_active_orders", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_73cancel_active_orders, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_73cancel_active_orders(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_proposal = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_active_orders (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_proposal)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1201, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "cancel_active_orders") < 0)) __PYX_ERR(0, 1201, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_proposal = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cancel_active_orders", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1201, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.cancel_active_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_72cancel_active_orders(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_proposal);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_72cancel_active_orders(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cancel_active_orders", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1202
 * 
 *     def cancel_active_orders(self, proposal: Proposal):
 *         return self.c_cancel_active_orders(proposal)             # <<<<<<<<<<<<<<
 * 
 *     cdef bint c_to_create_orders(self, object proposal):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_cancel_active_orders(__pyx_v_self, __pyx_v_proposal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1202, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1201
 *             self.c_set_timers()
 * 
 *     def cancel_active_orders(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_cancel_active_orders(proposal)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.cancel_active_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1204
 *         return self.c_cancel_active_orders(proposal)
 * 
 *     cdef bint c_to_create_orders(self, object proposal):             # <<<<<<<<<<<<<<
 *         non_hanging_orders_non_cancelled = [o for o in self.active_non_hanging_orders if not
 *                                             self._hanging_orders_tracker.is_potential_hanging_order(o)]
 */

static int __pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_to_create_orders(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal) {
  PyObject *__pyx_v_non_hanging_orders_non_cancelled = NULL;
  PyObject *__pyx_9genexpr20__pyx_v_o = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_to_create_orders", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1205
 * 
 *     cdef bint c_to_create_orders(self, object proposal):
 *         non_hanging_orders_non_cancelled = [o for o in self.active_non_hanging_orders if not             # <<<<<<<<<<<<<<
 *                                             self._hanging_orders_tracker.is_potential_hanging_order(o)]
 * 
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1205, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_active_non_hanging_orders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1205, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
      __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_5 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1205, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1205, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (;;) {
      if (likely(!__pyx_t_5)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 1205, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1205, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 1205, __pyx_L5_error)
          #else
          __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1205, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
        }
      } else {
        __pyx_t_2 = __pyx_t_5(__pyx_t_3);
        if (unlikely(!__pyx_t_2)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1205, __pyx_L5_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_2);
      }
      __Pyx_XDECREF_SET(__pyx_9genexpr20__pyx_v_o, __pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1206
 *     cdef bint c_to_create_orders(self, object proposal):
 *         non_hanging_orders_non_cancelled = [o for o in self.active_non_hanging_orders if not
 *                                             self._hanging_orders_tracker.is_potential_hanging_order(o)]             # <<<<<<<<<<<<<<
 * 
 *         return (self._create_timestamp < self._current_timestamp
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_hanging_orders_tracker, __pyx_n_s_is_potential_hanging_order); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1206, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_7 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_8 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_9genexpr20__pyx_v_o};
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1206, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 1206, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1205
 * 
 *     cdef bint c_to_create_orders(self, object proposal):
 *         non_hanging_orders_non_cancelled = [o for o in self.active_non_hanging_orders if not             # <<<<<<<<<<<<<<
 *                                             self._hanging_orders_tracker.is_potential_hanging_order(o)]
 * 
 */
      __pyx_t_10 = ((!__pyx_t_9) != 0);
      if (__pyx_t_10) {
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_9genexpr20__pyx_v_o))) __PYX_ERR(0, 1205, __pyx_L5_error)
      }
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_9genexpr20__pyx_v_o); __pyx_9genexpr20__pyx_v_o = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_9genexpr20__pyx_v_o); __pyx_9genexpr20__pyx_v_o = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  __pyx_v_non_hanging_orders_non_cancelled = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1208
 *                                             self._hanging_orders_tracker.is_potential_hanging_order(o)]
 * 
 *         return (self._create_timestamp < self._current_timestamp             # <<<<<<<<<<<<<<
 *                 and (not self._should_wait_order_cancel_confirmation or
 *                      len(self._sb_order_tracker.in_flight_cancels) == 0)
 */
  __pyx_t_9 = ((__pyx_v_self->_create_timestamp < __pyx_v_self->__pyx_base.__pyx_base._current_timestamp) != 0);
  if (__pyx_t_9) {
  } else {
    __pyx_t_10 = __pyx_t_9;
    goto __pyx_L10_bool_binop_done;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1209
 * 
 *         return (self._create_timestamp < self._current_timestamp
 *                 and (not self._should_wait_order_cancel_confirmation or             # <<<<<<<<<<<<<<
 *                      len(self._sb_order_tracker.in_flight_cancels) == 0)
 *                 and proposal is not None
 */
  __pyx_t_9 = ((!(__pyx_v_self->_should_wait_order_cancel_confirmation != 0)) != 0);
  if (!__pyx_t_9) {
  } else {
    goto __pyx_L12_next_and;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1210
 *         return (self._create_timestamp < self._current_timestamp
 *                 and (not self._should_wait_order_cancel_confirmation or
 *                      len(self._sb_order_tracker.in_flight_cancels) == 0)             # <<<<<<<<<<<<<<
 *                 and proposal is not None
 *                 and len(non_hanging_orders_non_cancelled) == 0)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->__pyx_base._sb_order_tracker), __pyx_n_s_in_flight_cancels); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1210, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_9 = ((__pyx_t_4 == 0) != 0);
  if (__pyx_t_9) {
  } else {
    __pyx_t_10 = __pyx_t_9;
    goto __pyx_L10_bool_binop_done;
  }
  __pyx_L12_next_and:;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1211
 *                 and (not self._should_wait_order_cancel_confirmation or
 *                      len(self._sb_order_tracker.in_flight_cancels) == 0)
 *                 and proposal is not None             # <<<<<<<<<<<<<<
 *                 and len(non_hanging_orders_non_cancelled) == 0)
 * 
 */
  __pyx_t_9 = (__pyx_v_proposal != Py_None);
  __pyx_t_11 = (__pyx_t_9 != 0);
  if (__pyx_t_11) {
  } else {
    __pyx_t_10 = __pyx_t_11;
    goto __pyx_L10_bool_binop_done;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1212
 *                      len(self._sb_order_tracker.in_flight_cancels) == 0)
 *                 and proposal is not None
 *                 and len(non_hanging_orders_non_cancelled) == 0)             # <<<<<<<<<<<<<<
 * 
 *     def to_create_orders(self, proposal: Proposal) -> bool:
 */
  __pyx_t_4 = PyList_GET_SIZE(__pyx_v_non_hanging_orders_non_cancelled); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1212, __pyx_L1_error)
  __pyx_t_11 = ((__pyx_t_4 == 0) != 0);
  __pyx_t_10 = __pyx_t_11;
  __pyx_L10_bool_binop_done:;
  __pyx_r = __pyx_t_10;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1204
 *         return self.c_cancel_active_orders(proposal)
 * 
 *     cdef bint c_to_create_orders(self, object proposal):             # <<<<<<<<<<<<<<
 *         non_hanging_orders_non_cancelled = [o for o in self.active_non_hanging_orders if not
 *                                             self._hanging_orders_tracker.is_potential_hanging_order(o)]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_WriteUnraisable("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_to_create_orders", __pyx_clineno, __pyx_lineno, __pyx_filename, 1, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_non_hanging_orders_non_cancelled);
  __Pyx_XDECREF(__pyx_9genexpr20__pyx_v_o);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1214
 *                 and len(non_hanging_orders_non_cancelled) == 0)
 * 
 *     def to_create_orders(self, proposal: Proposal) -> bool:             # <<<<<<<<<<<<<<
 *         return self.c_to_create_orders(proposal)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_75to_create_orders(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_75to_create_orders = {"to_create_orders", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_75to_create_orders, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_75to_create_orders(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_proposal = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("to_create_orders (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_proposal)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1214, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "to_create_orders") < 0)) __PYX_ERR(0, 1214, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_proposal = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("to_create_orders", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1214, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.to_create_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_74to_create_orders(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_proposal);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_74to_create_orders(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("to_create_orders", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1215
 * 
 *     def to_create_orders(self, proposal: Proposal) -> bool:
 *         return self.c_to_create_orders(proposal)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_execute_orders_proposal(self, object proposal):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_to_create_orders(__pyx_v_self, __pyx_v_proposal)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1214
 *                 and len(non_hanging_orders_non_cancelled) == 0)
 * 
 *     def to_create_orders(self, proposal: Proposal) -> bool:             # <<<<<<<<<<<<<<
 *         return self.c_to_create_orders(proposal)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.to_create_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25c_execute_orders_proposal_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1248
 *                 orders_created = True
 *                 if idx < number_of_pairs:
 *                     order = next((o for o in self.active_orders if o.client_order_id == bid_order_id))             # <<<<<<<<<<<<<<
 *                     if order:
 *                         self._hanging_orders_tracker.add_current_pairs_of_proposal_orders_executed_by_strategy(
 */

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25c_execute_orders_proposal_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr *)__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1248, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25c_execute_orders_proposal_2generator1, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_AvellanedaMarketMakingStrategy_c_3, __pyx_n_s_hummingbot_strategy_avellaneda_m); if (unlikely(!gen)) __PYX_ERR(0, 1248, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_execute_orders_proposal.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25c_execute_orders_proposal_2generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1248, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 1248, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_active_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1248, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 1248, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 1248, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1248, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_o);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_o, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_o, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_bid_order_id)) { __Pyx_RaiseClosureNameError("bid_order_id"); __PYX_ERR(0, 1248, __pyx_L1_error) }
    __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_bid_order_id, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1248, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_5) {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_o);
      __pyx_r = __pyx_cur_scope->__pyx_v_o;
      __Pyx_XGIVEREF(__pyx_t_2);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_yield:;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1248, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25c_execute_orders_proposal_5generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1271
 *                 orders_created = True
 *                 if idx < number_of_pairs:
 *                     order = next((o for o in self.active_orders if o.client_order_id == ask_order_id))             # <<<<<<<<<<<<<<
 *                     if order:
 *                         self._hanging_orders_tracker.current_created_pairs_of_orders[idx].sell_order = order
 */

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25c_execute_orders_proposal_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr *)__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1271, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25c_execute_orders_proposal_5generator2, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_AvellanedaMarketMakingStrategy_c_3, __pyx_n_s_hummingbot_strategy_avellaneda_m); if (unlikely(!gen)) __PYX_ERR(0, 1271, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_execute_orders_proposal.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25c_execute_orders_proposal_5generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1271, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(0, 1271, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self), __pyx_n_s_active_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1271, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 1271, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1271, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely((0 < 0))) __PYX_ERR(0, 1271, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1271, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 1271, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_o);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_o, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_o, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_ask_order_id)) { __Pyx_RaiseClosureNameError("ask_order_id"); __PYX_ERR(0, 1271, __pyx_L1_error) }
    __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_cur_scope->__pyx_outer_scope->__pyx_v_ask_order_id, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1271, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_5) {
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_o);
      __pyx_r = __pyx_cur_scope->__pyx_v_o;
      __Pyx_XGIVEREF(__pyx_t_2);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
      __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, yielding value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_yield:;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_2);
      __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
      __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1271, __pyx_L1_error)
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1217
 *         return self.c_to_create_orders(proposal)
 * 
 *     cdef c_execute_orders_proposal(self, object proposal):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double expiration_seconds = (self._order_refresh_time
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_execute_orders_proposal(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal) {
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal *__pyx_cur_scope;
  double __pyx_v_expiration_seconds;
  int __pyx_v_orders_created;
  Py_ssize_t __pyx_v_number_of_pairs;
  PyObject *__pyx_v_price_quote_str = NULL;
  PyObject *__pyx_v_idx = NULL;
  PyObject *__pyx_v_buy = NULL;
  PyObject *__pyx_v_order = NULL;
  PyObject *__pyx_v_sell = NULL;
  PyObject *__pyx_9genexpr21__pyx_v_buy = NULL;
  PyObject *__pyx_gb_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25c_execute_orders_proposal_2generator1 = 0;
  PyObject *__pyx_9genexpr23__pyx_v_sell = NULL;
  PyObject *__pyx_gb_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25c_execute_orders_proposal_5generator2 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  double __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *(*__pyx_t_13)(PyObject *);
  Py_UCS4 __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_buy_with_specific_market __pyx_t_20;
  struct __pyx_opt_args_10hummingbot_8strategy_13strategy_base_12StrategyBase_c_sell_with_specific_market __pyx_t_21;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_execute_orders_proposal", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal *)__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1217, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1220
 *         cdef:
 *             double expiration_seconds = (self._order_refresh_time
 *                                          if ((self._market_info.market.name in self.RADAR_RELAY_TYPE_EXCHANGES) or             # <<<<<<<<<<<<<<
 *                                              (self._market_info.market.name == "bamboo_relay" and
 *                                               not self._market_info.market.use_coordinator))
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_name_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_RADAR_RELAY_TYPE_EXCHANGES); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_t_4, __pyx_t_3, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 1220, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L3_bool_binop_done;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1221
 *             double expiration_seconds = (self._order_refresh_time
 *                                          if ((self._market_info.market.name in self.RADAR_RELAY_TYPE_EXCHANGES) or
 *                                              (self._market_info.market.name == "bamboo_relay" and             # <<<<<<<<<<<<<<
 *                                               not self._market_info.market.use_coordinator))
 *                                          else NaN)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_name_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1221, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_t_4, __pyx_n_u_bamboo_relay, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1221, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_6) {
  } else {
    __pyx_t_2 = __pyx_t_6;
    goto __pyx_L3_bool_binop_done;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1222
 *                                          if ((self._market_info.market.name in self.RADAR_RELAY_TYPE_EXCHANGES) or
 *                                              (self._market_info.market.name == "bamboo_relay" and
 *                                               not self._market_info.market.use_coordinator))             # <<<<<<<<<<<<<<
 *                                          else NaN)
 *             str bid_order_id, ask_order_id
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_use_coordinator); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1222, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1222, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = ((!__pyx_t_6) != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L3_bool_binop_done:;
  if (__pyx_t_2) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1219
 *     cdef c_execute_orders_proposal(self, object proposal):
 *         cdef:
 *             double expiration_seconds = (self._order_refresh_time             # <<<<<<<<<<<<<<
 *                                          if ((self._market_info.market.name in self.RADAR_RELAY_TYPE_EXCHANGES) or
 *                                              (self._market_info.market.name == "bamboo_relay" and
 */
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->_order_refresh_time;
  } else {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1223
 *                                              (self._market_info.market.name == "bamboo_relay" and
 *                                               not self._market_info.market.use_coordinator))
 *                                          else NaN)             # <<<<<<<<<<<<<<
 *             str bid_order_id, ask_order_id
 *             bint orders_created = False
 */
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_NaN); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_7 == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 1223, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __pyx_t_7;
  }
  __pyx_v_expiration_seconds = __pyx_t_1;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1225
 *                                          else NaN)
 *             str bid_order_id, ask_order_id
 *             bint orders_created = False             # <<<<<<<<<<<<<<
 *         # Number of pair of orders to track for hanging orders
 *         number_of_pairs = min((len(proposal.buys), len(proposal.sells))) if self._hanging_orders_enabled else 0
 */
  __pyx_v_orders_created = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1227
 *             bint orders_created = False
 *         # Number of pair of orders to track for hanging orders
 *         number_of_pairs = min((len(proposal.buys), len(proposal.sells))) if self._hanging_orders_enabled else 0             # <<<<<<<<<<<<<<
 * 
 *         if len(proposal.buys) > 0:
 */
  if ((__pyx_cur_scope->__pyx_v_self->_hanging_orders_enabled != 0)) {
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_sells); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_9 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_9 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1227, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_buys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_10 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1227, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (((__pyx_t_9 < __pyx_t_10) != 0)) {
      __pyx_t_11 = __pyx_t_9;
    } else {
      __pyx_t_11 = __pyx_t_10;
    }
    __pyx_t_8 = __pyx_t_11;
  } else {
    __pyx_t_8 = 0;
  }
  __pyx_v_number_of_pairs = __pyx_t_8;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1229
 *         number_of_pairs = min((len(proposal.buys), len(proposal.sells))) if self._hanging_orders_enabled else 0
 * 
 *         if len(proposal.buys) > 0:             # <<<<<<<<<<<<<<
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                 price_quote_str = [f"{buy.size.normalize()} {self.base_asset}, "
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_buys); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1229, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = ((__pyx_t_8 > 0) != 0);
  if (__pyx_t_2) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1230
 * 
 *         if len(proposal.buys) > 0:
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:             # <<<<<<<<<<<<<<
 *                 price_quote_str = [f"{buy.size.normalize()} {self.base_asset}, "
 *                                    f"{buy.price.normalize()} {self.quote_asset}"
 */
    __pyx_t_3 = __Pyx_PyInt_From_int64_t(__pyx_cur_scope->__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_OPTION_LOG_CREATE_ORDER); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_12 = PyNumber_And(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1230, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (__pyx_t_2) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1231
 *         if len(proposal.buys) > 0:
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                 price_quote_str = [f"{buy.size.normalize()} {self.base_asset}, "             # <<<<<<<<<<<<<<
 *                                    f"{buy.price.normalize()} {self.quote_asset}"
 *                                    for buy in proposal.buys]
 */
      { /* enter inner scope */
        __pyx_t_12 = PyList_New(0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1231, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_12);

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1233
 *                 price_quote_str = [f"{buy.size.normalize()} {self.base_asset}, "
 *                                    f"{buy.price.normalize()} {self.quote_asset}"
 *                                    for buy in proposal.buys]             # <<<<<<<<<<<<<<
 *                 self.logger().info(
 *                     f"({self.trading_pair}) Creating {len(proposal.buys)} bid orders "
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_buys); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1233, __pyx_L10_error)
        __Pyx_GOTREF(__pyx_t_4);
        if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
          __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3); __pyx_t_8 = 0;
          __pyx_t_13 = NULL;
        } else {
          __pyx_t_8 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1233, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_13 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1233, __pyx_L10_error)
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        for (;;) {
          if (likely(!__pyx_t_13)) {
            if (likely(PyList_CheckExact(__pyx_t_3))) {
              if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_3)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1233, __pyx_L10_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1233, __pyx_L10_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            } else {
              if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1233, __pyx_L10_error)
              #else
              __pyx_t_4 = PySequence_ITEM(__pyx_t_3, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1233, __pyx_L10_error)
              __Pyx_GOTREF(__pyx_t_4);
              #endif
            }
          } else {
            __pyx_t_4 = __pyx_t_13(__pyx_t_3);
            if (unlikely(!__pyx_t_4)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1233, __pyx_L10_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_4);
          }
          __Pyx_XDECREF_SET(__pyx_9genexpr21__pyx_v_buy, __pyx_t_4);
          __pyx_t_4 = 0;

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1231
 *         if len(proposal.buys) > 0:
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                 price_quote_str = [f"{buy.size.normalize()} {self.base_asset}, "             # <<<<<<<<<<<<<<
 *                                    f"{buy.price.normalize()} {self.quote_asset}"
 *                                    for buy in proposal.buys]
 */
          __pyx_t_4 = PyTuple_New(7); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1231, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_11 = 0;
          __pyx_t_14 = 127;
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr21__pyx_v_buy, __pyx_n_s_size); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1231, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_normalize); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1231, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_16 = NULL;
          __pyx_t_18 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_16)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_16);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
              __pyx_t_18 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_16, };
            __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_17, __pyx_callargs+1-__pyx_t_18, 0+__pyx_t_18);
            __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1231, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          }
          __pyx_t_17 = __Pyx_PyObject_FormatSimple(__pyx_t_15, __pyx_empty_unicode); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1231, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) : __pyx_t_14;
          __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_17);
          __Pyx_GIVEREF(__pyx_t_17);
          PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_17);
          __pyx_t_17 = 0;
          __Pyx_INCREF(__pyx_kp_u__25);
          __pyx_t_11 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__25);
          PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_kp_u__25);
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_base_asset); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1231, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_15 = __Pyx_PyObject_FormatSimple(__pyx_t_17, __pyx_empty_unicode); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1231, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) : __pyx_t_14;
          __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_15);
          __Pyx_GIVEREF(__pyx_t_15);
          PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_15);
          __pyx_t_15 = 0;
          __Pyx_INCREF(__pyx_kp_u__28);
          __pyx_t_11 += 2;
          __Pyx_GIVEREF(__pyx_kp_u__28);
          PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_kp_u__28);

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1232
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                 price_quote_str = [f"{buy.size.normalize()} {self.base_asset}, "
 *                                    f"{buy.price.normalize()} {self.quote_asset}"             # <<<<<<<<<<<<<<
 *                                    for buy in proposal.buys]
 *                 self.logger().info(
 */
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr21__pyx_v_buy, __pyx_n_s_price); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1232, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_17);
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_normalize); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1232, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_17 = NULL;
          __pyx_t_18 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
            __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_16);
            if (likely(__pyx_t_17)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
              __Pyx_INCREF(__pyx_t_17);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_16, function);
              __pyx_t_18 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_17, };
            __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_18, 0+__pyx_t_18);
            __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
            if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1232, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          }
          __pyx_t_16 = __Pyx_PyObject_FormatSimple(__pyx_t_15, __pyx_empty_unicode); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1232, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) : __pyx_t_14;
          __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_16);
          __Pyx_GIVEREF(__pyx_t_16);
          PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_t_16);
          __pyx_t_16 = 0;
          __Pyx_INCREF(__pyx_kp_u__25);
          __pyx_t_11 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__25);
          PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_kp_u__25);
          __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1232, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_15 = __Pyx_PyObject_FormatSimple(__pyx_t_16, __pyx_empty_unicode); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1232, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) : __pyx_t_14;
          __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_15);
          __Pyx_GIVEREF(__pyx_t_15);
          PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_t_15);
          __pyx_t_15 = 0;

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1231
 *         if len(proposal.buys) > 0:
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                 price_quote_str = [f"{buy.size.normalize()} {self.base_asset}, "             # <<<<<<<<<<<<<<
 *                                    f"{buy.price.normalize()} {self.quote_asset}"
 *                                    for buy in proposal.buys]
 */
          __pyx_t_15 = __Pyx_PyUnicode_Join(__pyx_t_4, 7, __pyx_t_11, __pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1231, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_12, (PyObject*)__pyx_t_15))) __PYX_ERR(0, 1231, __pyx_L10_error)
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1233
 *                 price_quote_str = [f"{buy.size.normalize()} {self.base_asset}, "
 *                                    f"{buy.price.normalize()} {self.quote_asset}"
 *                                    for buy in proposal.buys]             # <<<<<<<<<<<<<<
 *                 self.logger().info(
 *                     f"({self.trading_pair}) Creating {len(proposal.buys)} bid orders "
 */
        }
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_9genexpr21__pyx_v_buy); __pyx_9genexpr21__pyx_v_buy = 0;
        goto __pyx_L13_exit_scope;
        __pyx_L10_error:;
        __Pyx_XDECREF(__pyx_9genexpr21__pyx_v_buy); __pyx_9genexpr21__pyx_v_buy = 0;
        goto __pyx_L1_error;
        __pyx_L13_exit_scope:;
      } /* exit inner scope */
      __pyx_v_price_quote_str = ((PyObject*)__pyx_t_12);
      __pyx_t_12 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1234
 *                                    f"{buy.price.normalize()} {self.quote_asset}"
 *                                    for buy in proposal.buys]
 *                 self.logger().info(             # <<<<<<<<<<<<<<
 *                     f"({self.trading_pair}) Creating {len(proposal.buys)} bid orders "
 *                     f"at (Size, Price): {price_quote_str}"
 */
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1234, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_4 = NULL;
      __pyx_t_18 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_15);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_15, function);
          __pyx_t_18 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_4, };
        __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_18, 0+__pyx_t_18);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1234, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      }
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1234, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1235
 *                                    for buy in proposal.buys]
 *                 self.logger().info(
 *                     f"({self.trading_pair}) Creating {len(proposal.buys)} bid orders "             # <<<<<<<<<<<<<<
 *                     f"at (Size, Price): {price_quote_str}"
 *                 )
 */
      __pyx_t_3 = PyTuple_New(6); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_8 = 0;
      __pyx_t_14 = 127;
      __Pyx_INCREF(__pyx_kp_u__24);
      __pyx_t_8 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__24);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u__24);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_16 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) : __pyx_t_14;
      __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_16);
      __pyx_t_16 = 0;
      __Pyx_INCREF(__pyx_kp_u_Creating);
      __pyx_t_8 += 11;
      __Pyx_GIVEREF(__pyx_kp_u_Creating);
      PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_Creating);
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_buys); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_11 = PyObject_Length(__pyx_t_16); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1235, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_16 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_11, 0, ' ', 'd'); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_3, 3, __pyx_t_16);
      __pyx_t_16 = 0;
      __Pyx_INCREF(__pyx_kp_u_bid_orders_at_Size_Price);
      __pyx_t_8 += 30;
      __Pyx_GIVEREF(__pyx_kp_u_bid_orders_at_Size_Price);
      PyTuple_SET_ITEM(__pyx_t_3, 4, __pyx_kp_u_bid_orders_at_Size_Price);

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1236
 *                 self.logger().info(
 *                     f"({self.trading_pair}) Creating {len(proposal.buys)} bid orders "
 *                     f"at (Size, Price): {price_quote_str}"             # <<<<<<<<<<<<<<
 *                 )
 *             for idx, buy in enumerate(proposal.buys):
 */
      __pyx_t_16 = __Pyx_PyObject_FormatSimple(__pyx_v_price_quote_str, __pyx_empty_unicode); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1236, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) : __pyx_t_14;
      __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_16);
      PyTuple_SET_ITEM(__pyx_t_3, 5, __pyx_t_16);
      __pyx_t_16 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1235
 *                                    for buy in proposal.buys]
 *                 self.logger().info(
 *                     f"({self.trading_pair}) Creating {len(proposal.buys)} bid orders "             # <<<<<<<<<<<<<<
 *                     f"at (Size, Price): {price_quote_str}"
 *                 )
 */
      __pyx_t_16 = __Pyx_PyUnicode_Join(__pyx_t_3, 6, __pyx_t_8, __pyx_t_14); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1235, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_3 = NULL;
      __pyx_t_18 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_15);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_15, function);
          __pyx_t_18 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_16};
        __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_18, 1+__pyx_t_18);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1234, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      }
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1230
 * 
 *         if len(proposal.buys) > 0:
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:             # <<<<<<<<<<<<<<
 *                 price_quote_str = [f"{buy.size.normalize()} {self.base_asset}, "
 *                                    f"{buy.price.normalize()} {self.quote_asset}"
 */
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1238
 *                     f"at (Size, Price): {price_quote_str}"
 *                 )
 *             for idx, buy in enumerate(proposal.buys):             # <<<<<<<<<<<<<<
 *                 bid_order_id = self.c_buy_with_specific_market(
 *                     self._market_info,
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_12 = __pyx_int_0;
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_buys); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1238, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    if (likely(PyList_CheckExact(__pyx_t_15)) || PyTuple_CheckExact(__pyx_t_15)) {
      __pyx_t_16 = __pyx_t_15; __Pyx_INCREF(__pyx_t_16); __pyx_t_8 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_16 = PyObject_GetIter(__pyx_t_15); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1238, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_13 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_16); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1238, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_16))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_16)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_15 = PyList_GET_ITEM(__pyx_t_16, __pyx_t_8); __Pyx_INCREF(__pyx_t_15); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1238, __pyx_L1_error)
          #else
          __pyx_t_15 = PySequence_ITEM(__pyx_t_16, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1238, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_16)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_15 = PyTuple_GET_ITEM(__pyx_t_16, __pyx_t_8); __Pyx_INCREF(__pyx_t_15); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1238, __pyx_L1_error)
          #else
          __pyx_t_15 = PySequence_ITEM(__pyx_t_16, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1238, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          #endif
        }
      } else {
        __pyx_t_15 = __pyx_t_13(__pyx_t_16);
        if (unlikely(!__pyx_t_15)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1238, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_15);
      }
      __Pyx_XDECREF_SET(__pyx_v_buy, __pyx_t_15);
      __pyx_t_15 = 0;
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_12);
      __pyx_t_15 = __Pyx_PyInt_AddObjC(__pyx_t_12, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1238, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_12);
      __pyx_t_12 = __pyx_t_15;
      __pyx_t_15 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1240
 *             for idx, buy in enumerate(proposal.buys):
 *                 bid_order_id = self.c_buy_with_specific_market(
 *                     self._market_info,             # <<<<<<<<<<<<<<
 *                     buy.size,
 *                     order_type=self._limit_order_type,
 */
      __pyx_t_15 = __pyx_cur_scope->__pyx_v_self->_market_info;
      __Pyx_INCREF(__pyx_t_15);

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1241
 *                 bid_order_id = self.c_buy_with_specific_market(
 *                     self._market_info,
 *                     buy.size,             # <<<<<<<<<<<<<<
 *                     order_type=self._limit_order_type,
 *                     price=buy.price,
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy, __pyx_n_s_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1241, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1242
 *                     self._market_info,
 *                     buy.size,
 *                     order_type=self._limit_order_type,             # <<<<<<<<<<<<<<
 *                     price=buy.price,
 *                     expiration_seconds=expiration_seconds
 */
      __pyx_t_4 = __pyx_cur_scope->__pyx_v_self->_limit_order_type;
      __Pyx_INCREF(__pyx_t_4);

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1243
 *                     buy.size,
 *                     order_type=self._limit_order_type,
 *                     price=buy.price,             # <<<<<<<<<<<<<<
 *                     expiration_seconds=expiration_seconds
 *                 )
 */
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_buy, __pyx_n_s_price); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1243, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1239
 *                 )
 *             for idx, buy in enumerate(proposal.buys):
 *                 bid_order_id = self.c_buy_with_specific_market(             # <<<<<<<<<<<<<<
 *                     self._market_info,
 *                     buy.size,
 */
      __pyx_t_20.__pyx_n = 3;
      __pyx_t_20.order_type = __pyx_t_4;
      __pyx_t_20.price = __pyx_t_17;
      __pyx_t_20.expiration_seconds = __pyx_v_expiration_seconds;
      __pyx_t_19 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_buy_with_specific_market(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_cur_scope->__pyx_v_self), __pyx_t_15, __pyx_t_3, &__pyx_t_20); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1239, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_bid_order_id);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_bid_order_id, ((PyObject*)__pyx_t_19));
      __Pyx_GIVEREF(__pyx_t_19);
      __pyx_t_19 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1246
 *                     expiration_seconds=expiration_seconds
 *                 )
 *                 orders_created = True             # <<<<<<<<<<<<<<
 *                 if idx < number_of_pairs:
 *                     order = next((o for o in self.active_orders if o.client_order_id == bid_order_id))
 */
      __pyx_v_orders_created = 1;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1247
 *                 )
 *                 orders_created = True
 *                 if idx < number_of_pairs:             # <<<<<<<<<<<<<<
 *                     order = next((o for o in self.active_orders if o.client_order_id == bid_order_id))
 *                     if order:
 */
      __pyx_t_19 = PyInt_FromSsize_t(__pyx_v_number_of_pairs); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1247, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_19);
      __pyx_t_17 = PyObject_RichCompare(__pyx_v_idx, __pyx_t_19, Py_LT); __Pyx_XGOTREF(__pyx_t_17); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1247, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_17); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1247, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      if (__pyx_t_2) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1248
 *                 orders_created = True
 *                 if idx < number_of_pairs:
 *                     order = next((o for o in self.active_orders if o.client_order_id == bid_order_id))             # <<<<<<<<<<<<<<
 *                     if order:
 *                         self._hanging_orders_tracker.add_current_pairs_of_proposal_orders_executed_by_strategy(
 */
        __pyx_t_17 = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25c_execute_orders_proposal_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_19 = __Pyx_PyIter_Next(__pyx_t_17); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1248, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        __Pyx_XDECREF_SET(__pyx_v_order, __pyx_t_19);
        __pyx_t_19 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1249
 *                 if idx < number_of_pairs:
 *                     order = next((o for o in self.active_orders if o.client_order_id == bid_order_id))
 *                     if order:             # <<<<<<<<<<<<<<
 *                         self._hanging_orders_tracker.add_current_pairs_of_proposal_orders_executed_by_strategy(
 *                             CreatedPairOfOrders(order, None))
 */
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_order); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1249, __pyx_L1_error)
        if (__pyx_t_2) {

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1250
 *                     order = next((o for o in self.active_orders if o.client_order_id == bid_order_id))
 *                     if order:
 *                         self._hanging_orders_tracker.add_current_pairs_of_proposal_orders_executed_by_strategy(             # <<<<<<<<<<<<<<
 *                             CreatedPairOfOrders(order, None))
 *         if len(proposal.sells) > 0:
 */
          __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_hanging_orders_tracker, __pyx_n_s_add_current_pairs_of_proposal_or); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1250, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1251
 *                     if order:
 *                         self._hanging_orders_tracker.add_current_pairs_of_proposal_orders_executed_by_strategy(
 *                             CreatedPairOfOrders(order, None))             # <<<<<<<<<<<<<<
 *         if len(proposal.sells) > 0:
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 */
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_CreatedPairOfOrders); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1251, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_15 = NULL;
          __pyx_t_18 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_15)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_15);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_18 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[3] = {__pyx_t_15, __pyx_v_order, Py_None};
            __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_18, 2+__pyx_t_18);
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1251, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __pyx_t_3 = NULL;
          __pyx_t_18 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_17);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_17, function);
              __pyx_t_18 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_4};
            __pyx_t_19 = __Pyx_PyObject_FastCall(__pyx_t_17, __pyx_callargs+1-__pyx_t_18, 1+__pyx_t_18);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1250, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_19);
            __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          }
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1249
 *                 if idx < number_of_pairs:
 *                     order = next((o for o in self.active_orders if o.client_order_id == bid_order_id))
 *                     if order:             # <<<<<<<<<<<<<<
 *                         self._hanging_orders_tracker.add_current_pairs_of_proposal_orders_executed_by_strategy(
 *                             CreatedPairOfOrders(order, None))
 */
        }

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1247
 *                 )
 *                 orders_created = True
 *                 if idx < number_of_pairs:             # <<<<<<<<<<<<<<
 *                     order = next((o for o in self.active_orders if o.client_order_id == bid_order_id))
 *                     if order:
 */
      }

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1238
 *                     f"at (Size, Price): {price_quote_str}"
 *                 )
 *             for idx, buy in enumerate(proposal.buys):             # <<<<<<<<<<<<<<
 *                 bid_order_id = self.c_buy_with_specific_market(
 *                     self._market_info,
 */
    }
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1229
 *         number_of_pairs = min((len(proposal.buys), len(proposal.sells))) if self._hanging_orders_enabled else 0
 * 
 *         if len(proposal.buys) > 0:             # <<<<<<<<<<<<<<
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                 price_quote_str = [f"{buy.size.normalize()} {self.base_asset}, "
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1252
 *                         self._hanging_orders_tracker.add_current_pairs_of_proposal_orders_executed_by_strategy(
 *                             CreatedPairOfOrders(order, None))
 *         if len(proposal.sells) > 0:             # <<<<<<<<<<<<<<
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                 price_quote_str = [f"{sell.size.normalize()} {self.base_asset}, "
 */
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_sells); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1252, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_8 = PyObject_Length(__pyx_t_12); if (unlikely(__pyx_t_8 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1252, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  __pyx_t_2 = ((__pyx_t_8 > 0) != 0);
  if (__pyx_t_2) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1253
 *                             CreatedPairOfOrders(order, None))
 *         if len(proposal.sells) > 0:
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:             # <<<<<<<<<<<<<<
 *                 price_quote_str = [f"{sell.size.normalize()} {self.base_asset}, "
 *                                    f"{sell.price.normalize()} {self.quote_asset}"
 */
    __pyx_t_12 = __Pyx_PyInt_From_int64_t(__pyx_cur_scope->__pyx_v_self->_logging_options); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_OPTION_LOG_CREATE_ORDER); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __pyx_t_19 = PyNumber_And(__pyx_t_12, __pyx_t_16); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_19); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1253, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
    if (__pyx_t_2) {

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1254
 *         if len(proposal.sells) > 0:
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                 price_quote_str = [f"{sell.size.normalize()} {self.base_asset}, "             # <<<<<<<<<<<<<<
 *                                    f"{sell.price.normalize()} {self.quote_asset}"
 *                                    for sell in proposal.sells]
 */
      { /* enter inner scope */
        __pyx_t_19 = PyList_New(0); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1254, __pyx_L22_error)
        __Pyx_GOTREF(__pyx_t_19);

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1256
 *                 price_quote_str = [f"{sell.size.normalize()} {self.base_asset}, "
 *                                    f"{sell.price.normalize()} {self.quote_asset}"
 *                                    for sell in proposal.sells]             # <<<<<<<<<<<<<<
 *                 self.logger().info(
 *                     f"({self.trading_pair}) Creating {len(proposal.sells)} ask "
 */
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_sells); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1256, __pyx_L22_error)
        __Pyx_GOTREF(__pyx_t_16);
        if (likely(PyList_CheckExact(__pyx_t_16)) || PyTuple_CheckExact(__pyx_t_16)) {
          __pyx_t_12 = __pyx_t_16; __Pyx_INCREF(__pyx_t_12); __pyx_t_8 = 0;
          __pyx_t_13 = NULL;
        } else {
          __pyx_t_8 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_t_16); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1256, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_13 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1256, __pyx_L22_error)
        }
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        for (;;) {
          if (likely(!__pyx_t_13)) {
            if (likely(PyList_CheckExact(__pyx_t_12))) {
              if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_12)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_16 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_8); __Pyx_INCREF(__pyx_t_16); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1256, __pyx_L22_error)
              #else
              __pyx_t_16 = PySequence_ITEM(__pyx_t_12, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1256, __pyx_L22_error)
              __Pyx_GOTREF(__pyx_t_16);
              #endif
            } else {
              if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_12)) break;
              #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
              __pyx_t_16 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_8); __Pyx_INCREF(__pyx_t_16); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1256, __pyx_L22_error)
              #else
              __pyx_t_16 = PySequence_ITEM(__pyx_t_12, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1256, __pyx_L22_error)
              __Pyx_GOTREF(__pyx_t_16);
              #endif
            }
          } else {
            __pyx_t_16 = __pyx_t_13(__pyx_t_12);
            if (unlikely(!__pyx_t_16)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 1256, __pyx_L22_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_16);
          }
          __Pyx_XDECREF_SET(__pyx_9genexpr23__pyx_v_sell, __pyx_t_16);
          __pyx_t_16 = 0;

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1254
 *         if len(proposal.sells) > 0:
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                 price_quote_str = [f"{sell.size.normalize()} {self.base_asset}, "             # <<<<<<<<<<<<<<
 *                                    f"{sell.price.normalize()} {self.quote_asset}"
 *                                    for sell in proposal.sells]
 */
          __pyx_t_16 = PyTuple_New(7); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1254, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_11 = 0;
          __pyx_t_14 = 127;
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr23__pyx_v_sell, __pyx_n_s_size); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1254, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_normalize); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1254, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_4 = NULL;
          __pyx_t_18 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_4)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_4);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_18 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_4, };
            __pyx_t_17 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_18, 0+__pyx_t_18);
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
            if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1254, __pyx_L22_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_17, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1254, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_14;
          __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_3);
          PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_3);
          __pyx_t_3 = 0;
          __Pyx_INCREF(__pyx_kp_u__25);
          __pyx_t_11 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__25);
          PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_kp_u__25);
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_base_asset); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1254, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_17 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1254, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) : __pyx_t_14;
          __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_17);
          __Pyx_GIVEREF(__pyx_t_17);
          PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_t_17);
          __pyx_t_17 = 0;
          __Pyx_INCREF(__pyx_kp_u__28);
          __pyx_t_11 += 2;
          __Pyx_GIVEREF(__pyx_kp_u__28);
          PyTuple_SET_ITEM(__pyx_t_16, 3, __pyx_kp_u__28);

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1255
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                 price_quote_str = [f"{sell.size.normalize()} {self.base_asset}, "
 *                                    f"{sell.price.normalize()} {self.quote_asset}"             # <<<<<<<<<<<<<<
 *                                    for sell in proposal.sells]
 *                 self.logger().info(
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_9genexpr23__pyx_v_sell, __pyx_n_s_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1255, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_normalize); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1255, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = NULL;
          __pyx_t_18 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_4, function);
              __pyx_t_18 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_3, };
            __pyx_t_17 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_18, 0+__pyx_t_18);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1255, __pyx_L22_error)
            __Pyx_GOTREF(__pyx_t_17);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          }
          __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_17, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1255, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
          __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
          __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_16, 4, __pyx_t_4);
          __pyx_t_4 = 0;
          __Pyx_INCREF(__pyx_kp_u__25);
          __pyx_t_11 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__25);
          PyTuple_SET_ITEM(__pyx_t_16, 5, __pyx_kp_u__25);
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1255, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_17 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1255, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) : __pyx_t_14;
          __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_17);
          __Pyx_GIVEREF(__pyx_t_17);
          PyTuple_SET_ITEM(__pyx_t_16, 6, __pyx_t_17);
          __pyx_t_17 = 0;

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1254
 *         if len(proposal.sells) > 0:
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                 price_quote_str = [f"{sell.size.normalize()} {self.base_asset}, "             # <<<<<<<<<<<<<<
 *                                    f"{sell.price.normalize()} {self.quote_asset}"
 *                                    for sell in proposal.sells]
 */
          __pyx_t_17 = __Pyx_PyUnicode_Join(__pyx_t_16, 7, __pyx_t_11, __pyx_t_14); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1254, __pyx_L22_error)
          __Pyx_GOTREF(__pyx_t_17);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_19, (PyObject*)__pyx_t_17))) __PYX_ERR(0, 1254, __pyx_L22_error)
          __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1256
 *                 price_quote_str = [f"{sell.size.normalize()} {self.base_asset}, "
 *                                    f"{sell.price.normalize()} {self.quote_asset}"
 *                                    for sell in proposal.sells]             # <<<<<<<<<<<<<<
 *                 self.logger().info(
 *                     f"({self.trading_pair}) Creating {len(proposal.sells)} ask "
 */
        }
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_9genexpr23__pyx_v_sell); __pyx_9genexpr23__pyx_v_sell = 0;
        goto __pyx_L25_exit_scope;
        __pyx_L22_error:;
        __Pyx_XDECREF(__pyx_9genexpr23__pyx_v_sell); __pyx_9genexpr23__pyx_v_sell = 0;
        goto __pyx_L1_error;
        __pyx_L25_exit_scope:;
      } /* exit inner scope */
      __Pyx_XDECREF_SET(__pyx_v_price_quote_str, ((PyObject*)__pyx_t_19));
      __pyx_t_19 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1257
 *                                    f"{sell.price.normalize()} {self.quote_asset}"
 *                                    for sell in proposal.sells]
 *                 self.logger().info(             # <<<<<<<<<<<<<<
 *                     f"({self.trading_pair}) Creating {len(proposal.sells)} ask "
 *                     f"orders at (Size, Price): {price_quote_str}"
 */
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_16 = NULL;
      __pyx_t_18 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
        __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_17);
        if (likely(__pyx_t_16)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
          __Pyx_INCREF(__pyx_t_16);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_17, function);
          __pyx_t_18 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_16, };
        __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_17, __pyx_callargs+1-__pyx_t_18, 0+__pyx_t_18);
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1257, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      }
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_n_s_info); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1258
 *                                    for sell in proposal.sells]
 *                 self.logger().info(
 *                     f"({self.trading_pair}) Creating {len(proposal.sells)} ask "             # <<<<<<<<<<<<<<
 *                     f"orders at (Size, Price): {price_quote_str}"
 *                 )
 */
      __pyx_t_12 = PyTuple_New(6); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1258, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_8 = 0;
      __pyx_t_14 = 127;
      __Pyx_INCREF(__pyx_kp_u__24);
      __pyx_t_8 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__24);
      PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_kp_u__24);
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1258, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_16, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1258, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
      __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_12, 1, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_Creating);
      __pyx_t_8 += 11;
      __Pyx_GIVEREF(__pyx_kp_u_Creating);
      PyTuple_SET_ITEM(__pyx_t_12, 2, __pyx_kp_u_Creating);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_sells); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1258, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_11 = PyObject_Length(__pyx_t_4); if (unlikely(__pyx_t_11 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1258, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyUnicode_From_Py_ssize_t(__pyx_t_11, 0, ' ', 'd'); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1258, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_12, 3, __pyx_t_4);
      __pyx_t_4 = 0;
      __Pyx_INCREF(__pyx_kp_u_ask_orders_at_Size_Price);
      __pyx_t_8 += 30;
      __Pyx_GIVEREF(__pyx_kp_u_ask_orders_at_Size_Price);
      PyTuple_SET_ITEM(__pyx_t_12, 4, __pyx_kp_u_ask_orders_at_Size_Price);

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1259
 *                 self.logger().info(
 *                     f"({self.trading_pair}) Creating {len(proposal.sells)} ask "
 *                     f"orders at (Size, Price): {price_quote_str}"             # <<<<<<<<<<<<<<
 *                 )
 *             for idx, sell in enumerate(proposal.sells):
 */
      __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_v_price_quote_str, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1259, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_14 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) > __pyx_t_14) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_4) : __pyx_t_14;
      __pyx_t_8 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_12, 5, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1258
 *                                    for sell in proposal.sells]
 *                 self.logger().info(
 *                     f"({self.trading_pair}) Creating {len(proposal.sells)} ask "             # <<<<<<<<<<<<<<
 *                     f"orders at (Size, Price): {price_quote_str}"
 *                 )
 */
      __pyx_t_4 = __Pyx_PyUnicode_Join(__pyx_t_12, 6, __pyx_t_8, __pyx_t_14); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1258, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_t_12 = NULL;
      __pyx_t_18 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_17))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_17);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_17, function);
          __pyx_t_18 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_4};
        __pyx_t_19 = __Pyx_PyObject_FastCall(__pyx_t_17, __pyx_callargs+1-__pyx_t_18, 1+__pyx_t_18);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1257, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      }
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1253
 *                             CreatedPairOfOrders(order, None))
 *         if len(proposal.sells) > 0:
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:             # <<<<<<<<<<<<<<
 *                 price_quote_str = [f"{sell.size.normalize()} {self.base_asset}, "
 *                                    f"{sell.price.normalize()} {self.quote_asset}"
 */
    }

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1261
 *                     f"orders at (Size, Price): {price_quote_str}"
 *                 )
 *             for idx, sell in enumerate(proposal.sells):             # <<<<<<<<<<<<<<
 *                 ask_order_id = self.c_sell_with_specific_market(
 *                     self._market_info,
 */
    __Pyx_INCREF(__pyx_int_0);
    __pyx_t_19 = __pyx_int_0;
    __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_proposal, __pyx_n_s_sells); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1261, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    if (likely(PyList_CheckExact(__pyx_t_17)) || PyTuple_CheckExact(__pyx_t_17)) {
      __pyx_t_4 = __pyx_t_17; __Pyx_INCREF(__pyx_t_4); __pyx_t_8 = 0;
      __pyx_t_13 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_17); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1261, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_13 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1261, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    for (;;) {
      if (likely(!__pyx_t_13)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_17 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_17); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1261, __pyx_L1_error)
          #else
          __pyx_t_17 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1261, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          #endif
        } else {
          if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_17 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_8); __Pyx_INCREF(__pyx_t_17); __pyx_t_8++; if (unlikely((0 < 0))) __PYX_ERR(0, 1261, __pyx_L1_error)
          #else
          __pyx_t_17 = PySequence_ITEM(__pyx_t_4, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1261, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_17);
          #endif
        }
      } else {
        __pyx_t_17 = __pyx_t_13(__pyx_t_4);
        if (unlikely(!__pyx_t_17)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 1261, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_17);
      }
      __Pyx_XDECREF_SET(__pyx_v_sell, __pyx_t_17);
      __pyx_t_17 = 0;
      __Pyx_INCREF(__pyx_t_19);
      __Pyx_XDECREF_SET(__pyx_v_idx, __pyx_t_19);
      __pyx_t_17 = __Pyx_PyInt_AddObjC(__pyx_t_19, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 1261, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_19);
      __pyx_t_19 = __pyx_t_17;
      __pyx_t_17 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1263
 *             for idx, sell in enumerate(proposal.sells):
 *                 ask_order_id = self.c_sell_with_specific_market(
 *                     self._market_info,             # <<<<<<<<<<<<<<
 *                     sell.size,
 *                     order_type=self._limit_order_type,
 */
      __pyx_t_17 = __pyx_cur_scope->__pyx_v_self->_market_info;
      __Pyx_INCREF(__pyx_t_17);

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1264
 *                 ask_order_id = self.c_sell_with_specific_market(
 *                     self._market_info,
 *                     sell.size,             # <<<<<<<<<<<<<<
 *                     order_type=self._limit_order_type,
 *                     price=sell.price,
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell, __pyx_n_s_size); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1264, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1265
 *                     self._market_info,
 *                     sell.size,
 *                     order_type=self._limit_order_type,             # <<<<<<<<<<<<<<
 *                     price=sell.price,
 *                     expiration_seconds=expiration_seconds
 */
      __pyx_t_16 = __pyx_cur_scope->__pyx_v_self->_limit_order_type;
      __Pyx_INCREF(__pyx_t_16);

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1266
 *                     sell.size,
 *                     order_type=self._limit_order_type,
 *                     price=sell.price,             # <<<<<<<<<<<<<<
 *                     expiration_seconds=expiration_seconds
 *                 )
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_sell, __pyx_n_s_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1266, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1262
 *                 )
 *             for idx, sell in enumerate(proposal.sells):
 *                 ask_order_id = self.c_sell_with_specific_market(             # <<<<<<<<<<<<<<
 *                     self._market_info,
 *                     sell.size,
 */
      __pyx_t_21.__pyx_n = 3;
      __pyx_t_21.order_type = __pyx_t_16;
      __pyx_t_21.price = __pyx_t_3;
      __pyx_t_21.expiration_seconds = __pyx_v_expiration_seconds;
      __pyx_t_15 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_sell_with_specific_market(((struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *)__pyx_cur_scope->__pyx_v_self), __pyx_t_17, __pyx_t_12, &__pyx_t_21); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1262, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_ask_order_id);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_ask_order_id, ((PyObject*)__pyx_t_15));
      __Pyx_GIVEREF(__pyx_t_15);
      __pyx_t_15 = 0;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1269
 *                     expiration_seconds=expiration_seconds
 *                 )
 *                 orders_created = True             # <<<<<<<<<<<<<<
 *                 if idx < number_of_pairs:
 *                     order = next((o for o in self.active_orders if o.client_order_id == ask_order_id))
 */
      __pyx_v_orders_created = 1;

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1270
 *                 )
 *                 orders_created = True
 *                 if idx < number_of_pairs:             # <<<<<<<<<<<<<<
 *                     order = next((o for o in self.active_orders if o.client_order_id == ask_order_id))
 *                     if order:
 */
      __pyx_t_15 = PyInt_FromSsize_t(__pyx_v_number_of_pairs); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1270, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_idx, __pyx_t_15, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1270, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1270, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_2) {

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1271
 *                 orders_created = True
 *                 if idx < number_of_pairs:
 *                     order = next((o for o in self.active_orders if o.client_order_id == ask_order_id))             # <<<<<<<<<<<<<<
 *                     if order:
 *                         self._hanging_orders_tracker.current_created_pairs_of_orders[idx].sell_order = order
 */
        __pyx_t_3 = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25c_execute_orders_proposal_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1271, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_15 = __Pyx_PyIter_Next(__pyx_t_3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1271, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v_order, __pyx_t_15);
        __pyx_t_15 = 0;

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1272
 *                 if idx < number_of_pairs:
 *                     order = next((o for o in self.active_orders if o.client_order_id == ask_order_id))
 *                     if order:             # <<<<<<<<<<<<<<
 *                         self._hanging_orders_tracker.current_created_pairs_of_orders[idx].sell_order = order
 *         if orders_created:
 */
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_order); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1272, __pyx_L1_error)
        if (__pyx_t_2) {

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1273
 *                     order = next((o for o in self.active_orders if o.client_order_id == ask_order_id))
 *                     if order:
 *                         self._hanging_orders_tracker.current_created_pairs_of_orders[idx].sell_order = order             # <<<<<<<<<<<<<<
 *         if orders_created:
 *             self.c_set_timers()
 */
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_hanging_orders_tracker, __pyx_n_s_current_created_pairs_of_orders); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1273, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_3 = __Pyx_PyObject_GetItem(__pyx_t_15, __pyx_v_idx); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1273, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (__Pyx_PyObject_SetAttrStr(__pyx_t_3, __pyx_n_s_sell_order, __pyx_v_order) < 0) __PYX_ERR(0, 1273, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

          /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1272
 *                 if idx < number_of_pairs:
 *                     order = next((o for o in self.active_orders if o.client_order_id == ask_order_id))
 *                     if order:             # <<<<<<<<<<<<<<
 *                         self._hanging_orders_tracker.current_created_pairs_of_orders[idx].sell_order = order
 *         if orders_created:
 */
        }

        /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1270
 *                 )
 *                 orders_created = True
 *                 if idx < number_of_pairs:             # <<<<<<<<<<<<<<
 *                     order = next((o for o in self.active_orders if o.client_order_id == ask_order_id))
 *                     if order:
 */
      }

      /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1261
 *                     f"orders at (Size, Price): {price_quote_str}"
 *                 )
 *             for idx, sell in enumerate(proposal.sells):             # <<<<<<<<<<<<<<
 *                 ask_order_id = self.c_sell_with_specific_market(
 *                     self._market_info,
 */
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1252
 *                         self._hanging_orders_tracker.add_current_pairs_of_proposal_orders_executed_by_strategy(
 *                             CreatedPairOfOrders(order, None))
 *         if len(proposal.sells) > 0:             # <<<<<<<<<<<<<<
 *             if self._logging_options & self.OPTION_LOG_CREATE_ORDER:
 *                 price_quote_str = [f"{sell.size.normalize()} {self.base_asset}, "
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1274
 *                     if order:
 *                         self._hanging_orders_tracker.current_created_pairs_of_orders[idx].sell_order = order
 *         if orders_created:             # <<<<<<<<<<<<<<
 *             self.c_set_timers()
 * 
 */
  __pyx_t_2 = (__pyx_v_orders_created != 0);
  if (__pyx_t_2) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1275
 *                         self._hanging_orders_tracker.current_created_pairs_of_orders[idx].sell_order = order
 *         if orders_created:
 *             self.c_set_timers()             # <<<<<<<<<<<<<<
 * 
 *     def execute_orders_proposal(self, proposal: Proposal):
 */
    __pyx_t_19 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_set_timers(__pyx_cur_scope->__pyx_v_self); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 1275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_19);
    __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1274
 *                     if order:
 *                         self._hanging_orders_tracker.current_created_pairs_of_orders[idx].sell_order = order
 *         if orders_created:             # <<<<<<<<<<<<<<
 *             self.c_set_timers()
 * 
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1217
 *         return self.c_to_create_orders(proposal)
 * 
 *     cdef c_execute_orders_proposal(self, object proposal):             # <<<<<<<<<<<<<<
 *         cdef:
 *             double expiration_seconds = (self._order_refresh_time
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.c_execute_orders_proposal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_price_quote_str);
  __Pyx_XDECREF(__pyx_v_idx);
  __Pyx_XDECREF(__pyx_v_buy);
  __Pyx_XDECREF(__pyx_v_order);
  __Pyx_XDECREF(__pyx_v_sell);
  __Pyx_XDECREF(__pyx_9genexpr21__pyx_v_buy);
  __Pyx_XDECREF(__pyx_gb_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25c_execute_orders_proposal_2generator1);
  __Pyx_XDECREF(__pyx_9genexpr23__pyx_v_sell);
  __Pyx_XDECREF(__pyx_gb_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25c_execute_orders_proposal_5generator2);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1277
 *             self.c_set_timers()
 * 
 *     def execute_orders_proposal(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         self.c_execute_orders_proposal(proposal)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_77execute_orders_proposal(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_77execute_orders_proposal = {"execute_orders_proposal", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_77execute_orders_proposal, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_77execute_orders_proposal(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_proposal = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_orders_proposal (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_proposal,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_proposal)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1277, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "execute_orders_proposal") < 0)) __PYX_ERR(0, 1277, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_proposal = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("execute_orders_proposal", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1277, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.execute_orders_proposal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_76execute_orders_proposal(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_proposal);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_76execute_orders_proposal(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_proposal) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("execute_orders_proposal", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1278
 * 
 *     def execute_orders_proposal(self, proposal: Proposal):
 *         self.c_execute_orders_proposal(proposal)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_set_timers(self):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_execute_orders_proposal(__pyx_v_self, __pyx_v_proposal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1278, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1277
 *             self.c_set_timers()
 * 
 *     def execute_orders_proposal(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         self.c_execute_orders_proposal(proposal)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.execute_orders_proposal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1280
 *         self.c_execute_orders_proposal(proposal)
 * 
 *     cdef c_set_timers(self):             # <<<<<<<<<<<<<<
 *         cdef double next_cycle = self._current_timestamp + self._order_refresh_time
 *         if self._create_timestamp <= self._current_timestamp:
 */

static PyObject *__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_set_timers(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  double __pyx_v_next_cycle;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  double __pyx_t_2;
  double __pyx_t_3;
  double __pyx_t_4;
  __Pyx_RefNannySetupContext("c_set_timers", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1281
 * 
 *     cdef c_set_timers(self):
 *         cdef double next_cycle = self._current_timestamp + self._order_refresh_time             # <<<<<<<<<<<<<<
 *         if self._create_timestamp <= self._current_timestamp:
 *             self._create_timestamp = next_cycle
 */
  __pyx_v_next_cycle = (__pyx_v_self->__pyx_base.__pyx_base._current_timestamp + __pyx_v_self->_order_refresh_time);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1282
 *     cdef c_set_timers(self):
 *         cdef double next_cycle = self._current_timestamp + self._order_refresh_time
 *         if self._create_timestamp <= self._current_timestamp:             # <<<<<<<<<<<<<<
 *             self._create_timestamp = next_cycle
 *         if self._cancel_timestamp <= self._current_timestamp:
 */
  __pyx_t_1 = ((__pyx_v_self->_create_timestamp <= __pyx_v_self->__pyx_base.__pyx_base._current_timestamp) != 0);
  if (__pyx_t_1) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1283
 *         cdef double next_cycle = self._current_timestamp + self._order_refresh_time
 *         if self._create_timestamp <= self._current_timestamp:
 *             self._create_timestamp = next_cycle             # <<<<<<<<<<<<<<
 *         if self._cancel_timestamp <= self._current_timestamp:
 *             self._cancel_timestamp = min(self._create_timestamp, next_cycle)
 */
    __pyx_v_self->_create_timestamp = __pyx_v_next_cycle;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1282
 *     cdef c_set_timers(self):
 *         cdef double next_cycle = self._current_timestamp + self._order_refresh_time
 *         if self._create_timestamp <= self._current_timestamp:             # <<<<<<<<<<<<<<
 *             self._create_timestamp = next_cycle
 *         if self._cancel_timestamp <= self._current_timestamp:
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1284
 *         if self._create_timestamp <= self._current_timestamp:
 *             self._create_timestamp = next_cycle
 *         if self._cancel_timestamp <= self._current_timestamp:             # <<<<<<<<<<<<<<
 *             self._cancel_timestamp = min(self._create_timestamp, next_cycle)
 * 
 */
  __pyx_t_1 = ((__pyx_v_self->_cancel_timestamp <= __pyx_v_self->__pyx_base.__pyx_base._current_timestamp) != 0);
  if (__pyx_t_1) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1285
 *             self._create_timestamp = next_cycle
 *         if self._cancel_timestamp <= self._current_timestamp:
 *             self._cancel_timestamp = min(self._create_timestamp, next_cycle)             # <<<<<<<<<<<<<<
 * 
 *     def set_timers(self):
 */
    __pyx_t_2 = __pyx_v_next_cycle;
    __pyx_t_3 = __pyx_v_self->_create_timestamp;
    if (((__pyx_t_2 < __pyx_t_3) != 0)) {
      __pyx_t_4 = __pyx_t_2;
    } else {
      __pyx_t_4 = __pyx_t_3;
    }
    __pyx_v_self->_cancel_timestamp = __pyx_t_4;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1284
 *         if self._create_timestamp <= self._current_timestamp:
 *             self._create_timestamp = next_cycle
 *         if self._cancel_timestamp <= self._current_timestamp:             # <<<<<<<<<<<<<<
 *             self._cancel_timestamp = min(self._create_timestamp, next_cycle)
 * 
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1280
 *         self.c_execute_orders_proposal(proposal)
 * 
 *     cdef c_set_timers(self):             # <<<<<<<<<<<<<<
 *         cdef double next_cycle = self._current_timestamp + self._order_refresh_time
 *         if self._create_timestamp <= self._current_timestamp:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1287
 *             self._cancel_timestamp = min(self._create_timestamp, next_cycle)
 * 
 *     def set_timers(self):             # <<<<<<<<<<<<<<
 *         self.c_set_timers()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_79set_timers(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_79set_timers = {"set_timers", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_79set_timers, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_79set_timers(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_timers (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("set_timers", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "set_timers", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_78set_timers(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_78set_timers(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_timers", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1288
 * 
 *     def set_timers(self):
 *         self.c_set_timers()             # <<<<<<<<<<<<<<
 * 
 *     def notify_hb_app(self, msg: str):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_set_timers(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1287
 *             self._cancel_timestamp = min(self._create_timestamp, next_cycle)
 * 
 *     def set_timers(self):             # <<<<<<<<<<<<<<
 *         self.c_set_timers()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.set_timers", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1290
 *         self.c_set_timers()
 * 
 *     def notify_hb_app(self, msg: str):             # <<<<<<<<<<<<<<
 *         if self._hb_app_notification:
 *             super().notify_hb_app(msg)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_81notify_hb_app(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_81notify_hb_app = {"notify_hb_app", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_81notify_hb_app, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_81notify_hb_app(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_msg = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("notify_hb_app (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_msg,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_msg,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_msg)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1290, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "notify_hb_app") < 0)) __PYX_ERR(0, 1290, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_msg = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("notify_hb_app", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1290, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.notify_hb_app", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_msg), (&PyUnicode_Type), 1, "msg", 1))) __PYX_ERR(0, 1290, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_80notify_hb_app(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v_msg);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_80notify_hb_app(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, PyObject *__pyx_v_msg) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("notify_hb_app", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1291
 * 
 *     def notify_hb_app(self, msg: str):
 *         if self._hb_app_notification:             # <<<<<<<<<<<<<<
 *             super().notify_hb_app(msg)
 * 
 */
  __pyx_t_1 = (__pyx_v_self->_hb_app_notification != 0);
  if (__pyx_t_1) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1292
 *     def notify_hb_app(self, msg: str):
 *         if self._hb_app_notification:
 *             super().notify_hb_app(msg)             # <<<<<<<<<<<<<<
 * 
 *     def dump_debug_variables(self):
 */
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);
    __Pyx_GIVEREF((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy));
    __Pyx_INCREF((PyObject *)__pyx_v_self);
    __Pyx_GIVEREF((PyObject *)__pyx_v_self);
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_self));
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_notify_hb_app); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1292, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_msg};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1292, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1291
 * 
 *     def notify_hb_app(self, msg: str):
 *         if self._hb_app_notification:             # <<<<<<<<<<<<<<
 *             super().notify_hb_app(msg)
 * 
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1290
 *         self.c_set_timers()
 * 
 *     def notify_hb_app(self, msg: str):             # <<<<<<<<<<<<<<
 *         if self._hb_app_notification:
 *             super().notify_hb_app(msg)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.notify_hb_app", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1294
 *             super().notify_hb_app(msg)
 * 
 *     def dump_debug_variables(self):             # <<<<<<<<<<<<<<
 *         market = self._market_info.market
 *         mid_price = self.get_price()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_83dump_debug_variables(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_83dump_debug_variables = {"dump_debug_variables", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_83dump_debug_variables, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_83dump_debug_variables(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dump_debug_variables (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("dump_debug_variables", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "dump_debug_variables", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_82dump_debug_variables(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_82dump_debug_variables(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_v_market = NULL;
  PyObject *__pyx_v_mid_price = NULL;
  PyObject *__pyx_v_spread = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_best_ask = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_new_ask = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_best_bid = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_new_bid = NULL;
  PyObject *__pyx_v_df_header = NULL;
  PyObject *__pyx_v_df = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dump_debug_variables", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1295
 * 
 *     def dump_debug_variables(self):
 *         market = self._market_info.market             # <<<<<<<<<<<<<<
 *         mid_price = self.get_price()
 *         spread = Decimal(str(self.c_get_spread()))
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_market_info, __pyx_n_s_market); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_market = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1296
 *     def dump_debug_variables(self):
 *         market = self._market_info.market
 *         mid_price = self.get_price()             # <<<<<<<<<<<<<<
 *         spread = Decimal(str(self.c_get_spread()))
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1296, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_mid_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1297
 *         market = self._market_info.market
 *         mid_price = self.get_price()
 *         spread = Decimal(str(self.c_get_spread()))             # <<<<<<<<<<<<<<
 * 
 *         best_ask = mid_price + spread / 2
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble(((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_get_spread(__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_Str(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_spread = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1299
 *         spread = Decimal(str(self.c_get_spread()))
 * 
 *         best_ask = mid_price + spread / 2             # <<<<<<<<<<<<<<
 *         new_ask = self._reserved_price + self._optimal_spread / 2
 *         best_bid = mid_price - spread / 2
 */
  __pyx_t_1 = __Pyx_PyInt_TrueDivideObjC(__pyx_v_spread, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Add(__pyx_v_mid_price, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1299, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_best_ask = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1300
 * 
 *         best_ask = mid_price + spread / 2
 *         new_ask = self._reserved_price + self._optimal_spread / 2             # <<<<<<<<<<<<<<
 *         best_bid = mid_price - spread / 2
 *         new_bid = self._reserved_price - self._optimal_spread / 2
 */
  __pyx_t_2 = __Pyx_PyInt_TrueDivideObjC(__pyx_v_self->_optimal_spread, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Add(__pyx_v_self->_reserved_price, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_new_ask = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1301
 *         best_ask = mid_price + spread / 2
 *         new_ask = self._reserved_price + self._optimal_spread / 2
 *         best_bid = mid_price - spread / 2             # <<<<<<<<<<<<<<
 *         new_bid = self._reserved_price - self._optimal_spread / 2
 *         if not os.path.exists(self._debug_csv_path):
 */
  __pyx_t_1 = __Pyx_PyInt_TrueDivideObjC(__pyx_v_spread, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyNumber_Subtract(__pyx_v_mid_price, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_best_bid = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1302
 *         new_ask = self._reserved_price + self._optimal_spread / 2
 *         best_bid = mid_price - spread / 2
 *         new_bid = self._reserved_price - self._optimal_spread / 2             # <<<<<<<<<<<<<<
 *         if not os.path.exists(self._debug_csv_path):
 *             df_header = pd.DataFrame([('mid_price',
 */
  __pyx_t_2 = __Pyx_PyInt_TrueDivideObjC(__pyx_v_self->_optimal_spread, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_self->_reserved_price, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_new_bid = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1303
 *         best_bid = mid_price - spread / 2
 *         new_bid = self._reserved_price - self._optimal_spread / 2
 *         if not os.path.exists(self._debug_csv_path):             # <<<<<<<<<<<<<<
 *             df_header = pd.DataFrame([('mid_price',
 *                                        'spread',
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_os); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_path); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_exists); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1303, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_self->_debug_csv_path};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 1303, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_7 = ((!__pyx_t_6) != 0);
  if (__pyx_t_7) {

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1304
 *         new_bid = self._reserved_price - self._optimal_spread / 2
 *         if not os.path.exists(self._debug_csv_path):
 *             df_header = pd.DataFrame([('mid_price',             # <<<<<<<<<<<<<<
 *                                        'spread',
 *                                        'reserved_price',
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_tuple__29);
    __Pyx_GIVEREF(__pyx_tuple__29);
    PyList_SET_ITEM(__pyx_t_2, 0, __pyx_tuple__29);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1304, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_v_df_header = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1324
 *                                        'max_spread',
 *                                        'vol_to_spread_multiplier')])
 *             df_header.to_csv(self._debug_csv_path, mode='a', header=False, index=False)             # <<<<<<<<<<<<<<
 *         df = pd.DataFrame([(mid_price,
 *                             spread,
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_df_header, __pyx_n_s_to_csv); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_self->_debug_csv_path);
    __Pyx_GIVEREF(__pyx_v_self->_debug_csv_path);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_self->_debug_csv_path);
    __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_mode, __pyx_n_u_a) < 0) __PYX_ERR(0, 1324, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_header, Py_False) < 0) __PYX_ERR(0, 1324, __pyx_L1_error)
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_index, Py_False) < 0) __PYX_ERR(0, 1324, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1303
 *         best_bid = mid_price - spread / 2
 *         new_bid = self._reserved_price - self._optimal_spread / 2
 *         if not os.path.exists(self._debug_csv_path):             # <<<<<<<<<<<<<<
 *             df_header = pd.DataFrame([('mid_price',
 *                                        'spread',
 */
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1325
 *                                        'vol_to_spread_multiplier')])
 *             df_header.to_csv(self._debug_csv_path, mode='a', header=False, index=False)
 *         df = pd.DataFrame([(mid_price,             # <<<<<<<<<<<<<<
 *                             spread,
 *                             self._reserved_price,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_pd); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_DataFrame); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1331
 *                             self._optimal_bid,
 *                             self._optimal_ask,
 *                             (mid_price - (self._reserved_price - self._optimal_spread / 2)) / mid_price,             # <<<<<<<<<<<<<<
 *                             ((self._reserved_price + self._optimal_spread / 2) - mid_price) / mid_price,
 *                             market.get_balance(self.base_asset),
 */
  __pyx_t_2 = __Pyx_PyInt_TrueDivideObjC(__pyx_v_self->_optimal_spread, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyNumber_Subtract(__pyx_v_self->_reserved_price, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_v_mid_price, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_v_mid_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1332
 *                             self._optimal_ask,
 *                             (mid_price - (self._reserved_price - self._optimal_spread / 2)) / mid_price,
 *                             ((self._reserved_price + self._optimal_spread / 2) - mid_price) / mid_price,             # <<<<<<<<<<<<<<
 *                             market.get_balance(self.base_asset),
 *                             self.c_calculate_target_inventory(),
 */
  __pyx_t_2 = __Pyx_PyInt_TrueDivideObjC(__pyx_v_self->_optimal_spread, __pyx_int_2, 2, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = PyNumber_Add(__pyx_v_self->_reserved_price, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Subtract(__pyx_t_8, __pyx_v_mid_price); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_2, __pyx_v_mid_price); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1333
 *                             (mid_price - (self._reserved_price - self._optimal_spread / 2)) / mid_price,
 *                             ((self._reserved_price + self._optimal_spread / 2) - mid_price) / mid_price,
 *                             market.get_balance(self.base_asset),             # <<<<<<<<<<<<<<
 *                             self.c_calculate_target_inventory(),
 *                             self._time_left / self._closing_time,
 */
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_market, __pyx_n_s_get_balance); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_base_asset); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_10};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1334
 *                             ((self._reserved_price + self._optimal_spread / 2) - mid_price) / mid_price,
 *                             market.get_balance(self.base_asset),
 *                             self.c_calculate_target_inventory(),             # <<<<<<<<<<<<<<
 *                             self._time_left / self._closing_time,
 *                             self._avg_vol.current_value,
 */
  __pyx_t_9 = ((struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_calculate_target_inventory(__pyx_v_self); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1335
 *                             market.get_balance(self.base_asset),
 *                             self.c_calculate_target_inventory(),
 *                             self._time_left / self._closing_time,             # <<<<<<<<<<<<<<
 *                             self._avg_vol.current_value,
 *                             self._gamma,
 */
  __pyx_t_10 = __Pyx_PyNumber_Divide(__pyx_v_self->_time_left, __pyx_v_self->_closing_time); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1335, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1336
 *                             self.c_calculate_target_inventory(),
 *                             self._time_left / self._closing_time,
 *                             self._avg_vol.current_value,             # <<<<<<<<<<<<<<
 *                             self._gamma,
 *                             self._kappa,
 */
  __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_avg_vol, __pyx_n_s_current_value); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1340
 *                             self._kappa,
 *                             self._eta,
 *                             self.volatility_diff_from_last_parameter_calculation(self.get_volatility()),             # <<<<<<<<<<<<<<
 *                             self.inventory_target_base_pct,
 *                             self._min_spread,
 */
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_volatility_diff_from_last_parame); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_volatility); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_16 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_16)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_16, };
    __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  }
  __pyx_t_15 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_13);
    if (likely(__pyx_t_15)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_15);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_13, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_t_14};
    __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1340, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1341
 *                             self._eta,
 *                             self.volatility_diff_from_last_parameter_calculation(self.get_volatility()),
 *                             self.inventory_target_base_pct,             # <<<<<<<<<<<<<<
 *                             self._min_spread,
 *                             self._max_spread,
 */
  __pyx_t_13 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_inventory_target_base_pct); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1325
 *                                        'vol_to_spread_multiplier')])
 *             df_header.to_csv(self._debug_csv_path, mode='a', header=False, index=False)
 *         df = pd.DataFrame([(mid_price,             # <<<<<<<<<<<<<<
 *                             spread,
 *                             self._reserved_price,
 */
  __pyx_t_14 = PyTuple_New(20); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_INCREF(__pyx_v_mid_price);
  __Pyx_GIVEREF(__pyx_v_mid_price);
  PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_v_mid_price);
  __Pyx_INCREF(__pyx_v_spread);
  __Pyx_GIVEREF(__pyx_v_spread);
  PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_v_spread);
  __Pyx_INCREF(__pyx_v_self->_reserved_price);
  __Pyx_GIVEREF(__pyx_v_self->_reserved_price);
  PyTuple_SET_ITEM(__pyx_t_14, 2, __pyx_v_self->_reserved_price);
  __Pyx_INCREF(__pyx_v_self->_optimal_spread);
  __Pyx_GIVEREF(__pyx_v_self->_optimal_spread);
  PyTuple_SET_ITEM(__pyx_t_14, 3, __pyx_v_self->_optimal_spread);
  __Pyx_INCREF(__pyx_v_self->_optimal_bid);
  __Pyx_GIVEREF(__pyx_v_self->_optimal_bid);
  PyTuple_SET_ITEM(__pyx_t_14, 4, __pyx_v_self->_optimal_bid);
  __Pyx_INCREF(__pyx_v_self->_optimal_ask);
  __Pyx_GIVEREF(__pyx_v_self->_optimal_ask);
  PyTuple_SET_ITEM(__pyx_t_14, 5, __pyx_v_self->_optimal_ask);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_14, 6, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_14, 7, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_14, 8, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_14, 9, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_14, 10, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_14, 11, __pyx_t_11);
  __Pyx_INCREF(__pyx_v_self->_gamma);
  __Pyx_GIVEREF(__pyx_v_self->_gamma);
  PyTuple_SET_ITEM(__pyx_t_14, 12, __pyx_v_self->_gamma);
  __Pyx_INCREF(__pyx_v_self->_kappa);
  __Pyx_GIVEREF(__pyx_v_self->_kappa);
  PyTuple_SET_ITEM(__pyx_t_14, 13, __pyx_v_self->_kappa);
  __Pyx_INCREF(__pyx_v_self->_eta);
  __Pyx_GIVEREF(__pyx_v_self->_eta);
  PyTuple_SET_ITEM(__pyx_t_14, 14, __pyx_v_self->_eta);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_14, 15, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_14, 16, __pyx_t_13);
  __Pyx_INCREF(__pyx_v_self->_min_spread);
  __Pyx_GIVEREF(__pyx_v_self->_min_spread);
  PyTuple_SET_ITEM(__pyx_t_14, 17, __pyx_v_self->_min_spread);
  __Pyx_INCREF(__pyx_v_self->_max_spread);
  __Pyx_GIVEREF(__pyx_v_self->_max_spread);
  PyTuple_SET_ITEM(__pyx_t_14, 18, __pyx_v_self->_max_spread);
  __Pyx_INCREF(__pyx_v_self->_vol_to_spread_multiplier);
  __Pyx_GIVEREF(__pyx_v_self->_vol_to_spread_multiplier);
  PyTuple_SET_ITEM(__pyx_t_14, 19, __pyx_v_self->_vol_to_spread_multiplier);
  __pyx_t_1 = 0;
  __pyx_t_8 = 0;
  __pyx_t_2 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_13 = PyList_New(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1325, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_14);
  PyList_SET_ITEM(__pyx_t_13, 0, __pyx_t_14);
  __pyx_t_14 = 0;
  __pyx_t_14 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_14, __pyx_t_13};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_v_df = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1345
 *                             self._max_spread,
 *                             self._vol_to_spread_multiplier)])
 *         df.to_csv(self._debug_csv_path, mode='a', header=False, index=False)             # <<<<<<<<<<<<<<
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_df, __pyx_n_s_to_csv); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_self->_debug_csv_path);
  __Pyx_GIVEREF(__pyx_v_self->_debug_csv_path);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_self->_debug_csv_path);
  __pyx_t_13 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_mode, __pyx_n_u_a) < 0) __PYX_ERR(0, 1345, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_header, Py_False) < 0) __PYX_ERR(0, 1345, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_13, __pyx_n_s_index, Py_False) < 0) __PYX_ERR(0, 1345, __pyx_L1_error)
  __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, __pyx_t_13); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1294
 *             super().notify_hb_app(msg)
 * 
 *     def dump_debug_variables(self):             # <<<<<<<<<<<<<<
 *         market = self._market_info.market
 *         mid_price = self.get_price()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.dump_debug_variables", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_mid_price);
  __Pyx_XDECREF(__pyx_v_spread);
  __Pyx_XDECREF(__pyx_v_best_ask);
  __Pyx_XDECREF(__pyx_v_new_ask);
  __Pyx_XDECREF(__pyx_v_best_bid);
  __Pyx_XDECREF(__pyx_v_new_bid);
  __Pyx_XDECREF(__pyx_v_df_header);
  __Pyx_XDECREF(__pyx_v_df);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_85__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_85__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_85__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_85__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_84__reduce_cython__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_84__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__events_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_87__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_87__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_87__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_87__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_86__setstate_cython__(((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_86__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__events_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":246
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self) {
  PyObject *__pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":249
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 *             return PyArray_BASE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_BASE(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":246
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":252
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self) {
  PyArray_Descr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyArray_Descr *__pyx_t_1;
  __Pyx_RefNannySetupContext("descr", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":255
 *             """Returns an owned reference to the dtype of the array.
 *             """
 *             return <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = PyArray_DESCR(__pyx_v_self);
  __Pyx_INCREF((PyObject *)((PyArray_Descr *)__pyx_t_1));
  __pyx_r = ((PyArray_Descr *)__pyx_t_1);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":252
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":258
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self) {
  int __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":261
 *             """Returns the number of dimensions in the array.
 *             """
 *             return PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":258
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":264
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":269
 *             Can return NULL for 0-dimensional arrays.
 *             """
 *             return PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":264
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":272
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":276
 *             The number of elements matches the number of dimensions of the array (ndim).
 *             """
 *             return PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_STRIDES(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":272
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":279
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":282
 *             """Returns the total size (in number of elements) of the array.
 *             """
 *             return PyArray_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":279
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":285
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self) {
  char *__pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":291
 *             of `PyArray_DATA()` instead, which returns a 'void*'.
 *             """
 *             return PyArray_BYTES(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef unsigned char      npy_bool
 */
  __pyx_r = PyArray_BYTES(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":285
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":777
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":777
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":780
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":780
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":783
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":784
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":783
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":786
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":787
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":786
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":789
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":790
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":789
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":792
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":793
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":794
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":793
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":796
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":792
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":973
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":974
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":975
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":973
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":977
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":978
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":979
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":980
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":979
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":981
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":977
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":987
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 987, __pyx_L3_error)

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":988
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 988, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":989
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 989, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 989, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":993
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 993, __pyx_L3_error)

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":994
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 994, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 995, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 995, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":999
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 999, __pyx_L3_error)

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1000
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1000, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1001
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1001, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1001, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1004
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1016
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1004
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1019
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1031
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1019
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1034
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1041
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1034
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1044
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1048
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1044
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1051
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1055
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1051
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}
static struct __pyx_vtabstruct_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *p;
  #if CYTHON_COMPILING_IN_LIMITED_API
  newfunc new_func = (newfunc)PyType_GetSlot(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase, Py_tp_new);
  PyObject *o = new_func(t, a, k);
  #else
  PyObject *o = __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_new(t, a, k);
  #endif
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub*)__pyx_vtabptr_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy;
  p->_market_info = Py_None; Py_INCREF(Py_None);
  p->_minimum_spread = Py_None; Py_INCREF(Py_None);
  p->_order_amount = Py_None; Py_INCREF(Py_None);
  p->_order_refresh_tolerance_pct = Py_None; Py_INCREF(Py_None);
  p->_order_override = Py_None; Py_INCREF(Py_None);
  p->_hanging_orders_tracker = Py_None; Py_INCREF(Py_None);
  p->_inventory_target_base_pct = Py_None; Py_INCREF(Py_None);
  p->_limit_order_type = Py_None; Py_INCREF(Py_None);
  p->_last_own_trade_price = Py_None; Py_INCREF(Py_None);
  p->_min_spread = Py_None; Py_INCREF(Py_None);
  p->_max_spread = Py_None; Py_INCREF(Py_None);
  p->_vol_to_spread_multiplier = Py_None; Py_INCREF(Py_None);
  p->_volatility_sensibility = Py_None; Py_INCREF(Py_None);
  p->_inventory_risk_aversion = Py_None; Py_INCREF(Py_None);
  p->_kappa = Py_None; Py_INCREF(Py_None);
  p->_gamma = Py_None; Py_INCREF(Py_None);
  p->_eta = Py_None; Py_INCREF(Py_None);
  p->_closing_time = Py_None; Py_INCREF(Py_None);
  p->_time_left = Py_None; Py_INCREF(Py_None);
  p->_q_adjustment_factor = Py_None; Py_INCREF(Py_None);
  p->_reserved_price = Py_None; Py_INCREF(Py_None);
  p->_optimal_spread = Py_None; Py_INCREF(Py_None);
  p->_optimal_bid = Py_None; Py_INCREF(Py_None);
  p->_optimal_ask = Py_None; Py_INCREF(Py_None);
  p->_latest_parameter_calculation_vol = Py_None; Py_INCREF(Py_None);
  p->_debug_csv_path = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_avg_vol = Py_None; Py_INCREF(Py_None);
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy(PyObject *o) {
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *p = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_market_info);
  Py_CLEAR(p->_minimum_spread);
  Py_CLEAR(p->_order_amount);
  Py_CLEAR(p->_order_refresh_tolerance_pct);
  Py_CLEAR(p->_order_override);
  Py_CLEAR(p->_hanging_orders_tracker);
  Py_CLEAR(p->_inventory_target_base_pct);
  Py_CLEAR(p->_limit_order_type);
  Py_CLEAR(p->_last_own_trade_price);
  Py_CLEAR(p->_min_spread);
  Py_CLEAR(p->_max_spread);
  Py_CLEAR(p->_vol_to_spread_multiplier);
  Py_CLEAR(p->_volatility_sensibility);
  Py_CLEAR(p->_inventory_risk_aversion);
  Py_CLEAR(p->_kappa);
  Py_CLEAR(p->_gamma);
  Py_CLEAR(p->_eta);
  Py_CLEAR(p->_closing_time);
  Py_CLEAR(p->_time_left);
  Py_CLEAR(p->_q_adjustment_factor);
  Py_CLEAR(p->_reserved_price);
  Py_CLEAR(p->_optimal_spread);
  Py_CLEAR(p->_optimal_bid);
  Py_CLEAR(p->_optimal_ask);
  Py_CLEAR(p->_latest_parameter_calculation_vol);
  Py_CLEAR(p->_debug_csv_path);
  Py_CLEAR(p->_avg_vol);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase)) __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);
}
#endif

static int __pyx_tp_traverse_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *p = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)o;
  e = ((likely(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase)) ? ((__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_traverse) ? __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy)); if (e) return e;
  if (p->_market_info) {
    e = (*v)(p->_market_info, a); if (e) return e;
  }
  if (p->_minimum_spread) {
    e = (*v)(p->_minimum_spread, a); if (e) return e;
  }
  if (p->_order_amount) {
    e = (*v)(p->_order_amount, a); if (e) return e;
  }
  if (p->_order_refresh_tolerance_pct) {
    e = (*v)(p->_order_refresh_tolerance_pct, a); if (e) return e;
  }
  if (p->_order_override) {
    e = (*v)(p->_order_override, a); if (e) return e;
  }
  if (p->_hanging_orders_tracker) {
    e = (*v)(p->_hanging_orders_tracker, a); if (e) return e;
  }
  if (p->_inventory_target_base_pct) {
    e = (*v)(p->_inventory_target_base_pct, a); if (e) return e;
  }
  if (p->_limit_order_type) {
    e = (*v)(p->_limit_order_type, a); if (e) return e;
  }
  if (p->_last_own_trade_price) {
    e = (*v)(p->_last_own_trade_price, a); if (e) return e;
  }
  if (p->_min_spread) {
    e = (*v)(p->_min_spread, a); if (e) return e;
  }
  if (p->_max_spread) {
    e = (*v)(p->_max_spread, a); if (e) return e;
  }
  if (p->_vol_to_spread_multiplier) {
    e = (*v)(p->_vol_to_spread_multiplier, a); if (e) return e;
  }
  if (p->_volatility_sensibility) {
    e = (*v)(p->_volatility_sensibility, a); if (e) return e;
  }
  if (p->_inventory_risk_aversion) {
    e = (*v)(p->_inventory_risk_aversion, a); if (e) return e;
  }
  if (p->_kappa) {
    e = (*v)(p->_kappa, a); if (e) return e;
  }
  if (p->_gamma) {
    e = (*v)(p->_gamma, a); if (e) return e;
  }
  if (p->_eta) {
    e = (*v)(p->_eta, a); if (e) return e;
  }
  if (p->_closing_time) {
    e = (*v)(p->_closing_time, a); if (e) return e;
  }
  if (p->_time_left) {
    e = (*v)(p->_time_left, a); if (e) return e;
  }
  if (p->_q_adjustment_factor) {
    e = (*v)(p->_q_adjustment_factor, a); if (e) return e;
  }
  if (p->_reserved_price) {
    e = (*v)(p->_reserved_price, a); if (e) return e;
  }
  if (p->_optimal_spread) {
    e = (*v)(p->_optimal_spread, a); if (e) return e;
  }
  if (p->_optimal_bid) {
    e = (*v)(p->_optimal_bid, a); if (e) return e;
  }
  if (p->_optimal_ask) {
    e = (*v)(p->_optimal_ask, a); if (e) return e;
  }
  if (p->_latest_parameter_calculation_vol) {
    e = (*v)(p->_latest_parameter_calculation_vol, a); if (e) return e;
  }
  if (p->_avg_vol) {
    e = (*v)(p->_avg_vol, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *p = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)o;
  if (likely(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase)) { if (__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_clear) __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);
  tmp = ((PyObject*)p->_market_info);
  p->_market_info = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_minimum_spread);
  p->_minimum_spread = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_order_amount);
  p->_order_amount = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_order_refresh_tolerance_pct);
  p->_order_refresh_tolerance_pct = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_order_override);
  p->_order_override = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_hanging_orders_tracker);
  p->_hanging_orders_tracker = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_inventory_target_base_pct);
  p->_inventory_target_base_pct = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_limit_order_type);
  p->_limit_order_type = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_last_own_trade_price);
  p->_last_own_trade_price = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_min_spread);
  p->_min_spread = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_max_spread);
  p->_max_spread = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_vol_to_spread_multiplier);
  p->_vol_to_spread_multiplier = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_volatility_sensibility);
  p->_volatility_sensibility = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_inventory_risk_aversion);
  p->_inventory_risk_aversion = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_kappa);
  p->_kappa = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_gamma);
  p->_gamma = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_eta);
  p->_eta = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_closing_time);
  p->_closing_time = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_time_left);
  p->_time_left = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_q_adjustment_factor);
  p->_q_adjustment_factor = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_reserved_price);
  p->_reserved_price = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_optimal_spread);
  p->_optimal_spread = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_optimal_bid);
  p->_optimal_bid = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_optimal_ask);
  p->_optimal_ask = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_latest_parameter_calculation_vol);
  p->_latest_parameter_calculation_vol = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_avg_vol);
  p->_avg_vol = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_volatility_sensibility(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_22volatility_sensibility_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_inventory_risk_aversion(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_23inventory_risk_aversion_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_latest_parameter_calculation_vol(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_32latest_parameter_calculation_vol_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_latest_parameter_calculation_vol(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_32latest_parameter_calculation_vol_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_avg_vol(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7avg_vol_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_avg_vol(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7avg_vol_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_market_info(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11market_info_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_refresh_tolerance_pct(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_27order_refresh_tolerance_pct_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_refresh_tolerance_pct(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_27order_refresh_tolerance_pct_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_amount(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_amount_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_amount(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_amount_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_inventory_target_base_pct(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25inventory_target_base_pct_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_inventory_target_base_pct(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25inventory_target_base_pct_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_optimization_enabled(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26order_optimization_enabled_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_optimization_enabled(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_26order_optimization_enabled_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_refresh_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18order_refresh_time_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_refresh_time(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18order_refresh_time_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_filled_order_delay(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18filled_order_delay_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_filled_order_delay(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_18filled_order_delay_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_vol_to_spread_multiplier(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_24vol_to_spread_multiplier_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_vol_to_spread_multiplier(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_24vol_to_spread_multiplier_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_min_spread(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10min_spread_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_min_spread(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10min_spread_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_max_spread(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10max_spread_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_max_spread(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10max_spread_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_override(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14order_override_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_override(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14order_override_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_levels(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_levels_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_levels(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12order_levels_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_max_order_age(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13max_order_age_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_max_order_age(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13max_order_age_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_add_transaction_costs_to_orders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_31add_transaction_costs_to_orders_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_add_transaction_costs_to_orders(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_31add_transaction_costs_to_orders_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_base_asset(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_10base_asset_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_quote_asset(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11quote_asset_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_trading_pair(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12trading_pair_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_gamma(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5gamma_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_gamma(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5gamma_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_kappa(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5kappa_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_kappa(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5kappa_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_eta(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_3eta_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_eta(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_3eta_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_reserved_price(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14reserved_price_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_reserved_price(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14reserved_price_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_optimal_spread(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_14optimal_spread_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_optimal_ask(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_ask_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_optimal_ask(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_ask_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_optimal_bid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_bid_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_optimal_bid(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11optimal_bid_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_q_adjustment_factor(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_19q_adjustment_factor_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_q_adjustment_factor(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_19q_adjustment_factor_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_time_left(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_9time_left_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_closing_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12closing_time_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_market_info_to_active_orders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_28market_info_to_active_orders_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_active_orders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13active_orders_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_active_non_hanging_orders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25active_non_hanging_orders_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_active_buys(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11active_buys_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_active_sells(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_12active_sells_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_logging_options(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_15logging_options_1__get__(o);
}

static int __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_logging_options(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_15logging_options_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_hanging_orders_tracker(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_22hanging_orders_tracker_1__get__(o);
}

static PyMethodDef __pyx_methods_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy[] = {
  {"logger", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_1logger, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"init_params", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_3init_params, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"all_markets_ready", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5all_markets_ready, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_price", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7get_price, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_last_price", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_9get_last_price, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_mid_price", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11get_mid_price, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"pure_mm_assets_df", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13pure_mm_assets_df, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"active_orders_df", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_15active_orders_df, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"market_status_data_frame", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_17market_status_data_frame, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"format_status", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_19format_status, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"execute_orders_proposal", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_21execute_orders_proposal, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"cancel_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_23cancel_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"start", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25start, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"collect_market_variables", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_27collect_market_variables, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"volatility_diff_from_last_parameter_calculation", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_29volatility_diff_from_last_parameter_calculation, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_spread", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_31get_spread, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_volatility", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_33get_volatility, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"calculate_reserved_price_and_optimal_spread", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_35calculate_reserved_price_and_optimal_spread, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"calculate_target_inventory", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_37calculate_target_inventory, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_get_min_and_max_spread", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_39_get_min_and_max_spread, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"recalculate_parameters", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_41recalculate_parameters, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"is_algorithm_ready", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_43is_algorithm_ready, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_get_logspaced_level_spreads", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_45_get_logspaced_level_spreads, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"create_proposal_based_on_order_override", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_47create_proposal_based_on_order_override, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"create_proposal_based_on_order_levels", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_49create_proposal_based_on_order_levels, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"create_basic_proposal", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_51create_basic_proposal, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"create_base_proposal", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_53create_base_proposal, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_adjusted_available_balance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_55get_adjusted_available_balance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"apply_order_price_modifiers", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_57apply_order_price_modifiers, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"apply_budget_constraint", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_59apply_budget_constraint, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"adjusted_available_balance_for_orders_budget_constrain", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_61adjusted_available_balance_for_orders_budget_constrain, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"apply_budget_constraint", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_63apply_budget_constraint, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"apply_order_optimization", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_65apply_order_optimization, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"apply_order_amount_eta_transformation", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_67apply_order_amount_eta_transformation, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"apply_add_transaction_costs", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_69apply_add_transaction_costs, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"is_within_tolerance", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_71is_within_tolerance, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"cancel_active_orders", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_73cancel_active_orders, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"to_create_orders", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_75to_create_orders, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"execute_orders_proposal", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_77execute_orders_proposal, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"set_timers", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_79set_timers, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"notify_hb_app", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_81notify_hb_app, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"dump_debug_variables", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_83dump_debug_variables, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_85__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_87__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy[] = {
  {(char *)"volatility_sensibility", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_volatility_sensibility, 0, (char *)0, 0},
  {(char *)"inventory_risk_aversion", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_inventory_risk_aversion, 0, (char *)0, 0},
  {(char *)"latest_parameter_calculation_vol", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_latest_parameter_calculation_vol, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_latest_parameter_calculation_vol, (char *)0, 0},
  {(char *)"avg_vol", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_avg_vol, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_avg_vol, (char *)0, 0},
  {(char *)"market_info", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_market_info, 0, (char *)0, 0},
  {(char *)"order_refresh_tolerance_pct", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_refresh_tolerance_pct, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_refresh_tolerance_pct, (char *)0, 0},
  {(char *)"order_amount", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_amount, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_amount, (char *)0, 0},
  {(char *)"inventory_target_base_pct", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_inventory_target_base_pct, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_inventory_target_base_pct, (char *)0, 0},
  {(char *)"order_optimization_enabled", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_optimization_enabled, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_optimization_enabled, (char *)0, 0},
  {(char *)"order_refresh_time", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_refresh_time, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_refresh_time, (char *)0, 0},
  {(char *)"filled_order_delay", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_filled_order_delay, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_filled_order_delay, (char *)0, 0},
  {(char *)"vol_to_spread_multiplier", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_vol_to_spread_multiplier, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_vol_to_spread_multiplier, (char *)0, 0},
  {(char *)"min_spread", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_min_spread, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_min_spread, (char *)0, 0},
  {(char *)"max_spread", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_max_spread, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_max_spread, (char *)0, 0},
  {(char *)"order_override", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_override, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_override, (char *)0, 0},
  {(char *)"order_levels", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_levels, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_order_levels, (char *)0, 0},
  {(char *)"max_order_age", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_max_order_age, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_max_order_age, (char *)0, 0},
  {(char *)"add_transaction_costs_to_orders", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_add_transaction_costs_to_orders, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_add_transaction_costs_to_orders, (char *)0, 0},
  {(char *)"base_asset", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_base_asset, 0, (char *)0, 0},
  {(char *)"quote_asset", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_quote_asset, 0, (char *)0, 0},
  {(char *)"trading_pair", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_trading_pair, 0, (char *)0, 0},
  {(char *)"gamma", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_gamma, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_gamma, (char *)0, 0},
  {(char *)"kappa", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_kappa, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_kappa, (char *)0, 0},
  {(char *)"eta", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_eta, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_eta, (char *)0, 0},
  {(char *)"reserved_price", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_reserved_price, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_reserved_price, (char *)0, 0},
  {(char *)"optimal_spread", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_optimal_spread, 0, (char *)0, 0},
  {(char *)"optimal_ask", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_optimal_ask, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_optimal_ask, (char *)0, 0},
  {(char *)"optimal_bid", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_optimal_bid, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_optimal_bid, (char *)0, 0},
  {(char *)"q_adjustment_factor", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_q_adjustment_factor, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_q_adjustment_factor, (char *)0, 0},
  {(char *)"time_left", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_time_left, 0, (char *)0, 0},
  {(char *)"closing_time", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_closing_time, 0, (char *)0, 0},
  {(char *)"market_info_to_active_orders", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_market_info_to_active_orders, 0, (char *)0, 0},
  {(char *)"active_orders", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_active_orders, 0, (char *)0, 0},
  {(char *)"active_non_hanging_orders", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_active_non_hanging_orders, 0, (char *)0, 0},
  {(char *)"active_buys", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_active_buys, 0, (char *)0, 0},
  {(char *)"active_sells", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_active_sells, 0, (char *)0, 0},
  {(char *)"logging_options", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_logging_options, __pyx_setprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_logging_options, (char *)0, 0},
  {(char *)"hanging_orders_tracker", __pyx_getprop_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_hanging_orders_tracker, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy},
  {Py_tp_methods, (void *)__pyx_methods_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy},
  {Py_tp_getset, (void *)__pyx_getsets_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy_spec = {
  "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.AvellanedaMarketMakingStrategy",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.""AvellanedaMarketMakingStrategy", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start *__pyx_freelist_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start[8];
static int __pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start = 0;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start[--__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start(PyObject *o) {
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start *p = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_order_id);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start)))) {
    __pyx_freelist_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start[__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start++] = ((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start *p = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start *)o;
  if (p->__pyx_v_order_id) {
    e = (*v)(p->__pyx_v_order_id, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start *p = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start *)o;
  tmp = ((PyObject*)p->__pyx_v_order_id);
  p->__pyx_v_order_id = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start_spec = {
  "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.__pyx_scope_struct____pyx_base____pyx_base__c_start",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.""__pyx_scope_struct____pyx_base____pyx_base__c_start", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr *__pyx_freelist_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr[8];
static int __pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr = 0;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr[--__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr(PyObject *o) {
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_o);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr)))) {
    __pyx_freelist_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr[__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr++] = ((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr *p = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_o) {
    e = (*v)(p->__pyx_v_o, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr_spec = {
  "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.__pyx_scope_struct_1_genexpr",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.""__pyx_scope_struct_1_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal *__pyx_freelist_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal[8];
static int __pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal = 0;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal[--__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal(PyObject *o) {
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal *p = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_ask_order_id);
  Py_CLEAR(p->__pyx_v_bid_order_id);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal)))) {
    __pyx_freelist_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal[__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal++] = ((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal *p = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal *p = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = ((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal_spec = {
  "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.__pyx_scope_struct_2_c_execute_orders_proposal",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.""__pyx_scope_struct_2_c_execute_orders_proposal", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr *__pyx_freelist_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr[8];
static int __pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr = 0;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr[--__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr(PyObject *o) {
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_o);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr)))) {
    __pyx_freelist_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr[__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr++] = ((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr *p = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_o) {
    e = (*v)(p->__pyx_v_o, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr_spec = {
  "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.__pyx_scope_struct_3_genexpr",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.""__pyx_scope_struct_3_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr *__pyx_freelist_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr[8];
static int __pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr = 0;

static PyObject *__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr[--__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr(PyObject *o) {
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_o);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr)))) {
    __pyx_freelist_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr[__pyx_freecount_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr++] = ((struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr *p = (struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_o) {
    e = (*v)(p->__pyx_v_o, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr_spec = {
  "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.__pyx_scope_struct_4_genexpr",
  sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making.""__pyx_scope_struct_4_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  #if CYTHON_COMPILING_IN_LIMITED_API
  {0, __pyx_k_0_005, sizeof(__pyx_k_0_005), 0, 1, 0, 0},
  {0, __pyx_k_0_1, sizeof(__pyx_k_0_1), 0, 1, 0, 0},
  {0, __pyx_k_0_15, sizeof(__pyx_k_0_15), 0, 1, 0, 0},
  {0, __pyx_k_0_2, sizeof(__pyx_k_0_2), 0, 1, 0, 0},
  {0, __pyx_k_0_5, sizeof(__pyx_k_0_5), 0, 1, 0, 0},
  {0, __pyx_k_0x_active_cancels, sizeof(__pyx_k_0x_active_cancels), 0, 1, 0, 0},
  {0, __pyx_k_1, sizeof(__pyx_k_1), 0, 1, 0, 0},
  {0, __pyx_k_10, sizeof(__pyx_k_10), 0, 1, 0, 0},
  {0, __pyx_k_100, sizeof(__pyx_k_100), 0, 1, 0, 0},
  {0, __pyx_k_1_2, sizeof(__pyx_k_1_2), 0, 1, 0, 0},
  {0, __pyx_k_1_3, sizeof(__pyx_k_1_3), 0, 1, 0, 0},
  {0, __pyx_k_1e100, sizeof(__pyx_k_1e100), 0, 1, 0, 0},
  {0, __pyx_k_1e5, sizeof(__pyx_k_1e5), 0, 1, 0, 0},
  {0, __pyx_k_2, sizeof(__pyx_k_2), 0, 1, 0, 0},
  {0, __pyx_k_2_2, sizeof(__pyx_k_2_2), 0, 1, 0, 0},
  {0, __pyx_k_3f, sizeof(__pyx_k_3f), 0, 1, 0, 0},
  {0, __pyx_k_4f, sizeof(__pyx_k_4f), 0, 1, 0, 0},
  {0, __pyx_k_5E, sizeof(__pyx_k_5E), 0, 1, 0, 0},
  {0, __pyx_k_Age, sizeof(__pyx_k_Age), 0, 1, 0, 1},
  {0, __pyx_k_Amount_Adj, sizeof(__pyx_k_Amount_Adj), 0, 1, 0, 0},
  {0, __pyx_k_Amount_Orig, sizeof(__pyx_k_Amount_Orig), 0, 1, 0, 0},
  {0, __pyx_k_Assets, sizeof(__pyx_k_Assets), 0, 1, 0, 0},
  {0, __pyx_k_Available_Balance, sizeof(__pyx_k_Available_Balance), 0, 1, 0, 0},
  {0, __pyx_k_AvellanedaMarketMakingStrategy, sizeof(__pyx_k_AvellanedaMarketMakingStrategy), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_2, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_2), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_3, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_3), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_4, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_4), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_5, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_5), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_a, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_a), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_a_2, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_a_2), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_a_3, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_a_3), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_a_4, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_a_4), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_a_5, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_a_5), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_a_6, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_a_6), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_a_7, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_a_7), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_a_8, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_a_8), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_c, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_c_10, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_10), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_c_11, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_11), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_c_12, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_12), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_c_2, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_2), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_c_3, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_3), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_c_4, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_4), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_c_5, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_5), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_c_6, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_6), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_c_7, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_7), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_c_8, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_8), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_c_9, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_9), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_d, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_d), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_e, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_e), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_f, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_f), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_g, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_g), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_g_2, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_g_2), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_g_3, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_g_3), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_g_4, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_g_4), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_g_5, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_g_5), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_g_6, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_g_6), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_i, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_i), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_i_2, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_i_2), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_i_3, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_i_3), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_l, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_l), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_m, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_m), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_n, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_n), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_p, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_p), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_r, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_r), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_s, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_s), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_s_2, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_s_2), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_t, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_t), 0, 0, 1, 1},
  {0, __pyx_k_AvellanedaMarketMakingStrategy_v, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_v), 0, 0, 1, 1},
  {0, __pyx_k_BUY, sizeof(__pyx_k_BUY), 0, 0, 1, 1},
  {0, __pyx_k_Best_Ask, sizeof(__pyx_k_Best_Ask), 0, 1, 0, 0},
  {0, __pyx_k_Best_Bid, sizeof(__pyx_k_Best_Bid), 0, 1, 0, 0},
  {0, __pyx_k_CONNECTED, sizeof(__pyx_k_CONNECTED), 0, 0, 1, 1},
  {0, __pyx_k_Calculating_volatility, sizeof(__pyx_k_Calculating_volatility), 0, 1, 0, 0},
  {0, __pyx_k_Clock, sizeof(__pyx_k_Clock), 0, 0, 1, 1},
  {0, __pyx_k_CreatedPairOfOrders, sizeof(__pyx_k_CreatedPairOfOrders), 0, 0, 1, 1},
  {0, __pyx_k_Creating, sizeof(__pyx_k_Creating), 0, 1, 0, 0},
  {0, __pyx_k_Current, sizeof(__pyx_k_Current), 0, 1, 0, 0},
  {0, __pyx_k_Current_Value, sizeof(__pyx_k_Current_Value), 0, 1, 0, 0},
  {0, __pyx_k_DataFrame, sizeof(__pyx_k_DataFrame), 0, 0, 1, 1},
  {0, __pyx_k_Decimal, sizeof(__pyx_k_Decimal), 0, 0, 1, 1},
  {0, __pyx_k_Dict, sizeof(__pyx_k_Dict), 0, 0, 1, 1},
  {0, __pyx_k_Dict_str_List_str, sizeof(__pyx_k_Dict_str_List_str), 0, 0, 1, 0},
  {0, __pyx_k_Exchange, sizeof(__pyx_k_Exchange), 0, 1, 0, 1},
  {0, __pyx_k_ExchangeBase, sizeof(__pyx_k_ExchangeBase), 0, 0, 1, 1},
  {0, __pyx_k_FileNotFoundError, sizeof(__pyx_k_FileNotFoundError), 0, 0, 1, 1},
  {0, __pyx_k_H_M_S, sizeof(__pyx_k_H_M_S), 0, 1, 0, 0},
  {0, __pyx_k_HangingOrdersTracker, sizeof(__pyx_k_HangingOrdersTracker), 0, 0, 1, 1},
  {0, __pyx_k_INFO, sizeof(__pyx_k_INFO), 0, 0, 1, 1},
  {0, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {0, __pyx_k_Inf, sizeof(__pyx_k_Inf), 0, 1, 0, 1},
  {0, __pyx_k_InstantVolatilityIndicator, sizeof(__pyx_k_InstantVolatilityIndicator), 0, 0, 1, 1},
  {0, __pyx_k_LIMIT, sizeof(__pyx_k_LIMIT), 0, 0, 1, 1},
  {0, __pyx_k_Level, sizeof(__pyx_k_Level), 0, 1, 0, 1},
  {0, __pyx_k_LimitOrder, sizeof(__pyx_k_LimitOrder), 0, 0, 1, 1},
  {0, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {0, __pyx_k_List_Decimal, sizeof(__pyx_k_List_Decimal), 0, 0, 1, 0},
  {0, __pyx_k_List_LimitOrder, sizeof(__pyx_k_List_LimitOrder), 0, 0, 1, 0},
  {0, __pyx_k_List_MarketTradingPairTuple, sizeof(__pyx_k_List_MarketTradingPairTuple), 0, 0, 1, 0},
  {0, __pyx_k_Maker, sizeof(__pyx_k_Maker), 0, 1, 0, 0},
  {0, __pyx_k_Maker_2, sizeof(__pyx_k_Maker_2), 0, 1, 0, 0},
  {0, __pyx_k_Maker_buy_order_of, sizeof(__pyx_k_Maker_buy_order_of), 0, 1, 0, 0},
  {0, __pyx_k_Maker_sell_order_of, sizeof(__pyx_k_Maker_sell_order_of), 0, 1, 0, 0},
  {0, __pyx_k_Market, sizeof(__pyx_k_Market), 0, 1, 0, 1},
  {0, __pyx_k_MarketTradingPairTuple, sizeof(__pyx_k_MarketTradingPairTuple), 0, 0, 1, 1},
  {0, __pyx_k_Market_connectors_are_not_ready, sizeof(__pyx_k_Market_connectors_are_not_ready), 0, 1, 0, 0},
  {0, __pyx_k_Markets, sizeof(__pyx_k_Markets), 0, 1, 0, 0},
  {0, __pyx_k_Markets_are_not_ready_No_market, sizeof(__pyx_k_Markets_are_not_ready_No_market), 0, 1, 0, 0},
  {0, __pyx_k_MidPrice, sizeof(__pyx_k_MidPrice), 0, 1, 0, 1},
  {0, __pyx_k_NaN, sizeof(__pyx_k_NaN), 0, 0, 1, 1},
  {0, __pyx_k_NetworkStatus, sizeof(__pyx_k_NetworkStatus), 0, 0, 1, 1},
  {0, __pyx_k_No_active_maker_orders, sizeof(__pyx_k_No_active_maker_orders), 0, 1, 0, 0},
  {0, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {0, __pyx_k_OPTION_LOG_ALL, sizeof(__pyx_k_OPTION_LOG_ALL), 0, 0, 1, 1},
  {0, __pyx_k_OPTION_LOG_CREATE_ORDER, sizeof(__pyx_k_OPTION_LOG_CREATE_ORDER), 0, 0, 1, 1},
  {0, __pyx_k_OPTION_LOG_MAKER_ORDER_FILLED, sizeof(__pyx_k_OPTION_LOG_MAKER_ORDER_FILLED), 0, 0, 1, 1},
  {0, __pyx_k_OPTION_LOG_STATUS_REPORT, sizeof(__pyx_k_OPTION_LOG_STATUS_REPORT), 0, 0, 1, 1},
  {0, __pyx_k_OrderType, sizeof(__pyx_k_OrderType), 0, 0, 1, 1},
  {0, __pyx_k_Orders, sizeof(__pyx_k_Orders), 0, 1, 0, 0},
  {0, __pyx_k_Price, sizeof(__pyx_k_Price), 0, 1, 0, 1},
  {0, __pyx_k_PriceSize, sizeof(__pyx_k_PriceSize), 0, 0, 1, 1},
  {0, __pyx_k_Proposal, sizeof(__pyx_k_Proposal), 0, 0, 1, 1},
  {0, __pyx_k_RADAR_RELAY_TYPE_EXCHANGES, sizeof(__pyx_k_RADAR_RELAY_TYPE_EXCHANGES), 0, 0, 1, 1},
  {0, __pyx_k_Recycling_algorithm_time_left_an, sizeof(__pyx_k_Recycling_algorithm_time_left_an), 0, 1, 0, 0},
  {0, __pyx_k_Reserved_Price, sizeof(__pyx_k_Reserved_Price), 0, 1, 0, 0},
  {0, __pyx_k_SELL, sizeof(__pyx_k_SELL), 0, 0, 1, 1},
  {0, __pyx_k_Spread, sizeof(__pyx_k_Spread), 0, 1, 0, 1},
  {0, __pyx_k_StrategyBase, sizeof(__pyx_k_StrategyBase), 0, 0, 1, 1},
  {0, __pyx_k_Strategy_parameters, sizeof(__pyx_k_Strategy_parameters), 0, 1, 0, 0},
  {0, __pyx_k_Timestamp, sizeof(__pyx_k_Timestamp), 0, 0, 1, 1},
  {0, __pyx_k_Total_Balance, sizeof(__pyx_k_Total_Balance), 0, 1, 0, 0},
  {0, __pyx_k_TradeType, sizeof(__pyx_k_TradeType), 0, 0, 1, 1},
  {0, __pyx_k_Tuple, sizeof(__pyx_k_Tuple), 0, 0, 1, 1},
  {0, __pyx_k_Tuple_List_Proposal_List_Proposa, sizeof(__pyx_k_Tuple_List_Proposal_List_Proposa), 0, 0, 1, 0},
  {0, __pyx_k_Type, sizeof(__pyx_k_Type), 0, 1, 0, 1},
  {0, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {0, __pyx_k_WARNINGS, sizeof(__pyx_k_WARNINGS), 0, 1, 0, 0},
  {0, __pyx_k_WARNING_Some_markets_are_not_con, sizeof(__pyx_k_WARNING_Some_markets_are_not_con), 0, 1, 0, 0},
  {0, __pyx_k__133, sizeof(__pyx_k__133), 0, 0, 1, 1},
  {0, __pyx_k__15, sizeof(__pyx_k__15), 0, 1, 0, 0},
  {0, __pyx_k__16, sizeof(__pyx_k__16), 0, 1, 0, 0},
  {0, __pyx_k__17, sizeof(__pyx_k__17), 0, 1, 0, 0},
  {0, __pyx_k__19, sizeof(__pyx_k__19), 0, 1, 0, 0},
  {0, __pyx_k__20, sizeof(__pyx_k__20), 0, 1, 0, 0},
  {0, __pyx_k__21, sizeof(__pyx_k__21), 0, 1, 0, 0},
  {0, __pyx_k__22, sizeof(__pyx_k__22), 0, 1, 0, 0},
  {0, __pyx_k__23, sizeof(__pyx_k__23), 0, 1, 0, 0},
  {0, __pyx_k__24, sizeof(__pyx_k__24), 0, 1, 0, 0},
  {0, __pyx_k__25, sizeof(__pyx_k__25), 0, 1, 0, 0},
  {0, __pyx_k__26, sizeof(__pyx_k__26), 0, 1, 0, 0},
  {0, __pyx_k__27, sizeof(__pyx_k__27), 0, 1, 0, 0},
  {0, __pyx_k__28, sizeof(__pyx_k__28), 0, 1, 0, 0},
  {0, __pyx_k__32, sizeof(__pyx_k__32), 0, 0, 1, 1},
  {0, __pyx_k__88, sizeof(__pyx_k__88), 0, 0, 1, 1},
  {0, __pyx_k_a, sizeof(__pyx_k_a), 0, 1, 0, 1},
  {0, __pyx_k_active_markets, sizeof(__pyx_k_active_markets), 0, 0, 1, 1},
  {0, __pyx_k_active_non_hanging_orders, sizeof(__pyx_k_active_non_hanging_orders), 0, 0, 1, 1},
  {0, __pyx_k_active_orders, sizeof(__pyx_k_active_orders), 0, 0, 1, 1},
  {0, __pyx_k_active_orders_df, sizeof(__pyx_k_active_orders_df), 0, 0, 1, 1},
  {0, __pyx_k_active_orders_df_locals_lambda, sizeof(__pyx_k_active_orders_df_locals_lambda), 0, 0, 1, 1},
  {0, __pyx_k_add_current_pairs_of_proposal_or, sizeof(__pyx_k_add_current_pairs_of_proposal_or), 0, 0, 1, 1},
  {0, __pyx_k_add_order, sizeof(__pyx_k_add_order), 0, 0, 1, 1},
  {0, __pyx_k_add_sample, sizeof(__pyx_k_add_sample), 0, 0, 1, 1},
  {0, __pyx_k_add_transaction_costs_to_orders, sizeof(__pyx_k_add_transaction_costs_to_orders), 0, 0, 1, 1},
  {0, __pyx_k_adjusted_available_balance_for_o, sizeof(__pyx_k_adjusted_available_balance_for_o), 0, 0, 1, 1},
  {0, __pyx_k_age, sizeof(__pyx_k_age), 0, 0, 1, 1},
  {0, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {0, __pyx_k_all_markets_ready, sizeof(__pyx_k_all_markets_ready), 0, 0, 1, 1},
  {0, __pyx_k_all_non_hanging_orders, sizeof(__pyx_k_all_non_hanging_orders), 0, 0, 1, 1},
  {0, __pyx_k_all_orders, sizeof(__pyx_k_all_orders), 0, 0, 1, 1},
  {0, __pyx_k_amount, sizeof(__pyx_k_amount), 0, 0, 1, 1},
  {0, __pyx_k_amount_orig, sizeof(__pyx_k_amount_orig), 0, 0, 1, 1},
  {0, __pyx_k_apply, sizeof(__pyx_k_apply), 0, 0, 1, 1},
  {0, __pyx_k_apply_add_transaction_costs, sizeof(__pyx_k_apply_add_transaction_costs), 0, 0, 1, 1},
  {0, __pyx_k_apply_budget_constraint, sizeof(__pyx_k_apply_budget_constraint), 0, 0, 1, 1},
  {0, __pyx_k_apply_order_amount_eta_transform, sizeof(__pyx_k_apply_order_amount_eta_transform), 0, 0, 1, 1},
  {0, __pyx_k_apply_order_optimization, sizeof(__pyx_k_apply_order_optimization), 0, 0, 1, 1},
  {0, __pyx_k_apply_order_price_modifiers, sizeof(__pyx_k_apply_order_price_modifiers), 0, 0, 1, 1},
  {0, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {0, __pyx_k_ask, sizeof(__pyx_k_ask), 0, 1, 0, 0},
  {0, __pyx_k_ask_level_spreads, sizeof(__pyx_k_ask_level_spreads), 0, 0, 1, 1},
  {0, __pyx_k_ask_orders_at_Size_Price, sizeof(__pyx_k_ask_orders_at_Size_Price), 0, 1, 0, 0},
  {0, __pyx_k_ask_price, sizeof(__pyx_k_ask_price), 0, 0, 1, 1},
  {0, __pyx_k_assets_df, sizeof(__pyx_k_assets_df), 0, 0, 1, 1},
  {0, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {0, __pyx_k_available_base_balance, sizeof(__pyx_k_available_base_balance), 0, 0, 1, 1},
  {0, __pyx_k_available_quote_balance, sizeof(__pyx_k_available_quote_balance), 0, 0, 1, 1},
  {0, __pyx_k_balance_warning, sizeof(__pyx_k_balance_warning), 0, 0, 1, 1},
  {0, __pyx_k_bamboo_relay, sizeof(__pyx_k_bamboo_relay), 0, 1, 0, 1},
  {0, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {0, __pyx_k_base_asset, sizeof(__pyx_k_base_asset), 0, 0, 1, 1},
  {0, __pyx_k_base_balance, sizeof(__pyx_k_base_balance), 0, 0, 1, 1},
  {0, __pyx_k_base_currency, sizeof(__pyx_k_base_currency), 0, 0, 1, 1},
  {0, __pyx_k_base_ratio, sizeof(__pyx_k_base_ratio), 0, 0, 1, 1},
  {0, __pyx_k_base_value, sizeof(__pyx_k_base_value), 0, 0, 1, 1},
  {0, __pyx_k_best_ask, sizeof(__pyx_k_best_ask), 0, 0, 1, 1},
  {0, __pyx_k_best_bid, sizeof(__pyx_k_best_bid), 0, 0, 1, 1},
  {0, __pyx_k_bid, sizeof(__pyx_k_bid), 0, 1, 0, 0},
  {0, __pyx_k_bid_level_spreads, sizeof(__pyx_k_bid_level_spreads), 0, 0, 1, 1},
  {0, __pyx_k_bid_orders_at_Size_Price, sizeof(__pyx_k_bid_orders_at_Size_Price), 0, 1, 0, 0},
  {0, __pyx_k_bid_price, sizeof(__pyx_k_bid_price), 0, 0, 1, 1},
  {0, __pyx_k_bool, sizeof(__pyx_k_bool), 0, 0, 1, 1},
  {0, __pyx_k_buy, sizeof(__pyx_k_buy), 0, 1, 0, 1},
  {0, __pyx_k_buys, sizeof(__pyx_k_buys), 0, 0, 1, 1},
  {0, __pyx_k_calculate_reserved_price_and_opt, sizeof(__pyx_k_calculate_reserved_price_and_opt), 0, 0, 1, 1},
  {0, __pyx_k_calculate_target_inventory, sizeof(__pyx_k_calculate_target_inventory), 0, 0, 1, 1},
  {0, __pyx_k_cancel_active_orders, sizeof(__pyx_k_cancel_active_orders), 0, 0, 1, 1},
  {0, __pyx_k_cancel_order, sizeof(__pyx_k_cancel_order), 0, 0, 1, 1},
  {0, __pyx_k_candidate_hanging_orders, sizeof(__pyx_k_candidate_hanging_orders), 0, 0, 1, 1},
  {0, __pyx_k_candidate_hanging_orders_from_pa, sizeof(__pyx_k_candidate_hanging_orders_from_pa), 0, 0, 1, 1},
  {0, __pyx_k_ceil, sizeof(__pyx_k_ceil), 0, 0, 1, 1},
  {0, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
  {0, __pyx_k_client_order_id, sizeof(__pyx_k_client_order_id), 0, 0, 1, 1},
  {0, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {0, __pyx_k_clock, sizeof(__pyx_k_clock), 0, 0, 1, 1},
  {0, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {0, __pyx_k_closing_time, sizeof(__pyx_k_closing_time), 0, 0, 1, 1},
  {0, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
  {0, __pyx_k_collect_market_variables, sizeof(__pyx_k_collect_market_variables), 0, 0, 1, 1},
  {0, __pyx_k_columns, sizeof(__pyx_k_columns), 0, 0, 1, 1},
  {0, __pyx_k_create_base_proposal, sizeof(__pyx_k_create_base_proposal), 0, 0, 1, 1},
  {0, __pyx_k_create_basic_proposal, sizeof(__pyx_k_create_basic_proposal), 0, 0, 1, 1},
  {0, __pyx_k_create_proposal_based_on_order_l, sizeof(__pyx_k_create_proposal_based_on_order_l), 0, 0, 1, 1},
  {0, __pyx_k_create_proposal_based_on_order_o, sizeof(__pyx_k_create_proposal_based_on_order_o), 0, 0, 1, 1},
  {0, __pyx_k_current_created_pairs_of_orders, sizeof(__pyx_k_current_created_pairs_of_orders), 0, 0, 1, 1},
  {0, __pyx_k_current_inv, sizeof(__pyx_k_current_inv), 0, 1, 0, 1},
  {0, __pyx_k_current_prices, sizeof(__pyx_k_current_prices), 0, 0, 1, 1},
  {0, __pyx_k_current_value, sizeof(__pyx_k_current_value), 0, 0, 1, 1},
  {0, __pyx_k_current_vol, sizeof(__pyx_k_current_vol), 0, 0, 1, 1},
  {0, __pyx_k_current_vol_to_calculation_vol, sizeof(__pyx_k_current_vol_to_calculation_vol), 0, 1, 0, 1},
  {0, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {0, __pyx_k_datetime, sizeof(__pyx_k_datetime), 0, 0, 1, 1},
  {0, __pyx_k_debug_csv_path, sizeof(__pyx_k_debug_csv_path), 0, 0, 1, 1},
  {0, __pyx_k_decimal, sizeof(__pyx_k_decimal), 0, 0, 1, 1},
  {0, __pyx_k_df, sizeof(__pyx_k_df), 0, 0, 1, 1},
  {0, __pyx_k_df_header, sizeof(__pyx_k_df_header), 0, 0, 1, 1},
  {0, __pyx_k_df_lines, sizeof(__pyx_k_df_lines), 0, 0, 1, 1},
  {0, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {0, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
  {0, __pyx_k_display_name, sizeof(__pyx_k_display_name), 0, 0, 1, 1},
  {0, __pyx_k_dump_debug_variables, sizeof(__pyx_k_dump_debug_variables), 0, 0, 1, 1},
  {0, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
  {0, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
  {0, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {0, __pyx_k_eta, sizeof(__pyx_k_eta), 0, 1, 0, 1},
  {0, __pyx_k_execute_orders_proposal, sizeof(__pyx_k_execute_orders_proposal), 0, 0, 1, 1},
  {0, __pyx_k_exists, sizeof(__pyx_k_exists), 0, 0, 1, 1},
  {0, __pyx_k_exp, sizeof(__pyx_k_exp), 0, 0, 1, 1},
  {0, __pyx_k_filled, sizeof(__pyx_k_filled), 0, 1, 0, 0},
  {0, __pyx_k_filled_order_delay, sizeof(__pyx_k_filled_order_delay), 0, 0, 1, 1},
  {0, __pyx_k_first_col_length, sizeof(__pyx_k_first_col_length), 0, 0, 1, 1},
  {0, __pyx_k_float, sizeof(__pyx_k_float), 0, 0, 1, 1},
  {0, __pyx_k_floor, sizeof(__pyx_k_floor), 0, 0, 1, 1},
  {0, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {0, __pyx_k_format_status, sizeof(__pyx_k_format_status), 0, 0, 1, 1},
  {0, __pyx_k_formatters, sizeof(__pyx_k_formatters), 0, 0, 1, 1},
  {0, __pyx_k_gamma, sizeof(__pyx_k_gamma), 0, 1, 0, 1},
  {0, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
  {0, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {0, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {0, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {0, __pyx_k_get_adjusted_available_balance, sizeof(__pyx_k_get_adjusted_available_balance), 0, 0, 1, 1},
  {0, __pyx_k_get_available_balance, sizeof(__pyx_k_get_available_balance), 0, 0, 1, 1},
  {0, __pyx_k_get_balance, sizeof(__pyx_k_get_balance), 0, 0, 1, 1},
  {0, __pyx_k_get_last_price, sizeof(__pyx_k_get_last_price), 0, 0, 1, 1},
  {0, __pyx_k_get_limit_orders, sizeof(__pyx_k_get_limit_orders), 0, 0, 1, 1},
  {0, __pyx_k_get_logspaced_level_spreads, sizeof(__pyx_k_get_logspaced_level_spreads), 0, 0, 1, 1},
  {0, __pyx_k_get_maker_order_type, sizeof(__pyx_k_get_maker_order_type), 0, 0, 1, 1},
  {0, __pyx_k_get_mid_price, sizeof(__pyx_k_get_mid_price), 0, 0, 1, 1},
  {0, __pyx_k_get_min_and_max_spread, sizeof(__pyx_k_get_min_and_max_spread), 0, 0, 1, 1},
  {0, __pyx_k_get_price, sizeof(__pyx_k_get_price), 0, 0, 1, 1},
  {0, __pyx_k_get_price_for_volume, sizeof(__pyx_k_get_price_for_volume), 0, 0, 1, 1},
  {0, __pyx_k_get_spread, sizeof(__pyx_k_get_spread), 0, 0, 1, 1},
  {0, __pyx_k_get_volatility, sizeof(__pyx_k_get_volatility), 0, 0, 1, 1},
  {0, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {0, __pyx_k_global_config_map, sizeof(__pyx_k_global_config_map), 0, 0, 1, 1},
  {0, __pyx_k_hang, sizeof(__pyx_k_hang), 0, 1, 0, 1},
  {0, __pyx_k_hanging_orders_cancel_pct, sizeof(__pyx_k_hanging_orders_cancel_pct), 0, 0, 1, 1},
  {0, __pyx_k_hanging_orders_enabled, sizeof(__pyx_k_hanging_orders_enabled), 0, 0, 1, 1},
  {0, __pyx_k_hanging_orders_tracker, sizeof(__pyx_k_hanging_orders_tracker), 0, 0, 1, 1},
  {0, __pyx_k_has_been_completely_filled, sizeof(__pyx_k_has_been_completely_filled), 0, 1, 0, 0},
  {0, __pyx_k_hb_app_notification, sizeof(__pyx_k_hb_app_notification), 0, 0, 1, 1},
  {0, __pyx_k_header, sizeof(__pyx_k_header), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_client_config_global, sizeof(__pyx_k_hummingbot_client_config_global), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_connector_exchange_ba, sizeof(__pyx_k_hummingbot_connector_exchange_ba), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_data_type_limit, sizeof(__pyx_k_hummingbot_core_data_type_limit), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_event_events, sizeof(__pyx_k_hummingbot_core_event_events), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_network_iterator, sizeof(__pyx_k_hummingbot_core_network_iterator), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_utils, sizeof(__pyx_k_hummingbot_core_utils), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_strategy___utils___tr, sizeof(__pyx_k_hummingbot_strategy___utils___tr), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_strategy_avellaneda_m, sizeof(__pyx_k_hummingbot_strategy_avellaneda_m), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_strategy_avellaneda_m_2, sizeof(__pyx_k_hummingbot_strategy_avellaneda_m_2), 0, 0, 1, 0},
  {0, __pyx_k_hummingbot_strategy_data_types, sizeof(__pyx_k_hummingbot_strategy_data_types), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_strategy_hanging_orde, sizeof(__pyx_k_hummingbot_strategy_hanging_orde), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_strategy_market_tradi, sizeof(__pyx_k_hummingbot_strategy_market_tradi), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_strategy_strategy_bas, sizeof(__pyx_k_hummingbot_strategy_strategy_bas), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_strategy_utils, sizeof(__pyx_k_hummingbot_strategy_utils), 0, 0, 1, 1},
  {0, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {0, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {0, __pyx_k_in_flight_cancels, sizeof(__pyx_k_in_flight_cancels), 0, 0, 1, 1},
  {0, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {0, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {0, __pyx_k_init_params, sizeof(__pyx_k_init_params), 0, 0, 1, 1},
  {0, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {0, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
  {0, __pyx_k_inventory_risk_aversion, sizeof(__pyx_k_inventory_risk_aversion), 0, 0, 1, 1},
  {0, __pyx_k_inventory_target_base_pct, sizeof(__pyx_k_inventory_target_base_pct), 0, 0, 1, 1},
  {0, __pyx_k_inventory_target_pct, sizeof(__pyx_k_inventory_target_pct), 0, 1, 0, 1},
  {0, __pyx_k_is_algorithm_ready, sizeof(__pyx_k_is_algorithm_ready), 0, 0, 1, 1},
  {0, __pyx_k_is_buy, sizeof(__pyx_k_is_buy), 0, 0, 1, 1},
  {0, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {0, __pyx_k_is_debug, sizeof(__pyx_k_is_debug), 0, 0, 1, 1},
  {0, __pyx_k_is_filled, sizeof(__pyx_k_is_filled), 0, 1, 0, 0},
  {0, __pyx_k_is_hanging_order, sizeof(__pyx_k_is_hanging_order), 0, 0, 1, 1},
  {0, __pyx_k_is_order_id_in_completed_hanging, sizeof(__pyx_k_is_order_id_in_completed_hanging), 0, 0, 1, 1},
  {0, __pyx_k_is_order_id_in_hanging_orders, sizeof(__pyx_k_is_order_id_in_hanging_orders), 0, 0, 1, 1},
  {0, __pyx_k_is_potential_hanging_order, sizeof(__pyx_k_is_potential_hanging_order), 0, 0, 1, 1},
  {0, __pyx_k_is_sampling_buffer_full, sizeof(__pyx_k_is_sampling_buffer_full), 0, 0, 1, 1},
  {0, __pyx_k_is_within_tolerance, sizeof(__pyx_k_is_within_tolerance), 0, 0, 1, 1},
  {0, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
  {0, __pyx_k_isnan, sizeof(__pyx_k_isnan), 0, 0, 1, 1},
  {0, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {0, __pyx_k_kappa, sizeof(__pyx_k_kappa), 0, 1, 0, 1},
  {0, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {0, __pyx_k_len, sizeof(__pyx_k_len), 0, 0, 1, 1},
  {0, __pyx_k_level, sizeof(__pyx_k_level), 0, 0, 1, 1},
  {0, __pyx_k_limit_orders, sizeof(__pyx_k_limit_orders), 0, 0, 1, 1},
  {0, __pyx_k_line, sizeof(__pyx_k_line), 0, 0, 1, 1},
  {0, __pyx_k_lines, sizeof(__pyx_k_lines), 0, 0, 1, 1},
  {0, __pyx_k_ln, sizeof(__pyx_k_ln), 0, 0, 1, 1},
  {0, __pyx_k_log, sizeof(__pyx_k_log), 0, 0, 1, 1},
  {0, __pyx_k_log_with_clock, sizeof(__pyx_k_log_with_clock), 0, 0, 1, 1},
  {0, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {0, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {0, __pyx_k_logging_options, sizeof(__pyx_k_logging_options), 0, 0, 1, 1},
  {0, __pyx_k_logspace, sizeof(__pyx_k_logspace), 0, 0, 1, 1},
  {0, __pyx_k_lvl_buy, sizeof(__pyx_k_lvl_buy), 0, 0, 1, 1},
  {0, __pyx_k_lvl_sell, sizeof(__pyx_k_lvl_sell), 0, 0, 1, 1},
  {0, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {0, __pyx_k_map_df_to_str, sizeof(__pyx_k_map_df_to_str), 0, 0, 1, 1},
  {0, __pyx_k_market, sizeof(__pyx_k_market), 0, 0, 1, 1},
  {0, __pyx_k_market_books, sizeof(__pyx_k_market_books), 0, 0, 1, 1},
  {0, __pyx_k_market_info, sizeof(__pyx_k_market_info), 0, 0, 1, 1},
  {0, __pyx_k_market_info_to_active_orders, sizeof(__pyx_k_market_info_to_active_orders), 0, 0, 1, 1},
  {0, __pyx_k_market_pair_to_active_orders, sizeof(__pyx_k_market_pair_to_active_orders), 0, 0, 1, 1},
  {0, __pyx_k_market_status_data_frame, sizeof(__pyx_k_market_status_data_frame), 0, 0, 1, 1},
  {0, __pyx_k_market_trading_pair_tuples, sizeof(__pyx_k_market_trading_pair_tuples), 0, 0, 1, 1},
  {0, __pyx_k_markets_columns, sizeof(__pyx_k_markets_columns), 0, 0, 1, 1},
  {0, __pyx_k_markets_data, sizeof(__pyx_k_markets_data), 0, 0, 1, 1},
  {0, __pyx_k_markets_df, sizeof(__pyx_k_markets_df), 0, 0, 1, 1},
  {0, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {0, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {0, __pyx_k_max_order_age, sizeof(__pyx_k_max_order_age), 0, 0, 1, 1},
  {0, __pyx_k_max_spread, sizeof(__pyx_k_max_spread), 0, 0, 1, 1},
  {0, __pyx_k_max_spread, sizeof(__pyx_k_max_spread), 0, 1, 0, 1},
  {0, __pyx_k_mid_price, sizeof(__pyx_k_mid_price), 0, 0, 1, 1},
  {0, __pyx_k_mid_price, sizeof(__pyx_k_mid_price), 0, 1, 0, 1},
  {0, __pyx_k_mid_price_std_dev, sizeof(__pyx_k_mid_price_std_dev), 0, 1, 0, 0},
  {0, __pyx_k_min_spread, sizeof(__pyx_k_min_spread), 0, 0, 1, 1},
  {0, __pyx_k_min_spread, sizeof(__pyx_k_min_spread), 0, 1, 0, 1},
  {0, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {0, __pyx_k_msg, sizeof(__pyx_k_msg), 0, 0, 1, 1},
  {0, __pyx_k_n_a, sizeof(__pyx_k_n_a), 0, 1, 0, 0},
  {0, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {0, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {0, __pyx_k_nan, sizeof(__pyx_k_nan), 0, 0, 1, 1},
  {0, __pyx_k_nan, sizeof(__pyx_k_nan), 0, 1, 0, 1},
  {0, __pyx_k_network_status, sizeof(__pyx_k_network_status), 0, 0, 1, 1},
  {0, __pyx_k_network_warning, sizeof(__pyx_k_network_warning), 0, 0, 1, 1},
  {0, __pyx_k_new_ask, sizeof(__pyx_k_new_ask), 0, 0, 1, 1},
  {0, __pyx_k_new_bid, sizeof(__pyx_k_new_bid), 0, 0, 1, 1},
  {0, __pyx_k_no_sells, sizeof(__pyx_k_no_sells), 0, 0, 1, 1},
  {0, __pyx_k_non_hanging, sizeof(__pyx_k_non_hanging), 0, 0, 1, 1},
  {0, __pyx_k_normalize, sizeof(__pyx_k_normalize), 0, 0, 1, 1},
  {0, __pyx_k_notify_hb_app, sizeof(__pyx_k_notify_hb_app), 0, 0, 1, 1},
  {0, __pyx_k_notify_hb_app_with_timestamp, sizeof(__pyx_k_notify_hb_app_with_timestamp), 0, 0, 1, 1},
  {0, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {0, __pyx_k_num, sizeof(__pyx_k_num), 0, 0, 1, 1},
  {0, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {0, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {0, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {0, __pyx_k_o, sizeof(__pyx_k_o), 0, 0, 1, 1},
  {0, __pyx_k_optimal_ask, sizeof(__pyx_k_optimal_ask), 0, 1, 0, 1},
  {0, __pyx_k_optimal_ask_spread, sizeof(__pyx_k_optimal_ask_spread), 0, 0, 1, 1},
  {0, __pyx_k_optimal_ask_to_mid, sizeof(__pyx_k_optimal_ask_to_mid), 0, 1, 0, 0},
  {0, __pyx_k_optimal_bid, sizeof(__pyx_k_optimal_bid), 0, 1, 0, 1},
  {0, __pyx_k_optimal_bid_spread, sizeof(__pyx_k_optimal_bid_spread), 0, 0, 1, 1},
  {0, __pyx_k_optimal_bid_to_mid, sizeof(__pyx_k_optimal_bid_to_mid), 0, 1, 0, 0},
  {0, __pyx_k_optimal_spread, sizeof(__pyx_k_optimal_spread), 0, 1, 0, 1},
  {0, __pyx_k_order, sizeof(__pyx_k_order), 0, 1, 0, 0},
  {0, __pyx_k_order_2, sizeof(__pyx_k_order_2), 0, 0, 1, 1},
  {0, __pyx_k_order_age, sizeof(__pyx_k_order_age), 0, 0, 1, 1},
  {0, __pyx_k_order_amount, sizeof(__pyx_k_order_amount), 0, 0, 1, 1},
  {0, __pyx_k_order_amount_shape_factor, sizeof(__pyx_k_order_amount_shape_factor), 0, 0, 1, 1},
  {0, __pyx_k_order_book_depth_factor, sizeof(__pyx_k_order_book_depth_factor), 0, 0, 1, 1},
  {0, __pyx_k_order_book_depth_factor_2, sizeof(__pyx_k_order_book_depth_factor_2), 0, 1, 0, 0},
  {0, __pyx_k_order_id, sizeof(__pyx_k_order_id), 0, 0, 1, 1},
  {0, __pyx_k_order_levels, sizeof(__pyx_k_order_levels), 0, 0, 1, 1},
  {0, __pyx_k_order_optimization_enabled, sizeof(__pyx_k_order_optimization_enabled), 0, 0, 1, 1},
  {0, __pyx_k_order_override, sizeof(__pyx_k_order_override), 0, 0, 1, 1},
  {0, __pyx_k_order_refresh_time, sizeof(__pyx_k_order_refresh_time), 0, 0, 1, 1},
  {0, __pyx_k_order_refresh_tolerance_pct, sizeof(__pyx_k_order_refresh_tolerance_pct), 0, 0, 1, 1},
  {0, __pyx_k_orders, sizeof(__pyx_k_orders), 0, 0, 1, 1},
  {0, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {0, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {0, __pyx_k_pandas, sizeof(__pyx_k_pandas), 0, 0, 1, 1},
  {0, __pyx_k_parameters_based_on_spread, sizeof(__pyx_k_parameters_based_on_spread), 0, 0, 1, 1},
  {0, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {0, __pyx_k_pd, sizeof(__pyx_k_pd), 0, 0, 1, 1},
  {0, __pyx_k_pd_DataFrame, sizeof(__pyx_k_pd_DataFrame), 0, 0, 1, 0},
  {0, __pyx_k_percent, sizeof(__pyx_k_percent), 0, 0, 1, 1},
  {0, __pyx_k_pmm_logger, sizeof(__pyx_k_pmm_logger), 0, 0, 1, 1},
  {0, __pyx_k_price, sizeof(__pyx_k_price), 0, 0, 1, 1},
  {0, __pyx_k_process_tick, sizeof(__pyx_k_process_tick), 0, 0, 1, 1},
  {0, __pyx_k_proposal, sizeof(__pyx_k_proposal), 0, 0, 1, 1},
  {0, __pyx_k_proposal_prices, sizeof(__pyx_k_proposal_prices), 0, 0, 1, 1},
  {0, __pyx_k_pure_mm_assets_df, sizeof(__pyx_k_pure_mm_assets_df), 0, 0, 1, 1},
  {0, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {0, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {0, __pyx_k_q, sizeof(__pyx_k_q), 0, 1, 0, 0},
  {0, __pyx_k_quantity, sizeof(__pyx_k_quantity), 0, 0, 1, 1},
  {0, __pyx_k_quote_asset, sizeof(__pyx_k_quote_asset), 0, 0, 1, 1},
  {0, __pyx_k_quote_balance, sizeof(__pyx_k_quote_balance), 0, 0, 1, 1},
  {0, __pyx_k_quote_currency, sizeof(__pyx_k_quote_currency), 0, 0, 1, 1},
  {0, __pyx_k_quote_ratio, sizeof(__pyx_k_quote_ratio), 0, 0, 1, 1},
  {0, __pyx_k_radar_relay, sizeof(__pyx_k_radar_relay), 0, 1, 0, 1},
  {0, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {0, __pyx_k_ready, sizeof(__pyx_k_ready), 0, 0, 1, 1},
  {0, __pyx_k_recalculate_parameters, sizeof(__pyx_k_recalculate_parameters), 0, 0, 1, 1},
  {0, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {0, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {0, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {0, __pyx_k_ref_price, sizeof(__pyx_k_ref_price), 0, 0, 1, 1},
  {0, __pyx_k_reference_price, sizeof(__pyx_k_reference_price), 0, 0, 1, 1},
  {0, __pyx_k_regex, sizeof(__pyx_k_regex), 0, 0, 1, 1},
  {0, __pyx_k_register_events, sizeof(__pyx_k_register_events), 0, 0, 1, 1},
  {0, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
  {0, __pyx_k_reserved_price, sizeof(__pyx_k_reserved_price), 0, 1, 0, 1},
  {0, __pyx_k_result_price, sizeof(__pyx_k_result_price), 0, 0, 1, 1},
  {0, __pyx_k_return, sizeof(__pyx_k_return), 0, 0, 1, 1},
  {0, __pyx_k_reverse, sizeof(__pyx_k_reverse), 0, 0, 1, 1},
  {0, __pyx_k_risk_factor, sizeof(__pyx_k_risk_factor), 0, 0, 1, 1},
  {0, __pyx_k_risk_factor_2, sizeof(__pyx_k_risk_factor_2), 0, 1, 0, 0},
  {0, __pyx_k_round, sizeof(__pyx_k_round), 0, 0, 1, 1},
  {0, __pyx_k_s, sizeof(__pyx_k_s), 0, 1, 0, 1},
  {0, __pyx_k_s_decimal_neg_one, sizeof(__pyx_k_s_decimal_neg_one), 0, 0, 1, 1},
  {0, __pyx_k_s_decimal_one, sizeof(__pyx_k_s_decimal_one), 0, 0, 1, 1},
  {0, __pyx_k_s_decimal_zero, sizeof(__pyx_k_s_decimal_zero), 0, 0, 1, 1},
  {0, __pyx_k_seconds, sizeof(__pyx_k_seconds), 0, 0, 1, 1},
  {0, __pyx_k_seconds_to_start_trading, sizeof(__pyx_k_seconds_to_start_trading), 0, 1, 0, 0},
  {0, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {0, __pyx_k_self__events_cannot_be_converted, sizeof(__pyx_k_self__events_cannot_be_converted), 0, 0, 1, 0},
  {0, __pyx_k_sell, sizeof(__pyx_k_sell), 0, 1, 0, 1},
  {0, __pyx_k_sell_order, sizeof(__pyx_k_sell_order), 0, 0, 1, 1},
  {0, __pyx_k_sells, sizeof(__pyx_k_sells), 0, 0, 1, 1},
  {0, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {0, __pyx_k_set_timers, sizeof(__pyx_k_set_timers), 0, 0, 1, 1},
  {0, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {0, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {0, __pyx_k_should_wait_order_cancel_confirm, sizeof(__pyx_k_should_wait_order_cancel_confirm), 0, 0, 1, 1},
  {0, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {0, __pyx_k_sort, sizeof(__pyx_k_sort), 0, 0, 1, 1},
  {0, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {0, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {0, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {0, __pyx_k_spread, sizeof(__pyx_k_spread), 0, 0, 1, 1},
  {0, __pyx_k_spread, sizeof(__pyx_k_spread), 0, 1, 0, 1},
  {0, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {0, __pyx_k_status_report_interval, sizeof(__pyx_k_status_report_interval), 0, 0, 1, 1},
  {0, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {0, __pyx_k_strftime, sizeof(__pyx_k_strftime), 0, 0, 1, 1},
  {0, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {0, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {0, __pyx_k_target_inv, sizeof(__pyx_k_target_inv), 0, 1, 0, 1},
  {0, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {0, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {0, __pyx_k_time_left_fraction, sizeof(__pyx_k_time_left_fraction), 0, 1, 0, 1},
  {0, __pyx_k_time_until_end_of_trading_cycle, sizeof(__pyx_k_time_until_end_of_trading_cycle), 0, 1, 0, 0},
  {0, __pyx_k_timedelta, sizeof(__pyx_k_timedelta), 0, 0, 1, 1},
  {0, __pyx_k_timestamp, sizeof(__pyx_k_timestamp), 0, 0, 1, 1},
  {0, __pyx_k_to_create_orders, sizeof(__pyx_k_to_create_orders), 0, 0, 1, 1},
  {0, __pyx_k_to_csv, sizeof(__pyx_k_to_csv), 0, 0, 1, 1},
  {0, __pyx_k_to_show_current_pct, sizeof(__pyx_k_to_show_current_pct), 0, 0, 1, 1},
  {0, __pyx_k_to_string, sizeof(__pyx_k_to_string), 0, 0, 1, 1},
  {0, __pyx_k_total_in_quote, sizeof(__pyx_k_total_in_quote), 0, 0, 1, 1},
  {0, __pyx_k_trade_type, sizeof(__pyx_k_trade_type), 0, 0, 1, 1},
  {0, __pyx_k_trading_pair, sizeof(__pyx_k_trading_pair), 0, 0, 1, 1},
  {0, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {0, __pyx_k_unit, sizeof(__pyx_k_unit), 0, 0, 1, 1},
  {0, __pyx_k_unlink, sizeof(__pyx_k_unlink), 0, 0, 1, 1},
  {0, __pyx_k_unregister_events, sizeof(__pyx_k_unregister_events), 0, 0, 1, 1},
  {0, __pyx_k_update_strategy_orders_with_equi, sizeof(__pyx_k_update_strategy_orders_with_equi), 0, 0, 1, 1},
  {0, __pyx_k_upper, sizeof(__pyx_k_upper), 0, 0, 1, 1},
  {0, __pyx_k_use_coordinator, sizeof(__pyx_k_use_coordinator), 0, 0, 1, 1},
  {0, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {0, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {0, __pyx_k_vol, sizeof(__pyx_k_vol), 0, 1, 0, 0},
  {0, __pyx_k_vol_2, sizeof(__pyx_k_vol_2), 0, 0, 1, 1},
  {0, __pyx_k_vol_to_spread_multiplier, sizeof(__pyx_k_vol_to_spread_multiplier), 0, 0, 1, 1},
  {0, __pyx_k_vol_to_spread_multiplier, sizeof(__pyx_k_vol_to_spread_multiplier), 0, 1, 0, 1},
  {0, __pyx_k_volatility, sizeof(__pyx_k_volatility), 0, 1, 0, 0},
  {0, __pyx_k_volatility_buffer_size, sizeof(__pyx_k_volatility_buffer_size), 0, 0, 1, 1},
  {0, __pyx_k_volatility_diff_from_last_parame, sizeof(__pyx_k_volatility_diff_from_last_parame), 0, 0, 1, 1},
  {0, __pyx_k_volatility_pct, sizeof(__pyx_k_volatility_pct), 0, 0, 1, 1},
  {0, __pyx_k_volatility_sensibility, sizeof(__pyx_k_volatility_sensibility), 0, 0, 1, 1},
  {0, __pyx_k_warning, sizeof(__pyx_k_warning), 0, 0, 1, 1},
  {0, __pyx_k_warning_lines, sizeof(__pyx_k_warning_lines), 0, 0, 1, 1},
  {0, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {0, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  #else
  {&__pyx_kp_u_0_005, __pyx_k_0_005, sizeof(__pyx_k_0_005), 0, 1, 0, 0},
  {&__pyx_kp_u_0_1, __pyx_k_0_1, sizeof(__pyx_k_0_1), 0, 1, 0, 0},
  {&__pyx_kp_u_0_15, __pyx_k_0_15, sizeof(__pyx_k_0_15), 0, 1, 0, 0},
  {&__pyx_kp_u_0_2, __pyx_k_0_2, sizeof(__pyx_k_0_2), 0, 1, 0, 0},
  {&__pyx_kp_u_0_5, __pyx_k_0_5, sizeof(__pyx_k_0_5), 0, 1, 0, 0},
  {&__pyx_kp_u_0x_active_cancels, __pyx_k_0x_active_cancels, sizeof(__pyx_k_0x_active_cancels), 0, 1, 0, 0},
  {&__pyx_kp_u_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 1, 0, 0},
  {&__pyx_kp_u_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 1, 0, 0},
  {&__pyx_kp_u_100, __pyx_k_100, sizeof(__pyx_k_100), 0, 1, 0, 0},
  {&__pyx_kp_u_1_2, __pyx_k_1_2, sizeof(__pyx_k_1_2), 0, 1, 0, 0},
  {&__pyx_kp_u_1_3, __pyx_k_1_3, sizeof(__pyx_k_1_3), 0, 1, 0, 0},
  {&__pyx_kp_u_1e100, __pyx_k_1e100, sizeof(__pyx_k_1e100), 0, 1, 0, 0},
  {&__pyx_kp_u_1e5, __pyx_k_1e5, sizeof(__pyx_k_1e5), 0, 1, 0, 0},
  {&__pyx_kp_u_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 1, 0, 0},
  {&__pyx_kp_u_2_2, __pyx_k_2_2, sizeof(__pyx_k_2_2), 0, 1, 0, 0},
  {&__pyx_kp_u_3f, __pyx_k_3f, sizeof(__pyx_k_3f), 0, 1, 0, 0},
  {&__pyx_kp_u_4f, __pyx_k_4f, sizeof(__pyx_k_4f), 0, 1, 0, 0},
  {&__pyx_kp_u_5E, __pyx_k_5E, sizeof(__pyx_k_5E), 0, 1, 0, 0},
  {&__pyx_n_u_Age, __pyx_k_Age, sizeof(__pyx_k_Age), 0, 1, 0, 1},
  {&__pyx_kp_u_Amount_Adj, __pyx_k_Amount_Adj, sizeof(__pyx_k_Amount_Adj), 0, 1, 0, 0},
  {&__pyx_kp_u_Amount_Orig, __pyx_k_Amount_Orig, sizeof(__pyx_k_Amount_Orig), 0, 1, 0, 0},
  {&__pyx_kp_u_Assets, __pyx_k_Assets, sizeof(__pyx_k_Assets), 0, 1, 0, 0},
  {&__pyx_kp_u_Available_Balance, __pyx_k_Available_Balance, sizeof(__pyx_k_Available_Balance), 0, 1, 0, 0},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy, __pyx_k_AvellanedaMarketMakingStrategy, sizeof(__pyx_k_AvellanedaMarketMakingStrategy), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_2, __pyx_k_AvellanedaMarketMakingStrategy_2, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_2), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_3, __pyx_k_AvellanedaMarketMakingStrategy_3, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_3), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_4, __pyx_k_AvellanedaMarketMakingStrategy_4, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_4), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_5, __pyx_k_AvellanedaMarketMakingStrategy_5, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_5), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_a, __pyx_k_AvellanedaMarketMakingStrategy_a, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_a), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_a_2, __pyx_k_AvellanedaMarketMakingStrategy_a_2, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_a_2), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_a_3, __pyx_k_AvellanedaMarketMakingStrategy_a_3, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_a_3), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_a_4, __pyx_k_AvellanedaMarketMakingStrategy_a_4, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_a_4), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_a_5, __pyx_k_AvellanedaMarketMakingStrategy_a_5, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_a_5), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_a_6, __pyx_k_AvellanedaMarketMakingStrategy_a_6, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_a_6), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_a_7, __pyx_k_AvellanedaMarketMakingStrategy_a_7, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_a_7), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_a_8, __pyx_k_AvellanedaMarketMakingStrategy_a_8, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_a_8), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_c, __pyx_k_AvellanedaMarketMakingStrategy_c, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_c_10, __pyx_k_AvellanedaMarketMakingStrategy_c_10, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_10), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_c_11, __pyx_k_AvellanedaMarketMakingStrategy_c_11, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_11), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_c_12, __pyx_k_AvellanedaMarketMakingStrategy_c_12, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_12), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_c_2, __pyx_k_AvellanedaMarketMakingStrategy_c_2, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_2), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_c_3, __pyx_k_AvellanedaMarketMakingStrategy_c_3, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_3), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_c_4, __pyx_k_AvellanedaMarketMakingStrategy_c_4, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_4), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_c_5, __pyx_k_AvellanedaMarketMakingStrategy_c_5, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_5), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_c_6, __pyx_k_AvellanedaMarketMakingStrategy_c_6, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_6), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_c_7, __pyx_k_AvellanedaMarketMakingStrategy_c_7, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_7), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_c_8, __pyx_k_AvellanedaMarketMakingStrategy_c_8, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_8), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_c_9, __pyx_k_AvellanedaMarketMakingStrategy_c_9, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_c_9), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_d, __pyx_k_AvellanedaMarketMakingStrategy_d, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_d), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_e, __pyx_k_AvellanedaMarketMakingStrategy_e, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_e), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_f, __pyx_k_AvellanedaMarketMakingStrategy_f, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_f), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_g, __pyx_k_AvellanedaMarketMakingStrategy_g, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_g), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_g_2, __pyx_k_AvellanedaMarketMakingStrategy_g_2, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_g_2), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_g_3, __pyx_k_AvellanedaMarketMakingStrategy_g_3, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_g_3), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_g_4, __pyx_k_AvellanedaMarketMakingStrategy_g_4, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_g_4), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_g_5, __pyx_k_AvellanedaMarketMakingStrategy_g_5, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_g_5), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_g_6, __pyx_k_AvellanedaMarketMakingStrategy_g_6, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_g_6), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_i, __pyx_k_AvellanedaMarketMakingStrategy_i, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_i), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_i_2, __pyx_k_AvellanedaMarketMakingStrategy_i_2, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_i_2), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_i_3, __pyx_k_AvellanedaMarketMakingStrategy_i_3, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_i_3), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_l, __pyx_k_AvellanedaMarketMakingStrategy_l, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_l), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_m, __pyx_k_AvellanedaMarketMakingStrategy_m, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_m), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_n, __pyx_k_AvellanedaMarketMakingStrategy_n, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_n), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_p, __pyx_k_AvellanedaMarketMakingStrategy_p, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_p), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_r, __pyx_k_AvellanedaMarketMakingStrategy_r, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_r), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_s, __pyx_k_AvellanedaMarketMakingStrategy_s, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_s), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_s_2, __pyx_k_AvellanedaMarketMakingStrategy_s_2, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_s_2), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_t, __pyx_k_AvellanedaMarketMakingStrategy_t, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_t), 0, 0, 1, 1},
  {&__pyx_n_s_AvellanedaMarketMakingStrategy_v, __pyx_k_AvellanedaMarketMakingStrategy_v, sizeof(__pyx_k_AvellanedaMarketMakingStrategy_v), 0, 0, 1, 1},
  {&__pyx_n_s_BUY, __pyx_k_BUY, sizeof(__pyx_k_BUY), 0, 0, 1, 1},
  {&__pyx_kp_u_Best_Ask, __pyx_k_Best_Ask, sizeof(__pyx_k_Best_Ask), 0, 1, 0, 0},
  {&__pyx_kp_u_Best_Bid, __pyx_k_Best_Bid, sizeof(__pyx_k_Best_Bid), 0, 1, 0, 0},
  {&__pyx_n_s_CONNECTED, __pyx_k_CONNECTED, sizeof(__pyx_k_CONNECTED), 0, 0, 1, 1},
  {&__pyx_kp_u_Calculating_volatility, __pyx_k_Calculating_volatility, sizeof(__pyx_k_Calculating_volatility), 0, 1, 0, 0},
  {&__pyx_n_s_Clock, __pyx_k_Clock, sizeof(__pyx_k_Clock), 0, 0, 1, 1},
  {&__pyx_n_s_CreatedPairOfOrders, __pyx_k_CreatedPairOfOrders, sizeof(__pyx_k_CreatedPairOfOrders), 0, 0, 1, 1},
  {&__pyx_kp_u_Creating, __pyx_k_Creating, sizeof(__pyx_k_Creating), 0, 1, 0, 0},
  {&__pyx_kp_u_Current, __pyx_k_Current, sizeof(__pyx_k_Current), 0, 1, 0, 0},
  {&__pyx_kp_u_Current_Value, __pyx_k_Current_Value, sizeof(__pyx_k_Current_Value), 0, 1, 0, 0},
  {&__pyx_n_s_DataFrame, __pyx_k_DataFrame, sizeof(__pyx_k_DataFrame), 0, 0, 1, 1},
  {&__pyx_n_s_Decimal, __pyx_k_Decimal, sizeof(__pyx_k_Decimal), 0, 0, 1, 1},
  {&__pyx_n_s_Dict, __pyx_k_Dict, sizeof(__pyx_k_Dict), 0, 0, 1, 1},
  {&__pyx_kp_s_Dict_str_List_str, __pyx_k_Dict_str_List_str, sizeof(__pyx_k_Dict_str_List_str), 0, 0, 1, 0},
  {&__pyx_n_u_Exchange, __pyx_k_Exchange, sizeof(__pyx_k_Exchange), 0, 1, 0, 1},
  {&__pyx_n_s_ExchangeBase, __pyx_k_ExchangeBase, sizeof(__pyx_k_ExchangeBase), 0, 0, 1, 1},
  {&__pyx_n_s_FileNotFoundError, __pyx_k_FileNotFoundError, sizeof(__pyx_k_FileNotFoundError), 0, 0, 1, 1},
  {&__pyx_kp_u_H_M_S, __pyx_k_H_M_S, sizeof(__pyx_k_H_M_S), 0, 1, 0, 0},
  {&__pyx_n_s_HangingOrdersTracker, __pyx_k_HangingOrdersTracker, sizeof(__pyx_k_HangingOrdersTracker), 0, 0, 1, 1},
  {&__pyx_n_s_INFO, __pyx_k_INFO, sizeof(__pyx_k_INFO), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_n_u_Inf, __pyx_k_Inf, sizeof(__pyx_k_Inf), 0, 1, 0, 1},
  {&__pyx_n_s_InstantVolatilityIndicator, __pyx_k_InstantVolatilityIndicator, sizeof(__pyx_k_InstantVolatilityIndicator), 0, 0, 1, 1},
  {&__pyx_n_s_LIMIT, __pyx_k_LIMIT, sizeof(__pyx_k_LIMIT), 0, 0, 1, 1},
  {&__pyx_n_u_Level, __pyx_k_Level, sizeof(__pyx_k_Level), 0, 1, 0, 1},
  {&__pyx_n_s_LimitOrder, __pyx_k_LimitOrder, sizeof(__pyx_k_LimitOrder), 0, 0, 1, 1},
  {&__pyx_n_s_List, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {&__pyx_kp_s_List_Decimal, __pyx_k_List_Decimal, sizeof(__pyx_k_List_Decimal), 0, 0, 1, 0},
  {&__pyx_kp_s_List_LimitOrder, __pyx_k_List_LimitOrder, sizeof(__pyx_k_List_LimitOrder), 0, 0, 1, 0},
  {&__pyx_kp_s_List_MarketTradingPairTuple, __pyx_k_List_MarketTradingPairTuple, sizeof(__pyx_k_List_MarketTradingPairTuple), 0, 0, 1, 0},
  {&__pyx_kp_u_Maker, __pyx_k_Maker, sizeof(__pyx_k_Maker), 0, 1, 0, 0},
  {&__pyx_kp_u_Maker_2, __pyx_k_Maker_2, sizeof(__pyx_k_Maker_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Maker_buy_order_of, __pyx_k_Maker_buy_order_of, sizeof(__pyx_k_Maker_buy_order_of), 0, 1, 0, 0},
  {&__pyx_kp_u_Maker_sell_order_of, __pyx_k_Maker_sell_order_of, sizeof(__pyx_k_Maker_sell_order_of), 0, 1, 0, 0},
  {&__pyx_n_u_Market, __pyx_k_Market, sizeof(__pyx_k_Market), 0, 1, 0, 1},
  {&__pyx_n_s_MarketTradingPairTuple, __pyx_k_MarketTradingPairTuple, sizeof(__pyx_k_MarketTradingPairTuple), 0, 0, 1, 1},
  {&__pyx_kp_u_Market_connectors_are_not_ready, __pyx_k_Market_connectors_are_not_ready, sizeof(__pyx_k_Market_connectors_are_not_ready), 0, 1, 0, 0},
  {&__pyx_kp_u_Markets, __pyx_k_Markets, sizeof(__pyx_k_Markets), 0, 1, 0, 0},
  {&__pyx_kp_u_Markets_are_not_ready_No_market, __pyx_k_Markets_are_not_ready_No_market, sizeof(__pyx_k_Markets_are_not_ready_No_market), 0, 1, 0, 0},
  {&__pyx_n_u_MidPrice, __pyx_k_MidPrice, sizeof(__pyx_k_MidPrice), 0, 1, 0, 1},
  {&__pyx_n_s_NaN, __pyx_k_NaN, sizeof(__pyx_k_NaN), 0, 0, 1, 1},
  {&__pyx_n_s_NetworkStatus, __pyx_k_NetworkStatus, sizeof(__pyx_k_NetworkStatus), 0, 0, 1, 1},
  {&__pyx_kp_u_No_active_maker_orders, __pyx_k_No_active_maker_orders, sizeof(__pyx_k_No_active_maker_orders), 0, 1, 0, 0},
  {&__pyx_kp_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {&__pyx_n_s_OPTION_LOG_ALL, __pyx_k_OPTION_LOG_ALL, sizeof(__pyx_k_OPTION_LOG_ALL), 0, 0, 1, 1},
  {&__pyx_n_s_OPTION_LOG_CREATE_ORDER, __pyx_k_OPTION_LOG_CREATE_ORDER, sizeof(__pyx_k_OPTION_LOG_CREATE_ORDER), 0, 0, 1, 1},
  {&__pyx_n_s_OPTION_LOG_MAKER_ORDER_FILLED, __pyx_k_OPTION_LOG_MAKER_ORDER_FILLED, sizeof(__pyx_k_OPTION_LOG_MAKER_ORDER_FILLED), 0, 0, 1, 1},
  {&__pyx_n_s_OPTION_LOG_STATUS_REPORT, __pyx_k_OPTION_LOG_STATUS_REPORT, sizeof(__pyx_k_OPTION_LOG_STATUS_REPORT), 0, 0, 1, 1},
  {&__pyx_n_s_OrderType, __pyx_k_OrderType, sizeof(__pyx_k_OrderType), 0, 0, 1, 1},
  {&__pyx_kp_u_Orders, __pyx_k_Orders, sizeof(__pyx_k_Orders), 0, 1, 0, 0},
  {&__pyx_n_u_Price, __pyx_k_Price, sizeof(__pyx_k_Price), 0, 1, 0, 1},
  {&__pyx_n_s_PriceSize, __pyx_k_PriceSize, sizeof(__pyx_k_PriceSize), 0, 0, 1, 1},
  {&__pyx_n_s_Proposal, __pyx_k_Proposal, sizeof(__pyx_k_Proposal), 0, 0, 1, 1},
  {&__pyx_n_s_RADAR_RELAY_TYPE_EXCHANGES, __pyx_k_RADAR_RELAY_TYPE_EXCHANGES, sizeof(__pyx_k_RADAR_RELAY_TYPE_EXCHANGES), 0, 0, 1, 1},
  {&__pyx_kp_u_Recycling_algorithm_time_left_an, __pyx_k_Recycling_algorithm_time_left_an, sizeof(__pyx_k_Recycling_algorithm_time_left_an), 0, 1, 0, 0},
  {&__pyx_kp_u_Reserved_Price, __pyx_k_Reserved_Price, sizeof(__pyx_k_Reserved_Price), 0, 1, 0, 0},
  {&__pyx_n_s_SELL, __pyx_k_SELL, sizeof(__pyx_k_SELL), 0, 0, 1, 1},
  {&__pyx_n_u_Spread, __pyx_k_Spread, sizeof(__pyx_k_Spread), 0, 1, 0, 1},
  {&__pyx_n_s_StrategyBase, __pyx_k_StrategyBase, sizeof(__pyx_k_StrategyBase), 0, 0, 1, 1},
  {&__pyx_kp_u_Strategy_parameters, __pyx_k_Strategy_parameters, sizeof(__pyx_k_Strategy_parameters), 0, 1, 0, 0},
  {&__pyx_n_s_Timestamp, __pyx_k_Timestamp, sizeof(__pyx_k_Timestamp), 0, 0, 1, 1},
  {&__pyx_kp_u_Total_Balance, __pyx_k_Total_Balance, sizeof(__pyx_k_Total_Balance), 0, 1, 0, 0},
  {&__pyx_n_s_TradeType, __pyx_k_TradeType, sizeof(__pyx_k_TradeType), 0, 0, 1, 1},
  {&__pyx_n_s_Tuple, __pyx_k_Tuple, sizeof(__pyx_k_Tuple), 0, 0, 1, 1},
  {&__pyx_kp_s_Tuple_List_Proposal_List_Proposa, __pyx_k_Tuple_List_Proposal_List_Proposa, sizeof(__pyx_k_Tuple_List_Proposal_List_Proposa), 0, 0, 1, 0},
  {&__pyx_n_u_Type, __pyx_k_Type, sizeof(__pyx_k_Type), 0, 1, 0, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_u_WARNINGS, __pyx_k_WARNINGS, sizeof(__pyx_k_WARNINGS), 0, 1, 0, 0},
  {&__pyx_kp_u_WARNING_Some_markets_are_not_con, __pyx_k_WARNING_Some_markets_are_not_con, sizeof(__pyx_k_WARNING_Some_markets_are_not_con), 0, 1, 0, 0},
  {&__pyx_n_s__133, __pyx_k__133, sizeof(__pyx_k__133), 0, 0, 1, 1},
  {&__pyx_kp_u__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 1, 0, 0},
  {&__pyx_kp_u__16, __pyx_k__16, sizeof(__pyx_k__16), 0, 1, 0, 0},
  {&__pyx_kp_u__17, __pyx_k__17, sizeof(__pyx_k__17), 0, 1, 0, 0},
  {&__pyx_kp_u__19, __pyx_k__19, sizeof(__pyx_k__19), 0, 1, 0, 0},
  {&__pyx_kp_u__20, __pyx_k__20, sizeof(__pyx_k__20), 0, 1, 0, 0},
  {&__pyx_kp_u__21, __pyx_k__21, sizeof(__pyx_k__21), 0, 1, 0, 0},
  {&__pyx_kp_u__22, __pyx_k__22, sizeof(__pyx_k__22), 0, 1, 0, 0},
  {&__pyx_kp_u__23, __pyx_k__23, sizeof(__pyx_k__23), 0, 1, 0, 0},
  {&__pyx_kp_u__24, __pyx_k__24, sizeof(__pyx_k__24), 0, 1, 0, 0},
  {&__pyx_kp_u__25, __pyx_k__25, sizeof(__pyx_k__25), 0, 1, 0, 0},
  {&__pyx_kp_u__26, __pyx_k__26, sizeof(__pyx_k__26), 0, 1, 0, 0},
  {&__pyx_kp_u__27, __pyx_k__27, sizeof(__pyx_k__27), 0, 1, 0, 0},
  {&__pyx_kp_u__28, __pyx_k__28, sizeof(__pyx_k__28), 0, 1, 0, 0},
  {&__pyx_n_s__32, __pyx_k__32, sizeof(__pyx_k__32), 0, 0, 1, 1},
  {&__pyx_n_s__88, __pyx_k__88, sizeof(__pyx_k__88), 0, 0, 1, 1},
  {&__pyx_n_u_a, __pyx_k_a, sizeof(__pyx_k_a), 0, 1, 0, 1},
  {&__pyx_n_s_active_markets, __pyx_k_active_markets, sizeof(__pyx_k_active_markets), 0, 0, 1, 1},
  {&__pyx_n_s_active_non_hanging_orders, __pyx_k_active_non_hanging_orders, sizeof(__pyx_k_active_non_hanging_orders), 0, 0, 1, 1},
  {&__pyx_n_s_active_orders, __pyx_k_active_orders, sizeof(__pyx_k_active_orders), 0, 0, 1, 1},
  {&__pyx_n_s_active_orders_df, __pyx_k_active_orders_df, sizeof(__pyx_k_active_orders_df), 0, 0, 1, 1},
  {&__pyx_n_s_active_orders_df_locals_lambda, __pyx_k_active_orders_df_locals_lambda, sizeof(__pyx_k_active_orders_df_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_add_current_pairs_of_proposal_or, __pyx_k_add_current_pairs_of_proposal_or, sizeof(__pyx_k_add_current_pairs_of_proposal_or), 0, 0, 1, 1},
  {&__pyx_n_s_add_order, __pyx_k_add_order, sizeof(__pyx_k_add_order), 0, 0, 1, 1},
  {&__pyx_n_s_add_sample, __pyx_k_add_sample, sizeof(__pyx_k_add_sample), 0, 0, 1, 1},
  {&__pyx_n_s_add_transaction_costs_to_orders, __pyx_k_add_transaction_costs_to_orders, sizeof(__pyx_k_add_transaction_costs_to_orders), 0, 0, 1, 1},
  {&__pyx_n_s_adjusted_available_balance_for_o, __pyx_k_adjusted_available_balance_for_o, sizeof(__pyx_k_adjusted_available_balance_for_o), 0, 0, 1, 1},
  {&__pyx_n_s_age, __pyx_k_age, sizeof(__pyx_k_age), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_all_markets_ready, __pyx_k_all_markets_ready, sizeof(__pyx_k_all_markets_ready), 0, 0, 1, 1},
  {&__pyx_n_s_all_non_hanging_orders, __pyx_k_all_non_hanging_orders, sizeof(__pyx_k_all_non_hanging_orders), 0, 0, 1, 1},
  {&__pyx_n_s_all_orders, __pyx_k_all_orders, sizeof(__pyx_k_all_orders), 0, 0, 1, 1},
  {&__pyx_n_s_amount, __pyx_k_amount, sizeof(__pyx_k_amount), 0, 0, 1, 1},
  {&__pyx_n_s_amount_orig, __pyx_k_amount_orig, sizeof(__pyx_k_amount_orig), 0, 0, 1, 1},
  {&__pyx_n_s_apply, __pyx_k_apply, sizeof(__pyx_k_apply), 0, 0, 1, 1},
  {&__pyx_n_s_apply_add_transaction_costs, __pyx_k_apply_add_transaction_costs, sizeof(__pyx_k_apply_add_transaction_costs), 0, 0, 1, 1},
  {&__pyx_n_s_apply_budget_constraint, __pyx_k_apply_budget_constraint, sizeof(__pyx_k_apply_budget_constraint), 0, 0, 1, 1},
  {&__pyx_n_s_apply_order_amount_eta_transform, __pyx_k_apply_order_amount_eta_transform, sizeof(__pyx_k_apply_order_amount_eta_transform), 0, 0, 1, 1},
  {&__pyx_n_s_apply_order_optimization, __pyx_k_apply_order_optimization, sizeof(__pyx_k_apply_order_optimization), 0, 0, 1, 1},
  {&__pyx_n_s_apply_order_price_modifiers, __pyx_k_apply_order_price_modifiers, sizeof(__pyx_k_apply_order_price_modifiers), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_kp_u_ask, __pyx_k_ask, sizeof(__pyx_k_ask), 0, 1, 0, 0},
  {&__pyx_n_s_ask_level_spreads, __pyx_k_ask_level_spreads, sizeof(__pyx_k_ask_level_spreads), 0, 0, 1, 1},
  {&__pyx_kp_u_ask_orders_at_Size_Price, __pyx_k_ask_orders_at_Size_Price, sizeof(__pyx_k_ask_orders_at_Size_Price), 0, 1, 0, 0},
  {&__pyx_n_s_ask_price, __pyx_k_ask_price, sizeof(__pyx_k_ask_price), 0, 0, 1, 1},
  {&__pyx_n_s_assets_df, __pyx_k_assets_df, sizeof(__pyx_k_assets_df), 0, 0, 1, 1},
  {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {&__pyx_n_s_available_base_balance, __pyx_k_available_base_balance, sizeof(__pyx_k_available_base_balance), 0, 0, 1, 1},
  {&__pyx_n_s_available_quote_balance, __pyx_k_available_quote_balance, sizeof(__pyx_k_available_quote_balance), 0, 0, 1, 1},
  {&__pyx_n_s_balance_warning, __pyx_k_balance_warning, sizeof(__pyx_k_balance_warning), 0, 0, 1, 1},
  {&__pyx_n_u_bamboo_relay, __pyx_k_bamboo_relay, sizeof(__pyx_k_bamboo_relay), 0, 1, 0, 1},
  {&__pyx_n_s_base, __pyx_k_base, sizeof(__pyx_k_base), 0, 0, 1, 1},
  {&__pyx_n_s_base_asset, __pyx_k_base_asset, sizeof(__pyx_k_base_asset), 0, 0, 1, 1},
  {&__pyx_n_s_base_balance, __pyx_k_base_balance, sizeof(__pyx_k_base_balance), 0, 0, 1, 1},
  {&__pyx_n_s_base_currency, __pyx_k_base_currency, sizeof(__pyx_k_base_currency), 0, 0, 1, 1},
  {&__pyx_n_s_base_ratio, __pyx_k_base_ratio, sizeof(__pyx_k_base_ratio), 0, 0, 1, 1},
  {&__pyx_n_s_base_value, __pyx_k_base_value, sizeof(__pyx_k_base_value), 0, 0, 1, 1},
  {&__pyx_n_s_best_ask, __pyx_k_best_ask, sizeof(__pyx_k_best_ask), 0, 0, 1, 1},
  {&__pyx_n_s_best_bid, __pyx_k_best_bid, sizeof(__pyx_k_best_bid), 0, 0, 1, 1},
  {&__pyx_kp_u_bid, __pyx_k_bid, sizeof(__pyx_k_bid), 0, 1, 0, 0},
  {&__pyx_n_s_bid_level_spreads, __pyx_k_bid_level_spreads, sizeof(__pyx_k_bid_level_spreads), 0, 0, 1, 1},
  {&__pyx_kp_u_bid_orders_at_Size_Price, __pyx_k_bid_orders_at_Size_Price, sizeof(__pyx_k_bid_orders_at_Size_Price), 0, 1, 0, 0},
  {&__pyx_n_s_bid_price, __pyx_k_bid_price, sizeof(__pyx_k_bid_price), 0, 0, 1, 1},
  {&__pyx_n_s_bool, __pyx_k_bool, sizeof(__pyx_k_bool), 0, 0, 1, 1},
  {&__pyx_n_u_buy, __pyx_k_buy, sizeof(__pyx_k_buy), 0, 1, 0, 1},
  {&__pyx_n_s_buys, __pyx_k_buys, sizeof(__pyx_k_buys), 0, 0, 1, 1},
  {&__pyx_n_s_calculate_reserved_price_and_opt, __pyx_k_calculate_reserved_price_and_opt, sizeof(__pyx_k_calculate_reserved_price_and_opt), 0, 0, 1, 1},
  {&__pyx_n_s_calculate_target_inventory, __pyx_k_calculate_target_inventory, sizeof(__pyx_k_calculate_target_inventory), 0, 0, 1, 1},
  {&__pyx_n_s_cancel_active_orders, __pyx_k_cancel_active_orders, sizeof(__pyx_k_cancel_active_orders), 0, 0, 1, 1},
  {&__pyx_n_s_cancel_order, __pyx_k_cancel_order, sizeof(__pyx_k_cancel_order), 0, 0, 1, 1},
  {&__pyx_n_s_candidate_hanging_orders, __pyx_k_candidate_hanging_orders, sizeof(__pyx_k_candidate_hanging_orders), 0, 0, 1, 1},
  {&__pyx_n_s_candidate_hanging_orders_from_pa, __pyx_k_candidate_hanging_orders_from_pa, sizeof(__pyx_k_candidate_hanging_orders_from_pa), 0, 0, 1, 1},
  {&__pyx_n_s_ceil, __pyx_k_ceil, sizeof(__pyx_k_ceil), 0, 0, 1, 1},
  {&__pyx_n_s_class_getitem, __pyx_k_class_getitem, sizeof(__pyx_k_class_getitem), 0, 0, 1, 1},
  {&__pyx_n_s_client_order_id, __pyx_k_client_order_id, sizeof(__pyx_k_client_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_clock, __pyx_k_clock, sizeof(__pyx_k_clock), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_closing_time, __pyx_k_closing_time, sizeof(__pyx_k_closing_time), 0, 0, 1, 1},
  {&__pyx_n_s_cls, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
  {&__pyx_n_s_collect_market_variables, __pyx_k_collect_market_variables, sizeof(__pyx_k_collect_market_variables), 0, 0, 1, 1},
  {&__pyx_n_s_columns, __pyx_k_columns, sizeof(__pyx_k_columns), 0, 0, 1, 1},
  {&__pyx_n_s_create_base_proposal, __pyx_k_create_base_proposal, sizeof(__pyx_k_create_base_proposal), 0, 0, 1, 1},
  {&__pyx_n_s_create_basic_proposal, __pyx_k_create_basic_proposal, sizeof(__pyx_k_create_basic_proposal), 0, 0, 1, 1},
  {&__pyx_n_s_create_proposal_based_on_order_l, __pyx_k_create_proposal_based_on_order_l, sizeof(__pyx_k_create_proposal_based_on_order_l), 0, 0, 1, 1},
  {&__pyx_n_s_create_proposal_based_on_order_o, __pyx_k_create_proposal_based_on_order_o, sizeof(__pyx_k_create_proposal_based_on_order_o), 0, 0, 1, 1},
  {&__pyx_n_s_current_created_pairs_of_orders, __pyx_k_current_created_pairs_of_orders, sizeof(__pyx_k_current_created_pairs_of_orders), 0, 0, 1, 1},
  {&__pyx_n_u_current_inv, __pyx_k_current_inv, sizeof(__pyx_k_current_inv), 0, 1, 0, 1},
  {&__pyx_n_s_current_prices, __pyx_k_current_prices, sizeof(__pyx_k_current_prices), 0, 0, 1, 1},
  {&__pyx_n_s_current_value, __pyx_k_current_value, sizeof(__pyx_k_current_value), 0, 0, 1, 1},
  {&__pyx_n_s_current_vol, __pyx_k_current_vol, sizeof(__pyx_k_current_vol), 0, 0, 1, 1},
  {&__pyx_n_u_current_vol_to_calculation_vol, __pyx_k_current_vol_to_calculation_vol, sizeof(__pyx_k_current_vol_to_calculation_vol), 0, 1, 0, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_datetime, __pyx_k_datetime, sizeof(__pyx_k_datetime), 0, 0, 1, 1},
  {&__pyx_n_s_debug_csv_path, __pyx_k_debug_csv_path, sizeof(__pyx_k_debug_csv_path), 0, 0, 1, 1},
  {&__pyx_n_s_decimal, __pyx_k_decimal, sizeof(__pyx_k_decimal), 0, 0, 1, 1},
  {&__pyx_n_s_df, __pyx_k_df, sizeof(__pyx_k_df), 0, 0, 1, 1},
  {&__pyx_n_s_df_header, __pyx_k_df_header, sizeof(__pyx_k_df_header), 0, 0, 1, 1},
  {&__pyx_n_s_df_lines, __pyx_k_df_lines, sizeof(__pyx_k_df_lines), 0, 0, 1, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
  {&__pyx_n_s_display_name, __pyx_k_display_name, sizeof(__pyx_k_display_name), 0, 0, 1, 1},
  {&__pyx_n_s_dump_debug_variables, __pyx_k_dump_debug_variables, sizeof(__pyx_k_dump_debug_variables), 0, 0, 1, 1},
  {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
  {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_u_eta, __pyx_k_eta, sizeof(__pyx_k_eta), 0, 1, 0, 1},
  {&__pyx_n_s_execute_orders_proposal, __pyx_k_execute_orders_proposal, sizeof(__pyx_k_execute_orders_proposal), 0, 0, 1, 1},
  {&__pyx_n_s_exists, __pyx_k_exists, sizeof(__pyx_k_exists), 0, 0, 1, 1},
  {&__pyx_n_s_exp, __pyx_k_exp, sizeof(__pyx_k_exp), 0, 0, 1, 1},
  {&__pyx_kp_u_filled, __pyx_k_filled, sizeof(__pyx_k_filled), 0, 1, 0, 0},
  {&__pyx_n_s_filled_order_delay, __pyx_k_filled_order_delay, sizeof(__pyx_k_filled_order_delay), 0, 0, 1, 1},
  {&__pyx_n_s_first_col_length, __pyx_k_first_col_length, sizeof(__pyx_k_first_col_length), 0, 0, 1, 1},
  {&__pyx_n_s_float, __pyx_k_float, sizeof(__pyx_k_float), 0, 0, 1, 1},
  {&__pyx_n_s_floor, __pyx_k_floor, sizeof(__pyx_k_floor), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_n_s_format_status, __pyx_k_format_status, sizeof(__pyx_k_format_status), 0, 0, 1, 1},
  {&__pyx_n_s_formatters, __pyx_k_formatters, sizeof(__pyx_k_formatters), 0, 0, 1, 1},
  {&__pyx_n_u_gamma, __pyx_k_gamma, sizeof(__pyx_k_gamma), 0, 1, 0, 1},
  {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_n_s_get_adjusted_available_balance, __pyx_k_get_adjusted_available_balance, sizeof(__pyx_k_get_adjusted_available_balance), 0, 0, 1, 1},
  {&__pyx_n_s_get_available_balance, __pyx_k_get_available_balance, sizeof(__pyx_k_get_available_balance), 0, 0, 1, 1},
  {&__pyx_n_s_get_balance, __pyx_k_get_balance, sizeof(__pyx_k_get_balance), 0, 0, 1, 1},
  {&__pyx_n_s_get_last_price, __pyx_k_get_last_price, sizeof(__pyx_k_get_last_price), 0, 0, 1, 1},
  {&__pyx_n_s_get_limit_orders, __pyx_k_get_limit_orders, sizeof(__pyx_k_get_limit_orders), 0, 0, 1, 1},
  {&__pyx_n_s_get_logspaced_level_spreads, __pyx_k_get_logspaced_level_spreads, sizeof(__pyx_k_get_logspaced_level_spreads), 0, 0, 1, 1},
  {&__pyx_n_s_get_maker_order_type, __pyx_k_get_maker_order_type, sizeof(__pyx_k_get_maker_order_type), 0, 0, 1, 1},
  {&__pyx_n_s_get_mid_price, __pyx_k_get_mid_price, sizeof(__pyx_k_get_mid_price), 0, 0, 1, 1},
  {&__pyx_n_s_get_min_and_max_spread, __pyx_k_get_min_and_max_spread, sizeof(__pyx_k_get_min_and_max_spread), 0, 0, 1, 1},
  {&__pyx_n_s_get_price, __pyx_k_get_price, sizeof(__pyx_k_get_price), 0, 0, 1, 1},
  {&__pyx_n_s_get_price_for_volume, __pyx_k_get_price_for_volume, sizeof(__pyx_k_get_price_for_volume), 0, 0, 1, 1},
  {&__pyx_n_s_get_spread, __pyx_k_get_spread, sizeof(__pyx_k_get_spread), 0, 0, 1, 1},
  {&__pyx_n_s_get_volatility, __pyx_k_get_volatility, sizeof(__pyx_k_get_volatility), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_n_s_global_config_map, __pyx_k_global_config_map, sizeof(__pyx_k_global_config_map), 0, 0, 1, 1},
  {&__pyx_n_u_hang, __pyx_k_hang, sizeof(__pyx_k_hang), 0, 1, 0, 1},
  {&__pyx_n_s_hanging_orders_cancel_pct, __pyx_k_hanging_orders_cancel_pct, sizeof(__pyx_k_hanging_orders_cancel_pct), 0, 0, 1, 1},
  {&__pyx_n_s_hanging_orders_enabled, __pyx_k_hanging_orders_enabled, sizeof(__pyx_k_hanging_orders_enabled), 0, 0, 1, 1},
  {&__pyx_n_s_hanging_orders_tracker, __pyx_k_hanging_orders_tracker, sizeof(__pyx_k_hanging_orders_tracker), 0, 0, 1, 1},
  {&__pyx_kp_u_has_been_completely_filled, __pyx_k_has_been_completely_filled, sizeof(__pyx_k_has_been_completely_filled), 0, 1, 0, 0},
  {&__pyx_n_s_hb_app_notification, __pyx_k_hb_app_notification, sizeof(__pyx_k_hb_app_notification), 0, 0, 1, 1},
  {&__pyx_n_s_header, __pyx_k_header, sizeof(__pyx_k_header), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_client_config_global, __pyx_k_hummingbot_client_config_global, sizeof(__pyx_k_hummingbot_client_config_global), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_ba, __pyx_k_hummingbot_connector_exchange_ba, sizeof(__pyx_k_hummingbot_connector_exchange_ba), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_data_type_limit, __pyx_k_hummingbot_core_data_type_limit, sizeof(__pyx_k_hummingbot_core_data_type_limit), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_event_events, __pyx_k_hummingbot_core_event_events, sizeof(__pyx_k_hummingbot_core_event_events), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_network_iterator, __pyx_k_hummingbot_core_network_iterator, sizeof(__pyx_k_hummingbot_core_network_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_utils, __pyx_k_hummingbot_core_utils, sizeof(__pyx_k_hummingbot_core_utils), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_strategy___utils___tr, __pyx_k_hummingbot_strategy___utils___tr, sizeof(__pyx_k_hummingbot_strategy___utils___tr), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_k_hummingbot_strategy_avellaneda_m, sizeof(__pyx_k_hummingbot_strategy_avellaneda_m), 0, 0, 1, 1},
  {&__pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_k_hummingbot_strategy_avellaneda_m_2, sizeof(__pyx_k_hummingbot_strategy_avellaneda_m_2), 0, 0, 1, 0},
  {&__pyx_n_s_hummingbot_strategy_data_types, __pyx_k_hummingbot_strategy_data_types, sizeof(__pyx_k_hummingbot_strategy_data_types), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_strategy_hanging_orde, __pyx_k_hummingbot_strategy_hanging_orde, sizeof(__pyx_k_hummingbot_strategy_hanging_orde), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_strategy_market_tradi, __pyx_k_hummingbot_strategy_market_tradi, sizeof(__pyx_k_hummingbot_strategy_market_tradi), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_strategy_strategy_bas, __pyx_k_hummingbot_strategy_strategy_bas, sizeof(__pyx_k_hummingbot_strategy_strategy_bas), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_strategy_utils, __pyx_k_hummingbot_strategy_utils, sizeof(__pyx_k_hummingbot_strategy_utils), 0, 0, 1, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_in_flight_cancels, __pyx_k_in_flight_cancels, sizeof(__pyx_k_in_flight_cancels), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {&__pyx_n_s_init_params, __pyx_k_init_params, sizeof(__pyx_k_init_params), 0, 0, 1, 1},
  {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {&__pyx_n_s_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
  {&__pyx_n_s_inventory_risk_aversion, __pyx_k_inventory_risk_aversion, sizeof(__pyx_k_inventory_risk_aversion), 0, 0, 1, 1},
  {&__pyx_n_s_inventory_target_base_pct, __pyx_k_inventory_target_base_pct, sizeof(__pyx_k_inventory_target_base_pct), 0, 0, 1, 1},
  {&__pyx_n_u_inventory_target_pct, __pyx_k_inventory_target_pct, sizeof(__pyx_k_inventory_target_pct), 0, 1, 0, 1},
  {&__pyx_n_s_is_algorithm_ready, __pyx_k_is_algorithm_ready, sizeof(__pyx_k_is_algorithm_ready), 0, 0, 1, 1},
  {&__pyx_n_s_is_buy, __pyx_k_is_buy, sizeof(__pyx_k_is_buy), 0, 0, 1, 1},
  {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {&__pyx_n_s_is_debug, __pyx_k_is_debug, sizeof(__pyx_k_is_debug), 0, 0, 1, 1},
  {&__pyx_kp_u_is_filled, __pyx_k_is_filled, sizeof(__pyx_k_is_filled), 0, 1, 0, 0},
  {&__pyx_n_s_is_hanging_order, __pyx_k_is_hanging_order, sizeof(__pyx_k_is_hanging_order), 0, 0, 1, 1},
  {&__pyx_n_s_is_order_id_in_completed_hanging, __pyx_k_is_order_id_in_completed_hanging, sizeof(__pyx_k_is_order_id_in_completed_hanging), 0, 0, 1, 1},
  {&__pyx_n_s_is_order_id_in_hanging_orders, __pyx_k_is_order_id_in_hanging_orders, sizeof(__pyx_k_is_order_id_in_hanging_orders), 0, 0, 1, 1},
  {&__pyx_n_s_is_potential_hanging_order, __pyx_k_is_potential_hanging_order, sizeof(__pyx_k_is_potential_hanging_order), 0, 0, 1, 1},
  {&__pyx_n_s_is_sampling_buffer_full, __pyx_k_is_sampling_buffer_full, sizeof(__pyx_k_is_sampling_buffer_full), 0, 0, 1, 1},
  {&__pyx_n_s_is_within_tolerance, __pyx_k_is_within_tolerance, sizeof(__pyx_k_is_within_tolerance), 0, 0, 1, 1},
  {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
  {&__pyx_n_s_isnan, __pyx_k_isnan, sizeof(__pyx_k_isnan), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_u_kappa, __pyx_k_kappa, sizeof(__pyx_k_kappa), 0, 1, 0, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_len, __pyx_k_len, sizeof(__pyx_k_len), 0, 0, 1, 1},
  {&__pyx_n_s_level, __pyx_k_level, sizeof(__pyx_k_level), 0, 0, 1, 1},
  {&__pyx_n_s_limit_orders, __pyx_k_limit_orders, sizeof(__pyx_k_limit_orders), 0, 0, 1, 1},
  {&__pyx_n_s_line, __pyx_k_line, sizeof(__pyx_k_line), 0, 0, 1, 1},
  {&__pyx_n_s_lines, __pyx_k_lines, sizeof(__pyx_k_lines), 0, 0, 1, 1},
  {&__pyx_n_s_ln, __pyx_k_ln, sizeof(__pyx_k_ln), 0, 0, 1, 1},
  {&__pyx_n_s_log, __pyx_k_log, sizeof(__pyx_k_log), 0, 0, 1, 1},
  {&__pyx_n_s_log_with_clock, __pyx_k_log_with_clock, sizeof(__pyx_k_log_with_clock), 0, 0, 1, 1},
  {&__pyx_n_s_logger, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_logging_options, __pyx_k_logging_options, sizeof(__pyx_k_logging_options), 0, 0, 1, 1},
  {&__pyx_n_s_logspace, __pyx_k_logspace, sizeof(__pyx_k_logspace), 0, 0, 1, 1},
  {&__pyx_n_s_lvl_buy, __pyx_k_lvl_buy, sizeof(__pyx_k_lvl_buy), 0, 0, 1, 1},
  {&__pyx_n_s_lvl_sell, __pyx_k_lvl_sell, sizeof(__pyx_k_lvl_sell), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_map_df_to_str, __pyx_k_map_df_to_str, sizeof(__pyx_k_map_df_to_str), 0, 0, 1, 1},
  {&__pyx_n_s_market, __pyx_k_market, sizeof(__pyx_k_market), 0, 0, 1, 1},
  {&__pyx_n_s_market_books, __pyx_k_market_books, sizeof(__pyx_k_market_books), 0, 0, 1, 1},
  {&__pyx_n_s_market_info, __pyx_k_market_info, sizeof(__pyx_k_market_info), 0, 0, 1, 1},
  {&__pyx_n_s_market_info_to_active_orders, __pyx_k_market_info_to_active_orders, sizeof(__pyx_k_market_info_to_active_orders), 0, 0, 1, 1},
  {&__pyx_n_s_market_pair_to_active_orders, __pyx_k_market_pair_to_active_orders, sizeof(__pyx_k_market_pair_to_active_orders), 0, 0, 1, 1},
  {&__pyx_n_s_market_status_data_frame, __pyx_k_market_status_data_frame, sizeof(__pyx_k_market_status_data_frame), 0, 0, 1, 1},
  {&__pyx_n_s_market_trading_pair_tuples, __pyx_k_market_trading_pair_tuples, sizeof(__pyx_k_market_trading_pair_tuples), 0, 0, 1, 1},
  {&__pyx_n_s_markets_columns, __pyx_k_markets_columns, sizeof(__pyx_k_markets_columns), 0, 0, 1, 1},
  {&__pyx_n_s_markets_data, __pyx_k_markets_data, sizeof(__pyx_k_markets_data), 0, 0, 1, 1},
  {&__pyx_n_s_markets_df, __pyx_k_markets_df, sizeof(__pyx_k_markets_df), 0, 0, 1, 1},
  {&__pyx_n_s_math, __pyx_k_math, sizeof(__pyx_k_math), 0, 0, 1, 1},
  {&__pyx_n_s_max, __pyx_k_max, sizeof(__pyx_k_max), 0, 0, 1, 1},
  {&__pyx_n_s_max_order_age, __pyx_k_max_order_age, sizeof(__pyx_k_max_order_age), 0, 0, 1, 1},
  {&__pyx_n_s_max_spread, __pyx_k_max_spread, sizeof(__pyx_k_max_spread), 0, 0, 1, 1},
  {&__pyx_n_u_max_spread, __pyx_k_max_spread, sizeof(__pyx_k_max_spread), 0, 1, 0, 1},
  {&__pyx_n_s_mid_price, __pyx_k_mid_price, sizeof(__pyx_k_mid_price), 0, 0, 1, 1},
  {&__pyx_n_u_mid_price, __pyx_k_mid_price, sizeof(__pyx_k_mid_price), 0, 1, 0, 1},
  {&__pyx_kp_u_mid_price_std_dev, __pyx_k_mid_price_std_dev, sizeof(__pyx_k_mid_price_std_dev), 0, 1, 0, 0},
  {&__pyx_n_s_min_spread, __pyx_k_min_spread, sizeof(__pyx_k_min_spread), 0, 0, 1, 1},
  {&__pyx_n_u_min_spread, __pyx_k_min_spread, sizeof(__pyx_k_min_spread), 0, 1, 0, 1},
  {&__pyx_n_s_mode, __pyx_k_mode, sizeof(__pyx_k_mode), 0, 0, 1, 1},
  {&__pyx_n_s_msg, __pyx_k_msg, sizeof(__pyx_k_msg), 0, 0, 1, 1},
  {&__pyx_kp_u_n_a, __pyx_k_n_a, sizeof(__pyx_k_n_a), 0, 1, 0, 0},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_nan, __pyx_k_nan, sizeof(__pyx_k_nan), 0, 0, 1, 1},
  {&__pyx_n_u_nan, __pyx_k_nan, sizeof(__pyx_k_nan), 0, 1, 0, 1},
  {&__pyx_n_s_network_status, __pyx_k_network_status, sizeof(__pyx_k_network_status), 0, 0, 1, 1},
  {&__pyx_n_s_network_warning, __pyx_k_network_warning, sizeof(__pyx_k_network_warning), 0, 0, 1, 1},
  {&__pyx_n_s_new_ask, __pyx_k_new_ask, sizeof(__pyx_k_new_ask), 0, 0, 1, 1},
  {&__pyx_n_s_new_bid, __pyx_k_new_bid, sizeof(__pyx_k_new_bid), 0, 0, 1, 1},
  {&__pyx_n_s_no_sells, __pyx_k_no_sells, sizeof(__pyx_k_no_sells), 0, 0, 1, 1},
  {&__pyx_n_s_non_hanging, __pyx_k_non_hanging, sizeof(__pyx_k_non_hanging), 0, 0, 1, 1},
  {&__pyx_n_s_normalize, __pyx_k_normalize, sizeof(__pyx_k_normalize), 0, 0, 1, 1},
  {&__pyx_n_s_notify_hb_app, __pyx_k_notify_hb_app, sizeof(__pyx_k_notify_hb_app), 0, 0, 1, 1},
  {&__pyx_n_s_notify_hb_app_with_timestamp, __pyx_k_notify_hb_app_with_timestamp, sizeof(__pyx_k_notify_hb_app_with_timestamp), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_num, __pyx_k_num, sizeof(__pyx_k_num), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_o, __pyx_k_o, sizeof(__pyx_k_o), 0, 0, 1, 1},
  {&__pyx_n_u_optimal_ask, __pyx_k_optimal_ask, sizeof(__pyx_k_optimal_ask), 0, 1, 0, 1},
  {&__pyx_n_s_optimal_ask_spread, __pyx_k_optimal_ask_spread, sizeof(__pyx_k_optimal_ask_spread), 0, 0, 1, 1},
  {&__pyx_kp_u_optimal_ask_to_mid, __pyx_k_optimal_ask_to_mid, sizeof(__pyx_k_optimal_ask_to_mid), 0, 1, 0, 0},
  {&__pyx_n_u_optimal_bid, __pyx_k_optimal_bid, sizeof(__pyx_k_optimal_bid), 0, 1, 0, 1},
  {&__pyx_n_s_optimal_bid_spread, __pyx_k_optimal_bid_spread, sizeof(__pyx_k_optimal_bid_spread), 0, 0, 1, 1},
  {&__pyx_kp_u_optimal_bid_to_mid, __pyx_k_optimal_bid_to_mid, sizeof(__pyx_k_optimal_bid_to_mid), 0, 1, 0, 0},
  {&__pyx_n_u_optimal_spread, __pyx_k_optimal_spread, sizeof(__pyx_k_optimal_spread), 0, 1, 0, 1},
  {&__pyx_kp_u_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 1, 0, 0},
  {&__pyx_n_s_order_2, __pyx_k_order_2, sizeof(__pyx_k_order_2), 0, 0, 1, 1},
  {&__pyx_n_s_order_age, __pyx_k_order_age, sizeof(__pyx_k_order_age), 0, 0, 1, 1},
  {&__pyx_n_s_order_amount, __pyx_k_order_amount, sizeof(__pyx_k_order_amount), 0, 0, 1, 1},
  {&__pyx_n_s_order_amount_shape_factor, __pyx_k_order_amount_shape_factor, sizeof(__pyx_k_order_amount_shape_factor), 0, 0, 1, 1},
  {&__pyx_n_s_order_book_depth_factor, __pyx_k_order_book_depth_factor, sizeof(__pyx_k_order_book_depth_factor), 0, 0, 1, 1},
  {&__pyx_kp_u_order_book_depth_factor_2, __pyx_k_order_book_depth_factor_2, sizeof(__pyx_k_order_book_depth_factor_2), 0, 1, 0, 0},
  {&__pyx_n_s_order_id, __pyx_k_order_id, sizeof(__pyx_k_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_order_levels, __pyx_k_order_levels, sizeof(__pyx_k_order_levels), 0, 0, 1, 1},
  {&__pyx_n_s_order_optimization_enabled, __pyx_k_order_optimization_enabled, sizeof(__pyx_k_order_optimization_enabled), 0, 0, 1, 1},
  {&__pyx_n_s_order_override, __pyx_k_order_override, sizeof(__pyx_k_order_override), 0, 0, 1, 1},
  {&__pyx_n_s_order_refresh_time, __pyx_k_order_refresh_time, sizeof(__pyx_k_order_refresh_time), 0, 0, 1, 1},
  {&__pyx_n_s_order_refresh_tolerance_pct, __pyx_k_order_refresh_tolerance_pct, sizeof(__pyx_k_order_refresh_tolerance_pct), 0, 0, 1, 1},
  {&__pyx_n_s_orders, __pyx_k_orders, sizeof(__pyx_k_orders), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_pandas, __pyx_k_pandas, sizeof(__pyx_k_pandas), 0, 0, 1, 1},
  {&__pyx_n_s_parameters_based_on_spread, __pyx_k_parameters_based_on_spread, sizeof(__pyx_k_parameters_based_on_spread), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_n_s_pd, __pyx_k_pd, sizeof(__pyx_k_pd), 0, 0, 1, 1},
  {&__pyx_kp_s_pd_DataFrame, __pyx_k_pd_DataFrame, sizeof(__pyx_k_pd_DataFrame), 0, 0, 1, 0},
  {&__pyx_n_s_percent, __pyx_k_percent, sizeof(__pyx_k_percent), 0, 0, 1, 1},
  {&__pyx_n_s_pmm_logger, __pyx_k_pmm_logger, sizeof(__pyx_k_pmm_logger), 0, 0, 1, 1},
  {&__pyx_n_s_price, __pyx_k_price, sizeof(__pyx_k_price), 0, 0, 1, 1},
  {&__pyx_n_s_process_tick, __pyx_k_process_tick, sizeof(__pyx_k_process_tick), 0, 0, 1, 1},
  {&__pyx_n_s_proposal, __pyx_k_proposal, sizeof(__pyx_k_proposal), 0, 0, 1, 1},
  {&__pyx_n_s_proposal_prices, __pyx_k_proposal_prices, sizeof(__pyx_k_proposal_prices), 0, 0, 1, 1},
  {&__pyx_n_s_pure_mm_assets_df, __pyx_k_pure_mm_assets_df, sizeof(__pyx_k_pure_mm_assets_df), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_kp_u_q, __pyx_k_q, sizeof(__pyx_k_q), 0, 1, 0, 0},
  {&__pyx_n_s_quantity, __pyx_k_quantity, sizeof(__pyx_k_quantity), 0, 0, 1, 1},
  {&__pyx_n_s_quote_asset, __pyx_k_quote_asset, sizeof(__pyx_k_quote_asset), 0, 0, 1, 1},
  {&__pyx_n_s_quote_balance, __pyx_k_quote_balance, sizeof(__pyx_k_quote_balance), 0, 0, 1, 1},
  {&__pyx_n_s_quote_currency, __pyx_k_quote_currency, sizeof(__pyx_k_quote_currency), 0, 0, 1, 1},
  {&__pyx_n_s_quote_ratio, __pyx_k_quote_ratio, sizeof(__pyx_k_quote_ratio), 0, 0, 1, 1},
  {&__pyx_n_u_radar_relay, __pyx_k_radar_relay, sizeof(__pyx_k_radar_relay), 0, 1, 0, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_ready, __pyx_k_ready, sizeof(__pyx_k_ready), 0, 0, 1, 1},
  {&__pyx_n_s_recalculate_parameters, __pyx_k_recalculate_parameters, sizeof(__pyx_k_recalculate_parameters), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_ref_price, __pyx_k_ref_price, sizeof(__pyx_k_ref_price), 0, 0, 1, 1},
  {&__pyx_n_s_reference_price, __pyx_k_reference_price, sizeof(__pyx_k_reference_price), 0, 0, 1, 1},
  {&__pyx_n_s_regex, __pyx_k_regex, sizeof(__pyx_k_regex), 0, 0, 1, 1},
  {&__pyx_n_s_register_events, __pyx_k_register_events, sizeof(__pyx_k_register_events), 0, 0, 1, 1},
  {&__pyx_n_s_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
  {&__pyx_n_u_reserved_price, __pyx_k_reserved_price, sizeof(__pyx_k_reserved_price), 0, 1, 0, 1},
  {&__pyx_n_s_result_price, __pyx_k_result_price, sizeof(__pyx_k_result_price), 0, 0, 1, 1},
  {&__pyx_n_s_return, __pyx_k_return, sizeof(__pyx_k_return), 0, 0, 1, 1},
  {&__pyx_n_s_reverse, __pyx_k_reverse, sizeof(__pyx_k_reverse), 0, 0, 1, 1},
  {&__pyx_n_s_risk_factor, __pyx_k_risk_factor, sizeof(__pyx_k_risk_factor), 0, 0, 1, 1},
  {&__pyx_kp_u_risk_factor_2, __pyx_k_risk_factor_2, sizeof(__pyx_k_risk_factor_2), 0, 1, 0, 0},
  {&__pyx_n_s_round, __pyx_k_round, sizeof(__pyx_k_round), 0, 0, 1, 1},
  {&__pyx_n_u_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 1, 0, 1},
  {&__pyx_n_s_s_decimal_neg_one, __pyx_k_s_decimal_neg_one, sizeof(__pyx_k_s_decimal_neg_one), 0, 0, 1, 1},
  {&__pyx_n_s_s_decimal_one, __pyx_k_s_decimal_one, sizeof(__pyx_k_s_decimal_one), 0, 0, 1, 1},
  {&__pyx_n_s_s_decimal_zero, __pyx_k_s_decimal_zero, sizeof(__pyx_k_s_decimal_zero), 0, 0, 1, 1},
  {&__pyx_n_s_seconds, __pyx_k_seconds, sizeof(__pyx_k_seconds), 0, 0, 1, 1},
  {&__pyx_kp_u_seconds_to_start_trading, __pyx_k_seconds_to_start_trading, sizeof(__pyx_k_seconds_to_start_trading), 0, 1, 0, 0},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_kp_s_self__events_cannot_be_converted, __pyx_k_self__events_cannot_be_converted, sizeof(__pyx_k_self__events_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_n_u_sell, __pyx_k_sell, sizeof(__pyx_k_sell), 0, 1, 0, 1},
  {&__pyx_n_s_sell_order, __pyx_k_sell_order, sizeof(__pyx_k_sell_order), 0, 0, 1, 1},
  {&__pyx_n_s_sells, __pyx_k_sells, sizeof(__pyx_k_sells), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_set_timers, __pyx_k_set_timers, sizeof(__pyx_k_set_timers), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_should_wait_order_cancel_confirm, __pyx_k_should_wait_order_cancel_confirm, sizeof(__pyx_k_should_wait_order_cancel_confirm), 0, 0, 1, 1},
  {&__pyx_n_s_size, __pyx_k_size, sizeof(__pyx_k_size), 0, 0, 1, 1},
  {&__pyx_n_s_sort, __pyx_k_sort, sizeof(__pyx_k_sort), 0, 0, 1, 1},
  {&__pyx_n_s_sorted, __pyx_k_sorted, sizeof(__pyx_k_sorted), 0, 0, 1, 1},
  {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_spread, __pyx_k_spread, sizeof(__pyx_k_spread), 0, 0, 1, 1},
  {&__pyx_n_u_spread, __pyx_k_spread, sizeof(__pyx_k_spread), 0, 1, 0, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_status_report_interval, __pyx_k_status_report_interval, sizeof(__pyx_k_status_report_interval), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_n_s_strftime, __pyx_k_strftime, sizeof(__pyx_k_strftime), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_u_target_inv, __pyx_k_target_inv, sizeof(__pyx_k_target_inv), 0, 1, 0, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_u_time_left_fraction, __pyx_k_time_left_fraction, sizeof(__pyx_k_time_left_fraction), 0, 1, 0, 1},
  {&__pyx_kp_u_time_until_end_of_trading_cycle, __pyx_k_time_until_end_of_trading_cycle, sizeof(__pyx_k_time_until_end_of_trading_cycle), 0, 1, 0, 0},
  {&__pyx_n_s_timedelta, __pyx_k_timedelta, sizeof(__pyx_k_timedelta), 0, 0, 1, 1},
  {&__pyx_n_s_timestamp, __pyx_k_timestamp, sizeof(__pyx_k_timestamp), 0, 0, 1, 1},
  {&__pyx_n_s_to_create_orders, __pyx_k_to_create_orders, sizeof(__pyx_k_to_create_orders), 0, 0, 1, 1},
  {&__pyx_n_s_to_csv, __pyx_k_to_csv, sizeof(__pyx_k_to_csv), 0, 0, 1, 1},
  {&__pyx_n_s_to_show_current_pct, __pyx_k_to_show_current_pct, sizeof(__pyx_k_to_show_current_pct), 0, 0, 1, 1},
  {&__pyx_n_s_to_string, __pyx_k_to_string, sizeof(__pyx_k_to_string), 0, 0, 1, 1},
  {&__pyx_n_s_total_in_quote, __pyx_k_total_in_quote, sizeof(__pyx_k_total_in_quote), 0, 0, 1, 1},
  {&__pyx_n_s_trade_type, __pyx_k_trade_type, sizeof(__pyx_k_trade_type), 0, 0, 1, 1},
  {&__pyx_n_s_trading_pair, __pyx_k_trading_pair, sizeof(__pyx_k_trading_pair), 0, 0, 1, 1},
  {&__pyx_n_s_typing, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {&__pyx_n_s_unit, __pyx_k_unit, sizeof(__pyx_k_unit), 0, 0, 1, 1},
  {&__pyx_n_s_unlink, __pyx_k_unlink, sizeof(__pyx_k_unlink), 0, 0, 1, 1},
  {&__pyx_n_s_unregister_events, __pyx_k_unregister_events, sizeof(__pyx_k_unregister_events), 0, 0, 1, 1},
  {&__pyx_n_s_update_strategy_orders_with_equi, __pyx_k_update_strategy_orders_with_equi, sizeof(__pyx_k_update_strategy_orders_with_equi), 0, 0, 1, 1},
  {&__pyx_n_s_upper, __pyx_k_upper, sizeof(__pyx_k_upper), 0, 0, 1, 1},
  {&__pyx_n_s_use_coordinator, __pyx_k_use_coordinator, sizeof(__pyx_k_use_coordinator), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_kp_u_vol, __pyx_k_vol, sizeof(__pyx_k_vol), 0, 1, 0, 0},
  {&__pyx_n_s_vol_2, __pyx_k_vol_2, sizeof(__pyx_k_vol_2), 0, 0, 1, 1},
  {&__pyx_n_s_vol_to_spread_multiplier, __pyx_k_vol_to_spread_multiplier, sizeof(__pyx_k_vol_to_spread_multiplier), 0, 0, 1, 1},
  {&__pyx_n_u_vol_to_spread_multiplier, __pyx_k_vol_to_spread_multiplier, sizeof(__pyx_k_vol_to_spread_multiplier), 0, 1, 0, 1},
  {&__pyx_kp_u_volatility, __pyx_k_volatility, sizeof(__pyx_k_volatility), 0, 1, 0, 0},
  {&__pyx_n_s_volatility_buffer_size, __pyx_k_volatility_buffer_size, sizeof(__pyx_k_volatility_buffer_size), 0, 0, 1, 1},
  {&__pyx_n_s_volatility_diff_from_last_parame, __pyx_k_volatility_diff_from_last_parame, sizeof(__pyx_k_volatility_diff_from_last_parame), 0, 0, 1, 1},
  {&__pyx_n_s_volatility_pct, __pyx_k_volatility_pct, sizeof(__pyx_k_volatility_pct), 0, 0, 1, 1},
  {&__pyx_n_s_volatility_sensibility, __pyx_k_volatility_sensibility, sizeof(__pyx_k_volatility_sensibility), 0, 0, 1, 1},
  {&__pyx_n_s_warning, __pyx_k_warning, sizeof(__pyx_k_warning), 0, 0, 1, 1},
  {&__pyx_n_s_warning_lines, __pyx_k_warning_lines, sizeof(__pyx_k_warning_lines), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  #endif
  {0, 0, 0, 0, 0, 0, 0}
};
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_all = __Pyx_GetBuiltinName(__pyx_n_s_all); if (!__pyx_builtin_all) __PYX_ERR(0, 156, __pyx_L1_error)
  __pyx_builtin_round = __Pyx_GetBuiltinName(__pyx_n_s_round); if (!__pyx_builtin_round) __PYX_ERR(0, 430, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(0, 449, __pyx_L1_error)
  __pyx_builtin_max = __Pyx_GetBuiltinName(__pyx_n_s_max); if (!__pyx_builtin_max) __PYX_ERR(0, 512, __pyx_L1_error)
  __pyx_builtin_sorted = __Pyx_GetBuiltinName(__pyx_n_s_sorted); if (!__pyx_builtin_sorted) __PYX_ERR(0, 1009, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(0, 1010, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(0, 1150, __pyx_L1_error)
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 1292, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 989, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":463
 *             # // indicates order is a paper order so 'n/a'. For real orders, calculate age.
 *             if "//" not in order.client_order_id:
 *                 age = pd.Timestamp(int(time.time()) - int(order.client_order_id[-16:]) / 1e6,             # <<<<<<<<<<<<<<
 *                                    unit='s').strftime('%H:%M:%S')
 *             amount_orig = self._order_amount
 */
  __pyx_slice__18 = PySlice_New(__pyx_int_neg_16, Py_None, Py_None); if (unlikely(!__pyx_slice__18)) __PYX_ERR(0, 463, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_slice__18);
  __Pyx_GIVEREF(__pyx_slice__18);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1304
 *         new_bid = self._reserved_price - self._optimal_spread / 2
 *         if not os.path.exists(self._debug_csv_path):
 *             df_header = pd.DataFrame([('mid_price',             # <<<<<<<<<<<<<<
 *                                        'spread',
 *                                        'reserved_price',
 */
  __pyx_tuple__29 = PyTuple_Pack(20, __pyx_n_u_mid_price, __pyx_n_u_spread, __pyx_n_u_reserved_price, __pyx_n_u_optimal_spread, __pyx_n_u_optimal_bid, __pyx_n_u_optimal_ask, __pyx_kp_u_optimal_bid_to_mid, __pyx_kp_u_optimal_ask_to_mid, __pyx_n_u_current_inv, __pyx_n_u_target_inv, __pyx_n_u_time_left_fraction, __pyx_kp_u_mid_price_std_dev, __pyx_n_u_gamma, __pyx_n_u_kappa, __pyx_n_u_eta, __pyx_n_u_current_vol_to_calculation_vol, __pyx_n_u_inventory_target_pct, __pyx_n_u_min_spread, __pyx_n_u_max_spread, __pyx_n_u_vol_to_spread_multiplier); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":989
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(2, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(2, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":44
 * 
 * NaN = float("nan")
 * s_decimal_zero = Decimal(0)             # <<<<<<<<<<<<<<
 * s_decimal_neg_one = Decimal(-1)
 * s_decimal_one = Decimal(1)
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":45
 * NaN = float("nan")
 * s_decimal_zero = Decimal(0)
 * s_decimal_neg_one = Decimal(-1)             # <<<<<<<<<<<<<<
 * s_decimal_one = Decimal(1)
 * pmm_logger = None
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_int_neg_1); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":46
 * s_decimal_zero = Decimal(0)
 * s_decimal_neg_one = Decimal(-1)
 * s_decimal_one = Decimal(1)             # <<<<<<<<<<<<<<
 * pmm_logger = None
 * 
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_int_1); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":59
 *     RADAR_RELAY_TYPE_EXCHANGES = {"radar_relay", "bamboo_relay"}
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls):
 *         global pmm_logger
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_n_s_cls); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__36, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_logger, 59, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 59, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":77
 *                     order_override: Dict[str, List[str]] = {},
 *                     hanging_orders_enabled: bool = False,
 *                     hanging_orders_cancel_pct: Decimal = Decimal("0.1"),             # <<<<<<<<<<<<<<
 *                     inventory_target_base_pct: Decimal = s_decimal_zero,
 *                     add_transaction_costs_to_orders: bool = True,
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_u_0_1); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":84
 *                     hb_app_notification: bool = False,
 *                     parameters_based_on_spread: bool = True,
 *                     min_spread: Decimal = Decimal("0.15"),             # <<<<<<<<<<<<<<
 *                     max_spread: Decimal = Decimal("2"),
 *                     vol_to_spread_multiplier: Decimal = Decimal("1.3"),
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_u_0_15); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":85
 *                     parameters_based_on_spread: bool = True,
 *                     min_spread: Decimal = Decimal("0.15"),
 *                     max_spread: Decimal = Decimal("2"),             # <<<<<<<<<<<<<<
 *                     vol_to_spread_multiplier: Decimal = Decimal("1.3"),
 *                     volatility_sensibility: Decimal = Decimal("0.2"),
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_u_2_2); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":86
 *                     min_spread: Decimal = Decimal("0.15"),
 *                     max_spread: Decimal = Decimal("2"),
 *                     vol_to_spread_multiplier: Decimal = Decimal("1.3"),             # <<<<<<<<<<<<<<
 *                     volatility_sensibility: Decimal = Decimal("0.2"),
 *                     inventory_risk_aversion: Decimal = Decimal("0.5"),
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_u_1_3); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":87
 *                     max_spread: Decimal = Decimal("2"),
 *                     vol_to_spread_multiplier: Decimal = Decimal("1.3"),
 *                     volatility_sensibility: Decimal = Decimal("0.2"),             # <<<<<<<<<<<<<<
 *                     inventory_risk_aversion: Decimal = Decimal("0.5"),
 *                     order_book_depth_factor: Decimal = Decimal("0.1"),
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_kp_u_0_2); if (unlikely(!__pyx_tuple__42)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":88
 *                     vol_to_spread_multiplier: Decimal = Decimal("1.3"),
 *                     volatility_sensibility: Decimal = Decimal("0.2"),
 *                     inventory_risk_aversion: Decimal = Decimal("0.5"),             # <<<<<<<<<<<<<<
 *                     order_book_depth_factor: Decimal = Decimal("0.1"),
 *                     risk_factor: Decimal = Decimal("0.5"),
 */
  __pyx_tuple__43 = PyTuple_Pack(1, __pyx_kp_u_0_5); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":91
 *                     order_book_depth_factor: Decimal = Decimal("0.1"),
 *                     risk_factor: Decimal = Decimal("0.5"),
 *                     order_amount_shape_factor: Decimal = Decimal("0.005"),             # <<<<<<<<<<<<<<
 *                     closing_time: Decimal = Decimal("1"),
 *                     debug_csv_path: str = '',
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_kp_u_0_005); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":92
 *                     risk_factor: Decimal = Decimal("0.5"),
 *                     order_amount_shape_factor: Decimal = Decimal("0.005"),
 *                     closing_time: Decimal = Decimal("1"),             # <<<<<<<<<<<<<<
 *                     debug_csv_path: str = '',
 *                     volatility_buffer_size: int = 30,
 */
  __pyx_tuple__45 = PyTuple_Pack(1, __pyx_kp_u_1_2); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":66
 *         return pmm_logger
 * 
 *     def init_params(self,             # <<<<<<<<<<<<<<
 *                     market_info: MarketTradingPairTuple,
 *                     order_amount: Decimal,
 */
  __pyx_tuple__46 = PyTuple_Pack(31, __pyx_n_s_self, __pyx_n_s_market_info, __pyx_n_s_order_amount, __pyx_n_s_order_refresh_time, __pyx_n_s_max_order_age, __pyx_n_s_order_refresh_tolerance_pct, __pyx_n_s_order_optimization_enabled, __pyx_n_s_filled_order_delay, __pyx_n_s_order_levels, __pyx_n_s_order_override, __pyx_n_s_hanging_orders_enabled, __pyx_n_s_hanging_orders_cancel_pct, __pyx_n_s_inventory_target_base_pct, __pyx_n_s_add_transaction_costs_to_orders, __pyx_n_s_logging_options, __pyx_n_s_status_report_interval, __pyx_n_s_hb_app_notification, __pyx_n_s_parameters_based_on_spread, __pyx_n_s_min_spread, __pyx_n_s_max_spread, __pyx_n_s_vol_to_spread_multiplier, __pyx_n_s_volatility_sensibility, __pyx_n_s_inventory_risk_aversion, __pyx_n_s_order_book_depth_factor, __pyx_n_s_risk_factor, __pyx_n_s_order_amount_shape_factor, __pyx_n_s_closing_time, __pyx_n_s_debug_csv_path, __pyx_n_s_volatility_buffer_size, __pyx_n_s_should_wait_order_cancel_confirm, __pyx_n_s_is_debug); if (unlikely(!__pyx_tuple__46)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(31, 0, 0, 31, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_init_params, 66, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) __PYX_ERR(0, 66, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":155
 *             pass
 * 
 *     def all_markets_ready(self):             # <<<<<<<<<<<<<<
 *         return all([market.ready for market in self._sb_markets])
 * 
 */
  __pyx_tuple__48 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_market); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_all_markets_ready, 155, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) __PYX_ERR(0, 155, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":370
 *         return self._closing_time
 * 
 *     def get_price(self) -> float:             # <<<<<<<<<<<<<<
 *         return self.get_mid_price()
 * 
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_get_price, 370, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) __PYX_ERR(0, 370, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":373
 *         return self.get_mid_price()
 * 
 *     def get_last_price(self) -> float:             # <<<<<<<<<<<<<<
 *         return self._market_info.get_last_price()
 * 
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_get_last_price, 373, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(0, 373, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":376
 *         return self._market_info.get_last_price()
 * 
 *     def get_mid_price(self) -> float:             # <<<<<<<<<<<<<<
 *         return self.c_get_mid_price()
 * 
 */
  __pyx_tuple__54 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_get_mid_price, 376, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(0, 376, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":417
 *         return self._hanging_orders_tracker
 * 
 *     def pure_mm_assets_df(self, to_show_current_pct: bool) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         market, trading_pair, base_asset, quote_asset = self._market_info
 *         price = self._market_info.get_mid_price()
 */
  __pyx_tuple__56 = PyTuple_Pack(17, __pyx_n_s_self, __pyx_n_s_to_show_current_pct, __pyx_n_s_market, __pyx_n_s_trading_pair, __pyx_n_s_base_asset, __pyx_n_s_quote_asset, __pyx_n_s_price, __pyx_n_s_base_balance, __pyx_n_s_quote_balance, __pyx_n_s_available_base_balance, __pyx_n_s_available_quote_balance, __pyx_n_s_base_value, __pyx_n_s_total_in_quote, __pyx_n_s_base_ratio, __pyx_n_s_quote_ratio, __pyx_n_s_data, __pyx_n_s_df); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 17, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_pure_mm_assets_df, 417, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(0, 417, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":439
 *         return df
 * 
 *     def active_orders_df(self) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         market, trading_pair, base_asset, quote_asset = self._market_info
 *         price = self.get_price()
 */
  __pyx_tuple__58 = PyTuple_Pack(20, __pyx_n_s_self, __pyx_n_s_market, __pyx_n_s_trading_pair, __pyx_n_s_base_asset, __pyx_n_s_quote_asset, __pyx_n_s_price, __pyx_n_s_active_orders, __pyx_n_s_no_sells, __pyx_n_s_columns, __pyx_n_s_data, __pyx_n_s_lvl_buy, __pyx_n_s_lvl_sell, __pyx_n_s_idx, __pyx_n_s_order_2, __pyx_n_s_is_hanging_order, __pyx_n_s_level, __pyx_n_s_spread, __pyx_n_s_age, __pyx_n_s_amount_orig, __pyx_n_s_o); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 20, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_active_orders_df, 439, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(0, 439, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":481
 *         return pd.DataFrame(data=data, columns=columns)
 * 
 *     def market_status_data_frame(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         markets_data = []
 *         markets_columns = ["Exchange", "Market", "Best Bid", "Best Ask", f"MidPrice"]
 */
  __pyx_tuple__60 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_market_trading_pair_tuples, __pyx_n_s_markets_data, __pyx_n_s_markets_columns, __pyx_n_s_market_books, __pyx_n_s_market, __pyx_n_s_trading_pair, __pyx_n_s_bid_price, __pyx_n_s_ask_price, __pyx_n_s_ref_price); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__61 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_market_status_data_frame, 481, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__61)) __PYX_ERR(0, 481, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":500
 *         return pd.DataFrame(data=markets_data, columns=markets_columns).replace(np.nan, '', regex=True)
 * 
 *     def format_status(self) -> str:             # <<<<<<<<<<<<<<
 *         if not self._all_markets_ready:
 *             return "Market connectors are not ready."
 */
  __pyx_tuple__62 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_lines, __pyx_n_s_warning_lines, __pyx_n_s_markets_df, __pyx_n_s_assets_df, __pyx_n_s_first_col_length, __pyx_n_s_df_lines, __pyx_n_s_df, __pyx_n_s_volatility_pct, __pyx_n_s_line, __pyx_n_s_line, __pyx_n_s_line); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_format_status, 500, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 500, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":539
 *         return "\n".join(lines)
 * 
 *     def execute_orders_proposal(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_execute_orders_proposal(proposal)
 * 
 */
  __pyx_tuple__64 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_proposal); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__65 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_execute_orders_proposal, 539, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__65)) __PYX_ERR(0, 539, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":542
 *         return self.c_execute_orders_proposal(proposal)
 * 
 *     def cancel_order(self, order_id: str):             # <<<<<<<<<<<<<<
 *         return self.c_cancel_order(self._market_info, order_id)
 * 
 */
  __pyx_tuple__66 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_order_id); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_cancel_order, 542, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(0, 542, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":562
 *         self._time_left = self._closing_time
 * 
 *     def start(self, clock: Clock, timestamp: float):             # <<<<<<<<<<<<<<
 *         self.c_start(clock, timestamp)
 * 
 */
  __pyx_tuple__68 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_clock, __pyx_n_s_timestamp); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_start, 562, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(0, 562, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":649
 *             self.logger().info("Recycling algorithm time left and parameters if needed.")
 * 
 *     def collect_market_variables(self, timestamp: float):             # <<<<<<<<<<<<<<
 *         self.c_collect_market_variables(timestamp)
 * 
 */
  __pyx_tuple__70 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_timestamp); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_collect_market_variables, 649, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(0, 649, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":652
 *         self.c_collect_market_variables(timestamp)
 * 
 *     def volatility_diff_from_last_parameter_calculation(self, current_vol) -> Decimal:             # <<<<<<<<<<<<<<
 *         if self._latest_parameter_calculation_vol == 0:
 *             return s_decimal_zero
 */
  __pyx_tuple__72 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_current_vol); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_volatility_diff_from_last_parame, 652, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(0, 652, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":664
 *         return market.c_get_price(trading_pair, True) - market.c_get_price(trading_pair, False)
 * 
 *     def get_spread(self):             # <<<<<<<<<<<<<<
 *         return self.c_get_spread()
 * 
 */
  __pyx_tuple__74 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_get_spread, 664, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(0, 664, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":667
 *         return self.c_get_spread()
 * 
 *     def get_volatility(self):             # <<<<<<<<<<<<<<
 *         vol = Decimal(str(self._avg_vol.current_value))
 *         if vol == s_decimal_zero:
 */
  __pyx_tuple__76 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_vol_2); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_get_volatility, 667, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(0, 667, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":719
 *                                    f"vol={vol:.4f}")
 * 
 *     def calculate_reserved_price_and_optimal_spread(self):             # <<<<<<<<<<<<<<
 *         return self.c_calculate_reserved_price_and_optimal_spread()
 * 
 */
  __pyx_tuple__78 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_calculate_reserved_price_and_opt, 719, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(0, 719, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":741
 *         return market.c_quantize_order_amount(trading_pair, Decimal(str(target_inventory_value / price)))
 * 
 *     def calculate_target_inventory(self) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_calculate_target_inventory()
 * 
 */
  __pyx_tuple__80 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_calculate_target_inventory, 741, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(0, 741, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":744
 *         return self.c_calculate_target_inventory()
 * 
 *     def _get_min_and_max_spread(self):             # <<<<<<<<<<<<<<
 *         vol = self.get_volatility()
 *         price = self.get_price()
 */
  __pyx_tuple__82 = PyTuple_Pack(5, __pyx_n_s_self, __pyx_n_s_vol_2, __pyx_n_s_price, __pyx_n_s_min_spread, __pyx_n_s_max_spread); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 5, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_get_min_and_max_spread, 744, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(0, 744, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":788
 *             self._latest_parameter_calculation_vol = vol
 * 
 *     def recalculate_parameters(self):             # <<<<<<<<<<<<<<
 *         return self.c_recalculate_parameters()
 * 
 */
  __pyx_tuple__84 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_recalculate_parameters, 788, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(0, 788, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":794
 *         return self._avg_vol.is_sampling_buffer_full
 * 
 *     def is_algorithm_ready(self) -> bool:             # <<<<<<<<<<<<<<
 *         return self.c_is_algorithm_ready()
 * 
 */
  __pyx_tuple__86 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_is_algorithm_ready, 794, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(0, 794, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":797
 *         return self.c_is_algorithm_ready()
 * 
 *     def _get_logspaced_level_spreads(self, ):             # <<<<<<<<<<<<<<
 *         reference_price = self.get_price()
 *         _, max_spread = self._get_min_and_max_spread()
 */
  __pyx_tuple__89 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_reference_price, __pyx_n_s__88, __pyx_n_s_max_spread, __pyx_n_s_optimal_ask_spread, __pyx_n_s_optimal_bid_spread, __pyx_n_s_bid_level_spreads, __pyx_n_s_ask_level_spreads); if (unlikely(!__pyx_tuple__89)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__89);
  __Pyx_GIVEREF(__pyx_tuple__89);
  __pyx_codeobj__90 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__89, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_get_logspaced_level_spreads, 797, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__90)) __PYX_ERR(0, 797, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":829
 *         return buys, sells
 * 
 *     def create_proposal_based_on_order_override(self) -> Tuple[List[Proposal], List[Proposal]]:             # <<<<<<<<<<<<<<
 *         return self._create_proposal_based_on_order_override()
 * 
 */
  __pyx_tuple__91 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_codeobj__92 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_create_proposal_based_on_order_o, 829, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__92)) __PYX_ERR(0, 829, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":850
 *         return buys, sells
 * 
 *     def create_proposal_based_on_order_levels(self):             # <<<<<<<<<<<<<<
 *         return self._create_proposal_based_on_order_levels()
 * 
 */
  __pyx_tuple__93 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__93)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__93);
  __Pyx_GIVEREF(__pyx_tuple__93);
  __pyx_codeobj__94 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__93, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_create_proposal_based_on_order_l, 850, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__94)) __PYX_ERR(0, 850, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":869
 *         return buys, sells
 * 
 *     def create_basic_proposal(self):             # <<<<<<<<<<<<<<
 *         return self._create_basic_proposal()
 * 
 */
  __pyx_tuple__95 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(0, 869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);
  __pyx_codeobj__96 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__95, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_create_basic_proposal, 869, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__96)) __PYX_ERR(0, 869, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":890
 *         return Proposal(buys, sells)
 * 
 *     def create_base_proposal(self):             # <<<<<<<<<<<<<<
 *         return self.c_create_base_proposal()
 * 
 */
  __pyx_tuple__97 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__97)) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__97);
  __Pyx_GIVEREF(__pyx_tuple__97);
  __pyx_codeobj__98 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__97, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_create_base_proposal, 890, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__98)) __PYX_ERR(0, 890, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":911
 *         return base_balance, quote_balance
 * 
 *     def get_adjusted_available_balance(self, orders: List[LimitOrder]):             # <<<<<<<<<<<<<<
 *         return self.c_get_adjusted_available_balance(orders)
 * 
 */
  __pyx_tuple__99 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_orders); if (unlikely(!__pyx_tuple__99)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);
  __pyx_codeobj__100 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__99, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_get_adjusted_available_balance, 911, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__100)) __PYX_ERR(0, 911, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":921
 *             self.c_apply_add_transaction_costs(proposal)
 * 
 *     def apply_order_price_modifiers(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         self.c_apply_order_price_modifiers(proposal)
 * 
 */
  __pyx_tuple__101 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_proposal); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);
  __pyx_codeobj__102 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__101, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_apply_order_price_modifiers, 921, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__102)) __PYX_ERR(0, 921, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":924
 *         self.c_apply_order_price_modifiers(proposal)
 * 
 *     def apply_budget_constraint(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_apply_budget_constraint(proposal)
 * 
 */
  __pyx_tuple__103 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_proposal); if (unlikely(!__pyx_tuple__103)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__103);
  __Pyx_GIVEREF(__pyx_tuple__103);
  __pyx_codeobj__104 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__103, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_apply_budget_constraint, 924, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__104)) __PYX_ERR(0, 924, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":927
 *         return self.c_apply_budget_constraint(proposal)
 * 
 *     def adjusted_available_balance_for_orders_budget_constrain(self):             # <<<<<<<<<<<<<<
 *         candidate_hanging_orders = self.hanging_orders_tracker.candidate_hanging_orders_from_pairs()
 *         non_hanging = []
 */
  __pyx_tuple__105 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_candidate_hanging_orders, __pyx_n_s_non_hanging, __pyx_n_s_all_orders, __pyx_n_s_all_non_hanging_orders, __pyx_n_s_order_2); if (unlikely(!__pyx_tuple__105)) __PYX_ERR(0, 927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__105);
  __Pyx_GIVEREF(__pyx_tuple__105);
  __pyx_codeobj__106 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__105, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_adjusted_available_balance_for_o, 927, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__106)) __PYX_ERR(0, 927, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":979
 *         proposal.sells = [o for o in proposal.sells if o.size > 0]
 * 
 *     def apply_budget_constraint(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_apply_budget_constraint(proposal)
 * 
 */
  __pyx_tuple__107 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_proposal); if (unlikely(!__pyx_tuple__107)) __PYX_ERR(0, 979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__107);
  __Pyx_GIVEREF(__pyx_tuple__107);
  __pyx_codeobj__108 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__107, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_apply_budget_constraint, 979, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__108)) __PYX_ERR(0, 979, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1032
 *                     proposal.sells[i].price = market.c_quantize_order_price(self.trading_pair, price_below_ask)
 * 
 *     def apply_order_optimization(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_apply_order_optimization(proposal)
 * 
 */
  __pyx_tuple__109 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_proposal); if (unlikely(!__pyx_tuple__109)) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__109);
  __Pyx_GIVEREF(__pyx_tuple__109);
  __pyx_codeobj__110 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__109, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_apply_order_optimization, 1032, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__110)) __PYX_ERR(0, 1032, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1058
 *                     proposal.sells = [o for o in proposal.sells if o.size > 0]
 * 
 *     def apply_order_amount_eta_transformation(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         self.c_apply_order_amount_eta_transformation(proposal)
 * 
 */
  __pyx_tuple__111 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_proposal); if (unlikely(!__pyx_tuple__111)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__111);
  __Pyx_GIVEREF(__pyx_tuple__111);
  __pyx_codeobj__112 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__111, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_apply_order_amount_eta_transform, 1058, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__112)) __PYX_ERR(0, 1058, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1075
 *             sell.price = market.c_quantize_order_price(self.trading_pair, price)
 * 
 *     def apply_add_transaction_costs(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         self.c_apply_add_transaction_costs(proposal)
 * 
 */
  __pyx_tuple__113 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_proposal); if (unlikely(!__pyx_tuple__113)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__113);
  __Pyx_GIVEREF(__pyx_tuple__113);
  __pyx_codeobj__114 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__113, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_apply_add_transaction_costs, 1075, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__114)) __PYX_ERR(0, 1075, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1156
 *         return True
 * 
 *     def is_within_tolerance(self, current_prices: List[Decimal], proposal_prices: List[Decimal]) -> bool:             # <<<<<<<<<<<<<<
 *         return self.c_is_within_tolerance(current_prices, proposal_prices)
 * 
 */
  __pyx_tuple__115 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_current_prices, __pyx_n_s_proposal_prices); if (unlikely(!__pyx_tuple__115)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__115);
  __Pyx_GIVEREF(__pyx_tuple__115);
  __pyx_codeobj__116 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__115, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_is_within_tolerance, 1156, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__116)) __PYX_ERR(0, 1156, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1201
 *             self.c_set_timers()
 * 
 *     def cancel_active_orders(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_cancel_active_orders(proposal)
 * 
 */
  __pyx_tuple__117 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_proposal); if (unlikely(!__pyx_tuple__117)) __PYX_ERR(0, 1201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__117);
  __Pyx_GIVEREF(__pyx_tuple__117);
  __pyx_codeobj__118 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__117, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_cancel_active_orders, 1201, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__118)) __PYX_ERR(0, 1201, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1214
 *                 and len(non_hanging_orders_non_cancelled) == 0)
 * 
 *     def to_create_orders(self, proposal: Proposal) -> bool:             # <<<<<<<<<<<<<<
 *         return self.c_to_create_orders(proposal)
 * 
 */
  __pyx_tuple__119 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_proposal); if (unlikely(!__pyx_tuple__119)) __PYX_ERR(0, 1214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__119);
  __Pyx_GIVEREF(__pyx_tuple__119);
  __pyx_codeobj__120 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__119, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_to_create_orders, 1214, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__120)) __PYX_ERR(0, 1214, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1277
 *             self.c_set_timers()
 * 
 *     def execute_orders_proposal(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         self.c_execute_orders_proposal(proposal)
 * 
 */
  __pyx_tuple__121 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_proposal); if (unlikely(!__pyx_tuple__121)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__121);
  __Pyx_GIVEREF(__pyx_tuple__121);
  __pyx_codeobj__122 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__121, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_execute_orders_proposal, 1277, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__122)) __PYX_ERR(0, 1277, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1287
 *             self._cancel_timestamp = min(self._create_timestamp, next_cycle)
 * 
 *     def set_timers(self):             # <<<<<<<<<<<<<<
 *         self.c_set_timers()
 * 
 */
  __pyx_tuple__123 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__123)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__123);
  __Pyx_GIVEREF(__pyx_tuple__123);
  __pyx_codeobj__124 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__123, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_set_timers, 1287, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__124)) __PYX_ERR(0, 1287, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1290
 *         self.c_set_timers()
 * 
 *     def notify_hb_app(self, msg: str):             # <<<<<<<<<<<<<<
 *         if self._hb_app_notification:
 *             super().notify_hb_app(msg)
 */
  __pyx_tuple__125 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_msg); if (unlikely(!__pyx_tuple__125)) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__125);
  __Pyx_GIVEREF(__pyx_tuple__125);
  __pyx_codeobj__126 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__125, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_notify_hb_app, 1290, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__126)) __PYX_ERR(0, 1290, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1294
 *             super().notify_hb_app(msg)
 * 
 *     def dump_debug_variables(self):             # <<<<<<<<<<<<<<
 *         market = self._market_info.market
 *         mid_price = self.get_price()
 */
  __pyx_tuple__127 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_market, __pyx_n_s_mid_price, __pyx_n_s_spread, __pyx_n_s_best_ask, __pyx_n_s_new_ask, __pyx_n_s_best_bid, __pyx_n_s_new_bid, __pyx_n_s_df_header, __pyx_n_s_df); if (unlikely(!__pyx_tuple__127)) __PYX_ERR(0, 1294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__127);
  __Pyx_GIVEREF(__pyx_tuple__127);
  __pyx_codeobj__128 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__127, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_strategy_avellaneda_m_2, __pyx_n_s_dump_debug_variables, 1294, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__128)) __PYX_ERR(0, 1294, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__129 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__129)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__129);
  __Pyx_GIVEREF(__pyx_tuple__129);
  __pyx_codeobj__130 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__129, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__130)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __pyx_tuple__131 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__131)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__131);
  __Pyx_GIVEREF(__pyx_tuple__131);
  __pyx_codeobj__132 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__131, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__132)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyUnicode_Type_upper.type = (PyObject*)&PyUnicode_Type;
  __pyx_umethod_PyUnicode_Type_upper.method_name = &__pyx_n_s_upper;
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_InitString(__pyx_string_tab[0], &__pyx_kp_u_0_005) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[1], &__pyx_kp_u_0_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[2], &__pyx_kp_u_0_15) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[3], &__pyx_kp_u_0_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[4], &__pyx_kp_u_0_5) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[5], &__pyx_kp_u_0x_active_cancels) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[6], &__pyx_kp_u_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[7], &__pyx_kp_u_10) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[8], &__pyx_kp_u_100) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[9], &__pyx_kp_u_1_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[10], &__pyx_kp_u_1_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[11], &__pyx_kp_u_1e100) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[12], &__pyx_kp_u_1e5) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[13], &__pyx_kp_u_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[14], &__pyx_kp_u_2_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[15], &__pyx_kp_u_3f) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[16], &__pyx_kp_u_4f) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[17], &__pyx_kp_u_5E) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[18], &__pyx_n_u_Age) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[19], &__pyx_kp_u_Amount_Adj) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[20], &__pyx_kp_u_Amount_Orig) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[21], &__pyx_kp_u_Assets) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[22], &__pyx_kp_u_Available_Balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[23], &__pyx_n_s_AvellanedaMarketMakingStrategy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[24], &__pyx_n_s_AvellanedaMarketMakingStrategy_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[25], &__pyx_n_s_AvellanedaMarketMakingStrategy_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[26], &__pyx_n_s_AvellanedaMarketMakingStrategy_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[27], &__pyx_n_s_AvellanedaMarketMakingStrategy_5) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[28], &__pyx_n_s_AvellanedaMarketMakingStrategy_a) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[29], &__pyx_n_s_AvellanedaMarketMakingStrategy_a_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[30], &__pyx_n_s_AvellanedaMarketMakingStrategy_a_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[31], &__pyx_n_s_AvellanedaMarketMakingStrategy_a_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[32], &__pyx_n_s_AvellanedaMarketMakingStrategy_a_5) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[33], &__pyx_n_s_AvellanedaMarketMakingStrategy_a_6) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[34], &__pyx_n_s_AvellanedaMarketMakingStrategy_a_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[35], &__pyx_n_s_AvellanedaMarketMakingStrategy_a_8) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[36], &__pyx_n_s_AvellanedaMarketMakingStrategy_c) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[37], &__pyx_n_s_AvellanedaMarketMakingStrategy_c_10) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[38], &__pyx_n_s_AvellanedaMarketMakingStrategy_c_11) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[39], &__pyx_n_s_AvellanedaMarketMakingStrategy_c_12) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[40], &__pyx_n_s_AvellanedaMarketMakingStrategy_c_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[41], &__pyx_n_s_AvellanedaMarketMakingStrategy_c_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[42], &__pyx_n_s_AvellanedaMarketMakingStrategy_c_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[43], &__pyx_n_s_AvellanedaMarketMakingStrategy_c_5) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[44], &__pyx_n_s_AvellanedaMarketMakingStrategy_c_6) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[45], &__pyx_n_s_AvellanedaMarketMakingStrategy_c_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[46], &__pyx_n_s_AvellanedaMarketMakingStrategy_c_8) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[47], &__pyx_n_s_AvellanedaMarketMakingStrategy_c_9) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[48], &__pyx_n_s_AvellanedaMarketMakingStrategy_d) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[49], &__pyx_n_s_AvellanedaMarketMakingStrategy_e) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[50], &__pyx_n_s_AvellanedaMarketMakingStrategy_f) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[51], &__pyx_n_s_AvellanedaMarketMakingStrategy_g) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[52], &__pyx_n_s_AvellanedaMarketMakingStrategy_g_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[53], &__pyx_n_s_AvellanedaMarketMakingStrategy_g_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[54], &__pyx_n_s_AvellanedaMarketMakingStrategy_g_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[55], &__pyx_n_s_AvellanedaMarketMakingStrategy_g_5) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[56], &__pyx_n_s_AvellanedaMarketMakingStrategy_g_6) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[57], &__pyx_n_s_AvellanedaMarketMakingStrategy_i) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[58], &__pyx_n_s_AvellanedaMarketMakingStrategy_i_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[59], &__pyx_n_s_AvellanedaMarketMakingStrategy_i_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[60], &__pyx_n_s_AvellanedaMarketMakingStrategy_l) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[61], &__pyx_n_s_AvellanedaMarketMakingStrategy_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[62], &__pyx_n_s_AvellanedaMarketMakingStrategy_n) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[63], &__pyx_n_s_AvellanedaMarketMakingStrategy_p) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[64], &__pyx_n_s_AvellanedaMarketMakingStrategy_r) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[65], &__pyx_n_s_AvellanedaMarketMakingStrategy_s) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[66], &__pyx_n_s_AvellanedaMarketMakingStrategy_s_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[67], &__pyx_n_s_AvellanedaMarketMakingStrategy_t) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[68], &__pyx_n_s_AvellanedaMarketMakingStrategy_v) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[69], &__pyx_n_s_BUY) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[70], &__pyx_kp_u_Best_Ask) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[71], &__pyx_kp_u_Best_Bid) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[72], &__pyx_n_s_CONNECTED) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[73], &__pyx_kp_u_Calculating_volatility) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[74], &__pyx_n_s_Clock) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[75], &__pyx_n_s_CreatedPairOfOrders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[76], &__pyx_kp_u_Creating) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[77], &__pyx_kp_u_Current) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[78], &__pyx_kp_u_Current_Value) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[79], &__pyx_n_s_DataFrame) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[80], &__pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[81], &__pyx_n_s_Dict) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[82], &__pyx_kp_s_Dict_str_List_str) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[83], &__pyx_n_u_Exchange) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[84], &__pyx_n_s_ExchangeBase) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[85], &__pyx_n_s_FileNotFoundError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[86], &__pyx_kp_u_H_M_S) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[87], &__pyx_n_s_HangingOrdersTracker) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[88], &__pyx_n_s_INFO) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[89], &__pyx_n_s_ImportError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[90], &__pyx_n_u_Inf) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[91], &__pyx_n_s_InstantVolatilityIndicator) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[92], &__pyx_n_s_LIMIT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[93], &__pyx_n_u_Level) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[94], &__pyx_n_s_LimitOrder) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[95], &__pyx_n_s_List) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[96], &__pyx_kp_s_List_Decimal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[97], &__pyx_kp_s_List_LimitOrder) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[98], &__pyx_kp_s_List_MarketTradingPairTuple) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[99], &__pyx_kp_u_Maker) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[100], &__pyx_kp_u_Maker_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[101], &__pyx_kp_u_Maker_buy_order_of) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[102], &__pyx_kp_u_Maker_sell_order_of) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[103], &__pyx_n_u_Market) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[104], &__pyx_n_s_MarketTradingPairTuple) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[105], &__pyx_kp_u_Market_connectors_are_not_ready) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[106], &__pyx_kp_u_Markets) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[107], &__pyx_kp_u_Markets_are_not_ready_No_market) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[108], &__pyx_n_u_MidPrice) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[109], &__pyx_n_s_NaN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[110], &__pyx_n_s_NetworkStatus) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[111], &__pyx_kp_u_No_active_maker_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[112], &__pyx_kp_u_None) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[113], &__pyx_n_s_OPTION_LOG_ALL) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[114], &__pyx_n_s_OPTION_LOG_CREATE_ORDER) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[115], &__pyx_n_s_OPTION_LOG_MAKER_ORDER_FILLED) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[116], &__pyx_n_s_OPTION_LOG_STATUS_REPORT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[117], &__pyx_n_s_OrderType) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[118], &__pyx_kp_u_Orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[119], &__pyx_n_u_Price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[120], &__pyx_n_s_PriceSize) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[121], &__pyx_n_s_Proposal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[122], &__pyx_n_s_RADAR_RELAY_TYPE_EXCHANGES) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[123], &__pyx_kp_u_Recycling_algorithm_time_left_an) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[124], &__pyx_kp_u_Reserved_Price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[125], &__pyx_n_s_SELL) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[126], &__pyx_n_u_Spread) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[127], &__pyx_n_s_StrategyBase) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[128], &__pyx_kp_u_Strategy_parameters) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[129], &__pyx_n_s_Timestamp) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[130], &__pyx_kp_u_Total_Balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[131], &__pyx_n_s_TradeType) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[132], &__pyx_n_s_Tuple) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[133], &__pyx_kp_s_Tuple_List_Proposal_List_Proposa) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[134], &__pyx_n_u_Type) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[135], &__pyx_n_s_TypeError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[136], &__pyx_kp_u_WARNINGS) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[137], &__pyx_kp_u_WARNING_Some_markets_are_not_con) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[138], &__pyx_n_s__133) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[139], &__pyx_kp_u__15) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[140], &__pyx_kp_u__16) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[141], &__pyx_kp_u__17) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[142], &__pyx_kp_u__19) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[143], &__pyx_kp_u__20) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[144], &__pyx_kp_u__21) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[145], &__pyx_kp_u__22) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[146], &__pyx_kp_u__23) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[147], &__pyx_kp_u__24) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[148], &__pyx_kp_u__25) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[149], &__pyx_kp_u__26) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[150], &__pyx_kp_u__27) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[151], &__pyx_kp_u__28) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[152], &__pyx_n_s__32) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[153], &__pyx_n_s__88) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[154], &__pyx_n_u_a) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[155], &__pyx_n_s_active_markets) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[156], &__pyx_n_s_active_non_hanging_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[157], &__pyx_n_s_active_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[158], &__pyx_n_s_active_orders_df) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[159], &__pyx_n_s_active_orders_df_locals_lambda) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[160], &__pyx_n_s_add_current_pairs_of_proposal_or) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[161], &__pyx_n_s_add_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[162], &__pyx_n_s_add_sample) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[163], &__pyx_n_s_add_transaction_costs_to_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[164], &__pyx_n_s_adjusted_available_balance_for_o) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[165], &__pyx_n_s_age) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[166], &__pyx_n_s_all) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[167], &__pyx_n_s_all_markets_ready) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[168], &__pyx_n_s_all_non_hanging_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[169], &__pyx_n_s_all_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[170], &__pyx_n_s_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[171], &__pyx_n_s_amount_orig) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[172], &__pyx_n_s_apply) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[173], &__pyx_n_s_apply_add_transaction_costs) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[174], &__pyx_n_s_apply_budget_constraint) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[175], &__pyx_n_s_apply_order_amount_eta_transform) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[176], &__pyx_n_s_apply_order_optimization) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[177], &__pyx_n_s_apply_order_price_modifiers) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[178], &__pyx_n_s_args) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[179], &__pyx_kp_u_ask) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[180], &__pyx_n_s_ask_level_spreads) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[181], &__pyx_kp_u_ask_orders_at_Size_Price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[182], &__pyx_n_s_ask_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[183], &__pyx_n_s_assets_df) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[184], &__pyx_n_s_asyncio_coroutines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[185], &__pyx_n_s_available_base_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[186], &__pyx_n_s_available_quote_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[187], &__pyx_n_s_balance_warning) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[188], &__pyx_n_u_bamboo_relay) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[189], &__pyx_n_s_base) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[190], &__pyx_n_s_base_asset) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[191], &__pyx_n_s_base_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[192], &__pyx_n_s_base_currency) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[193], &__pyx_n_s_base_ratio) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[194], &__pyx_n_s_base_value) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[195], &__pyx_n_s_best_ask) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[196], &__pyx_n_s_best_bid) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[197], &__pyx_kp_u_bid) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[198], &__pyx_n_s_bid_level_spreads) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[199], &__pyx_kp_u_bid_orders_at_Size_Price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[200], &__pyx_n_s_bid_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[201], &__pyx_n_s_bool) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[202], &__pyx_n_u_buy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[203], &__pyx_n_s_buys) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[204], &__pyx_n_s_calculate_reserved_price_and_opt) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[205], &__pyx_n_s_calculate_target_inventory) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[206], &__pyx_n_s_cancel_active_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[207], &__pyx_n_s_cancel_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[208], &__pyx_n_s_candidate_hanging_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[209], &__pyx_n_s_candidate_hanging_orders_from_pa) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[210], &__pyx_n_s_ceil) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[211], &__pyx_n_s_class_getitem) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[212], &__pyx_n_s_client_order_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[213], &__pyx_n_s_cline_in_traceback) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[214], &__pyx_n_s_clock) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[215], &__pyx_n_s_close) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[216], &__pyx_n_s_closing_time) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[217], &__pyx_n_s_cls) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[218], &__pyx_n_s_collect_market_variables) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[219], &__pyx_n_s_columns) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[220], &__pyx_n_s_create_base_proposal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[221], &__pyx_n_s_create_basic_proposal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[222], &__pyx_n_s_create_proposal_based_on_order_l) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[223], &__pyx_n_s_create_proposal_based_on_order_o) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[224], &__pyx_n_s_current_created_pairs_of_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[225], &__pyx_n_u_current_inv) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[226], &__pyx_n_s_current_prices) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[227], &__pyx_n_s_current_value) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[228], &__pyx_n_s_current_vol) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[229], &__pyx_n_u_current_vol_to_calculation_vol) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[230], &__pyx_n_s_data) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[231], &__pyx_n_s_datetime) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[232], &__pyx_n_s_debug_csv_path) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[233], &__pyx_n_s_decimal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[234], &__pyx_n_s_df) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[235], &__pyx_n_s_df_header) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[236], &__pyx_n_s_df_lines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[237], &__pyx_n_s_dict) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[238], &__pyx_kp_u_disable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[239], &__pyx_n_s_display_name) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[240], &__pyx_n_s_dump_debug_variables) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[241], &__pyx_n_s_e) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[242], &__pyx_kp_u_enable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[243], &__pyx_n_s_enumerate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[244], &__pyx_n_u_eta) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[245], &__pyx_n_s_execute_orders_proposal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[246], &__pyx_n_s_exists) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[247], &__pyx_n_s_exp) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[248], &__pyx_kp_u_filled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[249], &__pyx_n_s_filled_order_delay) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[250], &__pyx_n_s_first_col_length) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[251], &__pyx_n_s_float) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[252], &__pyx_n_s_floor) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[253], &__pyx_n_s_format) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[254], &__pyx_n_s_format_status) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[255], &__pyx_n_s_formatters) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[256], &__pyx_n_u_gamma) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[257], &__pyx_kp_u_gc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[258], &__pyx_n_s_genexpr) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[259], &__pyx_n_s_get) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[260], &__pyx_n_s_getLogger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[261], &__pyx_n_s_get_adjusted_available_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[262], &__pyx_n_s_get_available_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[263], &__pyx_n_s_get_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[264], &__pyx_n_s_get_last_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[265], &__pyx_n_s_get_limit_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[266], &__pyx_n_s_get_logspaced_level_spreads) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[267], &__pyx_n_s_get_maker_order_type) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[268], &__pyx_n_s_get_mid_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[269], &__pyx_n_s_get_min_and_max_spread) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[270], &__pyx_n_s_get_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[271], &__pyx_n_s_get_price_for_volume) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[272], &__pyx_n_s_get_spread) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[273], &__pyx_n_s_get_volatility) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[274], &__pyx_n_s_getstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[275], &__pyx_n_s_global_config_map) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[276], &__pyx_n_u_hang) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[277], &__pyx_n_s_hanging_orders_cancel_pct) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[278], &__pyx_n_s_hanging_orders_enabled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[279], &__pyx_n_s_hanging_orders_tracker) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[280], &__pyx_kp_u_has_been_completely_filled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[281], &__pyx_n_s_hb_app_notification) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[282], &__pyx_n_s_header) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[283], &__pyx_n_s_hummingbot_client_config_global) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[284], &__pyx_n_s_hummingbot_connector_exchange_ba) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[285], &__pyx_n_s_hummingbot_core_data_type_limit) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[286], &__pyx_n_s_hummingbot_core_event_events) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[287], &__pyx_n_s_hummingbot_core_network_iterator) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[288], &__pyx_n_s_hummingbot_core_utils) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[289], &__pyx_n_s_hummingbot_strategy___utils___tr) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[290], &__pyx_n_s_hummingbot_strategy_avellaneda_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[291], &__pyx_kp_s_hummingbot_strategy_avellaneda_m_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[292], &__pyx_n_s_hummingbot_strategy_data_types) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[293], &__pyx_n_s_hummingbot_strategy_hanging_orde) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[294], &__pyx_n_s_hummingbot_strategy_market_tradi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[295], &__pyx_n_s_hummingbot_strategy_strategy_bas) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[296], &__pyx_n_s_hummingbot_strategy_utils) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[297], &__pyx_n_s_idx) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[298], &__pyx_n_s_import) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[299], &__pyx_n_s_in_flight_cancels) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[300], &__pyx_n_s_index) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[301], &__pyx_n_s_info) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[302], &__pyx_n_s_init_params) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[303], &__pyx_n_s_initializing) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[304], &__pyx_n_s_int) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[305], &__pyx_n_s_inventory_risk_aversion) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[306], &__pyx_n_s_inventory_target_base_pct) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[307], &__pyx_n_u_inventory_target_pct) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[308], &__pyx_n_s_is_algorithm_ready) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[309], &__pyx_n_s_is_buy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[310], &__pyx_n_s_is_coroutine) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[311], &__pyx_n_s_is_debug) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[312], &__pyx_kp_u_is_filled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[313], &__pyx_n_s_is_hanging_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[314], &__pyx_n_s_is_order_id_in_completed_hanging) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[315], &__pyx_n_s_is_order_id_in_hanging_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[316], &__pyx_n_s_is_potential_hanging_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[317], &__pyx_n_s_is_sampling_buffer_full) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[318], &__pyx_n_s_is_within_tolerance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[319], &__pyx_kp_u_isenabled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[320], &__pyx_n_s_isnan) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[321], &__pyx_n_s_items) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[322], &__pyx_n_u_kappa) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[323], &__pyx_n_s_key) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[324], &__pyx_n_s_len) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[325], &__pyx_n_s_level) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[326], &__pyx_n_s_limit_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[327], &__pyx_n_s_line) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[328], &__pyx_n_s_lines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[329], &__pyx_n_s_ln) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[330], &__pyx_n_s_log) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[331], &__pyx_n_s_log_with_clock) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[332], &__pyx_n_s_logger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[333], &__pyx_n_s_logging) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[334], &__pyx_n_s_logging_options) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[335], &__pyx_n_s_logspace) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[336], &__pyx_n_s_lvl_buy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[337], &__pyx_n_s_lvl_sell) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[338], &__pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[339], &__pyx_n_s_map_df_to_str) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[340], &__pyx_n_s_market) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[341], &__pyx_n_s_market_books) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[342], &__pyx_n_s_market_info) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[343], &__pyx_n_s_market_info_to_active_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[344], &__pyx_n_s_market_pair_to_active_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[345], &__pyx_n_s_market_status_data_frame) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[346], &__pyx_n_s_market_trading_pair_tuples) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[347], &__pyx_n_s_markets_columns) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[348], &__pyx_n_s_markets_data) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[349], &__pyx_n_s_markets_df) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[350], &__pyx_n_s_math) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[351], &__pyx_n_s_max) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[352], &__pyx_n_s_max_order_age) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[353], &__pyx_n_s_max_spread) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[354], &__pyx_n_u_max_spread) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[355], &__pyx_n_s_mid_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[356], &__pyx_n_u_mid_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[357], &__pyx_kp_u_mid_price_std_dev) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[358], &__pyx_n_s_min_spread) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[359], &__pyx_n_u_min_spread) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[360], &__pyx_n_s_mode) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[361], &__pyx_n_s_msg) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[362], &__pyx_kp_u_n_a) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[363], &__pyx_n_s_name) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[364], &__pyx_n_s_name_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[365], &__pyx_n_s_nan) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[366], &__pyx_n_u_nan) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[367], &__pyx_n_s_network_status) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[368], &__pyx_n_s_network_warning) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[369], &__pyx_n_s_new_ask) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[370], &__pyx_n_s_new_bid) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[371], &__pyx_n_s_no_sells) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[372], &__pyx_n_s_non_hanging) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[373], &__pyx_n_s_normalize) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[374], &__pyx_n_s_notify_hb_app) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[375], &__pyx_n_s_notify_hb_app_with_timestamp) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[376], &__pyx_n_s_np) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[377], &__pyx_n_s_num) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[378], &__pyx_n_s_numpy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[379], &__pyx_kp_u_numpy_core_multiarray_failed_to) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[380], &__pyx_kp_u_numpy_core_umath_failed_to_impor) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[381], &__pyx_n_s_o) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[382], &__pyx_n_u_optimal_ask) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[383], &__pyx_n_s_optimal_ask_spread) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[384], &__pyx_kp_u_optimal_ask_to_mid) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[385], &__pyx_n_u_optimal_bid) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[386], &__pyx_n_s_optimal_bid_spread) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[387], &__pyx_kp_u_optimal_bid_to_mid) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[388], &__pyx_n_u_optimal_spread) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[389], &__pyx_kp_u_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[390], &__pyx_n_s_order_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[391], &__pyx_n_s_order_age) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[392], &__pyx_n_s_order_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[393], &__pyx_n_s_order_amount_shape_factor) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[394], &__pyx_n_s_order_book_depth_factor) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[395], &__pyx_kp_u_order_book_depth_factor_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[396], &__pyx_n_s_order_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[397], &__pyx_n_s_order_levels) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[398], &__pyx_n_s_order_optimization_enabled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[399], &__pyx_n_s_order_override) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[400], &__pyx_n_s_order_refresh_time) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[401], &__pyx_n_s_order_refresh_tolerance_pct) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[402], &__pyx_n_s_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[403], &__pyx_n_s_os) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[404], &__pyx_n_s_p) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[405], &__pyx_n_s_pandas) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[406], &__pyx_n_s_parameters_based_on_spread) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[407], &__pyx_n_s_path) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[408], &__pyx_n_s_pd) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[409], &__pyx_kp_s_pd_DataFrame) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[410], &__pyx_n_s_percent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[411], &__pyx_n_s_pmm_logger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[412], &__pyx_n_s_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[413], &__pyx_n_s_process_tick) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[414], &__pyx_n_s_proposal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[415], &__pyx_n_s_proposal_prices) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[416], &__pyx_n_s_pure_mm_assets_df) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[417], &__pyx_n_s_pyx_state) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[418], &__pyx_n_s_pyx_vtable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[419], &__pyx_kp_u_q) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[420], &__pyx_n_s_quantity) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[421], &__pyx_n_s_quote_asset) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[422], &__pyx_n_s_quote_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[423], &__pyx_n_s_quote_currency) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[424], &__pyx_n_s_quote_ratio) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[425], &__pyx_n_u_radar_relay) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[426], &__pyx_n_s_range) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[427], &__pyx_n_s_ready) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[428], &__pyx_n_s_recalculate_parameters) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[429], &__pyx_n_s_reduce) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[430], &__pyx_n_s_reduce_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[431], &__pyx_n_s_reduce_ex) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[432], &__pyx_n_s_ref_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[433], &__pyx_n_s_reference_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[434], &__pyx_n_s_regex) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[435], &__pyx_n_s_register_events) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[436], &__pyx_n_s_replace) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[437], &__pyx_n_u_reserved_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[438], &__pyx_n_s_result_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[439], &__pyx_n_s_return) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[440], &__pyx_n_s_reverse) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[441], &__pyx_n_s_risk_factor) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[442], &__pyx_kp_u_risk_factor_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[443], &__pyx_n_s_round) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[444], &__pyx_n_u_s) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[445], &__pyx_n_s_s_decimal_neg_one) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[446], &__pyx_n_s_s_decimal_one) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[447], &__pyx_n_s_s_decimal_zero) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[448], &__pyx_n_s_seconds) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[449], &__pyx_kp_u_seconds_to_start_trading) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[450], &__pyx_n_s_self) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[451], &__pyx_kp_s_self__events_cannot_be_converted) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[452], &__pyx_n_u_sell) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[453], &__pyx_n_s_sell_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[454], &__pyx_n_s_sells) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[455], &__pyx_n_s_send) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[456], &__pyx_n_s_set_timers) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[457], &__pyx_n_s_setstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[458], &__pyx_n_s_setstate_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[459], &__pyx_n_s_should_wait_order_cancel_confirm) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[460], &__pyx_n_s_size) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[461], &__pyx_n_s_sort) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[462], &__pyx_n_s_sorted) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[463], &__pyx_n_s_spec) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[464], &__pyx_n_s_split) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[465], &__pyx_n_s_spread) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[466], &__pyx_n_u_spread) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[467], &__pyx_n_s_start) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[468], &__pyx_n_s_status_report_interval) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[469], &__pyx_n_s_str) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[470], &__pyx_n_s_strftime) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[471], &__pyx_kp_s_stringsource) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[472], &__pyx_n_s_super) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[473], &__pyx_n_u_target_inv) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[474], &__pyx_n_s_test) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[475], &__pyx_n_s_throw) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[476], &__pyx_n_s_time) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[477], &__pyx_n_u_time_left_fraction) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[478], &__pyx_kp_u_time_until_end_of_trading_cycle) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[479], &__pyx_n_s_timedelta) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[480], &__pyx_n_s_timestamp) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[481], &__pyx_n_s_to_create_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[482], &__pyx_n_s_to_csv) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[483], &__pyx_n_s_to_show_current_pct) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[484], &__pyx_n_s_to_string) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[485], &__pyx_n_s_total_in_quote) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[486], &__pyx_n_s_trade_type) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[487], &__pyx_n_s_trading_pair) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[488], &__pyx_n_s_typing) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[489], &__pyx_n_s_unit) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[490], &__pyx_n_s_unlink) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[491], &__pyx_n_s_unregister_events) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[492], &__pyx_n_s_update_strategy_orders_with_equi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[493], &__pyx_n_s_upper) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[494], &__pyx_n_s_use_coordinator) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[495], &__pyx_n_s_value) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[496], &__pyx_n_s_values) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[497], &__pyx_kp_u_vol) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[498], &__pyx_n_s_vol_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[499], &__pyx_n_s_vol_to_spread_multiplier) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[500], &__pyx_n_u_vol_to_spread_multiplier) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[501], &__pyx_kp_u_volatility) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[502], &__pyx_n_s_volatility_buffer_size) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[503], &__pyx_n_s_volatility_diff_from_last_parame) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[504], &__pyx_n_s_volatility_pct) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[505], &__pyx_n_s_volatility_sensibility) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[506], &__pyx_n_s_warning) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[507], &__pyx_n_s_warning_lines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[508], &__pyx_n_s_x) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[509], &__pyx_n_s_zip) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  __pyx_float_1e6 = PyFloat_FromDouble(1e6); if (unlikely(!__pyx_float_1e6)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_30_0 = PyFloat_FromDouble(30.0); if (unlikely(!__pyx_float_30_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_60_0 = PyFloat_FromDouble(60.0); if (unlikely(!__pyx_float_60_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_100_0 = PyFloat_FromDouble(100.0); if (unlikely(!__pyx_float_100_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_900_0 = PyFloat_FromDouble(900.0); if (unlikely(!__pyx_float_900_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1800_0 = PyFloat_FromDouble(1800.0); if (unlikely(!__pyx_float_1800_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_8 = PyInt_FromLong(8); if (unlikely(!__pyx_int_8)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_16 = PyInt_FromLong(16); if (unlikely(!__pyx_int_16)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_30 = PyInt_FromLong(30); if (unlikely(!__pyx_int_30)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_32 = PyInt_FromLong(32); if (unlikely(!__pyx_int_32)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_100 = PyInt_FromLong(100); if (unlikely(!__pyx_int_100)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1000 = PyInt_FromLong(1000); if (unlikely(!__pyx_int_1000)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_9223372036854775807 = PyInt_FromString((char *)"9223372036854775807", 0, 0); if (unlikely(!__pyx_int_9223372036854775807)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_neg_16 = PyInt_FromLong(-16); if (unlikely(!__pyx_int_neg_16)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("hummingbot.strategy.strategy_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.strategy.strategy_base", "StrategyBase", sizeof(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase = (struct __pyx_vtabstruct_10hummingbot_8strategy_13strategy_base_StrategyBase*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase); if (unlikely(!__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy = &__pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.__pyx_base = *__pyx_vtabptr_10hummingbot_8strategy_13strategy_base_StrategyBase;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.__pyx_base.__pyx_base.c_start = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *, double))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_start;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.__pyx_base.__pyx_base.c_stop = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_stop;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.__pyx_base.__pyx_base.c_tick = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, double))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_tick;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.__pyx_base.c_did_fill_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_did_fill_order;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.__pyx_base.c_did_complete_buy_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_did_complete_buy_order;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.__pyx_base.c_did_complete_sell_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_13strategy_base_StrategyBase *, PyObject *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_did_complete_sell_order;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_get_mid_price = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_get_mid_price;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy._create_proposal_based_on_order_override = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy__create_proposal_based_on_order_override;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy._create_proposal_based_on_order_levels = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy__create_proposal_based_on_order_levels;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy._create_basic_proposal = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy__create_basic_proposal;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_create_base_proposal = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_create_base_proposal;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_get_adjusted_available_balance = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_get_adjusted_available_balance;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_apply_order_price_modifiers = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_apply_order_price_modifiers;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_apply_order_amount_eta_transformation = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_apply_order_amount_eta_transformation;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_apply_budget_constraint = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_apply_budget_constraint;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_apply_order_optimization = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_apply_order_optimization;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_apply_add_transaction_costs = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_apply_add_transaction_costs;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_is_within_tolerance = (int (*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *, PyObject *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_is_within_tolerance;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_cancel_active_orders = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_cancel_active_orders;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_cancel_active_orders_on_max_age_limit = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_cancel_active_orders_on_max_age_limit;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_to_create_orders = (int (*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_to_create_orders;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_execute_orders_proposal = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_execute_orders_proposal;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_set_timers = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_set_timers;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_get_spread = (double (*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_get_spread;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_collect_market_variables = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, double))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_collect_market_variables;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_is_algorithm_ready = (int (*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_is_algorithm_ready;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_calculate_reserved_price_and_optimal_spread = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_calculate_reserved_price_and_optimal_spread;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_calculate_target_inventory = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_calculate_target_inventory;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_recalculate_parameters = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_recalculate_parameters;
  __pyx_vtable_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.c_did_complete_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy *, PyObject *))__pyx_f_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_c_did_complete_order;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy = PyType_FromSpecWithBases(&__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy_spec, __pyx_t_2); if (unlikely(!__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  #else
  __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.tp_base = __pyx_ptype_10hummingbot_8strategy_13strategy_base_StrategyBase;
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.tp_dictoffset && __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy, __pyx_vtabptr_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.tp_dict, __pyx_vtabptr_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  if (__Pyx_MergeVtables(&__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AvellanedaMarketMakingStrategy, __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_AvellanedaMarketMakingStrategy, (PyObject *)&__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  #endif
  if (__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.tp_weaklistoffset == 0) __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy, __pyx_base.__pyx_base.__pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy;
  #else
  __pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy = &__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start = PyType_FromSpec(&__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start_spec); if (unlikely(!__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start)) __PYX_ERR(0, 545, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start) < 0) __PYX_ERR(0, 545, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start.tp_dictoffset && __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start;
  #else
  __pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start = &__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct____pyx_base____pyx_base__c_start;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr = PyType_FromSpec(&__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr_spec); if (unlikely(!__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr)) __PYX_ERR(0, 555, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr) < 0) __PYX_ERR(0, 555, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr.tp_dictoffset && __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr;
  #else
  __pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr = &__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_1_genexpr;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal = PyType_FromSpec(&__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal_spec); if (unlikely(!__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal)) __PYX_ERR(0, 1217, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal) < 0) __PYX_ERR(0, 1217, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal.tp_dictoffset && __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal;
  #else
  __pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal = &__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_2_c_execute_orders_proposal;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr = PyType_FromSpec(&__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr_spec); if (unlikely(!__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr)) __PYX_ERR(0, 1248, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr) < 0) __PYX_ERR(0, 1248, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr.tp_dictoffset && __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr;
  #else
  __pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr = &__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_3_genexpr;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr = PyType_FromSpec(&__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr_spec); if (unlikely(!__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr)) __PYX_ERR(0, 1271, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr) < 0) __PYX_ERR(0, 1271, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr.tp_dictoffset && __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr = (PyTypeObject *)__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr;
  #else
  __pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr = &__pyx_type_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making___pyx_scope_struct_4_genexpr;
  #endif
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.clock"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5clock_Clock = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.clock", "Clock", sizeof(struct __pyx_obj_10hummingbot_4core_5clock_Clock), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5clock_Clock) __PYX_ERR(3, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_listener"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_listener", "EventListener", sizeof(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener) __PYX_ERR(4, 6, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener)) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.pubsub"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_6pubsub_PubSub = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.pubsub", "PubSub", sizeof(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_6pubsub_PubSub) __PYX_ERR(5, 17, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub = (struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_6pubsub_PubSub); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub)) __PYX_ERR(5, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.time_iterator"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.time_iterator", "TimeIterator", sizeof(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator) __PYX_ERR(6, 7, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator = (struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator)) __PYX_ERR(6, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.limit_order"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.limit_order", "LimitOrder", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_11limit_order_LimitOrder), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder) __PYX_ERR(7, 6, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_9data_type_11limit_order_LimitOrder = (struct __pyx_vtabstruct_10hummingbot_4core_9data_type_11limit_order_LimitOrder*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_9data_type_11limit_order_LimitOrder); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_9data_type_11limit_order_LimitOrder)) __PYX_ERR(7, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.strategy.order_tracker"); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker = __Pyx_ImportType(__pyx_t_1, "hummingbot.strategy.order_tracker", "OrderTracker", sizeof(struct __pyx_obj_10hummingbot_8strategy_13order_tracker_OrderTracker), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker) __PYX_ERR(8, 7, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_8strategy_13order_tracker_OrderTracker = (struct __pyx_vtabstruct_10hummingbot_8strategy_13order_tracker_OrderTracker*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_8strategy_13order_tracker_OrderTracker); if (unlikely(!__pyx_vtabptr_10hummingbot_8strategy_13order_tracker_OrderTracker)) __PYX_ERR(8, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_reporter"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_reporter", "EventReporter", sizeof(struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter) __PYX_ERR(9, 4, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter)) __PYX_ERR(9, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_logger"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_logger", "EventLogger", sizeof(struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger) __PYX_ERR(10, 4, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger = (struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger)) __PYX_ERR(10, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.order_book_query_result"); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book_query_result", "OrderBookQueryResult", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult) __PYX_ERR(11, 3, __pyx_L1_error)
  __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book_query_result", "ClientOrderBookQueryResult", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult) __PYX_ERR(11, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(12, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 203, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 230, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 239, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(2, 813, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_number) __PYX_ERR(2, 815, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(2, 817, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(2, 819, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(2, 821, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(2, 823, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(2, 825, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(2, 827, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(2, 829, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_character) __PYX_ERR(2, 831, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 869, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.order_book"); if (unlikely(!__pyx_t_1)) __PYX_ERR(13, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book", "OrderBook", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook) __PYX_ERR(13, 12, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook = (struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook)) __PYX_ERR(13, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.network_iterator"); if (unlikely(!__pyx_t_1)) __PYX_ERR(14, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.network_iterator", "NetworkIterator", sizeof(struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator) __PYX_ERR(14, 6, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator = (struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator)) __PYX_ERR(14, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.connector_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(15, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.connector_base", "ConnectorBase", sizeof(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase) __PYX_ERR(15, 5, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase = (struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase); if (unlikely(!__pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase)) __PYX_ERR(15, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.exchange_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(16, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.exchange_base", "ExchangeBase", sizeof(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase) __PYX_ERR(16, 10, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase = (struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase); if (unlikely(!__pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase)) __PYX_ERR(16, 10, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_avellaneda_market_making(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_avellaneda_market_making},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "avellaneda_market_making",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_COMPILING_IN_LIMITED_API
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_COMPILING_IN_LIMITED_API
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initavellaneda_market_making(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initavellaneda_market_making(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_avellaneda_market_making(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_avellaneda_market_making(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_avellaneda_market_making(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  double __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'avellaneda_market_making' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("avellaneda_market_making", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyState_AddModule(__pyx_t_1, &__pyx_moduledef) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_avellaneda_market_making(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_hummingbot__strategy__avellaneda_market_making__avellaneda_market_making) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making")) {
      if (unlikely((PyDict_SetItemString(modules, "hummingbot.strategy.avellaneda_market_making.avellaneda_market_making", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1
 * from decimal import Decimal             # <<<<<<<<<<<<<<
 * import logging
 * import pandas as pd
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Decimal);
  __Pyx_GIVEREF(__pyx_n_s_Decimal);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Decimal);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_decimal, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Decimal, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":2
 * from decimal import Decimal
 * import logging             # <<<<<<<<<<<<<<
 * import pandas as pd
 * import numpy as np
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_logging, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_2) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":3
 * from decimal import Decimal
 * import logging
 * import pandas as pd             # <<<<<<<<<<<<<<
 * import numpy as np
 * from typing import (
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_pandas, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pd, __pyx_t_2) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":4
 * import logging
 * import pandas as pd
 * import numpy as np             # <<<<<<<<<<<<<<
 * from typing import (
 *     List,
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_numpy, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":6
 * import numpy as np
 * from typing import (
 *     List,             # <<<<<<<<<<<<<<
 *     Dict,
 *     Tuple,
 */
  __pyx_t_2 = PyList_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_List);
  __Pyx_GIVEREF(__pyx_n_s_List);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_List);
  __Pyx_INCREF(__pyx_n_s_Dict);
  __Pyx_GIVEREF(__pyx_n_s_Dict);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_Dict);
  __Pyx_INCREF(__pyx_n_s_Tuple);
  __Pyx_GIVEREF(__pyx_n_s_Tuple);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_Tuple);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":5
 * import pandas as pd
 * import numpy as np
 * from typing import (             # <<<<<<<<<<<<<<
 *     List,
 *     Dict,
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_typing, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_List); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_List, __pyx_t_2) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Dict, __pyx_t_2) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Tuple); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Tuple, __pyx_t_2) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":11
 * )
 * from math import (
 *     floor,             # <<<<<<<<<<<<<<
 *     ceil,
 *     isnan
 */
  __pyx_t_1 = PyList_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_floor);
  __Pyx_GIVEREF(__pyx_n_s_floor);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_floor);
  __Pyx_INCREF(__pyx_n_s_ceil);
  __Pyx_GIVEREF(__pyx_n_s_ceil);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_ceil);
  __Pyx_INCREF(__pyx_n_s_isnan);
  __Pyx_GIVEREF(__pyx_n_s_isnan);
  PyList_SET_ITEM(__pyx_t_1, 2, __pyx_n_s_isnan);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":10
 *     Tuple,
 * )
 * from math import (             # <<<<<<<<<<<<<<
 *     floor,
 *     ceil,
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_math, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_floor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_floor, __pyx_t_1) < 0) __PYX_ERR(0, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_ceil); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_ceil, __pyx_t_1) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_isnan); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 10, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_isnan, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":15
 *     isnan
 * )
 * import time             # <<<<<<<<<<<<<<
 * import datetime
 * import os
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_time, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_time, __pyx_t_2) < 0) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":16
 * )
 * import time
 * import datetime             # <<<<<<<<<<<<<<
 * import os
 * 
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_datetime, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_datetime, __pyx_t_2) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":17
 * import time
 * import datetime
 * import os             # <<<<<<<<<<<<<<
 * 
 * from hummingbot.client.config.global_config_map import global_config_map
 */
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_n_s_os, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_2) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":19
 * import os
 * 
 * from hummingbot.client.config.global_config_map import global_config_map             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange_base import ExchangeBase
 * from hummingbot.connector.exchange_base cimport ExchangeBase
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_global_config_map);
  __Pyx_GIVEREF(__pyx_n_s_global_config_map);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_global_config_map);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_client_config_global, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_global_config_map); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_global_config_map, __pyx_t_2) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":20
 * 
 * from hummingbot.client.config.global_config_map import global_config_map
 * from hummingbot.connector.exchange_base import ExchangeBase             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange_base cimport ExchangeBase
 * from hummingbot.core.clock cimport Clock
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_ExchangeBase);
  __Pyx_GIVEREF(__pyx_n_s_ExchangeBase);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_ExchangeBase);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_ba, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":23
 * from hummingbot.connector.exchange_base cimport ExchangeBase
 * from hummingbot.core.clock cimport Clock
 * from hummingbot.core.event.events import TradeType             # <<<<<<<<<<<<<<
 * from hummingbot.core.data_type.limit_order cimport LimitOrder
 * from hummingbot.core.data_type.limit_order import LimitOrder
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_TradeType);
  __Pyx_GIVEREF(__pyx_n_s_TradeType);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_TradeType);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_event_events, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TradeType, __pyx_t_2) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":25
 * from hummingbot.core.event.events import TradeType
 * from hummingbot.core.data_type.limit_order cimport LimitOrder
 * from hummingbot.core.data_type.limit_order import LimitOrder             # <<<<<<<<<<<<<<
 * from hummingbot.core.network_iterator import NetworkStatus
 * from hummingbot.core.event.events import OrderType
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_LimitOrder);
  __Pyx_GIVEREF(__pyx_n_s_LimitOrder);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_LimitOrder);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_data_type_limit, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":26
 * from hummingbot.core.data_type.limit_order cimport LimitOrder
 * from hummingbot.core.data_type.limit_order import LimitOrder
 * from hummingbot.core.network_iterator import NetworkStatus             # <<<<<<<<<<<<<<
 * from hummingbot.core.event.events import OrderType
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_NetworkStatus);
  __Pyx_GIVEREF(__pyx_n_s_NetworkStatus);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_NetworkStatus);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_network_iterator, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NetworkStatus, __pyx_t_2) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":27
 * from hummingbot.core.data_type.limit_order import LimitOrder
 * from hummingbot.core.network_iterator import NetworkStatus
 * from hummingbot.core.event.events import OrderType             # <<<<<<<<<<<<<<
 * 
 * from hummingbot.strategy.__utils__.trailing_indicators.instant_volatility import InstantVolatilityIndicator
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_OrderType);
  __Pyx_GIVEREF(__pyx_n_s_OrderType);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_OrderType);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_event_events, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderType, __pyx_t_1) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":29
 * from hummingbot.core.event.events import OrderType
 * 
 * from hummingbot.strategy.__utils__.trailing_indicators.instant_volatility import InstantVolatilityIndicator             # <<<<<<<<<<<<<<
 * from hummingbot.strategy.data_types import (
 *     Proposal,
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_InstantVolatilityIndicator);
  __Pyx_GIVEREF(__pyx_n_s_InstantVolatilityIndicator);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_InstantVolatilityIndicator);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_strategy___utils___tr, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_InstantVolatilityIndicator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_InstantVolatilityIndicator, __pyx_t_2) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":31
 * from hummingbot.strategy.__utils__.trailing_indicators.instant_volatility import InstantVolatilityIndicator
 * from hummingbot.strategy.data_types import (
 *     Proposal,             # <<<<<<<<<<<<<<
 *     PriceSize)
 * from hummingbot.strategy.hanging_orders_tracker import (
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Proposal);
  __Pyx_GIVEREF(__pyx_n_s_Proposal);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Proposal);
  __Pyx_INCREF(__pyx_n_s_PriceSize);
  __Pyx_GIVEREF(__pyx_n_s_PriceSize);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_PriceSize);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":30
 * 
 * from hummingbot.strategy.__utils__.trailing_indicators.instant_volatility import InstantVolatilityIndicator
 * from hummingbot.strategy.data_types import (             # <<<<<<<<<<<<<<
 *     Proposal,
 *     PriceSize)
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_strategy_data_types, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Proposal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Proposal, __pyx_t_1) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_PriceSize); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_PriceSize, __pyx_t_1) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":34
 *     PriceSize)
 * from hummingbot.strategy.hanging_orders_tracker import (
 *     CreatedPairOfOrders,             # <<<<<<<<<<<<<<
 *     HangingOrdersTracker)
 * from hummingbot.strategy.market_trading_pair_tuple import MarketTradingPairTuple
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_CreatedPairOfOrders);
  __Pyx_GIVEREF(__pyx_n_s_CreatedPairOfOrders);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_CreatedPairOfOrders);
  __Pyx_INCREF(__pyx_n_s_HangingOrdersTracker);
  __Pyx_GIVEREF(__pyx_n_s_HangingOrdersTracker);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_HangingOrdersTracker);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":33
 *     Proposal,
 *     PriceSize)
 * from hummingbot.strategy.hanging_orders_tracker import (             # <<<<<<<<<<<<<<
 *     CreatedPairOfOrders,
 *     HangingOrdersTracker)
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_strategy_hanging_orde, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_CreatedPairOfOrders); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CreatedPairOfOrders, __pyx_t_2) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_HangingOrdersTracker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HangingOrdersTracker, __pyx_t_2) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":36
 *     CreatedPairOfOrders,
 *     HangingOrdersTracker)
 * from hummingbot.strategy.market_trading_pair_tuple import MarketTradingPairTuple             # <<<<<<<<<<<<<<
 * from hummingbot.strategy.order_tracker cimport OrderTracker
 * from hummingbot.strategy.strategy_base import StrategyBase
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_MarketTradingPairTuple);
  __Pyx_GIVEREF(__pyx_n_s_MarketTradingPairTuple);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_MarketTradingPairTuple);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_strategy_market_tradi, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_MarketTradingPairTuple); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MarketTradingPairTuple, __pyx_t_1) < 0) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":38
 * from hummingbot.strategy.market_trading_pair_tuple import MarketTradingPairTuple
 * from hummingbot.strategy.order_tracker cimport OrderTracker
 * from hummingbot.strategy.strategy_base import StrategyBase             # <<<<<<<<<<<<<<
 * from hummingbot.strategy.utils import order_age
 * from hummingbot.core.utils import map_df_to_str
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_StrategyBase);
  __Pyx_GIVEREF(__pyx_n_s_StrategyBase);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_StrategyBase);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_strategy_strategy_bas, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":39
 * from hummingbot.strategy.order_tracker cimport OrderTracker
 * from hummingbot.strategy.strategy_base import StrategyBase
 * from hummingbot.strategy.utils import order_age             # <<<<<<<<<<<<<<
 * from hummingbot.core.utils import map_df_to_str
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_order_age);
  __Pyx_GIVEREF(__pyx_n_s_order_age);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_order_age);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_strategy_utils, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_order_age); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_order_age, __pyx_t_1) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":40
 * from hummingbot.strategy.strategy_base import StrategyBase
 * from hummingbot.strategy.utils import order_age
 * from hummingbot.core.utils import map_df_to_str             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_map_df_to_str);
  __Pyx_GIVEREF(__pyx_n_s_map_df_to_str);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_map_df_to_str);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_utils, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_map_df_to_str); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_map_df_to_str, __pyx_t_2) < 0) __PYX_ERR(0, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":43
 * 
 * 
 * NaN = float("nan")             # <<<<<<<<<<<<<<
 * s_decimal_zero = Decimal(0)
 * s_decimal_neg_one = Decimal(-1)
 */
  __pyx_t_3 = __Pyx_PyUnicode_AsDouble(__pyx_n_u_nan); if (unlikely(__pyx_t_3 == ((double)((double)-1)) && PyErr_Occurred())) __PYX_ERR(0, 43, __pyx_L1_error)
  __pyx_t_1 = PyFloat_FromDouble(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NaN, __pyx_t_1) < 0) __PYX_ERR(0, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":44
 * 
 * NaN = float("nan")
 * s_decimal_zero = Decimal(0)             # <<<<<<<<<<<<<<
 * s_decimal_neg_one = Decimal(-1)
 * s_decimal_one = Decimal(1)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_s_decimal_zero, __pyx_t_2) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":45
 * NaN = float("nan")
 * s_decimal_zero = Decimal(0)
 * s_decimal_neg_one = Decimal(-1)             # <<<<<<<<<<<<<<
 * s_decimal_one = Decimal(1)
 * pmm_logger = None
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_s_decimal_neg_one, __pyx_t_1) < 0) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":46
 * s_decimal_zero = Decimal(0)
 * s_decimal_neg_one = Decimal(-1)
 * s_decimal_one = Decimal(1)             # <<<<<<<<<<<<<<
 * pmm_logger = None
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_s_decimal_one, __pyx_t_2) < 0) __PYX_ERR(0, 46, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":47
 * s_decimal_neg_one = Decimal(-1)
 * s_decimal_one = Decimal(1)
 * pmm_logger = None             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pmm_logger, Py_None) < 0) __PYX_ERR(0, 47, __pyx_L1_error)

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":51
 * 
 * cdef class AvellanedaMarketMakingStrategy(StrategyBase):
 *     OPTION_LOG_CREATE_ORDER = 1 << 3             # <<<<<<<<<<<<<<
 *     OPTION_LOG_MAKER_ORDER_FILLED = 1 << 4
 *     OPTION_LOG_STATUS_REPORT = 1 << 5
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_OPTION_LOG_CREATE_ORDER, __pyx_int_8) < 0) __PYX_ERR(0, 51, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":52
 * cdef class AvellanedaMarketMakingStrategy(StrategyBase):
 *     OPTION_LOG_CREATE_ORDER = 1 << 3
 *     OPTION_LOG_MAKER_ORDER_FILLED = 1 << 4             # <<<<<<<<<<<<<<
 *     OPTION_LOG_STATUS_REPORT = 1 << 5
 *     OPTION_LOG_ALL = 0x7fffffffffffffff
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_OPTION_LOG_MAKER_ORDER_FILLED, __pyx_int_16) < 0) __PYX_ERR(0, 52, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":53
 *     OPTION_LOG_CREATE_ORDER = 1 << 3
 *     OPTION_LOG_MAKER_ORDER_FILLED = 1 << 4
 *     OPTION_LOG_STATUS_REPORT = 1 << 5             # <<<<<<<<<<<<<<
 *     OPTION_LOG_ALL = 0x7fffffffffffffff
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_OPTION_LOG_STATUS_REPORT, __pyx_int_32) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":54
 *     OPTION_LOG_MAKER_ORDER_FILLED = 1 << 4
 *     OPTION_LOG_STATUS_REPORT = 1 << 5
 *     OPTION_LOG_ALL = 0x7fffffffffffffff             # <<<<<<<<<<<<<<
 * 
 *     # These are exchanges where you're expected to expire orders instead of actively cancelling them.
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_OPTION_LOG_ALL, __pyx_int_9223372036854775807) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":57
 * 
 *     # These are exchanges where you're expected to expire orders instead of actively cancelling them.
 *     RADAR_RELAY_TYPE_EXCHANGES = {"radar_relay", "bamboo_relay"}             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PySet_Add(__pyx_t_2, __pyx_n_u_radar_relay) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  if (PySet_Add(__pyx_t_2, __pyx_n_u_bamboo_relay) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_RADAR_RELAY_TYPE_EXCHANGES, __pyx_t_2) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":59
 *     RADAR_RELAY_TYPE_EXCHANGES = {"radar_relay", "bamboo_relay"}
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls):
 *         global pmm_logger
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_1logger, __Pyx_CYFUNCTION_CLASSMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_l, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_logger, __pyx_t_2) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_logger, __pyx_t_1) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":71
 *                     order_refresh_time: float = 30.0,
 *                     max_order_age: float = 1800,
 *                     order_refresh_tolerance_pct: Decimal = s_decimal_neg_one,             # <<<<<<<<<<<<<<
 *                     order_optimization_enabled = True,
 *                     filled_order_delay: float = 60.0,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_neg_one); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k_ = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":75
 *                     filled_order_delay: float = 60.0,
 *                     order_levels: int = 0,
 *                     order_override: Dict[str, List[str]] = {},             # <<<<<<<<<<<<<<
 *                     hanging_orders_enabled: bool = False,
 *                     hanging_orders_cancel_pct: Decimal = Decimal("0.1"),
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__2 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":77
 *                     order_override: Dict[str, List[str]] = {},
 *                     hanging_orders_enabled: bool = False,
 *                     hanging_orders_cancel_pct: Decimal = Decimal("0.1"),             # <<<<<<<<<<<<<<
 *                     inventory_target_base_pct: Decimal = s_decimal_zero,
 *                     add_transaction_costs_to_orders: bool = True,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__3 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":78
 *                     hanging_orders_enabled: bool = False,
 *                     hanging_orders_cancel_pct: Decimal = Decimal("0.1"),
 *                     inventory_target_base_pct: Decimal = s_decimal_zero,             # <<<<<<<<<<<<<<
 *                     add_transaction_costs_to_orders: bool = True,
 *                     logging_options: int = OPTION_LOG_ALL,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__4 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":80
 *                     inventory_target_base_pct: Decimal = s_decimal_zero,
 *                     add_transaction_costs_to_orders: bool = True,
 *                     logging_options: int = OPTION_LOG_ALL,             # <<<<<<<<<<<<<<
 *                     status_report_interval: float = 900,
 *                     hb_app_notification: bool = False,
 */
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy, __pyx_n_s_OPTION_LOG_ALL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_k__5 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":84
 *                     hb_app_notification: bool = False,
 *                     parameters_based_on_spread: bool = True,
 *                     min_spread: Decimal = Decimal("0.15"),             # <<<<<<<<<<<<<<
 *                     max_spread: Decimal = Decimal("2"),
 *                     vol_to_spread_multiplier: Decimal = Decimal("1.3"),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__6 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":85
 *                     parameters_based_on_spread: bool = True,
 *                     min_spread: Decimal = Decimal("0.15"),
 *                     max_spread: Decimal = Decimal("2"),             # <<<<<<<<<<<<<<
 *                     vol_to_spread_multiplier: Decimal = Decimal("1.3"),
 *                     volatility_sensibility: Decimal = Decimal("0.2"),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__7 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":86
 *                     min_spread: Decimal = Decimal("0.15"),
 *                     max_spread: Decimal = Decimal("2"),
 *                     vol_to_spread_multiplier: Decimal = Decimal("1.3"),             # <<<<<<<<<<<<<<
 *                     volatility_sensibility: Decimal = Decimal("0.2"),
 *                     inventory_risk_aversion: Decimal = Decimal("0.5"),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__8 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":87
 *                     max_spread: Decimal = Decimal("2"),
 *                     vol_to_spread_multiplier: Decimal = Decimal("1.3"),
 *                     volatility_sensibility: Decimal = Decimal("0.2"),             # <<<<<<<<<<<<<<
 *                     inventory_risk_aversion: Decimal = Decimal("0.5"),
 *                     order_book_depth_factor: Decimal = Decimal("0.1"),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__42, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__9 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":88
 *                     vol_to_spread_multiplier: Decimal = Decimal("1.3"),
 *                     volatility_sensibility: Decimal = Decimal("0.2"),
 *                     inventory_risk_aversion: Decimal = Decimal("0.5"),             # <<<<<<<<<<<<<<
 *                     order_book_depth_factor: Decimal = Decimal("0.1"),
 *                     risk_factor: Decimal = Decimal("0.5"),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__10 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":89
 *                     volatility_sensibility: Decimal = Decimal("0.2"),
 *                     inventory_risk_aversion: Decimal = Decimal("0.5"),
 *                     order_book_depth_factor: Decimal = Decimal("0.1"),             # <<<<<<<<<<<<<<
 *                     risk_factor: Decimal = Decimal("0.5"),
 *                     order_amount_shape_factor: Decimal = Decimal("0.005"),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__11 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":90
 *                     inventory_risk_aversion: Decimal = Decimal("0.5"),
 *                     order_book_depth_factor: Decimal = Decimal("0.1"),
 *                     risk_factor: Decimal = Decimal("0.5"),             # <<<<<<<<<<<<<<
 *                     order_amount_shape_factor: Decimal = Decimal("0.005"),
 *                     closing_time: Decimal = Decimal("1"),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__12 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":91
 *                     order_book_depth_factor: Decimal = Decimal("0.1"),
 *                     risk_factor: Decimal = Decimal("0.5"),
 *                     order_amount_shape_factor: Decimal = Decimal("0.005"),             # <<<<<<<<<<<<<<
 *                     closing_time: Decimal = Decimal("1"),
 *                     debug_csv_path: str = '',
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__13 = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":92
 *                     risk_factor: Decimal = Decimal("0.5"),
 *                     order_amount_shape_factor: Decimal = Decimal("0.005"),
 *                     closing_time: Decimal = Decimal("1"),             # <<<<<<<<<<<<<<
 *                     debug_csv_path: str = '',
 *                     volatility_buffer_size: int = 30,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__45, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__14 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":71
 *                     order_refresh_time: float = 30.0,
 *                     max_order_age: float = 1800,
 *                     order_refresh_tolerance_pct: Decimal = s_decimal_neg_one,             # <<<<<<<<<<<<<<
 *                     order_optimization_enabled = True,
 *                     filled_order_delay: float = 60.0,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_neg_one); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":75
 *                     filled_order_delay: float = 60.0,
 *                     order_levels: int = 0,
 *                     order_override: Dict[str, List[str]] = {},             # <<<<<<<<<<<<<<
 *                     hanging_orders_enabled: bool = False,
 *                     hanging_orders_cancel_pct: Decimal = Decimal("0.1"),
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":77
 *                     order_override: Dict[str, List[str]] = {},
 *                     hanging_orders_enabled: bool = False,
 *                     hanging_orders_cancel_pct: Decimal = Decimal("0.1"),             # <<<<<<<<<<<<<<
 *                     inventory_target_base_pct: Decimal = s_decimal_zero,
 *                     add_transaction_costs_to_orders: bool = True,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_kp_u_0_1};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":78
 *                     hanging_orders_enabled: bool = False,
 *                     hanging_orders_cancel_pct: Decimal = Decimal("0.1"),
 *                     inventory_target_base_pct: Decimal = s_decimal_zero,             # <<<<<<<<<<<<<<
 *                     add_transaction_costs_to_orders: bool = True,
 *                     logging_options: int = OPTION_LOG_ALL,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_s_decimal_zero); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":80
 *                     inventory_target_base_pct: Decimal = s_decimal_zero,
 *                     add_transaction_costs_to_orders: bool = True,
 *                     logging_options: int = OPTION_LOG_ALL,             # <<<<<<<<<<<<<<
 *                     status_report_interval: float = 900,
 *                     hb_app_notification: bool = False,
 */
  __Pyx_GetNameInClass(__pyx_t_6, (PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy, __pyx_n_s_OPTION_LOG_ALL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":84
 *                     hb_app_notification: bool = False,
 *                     parameters_based_on_spread: bool = True,
 *                     min_spread: Decimal = Decimal("0.15"),             # <<<<<<<<<<<<<<
 *                     max_spread: Decimal = Decimal("2"),
 *                     vol_to_spread_multiplier: Decimal = Decimal("1.3"),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_9))) {
    __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
    if (likely(__pyx_t_10)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
      __Pyx_INCREF(__pyx_t_10);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_9, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_kp_u_0_15};
    __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":85
 *                     parameters_based_on_spread: bool = True,
 *                     min_spread: Decimal = Decimal("0.15"),
 *                     max_spread: Decimal = Decimal("2"),             # <<<<<<<<<<<<<<
 *                     vol_to_spread_multiplier: Decimal = Decimal("1.3"),
 *                     volatility_sensibility: Decimal = Decimal("0.2"),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_11 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
    if (likely(__pyx_t_11)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_10, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_kp_u_2_2};
    __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":86
 *                     min_spread: Decimal = Decimal("0.15"),
 *                     max_spread: Decimal = Decimal("2"),
 *                     vol_to_spread_multiplier: Decimal = Decimal("1.3"),             # <<<<<<<<<<<<<<
 *                     volatility_sensibility: Decimal = Decimal("0.2"),
 *                     inventory_risk_aversion: Decimal = Decimal("0.5"),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
    __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_11);
    if (likely(__pyx_t_12)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_12);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_11, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_kp_u_1_3};
    __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":87
 *                     max_spread: Decimal = Decimal("2"),
 *                     vol_to_spread_multiplier: Decimal = Decimal("1.3"),
 *                     volatility_sensibility: Decimal = Decimal("0.2"),             # <<<<<<<<<<<<<<
 *                     inventory_risk_aversion: Decimal = Decimal("0.5"),
 *                     order_book_depth_factor: Decimal = Decimal("0.1"),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __pyx_t_13 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
    __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
    if (likely(__pyx_t_13)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_13);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_12, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_kp_u_0_2};
    __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":88
 *                     vol_to_spread_multiplier: Decimal = Decimal("1.3"),
 *                     volatility_sensibility: Decimal = Decimal("0.2"),
 *                     inventory_risk_aversion: Decimal = Decimal("0.5"),             # <<<<<<<<<<<<<<
 *                     order_book_depth_factor: Decimal = Decimal("0.1"),
 *                     risk_factor: Decimal = Decimal("0.5"),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_14 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
    __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_13);
    if (likely(__pyx_t_14)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_14);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_13, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_14, __pyx_kp_u_0_5};
    __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":89
 *                     volatility_sensibility: Decimal = Decimal("0.2"),
 *                     inventory_risk_aversion: Decimal = Decimal("0.5"),
 *                     order_book_depth_factor: Decimal = Decimal("0.1"),             # <<<<<<<<<<<<<<
 *                     risk_factor: Decimal = Decimal("0.5"),
 *                     order_amount_shape_factor: Decimal = Decimal("0.005"),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_14);
  __pyx_t_15 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
    __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_14);
    if (likely(__pyx_t_15)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_15);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_14, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_kp_u_0_1};
    __pyx_t_13 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":90
 *                     inventory_risk_aversion: Decimal = Decimal("0.5"),
 *                     order_book_depth_factor: Decimal = Decimal("0.1"),
 *                     risk_factor: Decimal = Decimal("0.5"),             # <<<<<<<<<<<<<<
 *                     order_amount_shape_factor: Decimal = Decimal("0.005"),
 *                     closing_time: Decimal = Decimal("1"),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __pyx_t_16 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
    __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_15);
    if (likely(__pyx_t_16)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
      __Pyx_INCREF(__pyx_t_16);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_15, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_kp_u_0_5};
    __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":91
 *                     order_book_depth_factor: Decimal = Decimal("0.1"),
 *                     risk_factor: Decimal = Decimal("0.5"),
 *                     order_amount_shape_factor: Decimal = Decimal("0.005"),             # <<<<<<<<<<<<<<
 *                     closing_time: Decimal = Decimal("1"),
 *                     debug_csv_path: str = '',
 */
  __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __pyx_t_17 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_16))) {
    __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_16);
    if (likely(__pyx_t_17)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
      __Pyx_INCREF(__pyx_t_17);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_16, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_17, __pyx_kp_u_0_005};
    __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
    if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":92
 *                     risk_factor: Decimal = Decimal("0.5"),
 *                     order_amount_shape_factor: Decimal = Decimal("0.005"),
 *                     closing_time: Decimal = Decimal("1"),             # <<<<<<<<<<<<<<
 *                     debug_csv_path: str = '',
 *                     volatility_buffer_size: int = 30,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __pyx_t_18 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_17);
    if (likely(__pyx_t_18)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
      __Pyx_INCREF(__pyx_t_18);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_17, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_18, __pyx_kp_u_1_2};
    __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_17, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
    if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_16);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  }

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":66
 *         return pmm_logger
 * 
 *     def init_params(self,             # <<<<<<<<<<<<<<
 *                     market_info: MarketTradingPairTuple,
 *                     order_amount: Decimal,
 */
  __pyx_t_17 = PyTuple_New(28); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_17);
  __Pyx_INCREF(__pyx_float_30_0);
  __Pyx_GIVEREF(__pyx_float_30_0);
  PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_float_30_0);
  __Pyx_INCREF(__pyx_float_1800_0);
  __Pyx_GIVEREF(__pyx_float_1800_0);
  PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_float_1800_0);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_17, 2, __pyx_t_1);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_17, 3, Py_True);
  __Pyx_INCREF(__pyx_float_60_0);
  __Pyx_GIVEREF(__pyx_float_60_0);
  PyTuple_SET_ITEM(__pyx_t_17, 4, __pyx_float_60_0);
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  PyTuple_SET_ITEM(__pyx_t_17, 5, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_17, 6, __pyx_t_2);
  __Pyx_INCREF(Py_False);
  __Pyx_GIVEREF(Py_False);
  PyTuple_SET_ITEM(__pyx_t_17, 7, Py_False);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_17, 8, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_17, 9, __pyx_t_5);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_17, 10, Py_True);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_17, 11, __pyx_t_6);
  __Pyx_INCREF(__pyx_float_900_0);
  __Pyx_GIVEREF(__pyx_float_900_0);
  PyTuple_SET_ITEM(__pyx_t_17, 12, __pyx_float_900_0);
  __Pyx_INCREF(Py_False);
  __Pyx_GIVEREF(Py_False);
  PyTuple_SET_ITEM(__pyx_t_17, 13, Py_False);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_17, 14, Py_True);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_17, 15, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_17, 16, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_17, 17, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_11);
  PyTuple_SET_ITEM(__pyx_t_17, 18, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_12);
  PyTuple_SET_ITEM(__pyx_t_17, 19, __pyx_t_12);
  __Pyx_GIVEREF(__pyx_t_13);
  PyTuple_SET_ITEM(__pyx_t_17, 20, __pyx_t_13);
  __Pyx_GIVEREF(__pyx_t_14);
  PyTuple_SET_ITEM(__pyx_t_17, 21, __pyx_t_14);
  __Pyx_GIVEREF(__pyx_t_15);
  PyTuple_SET_ITEM(__pyx_t_17, 22, __pyx_t_15);
  __Pyx_GIVEREF(__pyx_t_16);
  PyTuple_SET_ITEM(__pyx_t_17, 23, __pyx_t_16);
  __Pyx_INCREF(__pyx_kp_u__15);
  __Pyx_GIVEREF(__pyx_kp_u__15);
  PyTuple_SET_ITEM(__pyx_t_17, 24, __pyx_kp_u__15);
  __Pyx_INCREF(__pyx_int_30);
  __Pyx_GIVEREF(__pyx_int_30);
  PyTuple_SET_ITEM(__pyx_t_17, 25, __pyx_int_30);
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_17, 26, Py_True);
  __Pyx_INCREF(Py_False);
  __Pyx_GIVEREF(Py_False);
  PyTuple_SET_ITEM(__pyx_t_17, 27, Py_False);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_8 = 0;
  __pyx_t_9 = 0;
  __pyx_t_10 = 0;
  __pyx_t_11 = 0;
  __pyx_t_12 = 0;
  __pyx_t_13 = 0;
  __pyx_t_14 = 0;
  __pyx_t_15 = 0;
  __pyx_t_16 = 0;
  __pyx_t_16 = __Pyx_PyDict_NewPresized(28); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_market_info, __pyx_n_s_MarketTradingPairTuple) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_order_amount, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_order_refresh_time, __pyx_n_s_float) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_max_order_age, __pyx_n_s_float) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_order_refresh_tolerance_pct, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_filled_order_delay, __pyx_n_s_float) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_order_levels, __pyx_n_s_int) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_order_override, __pyx_kp_s_Dict_str_List_str) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_hanging_orders_enabled, __pyx_n_s_bool) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_hanging_orders_cancel_pct, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_inventory_target_base_pct, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_add_transaction_costs_to_orders, __pyx_n_s_bool) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_logging_options, __pyx_n_s_int) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_status_report_interval, __pyx_n_s_float) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_hb_app_notification, __pyx_n_s_bool) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_parameters_based_on_spread, __pyx_n_s_bool) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_min_spread, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_max_spread, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_vol_to_spread_multiplier, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_volatility_sensibility, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_inventory_risk_aversion, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_order_book_depth_factor, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_risk_factor, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_order_amount_shape_factor, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_closing_time, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_debug_csv_path, __pyx_n_s_str) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_volatility_buffer_size, __pyx_n_s_int) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_is_debug, __pyx_n_s_bool) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_3init_params, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_i, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_15, __pyx_t_17);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_15, __pyx_t_16);
  __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_init_params, __pyx_t_15) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":155
 *             pass
 * 
 *     def all_markets_ready(self):             # <<<<<<<<<<<<<<
 *         return all([market.ready for market in self._sb_markets])
 * 
 */
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_5all_markets_ready, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_a, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_all_markets_ready, __pyx_t_15) < 0) __PYX_ERR(0, 155, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":370
 *         return self._closing_time
 * 
 *     def get_price(self) -> float:             # <<<<<<<<<<<<<<
 *         return self.get_mid_price()
 * 
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_return, __pyx_n_s_float) < 0) __PYX_ERR(0, 370, __pyx_L1_error)
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_7get_price, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_g, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__51)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_16, __pyx_t_15);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_get_price, __pyx_t_16) < 0) __PYX_ERR(0, 370, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":373
 *         return self.get_mid_price()
 * 
 *     def get_last_price(self) -> float:             # <<<<<<<<<<<<<<
 *         return self._market_info.get_last_price()
 * 
 */
  __pyx_t_16 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_return, __pyx_n_s_float) < 0) __PYX_ERR(0, 373, __pyx_L1_error)
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_9get_last_price, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_g_2, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__53)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_15, __pyx_t_16);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_get_last_price, __pyx_t_15) < 0) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":376
 *         return self._market_info.get_last_price()
 * 
 *     def get_mid_price(self) -> float:             # <<<<<<<<<<<<<<
 *         return self.c_get_mid_price()
 * 
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_return, __pyx_n_s_float) < 0) __PYX_ERR(0, 376, __pyx_L1_error)
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_11get_mid_price, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_g_3, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__55)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_16, __pyx_t_15);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_get_mid_price, __pyx_t_16) < 0) __PYX_ERR(0, 376, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":417
 *         return self._hanging_orders_tracker
 * 
 *     def pure_mm_assets_df(self, to_show_current_pct: bool) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         market, trading_pair, base_asset, quote_asset = self._market_info
 *         price = self._market_info.get_mid_price()
 */
  __pyx_t_16 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_to_show_current_pct, __pyx_n_s_bool) < 0) __PYX_ERR(0, 417, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_return, __pyx_kp_s_pd_DataFrame) < 0) __PYX_ERR(0, 417, __pyx_L1_error)
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_13pure_mm_assets_df, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_p, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__57)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_15, __pyx_t_16);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_pure_mm_assets_df, __pyx_t_15) < 0) __PYX_ERR(0, 417, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":439
 *         return df
 * 
 *     def active_orders_df(self) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         market, trading_pair, base_asset, quote_asset = self._market_info
 *         price = self.get_price()
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_return, __pyx_kp_s_pd_DataFrame) < 0) __PYX_ERR(0, 439, __pyx_L1_error)
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_15active_orders_df, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_a_2, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_16, __pyx_t_15);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_active_orders_df, __pyx_t_16) < 0) __PYX_ERR(0, 439, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":481
 *         return pd.DataFrame(data=data, columns=columns)
 * 
 *     def market_status_data_frame(self, market_trading_pair_tuples: List[MarketTradingPairTuple]) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         markets_data = []
 *         markets_columns = ["Exchange", "Market", "Best Bid", "Best Ask", f"MidPrice"]
 */
  __pyx_t_16 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_market_trading_pair_tuples, __pyx_kp_s_List_MarketTradingPairTuple) < 0) __PYX_ERR(0, 481, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_return, __pyx_kp_s_pd_DataFrame) < 0) __PYX_ERR(0, 481, __pyx_L1_error)
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_17market_status_data_frame, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_m, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__61)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_15, __pyx_t_16);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_market_status_data_frame, __pyx_t_15) < 0) __PYX_ERR(0, 481, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":500
 *         return pd.DataFrame(data=markets_data, columns=markets_columns).replace(np.nan, '', regex=True)
 * 
 *     def format_status(self) -> str:             # <<<<<<<<<<<<<<
 *         if not self._all_markets_ready:
 *             return "Market connectors are not ready."
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_return, __pyx_n_s_str) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_19format_status, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_f, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_16, __pyx_t_15);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_format_status, __pyx_t_16) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":539
 *         return "\n".join(lines)
 * 
 *     def execute_orders_proposal(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_execute_orders_proposal(proposal)
 * 
 */
  __pyx_t_16 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_proposal, __pyx_n_s_Proposal) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_21execute_orders_proposal, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_e, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__65)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_15, __pyx_t_16);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_execute_orders_proposal, __pyx_t_15) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":542
 *         return self.c_execute_orders_proposal(proposal)
 * 
 *     def cancel_order(self, order_id: str):             # <<<<<<<<<<<<<<
 *         return self.c_cancel_order(self._market_info, order_id)
 * 
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_order_id, __pyx_n_s_str) < 0) __PYX_ERR(0, 542, __pyx_L1_error)
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_23cancel_order, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_c_4, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__67)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_16, __pyx_t_15);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_cancel_order, __pyx_t_16) < 0) __PYX_ERR(0, 542, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":562
 *         self._time_left = self._closing_time
 * 
 *     def start(self, clock: Clock, timestamp: float):             # <<<<<<<<<<<<<<
 *         self.c_start(clock, timestamp)
 * 
 */
  __pyx_t_16 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_clock, __pyx_n_s_Clock) < 0) __PYX_ERR(0, 562, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_timestamp, __pyx_n_s_float) < 0) __PYX_ERR(0, 562, __pyx_L1_error)
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_25start, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_s, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_15, __pyx_t_16);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_start, __pyx_t_15) < 0) __PYX_ERR(0, 562, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":649
 *             self.logger().info("Recycling algorithm time left and parameters if needed.")
 * 
 *     def collect_market_variables(self, timestamp: float):             # <<<<<<<<<<<<<<
 *         self.c_collect_market_variables(timestamp)
 * 
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_timestamp, __pyx_n_s_float) < 0) __PYX_ERR(0, 649, __pyx_L1_error)
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_27collect_market_variables, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_c_5, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_16, __pyx_t_15);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_collect_market_variables, __pyx_t_16) < 0) __PYX_ERR(0, 649, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":652
 *         self.c_collect_market_variables(timestamp)
 * 
 *     def volatility_diff_from_last_parameter_calculation(self, current_vol) -> Decimal:             # <<<<<<<<<<<<<<
 *         if self._latest_parameter_calculation_vol == 0:
 *             return s_decimal_zero
 */
  __pyx_t_16 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_return, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 652, __pyx_L1_error)
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_29volatility_diff_from_last_parameter_calculation, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_v, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__73)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_15, __pyx_t_16);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_volatility_diff_from_last_parame, __pyx_t_15) < 0) __PYX_ERR(0, 652, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":664
 *         return market.c_get_price(trading_pair, True) - market.c_get_price(trading_pair, False)
 * 
 *     def get_spread(self):             # <<<<<<<<<<<<<<
 *         return self.c_get_spread()
 * 
 */
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_31get_spread, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_g_4, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__75)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_get_spread, __pyx_t_15) < 0) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":667
 *         return self.c_get_spread()
 * 
 *     def get_volatility(self):             # <<<<<<<<<<<<<<
 *         vol = Decimal(str(self._avg_vol.current_value))
 *         if vol == s_decimal_zero:
 */
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_33get_volatility, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_g_5, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_get_volatility, __pyx_t_15) < 0) __PYX_ERR(0, 667, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":719
 *                                    f"vol={vol:.4f}")
 * 
 *     def calculate_reserved_price_and_optimal_spread(self):             # <<<<<<<<<<<<<<
 *         return self.c_calculate_reserved_price_and_optimal_spread()
 * 
 */
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_35calculate_reserved_price_and_optimal_spread, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_c_6, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_calculate_reserved_price_and_opt, __pyx_t_15) < 0) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":741
 *         return market.c_quantize_order_amount(trading_pair, Decimal(str(target_inventory_value / price)))
 * 
 *     def calculate_target_inventory(self) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_calculate_target_inventory()
 * 
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_return, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 741, __pyx_L1_error)
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_37calculate_target_inventory, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_c_7, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__81)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_16, __pyx_t_15);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_calculate_target_inventory, __pyx_t_16) < 0) __PYX_ERR(0, 741, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":744
 *         return self.c_calculate_target_inventory()
 * 
 *     def _get_min_and_max_spread(self):             # <<<<<<<<<<<<<<
 *         vol = self.get_volatility()
 *         price = self.get_price()
 */
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_39_get_min_and_max_spread, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_2, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_get_min_and_max_spread, __pyx_t_16) < 0) __PYX_ERR(0, 744, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":788
 *             self._latest_parameter_calculation_vol = vol
 * 
 *     def recalculate_parameters(self):             # <<<<<<<<<<<<<<
 *         return self.c_recalculate_parameters()
 * 
 */
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_41recalculate_parameters, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_r, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__85)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_recalculate_parameters, __pyx_t_16) < 0) __PYX_ERR(0, 788, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":794
 *         return self._avg_vol.is_sampling_buffer_full
 * 
 *     def is_algorithm_ready(self) -> bool:             # <<<<<<<<<<<<<<
 *         return self.c_is_algorithm_ready()
 * 
 */
  __pyx_t_16 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_return, __pyx_n_s_bool) < 0) __PYX_ERR(0, 794, __pyx_L1_error)
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_43is_algorithm_ready, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_i_2, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_15, __pyx_t_16);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_is_algorithm_ready, __pyx_t_15) < 0) __PYX_ERR(0, 794, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":797
 *         return self.c_is_algorithm_ready()
 * 
 *     def _get_logspaced_level_spreads(self, ):             # <<<<<<<<<<<<<<
 *         reference_price = self.get_price()
 *         _, max_spread = self._get_min_and_max_spread()
 */
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_45_get_logspaced_level_spreads, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_3, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__90)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_get_logspaced_level_spreads, __pyx_t_15) < 0) __PYX_ERR(0, 797, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":829
 *         return buys, sells
 * 
 *     def create_proposal_based_on_order_override(self) -> Tuple[List[Proposal], List[Proposal]]:             # <<<<<<<<<<<<<<
 *         return self._create_proposal_based_on_order_override()
 * 
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_return, __pyx_kp_s_Tuple_List_Proposal_List_Proposa) < 0) __PYX_ERR(0, 829, __pyx_L1_error)
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_47create_proposal_based_on_order_override, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_c_8, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__92)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_16, __pyx_t_15);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_create_proposal_based_on_order_o, __pyx_t_16) < 0) __PYX_ERR(0, 829, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":850
 *         return buys, sells
 * 
 *     def create_proposal_based_on_order_levels(self):             # <<<<<<<<<<<<<<
 *         return self._create_proposal_based_on_order_levels()
 * 
 */
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_49create_proposal_based_on_order_levels, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_c_9, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__94)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_create_proposal_based_on_order_l, __pyx_t_16) < 0) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":869
 *         return buys, sells
 * 
 *     def create_basic_proposal(self):             # <<<<<<<<<<<<<<
 *         return self._create_basic_proposal()
 * 
 */
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_51create_basic_proposal, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_c_10, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__96)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_create_basic_proposal, __pyx_t_16) < 0) __PYX_ERR(0, 869, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":890
 *         return Proposal(buys, sells)
 * 
 *     def create_base_proposal(self):             # <<<<<<<<<<<<<<
 *         return self.c_create_base_proposal()
 * 
 */
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_53create_base_proposal, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_c_11, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__98)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_create_base_proposal, __pyx_t_16) < 0) __PYX_ERR(0, 890, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":911
 *         return base_balance, quote_balance
 * 
 *     def get_adjusted_available_balance(self, orders: List[LimitOrder]):             # <<<<<<<<<<<<<<
 *         return self.c_get_adjusted_available_balance(orders)
 * 
 */
  __pyx_t_16 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_orders, __pyx_kp_s_List_LimitOrder) < 0) __PYX_ERR(0, 911, __pyx_L1_error)
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_55get_adjusted_available_balance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_g_6, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__100)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_15, __pyx_t_16);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_get_adjusted_available_balance, __pyx_t_15) < 0) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":921
 *             self.c_apply_add_transaction_costs(proposal)
 * 
 *     def apply_order_price_modifiers(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         self.c_apply_order_price_modifiers(proposal)
 * 
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_proposal, __pyx_n_s_Proposal) < 0) __PYX_ERR(0, 921, __pyx_L1_error)
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_57apply_order_price_modifiers, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_a_3, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__102)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_16, __pyx_t_15);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_apply_order_price_modifiers, __pyx_t_16) < 0) __PYX_ERR(0, 921, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":924
 *         self.c_apply_order_price_modifiers(proposal)
 * 
 *     def apply_budget_constraint(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_apply_budget_constraint(proposal)
 * 
 */
  __pyx_t_16 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_proposal, __pyx_n_s_Proposal) < 0) __PYX_ERR(0, 924, __pyx_L1_error)
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_59apply_budget_constraint, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_a_4, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__104)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_15, __pyx_t_16);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_apply_budget_constraint, __pyx_t_15) < 0) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":927
 *         return self.c_apply_budget_constraint(proposal)
 * 
 *     def adjusted_available_balance_for_orders_budget_constrain(self):             # <<<<<<<<<<<<<<
 *         candidate_hanging_orders = self.hanging_orders_tracker.candidate_hanging_orders_from_pairs()
 *         non_hanging = []
 */
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_61adjusted_available_balance_for_orders_budget_constrain, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_a_5, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__106)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_adjusted_available_balance_for_o, __pyx_t_15) < 0) __PYX_ERR(0, 927, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":979
 *         proposal.sells = [o for o in proposal.sells if o.size > 0]
 * 
 *     def apply_budget_constraint(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_apply_budget_constraint(proposal)
 * 
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_proposal, __pyx_n_s_Proposal) < 0) __PYX_ERR(0, 979, __pyx_L1_error)
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_63apply_budget_constraint, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_a_4, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__108)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 979, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_16, __pyx_t_15);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_apply_budget_constraint, __pyx_t_16) < 0) __PYX_ERR(0, 979, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1032
 *                     proposal.sells[i].price = market.c_quantize_order_price(self.trading_pair, price_below_ask)
 * 
 *     def apply_order_optimization(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_apply_order_optimization(proposal)
 * 
 */
  __pyx_t_16 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_proposal, __pyx_n_s_Proposal) < 0) __PYX_ERR(0, 1032, __pyx_L1_error)
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_65apply_order_optimization, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_a_6, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__110)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_15, __pyx_t_16);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_apply_order_optimization, __pyx_t_15) < 0) __PYX_ERR(0, 1032, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1058
 *                     proposal.sells = [o for o in proposal.sells if o.size > 0]
 * 
 *     def apply_order_amount_eta_transformation(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         self.c_apply_order_amount_eta_transformation(proposal)
 * 
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_proposal, __pyx_n_s_Proposal) < 0) __PYX_ERR(0, 1058, __pyx_L1_error)
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_67apply_order_amount_eta_transformation, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_a_7, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__112)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_16, __pyx_t_15);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_apply_order_amount_eta_transform, __pyx_t_16) < 0) __PYX_ERR(0, 1058, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1075
 *             sell.price = market.c_quantize_order_price(self.trading_pair, price)
 * 
 *     def apply_add_transaction_costs(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         self.c_apply_add_transaction_costs(proposal)
 * 
 */
  __pyx_t_16 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_proposal, __pyx_n_s_Proposal) < 0) __PYX_ERR(0, 1075, __pyx_L1_error)
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_69apply_add_transaction_costs, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_a_8, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__114)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_15, __pyx_t_16);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_apply_add_transaction_costs, __pyx_t_15) < 0) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1156
 *         return True
 * 
 *     def is_within_tolerance(self, current_prices: List[Decimal], proposal_prices: List[Decimal]) -> bool:             # <<<<<<<<<<<<<<
 *         return self.c_is_within_tolerance(current_prices, proposal_prices)
 * 
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_current_prices, __pyx_kp_s_List_Decimal) < 0) __PYX_ERR(0, 1156, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_proposal_prices, __pyx_kp_s_List_Decimal) < 0) __PYX_ERR(0, 1156, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_return, __pyx_n_s_bool) < 0) __PYX_ERR(0, 1156, __pyx_L1_error)
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_71is_within_tolerance, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_i_3, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__116)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_16, __pyx_t_15);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_is_within_tolerance, __pyx_t_16) < 0) __PYX_ERR(0, 1156, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1201
 *             self.c_set_timers()
 * 
 *     def cancel_active_orders(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         return self.c_cancel_active_orders(proposal)
 * 
 */
  __pyx_t_16 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_proposal, __pyx_n_s_Proposal) < 0) __PYX_ERR(0, 1201, __pyx_L1_error)
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_73cancel_active_orders, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_c_12, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__118)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_15, __pyx_t_16);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_cancel_active_orders, __pyx_t_15) < 0) __PYX_ERR(0, 1201, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1214
 *                 and len(non_hanging_orders_non_cancelled) == 0)
 * 
 *     def to_create_orders(self, proposal: Proposal) -> bool:             # <<<<<<<<<<<<<<
 *         return self.c_to_create_orders(proposal)
 * 
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_proposal, __pyx_n_s_Proposal) < 0) __PYX_ERR(0, 1214, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_return, __pyx_n_s_bool) < 0) __PYX_ERR(0, 1214, __pyx_L1_error)
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_75to_create_orders, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_t, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__120)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_16, __pyx_t_15);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_to_create_orders, __pyx_t_16) < 0) __PYX_ERR(0, 1214, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1277
 *             self.c_set_timers()
 * 
 *     def execute_orders_proposal(self, proposal: Proposal):             # <<<<<<<<<<<<<<
 *         self.c_execute_orders_proposal(proposal)
 * 
 */
  __pyx_t_16 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_proposal, __pyx_n_s_Proposal) < 0) __PYX_ERR(0, 1277, __pyx_L1_error)
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_77execute_orders_proposal, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_e, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__122)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_15, __pyx_t_16);
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_execute_orders_proposal, __pyx_t_15) < 0) __PYX_ERR(0, 1277, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1287
 *             self._cancel_timestamp = min(self._create_timestamp, next_cycle)
 * 
 *     def set_timers(self):             # <<<<<<<<<<<<<<
 *         self.c_set_timers()
 * 
 */
  __pyx_t_15 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_79set_timers, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_s_2, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__124)); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_set_timers, __pyx_t_15) < 0) __PYX_ERR(0, 1287, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1290
 *         self.c_set_timers()
 * 
 *     def notify_hb_app(self, msg: str):             # <<<<<<<<<<<<<<
 *         if self._hb_app_notification:
 *             super().notify_hb_app(msg)
 */
  __pyx_t_15 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_15);
  if (PyDict_SetItem(__pyx_t_15, __pyx_n_s_msg, __pyx_n_s_str) < 0) __PYX_ERR(0, 1290, __pyx_L1_error)
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_81notify_hb_app, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_n, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__126)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_16, __pyx_t_15);
  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_notify_hb_app, __pyx_t_16) < 0) __PYX_ERR(0, 1290, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1294
 *             super().notify_hb_app(msg)
 * 
 *     def dump_debug_variables(self):             # <<<<<<<<<<<<<<
 *         market = self._market_info.market
 *         mid_price = self.get_price()
 */
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_83dump_debug_variables, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_d, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__128)); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy->tp_dict, __pyx_n_s_dump_debug_variables, __pyx_t_16) < 0) __PYX_ERR(0, 1294, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_AvellanedaMarketMakingStrategy);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_85__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_4, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__130)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_16) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __pyx_t_16 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_8strategy_24avellaneda_market_making_24avellaneda_market_making_30AvellanedaMarketMakingStrategy_87__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_AvellanedaMarketMakingStrategy_5, NULL, __pyx_n_s_hummingbot_strategy_avellaneda_m, __pyx_d, ((PyObject *)__pyx_codeobj__132)); if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_16) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "hummingbot/strategy/avellaneda_market_making/avellaneda_market_making.pyx":1
 * from decimal import Decimal             # <<<<<<<<<<<<<<
 * import logging
 * import pandas as pd
 */
  __pyx_t_16 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_16);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_16) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1051
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init hummingbot.strategy.avellaneda_market_making.avellaneda_market_making", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(__pyx_m);
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init hummingbot.strategy.avellaneda_market_making.avellaneda_market_making");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;  // error
            return kwvalues[i];
        }
    }
    return NULL;  // not found (no exception set)
}
#endif

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        if (unlikely(PyTuple_GET_SIZE(kw) == 0))
            return 1;
        if (!kw_allowed) {
            key = PyTuple_GET_ITEM(kw, 0);
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < PyTuple_GET_SIZE(kw); pos++) {
            key = PyTuple_GET_ITEM(kw, pos);
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]);
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
    Py_DECREF(argstuple);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
#ifdef __Pyx_CyFunction_USED
        if (__Pyx_IsCyOrPyCFunction(func))
#else
        if (PyCFunction_Check(func))
#endif
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
                return __Pyx_PyObject_CallMethO(func, NULL);
            }
        }
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (PyCFunction_Check(func))
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
                return __Pyx_PyObject_CallMethO(func, args[0]);
            }
        }
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    #if CYTHON_VECTORCALL
    vectorcallfunc f = _PyVectorcall_Function(func);
    if (f) {
        return f(func, args, (size_t)nargs, kwargs);
    }
    #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
    if (__Pyx_CyFunction_CheckExact(func)) {
        __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
        if (f) return f(func, args, (size_t)nargs, kwargs);
    }
    #endif
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
}

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        if (kwds_is_tuple) {
            if (pos >= PyTuple_GET_SIZE(kwds)) break;
            key = PyTuple_GET_ITEM(kwds, pos);
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg = NULL;
    return __Pyx_PyObject_FastCall(func, (&arg)+1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* set_iter */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set) {
#if CYTHON_COMPILING_IN_CPYTHON
    is_set = is_set || likely(PySet_CheckExact(iterable) || PyFrozenSet_CheckExact(iterable));
    *p_source_is_set = is_set;
    if (likely(is_set)) {
        *p_orig_length = PySet_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#else
    (void)is_set;
    *p_source_is_set = 0;
#endif
    *p_orig_length = 0;
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set) {
    if (!CYTHON_COMPILING_IN_CPYTHON || unlikely(!source_is_set)) {
        *value = PyIter_Next(iter_obj);
        if (unlikely(!*value)) {
            return __Pyx_IterFinish();
        }
        (void)orig_length;
        (void)ppos;
        return 1;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(PySet_GET_SIZE(iter_obj) != orig_length)) {
        PyErr_SetString(
            PyExc_RuntimeError,
            "set changed size during iteration");
        return -1;
    }
    {
        Py_hash_t hash;
        int ret = _PySet_NextEntry(iter_obj, ppos, value, &hash);
        assert (ret != -1);
        if (likely(ret)) {
            Py_INCREF(*value);
            return 1;
        }
    }
#endif
    return 0;
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyInt_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* ObjectGetItem */
#if CYTHON_USE_TYPE_SLOTS
static PyObject *__Pyx_PyObject_GetIndex(PyObject *obj, PyObject *index) {
    PyObject *runerr;
    Py_ssize_t key_value;
    key_value = __Pyx_PyIndex_AsSsize_t(index);
    if (likely(key_value != -1 || !(runerr = PyErr_Occurred()))) {
        return __Pyx_GetItemInt_Fast(obj, key_value, 0, 1, 1);
    }
    if (PyErr_GivenExceptionMatches(runerr, PyExc_OverflowError)) {
        __Pyx_TypeName index_type_name = __Pyx_PyType_GetName(Py_TYPE(index));
        PyErr_Clear();
        PyErr_Format(PyExc_IndexError,
            "cannot fit '" __Pyx_FMT_TYPENAME "' into an index-sized integer", index_type_name);
        __Pyx_DECREF_TypeName(index_type_name);
    }
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem_Slow(PyObject *obj, PyObject *key) {
    __Pyx_TypeName obj_type_name;
    if (likely(PyType_Check(obj))) {
        PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(obj, __pyx_n_s_class_getitem);
        if (meth) {
            PyObject *result = __Pyx_PyObject_CallOneArg(meth, key);
            Py_DECREF(meth);
            return result;
        }
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not subscriptable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static PyObject *__Pyx_PyObject_GetItem(PyObject *obj, PyObject *key) {
    PyTypeObject *tp = Py_TYPE(obj);
    PyMappingMethods *mm = tp->tp_as_mapping;
    PySequenceMethods *sm = tp->tp_as_sequence;
    if (likely(mm && mm->mp_subscript)) {
        return mm->mp_subscript(obj, key);
    }
    if (likely(sm && sm->sq_item)) {
        return __Pyx_PyObject_GetIndex(obj, key);
    }
    return __Pyx_PyObject_GetItem_Slow(obj, key);
}
#endif

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* pybytes_as_double */
static double __Pyx_SlowPyString_AsDouble(PyObject *obj) {
    PyObject *float_value;
#if PY_MAJOR_VERSION >= 3
    float_value = PyFloat_FromString(obj);
#else
    float_value = PyFloat_FromString(obj, 0);
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
    return (double)-1;
}
static const char* __Pyx__PyBytes_AsDouble_Copy(const char* start, char* buffer, Py_ssize_t length) {
    int last_was_punctuation = 1;
    Py_ssize_t i;
    for (i=0; i < length; i++) {
        char chr = start[i];
        int is_punctuation = (chr == '_') | (chr == '.') | (chr == 'e') | (chr == 'E');
        *buffer = chr;
        buffer += (chr != '_');
        if (unlikely(last_was_punctuation & is_punctuation)) goto parse_failure;
        last_was_punctuation = is_punctuation;
    }
    if (unlikely(last_was_punctuation)) goto parse_failure;
    *buffer = '\0';
    return buffer;
parse_failure:
    return NULL;
}
static double __Pyx__PyBytes_AsDouble_inf_nan(const char* start, Py_ssize_t length) {
    int matches = 1;
    char sign = start[0];
    int is_signed = (sign == '+') | (sign == '-');
    start += is_signed;
    length -= is_signed;
    switch (start[0]) {
        #ifdef Py_NAN
        case 'n':
        case 'N':
            if (unlikely(length != 3)) goto parse_failure;
            matches &= (start[1] == 'a' || start[1] == 'A');
            matches &= (start[2] == 'n' || start[2] == 'N');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_NAN : Py_NAN;
        #endif
        case 'i':
        case 'I':
            if (unlikely(length < 3)) goto parse_failure;
            matches &= (start[1] == 'n' || start[1] == 'N');
            matches &= (start[2] == 'f' || start[2] == 'F');
            if (likely(length == 3 && matches))
                return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
            if (unlikely(length != 8)) goto parse_failure;
            matches &= (start[3] == 'i' || start[3] == 'I');
            matches &= (start[4] == 'n' || start[4] == 'N');
            matches &= (start[5] == 'i' || start[5] == 'I');
            matches &= (start[6] == 't' || start[6] == 'T');
            matches &= (start[7] == 'y' || start[7] == 'Y');
            if (unlikely(!matches)) goto parse_failure;
            return (sign == '-') ? -Py_HUGE_VAL : Py_HUGE_VAL;
        case '.': case '0': case '1': case '2': case '3': case '4': case '5': case '6': case '7': case '8': case '9':
            break;
        default:
            goto parse_failure;
    }
    return 0.0;
parse_failure:
    return -1.0;
}
static CYTHON_INLINE int __Pyx__PyBytes_AsDouble_IsSpace(char ch) {
    return (ch == 0x20) | !((ch < 0x9) | (ch > 0xd));
}
static CYTHON_UNUSED double __Pyx__PyBytes_AsDouble(PyObject *obj, const char* start, Py_ssize_t length) {
    double value;
    Py_ssize_t i, digits;
    const char *last = start + length;
    char *end;
    while (__Pyx__PyBytes_AsDouble_IsSpace(*start))
        start++;
    while (start < last - 1 && __Pyx__PyBytes_AsDouble_IsSpace(last[-1]))
        last--;
    length = last - start;
    if (unlikely(length <= 0)) goto fallback;
    value = __Pyx__PyBytes_AsDouble_inf_nan(start, length);
    if (unlikely(value == -1.0)) goto fallback;
    if (value != 0.0) return value;
    digits = 0;
    for (i=0; i < length; digits += start[i++] != '_');
    if (likely(digits == length)) {
        value = PyOS_string_to_double(start, &end, NULL);
    } else if (digits < 40) {
        char number[40];
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) goto fallback;
        value = PyOS_string_to_double(number, &end, NULL);
    } else {
        char *number = (char*) PyMem_Malloc((digits + 1) * sizeof(char));
        if (unlikely(!number)) goto fallback;
        last = __Pyx__PyBytes_AsDouble_Copy(start, number, length);
        if (unlikely(!last)) {
            PyMem_Free(number);
            goto fallback;
        }
        value = PyOS_string_to_double(number, &end, NULL);
        PyMem_Free(number);
    }
    if (likely(end == last) || (value == (double)-1 && PyErr_Occurred())) {
        return value;
    }
fallback:
    return __Pyx_SlowPyString_AsDouble(obj);
}

/* pyobject_as_double */
static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    if (PyUnicode_CheckExact(obj)) {
        return __Pyx_PyUnicode_AsDouble(obj);
    } else if (PyBytes_CheckExact(obj)) {
        return __Pyx_PyBytes_AsDouble(obj);
    } else if (PyByteArray_CheckExact(obj)) {
        return __Pyx_PyByteArray_AsDouble(obj);
    } else {
        PyObject* float_value;
#if !CYTHON_USE_TYPE_SLOTS
        float_value = PyNumber_Float(obj);  if ((0)) goto bad;
        (void)__Pyx_PyObject_CallOneArg;
#else
        PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
        if (likely(nb) && likely(nb->nb_float)) {
            float_value = nb->nb_float(obj);
            if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
                __Pyx_TypeName float_value_type_name = __Pyx_PyType_GetName(Py_TYPE(float_value));
                PyErr_Format(PyExc_TypeError,
                    "__float__ returned non-float (type " __Pyx_FMT_TYPENAME ")",
                    float_value_type_name);
                __Pyx_DECREF_TypeName(float_value_type_name);
                Py_DECREF(float_value);
                goto bad;
            }
        } else {
            float_value = __Pyx_PyObject_CallOneArg((PyObject*)&PyFloat_Type, obj);
        }
#endif
        if (likely(float_value)) {
            double value = PyFloat_AS_DOUBLE(float_value);
            Py_DECREF(float_value);
            return value;
        }
    }
bad:
    return (double)-1;
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* PyObjectFormat */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* obj, PyObject* format_spec) {
    int ret;
    _PyUnicodeWriter writer;
    if (likely(PyFloat_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyFloat_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else if (likely(PyLong_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyLong_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else {
        return PyObject_Format(obj, format_spec);
    }
    if (unlikely(ret == -1)) {
        _PyUnicodeWriter_Dealloc(&writer);
        return NULL;
    }
    return _PyUnicodeWriter_Finish(&writer);
}
#endif

/* FetchCommonType */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    PyObject *abi_module = PyImport_AddModule((char*) __PYX_ABI_MODULE_NAME);
    if (!abi_module) return NULL;
    Py_INCREF(abi_module);
    return abi_module;
}
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, type->tp_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              type->tp_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, type->tp_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *py_basicsize, *cached_type = NULL;
    Py_ssize_t basicsize;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, spec->name);
    if (cached_type) {
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (!py_basicsize) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred()) goto bad;
        if (__Pyx_VerifyCachedType(
              cached_type,
              spec->name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    cached_type = PyType_FromSpecWithBases(spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (PyObject_SetAttrString(abi_module, spec->name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
        PyList_SET_ITEM(fromlist, 0, marker);
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if PY_VERSION_HEX < 0x030500A0
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         cyfunc->func.m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", cyfunc->func.m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(__pyx_CyFunctionObject, func.vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#ifdef _Py_TPFLAGS_HAVE_VECTORCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(void) {
#if CYTHON_COMPILING_IN_LIMITED_API
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(&__pyx_CyFunctionType_spec, NULL);
#else
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (unlikely(size == 0)) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_FALSE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_FALSE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal == 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        if ((double)a == (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_EQ));
}

/* py_abs */
#if CYTHON_USE_PYLONG_INTERNALS
static PyObject *__Pyx_PyLong_AbsNeg(PyObject *n) {
    if (likely(Py_SIZE(n) == -1)) {
        return PyLong_FromLong(((PyLongObject*)n)->ob_digit[0]);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    {
        PyObject *copy = _PyLong_Copy((PyLongObject*)n);
        if (likely(copy)) {
            __Pyx_SET_SIZE(copy, -Py_SIZE(copy));
        }
        return copy;
    }
#else
    return PyNumber_Negative(n);
#endif
}
#endif

/* PyFloatBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyFloat_TrueDivideObjC(PyObject *op1, PyObject *op2, double floatval, int inplace, int zerodivision_check) {
    const double b = floatval;
    double a, result;
    (void)inplace; (void)zerodivision_check;
    if (likely(PyFloat_CheckExact(op1))) {
#if CYTHON_COMPILING_IN_LIMITED_API
        a = __pyx_PyFloat_AsDouble(op1);
#else
        a = PyFloat_AS_DOUBLE(op1);
#endif
        
    } else
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        a = (double) PyInt_AS_LONG(op1);
        
    } else
    #endif
    if (likely(PyLong_CheckExact(op1))) {
        #if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        switch (size) {
            case  0: a = 0.0;  break;
            case -1: a = -(double) digits[0]; break;
            case  1: a = (double) digits[0]; break;
            case -2:
            case 2:
                if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (1 * PyLong_SHIFT < 53))) {
                    a = (double) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -2)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -3:
            case 3:
                if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (2 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -3)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            case -4:
            case 4:
                if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT && ((8 * sizeof(unsigned long) < 53) || (3 * PyLong_SHIFT < 53))) {
                    a = (double) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                    if ((8 * sizeof(unsigned long) < 53) || (4 * PyLong_SHIFT < 53) || (a < (double) ((PY_LONG_LONG)1 << 53))) {
                        if (size == -4)
                            a = -a;
                        break;
                    }
                }
                CYTHON_FALLTHROUGH;
            default:
        #else
        {
        #endif
            a = PyLong_AsDouble(op1);
            if (unlikely(a == -1.0 && PyErr_Occurred())) return NULL;
        }
    } else {
        return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
    }
        PyFPE_START_PROTECT("divide", return NULL)
        result = a / b;
        PyFPE_END_PROTECT(result)
        return PyFloat_FromDouble(result);
}
#endif

/* SliceObject */
  static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(PyObject* obj,
        Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, int wraparound) {
    __Pyx_TypeName obj_type_name;
#if CYTHON_USE_TYPE_SLOTS
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                    goto bad;
                PyErr_Clear();
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#else
    CYTHON_UNUSED_VAR(wraparound);
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_USE_TYPE_SLOTS
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is unsliceable", obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
bad:
    return NULL;
}

/* pynumber_float */
  static CYTHON_INLINE PyObject* __Pyx__PyNumber_Float(PyObject* obj) {
    double val;
    if (PyLong_CheckExact(obj)) {
#if CYTHON_USE_PYLONG_INTERNALS
        const digit* digits = ((PyLongObject*)obj)->ob_digit;
        switch (Py_SIZE(obj)) {
            case 0:
                val = 0.0;
                goto no_error;
            case 1:
                val = (double) digits[0];
                goto no_error;
            case -1:
                val = (double) - (sdigit) digits[0];
                goto no_error;
            default:
                val = PyLong_AsDouble(obj);
        }
#else
        val = PyLong_AsDouble(obj);
#endif
    } else if (PyUnicode_CheckExact(obj)) {
        val = __Pyx_PyUnicode_AsDouble(obj);
    } else if (PyBytes_CheckExact(obj)) {
        val = __Pyx_PyBytes_AsDouble(obj);
    } else if (PyByteArray_CheckExact(obj)) {
        val = __Pyx_PyByteArray_AsDouble(obj);
    } else {
        return PyNumber_Float(obj);
    }
    if (unlikely(val == -1 && PyErr_Occurred())) {
        return NULL;
    }
no_error:
    return PyFloat_FromDouble(val);
}

/* None */
  static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* UnicodeConcatInPlace */
  # if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
static int
__Pyx_unicode_modifiable(PyObject *unicode)
{
    if (Py_REFCNT(unicode) != 1)
        return 0;
    if (!PyUnicode_CheckExact(unicode))
        return 0;
    if (PyUnicode_CHECK_INTERNED(unicode))
        return 0;
    return 1;
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    ) {
    PyObject *left = *p_left;
    Py_ssize_t left_len, right_len, new_len;
    if (unlikely(__Pyx_PyUnicode_READY(left) == -1))
        return NULL;
    if (unlikely(__Pyx_PyUnicode_READY(right) == -1))
        return NULL;
    left_len = PyUnicode_GET_LENGTH(left);
    if (left_len == 0) {
        Py_INCREF(right);
        return right;
    }
    right_len = PyUnicode_GET_LENGTH(right);
    if (right_len == 0) {
        Py_INCREF(left);
        return left;
    }
    if (unlikely(left_len > PY_SSIZE_T_MAX - right_len)) {
        PyErr_SetString(PyExc_OverflowError,
                        "strings are too large to concat");
        return NULL;
    }
    new_len = left_len + right_len;
    if (__Pyx_unicode_modifiable(left)
            && PyUnicode_CheckExact(right)
            && PyUnicode_KIND(right) <= PyUnicode_KIND(left)
            && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {
        __Pyx_GIVEREF(*p_left);
        if (unlikely(PyUnicode_Resize(p_left, new_len) != 0)) {
            __Pyx_GOTREF(*p_left);
            return NULL;
        }
        __Pyx_INCREF(*p_left);
        _PyUnicode_FastCopyCharacters(*p_left, left_len, right, 0, right_len);
        return *p_left;
    } else {
        return __Pyx_PyUnicode_Concat(left, right);
    }
  }
#endif

/* None */
  static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* GetException */
  #if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* pep479 */
  static void __Pyx_Generator_Replace_StopIteration(int in_async_gen) {
    PyObject *exc, *val, *tb, *cur_exc;
    __Pyx_PyThreadState_declare
    #ifdef __Pyx_StopAsyncIteration_USED
    int is_async_stopiteration = 0;
    #endif
    CYTHON_MAYBE_UNUSED_VAR(in_async_gen);
    cur_exc = PyErr_Occurred();
    if (likely(!__Pyx_PyErr_GivenExceptionMatches(cur_exc, PyExc_StopIteration))) {
        #ifdef __Pyx_StopAsyncIteration_USED
        if (in_async_gen && unlikely(__Pyx_PyErr_GivenExceptionMatches(cur_exc, __Pyx_PyExc_StopAsyncIteration))) {
            is_async_stopiteration = 1;
        } else
        #endif
            return;
    }
    __Pyx_PyThreadState_assign
    __Pyx_GetException(&exc, &val, &tb);
    Py_XDECREF(exc);
    Py_XDECREF(val);
    Py_XDECREF(tb);
    PyErr_SetString(PyExc_RuntimeError,
        #ifdef __Pyx_StopAsyncIteration_USED
        is_async_stopiteration ? "async generator raised StopAsyncIteration" :
        in_async_gen ? "async generator raised StopIteration" :
        #endif
        "generator raised StopIteration");
}

/* IterNext */
  static PyObject *__Pyx_PyIter_Next2Default(PyObject* defval) {
    PyObject* exc_type;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    exc_type = __Pyx_PyErr_Occurred();
    if (unlikely(exc_type)) {
        if (!defval || unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))
            return NULL;
        __Pyx_PyErr_Clear();
        Py_INCREF(defval);
        return defval;
    }
    if (defval) {
        Py_INCREF(defval);
        return defval;
    }
    __Pyx_PyErr_SetNone(PyExc_StopIteration);
    return NULL;
}
static void __Pyx_PyIter_Next_ErrorNoIterator(PyObject *iterator) {
    __Pyx_TypeName iterator_type_name = __Pyx_PyType_GetName(Py_TYPE(iterator));
    PyErr_Format(PyExc_TypeError,
        __Pyx_FMT_TYPENAME " object is not an iterator", iterator_type_name);
    __Pyx_DECREF_TypeName(iterator_type_name);
}
static CYTHON_INLINE PyObject *__Pyx_PyIter_Next2(PyObject* iterator, PyObject* defval) {
    PyObject* next;
    iternextfunc iternext = Py_TYPE(iterator)->tp_iternext;
    if (likely(iternext)) {
#if CYTHON_USE_TYPE_SLOTS
        next = iternext(iterator);
        if (likely(next))
            return next;
        if (unlikely(iternext == &_PyObject_NextNotImplemented))
            return NULL;
#else
        next = PyIter_Next(iterator);
        if (likely(next))
            return next;
#endif
    } else if (CYTHON_USE_TYPE_SLOTS || unlikely(!PyIter_Check(iterator))) {
        __Pyx_PyIter_Next_ErrorNoIterator(iterator);
        return NULL;
    }
#if !CYTHON_USE_TYPE_SLOTS
    else {
        next = PyIter_Next(iterator);
        if (likely(next))
            return next;
    }
#endif
    return __Pyx_PyIter_Next2Default(defval);
}

/* None */
  static CYTHON_INLINE long __Pyx_mod_long(long a, long b) {
    long r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

/* CIntToDigits */
  static const char DIGIT_PAIRS_10[2*10*10+1] = {
    "00010203040506070809"
    "10111213141516171819"
    "20212223242526272829"
    "30313233343536373839"
    "40414243444546474849"
    "50515253545556575859"
    "60616263646566676869"
    "70717273747576777879"
    "80818283848586878889"
    "90919293949596979899"
};
static const char DIGIT_PAIRS_8[2*8*8+1] = {
    "0001020304050607"
    "1011121314151617"
    "2021222324252627"
    "3031323334353637"
    "4041424344454647"
    "5051525354555657"
    "6061626364656667"
    "7071727374757677"
};
static const char DIGITS_HEX[2*16+1] = {
    "0123456789abcdef"
    "0123456789ABCDEF"
};

/* BuildPyUnicode */
  static PyObject* __Pyx_PyUnicode_BuildFromAscii(Py_ssize_t ulength, char* chars, int clength,
                                                int prepend_sign, char padding_char) {
    PyObject *uval;
    Py_ssize_t uoffset = ulength - clength;
#if CYTHON_USE_UNICODE_INTERNALS
    Py_ssize_t i;
#if CYTHON_PEP393_ENABLED
    void *udata;
    uval = PyUnicode_New(ulength, 127);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_DATA(uval);
#else
    Py_UNICODE *udata;
    uval = PyUnicode_FromUnicode(NULL, ulength);
    if (unlikely(!uval)) return NULL;
    udata = PyUnicode_AS_UNICODE(uval);
#endif
    if (uoffset > 0) {
        i = 0;
        if (prepend_sign) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, 0, '-');
            i++;
        }
        for (; i < uoffset; i++) {
            __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, i, padding_char);
        }
    }
    for (i=0; i < clength; i++) {
        __Pyx_PyUnicode_WRITE(PyUnicode_1BYTE_KIND, udata, uoffset+i, chars[i]);
    }
#else
    {
        PyObject *sign = NULL, *padding = NULL;
        uval = NULL;
        if (uoffset > 0) {
            prepend_sign = !!prepend_sign;
            if (uoffset > prepend_sign) {
                padding = PyUnicode_FromOrdinal(padding_char);
                if (likely(padding) && uoffset > prepend_sign + 1) {
                    PyObject *tmp;
                    PyObject *repeat = PyInt_FromSize_t(uoffset - prepend_sign);
                    if (unlikely(!repeat)) goto done_or_error;
                    tmp = PyNumber_Multiply(padding, repeat);
                    Py_DECREF(repeat);
                    Py_DECREF(padding);
                    padding = tmp;
                }
                if (unlikely(!padding)) goto done_or_error;
            }
            if (prepend_sign) {
                sign = PyUnicode_FromOrdinal('-');
                if (unlikely(!sign)) goto done_or_error;
            }
        }
        uval = PyUnicode_DecodeASCII(chars, clength, NULL);
        if (likely(uval) && padding) {
            PyObject *tmp = PyNumber_Add(padding, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
        if (likely(uval) && sign) {
            PyObject *tmp = PyNumber_Add(sign, uval);
            Py_DECREF(uval);
            uval = tmp;
        }
done_or_error:
        Py_XDECREF(padding);
        Py_XDECREF(sign);
    }
#endif
    return uval;
}

/* CIntToPyUnicode */
  static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_int(int value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(int)*3+2];
    char *dpos, *end = digits + sizeof(int)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    int remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (int) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (int) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (int) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* SwapException */
  #if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_MultiplyObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        
#ifdef HAVE_LONG_LONG
            if (sizeof(PY_LONG_LONG) > sizeof(long)) {
                PY_LONG_LONG result = (PY_LONG_LONG)a * (PY_LONG_LONG)b;
                return (result >= LONG_MIN && result <= LONG_MAX) ?
                    PyInt_FromLong((long)result) : PyLong_FromLongLong(result);
            }
#endif
#if CYTHON_USE_TYPE_SLOTS
            return PyInt_Type.tp_as_number->nb_multiply(op1, op2);
#else
            return PyNumber_Multiply(op1, op2);
#endif
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (unlikely(size == 0)) {
            return __Pyx_NewRef(op1);
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
            }
        }
                (void)a; (void)b;
                #ifdef HAVE_LONG_LONG
                lla = a;
                goto long_long;
                #else
                return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
                #endif
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla * llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("multiply", return NULL)
            result = ((double)a) * (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceMultiply : PyNumber_Multiply)(op1, op2);
}
#endif

/* ExtTypeTest */
  static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* RaiseUnexpectedTypeError */
  static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* WriteUnraisableException */
  static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_PyThreadState_declare
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#ifdef _MSC_VER
    else state = (PyGILState_STATE)-1;
#endif
#endif
    CYTHON_UNUSED_VAR(clineno);
    CYTHON_UNUSED_VAR(lineno);
    CYTHON_UNUSED_VAR(filename);
    CYTHON_MAYBE_UNUSED_VAR(nogil);
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_MultiplyCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long b = PyInt_AS_LONG(op2);
        
#ifdef HAVE_LONG_LONG
            if (sizeof(PY_LONG_LONG) > sizeof(long)) {
                PY_LONG_LONG result = (PY_LONG_LONG)a * (PY_LONG_LONG)b;
                return (result >= LONG_MIN && result <= LONG_MAX) ?
                    PyInt_FromLong((long)result) : PyLong_FromLongLong(result);
            }
#endif
#if CYTHON_USE_TYPE_SLOTS
            return PyInt_Type.tp_as_number->nb_multiply(op1, op2);
#else
            return PyNumber_Multiply(op1, op2);
#endif
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (unlikely(size == 0)) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT+30) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT+30) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT+30) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT+30) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT+30) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT+30) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
            }
        }
                (void)a; (void)b;
                #ifdef HAVE_LONG_LONG
                llb = b;
                goto long_long;
                #else
                return PyLong_Type.tp_as_number->nb_multiply(op1, op2);
                #endif
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla * llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double b = __pyx_PyFloat_AsDouble(op2);
#else
        double b = PyFloat_AS_DOUBLE(op2);
#endif
            double result;
            
            PyFPE_START_PROTECT("multiply", return NULL)
            result = ((double)a) * (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceMultiply : PyNumber_Multiply)(op1, op2);
}
#endif

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
        
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (unlikely(size == 0)) {
            return __Pyx_NewRef(op1);
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double b = __pyx_PyFloat_AsDouble(op2);
#else
        double b = PyFloat_AS_DOUBLE(op2);
#endif
            double result;
            
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractCObj(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op2))) {
        const long a = intval;
        long x;
        long b = PyInt_AS_LONG(op2);
        
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op2))) {
        const long a = intval;
        long b, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG lla = intval;
        PY_LONG_LONG llb, llx;
#endif
        const digit* digits = ((PyLongObject*)op2)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op2);
        if (unlikely(size == 0)) {
            return __Pyx_NewRef(op1);
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            b = likely(size) ? digits[0] : 0;
            if (size == -1) b = -b;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        b = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        b = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        b = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        llb = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op2)) {
        const long a = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double b = __pyx_PyFloat_AsDouble(op2);
#else
        double b = PyFloat_AS_DOUBLE(op2);
#endif
            double result;
            
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_TrueDivideObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        
            if (8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53))) {
                return PyFloat_FromDouble((double)a / (double)b);
            }
            return PyInt_Type.tp_as_number->nb_true_divide(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (unlikely(size == 0)) {
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT && 1 * PyLong_SHIFT < 53) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT && 2 * PyLong_SHIFT < 53) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT && 3 * PyLong_SHIFT < 53) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            }
        }
                if ((8 * sizeof(long) <= 53 || likely(labs(a) <= ((PY_LONG_LONG)1 << 53)))
                        || __Pyx_sst_abs(size) <= 52 / PyLong_SHIFT) {
                    return PyFloat_FromDouble((double)a / (double)b);
                }
                return PyLong_Type.tp_as_number->nb_true_divide(op1, op2);
            return PyLong_FromLong(x);
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("divide", return NULL)
            result = ((double)a) / (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceTrueDivide : PyNumber_TrueDivide)(op1, op2);
}
#endif

/* PyIntCompare */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        Py_RETURN_FALSE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a != b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_TRUE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_TRUE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        if ((double)a != (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* PyIntBinop */
  #if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (unlikely(size == 0)) {
            return PyLong_FromLong(-intval);
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* PyObjectGetMethod */
  static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
  static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNoneIterError */
  static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
  static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
  static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = __Pyx_PyObject_GetIterNextFunc(iter);
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
  static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* PyObjectSetAttrStr */
  #if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyUnicode_Unicode */
  static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj) {
    if (unlikely(obj == Py_None))
        obj = __pyx_kp_u_None;
    return __Pyx_NewRef(obj);
}

/* UnpackUnboundCMethod */
  static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
  static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* CIntToPyUnicode */
  static CYTHON_INLINE PyObject* __Pyx_PyUnicode_From_Py_ssize_t(Py_ssize_t value, Py_ssize_t width, char padding_char, char format_char) {
    char digits[sizeof(Py_ssize_t)*3+2];
    char *dpos, *end = digits + sizeof(Py_ssize_t)*3+2;
    const char *hex_digits = DIGITS_HEX;
    Py_ssize_t length, ulength;
    int prepend_sign, last_one_off;
    Py_ssize_t remaining;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const Py_ssize_t neg_one = (Py_ssize_t) -1, const_zero = (Py_ssize_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (format_char == 'X') {
        hex_digits += 16;
        format_char = 'x';
    }
    remaining = value;
    last_one_off = 0;
    dpos = end;
    do {
        int digit_pos;
        switch (format_char) {
        case 'o':
            digit_pos = abs((int)(remaining % (8*8)));
            remaining = (Py_ssize_t) (remaining / (8*8));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_8)[digit_pos];
            last_one_off = (digit_pos < 8);
            break;
        case 'd':
            digit_pos = abs((int)(remaining % (10*10)));
            remaining = (Py_ssize_t) (remaining / (10*10));
            dpos -= 2;
            *(uint16_t*)dpos = ((const uint16_t*)DIGIT_PAIRS_10)[digit_pos];
            last_one_off = (digit_pos < 10);
            break;
        case 'x':
            *(--dpos) = hex_digits[abs((int)(remaining % 16))];
            remaining = (Py_ssize_t) (remaining / 16);
            break;
        default:
            assert(0);
            break;
        }
    } while (unlikely(remaining != 0));
    assert(!last_one_off || *dpos == '0');
    dpos += last_one_off;
    length = end - dpos;
    ulength = length;
    prepend_sign = 0;
    if (!is_unsigned && value <= neg_one) {
        if (padding_char == ' ' || width <= length + 1) {
            *(--dpos) = '-';
            ++length;
        } else {
            prepend_sign = 1;
        }
        ++ulength;
    }
    if (width > ulength) {
        ulength = width;
    }
    if (ulength == 1) {
        return PyUnicode_FromOrdinal(*dpos);
    }
    return __Pyx_PyUnicode_BuildFromAscii(ulength, dpos, (int) length, prepend_sign, padding_char);
}

/* RaiseException */
  #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY ||  CYTHON_COMPILING_IN_LIMITED_API
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* CallNextTpDealloc */
  static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
  static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
  static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* TypeImport */
  #ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
  static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* PyType_Ready */
  #if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_PyType_Ready(PyTypeObject *t) {
    int r;
    PyObject *bases = t->tp_bases;
    if (bases)
    {
        Py_ssize_t i, n = PyTuple_GET_SIZE(bases);
        for (i = 1; i < n; i++)
        {
            PyObject *b0 = PyTuple_GET_ITEM(bases, i);
            PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
            if (PyClass_Check(b0))
            {
                PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                             PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
                return -1;
            }
#endif
            b = (PyTypeObject*)b0;
            if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
            {
                __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                PyErr_Format(PyExc_TypeError,
                    "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
                __Pyx_DECREF_TypeName(b_name);
                return -1;
            }
            if (t->tp_dictoffset == 0 && b->tp_dictoffset)
            {
                __Pyx_TypeName t_name = __Pyx_PyType_GetName(t);
                __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                PyErr_Format(PyExc_TypeError,
                    "extension type '" __Pyx_FMT_TYPENAME "' has no __dict__ slot, "
                    "but base type '" __Pyx_FMT_TYPENAME "' has: "
                    "either add 'cdef dict __dict__' to the extension type "
                    "or add '__slots__ = [...]' to the base type",
                    t_name, b_name);
                __Pyx_DECREF_TypeName(t_name);
                __Pyx_DECREF_TypeName(b_name);
                return -1;
            }
        }
    }
#if PY_VERSION_HEX >= 0x03050000
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
}
#endif

/* PyObject_GenericGetAttrNoDict */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PyObject_GenericGetAttr */
  #if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
  #if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_SetVtable(PyObject *type, void *vtable) {
#else
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#endif
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (!ob)
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (PyObject_SetAttr(type, __pyx_n_s_pyx_vtable, ob) < 0)
#else
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* MergeVTables */
    #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i;
    void** base_vtables;
    __Pyx_TypeName tp_base_name;
    __Pyx_TypeName base_name;
    void* unknown = (void*)-1;
    PyObject* bases = type->tp_bases;
    int base_depth = 0;
    {
        PyTypeObject* base = type->tp_base;
        while (base) {
            base_depth += 1;
            base = base->tp_base;
        }
    }
    base_vtables = (void**) malloc(sizeof(void*) * (base_depth + 1));
    base_vtables[0] = unknown;
    for (i = 1; i < PyTuple_GET_SIZE(bases); i++) {
        void* base_vtable = __Pyx_GetVtable(((PyTypeObject*)PyTuple_GET_ITEM(bases, i)));
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = type->tp_base;
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = base->tp_base;
            }
        }
    }
    PyErr_Clear();
    free(base_vtables);
    return 0;
bad:
    tp_base_name = __Pyx_PyType_GetName(type->tp_base);
    base_name = __Pyx_PyType_GetName((PyTypeObject*)PyTuple_GET_ITEM(bases, i));
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
    free(base_vtables);
    return -1;
}
#endif

/* SetupReduce */
    #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* Import */
    static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                #if CYTHON_COMPILING_IN_LIMITED_API
                module = PyImport_ImportModuleLevelObject(
                    name, empty_dict, empty_dict, from_list, 1);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                #endif
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            #if CYTHON_COMPILING_IN_LIMITED_API
            module = PyImport_ImportModuleLevelObject(
                name, empty_dict, empty_dict, from_list, level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportFrom */
    static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* ImportDottedModule */
    #if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__32;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    Py_ssize_t i, nparts;
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (likely(module))
        return module;
    return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* ClassMethod */
    static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    #if PY_MAJOR_VERSION == 2
    static PyTypeObject *methoddescr_type = NULL;
    if (unlikely(methoddescr_type == NULL)) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (unlikely(!meth)) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    #else
    PyTypeObject *methoddescr_type = &PyMethodDescr_Type;
    #endif
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
}

/* GetNameInClass */
    static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    PyObject *dict;
    assert(PyType_Check(nmspace));
#if CYTHON_USE_TYPE_SLOTS
    dict = ((PyTypeObject*)nmspace)->tp_dict;
    Py_XINCREF(dict);
#else
    dict = PyObject_GetAttr(nmspace, __pyx_n_s_dict);
#endif
    if (likely(dict)) {
        result = PyObject_GetItem(dict, name);
        Py_DECREF(dict);
        if (result) {
            return result;
        }
    }
    PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}

/* CLineInTraceback */
    #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
    #if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
    #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if CYTHON_COMPILING_IN_LIMITED_API
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    if (c_line) {
        (void) __pyx_cfilenm;
        c_line = __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    _PyTraceback_Add(funcname, filename, c_line ? -c_line : py_line);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
    #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
    #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
    #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
    #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
    #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
    static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int64_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int64_t, digit, digits[0])
                case 2:
                    if ((8 * sizeof(int64_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 2 * PyLong_SHIFT)) {
                            return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int64_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 3 * PyLong_SHIFT)) {
                            return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int64_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 4 * PyLong_SHIFT)) {
                            return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int64_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int64_t,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int64_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (int64_t) ((((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int64_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (int64_t) ((((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int64_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (int64_t) ((((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(int64_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int64_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            int64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int64_t) -1;
        }
    } else {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

/* CIntFromPy */
    static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
    }
}

/* CIntToPy */
    static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* FormatTypeName */
    #if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XSETREF(name, __Pyx_NewRef(__pyx_n_s__133));
    }
    return name;
}
#endif

/* CIntFromPy */
    static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* PyObjectCall2Args */
    static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCallMethod1 */
    static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
    #include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    CYTHON_UNUSED_VAR(__pyx_tstate);
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (likely(__Pyx_IS_TYPE(ev, (PyTypeObject*)PyExc_StopIteration))) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(__pyx_CoroutineObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(PyObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(PyObject *gen, PyObject *value, int closing) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    CYTHON_MAYBE_UNUSED_VAR(closing);
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body(self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject* gen, PyObject *retval) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = __Pyx_PyObject_GetIterNextFunc(yf)(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (unlikely(PyErr_Occurred())) {
                PyErr_WriteUnraisable(yf);
            }
        } else {
            retval = __Pyx_PyObject_CallNoArg(meth);
            Py_DECREF(meth);
            if (unlikely(!retval))
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = __Pyx_PyObject_GetIterNextFunc(yf)(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (unlikely(PyErr_Occurred())) {
                    gen->is_running = 0;
                    return NULL;
                }
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = __Pyx_PyObject_Call(meth, args, NULL);
            } else {
                PyObject *cargs[4] = {NULL, typ, val, tb};
                ret = __Pyx_PyObject_FastCall(meth, cargs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (unlikely(!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb)))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (unlikely(PyObject_CallFinalizerFromDealloc(self)))
#else
        Py_TYPE(gen)->tp_del(self);
        if (unlikely(Py_REFCNT(self) > 0))
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (likely(--self->ob_refcnt == 0)) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_name;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_name, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_qualname;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_qualname, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, void *context)
{
    PyObject *frame = self->gi_frame;
    CYTHON_UNUSED_VAR(context);
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
    static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
    #ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (unlikely(!module)) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
    static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
    static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
    #if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
