/* Generated by Cython 3.0a7 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "hummingbot\\core\\cpp\\OrderBookEntry.h",
            "hummingbot\\core\\cpp\\PyRef.h"
        ],
        "include_dirs": [
            ".\\hummingbot\\core",
            ".\\hummingbot\\core\\data_type"
        ],
        "language": "c++",
        "name": "hummingbot.connector.exchange.bittrex.bittrex_exchange",
        "sources": [
            "hummingbot\\connector\\exchange\\bittrex\\bittrex_exchange.pyx"
        ]
    },
    "module_name": "hummingbot.connector.exchange.bittrex.bittrex_exchange"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
#if defined(CYTHON_LIMITED_API) && 0
  #ifndef Py_LIMITED_API
    #if CYTHON_LIMITED_API+0 > 0x03030000
      #define Py_LIMITED_API CYTHON_LIMITED_API
    #else
      #define Py_LIMITED_API 0x03030000
    #endif
  #endif
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02070000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03030000)
    #error Cython requires Python 2.7+ or Python 3.3+.
#else
#define CYTHON_ABI "3_0a7"
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."
#define CYTHON_HEX_VERSION 0x030000A7
#define CYTHON_FUTURE_DIVISION 1
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #if PY_VERSION_HEX < 0x03050000
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS (PY_MAJOR_VERSION >= 3)
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(PYSTON_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #undef CYTHON_PEP487_INIT_SUBCLASS
  #define CYTHON_PEP487_INIT_SUBCLASS 0
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#elif defined(CYTHON_LIMITED_API)
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_ASYNC_SLOTS
  #define CYTHON_USE_ASYNC_SLOTS 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_PYSTON 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #ifndef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #if PY_MAJOR_VERSION < 3
    #undef CYTHON_USE_ASYNC_SLOTS
    #define CYTHON_USE_ASYNC_SLOTS 0
  #elif !defined(CYTHON_USE_ASYNC_SLOTS)
    #define CYTHON_USE_ASYNC_SLOTS 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if PY_VERSION_HEX < 0x030300F0
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #ifndef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL (PY_MAJOR_VERSION < 3 || PY_VERSION_HEX >= 0x03060000)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL (PY_VERSION_HEX >= 0x030700A1)
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT (PY_VERSION_HEX >= 0x03050000)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PY_VERSION_HEX >= 0x030400a1)
  #endif
  #ifndef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS (PY_VERSION_HEX >= 0x030600B1)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK (PY_VERSION_HEX >= 0x030700A3)
  #endif
#endif
#if !defined(CYTHON_FAST_PYCCALL)
#define CYTHON_FAST_PYCCALL  (CYTHON_FAST_PYCALL && PY_VERSION_HEX >= 0x030600B1)
#endif
#if !defined(CYTHON_VECTORCALL)
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus) && __cplusplus >= 201103L
    #if __has_cpp_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH [[fallthrough]]
    #elif __has_cpp_attribute(clang::fallthrough)
      #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
    #elif __has_cpp_attribute(gnu::fallthrough)
      #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__ ) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(U other) { return *ptr == other; }
    template<typename U> bool operator !=(U other) { return *ptr != other; }
  private:
    T *ptr;
};

#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_DefaultClassType PyClass_Type
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_DefaultClassType PyType_Type
#if PY_VERSION_HEX >= 0x030800B2
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#elif PY_VERSION_HEX >= 0x030800A4
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx_PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
#endif
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#if PY_VERSION_HEX <= 0x030700A3 || !defined(METH_FASTCALL)
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #define __Pyx_PyCFunctionFast _PyCFunctionFast
  #define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030400A1
  #define PyMem_RawMalloc(n)           PyMem_Malloc(n)
  #define PyMem_RawRealloc(p, n)       PyMem_Realloc(p, n)
  #define PyMem_RawFree(p)             PyMem_Free(p)
#endif
#if CYTHON_COMPILING_IN_PYSTON
  #define __Pyx_PyCode_HasFreeVars(co)  PyCode_HasFreeVars(co)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) PyFrame_SetLineNumber(frame, lineno)
#elif CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x03060000
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#elif PY_VERSION_HEX >= 0x03000000
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_Current
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static inline void *__Pyx_PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#endif
#if PY_VERSION_HEX < 0x030700A2 && !defined(PyThread_tss_create) && !defined(Py_tss_NEEDS_INIT)
#include "pythread.h"
#define Py_tss_NEEDS_INIT 0
typedef int Py_tss_t;
static CYTHON_INLINE int PyThread_tss_create(Py_tss_t *key) {
  *key = PyThread_create_key();
  return 0;
}
static CYTHON_INLINE Py_tss_t * PyThread_tss_alloc(void) {
  Py_tss_t *key = (Py_tss_t *)PyObject_Malloc(sizeof(Py_tss_t));
  *key = Py_tss_NEEDS_INIT;
  return key;
}
static CYTHON_INLINE void PyThread_tss_free(Py_tss_t *key) {
  PyObject_Free(key);
}
static CYTHON_INLINE int PyThread_tss_is_created(Py_tss_t *key) {
  return *key != Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE void PyThread_tss_delete(Py_tss_t *key) {
  PyThread_delete_key(*key);
  *key = Py_tss_NEEDS_INIT;
}
static CYTHON_INLINE int PyThread_tss_set(Py_tss_t *key, void *value) {
  return PyThread_set_key_value(*key, value);
}
static CYTHON_INLINE void * PyThread_tss_get(Py_tss_t *key) {
  return PyThread_get_key_value(*key);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#if PY_MAJOR_VERSION >= 3 || CYTHON_FUTURE_DIVISION
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX > 0x030600B4 && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
#else
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  (Py_TYPE(obj)->tp_iternext)
#else
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
  #define __Pyx_PyObject_GetIterNextFunc(obj)  PyIter_Next
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GetLength(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#elif PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #if defined(PyUnicode_IS_READY)
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #else
  #define __Pyx_PyUnicode_READY(op)       (0)
  #endif
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, ch)
  #if defined(PyUnicode_IS_READY) && defined(PyUnicode_GET_SIZE)
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
  #endif
  #else
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #endif
#else
  #define CYTHON_PEP393_ENABLED 0
  #define PyUnicode_1BYTE_KIND  1
  #define PyUnicode_2BYTE_KIND  2
  #define PyUnicode_4BYTE_KIND  4
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((sizeof(Py_UNICODE) == 2) ? 65535 : 1114111)
  #define __Pyx_PyUnicode_KIND(u)         ((int)sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  (((void)(k)), ((Py_UNICODE*)d)[i] = ch)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains) || (PY_MAJOR_VERSION == 2 && PYPY_VERSION_NUM < 0x07030500)
    #undef PyUnicode_Contains
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None || (PyString_Check(b) && !PyString_CheckExact(b)))) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#ifndef PyObject_Unicode
  #define PyObject_Unicode             PyObject_Str
#endif
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
#else
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsHash_t
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   __Pyx_PyIndex_AsSsize_t
#endif
#if CYTHON_USE_ASYNC_SLOTS
  #if PY_VERSION_HEX >= 0x030500B1
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
    #define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
  #else
    #define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
  #endif
#else
  #define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef __Pyx_PyAsyncMethodsStruct
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
    } __Pyx_PyAsyncMethodsStruct;
#endif

#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#define __PYX_MARK_ERR_POS(f_index, lineno) \
    { __pyx_filename = __pyx_f[f_index]; (void)__pyx_filename; __pyx_lineno = lineno; (void)__pyx_lineno; __pyx_clineno = __LINE__; (void)__pyx_clineno; }
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__hummingbot__connector__exchange__bittrex__bittrex_exchange
#define __PYX_HAVE_API__hummingbot__connector__exchange__bittrex__bittrex_exchange
/* Early includes */
#include <stdint.h>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <utility>

    #if __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600)
    // move should be defined for these versions of MSVC, but __cplusplus isn't set usefully
    #include <type_traits>

    namespace cython_std {
    template <typename T> typename std::remove_reference<T>::type&& move(T& t) noexcept { return std::move(t); }
    template <typename T> typename std::remove_reference<T>::type&& move(T&& t) noexcept { return std::move(t); }
    }

    #endif
    
#include <unordered_map>
#include <unordered_set>
#include "cpp/PyRef.h"
#include <set>
#include <vector>
#include "../cpp/OrderBookEntry.h"
#include <string.h>
#include <stdio.h>

    /* Using NumPy API declarations from "numpy/__init__.cython-30.pxd" */
    
#include "numpy/arrayobject.h"
#include "numpy/ndarrayobject.h"
#include "numpy/ndarraytypes.h"
#include "numpy/arrayscalars.h"
#include "numpy/ufuncobject.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT (PY_MAJOR_VERSION >= 3 && __PYX_DEFAULT_STRING_ENCODING_IS_UTF8)
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
#define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const wchar_t *u)
{
    const wchar_t *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c) + 1);
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }

#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_m = NULL;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_cython_runtime = NULL;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* Header.proto */
#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif

/* #### Code section: filename_table ### */

static const char *__pyx_f[] = {
  "hummingbot\\\\connector\\\\exchange\\\\bittrex\\\\bittrex_exchange.pyx",
  "stringsource",
  "__init__.cython-30.pxd",
  "hummingbot\\\\core\\\\pubsub.pxd",
  "hummingbot\\\\core\\\\event\\\\event_listener.pxd",
  "hummingbot\\\\core\\\\event\\\\event_reporter.pxd",
  "hummingbot\\\\core\\\\event\\\\event_logger.pxd",
  "hummingbot\\\\core\\\\data_type\\\\order_book_query_result.pxd",
  "type.pxd",
  "hummingbot\\\\core\\\\data_type\\\\order_book.pxd",
  "hummingbot\\\\core\\\\clock.pxd",
  "hummingbot\\\\core\\\\time_iterator.pxd",
  "hummingbot\\\\core\\\\network_iterator.pxd",
  "hummingbot\\\\connector\\\\connector_base.pxd",
  "hummingbot\\\\connector\\\\trading_rule.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* #### Code section: numeric_typedefs ### */

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":732
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":733
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":734
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":735
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":739
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":740
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":741
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":742
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":746
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":747
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":756
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":757
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":758
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":760
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":761
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":762
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":764
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":765
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":767
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":768
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":769
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
/* #### Code section: complex_type_declarations ### */
/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif
static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

/* Declarations.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif
static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub;
struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener;
struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter;
struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger;
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult;
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult;
struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook;
struct __pyx_obj_10hummingbot_4core_5clock_Clock;
struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator;
struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator;
struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase;
struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase;
struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker;
struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network;
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network;

/* "hummingbot/core/pubsub.pxd":10
 * from hummingbot.core.event.event_listener cimport EventListener
 * 
 * ctypedef unordered_set[PyRef] EventListenersCollection             # <<<<<<<<<<<<<<
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 */
typedef std::unordered_set<PyRef>  __pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection;

/* "hummingbot/core/pubsub.pxd":11
 * 
 * ctypedef unordered_set[PyRef] EventListenersCollection
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 */
typedef std::unordered_set<PyRef> ::iterator __pyx_t_10hummingbot_4core_6pubsub_EventListenersIterator;

/* "hummingbot/core/pubsub.pxd":12
 * ctypedef unordered_set[PyRef] EventListenersCollection
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events             # <<<<<<<<<<<<<<
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair
 */
typedef std::unordered_map<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection>  __pyx_t_10hummingbot_4core_6pubsub_Events;

/* "hummingbot/core/pubsub.pxd":13
 * ctypedef unordered_set[PyRef].iterator EventListenersIterator
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator             # <<<<<<<<<<<<<<
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair
 * 
 */
typedef std::unordered_map<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection> ::iterator __pyx_t_10hummingbot_4core_6pubsub_EventsIterator;

/* "hummingbot/core/pubsub.pxd":14
 * ctypedef unordered_map[int64_t, EventListenersCollection] Events
 * ctypedef unordered_map[int64_t, EventListenersCollection].iterator EventsIterator
 * ctypedef pair[int64_t, EventListenersCollection] EventsPair             # <<<<<<<<<<<<<<
 * 
 * 
 */
typedef std::pair<int64_t,__pyx_t_10hummingbot_4core_6pubsub_EventListenersCollection>  __pyx_t_10hummingbot_4core_6pubsub_EventsPair;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":771
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":772
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":773
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":775
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell;
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount;

/* "hummingbot/connector/connector_base.pxd":18
 *         public dict _exchange_order_ids
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/connector_base.pxd":19
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 *     cdef c_stop_tracking_order(self, str order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/connector_base.pxd":28
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object order_size)
 *     cdef object c_quantize_order_price(self, str trading_pair, object price)
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price=*)             # <<<<<<<<<<<<<<
 */
struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount {
  int __pyx_n;
  PyObject *price;
};
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_buy;
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_sell;

/* "hummingbot/connector/exchange_base.pxd":14
 *         object _order_book_tracker
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_buy {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/exchange_base.pxd":15
 * 
 *     cdef str c_buy(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)
 *     cdef str c_sell(self, str trading_pair, object amount, object order_type=*, object price=*, dict kwargs=*)             # <<<<<<<<<<<<<<
 *     cdef c_cancel(self, str trading_pair, str client_order_id)
 *     cdef c_stop_tracking_order(self, str order_id)
 */
struct __pyx_opt_args_10hummingbot_9connector_13exchange_base_12ExchangeBase_c_sell {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};
struct __pyx_opt_args_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_quantize_order_amount;
struct __pyx_opt_args_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_buy;
struct __pyx_opt_args_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_sell;

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":692
 *         return Decimal(trading_rule.min_base_amount_increment)
 * 
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price=0.0):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 */
struct __pyx_opt_args_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_quantize_order_amount {
  int __pyx_n;
  PyObject *price;
};

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":827
 *                                  ))
 * 
 *     cdef str c_buy(self,             # <<<<<<<<<<<<<<
 *                    str trading_pair,
 *                    object amount,
 */
struct __pyx_opt_args_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_buy {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":919
 *                                  MarketOrderFailureEvent(self._current_timestamp, order_id, order_type))
 * 
 *     cdef str c_sell(self,             # <<<<<<<<<<<<<<
 *                     str trading_pair,
 *                     object amount,
 */
struct __pyx_opt_args_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_sell {
  int __pyx_n;
  PyObject *order_type;
  PyObject *price;
  PyObject *kwargs;
};

/* "hummingbot/core/pubsub.pxd":17
 * 
 * 
 * cdef class PubSub:             # <<<<<<<<<<<<<<
 *     cdef:
 *         Events _events
 */
struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub *__pyx_vtab;
  __pyx_t_10hummingbot_4core_6pubsub_Events _events;
  PyObject *__weakref__;
};


/* "event_listener.pxd":6
 * 
 * 
 * cdef class EventListener:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object __weakref__
 */
struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener {
  PyObject_HEAD
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener *__pyx_vtab;
  PyObject *__weakref__;
  int64_t _current_event_tag;
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *_current_event_caller;
};


/* "hummingbot/core/event/event_reporter.pxd":4
 * 
 * 
 * cdef class EventReporter(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str event_source
 */
struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter {
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
  PyObject *event_source;
};


/* "hummingbot/core/event/event_logger.pxd":4
 * 
 * 
 * cdef class EventLogger(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str _event_source
 */
struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger {
  struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
  PyObject *_event_source;
  PyObject *_logged_events;
  PyObject *_waiting;
  PyObject *_wait_returns;
};


/* "order_book_query_result.pxd":3
 * # distutils: language=c++
 * 
 * cdef class OrderBookQueryResult:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public double query_price
 */
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult {
  PyObject_HEAD
  double query_price;
  double query_volume;
  double result_price;
  double result_volume;
};


/* "order_book_query_result.pxd":11
 * 
 * 
 * cdef class ClientOrderBookQueryResult:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public object query_price
 */
struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult {
  PyObject_HEAD
  PyObject *query_price;
  PyObject *query_volume;
  PyObject *result_price;
  PyObject *result_volume;
};


/* "hummingbot/core/data_type/order_book.pxd":12
 * 
 * 
 * cdef class OrderBook(PubSub):             # <<<<<<<<<<<<<<
 *     cdef set[OrderBookEntry] _bid_book
 *     cdef set[OrderBookEntry] _ask_book
 */
struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook {
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  std::set<OrderBookEntry>  _bid_book;
  std::set<OrderBookEntry>  _ask_book;
  int64_t _snapshot_uid;
  int64_t _last_diff_uid;
  double _best_bid;
  double _best_ask;
  double _last_trade_price;
  double _last_applied_trade;
  double _last_trade_price_rest_updated;
  int _dex;
};


/* "hummingbot/core/clock.pxd":3
 * # distutils: language=c++
 * 
 * cdef class Clock:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _clock_mode
 */
struct __pyx_obj_10hummingbot_4core_5clock_Clock {
  PyObject_HEAD
  PyObject *_clock_mode;
  double _tick_size;
  double _start_time;
  double _end_time;
  PyObject *_child_iterators;
  PyObject *_current_context;
  double _current_tick;
  int _started;
};


/* "hummingbot/core/time_iterator.pxd":7
 * 
 * 
 * cdef class TimeIterator(PubSub):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double _current_timestamp
 */
struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator {
  struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  double _current_timestamp;
  struct __pyx_obj_10hummingbot_4core_5clock_Clock *_clock;
};


/* "hummingbot/core/network_iterator.pxd":6
 * 
 * 
 * cdef class NetworkIterator(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _network_status
 */
struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_network_status;
  double _last_connected_timestamp;
  double _check_network_interval;
  double _check_network_timeout;
  double _network_error_wait_time;
  PyObject *_check_network_task;
};


/* "hummingbot/connector/connector_base.pxd":5
 * from hummingbot.core.network_iterator cimport NetworkIterator
 * 
 * cdef class ConnectorBase(NetworkIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         EventReporter _event_reporter
 */
struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase {
  struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_base;
  struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter *_event_reporter;
  struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger *_event_logger;
  int _trading_required;
  PyObject *_account_available_balances;
  PyObject *_account_balances;
  int _real_time_balance_update;
  PyObject *_in_flight_orders_snapshot;
  double _in_flight_orders_snapshot_timestamp;
  PyObject *_current_trade_fills;
  PyObject *_exchange_order_ids;
};


/* "hummingbot/connector/exchange_base.pxd":10
 * )
 * 
 * cdef class ExchangeBase(ConnectorBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _order_book_tracker
 */
struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase {
  struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase __pyx_base;
  PyObject *_order_book_tracker;
};


/* "hummingbot/core/data_type/transaction_tracker.pxd":4
 * 
 * 
 * cdef class TransactionTracker(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         dict _tx_time_limits
 */
struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker {
  struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *_tx_time_limits;
};


/* "hummingbot/connector/trading_rule.pxd":1
 * cdef class TradingRule:             # <<<<<<<<<<<<<<
 *     cdef:
 *         public str trading_pair
 */
struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule {
  PyObject_HEAD
  PyObject *trading_pair;
  PyObject *min_order_size;
  PyObject *max_order_size;
  PyObject *min_price_increment;
  PyObject *min_base_amount_increment;
  PyObject *min_quote_amount_increment;
  PyObject *max_price_significant_digits;
  PyObject *min_notional_size;
  PyObject *min_order_value;
  int supports_limit_orders;
  int supports_market_orders;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pxd":7
 * 
 * 
 * cdef class BittrexExchange(ExchangeBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str _account_id
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange {
  struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase __pyx_base;
  PyObject *_account_id;
  PyObject *_bittrex_auth;
  PyObject *_coro_queue;
  PyObject *_ev_loop;
  PyObject *_in_flight_orders;
  double _last_timestamp;
  double _last_poll_timestamp;
  PyObject *_order_not_found_records;
  PyObject *_user_stream_tracker;
  PyObject *_poll_notifier;
  double _poll_interval;
  PyObject *_trading_rules;
  PyObject *_coro_scheduler_task;
  PyObject *_shared_client;
  PyObject *_status_polling_task;
  PyObject *_trading_rules_polling_task;
  PyObject *_user_stream_event_listener_task;
  PyObject *_user_stream_tracker_task;
  struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *_tx_tracker;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":42
 * 
 * 
 * cdef class BittrexExchangeTransactionTracker(TransactionTracker):             # <<<<<<<<<<<<<<
 *     cdef:
 *         BittrexExchange _owner
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker {
  struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker __pyx_base;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *_owner;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":157
 *         })
 * 
 *     async def get_active_exchange_markets(self) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         return await BittrexAPIOrderBookDataSource.get_active_exchange_markets()
 * 
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":199
 *         return estimate_fee("bittrex", is_maker)
 * 
 *     async def _update_balances(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             dict account_info
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances {
  PyObject_HEAD
  PyObject *__pyx_v_account_balances;
  PyObject *__pyx_v_account_info;
  PyObject *__pyx_v_asset_name;
  PyObject *__pyx_v_asset_names_to_remove;
  PyObject *__pyx_v_available_balance;
  PyObject *__pyx_v_balance_entry;
  PyObject *__pyx_v_balances;
  PyObject *__pyx_v_local_asset_names;
  PyObject *__pyx_v_path_url;
  PyObject *__pyx_v_remote_asset_names;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self;
  PyObject *__pyx_v_total_balance;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":269
 *         return retval
 * 
 *     async def _update_trading_rules(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             # The poll interval for withdraw rules is 60 seconds.
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules {
  PyObject_HEAD
  int64_t __pyx_v_current_tick;
  PyObject *__pyx_8genexpr3__pyx_v_item;
  PyObject *__pyx_v_item;
  int64_t __pyx_v_last_tick;
  PyObject *__pyx_8genexpr4__pyx_v_market;
  PyObject *__pyx_8genexpr5__pyx_v_market;
  PyObject *__pyx_v_market_list;
  PyObject *__pyx_v_market_path_url;
  PyObject *__pyx_v_result_list;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self;
  PyObject *__pyx_v_ticker_data;
  PyObject *__pyx_v_ticker_list;
  PyObject *__pyx_v_ticker_path_url;
  PyObject *__pyx_v_trading_rule;
  PyObject *__pyx_v_trading_rules_list;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":300
 *                 self._trading_rules[trading_rule.trading_pair] = trading_rule
 * 
 *     async def list_orders(self) -> List[Any]:             # <<<<<<<<<<<<<<
 *         """
 *         Only a list of all currently open orders(does not include filled orders)
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders {
  PyObject_HEAD
  PyObject *__pyx_v_path_url;
  PyObject *__pyx_v_result;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":334
 *         return result
 * 
 *     async def _update_order_status(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             # This is intended to be a backup measure to close straggler orders, in case Bittrex's user stream events
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status {
  PyObject_HEAD
  PyObject *__pyx_v_client_order_id;
  int64_t __pyx_v_current_tick;
  PyObject *__pyx_v_exchange_order_id;
  PyObject *__pyx_v_executed_amount_diff;
  PyObject *__pyx_v_executed_price;
  PyObject *__pyx_v_genexpr;
  int64_t __pyx_v_last_tick;
  PyObject *__pyx_v_new_confirmed_amount;
  PyObject *__pyx_v_open_orders;
  PyObject *__pyx_v_order;
  PyObject *__pyx_v_order_state;
  PyObject *__pyx_v_order_type;
  PyObject *__pyx_v_order_type_description;
  PyObject *__pyx_v_remaining_size;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self;
  PyObject *__pyx_v_tracked_order;
  PyObject *__pyx_v_tracked_orders;
  PyObject *__pyx_v_trade_type;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":347
 *             tracked_orders = list(self._in_flight_orders.values())
 *             open_orders = await self.list_orders()
 *             open_orders = dict((entry["id"], entry) for entry in open_orders)             # <<<<<<<<<<<<<<
 * 
 *             for tracked_order in tracked_orders:
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status *__pyx_outer_scope;
  PyObject *__pyx_v_entry;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":478
 *         self.c_stop_tracking_order(client_order_id)
 * 
 *     async def _iter_user_stream_queue(self) -> AsyncIterable[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":488
 *                 await asyncio.sleep(1.0)
 * 
 *     async def _user_stream_event_listener(self):             # <<<<<<<<<<<<<<
 *         async for stream_message in self._iter_user_stream_queue():
 *             try:
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener {
  PyObject_HEAD
  PyObject *__pyx_v_asset_name;
  PyObject *__pyx_v_available_balance;
  PyObject *__pyx_v_balance_delta;
  PyObject *__pyx_v_content;
  PyObject *__pyx_v_event_type;
  PyObject *__pyx_v_exchange_order_id;
  PyObject *__pyx_v_execute_price;
  PyObject *__pyx_v_executed_amount_diff;
  PyObject *__pyx_v_new_confirmed_amount;
  PyObject *__pyx_v_o;
  PyObject *__pyx_v_order;
  PyObject *__pyx_v_order_id;
  PyObject *__pyx_v_order_status;
  PyObject *__pyx_v_order_type_description;
  PyObject *__pyx_v_remaining_size;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self;
  PyObject *__pyx_v_stream_message;
  PyObject *__pyx_v_total_balance;
  PyObject *__pyx_v_tracked_order;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8;
  PyObject *__pyx_t_9;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":603
 *                 await asyncio.sleep(5.0)
 * 
 *     async def _status_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":623
 *                 await asyncio.sleep(5.0)
 * 
 *     async def _trading_rules_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":709
 *         return [OrderType.LIMIT, OrderType.LIMIT_MAKER]
 * 
 *     async def place_order(self,             # <<<<<<<<<<<<<<
 *                           order_id: str,
 *                           trading_pair: str,
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order {
  PyObject_HEAD
  PyObject *__pyx_v_amount;
  PyObject *__pyx_v_api_response;
  PyObject *__pyx_v_body;
  PyObject *__pyx_v_is_buy;
  PyObject *__pyx_v_order_id;
  PyObject *__pyx_v_order_type;
  PyObject *__pyx_v_path_url;
  PyObject *__pyx_v_price;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self;
  PyObject *__pyx_v_trading_pair;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":743
 *         return api_response
 * 
 *     async def execute_buy(self,             # <<<<<<<<<<<<<<
 *                           order_id: str,
 *                           trading_pair: str,
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy {
  PyObject_HEAD
  PyObject *__pyx_v_amount;
  PyObject *__pyx_v_decimal_amount;
  PyObject *__pyx_v_decimal_price;
  PyObject *__pyx_v_exchange_order_id;
  PyObject *__pyx_v_order_id;
  PyObject *__pyx_v_order_result;
  PyObject *__pyx_v_order_type;
  PyObject *__pyx_v_order_type_str;
  PyObject *__pyx_v_price;
  double __pyx_v_quote_amount;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self;
  PyObject *__pyx_v_tracked_order;
  PyObject *__pyx_v_trading_pair;
  struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule *__pyx_v_trading_rule;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":839
 *         return order_id
 * 
 *     async def execute_sell(self,             # <<<<<<<<<<<<<<
 *                            order_id: str,
 *                            trading_pair: str,
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell {
  PyObject_HEAD
  PyObject *__pyx_v_amount;
  PyObject *__pyx_v_decimal_amount;
  PyObject *__pyx_v_decimal_price;
  PyObject *__pyx_v_exchange_order_id;
  PyObject *__pyx_v_order_id;
  PyObject *__pyx_v_order_result;
  PyObject *__pyx_v_order_type;
  PyObject *__pyx_v_order_type_str;
  PyObject *__pyx_v_price;
  double __pyx_v_quote_amount;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self;
  PyObject *__pyx_v_tracked_order;
  PyObject *__pyx_v_trading_pair;
  struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule *__pyx_v_trading_rule;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":932
 *         return order_id
 * 
 *     async def execute_cancel(self, trading_pair: str, order_id: str):             # <<<<<<<<<<<<<<
 *         try:
 *             tracked_order = self._in_flight_orders.get(order_id)
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel {
  PyObject_HEAD
  PyObject *__pyx_v_cancel_result;
  PyObject *__pyx_v_err;
  PyObject *__pyx_v_order_id;
  PyObject *__pyx_v_path_url;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self;
  PyObject *__pyx_v_state_result;
  PyObject *__pyx_v_tracked_order;
  PyObject *__pyx_v_trading_pair;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":981
 *         return order_id
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:             # <<<<<<<<<<<<<<
 *         incomplete_orders = [order for order in self._in_flight_orders.values() if not order.is_done]
 *         tasks = [self.execute_cancel(o.trading_pair, o.client_order_id) for o in incomplete_orders]
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all {
  PyObject_HEAD
  PyObject *__pyx_v_api_responses;
  PyObject *__pyx_v_failed_cancellation;
  PyObject *__pyx_v_incomplete_orders;
  PyObject *__pyx_8genexpr8__pyx_v_o;
  PyObject *__pyx_8genexpr9__pyx_v_o;
  PyObject *__pyx_9genexpr10__pyx_v_oid;
  PyObject *__pyx_8genexpr7__pyx_v_order;
  PyObject *__pyx_v_order_id;
  PyObject *__pyx_v_order_id_set;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self;
  PyObject *__pyx_v_successful_cancellation;
  PyObject *__pyx_v_tasks;
  double __pyx_v_timeout_seconds;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
  PyObject *__pyx_t_6;
  PyObject *__pyx_t_7;
  PyObject *__pyx_t_8;
  PyObject *__pyx_t_9;
  PyObject *__pyx_t_10;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1003
 *         return successful_cancellation + failed_cancellation
 * 
 *     async def _http_client(self) -> aiohttp.ClientSession:             # <<<<<<<<<<<<<<
 *         if self._shared_client is None:
 *             self._shared_client = aiohttp.ClientSession()
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1008
 *         return self._shared_client
 * 
 *     async def _api_request(self,             # <<<<<<<<<<<<<<
 *                            http_method: str,
 *                            path_url: str = None,
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request {
  PyObject_HEAD
  PyObject *__pyx_v_auth_dict;
  PyObject *__pyx_v_body;
  PyObject *__pyx_v_client;
  PyObject *__pyx_v_data;
  PyObject *__pyx_v_headers;
  PyObject *__pyx_v_http_method;
  PyObject *__pyx_v_params;
  PyObject *__pyx_v_path_url;
  PyObject *__pyx_v_response;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self;
  PyObject *__pyx_v_subaccount_id;
  PyObject *__pyx_v_url;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
  PyObject *__pyx_t_3;
  PyObject *__pyx_t_4;
  PyObject *__pyx_t_5;
  PyObject *__pyx_t_6;
  PyObject *__pyx_t_7;
  PyObject *__pyx_t_8;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1039
 *             return data
 * 
 *     async def check_network(self) -> NetworkStatus:             # <<<<<<<<<<<<<<
 *         try:
 *             await self._api_request("GET", path_url="/ping")
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self;
  PyObject *__pyx_t_0;
  PyObject *__pyx_t_1;
  PyObject *__pyx_t_2;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1059
 *             self._user_stream_event_listener_task = None
 * 
 *     async def stop_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 * 
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self;
};


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1062
 *         self._stop_network()
 * 
 *     async def start_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 *         self._order_book_tracker.start()
 */
struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network {
  PyObject_HEAD
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self;
};



/* "hummingbot/core/pubsub.pxd":17
 * 
 * 
 * cdef class PubSub:             # <<<<<<<<<<<<<<
 *     cdef:
 *         Events _events
 */

struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub {
  PyObject *(*c_log_exception)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, PyObject *);
  PyObject *(*c_add_listener)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *);
  PyObject *(*c_remove_listener)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *);
  PyObject *(*c_remove_dead_listeners)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t);
  PyObject *(*c_get_listeners)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t);
  PyObject *(*c_trigger_event)(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *, int64_t, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub *__pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub;


/* "event_listener.pxd":6
 * 
 * 
 * cdef class EventListener:             # <<<<<<<<<<<<<<
 *     cdef:
 *         object __weakref__
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener {
  PyObject *(*c_set_event_info)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, int64_t, struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *);
  PyObject *(*c_call)(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener *__pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener;


/* "hummingbot/core/event/event_reporter.pxd":4
 * 
 * 
 * cdef class EventReporter(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str event_source
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter {
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter *__pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter;


/* "hummingbot/core/event/event_logger.pxd":4
 * 
 * 
 * cdef class EventLogger(EventListener):             # <<<<<<<<<<<<<<
 *     cdef:
 *         str _event_source
 */

struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger {
  struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger *__pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger;


/* "hummingbot/core/data_type/order_book.pxd":12
 * 
 * 
 * cdef class OrderBook(PubSub):             # <<<<<<<<<<<<<<
 *     cdef set[OrderBookEntry] _bid_book
 *     cdef set[OrderBookEntry] _ask_book
 */

struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook {
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  PyObject *(*c_apply_diffs)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, std::vector<OrderBookEntry> , std::vector<OrderBookEntry> , int64_t);
  PyObject *(*c_apply_snapshot)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, std::vector<OrderBookEntry> , std::vector<OrderBookEntry> , int64_t);
  PyObject *(*c_apply_trade)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyObject *);
  PyObject *(*c_apply_numpy_diffs)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyArrayObject *, PyArrayObject *);
  PyObject *(*c_apply_numpy_snapshot)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, PyArrayObject *, PyArrayObject *);
  double (*c_get_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_price_for_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_price_for_quote_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_volume_for_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_quote_volume_for_price)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_vwap_for_volume)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult *(*c_get_quote_volume_for_base_amount)(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *, int, double);
};
static struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook;


/* "hummingbot/core/time_iterator.pxd":7
 * 
 * 
 * cdef class TimeIterator(PubSub):             # <<<<<<<<<<<<<<
 *     cdef:
 *         double _current_timestamp
 */

struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator {
  struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub __pyx_base;
  PyObject *(*c_start)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *, double);
  PyObject *(*c_stop)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *);
  PyObject *(*c_tick)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, double);
};
static struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator *__pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator;


/* "hummingbot/core/network_iterator.pxd":6
 * 
 * 
 * cdef class NetworkIterator(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _network_status
 */

struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator *__pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator;


/* "hummingbot/connector/connector_base.pxd":5
 * from hummingbot.core.network_iterator cimport NetworkIterator
 * 
 * cdef class ConnectorBase(NetworkIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         EventReporter _event_reporter
 */

struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase {
  struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_base;
  PyObject *(*c_buy)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy *__pyx_optional_args);
  PyObject *(*c_sell)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell *__pyx_optional_args);
  PyObject *(*c_cancel)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_stop_tracking_order)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_balance)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_available_balance)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *);
  PyObject *(*c_get_price)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, int);
  PyObject *(*c_get_order_price_quantum)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_get_order_size_quantum)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_quantize_order_price)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *);
  PyObject *(*c_quantize_order_amount)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount *__pyx_optional_args);
};
static struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase *__pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase;


/* "hummingbot/connector/exchange_base.pxd":10
 * )
 * 
 * cdef class ExchangeBase(ConnectorBase):             # <<<<<<<<<<<<<<
 *     cdef:
 *         object _order_book_tracker
 */

struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase {
  struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase __pyx_base;
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *(*c_get_order_book)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_quote_volume_for_base_amount)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_volume_for_price)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_quote_volume_for_price)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_vwap_for_volume)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult *(*c_get_price_for_volume)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, int, PyObject *);
  PyObject *(*c_get_fee)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase *__pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase;


/* "hummingbot/core/data_type/transaction_tracker.pxd":4
 * 
 * 
 * cdef class TransactionTracker(TimeIterator):             # <<<<<<<<<<<<<<
 *     cdef:
 *         dict _tx_time_limits
 */

struct __pyx_vtabstruct_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker {
  struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator __pyx_base;
  PyObject *(*c_start_tx_tracking)(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *, PyObject *, float);
  PyObject *(*c_stop_tx_tracking)(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *, PyObject *);
  int (*c_is_tx_tracked)(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *, PyObject *);
  PyObject *(*c_did_timeout_tx)(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *, PyObject *);
  PyObject *(*c_process_tx_timeouts)(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *);
};
static struct __pyx_vtabstruct_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *__pyx_vtabptr_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker;


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":54
 *         self._owner.c_did_timeout_tx(tx_id)
 * 
 * cdef class BittrexExchange(ExchangeBase):             # <<<<<<<<<<<<<<
 *     MARKET_RECEIVED_ASSET_EVENT_TAG = MarketEvent.ReceivedAsset.value
 *     MARKET_BUY_ORDER_COMPLETED_EVENT_TAG = MarketEvent.BuyOrderCompleted.value
 */

struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange {
  struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase __pyx_base;
  PyObject *(*c_start_tracking_order)(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *);
  PyObject *(*c_did_timeout_tx)(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *, PyObject *);
};
static struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_vtabptr_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange;


/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":42
 * 
 * 
 * cdef class BittrexExchangeTransactionTracker(TransactionTracker):             # <<<<<<<<<<<<<<
 *     cdef:
 *         BittrexExchange _owner
 */

struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker {
  struct __pyx_vtabstruct_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker __pyx_base;
};
static struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *__pyx_vtabptr_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__))
  #define __Pyx_RefNannyFinishContextNogil() __Pyx_RefNannyFinishContext()
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#define __Pyx_PyErr_Occurred()  __pyx_tstate->curexc_type
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#define __Pyx_Arg_VARARGS(args, i) PyTuple_GET_ITEM(args, i)
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_Arg_FASTCALL(args, i) args[i]
    #define __Pyx_NumKwargs_FASTCALL(kwds) PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) (&args[nargs])
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
#else
    #define __Pyx_Arg_FASTCALL __Pyx_Arg_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_VARARGS(args, start), stop - start)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(&__Pyx_Arg_FASTCALL(args, start), stop - start)
#else
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs);

/* KeywordStringCheck.proto */
static int __Pyx_CheckKeywordStrings(PyObject *kw, const char* function_name, int kw_allowed);

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
#define __Pyx_GetModuleGlobalNameUncached(var, name)  {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
}
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* RaiseNoneIterError.proto */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

/* UnpackTupleError.proto */
static void __Pyx_UnpackTupleError(PyObject *, Py_ssize_t index);

/* UnpackTuple2.proto */
#define __Pyx_unpack_tuple2(tuple, value1, value2, is_tuple, has_known_size, decref_tuple)\
    (likely(is_tuple || PyTuple_Check(tuple)) ?\
        (likely(has_known_size || PyTuple_GET_SIZE(tuple) == 2) ?\
            __Pyx_unpack_tuple2_exact(tuple, value1, value2, decref_tuple) :\
            (__Pyx_UnpackTupleError(tuple, 2), -1)) :\
        __Pyx_unpack_tuple2_generic(tuple, value1, value2, has_known_size, decref_tuple))
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
    PyObject* tuple, PyObject** value1, PyObject** value2, int decref_tuple);
static int __Pyx_unpack_tuple2_generic(
    PyObject* tuple, PyObject** value1, PyObject** value2, int has_known_size, int decref_tuple);

/* dict_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* dict, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_is_dict);
static CYTHON_INLINE int __Pyx_dict_iter_next(PyObject* dict_or_iter, Py_ssize_t orig_length, Py_ssize_t* ppos,
                                              PyObject** pkey, PyObject** pvalue, PyObject** pitem, int is_dict);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);
#if CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyType_Spec *spec, PyObject *bases);
#endif

/* GetTopmostException.proto */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem * __Pyx_PyErr_GetTopmostException(PyThreadState *tstate);
#endif

/* SaveResetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* SwapException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
struct __pyx_CoroutineObject;
typedef PyObject *(*__pyx_coroutine_body_t)(struct __pyx_CoroutineObject *, PyThreadState *, PyObject *);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_ExcInfoStruct  _PyErr_StackItem
#else
typedef struct {
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
} __Pyx_ExcInfoStruct;
#endif
typedef struct __pyx_CoroutineObject {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    __Pyx_ExcInfoStruct gi_exc_state;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    PyObject *gi_modulename;
    PyObject *gi_code;
    PyObject *gi_frame;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
    PyTypeObject *type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
    PyObject *name, PyObject *qualname, PyObject *module_name);
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name);
static CYTHON_INLINE void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *self);
static int __Pyx_Coroutine_clear(PyObject *self);
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#if CYTHON_USE_EXC_INFO_STACK
#define __Pyx_Coroutine_SwapException(self)
#define __Pyx_Coroutine_ResetAndClearException(self)  __Pyx_Coroutine_ExceptionClear(&(self)->gi_exc_state)
#else
#define __Pyx_Coroutine_SwapException(self) {\
    __Pyx_ExceptionSwap(&(self)->gi_exc_state.exc_type, &(self)->gi_exc_state.exc_value, &(self)->gi_exc_state.exc_traceback);\
    __Pyx_Coroutine_ResetFrameBackpointer(&(self)->gi_exc_state);\
    }
#define __Pyx_Coroutine_ResetAndClearException(self) {\
    __Pyx_ExceptionReset((self)->gi_exc_state.exc_type, (self)->gi_exc_state.exc_value, (self)->gi_exc_state.exc_traceback);\
    (self)->gi_exc_state.exc_type = (self)->gi_exc_state.exc_value = (self)->gi_exc_state.exc_traceback = NULL;\
    }
#endif
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__pyx_tstate, pvalue)
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue)\
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, pvalue)
#endif
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *tstate, PyObject **pvalue);
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state);

/* PyObject_GenericGetAttrNoDict.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttrNoDict PyObject_GenericGetAttr
#endif

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Coroutine.proto */
#define __Pyx_Coroutine_USED
static PyTypeObject *__pyx_CoroutineType = 0;
static PyTypeObject *__pyx_CoroutineAwaitType = 0;
#define __Pyx_Coroutine_CheckExact(obj) __Pyx_IS_TYPE(obj, __pyx_CoroutineType)
#define __Pyx_Coroutine_Check(obj) __Pyx_Coroutine_CheckExact(obj)
#define __Pyx_CoroutineAwait_CheckExact(obj) __Pyx_IS_TYPE(obj, __pyx_CoroutineAwaitType)
#define __Pyx_Coroutine_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_CoroutineType, body, code, closure, name, qualname, module_name)
static int __pyx_Coroutine_init(void);
static PyObject *__Pyx__Coroutine_await(PyObject *coroutine);
typedef struct {
    PyObject_HEAD
    PyObject *coroutine;
} __pyx_CoroutineAwaitObject;
static PyObject *__Pyx_CoroutineAwait_Close(__pyx_CoroutineAwaitObject *self, PyObject *arg);
static PyObject *__Pyx_CoroutineAwait_Throw(__pyx_CoroutineAwaitObject *self, PyObject *args);

/* GetAwaitIter.proto */
static CYTHON_INLINE PyObject *__Pyx_Coroutine_GetAwaitableIter(PyObject *o);
static PyObject *__Pyx__Coroutine_GetAwaitableIter(PyObject *o);

/* CoroutineYieldFrom.proto */
static CYTHON_INLINE PyObject* __Pyx_Coroutine_Yield_From(__pyx_CoroutineObject *gen, PyObject *source);

/* ReturnWithStopIteration.proto */
#define __Pyx_ReturnWithStopIteration(value)\
    if (value == Py_None) PyErr_SetNone(PyExc_StopIteration); else __Pyx__ReturnWithStopIteration(value)
static void __Pyx__ReturnWithStopIteration(PyObject* value);

/* GetException.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* pep479.proto */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen);

/* py_dict_keys.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;

/* CallUnboundCMethod0.proto */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self);
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CallUnboundCMethod0(cfunc, self)\
    (likely((cfunc)->func) ?\
        (likely((cfunc)->flag == METH_NOARGS) ?  (*((cfunc)->func))(self, NULL) :\
         (PY_VERSION_HEX >= 0x030600B1 && likely((cfunc)->flag == METH_FASTCALL) ?\
            (PY_VERSION_HEX >= 0x030700A0 ?\
                (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0) :\
                (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL)) :\
          (PY_VERSION_HEX >= 0x030700A0 && (cfunc)->flag == (METH_FASTCALL | METH_KEYWORDS) ?\
            (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, &__pyx_empty_tuple, 0, NULL) :\
            (likely((cfunc)->flag == (METH_VARARGS | METH_KEYWORDS)) ?  ((*(PyCFunctionWithKeywords)(void*)(PyCFunction)(cfunc)->func)(self, __pyx_empty_tuple, NULL)) :\
               ((cfunc)->flag == METH_VARARGS ?  (*((cfunc)->func))(self, __pyx_empty_tuple) :\
               __Pyx__CallUnboundCMethod0(cfunc, self)))))) :\
        __Pyx__CallUnboundCMethod0(cfunc, self))
#else
#define __Pyx_CallUnboundCMethod0(cfunc, self)  __Pyx__CallUnboundCMethod0(cfunc, self)
#endif

/* DictGetItem.proto */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key);
#define __Pyx_PyObject_Dict_GetItem(obj, name)\
    (likely(PyDict_CheckExact(obj)) ?\
     __Pyx_PyDict_GetItem(obj, name) : PyObject_GetItem(obj, name))
#else
#define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#define __Pyx_PyObject_Dict_GetItem(obj, name)  PyObject_GetItem(obj, name)
#endif

/* RaiseUnexpectedTypeError.proto */
static int __Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj);

/* CallUnboundCMethod1.proto */
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg);
#else
#define __Pyx_CallUnboundCMethod1(cfunc, self, arg)  __Pyx__CallUnboundCMethod1(cfunc, self, arg)
#endif

/* set_iter.proto */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set);
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set);

/* PyIntCompare.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif PY_MAJOR_VERSION < 3
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyString_CheckExact(s)) ? PyUnicode_FromEncodedObject(s, NULL, "strict") :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* JoinPyUnicode.proto */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char);

/* PyDictContains.proto */
static CYTHON_INLINE int __Pyx_PyDict_ContainsTF(PyObject* item, PyObject* dict, int eq) {
    int result = PyDict_Contains(dict, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* RaiseMappingExpected.proto */
static void __Pyx_RaiseMappingExpectedError(PyObject* arg);

/* py_dict_clear.proto */
#define __Pyx_PyDict_Clear(d) (PyDict_Clear(d), 0)

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* py_dict_values.proto */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Values(PyObject* d);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
#define __Pyx_PyErr_GivenExceptionMatches2(err, type1, type2) (PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2))
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_Occurred(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* dict_getitem_default.proto */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value);

/* CallUnboundCMethod2.proto */
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* PyIntBinop.proto */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace, zerodivision_check)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* StopAsyncIteration.proto */
#define __Pyx_StopAsyncIteration_USED
static PyObject *__Pyx_PyExc_StopAsyncIteration;
static int __pyx_StopAsyncIteration_init(void);

/* AsyncIter.proto */
static CYTHON_INLINE PyObject *__Pyx_Coroutine_GetAsyncIter(PyObject *o);
static CYTHON_INLINE PyObject *__Pyx_Coroutine_AsyncIterNext(PyObject *o);

/* PyUnicode_Unicode.proto */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* PyObject_Str.proto */
#define __Pyx_PyObject_Str(obj)\
    (likely(PyString_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))

/* PyObjectFormat.proto */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* s, PyObject* f);
#else
#define __Pyx_PyObject_Format(s, f) PyObject_Format(s, f)
#endif

/* PyUnicodeContains.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_ContainsTF(PyObject* substring, PyObject* text, int eq) {
    int result = PyUnicode_Contains(text, substring);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_LookupSpecialNoError(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 0)
#define __Pyx_PyObject_LookupSpecial(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 1)
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);
#else
#define __Pyx_PyObject_LookupSpecialNoError(o,n) __Pyx_PyObject_GetAttrStrNoError(o,n)
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* pyfrozenset_new.proto */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it);

/* py_set_remove.proto */
static CYTHON_INLINE int __Pyx_PySet_Remove(PyObject *set, PyObject *key);

/* UnicodeConcatInPlace.proto */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
    #if CYTHON_REFNANNY
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right, __pyx_refnanny)
    #else
        #define __Pyx_PyUnicode_ConcatInPlace(left, right) __Pyx_PyUnicode_ConcatInPlaceImpl(&left, right)
    #endif
    static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    );
#else
#define __Pyx_PyUnicode_ConcatInPlace __Pyx_PyUnicode_Concat
#endif
#define __Pyx_PyUnicode_ConcatInPlaceSafe(left, right) ((unlikely((left) == Py_None) || unlikely((right) == Py_None)) ?\
    PyNumber_InPlaceAdd(left, right) : __Pyx_PyUnicode_ConcatInPlace(left, right))

/* CallNextTpDealloc.proto */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto
#define __PYX_HAVE_RT_ImportType_proto
enum __Pyx_ImportType_CheckSize {
   __Pyx_ImportType_CheckSize_Error = 0,
   __Pyx_ImportType_CheckSize_Warn = 1,
   __Pyx_ImportType_CheckSize_Ignore = 2
};
static PyTypeObject *__Pyx_ImportType(PyObject* module, const char *module_name, const char *class_name, size_t size, enum __Pyx_ImportType_CheckSize check_size);
#endif

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* PyType_Ready.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_PyType_Ready(PyTypeObject *t);
#else
#define __Pyx_PyType_Ready(t) PyType_Ready(t)
#endif

/* PyObject_GenericGetAttr.proto */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GenericGetAttr PyObject_GenericGetAttr
#endif

/* SetVTable.proto */
static int __Pyx_SetVtable(PyObject *dict, void *vtable);

/* MergeVTables.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type);
#endif

/* SetupReduce.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce(PyObject* type_obj);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);

/* PatchInspect.proto */
static PyObject* __Pyx_patch_inspect(PyObject* module);

/* PatchAsyncIO.proto */
static PyObject* __Pyx_patch_asyncio(PyObject* module);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* PyMethodNew.proto */
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#else
    #define __Pyx_PyMethod_New PyMethod_New
#endif

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if CYTHON_BACKPORT_VECTORCALL
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    size_t defaults_size;  // used by FusedFunction for copying defaults
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_CyFunctionType = 0;
#endif
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_CyFunctionType)
#define __Pyx_IsCyOrPyCFunction(obj)  __Pyx_TypeCheck2(obj, __pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_CyFunctionType)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func.vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* ClassMethod.proto */
#include "descrobject.h"
static CYTHON_UNUSED PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* GetNameInClass.proto */
#define __Pyx_GetNameInClass(var, nmspace, name)  (var) = __Pyx__GetNameInClass(nmspace, name)
static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name);

/* CLineInTraceback.proto */
#ifdef CYTHON_CLINE_IN_TRACEBACK
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#else
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#endif

/* CodeObjectCache.proto */
#if !CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);
#endif

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* GCCDiagnostics.proto */
#if defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* None.proto */
#include <new>

/* RealImag.proto */
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if defined(__cplusplus) && CYTHON_CCOMPLEX\
        && (defined(_WIN32) || defined(__clang__) || (defined(__GNUC__) && (__GNUC__ >= 5 || __GNUC__ == 4 && __GNUC_MINOR__ >= 4 )) || __cplusplus >= 201103)
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_float(a, b)   ((a)==(b))
    #define __Pyx_c_sum_float(a, b)  ((a)+(b))
    #define __Pyx_c_diff_float(a, b) ((a)-(b))
    #define __Pyx_c_prod_float(a, b) ((a)*(b))
    #define __Pyx_c_quot_float(a, b) ((a)/(b))
    #define __Pyx_c_neg_float(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_float(z) ((z)==(float)0)
    #define __Pyx_c_conj_float(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (::std::abs(z))
        #define __Pyx_c_pow_float(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_float(z) ((z)==0)
    #define __Pyx_c_conj_float(z)    (conjf(z))
    #if 1
        #define __Pyx_c_abs_float(z)     (cabsf(z))
        #define __Pyx_c_pow_float(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

/* Arithmetic.proto */
#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq_double(a, b)   ((a)==(b))
    #define __Pyx_c_sum_double(a, b)  ((a)+(b))
    #define __Pyx_c_diff_double(a, b) ((a)-(b))
    #define __Pyx_c_prod_double(a, b) ((a)*(b))
    #define __Pyx_c_quot_double(a, b) ((a)/(b))
    #define __Pyx_c_neg_double(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero_double(z) ((z)==(double)0)
    #define __Pyx_c_conj_double(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (::std::abs(z))
        #define __Pyx_c_pow_double(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero_double(z) ((z)==0)
    #define __Pyx_c_conj_double(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs_double(z)     (cabs(z))
        #define __Pyx_c_pow_double(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
static __Pyx_TypeName __Pyx_PyType_GetName(PyTypeObject* tp);
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#else
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) __Pyx_IS_TYPE(obj, __pyx_GeneratorType)
#define __Pyx_Generator_New(body, code, closure, name, qualname, module_name)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, code, closure, name, qualname, module_name)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* AsyncGenerator.proto */
#define __Pyx_AsyncGen_USED
typedef struct {
    __pyx_CoroutineObject coro;
    PyObject *ag_finalizer;
    int ag_hooks_inited;
    int ag_closed;
    int ag_running_async;
} __pyx_PyAsyncGenObject;
static PyTypeObject *__pyx__PyAsyncGenWrappedValueType = 0;
static PyTypeObject *__pyx__PyAsyncGenASendType = 0;
static PyTypeObject *__pyx__PyAsyncGenAThrowType = 0;
static PyTypeObject *__pyx_AsyncGenType = 0;
#define __Pyx_AsyncGen_CheckExact(obj) __Pyx_IS_TYPE(obj, __pyx_AsyncGenType)
#define __pyx_PyAsyncGenASend_CheckExact(o)\
                    __Pyx_IS_TYPE(o, __pyx__PyAsyncGenASendType)
#define __pyx_PyAsyncGenAThrow_CheckExact(o)\
                    __Pyx_IS_TYPE(o, __pyx__PyAsyncGenAThrowType)
static PyObject *__Pyx_async_gen_anext(PyObject *o);
static CYTHON_INLINE PyObject *__Pyx_async_gen_asend_iternext(PyObject *o);
static PyObject *__Pyx_async_gen_asend_send(PyObject *o, PyObject *arg);
static PyObject *__Pyx_async_gen_asend_close(PyObject *o, PyObject *args);
static PyObject *__Pyx_async_gen_athrow_close(PyObject *o, PyObject *args);
static PyObject *__Pyx__PyAsyncGenValueWrapperNew(PyObject *val);
static __pyx_CoroutineObject *__Pyx_AsyncGen_New(
            __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_PyAsyncGenObject *gen = PyObject_GC_New(__pyx_PyAsyncGenObject, __pyx_AsyncGenType);
    if (unlikely(!gen))
        return NULL;
    gen->ag_finalizer = NULL;
    gen->ag_closed = 0;
    gen->ag_hooks_inited = 0;
    gen->ag_running_async = 0;
    return __Pyx__Coroutine_NewInit((__pyx_CoroutineObject*)gen, body, code, closure, name, qualname, module_name);
}
static int __pyx_AsyncGen_init(void);
static void __Pyx_PyAsyncGen_Fini(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str);
#else
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);
#endif

/* #### Code section: module_declarations ### */
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_c_did_timeout_tx(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *__pyx_v_self, PyObject *__pyx_v_tx_id); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_start(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, struct __pyx_obj_10hummingbot_4core_5clock_Clock *__pyx_v_clock, double __pyx_v_timestamp); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_tick(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, double __pyx_v_timestamp); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_get_fee(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_base_currency, CYTHON_UNUSED PyObject *__pyx_v_quote_currency, PyObject *__pyx_v_order_type, CYTHON_UNUSED PyObject *__pyx_v_order_side, CYTHON_UNUSED PyObject *__pyx_v_amount, CYTHON_UNUSED PyObject *__pyx_v_price); /* proto*/
static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_get_order_book(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_start_tracking_order(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_exchange_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_order_type, PyObject *__pyx_v_trade_type, PyObject *__pyx_v_price, PyObject *__pyx_v_amount); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_stop_tracking_order(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_order_id); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_did_timeout_tx(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_tracking_id); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_get_order_price_quantum(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, CYTHON_UNUSED PyObject *__pyx_v_price); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_get_order_size_quantum(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, CYTHON_UNUSED PyObject *__pyx_v_order_size); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_quantize_order_amount(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_quantize_order_amount *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_buy(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_buy *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_sell(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_sell *__pyx_optional_args); /* proto*/
static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_cancel(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_order_id); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self); /* proto*/
static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self); /* proto*/

/* Module declarations from "libc.stdint" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.utility" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.unordered_map" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.unordered_set" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.PyRef" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.pubsub" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_6pubsub_PubSub = 0;
#endif

/* Module declarations from "hummingbot.core.event.event_listener" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener = 0;
#endif

/* Module declarations from "hummingbot.core.event.event_reporter" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter = 0;
#endif

/* Module declarations from "hummingbot.core.event.event_logger" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger = 0;
#endif

/* Module declarations from "libcpp.set" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libcpp.vector" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.data_type.OrderBookEntry" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "hummingbot.core.data_type.order_book_query_result" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult = 0;
#endif

/* Module declarations from "libc.string" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "libc.stdio" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "__builtin__" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cpython.type" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;
#endif

/* Module declarations from "cpython" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cpython.object" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "cpython.ref" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "numpy" */
#if !CYTHON_COMPILING_IN_LIMITED_API
#endif

/* Module declarations from "numpy" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_generic = 0;
static PyTypeObject *__pyx_ptype_5numpy_number = 0;
static PyTypeObject *__pyx_ptype_5numpy_integer = 0;
static PyTypeObject *__pyx_ptype_5numpy_signedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_unsignedinteger = 0;
static PyTypeObject *__pyx_ptype_5numpy_inexact = 0;
static PyTypeObject *__pyx_ptype_5numpy_floating = 0;
static PyTypeObject *__pyx_ptype_5numpy_complexfloating = 0;
static PyTypeObject *__pyx_ptype_5numpy_flexible = 0;
static PyTypeObject *__pyx_ptype_5numpy_character = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
#endif

/* Module declarations from "hummingbot.core.data_type.order_book" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook = 0;
#endif

/* Module declarations from "hummingbot.core.clock" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_5clock_Clock = 0;
#endif

/* Module declarations from "hummingbot.core.time_iterator" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator = 0;
#endif

/* Module declarations from "hummingbot.core.network_iterator" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator = 0;
#endif

/* Module declarations from "hummingbot.connector.connector_base" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase = 0;
#endif

/* Module declarations from "hummingbot.connector.exchange_base" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase = 0;
#endif

/* Module declarations from "hummingbot.core.data_type.transaction_tracker" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker = 0;
#endif

/* Module declarations from "hummingbot.connector.trading_rule" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule = 0;
#endif

/* Module declarations from "hummingbot.connector.exchange.bittrex.bittrex_exchange" */
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network = 0;
static PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network = 0;
#endif
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "hummingbot.connector.exchange.bittrex.bittrex_exchange"
extern int __pyx_module_is_main_hummingbot__connector__exchange__bittrex__bittrex_exchange;
int __pyx_module_is_main_hummingbot__connector__exchange__bittrex__bittrex_exchange = 0;

/* Implementation of "hummingbot.connector.exchange.bittrex.bittrex_exchange" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_super;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_all;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_ImportError;
/* #### Code section: string_decls ### */
static const char __pyx_k_[] = "";
static const char __pyx_k_f[] = "f";
static const char __pyx_k_o[] = "o";
static const char __pyx_k_1e[] = "1e-";
static const char __pyx_k__9[] = ": ";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_id[] = "id";
static const char __pyx_k_pd[] = "pd";
static const char __pyx_k_ws[] = ". - ws";
static const char __pyx_k_Any[] = "Any";
static const char __pyx_k_BTC[] = "BTC";
static const char __pyx_k_BUY[] = "BUY";
static const char __pyx_k_ETH[] = "ETH";
static const char __pyx_k_GET[] = "GET";
static const char __pyx_k_NaN[] = "NaN";
static const char __pyx_k_The[] = "The ";
static const char __pyx_k_USD[] = "USD";
static const char __pyx_k__10[] = ".";
static const char __pyx_k__11[] = "-";
static const char __pyx_k__12[] = " ";
static const char __pyx_k__21[] = "'.";
static const char __pyx_k__49[] = "*";
static const char __pyx_k_all[] = "all";
static const char __pyx_k_buy[] = "buy-";
static const char __pyx_k_cls[] = "cls";
static const char __pyx_k_err[] = "err";
static const char __pyx_k_for[] = " for ";
static const char __pyx_k_get[] = "get";
static const char __pyx_k_key[] = "key";
static const char __pyx_k_oid[] = "oid";
static const char __pyx_k_set[] = "set";
static const char __pyx_k_str[] = "str";
static const char __pyx_k_url[] = "url";
static const char __pyx_k_1_01[] = "1.01";
static const char __pyx_k_CELO[] = "CELO-";
static const char __pyx_k_CGLD[] = "CGLD-";
static const char __pyx_k_Dict[] = "Dict";
static const char __pyx_k_List[] = "List";
static const char __pyx_k_None[] = "None";
static const char __pyx_k_POST[] = "POST";
static const char __pyx_k_SELL[] = "SELL";
static const char __pyx_k_USDT[] = "USDT";
static const char __pyx_k__108[] = "?";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_body[] = "body";
static const char __pyx_k_bool[] = "bool";
static const char __pyx_k_data[] = "data";
static const char __pyx_k_dict[] = "__dict__";
static const char __pyx_k_done[] = "done";
static const char __pyx_k_info[] = "info";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_item[] = "item";
static const char __pyx_k_json[] = "json";
static const char __pyx_k_keys[] = "keys";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_ping[] = "/ping";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_sell[] = "sell-";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_stop[] = "stop";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_wait[] = "wait";
static const char __pyx_k_Event[] = "Event";
static const char __pyx_k_LIMIT[] = "LIMIT";
static const char __pyx_k_aexit[] = "__aexit__";
static const char __pyx_k_aiter[] = "__aiter__";
static const char __pyx_k_anext[] = "__anext__";
static const char __pyx_k_await[] = "__await__";
static const char __pyx_k_buy_2[] = "buy";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_delta[] = "delta";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_float[] = "float";
static const char __pyx_k_items[] = "items";
static const char __pyx_k_limit[] = "limit";
static const char __pyx_k_lower[] = "lower";
static const char __pyx_k_order[] = " order ";
static const char __pyx_k_owner[] = "owner";
static const char __pyx_k_price[] = "price";
static const char __pyx_k_ready[] = "ready";
static const char __pyx_k_sleep[] = "sleep";
static const char __pyx_k_start[] = "start";
static const char __pyx_k_super[] = "super";
static const char __pyx_k_tasks[] = "tasks";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_total[] = "total";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_0_0005[] = "0.0005";
static const char __pyx_k_CLOSED[] = "CLOSED";
static const char __pyx_k_DELETE[] = "DELETE";
static const char __pyx_k_Filled[] = "Filled ";
static const char __pyx_k_MARKET[] = "MARKET";
static const char __pyx_k_aenter[] = "__aenter__";
static const char __pyx_k_amount[] = "amount";
static const char __pyx_k_cancel[] = "cancel";
static const char __pyx_k_client[] = "client";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_is_buy[] = "is_buy";
static const char __pyx_k_is_set[] = "is_set";
static const char __pyx_k_kwargs[] = "kwargs";
static const char __pyx_k_logger[] = "logger";
static const char __pyx_k_market[] = "market";
static const char __pyx_k_name_2[] = "name";
static const char __pyx_k_of_the[] = " of the ";
static const char __pyx_k_orders[] = "/orders";
static const char __pyx_k_out_of[] = " out of ";
static const char __pyx_k_pandas[] = "pandas";
static const char __pyx_k_params[] = "params";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_return[] = "return";
static const char __pyx_k_retval[] = "retval";
static const char __pyx_k_sell_2[] = "sell";
static const char __pyx_k_status[] = "status";
static const char __pyx_k_symbol[] = "symbol";
static const char __pyx_k_typing[] = "typing";
static const char __pyx_k_update[] = "update";
static const char __pyx_k_values[] = "values";
static const char __pyx_k_BTC_USD[] = "BTC-USD";
static const char __pyx_k_Created[] = "Created ";
static const char __pyx_k_Decimal[] = "Decimal";
static const char __pyx_k_ETH_BTC[] = "ETH-BTC";
static const char __pyx_k_FAILURE[] = "FAILURE";
static const char __pyx_k_IOError[] = "IOError";
static const char __pyx_k_OFFLINE[] = "OFFLINE";
static const char __pyx_k_aiohttp[] = "aiohttp";
static const char __pyx_k_asyncio[] = "asyncio";
static const char __pyx_k_balance[] = "balance";
static const char __pyx_k_bittrex[] = "bittrex";
static const char __pyx_k_content[] = "content";
static const char __pyx_k_decimal[] = "decimal";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_get_fee[] = "get_fee";
static const char __pyx_k_headers[] = "headers";
static const char __pyx_k_inspect[] = "inspect";
static const char __pyx_k_is_done[] = "is_done";
static const char __pyx_k_logging[] = "logging";
static const char __pyx_k_markets[] = "/markets";
static const char __pyx_k_network[] = "network";
static const char __pyx_k_order_2[] = "order";
static const char __pyx_k_replace[] = "replace";
static const char __pyx_k_request[] = "request";
static const char __pyx_k_timeout[] = "timeout";
static const char __pyx_k_to_json[] = "to_json";
static const char __pyx_k_warning[] = "warning";
static const char __pyx_k_Aborting[] = ". Aborting.";
static const char __pyx_k_BTC_USDT[] = "BTC-USDT";
static const char __pyx_k_List_Any[] = "List[Any]";
static const char __pyx_k_Optional[] = "Optional";
static const char __pyx_k_Skipping[] = ". Skipping.";
static const char __pyx_k_TradeFee[] = "TradeFee";
static const char __pyx_k_balances[] = "/balances";
static const char __pyx_k_exc_info[] = "exc_info";
static const char __pyx_k_fee_paid[] = "fee_paid";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_order_id[] = "order_id";
static const char __pyx_k_orders_2[] = "/orders/";
static const char __pyx_k_path_url[] = "path_url";
static const char __pyx_k_quantity[] = "quantity";
static const char __pyx_k_response[] = "response";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_CANCELLED[] = "CANCELLED";
static const char __pyx_k_CONNECTED[] = "CONNECTED";
static const char __pyx_k_NOT_FOUND[] = "NOT_FOUND";
static const char __pyx_k_OrderBook[] = "OrderBook";
static const char __pyx_k_OrderType[] = "OrderType";
static const char __pyx_k_The_order[] = "The order ";
static const char __pyx_k_TradeType[] = "TradeType";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_auth_dict[] = "auth_dict";
static const char __pyx_k_available[] = "available";
static const char __pyx_k_bm_logger[] = "bm_logger";
static const char __pyx_k_buy_order[] = " buy order ";
static const char __pyx_k_cancelled[] = "cancelled";
static const char __pyx_k_direction[] = "direction";
static const char __pyx_k_fee_asset[] = "fee_asset";
static const char __pyx_k_from_json[] = "from_json";
static const char __pyx_k_getLogger[] = "getLogger";
static const char __pyx_k_get_price[] = "get_price";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_last_tick[] = "last_tick";
static const char __pyx_k_precision[] = "precision";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_LimitOrder[] = "LimitOrder";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_asset_name[] = "asset_name";
static const char __pyx_k_balances_2[] = "balances";
static const char __pyx_k_base_asset[] = "base_asset";
static const char __pyx_k_cancel_all[] = "cancel_all";
static const char __pyx_k_commission[] = "commission";
static const char __pyx_k_difference[] = "difference";
static const char __pyx_k_event_type[] = "event_type";
static const char __pyx_k_last_state[] = "last_state";
static const char __pyx_k_order_side[] = "order_side";
static const char __pyx_k_order_type[] = "order_type";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_sell_order[] = " sell order ";
static const char __pyx_k_trade_type[] = "trade_type";
static const char __pyx_k_BittrexAuth[] = "BittrexAuth";
static const char __pyx_k_ImportError[] = "ImportError";
static const char __pyx_k_LIMIT_MAKER[] = "LIMIT_MAKER";
static const char __pyx_k_MarketEvent[] = "MarketEvent";
static const char __pyx_k_OrderFilled[] = "OrderFilled";
static const char __pyx_k_api_request[] = "_api_request";
static const char __pyx_k_execute_buy[] = "execute_buy";
static const char __pyx_k_http_client[] = "_http_client";
static const char __pyx_k_http_method[] = "http_method";
static const char __pyx_k_list_orders[] = "list_orders";
static const char __pyx_k_market_dict[] = "market_dict";
static const char __pyx_k_market_list[] = "market_list";
static const char __pyx_k_open_orders[] = "open_orders";
static const char __pyx_k_order_books[] = "order_books";
static const char __pyx_k_order_state[] = "order_state";
static const char __pyx_k_orders_open[] = "/orders/open";
static const char __pyx_k_place_order[] = "place_order";
static const char __pyx_k_quote_asset[] = "quote_asset";
static const char __pyx_k_result_list[] = "result_list";
static const char __pyx_k_s_decimal_0[] = "s_decimal_0";
static const char __pyx_k_safe_gather[] = "safe_gather";
static const char __pyx_k_status_dict[] = "status_dict";
static const char __pyx_k_ticker_data[] = "ticker_data";
static const char __pyx_k_ticker_list[] = "ticker_list";
static const char __pyx_k_timeInForce[] = "timeInForce";
static const char __pyx_k_user_stream[] = "user_stream";
static const char __pyx_k_Dict_str_Any[] = "Dict[str, Any]";
static const char __pyx_k_Dict_str_any[] = "Dict[str, any]";
static const char __pyx_k_ExchangeBase[] = "ExchangeBase";
static const char __pyx_k_OrderFailure[] = "OrderFailure";
static const char __pyx_k_TimeoutError[] = "TimeoutError";
static const char __pyx_k_account_info[] = "account_info";
static const char __pyx_k_api_response[] = "api_response";
static const char __pyx_k_bittrex_auth[] = "bittrex_auth";
static const char __pyx_k_current_tick[] = "current_tick";
static const char __pyx_k_estimate_fee[] = "estimate_fee";
static const char __pyx_k_execute_sell[] = "execute_sell";
static const char __pyx_k_fillQuantity[] = "fillQuantity";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_marketSymbol[] = "marketSymbol";
static const char __pyx_k_minTradeSize[] = "minTradeSize";
static const char __pyx_k_order_id_set[] = "order_id_set";
static const char __pyx_k_order_result[] = "order_result";
static const char __pyx_k_order_status[] = "order_status";
static const char __pyx_k_pd_DataFrame[] = "pd.DataFrame";
static const char __pyx_k_quote_amount[] = "quote_amount";
static const char __pyx_k_saved_states[] = "saved_states";
static const char __pyx_k_state_result[] = "state_result";
static const char __pyx_k_stop_network[] = "stop_network";
static const char __pyx_k_stringsource[] = "stringsource";
static const char __pyx_k_trading_pair[] = "trading_pair";
static const char __pyx_k_trading_rule[] = "trading_rule";
static const char __pyx_k_AsyncIterable[] = "AsyncIterable";
static const char __pyx_k_ClientSession[] = "ClientSession";
static const char __pyx_k_NOT_CONNECTED[] = "NOT_CONNECTED";
static const char __pyx_k_NetworkStatus[] = "NetworkStatus";
static const char __pyx_k_ReceivedAsset[] = "ReceivedAsset";
static const char __pyx_k_The_BUY_order[] = "The BUY order ";
static const char __pyx_k_api_responses[] = "api_responses";
static const char __pyx_k_async_timeout[] = "async_timeout";
static const char __pyx_k_asyncio_tasks[] = "asyncio.tasks";
static const char __pyx_k_balance_delta[] = "balance_delta";
static const char __pyx_k_balance_entry[] = "balance_entry";
static const char __pyx_k_base_currency[] = "base_currency";
static const char __pyx_k_btc_usd_price[] = "btc_usd_price";
static const char __pyx_k_cancel_result[] = "cancel_result";
static const char __pyx_k_check_network[] = "check_network";
static const char __pyx_k_decimal_price[] = "decimal_price";
static const char __pyx_k_eth_btc_price[] = "eth_btc_price";
static const char __pyx_k_execute_price[] = "execute_price";
static const char __pyx_k_lastTradeRate[] = "lastTradeRate";
static const char __pyx_k_min_btc_value[] = "min_btc_value";
static const char __pyx_k_poll_interval[] = "poll_interval";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_s_decimal_NaN[] = "s_decimal_NaN";
static const char __pyx_k_start_network[] = "start_network";
static const char __pyx_k_subaccount_id[] = "subaccount_id";
static const char __pyx_k_total_balance[] = "total_balance";
static const char __pyx_k_tracked_order[] = "tracked_order";
static const char __pyx_k_trading_pairs[] = "trading_pairs";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_CancelledError[] = "CancelledError";
static const char __pyx_k_ORDER_NOT_OPEN[] = "ORDER_NOT_OPEN";
static const char __pyx_k_OrderCancelled[] = "OrderCancelled";
static const char __pyx_k_The_SELL_order[] = "The SELL order ";
static const char __pyx_k_btc_usdt_price[] = "btc_usdt_price";
static const char __pyx_k_currencySymbol[] = "currencySymbol";
static const char __pyx_k_decimal_amount[] = "decimal_amount";
static const char __pyx_k_execute_cancel[] = "execute_cancel";
static const char __pyx_k_executed_price[] = "executed_price";
static const char __pyx_k_get_event_loop[] = "get_event_loop";
static const char __pyx_k_get_order_book[] = "get_order_book";
static const char __pyx_k_is_not_tracked[] = " is not tracked. ";
static const char __pyx_k_min_order_size[] = "min_order_size";
static const char __pyx_k_min_trade_size[] = "min_trade_size";
static const char __pyx_k_order_type_str[] = "order_type_str";
static const char __pyx_k_quote_currency[] = "quote_currency";
static const char __pyx_k_remaining_size[] = "remaining_size";
static const char __pyx_k_stop_network_2[] = "_stop_network";
static const char __pyx_k_stream_message[] = "stream_message";
static const char __pyx_k_to_limit_order[] = "to_limit_order";
static const char __pyx_k_tracked_orders[] = "tracked_orders";
static const char __pyx_k_BittrexExchange[] = "BittrexExchange";
static const char __pyx_k_BuyOrderCreated[] = "BuyOrderCreated";
static const char __pyx_k_account_balance[] = "account_balance";
static const char __pyx_k_app_warning_msg[] = "app_warning_msg";
static const char __pyx_k_bittrex_api_key[] = "bittrex_api_key";
static const char __pyx_k_client_order_id[] = "client_order_id";
static const char __pyx_k_last_trade_rate[] = "last_trade_rate";
static const char __pyx_k_market_path_url[] = "market_path_url";
static const char __pyx_k_markets_tickers[] = "/markets/tickers";
static const char __pyx_k_min_order_value[] = "min_order_value";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_ticker_path_url[] = "ticker_path_url";
static const char __pyx_k_timeout_seconds[] = "timeout_seconds";
static const char __pyx_k_update_balances[] = "_update_balances";
static const char __pyx_k_API_CALL_TIMEOUT[] = "API_CALL_TIMEOUT";
static const char __pyx_k_Buy_order_amount[] = "Buy order amount ";
static const char __pyx_k_HTTP_Status_Code[] = ". HTTP Status Code ";
static const char __pyx_k_HummingbotLogger[] = "HummingbotLogger";
static const char __pyx_k_List_TradingRule[] = "List[TradingRule]";
static const char __pyx_k_Optional_Decimal[] = "Optional[Decimal]";
static const char __pyx_k_OrderFilledEvent[] = "OrderFilledEvent";
static const char __pyx_k_SellOrderCreated[] = "SellOrderCreated";
static const char __pyx_k_account_balances[] = "account_balances";
static const char __pyx_k_trading_required[] = "trading_required";
static const char __pyx_k_BuyOrderCompleted[] = "BuyOrderCompleted";
static const char __pyx_k_Invalid_OrderType[] = "Invalid OrderType ";
static const char __pyx_k_Sell_order_amount[] = "Sell order amount ";
static const char __pyx_k_available_balance[] = "available_balance";
static const char __pyx_k_exchange_order_id[] = "exchange_order_id";
static const char __pyx_k_hummingbot_logger[] = "hummingbot.logger";
static const char __pyx_k_incomplete_orders[] = "incomplete_orders";
static const char __pyx_k_local_asset_names[] = "local_asset_names";
static const char __pyx_k_return_exceptions[] = "return_exceptions";
static const char __pyx_k_CancellationResult[] = "CancellationResult";
static const char __pyx_k_GOOD_TIL_CANCELLED[] = "GOOD_TIL_CANCELLED";
static const char __pyx_k_SellOrderCompleted[] = "SellOrderCompleted";
static const char __pyx_k_TransactionFailure[] = "TransactionFailure";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_bittrex_secret_key[] = "bittrex_secret_key";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_generate_auth_dict[] = "generate_auth_dict";
static const char __pyx_k_get_tracking_nonce[] = "get_tracking_nonce";
static const char __pyx_k_process_api_closed[] = "_process_api_closed";
static const char __pyx_k_remote_asset_names[] = "remote_asset_names";
static const char __pyx_k_safe_ensure_future[] = "safe_ensure_future";
static const char __pyx_k_trading_rules_list[] = "trading_rules_list";
static const char __pyx_k_BittrexExchange_buy[] = "BittrexExchange.buy";
static const char __pyx_k_OrderCancelledEvent[] = "OrderCancelledEvent";
static const char __pyx_k_failed_cancellation[] = "failed_cancellation";
static const char __pyx_k_min_price_increment[] = "min_price_increment";
static const char __pyx_k_quoteCurrencySymbol[] = "quoteCurrencySymbol";
static const char __pyx_k_status_polling_loop[] = "_status_polling_loop";
static const char __pyx_k_update_order_status[] = "_update_order_status";
static const char __pyx_k_BITTREX_API_ENDPOINT[] = "BITTREX_API_ENDPOINT";
static const char __pyx_k_BittrexExchange_sell[] = "BittrexExchange.sell";
static const char __pyx_k_BittrexInFlightOrder[] = "BittrexInFlightOrder";
static const char __pyx_k_BuyOrderCreatedEvent[] = "BuyOrderCreatedEvent";
static const char __pyx_k_Error_submitting_buy[] = "Error submitting buy ";
static const char __pyx_k_executed_amount_base[] = "executed_amount_base";
static const char __pyx_k_executed_amount_diff[] = "executed_amount_diff";
static const char __pyx_k_format_trading_rules[] = "_format_trading_rules";
static const char __pyx_k_new_confirmed_amount[] = "new_confirmed_amount";
static const char __pyx_k_order_to_Bittrex_for[] = " order to Bittrex for ";
static const char __pyx_k_start_tracking_order[] = "start_tracking_order";
static const char __pyx_k_update_trading_rules[] = "_update_trading_rules";
static const char __pyx_k_Error_submitting_sell[] = "Error submitting sell ";
static const char __pyx_k_SellOrderCreatedEvent[] = "SellOrderCreatedEvent";
static const char __pyx_k_Tried_to_cancel_order[] = "Tried to cancel order ";
static const char __pyx_k_aiohttp_ClientSession[] = "aiohttp.ClientSession";
static const char __pyx_k_asset_names_to_remove[] = "asset_names_to_remove";
static const char __pyx_k_executed_amount_quote[] = "executed_amount_quote";
static const char __pyx_k_get_exchange_order_id[] = "get_exchange_order_id";
static const char __pyx_k_supported_order_types[] = "supported_order_types";
static const char __pyx_k_BittrexExchange_cancel[] = "BittrexExchange.cancel";
static const char __pyx_k_BittrexExchange_logger[] = "BittrexExchange.logger";
static const char __pyx_k_BuyOrderCompletedEvent[] = "BuyOrderCompletedEvent";
static const char __pyx_k_Failed_to_cancel_order[] = "Failed to cancel order ";
static const char __pyx_k_UPDATE_ORDERS_INTERVAL[] = "UPDATE_ORDERS_INTERVAL";
static const char __pyx_k_iter_user_stream_queue[] = "_iter_user_stream_queue";
static const char __pyx_k_order_book_initialized[] = "order_book_initialized";
static const char __pyx_k_order_type_description[] = "order_type_description";
static const char __pyx_k_BittrexExchange_get_fee[] = "BittrexExchange.get_fee";
static const char __pyx_k_BittrexOrderBookTracker[] = "BittrexOrderBookTracker";
static const char __pyx_k_List_CancellationResult[] = "List[CancellationResult]";
static const char __pyx_k_MarketOrderFailureEvent[] = "MarketOrderFailureEvent";
static const char __pyx_k_SellOrderCompletedEvent[] = "SellOrderCompletedEvent";
static const char __pyx_k_restore_tracking_states[] = "restore_tracking_states";
static const char __pyx_k_successful_cancellation[] = "successful_cancellation";
static const char __pyx_k_BittrexUserStreamTracker[] = "BittrexUserStreamTracker";
static const char __pyx_k_No_exchange_ID_found_for[] = "No exchange ID found for ";
static const char __pyx_k_No_order_book_exists_for[] = "No order book exists for '";
static const char __pyx_k_https_api_bittrex_com_v3[] = "https://api.bittrex.com/v3";
static const char __pyx_k_trading_rule_initialized[] = "trading_rule_initialized";
static const char __pyx_k_update_exchange_order_id[] = "update_exchange_order_id";
static const char __pyx_k_BittrexExchange_get_price[] = "BittrexExchange.get_price";
static const char __pyx_k_min_base_amount_increment[] = "min_base_amount_increment";
static const char __pyx_k_AsyncIterable_Dict_str_Any[] = "AsyncIterable[Dict[str, Any]]";
static const char __pyx_k_BittrexExchange_cancel_all[] = "BittrexExchange.cancel_all";
static const char __pyx_k_Failed_to_cancel_the_order[] = "Failed to cancel the order ";
static const char __pyx_k_min_quote_amount_increment[] = "min_quote_amount_increment";
static const char __pyx_k_trading_rules_polling_loop[] = "_trading_rules_polling_loop";
static const char __pyx_k_user_stream_event_listener[] = "_user_stream_event_listener";
static const char __pyx_k_BittrexExchange_execute_buy[] = "BittrexExchange.execute_buy";
static const char __pyx_k_BittrexExchange_list_orders[] = "BittrexExchange.list_orders";
static const char __pyx_k_BittrexExchange_place_order[] = "BittrexExchange.place_order";
static const char __pyx_k_get_active_exchange_markets[] = "get_active_exchange_markets";
static const char __pyx_k_BittrexExchange__api_request[] = "BittrexExchange._api_request";
static const char __pyx_k_BittrexExchange__http_client[] = "BittrexExchange._http_client";
static const char __pyx_k_BittrexExchange_execute_sell[] = "BittrexExchange.execute_sell";
static const char __pyx_k_BittrexExchange_stop_network[] = "BittrexExchange.stop_network";
static const char __pyx_k_Error_fetching_response_from[] = "Error fetching response from ";
static const char __pyx_k_POST_ONLY_GOOD_TIL_CANCELLED[] = "POST_ONLY_GOOD_TIL_CANCELLED";
static const char __pyx_k_Successfully_cancelled_order[] = "Successfully cancelled order ";
static const char __pyx_k_hummingbot_core_event_events[] = "hummingbot.core.event.events";
static const char __pyx_k_BittrexAPIOrderBookDataSource[] = "BittrexAPIOrderBookDataSource";
static const char __pyx_k_BittrexExchange__stop_network[] = "BittrexExchange._stop_network";
static const char __pyx_k_BittrexExchange_check_network[] = "BittrexExchange.check_network";
static const char __pyx_k_BittrexExchange_start_network[] = "BittrexExchange.start_network";
static const char __pyx_k_MARKET_ORDER_FILLED_EVENT_TAG[] = "MARKET_ORDER_FILLED_EVENT_TAG";
static const char __pyx_k_MarketTransactionFailureEvent[] = "MarketTransactionFailureEvent";
static const char __pyx_k_hummingbot_market_market_base[] = "hummingbot.market.market_base";
static const char __pyx_k_BittrexExchange_execute_cancel[] = "BittrexExchange.execute_cancel";
static const char __pyx_k_BittrexExchange_get_order_book[] = "BittrexExchange.get_order_book";
static const char __pyx_k_MARKET_ORDER_FAILURE_EVENT_TAG[] = "MARKET_ORDER_FAILURE_EVENT_TAG";
static const char __pyx_k_BittrexExchange___reduce_cython[] = "BittrexExchange.__reduce_cython__";
static const char __pyx_k_BittrexExchange__format_trading[] = "BittrexExchange._format_trading_rules";
static const char __pyx_k_BittrexExchange__status_polling[] = "BittrexExchange._status_polling_loop";
static const char __pyx_k_BittrexExchange__update_trading[] = "BittrexExchange._update_trading_rules";
static const char __pyx_k_BittrexExchange_supported_order[] = "BittrexExchange.supported_order_types";
static const char __pyx_k_Check_API_key_and_network_conne[] = ". Check API key and network connection.";
static const char __pyx_k_Could_not_fetch_updates_for_the[] = "Could not fetch updates for the order ";
static const char __pyx_k_Exchange_order_ID_never_updated[] = "Exchange order ID never updated for ";
static const char __pyx_k_MARKET_RECEIVED_ASSET_EVENT_TAG[] = "MARKET_RECEIVED_ASSET_EVENT_TAG";
static const char __pyx_k_MARKET_SELL_ORDER_CREATED_EVENT[] = "MARKET_SELL_ORDER_CREATED_EVENT_TAG";
static const char __pyx_k_Unexpected_error_in_user_stream[] = "Unexpected error in user stream listener loop.";
static const char __pyx_k_Unexpected_error_while_fetching[] = "Unexpected error while fetching trading rule updates.";
static const char __pyx_k_does_not_exist_on_Bittrex_No_ca[] = " does not exist on Bittrex. No cancellation needed.";
static const char __pyx_k_has_been_cancelled_according_to[] = " has been cancelled according to Bittrex order status API.";
static const char __pyx_k_has_completed_according_to_Bitt[] = " has completed according to Bittrex order status API.";
static const char __pyx_k_has_completed_according_to_Orde[] = " has completed according to Order Delta WebSocket API.";
static const char __pyx_k_has_completed_according_to_orde[] = " has completed according to order delta websocket API.";
static const char __pyx_k_hummingbot_core_data_type_limit[] = "hummingbot.core.data_type.limit_order";
static const char __pyx_k_is_lower_than_the_minimum_order[] = " is lower than the minimum order size ";
static const char __pyx_k_numpy_core_multiarray_failed_to[] = "numpy.core.multiarray failed to import";
static const char __pyx_k_on_Bittrex_Check_API_key_and_ne[] = " on Bittrex. Check API key and network connection.";
static const char __pyx_k_on_order_status_update_Order_no[] = " on order status update. Order no longer tracked. This is most likely due to a POST_ONLY_NOT_MET error.";
static const char __pyx_k_update_order_status_locals_gene[] = "_update_order_status.<locals>.genexpr";
static const char __pyx_k_which_is_already_closed_Order_d[] = " which is already closed. Order details: ";
static const char __pyx_k_BittrexExchangeTransactionTracke[] = "BittrexExchangeTransactionTracker";
static const char __pyx_k_BittrexExchange___setstate_cytho[] = "BittrexExchange.__setstate_cython__";
static const char __pyx_k_BittrexExchange__iter_user_strea[] = "BittrexExchange._iter_user_stream_queue";
static const char __pyx_k_BittrexExchange__process_api_clo[] = "BittrexExchange._process_api_closed";
static const char __pyx_k_BittrexExchange__trading_rules_p[] = "BittrexExchange._trading_rules_polling_loop";
static const char __pyx_k_BittrexExchange__update_balances[] = "BittrexExchange._update_balances";
static const char __pyx_k_BittrexExchange__update_order_st[] = "BittrexExchange._update_order_status";
static const char __pyx_k_BittrexExchange__user_stream_eve[] = "BittrexExchange._user_stream_event_listener";
static const char __pyx_k_BittrexExchange_get_active_excha[] = "BittrexExchange.get_active_exchange_markets";
static const char __pyx_k_BittrexExchange_restore_tracking[] = "BittrexExchange.restore_tracking_states";
static const char __pyx_k_BittrexExchange_start_tracking_o[] = "BittrexExchange.start_tracking_order";
static const char __pyx_k_Could_not_fetch_updates_from_Bit[] = "Could not fetch updates from Bittrex. Check API key and network connection.";
static const char __pyx_k_Error_fetching_status_update_for[] = "Error fetching status update for the order ";
static const char __pyx_k_Error_parsing_the_trading_pair_r[] = "Error parsing the trading pair rule ";
static const char __pyx_k_Failed_to_cancel_order_on_Bittre[] = "Failed to cancel order on Bittrex. Check API key and network connection.";
static const char __pyx_k_Failed_to_submit_buy_order_to_Bi[] = "Failed to submit buy order to Bittrex. Check API key and network connection.";
static const char __pyx_k_Failed_to_submit_sell_order_to_B[] = "Failed to submit sell order to Bittrex. Check API key and network connection.";
static const char __pyx_k_MARKET_BUY_ORDER_COMPLETED_EVENT[] = "MARKET_BUY_ORDER_COMPLETED_EVENT_TAG";
static const char __pyx_k_MARKET_BUY_ORDER_CREATED_EVENT_T[] = "MARKET_BUY_ORDER_CREATED_EVENT_TAG";
static const char __pyx_k_MARKET_ORDER_CANCELLED_EVENT_TAG[] = "MARKET_ORDER_CANCELLED_EVENT_TAG";
static const char __pyx_k_MARKET_SELL_ORDER_COMPLETED_EVEN[] = "MARKET_SELL_ORDER_COMPLETED_EVENT_TAG";
static const char __pyx_k_MARKET_TRANSACTION_FAILURE_EVENT[] = "MARKET_TRANSACTION_FAILURE_EVENT_TAG";
static const char __pyx_k_ORDER_NOT_EXIST_CONFIRMATION_COU[] = "ORDER_NOT_EXIST_CONFIRMATION_COUNT";
static const char __pyx_k_Unexpected_error_cancelling_orde[] = "Unexpected error cancelling orders.";
static const char __pyx_k_Unexpected_error_while_polling_u[] = "Unexpected error while polling updates.";
static const char __pyx_k_Unknown_error_Retrying_after_1_s[] = "Unknown error. Retrying after 1 second.";
static const char __pyx_k_hummingbot_connector_exchange_ba[] = "hummingbot.connector.exchange_base";
static const char __pyx_k_hummingbot_connector_exchange_bi[] = "hummingbot.connector.exchange.bittrex.bittrex_exchange";
static const char __pyx_k_hummingbot_core_data_type_cancel[] = "hummingbot.core.data_type.cancellation_result";
static const char __pyx_k_hummingbot_core_network_iterator[] = "hummingbot.core.network_iterator";
static const char __pyx_k_hummingbot_core_utils_async_util[] = "hummingbot.core.utils.async_utils";
static const char __pyx_k_hummingbot_core_utils_estimate_f[] = "hummingbot.core.utils.estimate_fee";
static const char __pyx_k_hummingbot_core_utils_tracking_n[] = "hummingbot.core.utils.tracking_nonce";
static const char __pyx_k_numpy_core_umath_failed_to_impor[] = "numpy.core.umath failed to import";
static const char __pyx_k_self__events_cannot_be_converted[] = "self._events cannot be converted to a Python object for pickling";
static const char __pyx_k_has_been_cancelled_according_to_2[] = " has been cancelled according to Order Delta WebSocket API.";
static const char __pyx_k_BittrexExchangeTransactionTracke_2[] = "BittrexExchangeTransactionTracker.__reduce_cython__";
static const char __pyx_k_BittrexExchangeTransactionTracke_3[] = "BittrexExchangeTransactionTracker.__setstate_cython__";
static const char __pyx_k_Could_not_fetch_updates_from_Bit_2[] = "Could not fetch updates from Bitrrex. Check API key and network connection.";
static const char __pyx_k_hummingbot_connector_exchange_bi_2[] = "hummingbot.connector.exchange.bittrex.bittrex_api_order_book_data_source";
static const char __pyx_k_hummingbot_connector_exchange_bi_3[] = "hummingbot.connector.exchange.bittrex.bittrex_auth";
static const char __pyx_k_hummingbot_connector_exchange_bi_4[] = "hummingbot.connector.exchange.bittrex.bittrex_in_flight_order";
static const char __pyx_k_hummingbot_connector_exchange_bi_5[] = "hummingbot.connector.exchange.bittrex.bittrex_order_book_tracker";
static const char __pyx_k_hummingbot_connector_exchange_bi_6[] = "hummingbot.connector.exchange.bittrex.bittrex_user_stream_tracker";
static const char __pyx_k_hummingbot_connector_exchange_bi_7[] = "hummingbot\\connector\\exchange\\bittrex\\bittrex_exchange.pyx";
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_kp_u_;
static PyObject *__pyx_kp_u_0_0005;
static PyObject *__pyx_kp_u_1_01;
static PyObject *__pyx_kp_u_1e;
static PyObject *__pyx_n_s_API_CALL_TIMEOUT;
static PyObject *__pyx_kp_u_Aborting;
static PyObject *__pyx_n_s_Any;
static PyObject *__pyx_n_s_AssertionError;
static PyObject *__pyx_n_s_AsyncIterable;
static PyObject *__pyx_kp_s_AsyncIterable_Dict_str_Any;
static PyObject *__pyx_n_s_BITTREX_API_ENDPOINT;
static PyObject *__pyx_n_u_BTC;
static PyObject *__pyx_kp_u_BTC_USD;
static PyObject *__pyx_kp_u_BTC_USDT;
static PyObject *__pyx_n_s_BUY;
static PyObject *__pyx_n_u_BUY;
static PyObject *__pyx_n_s_BittrexAPIOrderBookDataSource;
static PyObject *__pyx_n_s_BittrexAuth;
static PyObject *__pyx_n_s_BittrexExchange;
static PyObject *__pyx_n_s_BittrexExchangeTransactionTracke;
static PyObject *__pyx_n_s_BittrexExchangeTransactionTracke_2;
static PyObject *__pyx_n_s_BittrexExchangeTransactionTracke_3;
static PyObject *__pyx_n_s_BittrexExchange___reduce_cython;
static PyObject *__pyx_n_s_BittrexExchange___setstate_cytho;
static PyObject *__pyx_n_s_BittrexExchange__api_request;
static PyObject *__pyx_n_s_BittrexExchange__format_trading;
static PyObject *__pyx_n_s_BittrexExchange__http_client;
static PyObject *__pyx_n_s_BittrexExchange__iter_user_strea;
static PyObject *__pyx_n_s_BittrexExchange__process_api_clo;
static PyObject *__pyx_n_s_BittrexExchange__status_polling;
static PyObject *__pyx_n_s_BittrexExchange__stop_network;
static PyObject *__pyx_n_s_BittrexExchange__trading_rules_p;
static PyObject *__pyx_n_s_BittrexExchange__update_balances;
static PyObject *__pyx_n_s_BittrexExchange__update_order_st;
static PyObject *__pyx_n_s_BittrexExchange__update_trading;
static PyObject *__pyx_n_s_BittrexExchange__user_stream_eve;
static PyObject *__pyx_n_s_BittrexExchange_buy;
static PyObject *__pyx_n_s_BittrexExchange_cancel;
static PyObject *__pyx_n_s_BittrexExchange_cancel_all;
static PyObject *__pyx_n_s_BittrexExchange_check_network;
static PyObject *__pyx_n_s_BittrexExchange_execute_buy;
static PyObject *__pyx_n_s_BittrexExchange_execute_cancel;
static PyObject *__pyx_n_s_BittrexExchange_execute_sell;
static PyObject *__pyx_n_s_BittrexExchange_get_active_excha;
static PyObject *__pyx_n_s_BittrexExchange_get_fee;
static PyObject *__pyx_n_s_BittrexExchange_get_order_book;
static PyObject *__pyx_n_s_BittrexExchange_get_price;
static PyObject *__pyx_n_s_BittrexExchange_list_orders;
static PyObject *__pyx_n_s_BittrexExchange_logger;
static PyObject *__pyx_n_s_BittrexExchange_place_order;
static PyObject *__pyx_n_s_BittrexExchange_restore_tracking;
static PyObject *__pyx_n_s_BittrexExchange_sell;
static PyObject *__pyx_n_s_BittrexExchange_start_network;
static PyObject *__pyx_n_s_BittrexExchange_start_tracking_o;
static PyObject *__pyx_n_s_BittrexExchange_stop_network;
static PyObject *__pyx_n_s_BittrexExchange_supported_order;
static PyObject *__pyx_n_s_BittrexInFlightOrder;
static PyObject *__pyx_n_s_BittrexOrderBookTracker;
static PyObject *__pyx_n_s_BittrexUserStreamTracker;
static PyObject *__pyx_n_s_BuyOrderCompleted;
static PyObject *__pyx_n_s_BuyOrderCompletedEvent;
static PyObject *__pyx_n_s_BuyOrderCreated;
static PyObject *__pyx_n_s_BuyOrderCreatedEvent;
static PyObject *__pyx_kp_u_Buy_order_amount;
static PyObject *__pyx_n_u_CANCELLED;
static PyObject *__pyx_kp_u_CELO;
static PyObject *__pyx_kp_u_CGLD;
static PyObject *__pyx_n_u_CLOSED;
static PyObject *__pyx_n_s_CONNECTED;
static PyObject *__pyx_n_s_CancellationResult;
static PyObject *__pyx_n_s_CancelledError;
static PyObject *__pyx_kp_u_Check_API_key_and_network_conne;
static PyObject *__pyx_n_s_ClientSession;
static PyObject *__pyx_kp_u_Could_not_fetch_updates_for_the;
static PyObject *__pyx_kp_u_Could_not_fetch_updates_from_Bit;
static PyObject *__pyx_kp_u_Could_not_fetch_updates_from_Bit_2;
static PyObject *__pyx_kp_u_Created;
static PyObject *__pyx_n_u_DELETE;
static PyObject *__pyx_n_s_Decimal;
static PyObject *__pyx_n_s_Dict;
static PyObject *__pyx_kp_s_Dict_str_Any;
static PyObject *__pyx_kp_s_Dict_str_any;
static PyObject *__pyx_n_u_ETH;
static PyObject *__pyx_kp_u_ETH_BTC;
static PyObject *__pyx_kp_u_Error_fetching_response_from;
static PyObject *__pyx_kp_u_Error_fetching_status_update_for;
static PyObject *__pyx_kp_u_Error_parsing_the_trading_pair_r;
static PyObject *__pyx_kp_u_Error_submitting_buy;
static PyObject *__pyx_kp_u_Error_submitting_sell;
static PyObject *__pyx_n_s_Event;
static PyObject *__pyx_n_s_ExchangeBase;
static PyObject *__pyx_kp_u_Exchange_order_ID_never_updated;
static PyObject *__pyx_n_u_FAILURE;
static PyObject *__pyx_kp_u_Failed_to_cancel_order;
static PyObject *__pyx_kp_u_Failed_to_cancel_order_on_Bittre;
static PyObject *__pyx_kp_u_Failed_to_cancel_the_order;
static PyObject *__pyx_kp_u_Failed_to_submit_buy_order_to_Bi;
static PyObject *__pyx_kp_u_Failed_to_submit_sell_order_to_B;
static PyObject *__pyx_kp_u_Filled;
static PyObject *__pyx_n_u_GET;
static PyObject *__pyx_n_u_GOOD_TIL_CANCELLED;
static PyObject *__pyx_kp_u_HTTP_Status_Code;
static PyObject *__pyx_n_s_HummingbotLogger;
static PyObject *__pyx_n_s_IOError;
static PyObject *__pyx_n_s_ImportError;
static PyObject *__pyx_kp_u_Invalid_OrderType;
static PyObject *__pyx_n_s_LIMIT;
static PyObject *__pyx_n_u_LIMIT;
static PyObject *__pyx_n_s_LIMIT_MAKER;
static PyObject *__pyx_n_s_LimitOrder;
static PyObject *__pyx_n_s_List;
static PyObject *__pyx_kp_s_List_Any;
static PyObject *__pyx_kp_s_List_CancellationResult;
static PyObject *__pyx_kp_s_List_TradingRule;
static PyObject *__pyx_n_s_MARKET;
static PyObject *__pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT;
static PyObject *__pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T;
static PyObject *__pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG;
static PyObject *__pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG;
static PyObject *__pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG;
static PyObject *__pyx_n_s_MARKET_RECEIVED_ASSET_EVENT_TAG;
static PyObject *__pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN;
static PyObject *__pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT;
static PyObject *__pyx_n_s_MARKET_TRANSACTION_FAILURE_EVENT;
static PyObject *__pyx_n_s_MarketEvent;
static PyObject *__pyx_n_s_MarketOrderFailureEvent;
static PyObject *__pyx_n_s_MarketTransactionFailureEvent;
static PyObject *__pyx_n_s_NOT_CONNECTED;
static PyObject *__pyx_n_u_NOT_FOUND;
static PyObject *__pyx_n_s_NaN;
static PyObject *__pyx_n_u_NaN;
static PyObject *__pyx_n_s_NetworkStatus;
static PyObject *__pyx_kp_u_No_exchange_ID_found_for;
static PyObject *__pyx_kp_u_No_order_book_exists_for;
static PyObject *__pyx_kp_u_None;
static PyObject *__pyx_n_u_OFFLINE;
static PyObject *__pyx_n_s_ORDER_NOT_EXIST_CONFIRMATION_COU;
static PyObject *__pyx_n_u_ORDER_NOT_OPEN;
static PyObject *__pyx_n_s_Optional;
static PyObject *__pyx_kp_s_Optional_Decimal;
static PyObject *__pyx_n_s_OrderBook;
static PyObject *__pyx_n_s_OrderCancelled;
static PyObject *__pyx_n_s_OrderCancelledEvent;
static PyObject *__pyx_n_s_OrderFailure;
static PyObject *__pyx_n_s_OrderFilled;
static PyObject *__pyx_n_s_OrderFilledEvent;
static PyObject *__pyx_n_s_OrderType;
static PyObject *__pyx_n_u_POST;
static PyObject *__pyx_n_u_POST_ONLY_GOOD_TIL_CANCELLED;
static PyObject *__pyx_n_s_ReceivedAsset;
static PyObject *__pyx_n_s_SELL;
static PyObject *__pyx_n_u_SELL;
static PyObject *__pyx_n_s_SellOrderCompleted;
static PyObject *__pyx_n_s_SellOrderCompletedEvent;
static PyObject *__pyx_n_s_SellOrderCreated;
static PyObject *__pyx_n_s_SellOrderCreatedEvent;
static PyObject *__pyx_kp_u_Sell_order_amount;
static PyObject *__pyx_kp_u_Skipping;
static PyObject *__pyx_kp_u_Successfully_cancelled_order;
static PyObject *__pyx_kp_u_The;
static PyObject *__pyx_kp_u_The_BUY_order;
static PyObject *__pyx_kp_u_The_SELL_order;
static PyObject *__pyx_kp_u_The_order;
static PyObject *__pyx_n_s_TimeoutError;
static PyObject *__pyx_n_s_TradeFee;
static PyObject *__pyx_n_s_TradeType;
static PyObject *__pyx_n_s_TransactionFailure;
static PyObject *__pyx_kp_u_Tried_to_cancel_order;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_n_s_UPDATE_ORDERS_INTERVAL;
static PyObject *__pyx_n_u_USD;
static PyObject *__pyx_n_u_USDT;
static PyObject *__pyx_kp_u_Unexpected_error_cancelling_orde;
static PyObject *__pyx_kp_u_Unexpected_error_in_user_stream;
static PyObject *__pyx_kp_u_Unexpected_error_while_fetching;
static PyObject *__pyx_kp_u_Unexpected_error_while_polling_u;
static PyObject *__pyx_kp_u_Unknown_error_Retrying_after_1_s;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_u__10;
static PyObject *__pyx_n_s__108;
static PyObject *__pyx_kp_u__11;
static PyObject *__pyx_kp_u__12;
static PyObject *__pyx_kp_u__21;
static PyObject *__pyx_n_s__49;
static PyObject *__pyx_kp_u__9;
static PyObject *__pyx_n_u_account_balance;
static PyObject *__pyx_n_s_account_balances;
static PyObject *__pyx_n_s_account_info;
static PyObject *__pyx_n_s_aenter;
static PyObject *__pyx_n_s_aexit;
static PyObject *__pyx_n_s_aiohttp;
static PyObject *__pyx_kp_s_aiohttp_ClientSession;
static PyObject *__pyx_n_s_aiter;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_amount;
static PyObject *__pyx_n_s_anext;
static PyObject *__pyx_n_s_api_request;
static PyObject *__pyx_n_s_api_response;
static PyObject *__pyx_n_s_api_responses;
static PyObject *__pyx_n_s_app_warning_msg;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_asset_name;
static PyObject *__pyx_n_s_asset_names_to_remove;
static PyObject *__pyx_n_s_async_timeout;
static PyObject *__pyx_n_s_asyncio;
static PyObject *__pyx_n_s_asyncio_coroutines;
static PyObject *__pyx_n_s_asyncio_tasks;
static PyObject *__pyx_n_s_auth_dict;
static PyObject *__pyx_n_u_available;
static PyObject *__pyx_n_s_available_balance;
static PyObject *__pyx_n_s_await;
static PyObject *__pyx_n_u_balance;
static PyObject *__pyx_n_s_balance_delta;
static PyObject *__pyx_n_s_balance_entry;
static PyObject *__pyx_kp_u_balances;
static PyObject *__pyx_n_s_balances_2;
static PyObject *__pyx_n_s_base_asset;
static PyObject *__pyx_n_s_base_currency;
static PyObject *__pyx_n_u_bittrex;
static PyObject *__pyx_n_s_bittrex_api_key;
static PyObject *__pyx_n_s_bittrex_auth;
static PyObject *__pyx_n_s_bittrex_secret_key;
static PyObject *__pyx_n_s_bm_logger;
static PyObject *__pyx_n_s_body;
static PyObject *__pyx_n_u_body;
static PyObject *__pyx_n_s_bool;
static PyObject *__pyx_n_s_btc_usd_price;
static PyObject *__pyx_n_s_btc_usdt_price;
static PyObject *__pyx_kp_u_buy;
static PyObject *__pyx_n_s_buy_2;
static PyObject *__pyx_kp_u_buy_order;
static PyObject *__pyx_n_s_cancel;
static PyObject *__pyx_n_s_cancel_all;
static PyObject *__pyx_n_s_cancel_result;
static PyObject *__pyx_n_u_cancelled;
static PyObject *__pyx_n_s_check_network;
static PyObject *__pyx_n_s_client;
static PyObject *__pyx_n_s_client_order_id;
static PyObject *__pyx_n_s_cline_in_traceback;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_cls;
static PyObject *__pyx_n_u_commission;
static PyObject *__pyx_n_s_content;
static PyObject *__pyx_n_u_content;
static PyObject *__pyx_n_u_currencySymbol;
static PyObject *__pyx_n_s_current_tick;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_decimal;
static PyObject *__pyx_n_s_decimal_amount;
static PyObject *__pyx_n_s_decimal_price;
static PyObject *__pyx_n_u_delta;
static PyObject *__pyx_n_s_dict;
static PyObject *__pyx_n_s_difference;
static PyObject *__pyx_n_u_direction;
static PyObject *__pyx_kp_u_disable;
static PyObject *__pyx_kp_u_does_not_exist_on_Bittrex_No_ca;
static PyObject *__pyx_n_u_done;
static PyObject *__pyx_kp_u_enable;
static PyObject *__pyx_n_s_err;
static PyObject *__pyx_n_s_error;
static PyObject *__pyx_n_s_estimate_fee;
static PyObject *__pyx_n_s_eth_btc_price;
static PyObject *__pyx_n_s_event_type;
static PyObject *__pyx_n_u_event_type;
static PyObject *__pyx_n_s_exc_info;
static PyObject *__pyx_n_s_exchange_order_id;
static PyObject *__pyx_n_s_execute_buy;
static PyObject *__pyx_n_s_execute_cancel;
static PyObject *__pyx_n_s_execute_price;
static PyObject *__pyx_n_s_execute_sell;
static PyObject *__pyx_n_s_executed_amount_base;
static PyObject *__pyx_n_s_executed_amount_diff;
static PyObject *__pyx_n_s_executed_amount_quote;
static PyObject *__pyx_n_s_executed_price;
static PyObject *__pyx_n_u_f;
static PyObject *__pyx_n_s_failed_cancellation;
static PyObject *__pyx_n_s_fee_asset;
static PyObject *__pyx_n_s_fee_paid;
static PyObject *__pyx_n_u_fillQuantity;
static PyObject *__pyx_n_s_float;
static PyObject *__pyx_kp_u_for;
static PyObject *__pyx_n_s_format_trading_rules;
static PyObject *__pyx_n_s_from_json;
static PyObject *__pyx_kp_u_gc;
static PyObject *__pyx_n_s_generate_auth_dict;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get;
static PyObject *__pyx_n_s_getLogger;
static PyObject *__pyx_n_s_get_active_exchange_markets;
static PyObject *__pyx_n_s_get_event_loop;
static PyObject *__pyx_n_s_get_exchange_order_id;
static PyObject *__pyx_n_s_get_fee;
static PyObject *__pyx_n_s_get_order_book;
static PyObject *__pyx_n_s_get_price;
static PyObject *__pyx_n_s_get_tracking_nonce;
static PyObject *__pyx_n_s_getstate;
static PyObject *__pyx_kp_u_has_been_cancelled_according_to;
static PyObject *__pyx_kp_u_has_been_cancelled_according_to_2;
static PyObject *__pyx_kp_u_has_completed_according_to_Bitt;
static PyObject *__pyx_kp_u_has_completed_according_to_Orde;
static PyObject *__pyx_kp_u_has_completed_according_to_orde;
static PyObject *__pyx_n_s_headers;
static PyObject *__pyx_n_u_headers;
static PyObject *__pyx_n_s_http_client;
static PyObject *__pyx_n_s_http_method;
static PyObject *__pyx_kp_u_https_api_bittrex_com_v3;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_ba;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_bi;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_bi_2;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_bi_3;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_bi_4;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_bi_5;
static PyObject *__pyx_n_s_hummingbot_connector_exchange_bi_6;
static PyObject *__pyx_kp_s_hummingbot_connector_exchange_bi_7;
static PyObject *__pyx_n_s_hummingbot_core_data_type_cancel;
static PyObject *__pyx_n_s_hummingbot_core_data_type_limit;
static PyObject *__pyx_n_s_hummingbot_core_event_events;
static PyObject *__pyx_n_s_hummingbot_core_network_iterator;
static PyObject *__pyx_n_s_hummingbot_core_utils_async_util;
static PyObject *__pyx_n_s_hummingbot_core_utils_estimate_f;
static PyObject *__pyx_n_s_hummingbot_core_utils_tracking_n;
static PyObject *__pyx_n_s_hummingbot_logger;
static PyObject *__pyx_n_s_hummingbot_market_market_base;
static PyObject *__pyx_n_u_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_incomplete_orders;
static PyObject *__pyx_n_s_info;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_initializing;
static PyObject *__pyx_n_s_inspect;
static PyObject *__pyx_n_s_is_buy;
static PyObject *__pyx_n_s_is_coroutine;
static PyObject *__pyx_n_s_is_done;
static PyObject *__pyx_kp_u_is_lower_than_the_minimum_order;
static PyObject *__pyx_kp_u_is_not_tracked;
static PyObject *__pyx_n_s_is_set;
static PyObject *__pyx_kp_u_isenabled;
static PyObject *__pyx_n_s_item;
static PyObject *__pyx_n_s_items;
static PyObject *__pyx_n_s_iter_user_stream_queue;
static PyObject *__pyx_n_s_json;
static PyObject *__pyx_n_s_key;
static PyObject *__pyx_n_s_keys;
static PyObject *__pyx_n_s_kwargs;
static PyObject *__pyx_n_u_lastTradeRate;
static PyObject *__pyx_n_s_last_state;
static PyObject *__pyx_n_s_last_tick;
static PyObject *__pyx_n_s_last_trade_rate;
static PyObject *__pyx_n_u_limit;
static PyObject *__pyx_n_s_list_orders;
static PyObject *__pyx_n_s_local_asset_names;
static PyObject *__pyx_n_s_logger;
static PyObject *__pyx_n_s_logging;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_market;
static PyObject *__pyx_n_u_marketSymbol;
static PyObject *__pyx_n_s_market_dict;
static PyObject *__pyx_n_s_market_list;
static PyObject *__pyx_n_s_market_path_url;
static PyObject *__pyx_kp_u_markets;
static PyObject *__pyx_kp_u_markets_tickers;
static PyObject *__pyx_n_u_minTradeSize;
static PyObject *__pyx_n_s_min_base_amount_increment;
static PyObject *__pyx_n_s_min_btc_value;
static PyObject *__pyx_n_s_min_order_size;
static PyObject *__pyx_n_s_min_order_value;
static PyObject *__pyx_n_s_min_price_increment;
static PyObject *__pyx_n_s_min_quote_amount_increment;
static PyObject *__pyx_n_s_min_trade_size;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_name_2;
static PyObject *__pyx_n_s_network;
static PyObject *__pyx_n_s_new_confirmed_amount;
static PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
static PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
static PyObject *__pyx_n_s_o;
static PyObject *__pyx_kp_u_of_the;
static PyObject *__pyx_n_s_oid;
static PyObject *__pyx_kp_u_on_Bittrex_Check_API_key_and_ne;
static PyObject *__pyx_kp_u_on_order_status_update_Order_no;
static PyObject *__pyx_n_s_open_orders;
static PyObject *__pyx_kp_u_order;
static PyObject *__pyx_n_s_order_2;
static PyObject *__pyx_n_u_order_2;
static PyObject *__pyx_n_u_order_book_initialized;
static PyObject *__pyx_n_s_order_books;
static PyObject *__pyx_n_s_order_id;
static PyObject *__pyx_n_s_order_id_set;
static PyObject *__pyx_n_s_order_result;
static PyObject *__pyx_n_s_order_side;
static PyObject *__pyx_n_s_order_state;
static PyObject *__pyx_n_s_order_status;
static PyObject *__pyx_kp_u_order_to_Bittrex_for;
static PyObject *__pyx_n_s_order_type;
static PyObject *__pyx_n_s_order_type_description;
static PyObject *__pyx_n_s_order_type_str;
static PyObject *__pyx_kp_u_orders;
static PyObject *__pyx_kp_u_orders_2;
static PyObject *__pyx_kp_u_orders_open;
static PyObject *__pyx_kp_u_out_of;
static PyObject *__pyx_n_s_owner;
static PyObject *__pyx_n_s_pandas;
static PyObject *__pyx_n_s_params;
static PyObject *__pyx_n_s_path_url;
static PyObject *__pyx_n_s_pd;
static PyObject *__pyx_kp_s_pd_DataFrame;
static PyObject *__pyx_kp_u_ping;
static PyObject *__pyx_n_s_place_order;
static PyObject *__pyx_n_s_poll_interval;
static PyObject *__pyx_n_s_precision;
static PyObject *__pyx_n_u_precision;
static PyObject *__pyx_n_s_price;
static PyObject *__pyx_n_s_process_api_closed;
static PyObject *__pyx_n_s_pyx_state;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_u_quantity;
static PyObject *__pyx_n_u_quoteCurrencySymbol;
static PyObject *__pyx_n_s_quote_amount;
static PyObject *__pyx_n_s_quote_asset;
static PyObject *__pyx_n_s_quote_currency;
static PyObject *__pyx_n_s_ready;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_reduce_cython;
static PyObject *__pyx_n_s_reduce_ex;
static PyObject *__pyx_n_s_remaining_size;
static PyObject *__pyx_n_s_remote_asset_names;
static PyObject *__pyx_n_s_replace;
static PyObject *__pyx_n_s_request;
static PyObject *__pyx_n_s_response;
static PyObject *__pyx_n_s_restore_tracking_states;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_result_list;
static PyObject *__pyx_n_s_return;
static PyObject *__pyx_n_s_return_exceptions;
static PyObject *__pyx_n_s_retval;
static PyObject *__pyx_n_s_s_decimal_0;
static PyObject *__pyx_n_s_s_decimal_NaN;
static PyObject *__pyx_n_s_safe_ensure_future;
static PyObject *__pyx_n_s_safe_gather;
static PyObject *__pyx_n_s_saved_states;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_kp_s_self__events_cannot_be_converted;
static PyObject *__pyx_kp_u_sell;
static PyObject *__pyx_n_s_sell_2;
static PyObject *__pyx_kp_u_sell_order;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_set;
static PyObject *__pyx_n_s_setstate;
static PyObject *__pyx_n_s_setstate_cython;
static PyObject *__pyx_n_s_sleep;
static PyObject *__pyx_n_s_spec;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_start_network;
static PyObject *__pyx_n_s_start_tracking_order;
static PyObject *__pyx_n_s_state_result;
static PyObject *__pyx_n_s_status;
static PyObject *__pyx_n_u_status;
static PyObject *__pyx_n_s_status_dict;
static PyObject *__pyx_n_s_status_polling_loop;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_stop_network;
static PyObject *__pyx_n_s_stop_network_2;
static PyObject *__pyx_n_s_str;
static PyObject *__pyx_n_s_stream_message;
static PyObject *__pyx_kp_s_stringsource;
static PyObject *__pyx_n_s_subaccount_id;
static PyObject *__pyx_n_s_successful_cancellation;
static PyObject *__pyx_n_s_super;
static PyObject *__pyx_n_s_supported_order_types;
static PyObject *__pyx_n_u_symbol;
static PyObject *__pyx_n_s_tasks;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_ticker_data;
static PyObject *__pyx_n_s_ticker_list;
static PyObject *__pyx_n_s_ticker_path_url;
static PyObject *__pyx_n_u_timeInForce;
static PyObject *__pyx_n_s_timeout;
static PyObject *__pyx_n_s_timeout_seconds;
static PyObject *__pyx_n_s_to_json;
static PyObject *__pyx_n_s_to_limit_order;
static PyObject *__pyx_n_u_total;
static PyObject *__pyx_n_s_total_balance;
static PyObject *__pyx_n_s_tracked_order;
static PyObject *__pyx_n_s_tracked_orders;
static PyObject *__pyx_n_s_trade_type;
static PyObject *__pyx_n_s_trading_pair;
static PyObject *__pyx_n_s_trading_pairs;
static PyObject *__pyx_n_s_trading_required;
static PyObject *__pyx_n_s_trading_rule;
static PyObject *__pyx_n_u_trading_rule_initialized;
static PyObject *__pyx_n_s_trading_rules_list;
static PyObject *__pyx_n_s_trading_rules_polling_loop;
static PyObject *__pyx_n_u_type;
static PyObject *__pyx_n_s_typing;
static PyObject *__pyx_n_s_update;
static PyObject *__pyx_n_s_update_balances;
static PyObject *__pyx_n_s_update_exchange_order_id;
static PyObject *__pyx_n_s_update_order_status;
static PyObject *__pyx_n_s_update_order_status_locals_gene;
static PyObject *__pyx_n_s_update_trading_rules;
static PyObject *__pyx_n_s_url;
static PyObject *__pyx_n_s_user_stream;
static PyObject *__pyx_n_s_user_stream_event_listener;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_n_s_values;
static PyObject *__pyx_n_s_wait;
static PyObject *__pyx_n_s_warning;
static PyObject *__pyx_kp_u_which_is_already_closed_Order_d;
static PyObject *__pyx_kp_u_ws;
#endif
/* #### Code section: decls ### */
static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker___init__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *__pyx_v_self, struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_owner); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_logger(CYTHON_UNUSED PyTypeObject *__pyx_v_cls); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_2__init__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_bittrex_api_key, PyObject *__pyx_v_bittrex_secret_key, double __pyx_v_poll_interval, PyObject *__pyx_v_trading_pairs, PyObject *__pyx_v_trading_required); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_4name___get__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_11order_books___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_12bittrex_auth___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_11status_dict___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_5ready___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_12limit_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_15tracking_states___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_16in_flight_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_4restore_tracking_states(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_saved_states); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_6get_active_exchange_markets(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_9_update_balances(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_12_format_trading_rules(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_market_dict); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_update_trading_rules(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_17list_orders(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_update_order_status_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_update_order_status(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_23_process_api_closed(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_order, PyObject *__pyx_v_tracked_order); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_iter_user_stream_queue(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_28_user_stream_event_listener(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_31_status_polling_loop(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_34_trading_rules_polling_loop(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_37start_tracking_order(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_exchange_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_order_type, PyObject *__pyx_v_trade_type, PyObject *__pyx_v_price, PyObject *__pyx_v_amount); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_39supported_order_types(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_41place_order(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_is_buy, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_44execute_buy(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_47execute_sell(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_50execute_cancel(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_order_id); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_53cancel_all(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, double __pyx_v_timeout_seconds); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_56_http_client(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_59_api_request(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_http_method, PyObject *__pyx_v_path_url, PyObject *__pyx_v_params, PyObject *__pyx_v_body, PyObject *__pyx_v_subaccount_id); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_62check_network(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_65_stop_network(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_67stop_network(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_70start_network(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_73get_price(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_is_buy); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_75buy(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_77sell(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_kwargs); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_79cancel(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_client_order_id); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_81get_fee(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_base_currency, PyObject *__pyx_v_quote_currency, PyObject *__pyx_v_order_type, PyObject *__pyx_v_order_side, PyObject *__pyx_v_amount, PyObject *__pyx_v_price); /* proto */
static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_83get_order_book(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_coro_scheduler_task___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_coro_scheduler_task_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_coro_scheduler_task_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_shared_client___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_shared_client_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_shared_client_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_status_polling_task___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_status_polling_task_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_status_polling_task_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27_trading_rules_polling_task___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27_trading_rules_polling_task_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27_trading_rules_polling_task_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_user_stream_event_listener_task___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_user_stream_event_listener_task_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_user_stream_event_listener_task_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_user_stream_tracker_task___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_user_stream_tracker_task_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_user_stream_tracker_task_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_85__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_87__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_get = {0, 0, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_keys = {0, 0, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_values = {0, 0, 0, 0, 0};
static __Pyx_CachedCFunction __pyx_umethod_PySet_Type_difference = {0, 0, 0, 0, 0};
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_float_0_0;
static PyObject *__pyx_float_0_5;
static PyObject *__pyx_float_1_0;
static PyObject *__pyx_float_5_0;
static PyObject *__pyx_float_10_0;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_200;
static PyObject *__pyx_int_201;
static PyObject *__pyx_int_300;
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__pyx_k__24;
static PyObject *__pyx_k__26;
static PyObject *__pyx_k__27;
static PyObject *__pyx_k__28;
static PyObject *__pyx_k__29;
static PyObject *__pyx_k__31;
static PyObject *__pyx_k__42;
static PyObject *__pyx_k__43;
static PyObject *__pyx_k__44;
static PyObject *__pyx_k__45;
static PyObject *__pyx_k__46;
static PyObject *__pyx_k__79;
static PyObject *__pyx_k__81;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_tuple__54;
static PyObject *__pyx_tuple__56;
static PyObject *__pyx_tuple__58;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__67;
static PyObject *__pyx_tuple__69;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__71;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__73;
static PyObject *__pyx_tuple__75;
static PyObject *__pyx_tuple__77;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__83;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__85;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__87;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__91;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_codeobj__2;
static PyObject *__pyx_codeobj__3;
static PyObject *__pyx_codeobj__5;
static PyObject *__pyx_codeobj__7;
static PyObject *__pyx_codeobj__8;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_codeobj__13;
static PyObject *__pyx_codeobj__15;
static PyObject *__pyx_codeobj__17;
static PyObject *__pyx_codeobj__19;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__25;
static PyObject *__pyx_codeobj__30;
static PyObject *__pyx_codeobj__32;
static PyObject *__pyx_codeobj__34;
static PyObject *__pyx_codeobj__37;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__39;
static PyObject *__pyx_codeobj__40;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__53;
static PyObject *__pyx_codeobj__55;
static PyObject *__pyx_codeobj__57;
static PyObject *__pyx_codeobj__59;
static PyObject *__pyx_codeobj__63;
static PyObject *__pyx_codeobj__68;
static PyObject *__pyx_codeobj__74;
static PyObject *__pyx_codeobj__76;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__95;
static PyObject *__pyx_codeobj__97;
static PyObject *__pyx_codeobj__99;
static PyObject *__pyx_codeobj__101;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__107;
#endif
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  PyTypeObject *__pyx_ptype_10hummingbot_4core_6pubsub_PubSub;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult;
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  PyTypeObject *__pyx_ptype_5numpy_dtype;
  PyTypeObject *__pyx_ptype_5numpy_flatiter;
  PyTypeObject *__pyx_ptype_5numpy_broadcast;
  PyTypeObject *__pyx_ptype_5numpy_ndarray;
  PyTypeObject *__pyx_ptype_5numpy_generic;
  PyTypeObject *__pyx_ptype_5numpy_number;
  PyTypeObject *__pyx_ptype_5numpy_integer;
  PyTypeObject *__pyx_ptype_5numpy_signedinteger;
  PyTypeObject *__pyx_ptype_5numpy_unsignedinteger;
  PyTypeObject *__pyx_ptype_5numpy_inexact;
  PyTypeObject *__pyx_ptype_5numpy_floating;
  PyTypeObject *__pyx_ptype_5numpy_complexfloating;
  PyTypeObject *__pyx_ptype_5numpy_flexible;
  PyTypeObject *__pyx_ptype_5numpy_character;
  PyTypeObject *__pyx_ptype_5numpy_ufunc;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_5clock_Clock;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase;
  PyTypeObject *__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network;
  PyTypeObject *__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network;
  PyObject *__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network;
  PyObject *__pyx_kp_u_;
  PyObject *__pyx_kp_u_0_0005;
  PyObject *__pyx_kp_u_1_01;
  PyObject *__pyx_kp_u_1e;
  PyObject *__pyx_n_s_API_CALL_TIMEOUT;
  PyObject *__pyx_kp_u_Aborting;
  PyObject *__pyx_n_s_Any;
  PyObject *__pyx_n_s_AssertionError;
  PyObject *__pyx_n_s_AsyncIterable;
  PyObject *__pyx_kp_s_AsyncIterable_Dict_str_Any;
  PyObject *__pyx_n_s_BITTREX_API_ENDPOINT;
  PyObject *__pyx_n_u_BTC;
  PyObject *__pyx_kp_u_BTC_USD;
  PyObject *__pyx_kp_u_BTC_USDT;
  PyObject *__pyx_n_s_BUY;
  PyObject *__pyx_n_u_BUY;
  PyObject *__pyx_n_s_BittrexAPIOrderBookDataSource;
  PyObject *__pyx_n_s_BittrexAuth;
  PyObject *__pyx_n_s_BittrexExchange;
  PyObject *__pyx_n_s_BittrexExchangeTransactionTracke;
  PyObject *__pyx_n_s_BittrexExchangeTransactionTracke_2;
  PyObject *__pyx_n_s_BittrexExchangeTransactionTracke_3;
  PyObject *__pyx_n_s_BittrexExchange___reduce_cython;
  PyObject *__pyx_n_s_BittrexExchange___setstate_cytho;
  PyObject *__pyx_n_s_BittrexExchange__api_request;
  PyObject *__pyx_n_s_BittrexExchange__format_trading;
  PyObject *__pyx_n_s_BittrexExchange__http_client;
  PyObject *__pyx_n_s_BittrexExchange__iter_user_strea;
  PyObject *__pyx_n_s_BittrexExchange__process_api_clo;
  PyObject *__pyx_n_s_BittrexExchange__status_polling;
  PyObject *__pyx_n_s_BittrexExchange__stop_network;
  PyObject *__pyx_n_s_BittrexExchange__trading_rules_p;
  PyObject *__pyx_n_s_BittrexExchange__update_balances;
  PyObject *__pyx_n_s_BittrexExchange__update_order_st;
  PyObject *__pyx_n_s_BittrexExchange__update_trading;
  PyObject *__pyx_n_s_BittrexExchange__user_stream_eve;
  PyObject *__pyx_n_s_BittrexExchange_buy;
  PyObject *__pyx_n_s_BittrexExchange_cancel;
  PyObject *__pyx_n_s_BittrexExchange_cancel_all;
  PyObject *__pyx_n_s_BittrexExchange_check_network;
  PyObject *__pyx_n_s_BittrexExchange_execute_buy;
  PyObject *__pyx_n_s_BittrexExchange_execute_cancel;
  PyObject *__pyx_n_s_BittrexExchange_execute_sell;
  PyObject *__pyx_n_s_BittrexExchange_get_active_excha;
  PyObject *__pyx_n_s_BittrexExchange_get_fee;
  PyObject *__pyx_n_s_BittrexExchange_get_order_book;
  PyObject *__pyx_n_s_BittrexExchange_get_price;
  PyObject *__pyx_n_s_BittrexExchange_list_orders;
  PyObject *__pyx_n_s_BittrexExchange_logger;
  PyObject *__pyx_n_s_BittrexExchange_place_order;
  PyObject *__pyx_n_s_BittrexExchange_restore_tracking;
  PyObject *__pyx_n_s_BittrexExchange_sell;
  PyObject *__pyx_n_s_BittrexExchange_start_network;
  PyObject *__pyx_n_s_BittrexExchange_start_tracking_o;
  PyObject *__pyx_n_s_BittrexExchange_stop_network;
  PyObject *__pyx_n_s_BittrexExchange_supported_order;
  PyObject *__pyx_n_s_BittrexInFlightOrder;
  PyObject *__pyx_n_s_BittrexOrderBookTracker;
  PyObject *__pyx_n_s_BittrexUserStreamTracker;
  PyObject *__pyx_n_s_BuyOrderCompleted;
  PyObject *__pyx_n_s_BuyOrderCompletedEvent;
  PyObject *__pyx_n_s_BuyOrderCreated;
  PyObject *__pyx_n_s_BuyOrderCreatedEvent;
  PyObject *__pyx_kp_u_Buy_order_amount;
  PyObject *__pyx_n_u_CANCELLED;
  PyObject *__pyx_kp_u_CELO;
  PyObject *__pyx_kp_u_CGLD;
  PyObject *__pyx_n_u_CLOSED;
  PyObject *__pyx_n_s_CONNECTED;
  PyObject *__pyx_n_s_CancellationResult;
  PyObject *__pyx_n_s_CancelledError;
  PyObject *__pyx_kp_u_Check_API_key_and_network_conne;
  PyObject *__pyx_n_s_ClientSession;
  PyObject *__pyx_kp_u_Could_not_fetch_updates_for_the;
  PyObject *__pyx_kp_u_Could_not_fetch_updates_from_Bit;
  PyObject *__pyx_kp_u_Could_not_fetch_updates_from_Bit_2;
  PyObject *__pyx_kp_u_Created;
  PyObject *__pyx_n_u_DELETE;
  PyObject *__pyx_n_s_Decimal;
  PyObject *__pyx_n_s_Dict;
  PyObject *__pyx_kp_s_Dict_str_Any;
  PyObject *__pyx_kp_s_Dict_str_any;
  PyObject *__pyx_n_u_ETH;
  PyObject *__pyx_kp_u_ETH_BTC;
  PyObject *__pyx_kp_u_Error_fetching_response_from;
  PyObject *__pyx_kp_u_Error_fetching_status_update_for;
  PyObject *__pyx_kp_u_Error_parsing_the_trading_pair_r;
  PyObject *__pyx_kp_u_Error_submitting_buy;
  PyObject *__pyx_kp_u_Error_submitting_sell;
  PyObject *__pyx_n_s_Event;
  PyObject *__pyx_n_s_ExchangeBase;
  PyObject *__pyx_kp_u_Exchange_order_ID_never_updated;
  PyObject *__pyx_n_u_FAILURE;
  PyObject *__pyx_kp_u_Failed_to_cancel_order;
  PyObject *__pyx_kp_u_Failed_to_cancel_order_on_Bittre;
  PyObject *__pyx_kp_u_Failed_to_cancel_the_order;
  PyObject *__pyx_kp_u_Failed_to_submit_buy_order_to_Bi;
  PyObject *__pyx_kp_u_Failed_to_submit_sell_order_to_B;
  PyObject *__pyx_kp_u_Filled;
  PyObject *__pyx_n_u_GET;
  PyObject *__pyx_n_u_GOOD_TIL_CANCELLED;
  PyObject *__pyx_kp_u_HTTP_Status_Code;
  PyObject *__pyx_n_s_HummingbotLogger;
  PyObject *__pyx_n_s_IOError;
  PyObject *__pyx_n_s_ImportError;
  PyObject *__pyx_kp_u_Invalid_OrderType;
  PyObject *__pyx_n_s_LIMIT;
  PyObject *__pyx_n_u_LIMIT;
  PyObject *__pyx_n_s_LIMIT_MAKER;
  PyObject *__pyx_n_s_LimitOrder;
  PyObject *__pyx_n_s_List;
  PyObject *__pyx_kp_s_List_Any;
  PyObject *__pyx_kp_s_List_CancellationResult;
  PyObject *__pyx_kp_s_List_TradingRule;
  PyObject *__pyx_n_s_MARKET;
  PyObject *__pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT;
  PyObject *__pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T;
  PyObject *__pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG;
  PyObject *__pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG;
  PyObject *__pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG;
  PyObject *__pyx_n_s_MARKET_RECEIVED_ASSET_EVENT_TAG;
  PyObject *__pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN;
  PyObject *__pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT;
  PyObject *__pyx_n_s_MARKET_TRANSACTION_FAILURE_EVENT;
  PyObject *__pyx_n_s_MarketEvent;
  PyObject *__pyx_n_s_MarketOrderFailureEvent;
  PyObject *__pyx_n_s_MarketTransactionFailureEvent;
  PyObject *__pyx_n_s_NOT_CONNECTED;
  PyObject *__pyx_n_u_NOT_FOUND;
  PyObject *__pyx_n_s_NaN;
  PyObject *__pyx_n_u_NaN;
  PyObject *__pyx_n_s_NetworkStatus;
  PyObject *__pyx_kp_u_No_exchange_ID_found_for;
  PyObject *__pyx_kp_u_No_order_book_exists_for;
  PyObject *__pyx_kp_u_None;
  PyObject *__pyx_n_u_OFFLINE;
  PyObject *__pyx_n_s_ORDER_NOT_EXIST_CONFIRMATION_COU;
  PyObject *__pyx_n_u_ORDER_NOT_OPEN;
  PyObject *__pyx_n_s_Optional;
  PyObject *__pyx_kp_s_Optional_Decimal;
  PyObject *__pyx_n_s_OrderBook;
  PyObject *__pyx_n_s_OrderCancelled;
  PyObject *__pyx_n_s_OrderCancelledEvent;
  PyObject *__pyx_n_s_OrderFailure;
  PyObject *__pyx_n_s_OrderFilled;
  PyObject *__pyx_n_s_OrderFilledEvent;
  PyObject *__pyx_n_s_OrderType;
  PyObject *__pyx_n_u_POST;
  PyObject *__pyx_n_u_POST_ONLY_GOOD_TIL_CANCELLED;
  PyObject *__pyx_n_s_ReceivedAsset;
  PyObject *__pyx_n_s_SELL;
  PyObject *__pyx_n_u_SELL;
  PyObject *__pyx_n_s_SellOrderCompleted;
  PyObject *__pyx_n_s_SellOrderCompletedEvent;
  PyObject *__pyx_n_s_SellOrderCreated;
  PyObject *__pyx_n_s_SellOrderCreatedEvent;
  PyObject *__pyx_kp_u_Sell_order_amount;
  PyObject *__pyx_kp_u_Skipping;
  PyObject *__pyx_kp_u_Successfully_cancelled_order;
  PyObject *__pyx_kp_u_The;
  PyObject *__pyx_kp_u_The_BUY_order;
  PyObject *__pyx_kp_u_The_SELL_order;
  PyObject *__pyx_kp_u_The_order;
  PyObject *__pyx_n_s_TimeoutError;
  PyObject *__pyx_n_s_TradeFee;
  PyObject *__pyx_n_s_TradeType;
  PyObject *__pyx_n_s_TransactionFailure;
  PyObject *__pyx_kp_u_Tried_to_cancel_order;
  PyObject *__pyx_n_s_TypeError;
  PyObject *__pyx_n_s_UPDATE_ORDERS_INTERVAL;
  PyObject *__pyx_n_u_USD;
  PyObject *__pyx_n_u_USDT;
  PyObject *__pyx_kp_u_Unexpected_error_cancelling_orde;
  PyObject *__pyx_kp_u_Unexpected_error_in_user_stream;
  PyObject *__pyx_kp_u_Unexpected_error_while_fetching;
  PyObject *__pyx_kp_u_Unexpected_error_while_polling_u;
  PyObject *__pyx_kp_u_Unknown_error_Retrying_after_1_s;
  PyObject *__pyx_n_s_ValueError;
  PyObject *__pyx_kp_u__10;
  PyObject *__pyx_n_s__108;
  PyObject *__pyx_kp_u__11;
  PyObject *__pyx_kp_u__12;
  PyObject *__pyx_kp_u__21;
  PyObject *__pyx_n_s__49;
  PyObject *__pyx_kp_u__9;
  PyObject *__pyx_n_u_account_balance;
  PyObject *__pyx_n_s_account_balances;
  PyObject *__pyx_n_s_account_info;
  PyObject *__pyx_n_s_aenter;
  PyObject *__pyx_n_s_aexit;
  PyObject *__pyx_n_s_aiohttp;
  PyObject *__pyx_kp_s_aiohttp_ClientSession;
  PyObject *__pyx_n_s_aiter;
  PyObject *__pyx_n_s_all;
  PyObject *__pyx_n_s_amount;
  PyObject *__pyx_n_s_anext;
  PyObject *__pyx_n_s_api_request;
  PyObject *__pyx_n_s_api_response;
  PyObject *__pyx_n_s_api_responses;
  PyObject *__pyx_n_s_app_warning_msg;
  PyObject *__pyx_n_s_args;
  PyObject *__pyx_n_s_asset_name;
  PyObject *__pyx_n_s_asset_names_to_remove;
  PyObject *__pyx_n_s_async_timeout;
  PyObject *__pyx_n_s_asyncio;
  PyObject *__pyx_n_s_asyncio_coroutines;
  PyObject *__pyx_n_s_asyncio_tasks;
  PyObject *__pyx_n_s_auth_dict;
  PyObject *__pyx_n_u_available;
  PyObject *__pyx_n_s_available_balance;
  PyObject *__pyx_n_s_await;
  PyObject *__pyx_n_u_balance;
  PyObject *__pyx_n_s_balance_delta;
  PyObject *__pyx_n_s_balance_entry;
  PyObject *__pyx_kp_u_balances;
  PyObject *__pyx_n_s_balances_2;
  PyObject *__pyx_n_s_base_asset;
  PyObject *__pyx_n_s_base_currency;
  PyObject *__pyx_n_u_bittrex;
  PyObject *__pyx_n_s_bittrex_api_key;
  PyObject *__pyx_n_s_bittrex_auth;
  PyObject *__pyx_n_s_bittrex_secret_key;
  PyObject *__pyx_n_s_bm_logger;
  PyObject *__pyx_n_s_body;
  PyObject *__pyx_n_u_body;
  PyObject *__pyx_n_s_bool;
  PyObject *__pyx_n_s_btc_usd_price;
  PyObject *__pyx_n_s_btc_usdt_price;
  PyObject *__pyx_kp_u_buy;
  PyObject *__pyx_n_s_buy_2;
  PyObject *__pyx_kp_u_buy_order;
  PyObject *__pyx_n_s_cancel;
  PyObject *__pyx_n_s_cancel_all;
  PyObject *__pyx_n_s_cancel_result;
  PyObject *__pyx_n_u_cancelled;
  PyObject *__pyx_n_s_check_network;
  PyObject *__pyx_n_s_client;
  PyObject *__pyx_n_s_client_order_id;
  PyObject *__pyx_n_s_cline_in_traceback;
  PyObject *__pyx_n_s_close;
  PyObject *__pyx_n_s_cls;
  PyObject *__pyx_n_u_commission;
  PyObject *__pyx_n_s_content;
  PyObject *__pyx_n_u_content;
  PyObject *__pyx_n_u_currencySymbol;
  PyObject *__pyx_n_s_current_tick;
  PyObject *__pyx_n_s_data;
  PyObject *__pyx_n_s_decimal;
  PyObject *__pyx_n_s_decimal_amount;
  PyObject *__pyx_n_s_decimal_price;
  PyObject *__pyx_n_u_delta;
  PyObject *__pyx_n_s_dict;
  PyObject *__pyx_n_s_difference;
  PyObject *__pyx_n_u_direction;
  PyObject *__pyx_kp_u_disable;
  PyObject *__pyx_kp_u_does_not_exist_on_Bittrex_No_ca;
  PyObject *__pyx_n_u_done;
  PyObject *__pyx_kp_u_enable;
  PyObject *__pyx_n_s_err;
  PyObject *__pyx_n_s_error;
  PyObject *__pyx_n_s_estimate_fee;
  PyObject *__pyx_n_s_eth_btc_price;
  PyObject *__pyx_n_s_event_type;
  PyObject *__pyx_n_u_event_type;
  PyObject *__pyx_n_s_exc_info;
  PyObject *__pyx_n_s_exchange_order_id;
  PyObject *__pyx_n_s_execute_buy;
  PyObject *__pyx_n_s_execute_cancel;
  PyObject *__pyx_n_s_execute_price;
  PyObject *__pyx_n_s_execute_sell;
  PyObject *__pyx_n_s_executed_amount_base;
  PyObject *__pyx_n_s_executed_amount_diff;
  PyObject *__pyx_n_s_executed_amount_quote;
  PyObject *__pyx_n_s_executed_price;
  PyObject *__pyx_n_u_f;
  PyObject *__pyx_n_s_failed_cancellation;
  PyObject *__pyx_n_s_fee_asset;
  PyObject *__pyx_n_s_fee_paid;
  PyObject *__pyx_n_u_fillQuantity;
  PyObject *__pyx_n_s_float;
  PyObject *__pyx_kp_u_for;
  PyObject *__pyx_n_s_format_trading_rules;
  PyObject *__pyx_n_s_from_json;
  PyObject *__pyx_kp_u_gc;
  PyObject *__pyx_n_s_generate_auth_dict;
  PyObject *__pyx_n_s_genexpr;
  PyObject *__pyx_n_s_get;
  PyObject *__pyx_n_s_getLogger;
  PyObject *__pyx_n_s_get_active_exchange_markets;
  PyObject *__pyx_n_s_get_event_loop;
  PyObject *__pyx_n_s_get_exchange_order_id;
  PyObject *__pyx_n_s_get_fee;
  PyObject *__pyx_n_s_get_order_book;
  PyObject *__pyx_n_s_get_price;
  PyObject *__pyx_n_s_get_tracking_nonce;
  PyObject *__pyx_n_s_getstate;
  PyObject *__pyx_kp_u_has_been_cancelled_according_to;
  PyObject *__pyx_kp_u_has_been_cancelled_according_to_2;
  PyObject *__pyx_kp_u_has_completed_according_to_Bitt;
  PyObject *__pyx_kp_u_has_completed_according_to_Orde;
  PyObject *__pyx_kp_u_has_completed_according_to_orde;
  PyObject *__pyx_n_s_headers;
  PyObject *__pyx_n_u_headers;
  PyObject *__pyx_n_s_http_client;
  PyObject *__pyx_n_s_http_method;
  PyObject *__pyx_kp_u_https_api_bittrex_com_v3;
  PyObject *__pyx_n_s_hummingbot_connector_exchange_ba;
  PyObject *__pyx_n_s_hummingbot_connector_exchange_bi;
  PyObject *__pyx_n_s_hummingbot_connector_exchange_bi_2;
  PyObject *__pyx_n_s_hummingbot_connector_exchange_bi_3;
  PyObject *__pyx_n_s_hummingbot_connector_exchange_bi_4;
  PyObject *__pyx_n_s_hummingbot_connector_exchange_bi_5;
  PyObject *__pyx_n_s_hummingbot_connector_exchange_bi_6;
  PyObject *__pyx_kp_s_hummingbot_connector_exchange_bi_7;
  PyObject *__pyx_n_s_hummingbot_core_data_type_cancel;
  PyObject *__pyx_n_s_hummingbot_core_data_type_limit;
  PyObject *__pyx_n_s_hummingbot_core_event_events;
  PyObject *__pyx_n_s_hummingbot_core_network_iterator;
  PyObject *__pyx_n_s_hummingbot_core_utils_async_util;
  PyObject *__pyx_n_s_hummingbot_core_utils_estimate_f;
  PyObject *__pyx_n_s_hummingbot_core_utils_tracking_n;
  PyObject *__pyx_n_s_hummingbot_logger;
  PyObject *__pyx_n_s_hummingbot_market_market_base;
  PyObject *__pyx_n_u_id;
  PyObject *__pyx_n_s_import;
  PyObject *__pyx_n_s_incomplete_orders;
  PyObject *__pyx_n_s_info;
  PyObject *__pyx_n_s_init;
  PyObject *__pyx_n_s_initializing;
  PyObject *__pyx_n_s_inspect;
  PyObject *__pyx_n_s_is_buy;
  PyObject *__pyx_n_s_is_coroutine;
  PyObject *__pyx_n_s_is_done;
  PyObject *__pyx_kp_u_is_lower_than_the_minimum_order;
  PyObject *__pyx_kp_u_is_not_tracked;
  PyObject *__pyx_n_s_is_set;
  PyObject *__pyx_kp_u_isenabled;
  PyObject *__pyx_n_s_item;
  PyObject *__pyx_n_s_items;
  PyObject *__pyx_n_s_iter_user_stream_queue;
  PyObject *__pyx_n_s_json;
  PyObject *__pyx_n_s_key;
  PyObject *__pyx_n_s_keys;
  PyObject *__pyx_n_s_kwargs;
  PyObject *__pyx_n_u_lastTradeRate;
  PyObject *__pyx_n_s_last_state;
  PyObject *__pyx_n_s_last_tick;
  PyObject *__pyx_n_s_last_trade_rate;
  PyObject *__pyx_n_u_limit;
  PyObject *__pyx_n_s_list_orders;
  PyObject *__pyx_n_s_local_asset_names;
  PyObject *__pyx_n_s_logger;
  PyObject *__pyx_n_s_logging;
  PyObject *__pyx_n_s_lower;
  PyObject *__pyx_n_s_main;
  PyObject *__pyx_n_s_market;
  PyObject *__pyx_n_u_marketSymbol;
  PyObject *__pyx_n_s_market_dict;
  PyObject *__pyx_n_s_market_list;
  PyObject *__pyx_n_s_market_path_url;
  PyObject *__pyx_kp_u_markets;
  PyObject *__pyx_kp_u_markets_tickers;
  PyObject *__pyx_n_u_minTradeSize;
  PyObject *__pyx_n_s_min_base_amount_increment;
  PyObject *__pyx_n_s_min_btc_value;
  PyObject *__pyx_n_s_min_order_size;
  PyObject *__pyx_n_s_min_order_value;
  PyObject *__pyx_n_s_min_price_increment;
  PyObject *__pyx_n_s_min_quote_amount_increment;
  PyObject *__pyx_n_s_min_trade_size;
  PyObject *__pyx_n_s_name;
  PyObject *__pyx_n_s_name_2;
  PyObject *__pyx_n_s_network;
  PyObject *__pyx_n_s_new_confirmed_amount;
  PyObject *__pyx_kp_u_numpy_core_multiarray_failed_to;
  PyObject *__pyx_kp_u_numpy_core_umath_failed_to_impor;
  PyObject *__pyx_n_s_o;
  PyObject *__pyx_kp_u_of_the;
  PyObject *__pyx_n_s_oid;
  PyObject *__pyx_kp_u_on_Bittrex_Check_API_key_and_ne;
  PyObject *__pyx_kp_u_on_order_status_update_Order_no;
  PyObject *__pyx_n_s_open_orders;
  PyObject *__pyx_kp_u_order;
  PyObject *__pyx_n_s_order_2;
  PyObject *__pyx_n_u_order_2;
  PyObject *__pyx_n_u_order_book_initialized;
  PyObject *__pyx_n_s_order_books;
  PyObject *__pyx_n_s_order_id;
  PyObject *__pyx_n_s_order_id_set;
  PyObject *__pyx_n_s_order_result;
  PyObject *__pyx_n_s_order_side;
  PyObject *__pyx_n_s_order_state;
  PyObject *__pyx_n_s_order_status;
  PyObject *__pyx_kp_u_order_to_Bittrex_for;
  PyObject *__pyx_n_s_order_type;
  PyObject *__pyx_n_s_order_type_description;
  PyObject *__pyx_n_s_order_type_str;
  PyObject *__pyx_kp_u_orders;
  PyObject *__pyx_kp_u_orders_2;
  PyObject *__pyx_kp_u_orders_open;
  PyObject *__pyx_kp_u_out_of;
  PyObject *__pyx_n_s_owner;
  PyObject *__pyx_n_s_pandas;
  PyObject *__pyx_n_s_params;
  PyObject *__pyx_n_s_path_url;
  PyObject *__pyx_n_s_pd;
  PyObject *__pyx_kp_s_pd_DataFrame;
  PyObject *__pyx_kp_u_ping;
  PyObject *__pyx_n_s_place_order;
  PyObject *__pyx_n_s_poll_interval;
  PyObject *__pyx_n_s_precision;
  PyObject *__pyx_n_u_precision;
  PyObject *__pyx_n_s_price;
  PyObject *__pyx_n_s_process_api_closed;
  PyObject *__pyx_n_s_pyx_state;
  PyObject *__pyx_n_s_pyx_vtable;
  PyObject *__pyx_n_u_quantity;
  PyObject *__pyx_n_u_quoteCurrencySymbol;
  PyObject *__pyx_n_s_quote_amount;
  PyObject *__pyx_n_s_quote_asset;
  PyObject *__pyx_n_s_quote_currency;
  PyObject *__pyx_n_s_ready;
  PyObject *__pyx_n_s_reduce;
  PyObject *__pyx_n_s_reduce_cython;
  PyObject *__pyx_n_s_reduce_ex;
  PyObject *__pyx_n_s_remaining_size;
  PyObject *__pyx_n_s_remote_asset_names;
  PyObject *__pyx_n_s_replace;
  PyObject *__pyx_n_s_request;
  PyObject *__pyx_n_s_response;
  PyObject *__pyx_n_s_restore_tracking_states;
  PyObject *__pyx_n_s_result;
  PyObject *__pyx_n_s_result_list;
  PyObject *__pyx_n_s_return;
  PyObject *__pyx_n_s_return_exceptions;
  PyObject *__pyx_n_s_retval;
  PyObject *__pyx_n_s_s_decimal_0;
  PyObject *__pyx_n_s_s_decimal_NaN;
  PyObject *__pyx_n_s_safe_ensure_future;
  PyObject *__pyx_n_s_safe_gather;
  PyObject *__pyx_n_s_saved_states;
  PyObject *__pyx_n_s_self;
  PyObject *__pyx_kp_s_self__events_cannot_be_converted;
  PyObject *__pyx_kp_u_sell;
  PyObject *__pyx_n_s_sell_2;
  PyObject *__pyx_kp_u_sell_order;
  PyObject *__pyx_n_s_send;
  PyObject *__pyx_n_s_set;
  PyObject *__pyx_n_s_setstate;
  PyObject *__pyx_n_s_setstate_cython;
  PyObject *__pyx_n_s_sleep;
  PyObject *__pyx_n_s_spec;
  PyObject *__pyx_n_s_start;
  PyObject *__pyx_n_s_start_network;
  PyObject *__pyx_n_s_start_tracking_order;
  PyObject *__pyx_n_s_state_result;
  PyObject *__pyx_n_s_status;
  PyObject *__pyx_n_u_status;
  PyObject *__pyx_n_s_status_dict;
  PyObject *__pyx_n_s_status_polling_loop;
  PyObject *__pyx_n_s_stop;
  PyObject *__pyx_n_s_stop_network;
  PyObject *__pyx_n_s_stop_network_2;
  PyObject *__pyx_n_s_str;
  PyObject *__pyx_n_s_stream_message;
  PyObject *__pyx_kp_s_stringsource;
  PyObject *__pyx_n_s_subaccount_id;
  PyObject *__pyx_n_s_successful_cancellation;
  PyObject *__pyx_n_s_super;
  PyObject *__pyx_n_s_supported_order_types;
  PyObject *__pyx_n_u_symbol;
  PyObject *__pyx_n_s_tasks;
  PyObject *__pyx_n_s_test;
  PyObject *__pyx_n_s_throw;
  PyObject *__pyx_n_s_ticker_data;
  PyObject *__pyx_n_s_ticker_list;
  PyObject *__pyx_n_s_ticker_path_url;
  PyObject *__pyx_n_u_timeInForce;
  PyObject *__pyx_n_s_timeout;
  PyObject *__pyx_n_s_timeout_seconds;
  PyObject *__pyx_n_s_to_json;
  PyObject *__pyx_n_s_to_limit_order;
  PyObject *__pyx_n_u_total;
  PyObject *__pyx_n_s_total_balance;
  PyObject *__pyx_n_s_tracked_order;
  PyObject *__pyx_n_s_tracked_orders;
  PyObject *__pyx_n_s_trade_type;
  PyObject *__pyx_n_s_trading_pair;
  PyObject *__pyx_n_s_trading_pairs;
  PyObject *__pyx_n_s_trading_required;
  PyObject *__pyx_n_s_trading_rule;
  PyObject *__pyx_n_u_trading_rule_initialized;
  PyObject *__pyx_n_s_trading_rules_list;
  PyObject *__pyx_n_s_trading_rules_polling_loop;
  PyObject *__pyx_n_u_type;
  PyObject *__pyx_n_s_typing;
  PyObject *__pyx_n_s_update;
  PyObject *__pyx_n_s_update_balances;
  PyObject *__pyx_n_s_update_exchange_order_id;
  PyObject *__pyx_n_s_update_order_status;
  PyObject *__pyx_n_s_update_order_status_locals_gene;
  PyObject *__pyx_n_s_update_trading_rules;
  PyObject *__pyx_n_s_url;
  PyObject *__pyx_n_s_user_stream;
  PyObject *__pyx_n_s_user_stream_event_listener;
  PyObject *__pyx_n_s_value;
  PyObject *__pyx_n_s_values;
  PyObject *__pyx_n_s_wait;
  PyObject *__pyx_n_s_warning;
  PyObject *__pyx_kp_u_which_is_already_closed_Order_d;
  PyObject *__pyx_kp_u_ws;
  PyObject *__pyx_float_0_0;
  PyObject *__pyx_float_0_5;
  PyObject *__pyx_float_1_0;
  PyObject *__pyx_float_5_0;
  PyObject *__pyx_float_10_0;
  PyObject *__pyx_int_0;
  PyObject *__pyx_int_1;
  PyObject *__pyx_int_3;
  PyObject *__pyx_int_200;
  PyObject *__pyx_int_201;
  PyObject *__pyx_int_300;
  PyObject *__pyx_k__24;
  PyObject *__pyx_k__26;
  PyObject *__pyx_k__27;
  PyObject *__pyx_k__28;
  PyObject *__pyx_k__29;
  PyObject *__pyx_k__31;
  PyObject *__pyx_k__42;
  PyObject *__pyx_k__43;
  PyObject *__pyx_k__44;
  PyObject *__pyx_k__45;
  PyObject *__pyx_k__46;
  PyObject *__pyx_k__79;
  PyObject *__pyx_k__81;
  PyObject *__pyx_tuple__4;
  PyObject *__pyx_tuple__6;
  PyObject *__pyx_tuple__14;
  PyObject *__pyx_tuple__16;
  PyObject *__pyx_tuple__18;
  PyObject *__pyx_tuple__20;
  PyObject *__pyx_tuple__23;
  PyObject *__pyx_tuple__33;
  PyObject *__pyx_tuple__35;
  PyObject *__pyx_tuple__36;
  PyObject *__pyx_tuple__47;
  PyObject *__pyx_tuple__48;
  PyObject *__pyx_tuple__50;
  PyObject *__pyx_tuple__51;
  PyObject *__pyx_tuple__52;
  PyObject *__pyx_tuple__54;
  PyObject *__pyx_tuple__56;
  PyObject *__pyx_tuple__58;
  PyObject *__pyx_tuple__60;
  PyObject *__pyx_tuple__61;
  PyObject *__pyx_tuple__62;
  PyObject *__pyx_tuple__64;
  PyObject *__pyx_tuple__65;
  PyObject *__pyx_tuple__66;
  PyObject *__pyx_tuple__67;
  PyObject *__pyx_tuple__69;
  PyObject *__pyx_tuple__70;
  PyObject *__pyx_tuple__71;
  PyObject *__pyx_tuple__72;
  PyObject *__pyx_tuple__73;
  PyObject *__pyx_tuple__75;
  PyObject *__pyx_tuple__77;
  PyObject *__pyx_tuple__78;
  PyObject *__pyx_tuple__80;
  PyObject *__pyx_tuple__82;
  PyObject *__pyx_tuple__83;
  PyObject *__pyx_tuple__84;
  PyObject *__pyx_tuple__85;
  PyObject *__pyx_tuple__86;
  PyObject *__pyx_tuple__87;
  PyObject *__pyx_tuple__88;
  PyObject *__pyx_tuple__90;
  PyObject *__pyx_tuple__91;
  PyObject *__pyx_tuple__92;
  PyObject *__pyx_tuple__94;
  PyObject *__pyx_tuple__96;
  PyObject *__pyx_tuple__98;
  PyObject *__pyx_codeobj__2;
  PyObject *__pyx_codeobj__3;
  PyObject *__pyx_codeobj__5;
  PyObject *__pyx_codeobj__7;
  PyObject *__pyx_codeobj__8;
  PyObject *__pyx_tuple__100;
  PyObject *__pyx_tuple__102;
  PyObject *__pyx_tuple__104;
  PyObject *__pyx_tuple__106;
  PyObject *__pyx_codeobj__13;
  PyObject *__pyx_codeobj__15;
  PyObject *__pyx_codeobj__17;
  PyObject *__pyx_codeobj__19;
  PyObject *__pyx_codeobj__22;
  PyObject *__pyx_codeobj__25;
  PyObject *__pyx_codeobj__30;
  PyObject *__pyx_codeobj__32;
  PyObject *__pyx_codeobj__34;
  PyObject *__pyx_codeobj__37;
  PyObject *__pyx_codeobj__38;
  PyObject *__pyx_codeobj__39;
  PyObject *__pyx_codeobj__40;
  PyObject *__pyx_codeobj__41;
  PyObject *__pyx_codeobj__53;
  PyObject *__pyx_codeobj__55;
  PyObject *__pyx_codeobj__57;
  PyObject *__pyx_codeobj__59;
  PyObject *__pyx_codeobj__63;
  PyObject *__pyx_codeobj__68;
  PyObject *__pyx_codeobj__74;
  PyObject *__pyx_codeobj__76;
  PyObject *__pyx_codeobj__89;
  PyObject *__pyx_codeobj__93;
  PyObject *__pyx_codeobj__95;
  PyObject *__pyx_codeobj__97;
  PyObject *__pyx_codeobj__99;
  PyObject *__pyx_codeobj__101;
  PyObject *__pyx_codeobj__103;
  PyObject *__pyx_codeobj__105;
  PyObject *__pyx_codeobj__107;
} __pyx_mstate;

#ifdef __cplusplus
namespace {
  extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate(o) ((__pyx_mstate *)__Pyx_PyModule_GetState(o))

#define __pyx_mstate_global (__pyx_mstate(PyState_FindModule(&__pyx_moduledef)))

#define __pyx_m (PyState_FindModule(&__pyx_moduledef))
#endif
/* #### Code section: module_state_clear ### */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_m_clear(PyObject *m) {
  __pyx_mstate *clear_module_state = __pyx_mstate(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_6pubsub_PubSub);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_dtype);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flatiter);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_broadcast);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ndarray);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_generic);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_number);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_integer);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_inexact);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_floating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_flexible);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_character);
  Py_CLEAR(clear_module_state->__pyx_ptype_5numpy_ufunc);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_5clock_Clock);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network);
  Py_CLEAR(clear_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network);
  Py_CLEAR(clear_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network);
  Py_CLEAR(clear_module_state->__pyx_kp_u_);
  Py_CLEAR(clear_module_state->__pyx_kp_u_0_0005);
  Py_CLEAR(clear_module_state->__pyx_kp_u_1_01);
  Py_CLEAR(clear_module_state->__pyx_kp_u_1e);
  Py_CLEAR(clear_module_state->__pyx_n_s_API_CALL_TIMEOUT);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Aborting);
  Py_CLEAR(clear_module_state->__pyx_n_s_Any);
  Py_CLEAR(clear_module_state->__pyx_n_s_AssertionError);
  Py_CLEAR(clear_module_state->__pyx_n_s_AsyncIterable);
  Py_CLEAR(clear_module_state->__pyx_kp_s_AsyncIterable_Dict_str_Any);
  Py_CLEAR(clear_module_state->__pyx_n_s_BITTREX_API_ENDPOINT);
  Py_CLEAR(clear_module_state->__pyx_n_u_BTC);
  Py_CLEAR(clear_module_state->__pyx_kp_u_BTC_USD);
  Py_CLEAR(clear_module_state->__pyx_kp_u_BTC_USDT);
  Py_CLEAR(clear_module_state->__pyx_n_s_BUY);
  Py_CLEAR(clear_module_state->__pyx_n_u_BUY);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexAPIOrderBookDataSource);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexAuth);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchangeTransactionTracke);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchangeTransactionTracke_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchangeTransactionTracke_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange___reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange___setstate_cytho);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange__api_request);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange__format_trading);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange__http_client);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange__iter_user_strea);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange__process_api_clo);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange__status_polling);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange__stop_network);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange__trading_rules_p);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange__update_balances);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange__update_order_st);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange__update_trading);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange__user_stream_eve);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_buy);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_cancel);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_cancel_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_check_network);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_execute_buy);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_execute_cancel);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_execute_sell);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_get_active_excha);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_get_fee);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_get_order_book);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_get_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_list_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_logger);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_place_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_restore_tracking);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_sell);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_start_network);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_start_tracking_o);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_stop_network);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexExchange_supported_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexInFlightOrder);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexOrderBookTracker);
  Py_CLEAR(clear_module_state->__pyx_n_s_BittrexUserStreamTracker);
  Py_CLEAR(clear_module_state->__pyx_n_s_BuyOrderCompleted);
  Py_CLEAR(clear_module_state->__pyx_n_s_BuyOrderCompletedEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_BuyOrderCreated);
  Py_CLEAR(clear_module_state->__pyx_n_s_BuyOrderCreatedEvent);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Buy_order_amount);
  Py_CLEAR(clear_module_state->__pyx_n_u_CANCELLED);
  Py_CLEAR(clear_module_state->__pyx_kp_u_CELO);
  Py_CLEAR(clear_module_state->__pyx_kp_u_CGLD);
  Py_CLEAR(clear_module_state->__pyx_n_u_CLOSED);
  Py_CLEAR(clear_module_state->__pyx_n_s_CONNECTED);
  Py_CLEAR(clear_module_state->__pyx_n_s_CancellationResult);
  Py_CLEAR(clear_module_state->__pyx_n_s_CancelledError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Check_API_key_and_network_conne);
  Py_CLEAR(clear_module_state->__pyx_n_s_ClientSession);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Could_not_fetch_updates_for_the);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Could_not_fetch_updates_from_Bit);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Could_not_fetch_updates_from_Bit_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Created);
  Py_CLEAR(clear_module_state->__pyx_n_u_DELETE);
  Py_CLEAR(clear_module_state->__pyx_n_s_Decimal);
  Py_CLEAR(clear_module_state->__pyx_n_s_Dict);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Dict_str_Any);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Dict_str_any);
  Py_CLEAR(clear_module_state->__pyx_n_u_ETH);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ETH_BTC);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_fetching_response_from);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_fetching_status_update_for);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_parsing_the_trading_pair_r);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_submitting_buy);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Error_submitting_sell);
  Py_CLEAR(clear_module_state->__pyx_n_s_Event);
  Py_CLEAR(clear_module_state->__pyx_n_s_ExchangeBase);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Exchange_order_ID_never_updated);
  Py_CLEAR(clear_module_state->__pyx_n_u_FAILURE);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Failed_to_cancel_order);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Failed_to_cancel_order_on_Bittre);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Failed_to_cancel_the_order);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Failed_to_submit_buy_order_to_Bi);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Failed_to_submit_sell_order_to_B);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Filled);
  Py_CLEAR(clear_module_state->__pyx_n_u_GET);
  Py_CLEAR(clear_module_state->__pyx_n_u_GOOD_TIL_CANCELLED);
  Py_CLEAR(clear_module_state->__pyx_kp_u_HTTP_Status_Code);
  Py_CLEAR(clear_module_state->__pyx_n_s_HummingbotLogger);
  Py_CLEAR(clear_module_state->__pyx_n_s_IOError);
  Py_CLEAR(clear_module_state->__pyx_n_s_ImportError);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Invalid_OrderType);
  Py_CLEAR(clear_module_state->__pyx_n_s_LIMIT);
  Py_CLEAR(clear_module_state->__pyx_n_u_LIMIT);
  Py_CLEAR(clear_module_state->__pyx_n_s_LIMIT_MAKER);
  Py_CLEAR(clear_module_state->__pyx_n_s_LimitOrder);
  Py_CLEAR(clear_module_state->__pyx_n_s_List);
  Py_CLEAR(clear_module_state->__pyx_kp_s_List_Any);
  Py_CLEAR(clear_module_state->__pyx_kp_s_List_CancellationResult);
  Py_CLEAR(clear_module_state->__pyx_kp_s_List_TradingRule);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET_RECEIVED_ASSET_EVENT_TAG);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT);
  Py_CLEAR(clear_module_state->__pyx_n_s_MARKET_TRANSACTION_FAILURE_EVENT);
  Py_CLEAR(clear_module_state->__pyx_n_s_MarketEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_MarketOrderFailureEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_MarketTransactionFailureEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_NOT_CONNECTED);
  Py_CLEAR(clear_module_state->__pyx_n_u_NOT_FOUND);
  Py_CLEAR(clear_module_state->__pyx_n_s_NaN);
  Py_CLEAR(clear_module_state->__pyx_n_u_NaN);
  Py_CLEAR(clear_module_state->__pyx_n_s_NetworkStatus);
  Py_CLEAR(clear_module_state->__pyx_kp_u_No_exchange_ID_found_for);
  Py_CLEAR(clear_module_state->__pyx_kp_u_No_order_book_exists_for);
  Py_CLEAR(clear_module_state->__pyx_kp_u_None);
  Py_CLEAR(clear_module_state->__pyx_n_u_OFFLINE);
  Py_CLEAR(clear_module_state->__pyx_n_s_ORDER_NOT_EXIST_CONFIRMATION_COU);
  Py_CLEAR(clear_module_state->__pyx_n_u_ORDER_NOT_OPEN);
  Py_CLEAR(clear_module_state->__pyx_n_s_Optional);
  Py_CLEAR(clear_module_state->__pyx_kp_s_Optional_Decimal);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderBook);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderCancelled);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderCancelledEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderFailure);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderFilled);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderFilledEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_OrderType);
  Py_CLEAR(clear_module_state->__pyx_n_u_POST);
  Py_CLEAR(clear_module_state->__pyx_n_u_POST_ONLY_GOOD_TIL_CANCELLED);
  Py_CLEAR(clear_module_state->__pyx_n_s_ReceivedAsset);
  Py_CLEAR(clear_module_state->__pyx_n_s_SELL);
  Py_CLEAR(clear_module_state->__pyx_n_u_SELL);
  Py_CLEAR(clear_module_state->__pyx_n_s_SellOrderCompleted);
  Py_CLEAR(clear_module_state->__pyx_n_s_SellOrderCompletedEvent);
  Py_CLEAR(clear_module_state->__pyx_n_s_SellOrderCreated);
  Py_CLEAR(clear_module_state->__pyx_n_s_SellOrderCreatedEvent);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Sell_order_amount);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Skipping);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Successfully_cancelled_order);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_BUY_order);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_SELL_order);
  Py_CLEAR(clear_module_state->__pyx_kp_u_The_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_TimeoutError);
  Py_CLEAR(clear_module_state->__pyx_n_s_TradeFee);
  Py_CLEAR(clear_module_state->__pyx_n_s_TradeType);
  Py_CLEAR(clear_module_state->__pyx_n_s_TransactionFailure);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Tried_to_cancel_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_TypeError);
  Py_CLEAR(clear_module_state->__pyx_n_s_UPDATE_ORDERS_INTERVAL);
  Py_CLEAR(clear_module_state->__pyx_n_u_USD);
  Py_CLEAR(clear_module_state->__pyx_n_u_USDT);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unexpected_error_cancelling_orde);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unexpected_error_in_user_stream);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unexpected_error_while_fetching);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unexpected_error_while_polling_u);
  Py_CLEAR(clear_module_state->__pyx_kp_u_Unknown_error_Retrying_after_1_s);
  Py_CLEAR(clear_module_state->__pyx_n_s_ValueError);
  Py_CLEAR(clear_module_state->__pyx_kp_u__10);
  Py_CLEAR(clear_module_state->__pyx_n_s__108);
  Py_CLEAR(clear_module_state->__pyx_kp_u__11);
  Py_CLEAR(clear_module_state->__pyx_kp_u__12);
  Py_CLEAR(clear_module_state->__pyx_kp_u__21);
  Py_CLEAR(clear_module_state->__pyx_n_s__49);
  Py_CLEAR(clear_module_state->__pyx_kp_u__9);
  Py_CLEAR(clear_module_state->__pyx_n_u_account_balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_account_balances);
  Py_CLEAR(clear_module_state->__pyx_n_s_account_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_aenter);
  Py_CLEAR(clear_module_state->__pyx_n_s_aexit);
  Py_CLEAR(clear_module_state->__pyx_n_s_aiohttp);
  Py_CLEAR(clear_module_state->__pyx_kp_s_aiohttp_ClientSession);
  Py_CLEAR(clear_module_state->__pyx_n_s_aiter);
  Py_CLEAR(clear_module_state->__pyx_n_s_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_anext);
  Py_CLEAR(clear_module_state->__pyx_n_s_api_request);
  Py_CLEAR(clear_module_state->__pyx_n_s_api_response);
  Py_CLEAR(clear_module_state->__pyx_n_s_api_responses);
  Py_CLEAR(clear_module_state->__pyx_n_s_app_warning_msg);
  Py_CLEAR(clear_module_state->__pyx_n_s_args);
  Py_CLEAR(clear_module_state->__pyx_n_s_asset_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_asset_names_to_remove);
  Py_CLEAR(clear_module_state->__pyx_n_s_async_timeout);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_coroutines);
  Py_CLEAR(clear_module_state->__pyx_n_s_asyncio_tasks);
  Py_CLEAR(clear_module_state->__pyx_n_s_auth_dict);
  Py_CLEAR(clear_module_state->__pyx_n_u_available);
  Py_CLEAR(clear_module_state->__pyx_n_s_available_balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_await);
  Py_CLEAR(clear_module_state->__pyx_n_u_balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_balance_delta);
  Py_CLEAR(clear_module_state->__pyx_n_s_balance_entry);
  Py_CLEAR(clear_module_state->__pyx_kp_u_balances);
  Py_CLEAR(clear_module_state->__pyx_n_s_balances_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_asset);
  Py_CLEAR(clear_module_state->__pyx_n_s_base_currency);
  Py_CLEAR(clear_module_state->__pyx_n_u_bittrex);
  Py_CLEAR(clear_module_state->__pyx_n_s_bittrex_api_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_bittrex_auth);
  Py_CLEAR(clear_module_state->__pyx_n_s_bittrex_secret_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_bm_logger);
  Py_CLEAR(clear_module_state->__pyx_n_s_body);
  Py_CLEAR(clear_module_state->__pyx_n_u_body);
  Py_CLEAR(clear_module_state->__pyx_n_s_bool);
  Py_CLEAR(clear_module_state->__pyx_n_s_btc_usd_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_btc_usdt_price);
  Py_CLEAR(clear_module_state->__pyx_kp_u_buy);
  Py_CLEAR(clear_module_state->__pyx_n_s_buy_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_buy_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_cancel);
  Py_CLEAR(clear_module_state->__pyx_n_s_cancel_all);
  Py_CLEAR(clear_module_state->__pyx_n_s_cancel_result);
  Py_CLEAR(clear_module_state->__pyx_n_u_cancelled);
  Py_CLEAR(clear_module_state->__pyx_n_s_check_network);
  Py_CLEAR(clear_module_state->__pyx_n_s_client);
  Py_CLEAR(clear_module_state->__pyx_n_s_client_order_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_cline_in_traceback);
  Py_CLEAR(clear_module_state->__pyx_n_s_close);
  Py_CLEAR(clear_module_state->__pyx_n_s_cls);
  Py_CLEAR(clear_module_state->__pyx_n_u_commission);
  Py_CLEAR(clear_module_state->__pyx_n_s_content);
  Py_CLEAR(clear_module_state->__pyx_n_u_content);
  Py_CLEAR(clear_module_state->__pyx_n_u_currencySymbol);
  Py_CLEAR(clear_module_state->__pyx_n_s_current_tick);
  Py_CLEAR(clear_module_state->__pyx_n_s_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_decimal);
  Py_CLEAR(clear_module_state->__pyx_n_s_decimal_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_decimal_price);
  Py_CLEAR(clear_module_state->__pyx_n_u_delta);
  Py_CLEAR(clear_module_state->__pyx_n_s_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_difference);
  Py_CLEAR(clear_module_state->__pyx_n_u_direction);
  Py_CLEAR(clear_module_state->__pyx_kp_u_disable);
  Py_CLEAR(clear_module_state->__pyx_kp_u_does_not_exist_on_Bittrex_No_ca);
  Py_CLEAR(clear_module_state->__pyx_n_u_done);
  Py_CLEAR(clear_module_state->__pyx_kp_u_enable);
  Py_CLEAR(clear_module_state->__pyx_n_s_err);
  Py_CLEAR(clear_module_state->__pyx_n_s_error);
  Py_CLEAR(clear_module_state->__pyx_n_s_estimate_fee);
  Py_CLEAR(clear_module_state->__pyx_n_s_eth_btc_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_event_type);
  Py_CLEAR(clear_module_state->__pyx_n_u_event_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_exc_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_exchange_order_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_execute_buy);
  Py_CLEAR(clear_module_state->__pyx_n_s_execute_cancel);
  Py_CLEAR(clear_module_state->__pyx_n_s_execute_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_execute_sell);
  Py_CLEAR(clear_module_state->__pyx_n_s_executed_amount_base);
  Py_CLEAR(clear_module_state->__pyx_n_s_executed_amount_diff);
  Py_CLEAR(clear_module_state->__pyx_n_s_executed_amount_quote);
  Py_CLEAR(clear_module_state->__pyx_n_s_executed_price);
  Py_CLEAR(clear_module_state->__pyx_n_u_f);
  Py_CLEAR(clear_module_state->__pyx_n_s_failed_cancellation);
  Py_CLEAR(clear_module_state->__pyx_n_s_fee_asset);
  Py_CLEAR(clear_module_state->__pyx_n_s_fee_paid);
  Py_CLEAR(clear_module_state->__pyx_n_u_fillQuantity);
  Py_CLEAR(clear_module_state->__pyx_n_s_float);
  Py_CLEAR(clear_module_state->__pyx_kp_u_for);
  Py_CLEAR(clear_module_state->__pyx_n_s_format_trading_rules);
  Py_CLEAR(clear_module_state->__pyx_n_s_from_json);
  Py_CLEAR(clear_module_state->__pyx_kp_u_gc);
  Py_CLEAR(clear_module_state->__pyx_n_s_generate_auth_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_genexpr);
  Py_CLEAR(clear_module_state->__pyx_n_s_get);
  Py_CLEAR(clear_module_state->__pyx_n_s_getLogger);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_active_exchange_markets);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_event_loop);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_exchange_order_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_fee);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_order_book);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_get_tracking_nonce);
  Py_CLEAR(clear_module_state->__pyx_n_s_getstate);
  Py_CLEAR(clear_module_state->__pyx_kp_u_has_been_cancelled_according_to);
  Py_CLEAR(clear_module_state->__pyx_kp_u_has_been_cancelled_according_to_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_has_completed_according_to_Bitt);
  Py_CLEAR(clear_module_state->__pyx_kp_u_has_completed_according_to_Orde);
  Py_CLEAR(clear_module_state->__pyx_kp_u_has_completed_according_to_orde);
  Py_CLEAR(clear_module_state->__pyx_n_s_headers);
  Py_CLEAR(clear_module_state->__pyx_n_u_headers);
  Py_CLEAR(clear_module_state->__pyx_n_s_http_client);
  Py_CLEAR(clear_module_state->__pyx_n_s_http_method);
  Py_CLEAR(clear_module_state->__pyx_kp_u_https_api_bittrex_com_v3);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_connector_exchange_ba);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_connector_exchange_bi);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_connector_exchange_bi_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_connector_exchange_bi_3);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_connector_exchange_bi_4);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_connector_exchange_bi_5);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_connector_exchange_bi_6);
  Py_CLEAR(clear_module_state->__pyx_kp_s_hummingbot_connector_exchange_bi_7);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_data_type_cancel);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_data_type_limit);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_event_events);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_network_iterator);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_utils_async_util);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_utils_estimate_f);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_core_utils_tracking_n);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_logger);
  Py_CLEAR(clear_module_state->__pyx_n_s_hummingbot_market_market_base);
  Py_CLEAR(clear_module_state->__pyx_n_u_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_import);
  Py_CLEAR(clear_module_state->__pyx_n_s_incomplete_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_info);
  Py_CLEAR(clear_module_state->__pyx_n_s_init);
  Py_CLEAR(clear_module_state->__pyx_n_s_initializing);
  Py_CLEAR(clear_module_state->__pyx_n_s_inspect);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_buy);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_coroutine);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_done);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_lower_than_the_minimum_order);
  Py_CLEAR(clear_module_state->__pyx_kp_u_is_not_tracked);
  Py_CLEAR(clear_module_state->__pyx_n_s_is_set);
  Py_CLEAR(clear_module_state->__pyx_kp_u_isenabled);
  Py_CLEAR(clear_module_state->__pyx_n_s_item);
  Py_CLEAR(clear_module_state->__pyx_n_s_items);
  Py_CLEAR(clear_module_state->__pyx_n_s_iter_user_stream_queue);
  Py_CLEAR(clear_module_state->__pyx_n_s_json);
  Py_CLEAR(clear_module_state->__pyx_n_s_key);
  Py_CLEAR(clear_module_state->__pyx_n_s_keys);
  Py_CLEAR(clear_module_state->__pyx_n_s_kwargs);
  Py_CLEAR(clear_module_state->__pyx_n_u_lastTradeRate);
  Py_CLEAR(clear_module_state->__pyx_n_s_last_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_last_tick);
  Py_CLEAR(clear_module_state->__pyx_n_s_last_trade_rate);
  Py_CLEAR(clear_module_state->__pyx_n_u_limit);
  Py_CLEAR(clear_module_state->__pyx_n_s_list_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_local_asset_names);
  Py_CLEAR(clear_module_state->__pyx_n_s_logger);
  Py_CLEAR(clear_module_state->__pyx_n_s_logging);
  Py_CLEAR(clear_module_state->__pyx_n_s_lower);
  Py_CLEAR(clear_module_state->__pyx_n_s_main);
  Py_CLEAR(clear_module_state->__pyx_n_s_market);
  Py_CLEAR(clear_module_state->__pyx_n_u_marketSymbol);
  Py_CLEAR(clear_module_state->__pyx_n_s_market_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_market_list);
  Py_CLEAR(clear_module_state->__pyx_n_s_market_path_url);
  Py_CLEAR(clear_module_state->__pyx_kp_u_markets);
  Py_CLEAR(clear_module_state->__pyx_kp_u_markets_tickers);
  Py_CLEAR(clear_module_state->__pyx_n_u_minTradeSize);
  Py_CLEAR(clear_module_state->__pyx_n_s_min_base_amount_increment);
  Py_CLEAR(clear_module_state->__pyx_n_s_min_btc_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_min_order_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_min_order_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_min_price_increment);
  Py_CLEAR(clear_module_state->__pyx_n_s_min_quote_amount_increment);
  Py_CLEAR(clear_module_state->__pyx_n_s_min_trade_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_name);
  Py_CLEAR(clear_module_state->__pyx_n_s_name_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_network);
  Py_CLEAR(clear_module_state->__pyx_n_s_new_confirmed_amount);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy_core_multiarray_failed_to);
  Py_CLEAR(clear_module_state->__pyx_kp_u_numpy_core_umath_failed_to_impor);
  Py_CLEAR(clear_module_state->__pyx_n_s_o);
  Py_CLEAR(clear_module_state->__pyx_kp_u_of_the);
  Py_CLEAR(clear_module_state->__pyx_n_s_oid);
  Py_CLEAR(clear_module_state->__pyx_kp_u_on_Bittrex_Check_API_key_and_ne);
  Py_CLEAR(clear_module_state->__pyx_kp_u_on_order_status_update_Order_no);
  Py_CLEAR(clear_module_state->__pyx_n_s_open_orders);
  Py_CLEAR(clear_module_state->__pyx_kp_u_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_2);
  Py_CLEAR(clear_module_state->__pyx_n_u_order_2);
  Py_CLEAR(clear_module_state->__pyx_n_u_order_book_initialized);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_books);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_id_set);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_side);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_status);
  Py_CLEAR(clear_module_state->__pyx_kp_u_order_to_Bittrex_for);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_type_description);
  Py_CLEAR(clear_module_state->__pyx_n_s_order_type_str);
  Py_CLEAR(clear_module_state->__pyx_kp_u_orders);
  Py_CLEAR(clear_module_state->__pyx_kp_u_orders_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_orders_open);
  Py_CLEAR(clear_module_state->__pyx_kp_u_out_of);
  Py_CLEAR(clear_module_state->__pyx_n_s_owner);
  Py_CLEAR(clear_module_state->__pyx_n_s_pandas);
  Py_CLEAR(clear_module_state->__pyx_n_s_params);
  Py_CLEAR(clear_module_state->__pyx_n_s_path_url);
  Py_CLEAR(clear_module_state->__pyx_n_s_pd);
  Py_CLEAR(clear_module_state->__pyx_kp_s_pd_DataFrame);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ping);
  Py_CLEAR(clear_module_state->__pyx_n_s_place_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_poll_interval);
  Py_CLEAR(clear_module_state->__pyx_n_s_precision);
  Py_CLEAR(clear_module_state->__pyx_n_u_precision);
  Py_CLEAR(clear_module_state->__pyx_n_s_price);
  Py_CLEAR(clear_module_state->__pyx_n_s_process_api_closed);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_state);
  Py_CLEAR(clear_module_state->__pyx_n_s_pyx_vtable);
  Py_CLEAR(clear_module_state->__pyx_n_u_quantity);
  Py_CLEAR(clear_module_state->__pyx_n_u_quoteCurrencySymbol);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_amount);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_asset);
  Py_CLEAR(clear_module_state->__pyx_n_s_quote_currency);
  Py_CLEAR(clear_module_state->__pyx_n_s_ready);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_reduce_ex);
  Py_CLEAR(clear_module_state->__pyx_n_s_remaining_size);
  Py_CLEAR(clear_module_state->__pyx_n_s_remote_asset_names);
  Py_CLEAR(clear_module_state->__pyx_n_s_replace);
  Py_CLEAR(clear_module_state->__pyx_n_s_request);
  Py_CLEAR(clear_module_state->__pyx_n_s_response);
  Py_CLEAR(clear_module_state->__pyx_n_s_restore_tracking_states);
  Py_CLEAR(clear_module_state->__pyx_n_s_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_result_list);
  Py_CLEAR(clear_module_state->__pyx_n_s_return);
  Py_CLEAR(clear_module_state->__pyx_n_s_return_exceptions);
  Py_CLEAR(clear_module_state->__pyx_n_s_retval);
  Py_CLEAR(clear_module_state->__pyx_n_s_s_decimal_0);
  Py_CLEAR(clear_module_state->__pyx_n_s_s_decimal_NaN);
  Py_CLEAR(clear_module_state->__pyx_n_s_safe_ensure_future);
  Py_CLEAR(clear_module_state->__pyx_n_s_safe_gather);
  Py_CLEAR(clear_module_state->__pyx_n_s_saved_states);
  Py_CLEAR(clear_module_state->__pyx_n_s_self);
  Py_CLEAR(clear_module_state->__pyx_kp_s_self__events_cannot_be_converted);
  Py_CLEAR(clear_module_state->__pyx_kp_u_sell);
  Py_CLEAR(clear_module_state->__pyx_n_s_sell_2);
  Py_CLEAR(clear_module_state->__pyx_kp_u_sell_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_send);
  Py_CLEAR(clear_module_state->__pyx_n_s_set);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate);
  Py_CLEAR(clear_module_state->__pyx_n_s_setstate_cython);
  Py_CLEAR(clear_module_state->__pyx_n_s_sleep);
  Py_CLEAR(clear_module_state->__pyx_n_s_spec);
  Py_CLEAR(clear_module_state->__pyx_n_s_start);
  Py_CLEAR(clear_module_state->__pyx_n_s_start_network);
  Py_CLEAR(clear_module_state->__pyx_n_s_start_tracking_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_state_result);
  Py_CLEAR(clear_module_state->__pyx_n_s_status);
  Py_CLEAR(clear_module_state->__pyx_n_u_status);
  Py_CLEAR(clear_module_state->__pyx_n_s_status_dict);
  Py_CLEAR(clear_module_state->__pyx_n_s_status_polling_loop);
  Py_CLEAR(clear_module_state->__pyx_n_s_stop);
  Py_CLEAR(clear_module_state->__pyx_n_s_stop_network);
  Py_CLEAR(clear_module_state->__pyx_n_s_stop_network_2);
  Py_CLEAR(clear_module_state->__pyx_n_s_str);
  Py_CLEAR(clear_module_state->__pyx_n_s_stream_message);
  Py_CLEAR(clear_module_state->__pyx_kp_s_stringsource);
  Py_CLEAR(clear_module_state->__pyx_n_s_subaccount_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_successful_cancellation);
  Py_CLEAR(clear_module_state->__pyx_n_s_super);
  Py_CLEAR(clear_module_state->__pyx_n_s_supported_order_types);
  Py_CLEAR(clear_module_state->__pyx_n_u_symbol);
  Py_CLEAR(clear_module_state->__pyx_n_s_tasks);
  Py_CLEAR(clear_module_state->__pyx_n_s_test);
  Py_CLEAR(clear_module_state->__pyx_n_s_throw);
  Py_CLEAR(clear_module_state->__pyx_n_s_ticker_data);
  Py_CLEAR(clear_module_state->__pyx_n_s_ticker_list);
  Py_CLEAR(clear_module_state->__pyx_n_s_ticker_path_url);
  Py_CLEAR(clear_module_state->__pyx_n_u_timeInForce);
  Py_CLEAR(clear_module_state->__pyx_n_s_timeout);
  Py_CLEAR(clear_module_state->__pyx_n_s_timeout_seconds);
  Py_CLEAR(clear_module_state->__pyx_n_s_to_json);
  Py_CLEAR(clear_module_state->__pyx_n_s_to_limit_order);
  Py_CLEAR(clear_module_state->__pyx_n_u_total);
  Py_CLEAR(clear_module_state->__pyx_n_s_total_balance);
  Py_CLEAR(clear_module_state->__pyx_n_s_tracked_order);
  Py_CLEAR(clear_module_state->__pyx_n_s_tracked_orders);
  Py_CLEAR(clear_module_state->__pyx_n_s_trade_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_trading_pair);
  Py_CLEAR(clear_module_state->__pyx_n_s_trading_pairs);
  Py_CLEAR(clear_module_state->__pyx_n_s_trading_required);
  Py_CLEAR(clear_module_state->__pyx_n_s_trading_rule);
  Py_CLEAR(clear_module_state->__pyx_n_u_trading_rule_initialized);
  Py_CLEAR(clear_module_state->__pyx_n_s_trading_rules_list);
  Py_CLEAR(clear_module_state->__pyx_n_s_trading_rules_polling_loop);
  Py_CLEAR(clear_module_state->__pyx_n_u_type);
  Py_CLEAR(clear_module_state->__pyx_n_s_typing);
  Py_CLEAR(clear_module_state->__pyx_n_s_update);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_balances);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_exchange_order_id);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_order_status);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_order_status_locals_gene);
  Py_CLEAR(clear_module_state->__pyx_n_s_update_trading_rules);
  Py_CLEAR(clear_module_state->__pyx_n_s_url);
  Py_CLEAR(clear_module_state->__pyx_n_s_user_stream);
  Py_CLEAR(clear_module_state->__pyx_n_s_user_stream_event_listener);
  Py_CLEAR(clear_module_state->__pyx_n_s_value);
  Py_CLEAR(clear_module_state->__pyx_n_s_values);
  Py_CLEAR(clear_module_state->__pyx_n_s_wait);
  Py_CLEAR(clear_module_state->__pyx_n_s_warning);
  Py_CLEAR(clear_module_state->__pyx_kp_u_which_is_already_closed_Order_d);
  Py_CLEAR(clear_module_state->__pyx_kp_u_ws);
  Py_CLEAR(clear_module_state->__pyx_float_0_0);
  Py_CLEAR(clear_module_state->__pyx_float_0_5);
  Py_CLEAR(clear_module_state->__pyx_float_1_0);
  Py_CLEAR(clear_module_state->__pyx_float_5_0);
  Py_CLEAR(clear_module_state->__pyx_float_10_0);
  Py_CLEAR(clear_module_state->__pyx_int_0);
  Py_CLEAR(clear_module_state->__pyx_int_1);
  Py_CLEAR(clear_module_state->__pyx_int_3);
  Py_CLEAR(clear_module_state->__pyx_int_200);
  Py_CLEAR(clear_module_state->__pyx_int_201);
  Py_CLEAR(clear_module_state->__pyx_int_300);
  Py_CLEAR(clear_module_state->__pyx_k__24);
  Py_CLEAR(clear_module_state->__pyx_k__26);
  Py_CLEAR(clear_module_state->__pyx_k__27);
  Py_CLEAR(clear_module_state->__pyx_k__28);
  Py_CLEAR(clear_module_state->__pyx_k__29);
  Py_CLEAR(clear_module_state->__pyx_k__31);
  Py_CLEAR(clear_module_state->__pyx_k__42);
  Py_CLEAR(clear_module_state->__pyx_k__43);
  Py_CLEAR(clear_module_state->__pyx_k__44);
  Py_CLEAR(clear_module_state->__pyx_k__45);
  Py_CLEAR(clear_module_state->__pyx_k__46);
  Py_CLEAR(clear_module_state->__pyx_k__79);
  Py_CLEAR(clear_module_state->__pyx_k__81);
  Py_CLEAR(clear_module_state->__pyx_tuple__4);
  Py_CLEAR(clear_module_state->__pyx_tuple__6);
  Py_CLEAR(clear_module_state->__pyx_tuple__14);
  Py_CLEAR(clear_module_state->__pyx_tuple__16);
  Py_CLEAR(clear_module_state->__pyx_tuple__18);
  Py_CLEAR(clear_module_state->__pyx_tuple__20);
  Py_CLEAR(clear_module_state->__pyx_tuple__23);
  Py_CLEAR(clear_module_state->__pyx_tuple__33);
  Py_CLEAR(clear_module_state->__pyx_tuple__35);
  Py_CLEAR(clear_module_state->__pyx_tuple__36);
  Py_CLEAR(clear_module_state->__pyx_tuple__47);
  Py_CLEAR(clear_module_state->__pyx_tuple__48);
  Py_CLEAR(clear_module_state->__pyx_tuple__50);
  Py_CLEAR(clear_module_state->__pyx_tuple__51);
  Py_CLEAR(clear_module_state->__pyx_tuple__52);
  Py_CLEAR(clear_module_state->__pyx_tuple__54);
  Py_CLEAR(clear_module_state->__pyx_tuple__56);
  Py_CLEAR(clear_module_state->__pyx_tuple__58);
  Py_CLEAR(clear_module_state->__pyx_tuple__60);
  Py_CLEAR(clear_module_state->__pyx_tuple__61);
  Py_CLEAR(clear_module_state->__pyx_tuple__62);
  Py_CLEAR(clear_module_state->__pyx_tuple__64);
  Py_CLEAR(clear_module_state->__pyx_tuple__65);
  Py_CLEAR(clear_module_state->__pyx_tuple__66);
  Py_CLEAR(clear_module_state->__pyx_tuple__67);
  Py_CLEAR(clear_module_state->__pyx_tuple__69);
  Py_CLEAR(clear_module_state->__pyx_tuple__70);
  Py_CLEAR(clear_module_state->__pyx_tuple__71);
  Py_CLEAR(clear_module_state->__pyx_tuple__72);
  Py_CLEAR(clear_module_state->__pyx_tuple__73);
  Py_CLEAR(clear_module_state->__pyx_tuple__75);
  Py_CLEAR(clear_module_state->__pyx_tuple__77);
  Py_CLEAR(clear_module_state->__pyx_tuple__78);
  Py_CLEAR(clear_module_state->__pyx_tuple__80);
  Py_CLEAR(clear_module_state->__pyx_tuple__82);
  Py_CLEAR(clear_module_state->__pyx_tuple__83);
  Py_CLEAR(clear_module_state->__pyx_tuple__84);
  Py_CLEAR(clear_module_state->__pyx_tuple__85);
  Py_CLEAR(clear_module_state->__pyx_tuple__86);
  Py_CLEAR(clear_module_state->__pyx_tuple__87);
  Py_CLEAR(clear_module_state->__pyx_tuple__88);
  Py_CLEAR(clear_module_state->__pyx_tuple__90);
  Py_CLEAR(clear_module_state->__pyx_tuple__91);
  Py_CLEAR(clear_module_state->__pyx_tuple__92);
  Py_CLEAR(clear_module_state->__pyx_tuple__94);
  Py_CLEAR(clear_module_state->__pyx_tuple__96);
  Py_CLEAR(clear_module_state->__pyx_tuple__98);
  Py_CLEAR(clear_module_state->__pyx_codeobj__2);
  Py_CLEAR(clear_module_state->__pyx_codeobj__3);
  Py_CLEAR(clear_module_state->__pyx_codeobj__5);
  Py_CLEAR(clear_module_state->__pyx_codeobj__7);
  Py_CLEAR(clear_module_state->__pyx_codeobj__8);
  Py_CLEAR(clear_module_state->__pyx_tuple__100);
  Py_CLEAR(clear_module_state->__pyx_tuple__102);
  Py_CLEAR(clear_module_state->__pyx_tuple__104);
  Py_CLEAR(clear_module_state->__pyx_tuple__106);
  Py_CLEAR(clear_module_state->__pyx_codeobj__13);
  Py_CLEAR(clear_module_state->__pyx_codeobj__15);
  Py_CLEAR(clear_module_state->__pyx_codeobj__17);
  Py_CLEAR(clear_module_state->__pyx_codeobj__19);
  Py_CLEAR(clear_module_state->__pyx_codeobj__22);
  Py_CLEAR(clear_module_state->__pyx_codeobj__25);
  Py_CLEAR(clear_module_state->__pyx_codeobj__30);
  Py_CLEAR(clear_module_state->__pyx_codeobj__32);
  Py_CLEAR(clear_module_state->__pyx_codeobj__34);
  Py_CLEAR(clear_module_state->__pyx_codeobj__37);
  Py_CLEAR(clear_module_state->__pyx_codeobj__38);
  Py_CLEAR(clear_module_state->__pyx_codeobj__39);
  Py_CLEAR(clear_module_state->__pyx_codeobj__40);
  Py_CLEAR(clear_module_state->__pyx_codeobj__41);
  Py_CLEAR(clear_module_state->__pyx_codeobj__53);
  Py_CLEAR(clear_module_state->__pyx_codeobj__55);
  Py_CLEAR(clear_module_state->__pyx_codeobj__57);
  Py_CLEAR(clear_module_state->__pyx_codeobj__59);
  Py_CLEAR(clear_module_state->__pyx_codeobj__63);
  Py_CLEAR(clear_module_state->__pyx_codeobj__68);
  Py_CLEAR(clear_module_state->__pyx_codeobj__74);
  Py_CLEAR(clear_module_state->__pyx_codeobj__76);
  Py_CLEAR(clear_module_state->__pyx_codeobj__89);
  Py_CLEAR(clear_module_state->__pyx_codeobj__93);
  Py_CLEAR(clear_module_state->__pyx_codeobj__95);
  Py_CLEAR(clear_module_state->__pyx_codeobj__97);
  Py_CLEAR(clear_module_state->__pyx_codeobj__99);
  Py_CLEAR(clear_module_state->__pyx_codeobj__101);
  Py_CLEAR(clear_module_state->__pyx_codeobj__103);
  Py_CLEAR(clear_module_state->__pyx_codeobj__105);
  Py_CLEAR(clear_module_state->__pyx_codeobj__107);
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstate *traverse_module_state = __pyx_mstate(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  Py_VISIT(traverse_module_state->__pyx_empty_tuple);
  Py_VISIT(traverse_module_state->__pyx_empty_bytes);
  Py_VISIT(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_6pubsub_PubSub);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_dtype);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flatiter);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_broadcast);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ndarray);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_generic);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_number);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_integer);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_signedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_unsignedinteger);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_inexact);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_floating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_complexfloating);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_flexible);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_character);
  Py_VISIT(traverse_module_state->__pyx_ptype_5numpy_ufunc);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_5clock_Clock);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network);
  Py_VISIT(traverse_module_state->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network);
  Py_VISIT(traverse_module_state->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network);
  Py_VISIT(traverse_module_state->__pyx_kp_u_);
  Py_VISIT(traverse_module_state->__pyx_kp_u_0_0005);
  Py_VISIT(traverse_module_state->__pyx_kp_u_1_01);
  Py_VISIT(traverse_module_state->__pyx_kp_u_1e);
  Py_VISIT(traverse_module_state->__pyx_n_s_API_CALL_TIMEOUT);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Aborting);
  Py_VISIT(traverse_module_state->__pyx_n_s_Any);
  Py_VISIT(traverse_module_state->__pyx_n_s_AssertionError);
  Py_VISIT(traverse_module_state->__pyx_n_s_AsyncIterable);
  Py_VISIT(traverse_module_state->__pyx_kp_s_AsyncIterable_Dict_str_Any);
  Py_VISIT(traverse_module_state->__pyx_n_s_BITTREX_API_ENDPOINT);
  Py_VISIT(traverse_module_state->__pyx_n_u_BTC);
  Py_VISIT(traverse_module_state->__pyx_kp_u_BTC_USD);
  Py_VISIT(traverse_module_state->__pyx_kp_u_BTC_USDT);
  Py_VISIT(traverse_module_state->__pyx_n_s_BUY);
  Py_VISIT(traverse_module_state->__pyx_n_u_BUY);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexAPIOrderBookDataSource);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexAuth);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchangeTransactionTracke);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchangeTransactionTracke_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchangeTransactionTracke_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange___reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange___setstate_cytho);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange__api_request);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange__format_trading);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange__http_client);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange__iter_user_strea);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange__process_api_clo);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange__status_polling);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange__stop_network);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange__trading_rules_p);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange__update_balances);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange__update_order_st);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange__update_trading);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange__user_stream_eve);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_buy);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_cancel);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_cancel_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_check_network);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_execute_buy);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_execute_cancel);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_execute_sell);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_get_active_excha);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_get_fee);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_get_order_book);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_get_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_list_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_logger);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_place_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_restore_tracking);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_sell);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_start_network);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_start_tracking_o);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_stop_network);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexExchange_supported_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexInFlightOrder);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexOrderBookTracker);
  Py_VISIT(traverse_module_state->__pyx_n_s_BittrexUserStreamTracker);
  Py_VISIT(traverse_module_state->__pyx_n_s_BuyOrderCompleted);
  Py_VISIT(traverse_module_state->__pyx_n_s_BuyOrderCompletedEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_BuyOrderCreated);
  Py_VISIT(traverse_module_state->__pyx_n_s_BuyOrderCreatedEvent);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Buy_order_amount);
  Py_VISIT(traverse_module_state->__pyx_n_u_CANCELLED);
  Py_VISIT(traverse_module_state->__pyx_kp_u_CELO);
  Py_VISIT(traverse_module_state->__pyx_kp_u_CGLD);
  Py_VISIT(traverse_module_state->__pyx_n_u_CLOSED);
  Py_VISIT(traverse_module_state->__pyx_n_s_CONNECTED);
  Py_VISIT(traverse_module_state->__pyx_n_s_CancellationResult);
  Py_VISIT(traverse_module_state->__pyx_n_s_CancelledError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Check_API_key_and_network_conne);
  Py_VISIT(traverse_module_state->__pyx_n_s_ClientSession);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Could_not_fetch_updates_for_the);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Could_not_fetch_updates_from_Bit);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Could_not_fetch_updates_from_Bit_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Created);
  Py_VISIT(traverse_module_state->__pyx_n_u_DELETE);
  Py_VISIT(traverse_module_state->__pyx_n_s_Decimal);
  Py_VISIT(traverse_module_state->__pyx_n_s_Dict);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Dict_str_Any);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Dict_str_any);
  Py_VISIT(traverse_module_state->__pyx_n_u_ETH);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ETH_BTC);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_fetching_response_from);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_fetching_status_update_for);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_parsing_the_trading_pair_r);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_submitting_buy);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Error_submitting_sell);
  Py_VISIT(traverse_module_state->__pyx_n_s_Event);
  Py_VISIT(traverse_module_state->__pyx_n_s_ExchangeBase);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Exchange_order_ID_never_updated);
  Py_VISIT(traverse_module_state->__pyx_n_u_FAILURE);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Failed_to_cancel_order);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Failed_to_cancel_order_on_Bittre);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Failed_to_cancel_the_order);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Failed_to_submit_buy_order_to_Bi);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Failed_to_submit_sell_order_to_B);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Filled);
  Py_VISIT(traverse_module_state->__pyx_n_u_GET);
  Py_VISIT(traverse_module_state->__pyx_n_u_GOOD_TIL_CANCELLED);
  Py_VISIT(traverse_module_state->__pyx_kp_u_HTTP_Status_Code);
  Py_VISIT(traverse_module_state->__pyx_n_s_HummingbotLogger);
  Py_VISIT(traverse_module_state->__pyx_n_s_IOError);
  Py_VISIT(traverse_module_state->__pyx_n_s_ImportError);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Invalid_OrderType);
  Py_VISIT(traverse_module_state->__pyx_n_s_LIMIT);
  Py_VISIT(traverse_module_state->__pyx_n_u_LIMIT);
  Py_VISIT(traverse_module_state->__pyx_n_s_LIMIT_MAKER);
  Py_VISIT(traverse_module_state->__pyx_n_s_LimitOrder);
  Py_VISIT(traverse_module_state->__pyx_n_s_List);
  Py_VISIT(traverse_module_state->__pyx_kp_s_List_Any);
  Py_VISIT(traverse_module_state->__pyx_kp_s_List_CancellationResult);
  Py_VISIT(traverse_module_state->__pyx_kp_s_List_TradingRule);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET_RECEIVED_ASSET_EVENT_TAG);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT);
  Py_VISIT(traverse_module_state->__pyx_n_s_MARKET_TRANSACTION_FAILURE_EVENT);
  Py_VISIT(traverse_module_state->__pyx_n_s_MarketEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_MarketOrderFailureEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_MarketTransactionFailureEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_NOT_CONNECTED);
  Py_VISIT(traverse_module_state->__pyx_n_u_NOT_FOUND);
  Py_VISIT(traverse_module_state->__pyx_n_s_NaN);
  Py_VISIT(traverse_module_state->__pyx_n_u_NaN);
  Py_VISIT(traverse_module_state->__pyx_n_s_NetworkStatus);
  Py_VISIT(traverse_module_state->__pyx_kp_u_No_exchange_ID_found_for);
  Py_VISIT(traverse_module_state->__pyx_kp_u_No_order_book_exists_for);
  Py_VISIT(traverse_module_state->__pyx_kp_u_None);
  Py_VISIT(traverse_module_state->__pyx_n_u_OFFLINE);
  Py_VISIT(traverse_module_state->__pyx_n_s_ORDER_NOT_EXIST_CONFIRMATION_COU);
  Py_VISIT(traverse_module_state->__pyx_n_u_ORDER_NOT_OPEN);
  Py_VISIT(traverse_module_state->__pyx_n_s_Optional);
  Py_VISIT(traverse_module_state->__pyx_kp_s_Optional_Decimal);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderBook);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderCancelled);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderCancelledEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderFailure);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderFilled);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderFilledEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_OrderType);
  Py_VISIT(traverse_module_state->__pyx_n_u_POST);
  Py_VISIT(traverse_module_state->__pyx_n_u_POST_ONLY_GOOD_TIL_CANCELLED);
  Py_VISIT(traverse_module_state->__pyx_n_s_ReceivedAsset);
  Py_VISIT(traverse_module_state->__pyx_n_s_SELL);
  Py_VISIT(traverse_module_state->__pyx_n_u_SELL);
  Py_VISIT(traverse_module_state->__pyx_n_s_SellOrderCompleted);
  Py_VISIT(traverse_module_state->__pyx_n_s_SellOrderCompletedEvent);
  Py_VISIT(traverse_module_state->__pyx_n_s_SellOrderCreated);
  Py_VISIT(traverse_module_state->__pyx_n_s_SellOrderCreatedEvent);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Sell_order_amount);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Skipping);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Successfully_cancelled_order);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_BUY_order);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_SELL_order);
  Py_VISIT(traverse_module_state->__pyx_kp_u_The_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_TimeoutError);
  Py_VISIT(traverse_module_state->__pyx_n_s_TradeFee);
  Py_VISIT(traverse_module_state->__pyx_n_s_TradeType);
  Py_VISIT(traverse_module_state->__pyx_n_s_TransactionFailure);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Tried_to_cancel_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_TypeError);
  Py_VISIT(traverse_module_state->__pyx_n_s_UPDATE_ORDERS_INTERVAL);
  Py_VISIT(traverse_module_state->__pyx_n_u_USD);
  Py_VISIT(traverse_module_state->__pyx_n_u_USDT);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unexpected_error_cancelling_orde);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unexpected_error_in_user_stream);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unexpected_error_while_fetching);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unexpected_error_while_polling_u);
  Py_VISIT(traverse_module_state->__pyx_kp_u_Unknown_error_Retrying_after_1_s);
  Py_VISIT(traverse_module_state->__pyx_n_s_ValueError);
  Py_VISIT(traverse_module_state->__pyx_kp_u__10);
  Py_VISIT(traverse_module_state->__pyx_n_s__108);
  Py_VISIT(traverse_module_state->__pyx_kp_u__11);
  Py_VISIT(traverse_module_state->__pyx_kp_u__12);
  Py_VISIT(traverse_module_state->__pyx_kp_u__21);
  Py_VISIT(traverse_module_state->__pyx_n_s__49);
  Py_VISIT(traverse_module_state->__pyx_kp_u__9);
  Py_VISIT(traverse_module_state->__pyx_n_u_account_balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_account_balances);
  Py_VISIT(traverse_module_state->__pyx_n_s_account_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_aenter);
  Py_VISIT(traverse_module_state->__pyx_n_s_aexit);
  Py_VISIT(traverse_module_state->__pyx_n_s_aiohttp);
  Py_VISIT(traverse_module_state->__pyx_kp_s_aiohttp_ClientSession);
  Py_VISIT(traverse_module_state->__pyx_n_s_aiter);
  Py_VISIT(traverse_module_state->__pyx_n_s_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_anext);
  Py_VISIT(traverse_module_state->__pyx_n_s_api_request);
  Py_VISIT(traverse_module_state->__pyx_n_s_api_response);
  Py_VISIT(traverse_module_state->__pyx_n_s_api_responses);
  Py_VISIT(traverse_module_state->__pyx_n_s_app_warning_msg);
  Py_VISIT(traverse_module_state->__pyx_n_s_args);
  Py_VISIT(traverse_module_state->__pyx_n_s_asset_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_asset_names_to_remove);
  Py_VISIT(traverse_module_state->__pyx_n_s_async_timeout);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_coroutines);
  Py_VISIT(traverse_module_state->__pyx_n_s_asyncio_tasks);
  Py_VISIT(traverse_module_state->__pyx_n_s_auth_dict);
  Py_VISIT(traverse_module_state->__pyx_n_u_available);
  Py_VISIT(traverse_module_state->__pyx_n_s_available_balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_await);
  Py_VISIT(traverse_module_state->__pyx_n_u_balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_balance_delta);
  Py_VISIT(traverse_module_state->__pyx_n_s_balance_entry);
  Py_VISIT(traverse_module_state->__pyx_kp_u_balances);
  Py_VISIT(traverse_module_state->__pyx_n_s_balances_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_asset);
  Py_VISIT(traverse_module_state->__pyx_n_s_base_currency);
  Py_VISIT(traverse_module_state->__pyx_n_u_bittrex);
  Py_VISIT(traverse_module_state->__pyx_n_s_bittrex_api_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_bittrex_auth);
  Py_VISIT(traverse_module_state->__pyx_n_s_bittrex_secret_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_bm_logger);
  Py_VISIT(traverse_module_state->__pyx_n_s_body);
  Py_VISIT(traverse_module_state->__pyx_n_u_body);
  Py_VISIT(traverse_module_state->__pyx_n_s_bool);
  Py_VISIT(traverse_module_state->__pyx_n_s_btc_usd_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_btc_usdt_price);
  Py_VISIT(traverse_module_state->__pyx_kp_u_buy);
  Py_VISIT(traverse_module_state->__pyx_n_s_buy_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_buy_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_cancel);
  Py_VISIT(traverse_module_state->__pyx_n_s_cancel_all);
  Py_VISIT(traverse_module_state->__pyx_n_s_cancel_result);
  Py_VISIT(traverse_module_state->__pyx_n_u_cancelled);
  Py_VISIT(traverse_module_state->__pyx_n_s_check_network);
  Py_VISIT(traverse_module_state->__pyx_n_s_client);
  Py_VISIT(traverse_module_state->__pyx_n_s_client_order_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_cline_in_traceback);
  Py_VISIT(traverse_module_state->__pyx_n_s_close);
  Py_VISIT(traverse_module_state->__pyx_n_s_cls);
  Py_VISIT(traverse_module_state->__pyx_n_u_commission);
  Py_VISIT(traverse_module_state->__pyx_n_s_content);
  Py_VISIT(traverse_module_state->__pyx_n_u_content);
  Py_VISIT(traverse_module_state->__pyx_n_u_currencySymbol);
  Py_VISIT(traverse_module_state->__pyx_n_s_current_tick);
  Py_VISIT(traverse_module_state->__pyx_n_s_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_decimal);
  Py_VISIT(traverse_module_state->__pyx_n_s_decimal_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_decimal_price);
  Py_VISIT(traverse_module_state->__pyx_n_u_delta);
  Py_VISIT(traverse_module_state->__pyx_n_s_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_difference);
  Py_VISIT(traverse_module_state->__pyx_n_u_direction);
  Py_VISIT(traverse_module_state->__pyx_kp_u_disable);
  Py_VISIT(traverse_module_state->__pyx_kp_u_does_not_exist_on_Bittrex_No_ca);
  Py_VISIT(traverse_module_state->__pyx_n_u_done);
  Py_VISIT(traverse_module_state->__pyx_kp_u_enable);
  Py_VISIT(traverse_module_state->__pyx_n_s_err);
  Py_VISIT(traverse_module_state->__pyx_n_s_error);
  Py_VISIT(traverse_module_state->__pyx_n_s_estimate_fee);
  Py_VISIT(traverse_module_state->__pyx_n_s_eth_btc_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_event_type);
  Py_VISIT(traverse_module_state->__pyx_n_u_event_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_exc_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_exchange_order_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_execute_buy);
  Py_VISIT(traverse_module_state->__pyx_n_s_execute_cancel);
  Py_VISIT(traverse_module_state->__pyx_n_s_execute_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_execute_sell);
  Py_VISIT(traverse_module_state->__pyx_n_s_executed_amount_base);
  Py_VISIT(traverse_module_state->__pyx_n_s_executed_amount_diff);
  Py_VISIT(traverse_module_state->__pyx_n_s_executed_amount_quote);
  Py_VISIT(traverse_module_state->__pyx_n_s_executed_price);
  Py_VISIT(traverse_module_state->__pyx_n_u_f);
  Py_VISIT(traverse_module_state->__pyx_n_s_failed_cancellation);
  Py_VISIT(traverse_module_state->__pyx_n_s_fee_asset);
  Py_VISIT(traverse_module_state->__pyx_n_s_fee_paid);
  Py_VISIT(traverse_module_state->__pyx_n_u_fillQuantity);
  Py_VISIT(traverse_module_state->__pyx_n_s_float);
  Py_VISIT(traverse_module_state->__pyx_kp_u_for);
  Py_VISIT(traverse_module_state->__pyx_n_s_format_trading_rules);
  Py_VISIT(traverse_module_state->__pyx_n_s_from_json);
  Py_VISIT(traverse_module_state->__pyx_kp_u_gc);
  Py_VISIT(traverse_module_state->__pyx_n_s_generate_auth_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_genexpr);
  Py_VISIT(traverse_module_state->__pyx_n_s_get);
  Py_VISIT(traverse_module_state->__pyx_n_s_getLogger);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_active_exchange_markets);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_event_loop);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_exchange_order_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_fee);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_order_book);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_get_tracking_nonce);
  Py_VISIT(traverse_module_state->__pyx_n_s_getstate);
  Py_VISIT(traverse_module_state->__pyx_kp_u_has_been_cancelled_according_to);
  Py_VISIT(traverse_module_state->__pyx_kp_u_has_been_cancelled_according_to_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_has_completed_according_to_Bitt);
  Py_VISIT(traverse_module_state->__pyx_kp_u_has_completed_according_to_Orde);
  Py_VISIT(traverse_module_state->__pyx_kp_u_has_completed_according_to_orde);
  Py_VISIT(traverse_module_state->__pyx_n_s_headers);
  Py_VISIT(traverse_module_state->__pyx_n_u_headers);
  Py_VISIT(traverse_module_state->__pyx_n_s_http_client);
  Py_VISIT(traverse_module_state->__pyx_n_s_http_method);
  Py_VISIT(traverse_module_state->__pyx_kp_u_https_api_bittrex_com_v3);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_connector_exchange_ba);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_connector_exchange_bi);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_connector_exchange_bi_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_connector_exchange_bi_3);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_connector_exchange_bi_4);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_connector_exchange_bi_5);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_connector_exchange_bi_6);
  Py_VISIT(traverse_module_state->__pyx_kp_s_hummingbot_connector_exchange_bi_7);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_data_type_cancel);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_data_type_limit);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_event_events);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_network_iterator);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_utils_async_util);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_utils_estimate_f);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_core_utils_tracking_n);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_logger);
  Py_VISIT(traverse_module_state->__pyx_n_s_hummingbot_market_market_base);
  Py_VISIT(traverse_module_state->__pyx_n_u_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_import);
  Py_VISIT(traverse_module_state->__pyx_n_s_incomplete_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_info);
  Py_VISIT(traverse_module_state->__pyx_n_s_init);
  Py_VISIT(traverse_module_state->__pyx_n_s_initializing);
  Py_VISIT(traverse_module_state->__pyx_n_s_inspect);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_buy);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_coroutine);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_done);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_lower_than_the_minimum_order);
  Py_VISIT(traverse_module_state->__pyx_kp_u_is_not_tracked);
  Py_VISIT(traverse_module_state->__pyx_n_s_is_set);
  Py_VISIT(traverse_module_state->__pyx_kp_u_isenabled);
  Py_VISIT(traverse_module_state->__pyx_n_s_item);
  Py_VISIT(traverse_module_state->__pyx_n_s_items);
  Py_VISIT(traverse_module_state->__pyx_n_s_iter_user_stream_queue);
  Py_VISIT(traverse_module_state->__pyx_n_s_json);
  Py_VISIT(traverse_module_state->__pyx_n_s_key);
  Py_VISIT(traverse_module_state->__pyx_n_s_keys);
  Py_VISIT(traverse_module_state->__pyx_n_s_kwargs);
  Py_VISIT(traverse_module_state->__pyx_n_u_lastTradeRate);
  Py_VISIT(traverse_module_state->__pyx_n_s_last_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_last_tick);
  Py_VISIT(traverse_module_state->__pyx_n_s_last_trade_rate);
  Py_VISIT(traverse_module_state->__pyx_n_u_limit);
  Py_VISIT(traverse_module_state->__pyx_n_s_list_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_local_asset_names);
  Py_VISIT(traverse_module_state->__pyx_n_s_logger);
  Py_VISIT(traverse_module_state->__pyx_n_s_logging);
  Py_VISIT(traverse_module_state->__pyx_n_s_lower);
  Py_VISIT(traverse_module_state->__pyx_n_s_main);
  Py_VISIT(traverse_module_state->__pyx_n_s_market);
  Py_VISIT(traverse_module_state->__pyx_n_u_marketSymbol);
  Py_VISIT(traverse_module_state->__pyx_n_s_market_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_market_list);
  Py_VISIT(traverse_module_state->__pyx_n_s_market_path_url);
  Py_VISIT(traverse_module_state->__pyx_kp_u_markets);
  Py_VISIT(traverse_module_state->__pyx_kp_u_markets_tickers);
  Py_VISIT(traverse_module_state->__pyx_n_u_minTradeSize);
  Py_VISIT(traverse_module_state->__pyx_n_s_min_base_amount_increment);
  Py_VISIT(traverse_module_state->__pyx_n_s_min_btc_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_min_order_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_min_order_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_min_price_increment);
  Py_VISIT(traverse_module_state->__pyx_n_s_min_quote_amount_increment);
  Py_VISIT(traverse_module_state->__pyx_n_s_min_trade_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_name);
  Py_VISIT(traverse_module_state->__pyx_n_s_name_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_network);
  Py_VISIT(traverse_module_state->__pyx_n_s_new_confirmed_amount);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy_core_multiarray_failed_to);
  Py_VISIT(traverse_module_state->__pyx_kp_u_numpy_core_umath_failed_to_impor);
  Py_VISIT(traverse_module_state->__pyx_n_s_o);
  Py_VISIT(traverse_module_state->__pyx_kp_u_of_the);
  Py_VISIT(traverse_module_state->__pyx_n_s_oid);
  Py_VISIT(traverse_module_state->__pyx_kp_u_on_Bittrex_Check_API_key_and_ne);
  Py_VISIT(traverse_module_state->__pyx_kp_u_on_order_status_update_Order_no);
  Py_VISIT(traverse_module_state->__pyx_n_s_open_orders);
  Py_VISIT(traverse_module_state->__pyx_kp_u_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_2);
  Py_VISIT(traverse_module_state->__pyx_n_u_order_2);
  Py_VISIT(traverse_module_state->__pyx_n_u_order_book_initialized);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_books);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_id_set);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_side);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_status);
  Py_VISIT(traverse_module_state->__pyx_kp_u_order_to_Bittrex_for);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_type_description);
  Py_VISIT(traverse_module_state->__pyx_n_s_order_type_str);
  Py_VISIT(traverse_module_state->__pyx_kp_u_orders);
  Py_VISIT(traverse_module_state->__pyx_kp_u_orders_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_orders_open);
  Py_VISIT(traverse_module_state->__pyx_kp_u_out_of);
  Py_VISIT(traverse_module_state->__pyx_n_s_owner);
  Py_VISIT(traverse_module_state->__pyx_n_s_pandas);
  Py_VISIT(traverse_module_state->__pyx_n_s_params);
  Py_VISIT(traverse_module_state->__pyx_n_s_path_url);
  Py_VISIT(traverse_module_state->__pyx_n_s_pd);
  Py_VISIT(traverse_module_state->__pyx_kp_s_pd_DataFrame);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ping);
  Py_VISIT(traverse_module_state->__pyx_n_s_place_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_poll_interval);
  Py_VISIT(traverse_module_state->__pyx_n_s_precision);
  Py_VISIT(traverse_module_state->__pyx_n_u_precision);
  Py_VISIT(traverse_module_state->__pyx_n_s_price);
  Py_VISIT(traverse_module_state->__pyx_n_s_process_api_closed);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_state);
  Py_VISIT(traverse_module_state->__pyx_n_s_pyx_vtable);
  Py_VISIT(traverse_module_state->__pyx_n_u_quantity);
  Py_VISIT(traverse_module_state->__pyx_n_u_quoteCurrencySymbol);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_amount);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_asset);
  Py_VISIT(traverse_module_state->__pyx_n_s_quote_currency);
  Py_VISIT(traverse_module_state->__pyx_n_s_ready);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_reduce_ex);
  Py_VISIT(traverse_module_state->__pyx_n_s_remaining_size);
  Py_VISIT(traverse_module_state->__pyx_n_s_remote_asset_names);
  Py_VISIT(traverse_module_state->__pyx_n_s_replace);
  Py_VISIT(traverse_module_state->__pyx_n_s_request);
  Py_VISIT(traverse_module_state->__pyx_n_s_response);
  Py_VISIT(traverse_module_state->__pyx_n_s_restore_tracking_states);
  Py_VISIT(traverse_module_state->__pyx_n_s_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_result_list);
  Py_VISIT(traverse_module_state->__pyx_n_s_return);
  Py_VISIT(traverse_module_state->__pyx_n_s_return_exceptions);
  Py_VISIT(traverse_module_state->__pyx_n_s_retval);
  Py_VISIT(traverse_module_state->__pyx_n_s_s_decimal_0);
  Py_VISIT(traverse_module_state->__pyx_n_s_s_decimal_NaN);
  Py_VISIT(traverse_module_state->__pyx_n_s_safe_ensure_future);
  Py_VISIT(traverse_module_state->__pyx_n_s_safe_gather);
  Py_VISIT(traverse_module_state->__pyx_n_s_saved_states);
  Py_VISIT(traverse_module_state->__pyx_n_s_self);
  Py_VISIT(traverse_module_state->__pyx_kp_s_self__events_cannot_be_converted);
  Py_VISIT(traverse_module_state->__pyx_kp_u_sell);
  Py_VISIT(traverse_module_state->__pyx_n_s_sell_2);
  Py_VISIT(traverse_module_state->__pyx_kp_u_sell_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_send);
  Py_VISIT(traverse_module_state->__pyx_n_s_set);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate);
  Py_VISIT(traverse_module_state->__pyx_n_s_setstate_cython);
  Py_VISIT(traverse_module_state->__pyx_n_s_sleep);
  Py_VISIT(traverse_module_state->__pyx_n_s_spec);
  Py_VISIT(traverse_module_state->__pyx_n_s_start);
  Py_VISIT(traverse_module_state->__pyx_n_s_start_network);
  Py_VISIT(traverse_module_state->__pyx_n_s_start_tracking_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_state_result);
  Py_VISIT(traverse_module_state->__pyx_n_s_status);
  Py_VISIT(traverse_module_state->__pyx_n_u_status);
  Py_VISIT(traverse_module_state->__pyx_n_s_status_dict);
  Py_VISIT(traverse_module_state->__pyx_n_s_status_polling_loop);
  Py_VISIT(traverse_module_state->__pyx_n_s_stop);
  Py_VISIT(traverse_module_state->__pyx_n_s_stop_network);
  Py_VISIT(traverse_module_state->__pyx_n_s_stop_network_2);
  Py_VISIT(traverse_module_state->__pyx_n_s_str);
  Py_VISIT(traverse_module_state->__pyx_n_s_stream_message);
  Py_VISIT(traverse_module_state->__pyx_kp_s_stringsource);
  Py_VISIT(traverse_module_state->__pyx_n_s_subaccount_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_successful_cancellation);
  Py_VISIT(traverse_module_state->__pyx_n_s_super);
  Py_VISIT(traverse_module_state->__pyx_n_s_supported_order_types);
  Py_VISIT(traverse_module_state->__pyx_n_u_symbol);
  Py_VISIT(traverse_module_state->__pyx_n_s_tasks);
  Py_VISIT(traverse_module_state->__pyx_n_s_test);
  Py_VISIT(traverse_module_state->__pyx_n_s_throw);
  Py_VISIT(traverse_module_state->__pyx_n_s_ticker_data);
  Py_VISIT(traverse_module_state->__pyx_n_s_ticker_list);
  Py_VISIT(traverse_module_state->__pyx_n_s_ticker_path_url);
  Py_VISIT(traverse_module_state->__pyx_n_u_timeInForce);
  Py_VISIT(traverse_module_state->__pyx_n_s_timeout);
  Py_VISIT(traverse_module_state->__pyx_n_s_timeout_seconds);
  Py_VISIT(traverse_module_state->__pyx_n_s_to_json);
  Py_VISIT(traverse_module_state->__pyx_n_s_to_limit_order);
  Py_VISIT(traverse_module_state->__pyx_n_u_total);
  Py_VISIT(traverse_module_state->__pyx_n_s_total_balance);
  Py_VISIT(traverse_module_state->__pyx_n_s_tracked_order);
  Py_VISIT(traverse_module_state->__pyx_n_s_tracked_orders);
  Py_VISIT(traverse_module_state->__pyx_n_s_trade_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_trading_pair);
  Py_VISIT(traverse_module_state->__pyx_n_s_trading_pairs);
  Py_VISIT(traverse_module_state->__pyx_n_s_trading_required);
  Py_VISIT(traverse_module_state->__pyx_n_s_trading_rule);
  Py_VISIT(traverse_module_state->__pyx_n_u_trading_rule_initialized);
  Py_VISIT(traverse_module_state->__pyx_n_s_trading_rules_list);
  Py_VISIT(traverse_module_state->__pyx_n_s_trading_rules_polling_loop);
  Py_VISIT(traverse_module_state->__pyx_n_u_type);
  Py_VISIT(traverse_module_state->__pyx_n_s_typing);
  Py_VISIT(traverse_module_state->__pyx_n_s_update);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_balances);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_exchange_order_id);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_order_status);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_order_status_locals_gene);
  Py_VISIT(traverse_module_state->__pyx_n_s_update_trading_rules);
  Py_VISIT(traverse_module_state->__pyx_n_s_url);
  Py_VISIT(traverse_module_state->__pyx_n_s_user_stream);
  Py_VISIT(traverse_module_state->__pyx_n_s_user_stream_event_listener);
  Py_VISIT(traverse_module_state->__pyx_n_s_value);
  Py_VISIT(traverse_module_state->__pyx_n_s_values);
  Py_VISIT(traverse_module_state->__pyx_n_s_wait);
  Py_VISIT(traverse_module_state->__pyx_n_s_warning);
  Py_VISIT(traverse_module_state->__pyx_kp_u_which_is_already_closed_Order_d);
  Py_VISIT(traverse_module_state->__pyx_kp_u_ws);
  Py_VISIT(traverse_module_state->__pyx_float_0_0);
  Py_VISIT(traverse_module_state->__pyx_float_0_5);
  Py_VISIT(traverse_module_state->__pyx_float_1_0);
  Py_VISIT(traverse_module_state->__pyx_float_5_0);
  Py_VISIT(traverse_module_state->__pyx_float_10_0);
  Py_VISIT(traverse_module_state->__pyx_int_0);
  Py_VISIT(traverse_module_state->__pyx_int_1);
  Py_VISIT(traverse_module_state->__pyx_int_3);
  Py_VISIT(traverse_module_state->__pyx_int_200);
  Py_VISIT(traverse_module_state->__pyx_int_201);
  Py_VISIT(traverse_module_state->__pyx_int_300);
  Py_VISIT(traverse_module_state->__pyx_k__24);
  Py_VISIT(traverse_module_state->__pyx_k__26);
  Py_VISIT(traverse_module_state->__pyx_k__27);
  Py_VISIT(traverse_module_state->__pyx_k__28);
  Py_VISIT(traverse_module_state->__pyx_k__29);
  Py_VISIT(traverse_module_state->__pyx_k__31);
  Py_VISIT(traverse_module_state->__pyx_k__42);
  Py_VISIT(traverse_module_state->__pyx_k__43);
  Py_VISIT(traverse_module_state->__pyx_k__44);
  Py_VISIT(traverse_module_state->__pyx_k__45);
  Py_VISIT(traverse_module_state->__pyx_k__46);
  Py_VISIT(traverse_module_state->__pyx_k__79);
  Py_VISIT(traverse_module_state->__pyx_k__81);
  Py_VISIT(traverse_module_state->__pyx_tuple__4);
  Py_VISIT(traverse_module_state->__pyx_tuple__6);
  Py_VISIT(traverse_module_state->__pyx_tuple__14);
  Py_VISIT(traverse_module_state->__pyx_tuple__16);
  Py_VISIT(traverse_module_state->__pyx_tuple__18);
  Py_VISIT(traverse_module_state->__pyx_tuple__20);
  Py_VISIT(traverse_module_state->__pyx_tuple__23);
  Py_VISIT(traverse_module_state->__pyx_tuple__33);
  Py_VISIT(traverse_module_state->__pyx_tuple__35);
  Py_VISIT(traverse_module_state->__pyx_tuple__36);
  Py_VISIT(traverse_module_state->__pyx_tuple__47);
  Py_VISIT(traverse_module_state->__pyx_tuple__48);
  Py_VISIT(traverse_module_state->__pyx_tuple__50);
  Py_VISIT(traverse_module_state->__pyx_tuple__51);
  Py_VISIT(traverse_module_state->__pyx_tuple__52);
  Py_VISIT(traverse_module_state->__pyx_tuple__54);
  Py_VISIT(traverse_module_state->__pyx_tuple__56);
  Py_VISIT(traverse_module_state->__pyx_tuple__58);
  Py_VISIT(traverse_module_state->__pyx_tuple__60);
  Py_VISIT(traverse_module_state->__pyx_tuple__61);
  Py_VISIT(traverse_module_state->__pyx_tuple__62);
  Py_VISIT(traverse_module_state->__pyx_tuple__64);
  Py_VISIT(traverse_module_state->__pyx_tuple__65);
  Py_VISIT(traverse_module_state->__pyx_tuple__66);
  Py_VISIT(traverse_module_state->__pyx_tuple__67);
  Py_VISIT(traverse_module_state->__pyx_tuple__69);
  Py_VISIT(traverse_module_state->__pyx_tuple__70);
  Py_VISIT(traverse_module_state->__pyx_tuple__71);
  Py_VISIT(traverse_module_state->__pyx_tuple__72);
  Py_VISIT(traverse_module_state->__pyx_tuple__73);
  Py_VISIT(traverse_module_state->__pyx_tuple__75);
  Py_VISIT(traverse_module_state->__pyx_tuple__77);
  Py_VISIT(traverse_module_state->__pyx_tuple__78);
  Py_VISIT(traverse_module_state->__pyx_tuple__80);
  Py_VISIT(traverse_module_state->__pyx_tuple__82);
  Py_VISIT(traverse_module_state->__pyx_tuple__83);
  Py_VISIT(traverse_module_state->__pyx_tuple__84);
  Py_VISIT(traverse_module_state->__pyx_tuple__85);
  Py_VISIT(traverse_module_state->__pyx_tuple__86);
  Py_VISIT(traverse_module_state->__pyx_tuple__87);
  Py_VISIT(traverse_module_state->__pyx_tuple__88);
  Py_VISIT(traverse_module_state->__pyx_tuple__90);
  Py_VISIT(traverse_module_state->__pyx_tuple__91);
  Py_VISIT(traverse_module_state->__pyx_tuple__92);
  Py_VISIT(traverse_module_state->__pyx_tuple__94);
  Py_VISIT(traverse_module_state->__pyx_tuple__96);
  Py_VISIT(traverse_module_state->__pyx_tuple__98);
  Py_VISIT(traverse_module_state->__pyx_codeobj__2);
  Py_VISIT(traverse_module_state->__pyx_codeobj__3);
  Py_VISIT(traverse_module_state->__pyx_codeobj__5);
  Py_VISIT(traverse_module_state->__pyx_codeobj__7);
  Py_VISIT(traverse_module_state->__pyx_codeobj__8);
  Py_VISIT(traverse_module_state->__pyx_tuple__100);
  Py_VISIT(traverse_module_state->__pyx_tuple__102);
  Py_VISIT(traverse_module_state->__pyx_tuple__104);
  Py_VISIT(traverse_module_state->__pyx_tuple__106);
  Py_VISIT(traverse_module_state->__pyx_codeobj__13);
  Py_VISIT(traverse_module_state->__pyx_codeobj__15);
  Py_VISIT(traverse_module_state->__pyx_codeobj__17);
  Py_VISIT(traverse_module_state->__pyx_codeobj__19);
  Py_VISIT(traverse_module_state->__pyx_codeobj__22);
  Py_VISIT(traverse_module_state->__pyx_codeobj__25);
  Py_VISIT(traverse_module_state->__pyx_codeobj__30);
  Py_VISIT(traverse_module_state->__pyx_codeobj__32);
  Py_VISIT(traverse_module_state->__pyx_codeobj__34);
  Py_VISIT(traverse_module_state->__pyx_codeobj__37);
  Py_VISIT(traverse_module_state->__pyx_codeobj__38);
  Py_VISIT(traverse_module_state->__pyx_codeobj__39);
  Py_VISIT(traverse_module_state->__pyx_codeobj__40);
  Py_VISIT(traverse_module_state->__pyx_codeobj__41);
  Py_VISIT(traverse_module_state->__pyx_codeobj__53);
  Py_VISIT(traverse_module_state->__pyx_codeobj__55);
  Py_VISIT(traverse_module_state->__pyx_codeobj__57);
  Py_VISIT(traverse_module_state->__pyx_codeobj__59);
  Py_VISIT(traverse_module_state->__pyx_codeobj__63);
  Py_VISIT(traverse_module_state->__pyx_codeobj__68);
  Py_VISIT(traverse_module_state->__pyx_codeobj__74);
  Py_VISIT(traverse_module_state->__pyx_codeobj__76);
  Py_VISIT(traverse_module_state->__pyx_codeobj__89);
  Py_VISIT(traverse_module_state->__pyx_codeobj__93);
  Py_VISIT(traverse_module_state->__pyx_codeobj__95);
  Py_VISIT(traverse_module_state->__pyx_codeobj__97);
  Py_VISIT(traverse_module_state->__pyx_codeobj__99);
  Py_VISIT(traverse_module_state->__pyx_codeobj__101);
  Py_VISIT(traverse_module_state->__pyx_codeobj__103);
  Py_VISIT(traverse_module_state->__pyx_codeobj__105);
  Py_VISIT(traverse_module_state->__pyx_codeobj__107);
  return 0;
}
#endif
/* #### Code section: module_state_defines ### */
#if CYTHON_COMPILING_IN_LIMITED_API
#define __pyx_d __pyx_mstate_global->__pyx_d
#define __pyx_b __pyx_mstate_global->__pyx_b
#define __pyx_cython_runtime __pyx_mstate_global->__pyx_cython_runtime
#define __pyx_empty_tuple __pyx_mstate_global->__pyx_empty_tuple
#define __pyx_empty_bytes __pyx_mstate_global->__pyx_empty_bytes
#define __pyx_empty_unicode __pyx_mstate_global->__pyx_empty_unicode
#ifdef __Pyx_CyFunction_USED
#define __pyx_CyFunctionType __pyx_mstate_global->__pyx_CyFunctionType
#endif
#ifdef __Pyx_FusedFunction_USED
#define __pyx_FusedFunctionType __pyx_mstate_global->__pyx_FusedFunctionType
#endif
#define __pyx_ptype_10hummingbot_4core_6pubsub_PubSub __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_6pubsub_PubSub
#define __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener
#define __pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter
#define __pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger
#define __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult
#define __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult
#define __pyx_ptype_7cpython_4type_type __pyx_mstate_global->__pyx_ptype_7cpython_4type_type
#define __pyx_ptype_5numpy_dtype __pyx_mstate_global->__pyx_ptype_5numpy_dtype
#define __pyx_ptype_5numpy_flatiter __pyx_mstate_global->__pyx_ptype_5numpy_flatiter
#define __pyx_ptype_5numpy_broadcast __pyx_mstate_global->__pyx_ptype_5numpy_broadcast
#define __pyx_ptype_5numpy_ndarray __pyx_mstate_global->__pyx_ptype_5numpy_ndarray
#define __pyx_ptype_5numpy_generic __pyx_mstate_global->__pyx_ptype_5numpy_generic
#define __pyx_ptype_5numpy_number __pyx_mstate_global->__pyx_ptype_5numpy_number
#define __pyx_ptype_5numpy_integer __pyx_mstate_global->__pyx_ptype_5numpy_integer
#define __pyx_ptype_5numpy_signedinteger __pyx_mstate_global->__pyx_ptype_5numpy_signedinteger
#define __pyx_ptype_5numpy_unsignedinteger __pyx_mstate_global->__pyx_ptype_5numpy_unsignedinteger
#define __pyx_ptype_5numpy_inexact __pyx_mstate_global->__pyx_ptype_5numpy_inexact
#define __pyx_ptype_5numpy_floating __pyx_mstate_global->__pyx_ptype_5numpy_floating
#define __pyx_ptype_5numpy_complexfloating __pyx_mstate_global->__pyx_ptype_5numpy_complexfloating
#define __pyx_ptype_5numpy_flexible __pyx_mstate_global->__pyx_ptype_5numpy_flexible
#define __pyx_ptype_5numpy_character __pyx_mstate_global->__pyx_ptype_5numpy_character
#define __pyx_ptype_5numpy_ufunc __pyx_mstate_global->__pyx_ptype_5numpy_ufunc
#define __pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook
#define __pyx_ptype_10hummingbot_4core_5clock_Clock __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_5clock_Clock
#define __pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator
#define __pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator
#define __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase
#define __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase
#define __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker __pyx_mstate_global->__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker
#define __pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network
#define __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network __pyx_mstate_global->__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network
#define __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network __pyx_mstate_global->__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network
#define __pyx_kp_u_ __pyx_mstate_global->__pyx_kp_u_
#define __pyx_kp_u_0_0005 __pyx_mstate_global->__pyx_kp_u_0_0005
#define __pyx_kp_u_1_01 __pyx_mstate_global->__pyx_kp_u_1_01
#define __pyx_kp_u_1e __pyx_mstate_global->__pyx_kp_u_1e
#define __pyx_n_s_API_CALL_TIMEOUT __pyx_mstate_global->__pyx_n_s_API_CALL_TIMEOUT
#define __pyx_kp_u_Aborting __pyx_mstate_global->__pyx_kp_u_Aborting
#define __pyx_n_s_Any __pyx_mstate_global->__pyx_n_s_Any
#define __pyx_n_s_AssertionError __pyx_mstate_global->__pyx_n_s_AssertionError
#define __pyx_n_s_AsyncIterable __pyx_mstate_global->__pyx_n_s_AsyncIterable
#define __pyx_kp_s_AsyncIterable_Dict_str_Any __pyx_mstate_global->__pyx_kp_s_AsyncIterable_Dict_str_Any
#define __pyx_n_s_BITTREX_API_ENDPOINT __pyx_mstate_global->__pyx_n_s_BITTREX_API_ENDPOINT
#define __pyx_n_u_BTC __pyx_mstate_global->__pyx_n_u_BTC
#define __pyx_kp_u_BTC_USD __pyx_mstate_global->__pyx_kp_u_BTC_USD
#define __pyx_kp_u_BTC_USDT __pyx_mstate_global->__pyx_kp_u_BTC_USDT
#define __pyx_n_s_BUY __pyx_mstate_global->__pyx_n_s_BUY
#define __pyx_n_u_BUY __pyx_mstate_global->__pyx_n_u_BUY
#define __pyx_n_s_BittrexAPIOrderBookDataSource __pyx_mstate_global->__pyx_n_s_BittrexAPIOrderBookDataSource
#define __pyx_n_s_BittrexAuth __pyx_mstate_global->__pyx_n_s_BittrexAuth
#define __pyx_n_s_BittrexExchange __pyx_mstate_global->__pyx_n_s_BittrexExchange
#define __pyx_n_s_BittrexExchangeTransactionTracke __pyx_mstate_global->__pyx_n_s_BittrexExchangeTransactionTracke
#define __pyx_n_s_BittrexExchangeTransactionTracke_2 __pyx_mstate_global->__pyx_n_s_BittrexExchangeTransactionTracke_2
#define __pyx_n_s_BittrexExchangeTransactionTracke_3 __pyx_mstate_global->__pyx_n_s_BittrexExchangeTransactionTracke_3
#define __pyx_n_s_BittrexExchange___reduce_cython __pyx_mstate_global->__pyx_n_s_BittrexExchange___reduce_cython
#define __pyx_n_s_BittrexExchange___setstate_cytho __pyx_mstate_global->__pyx_n_s_BittrexExchange___setstate_cytho
#define __pyx_n_s_BittrexExchange__api_request __pyx_mstate_global->__pyx_n_s_BittrexExchange__api_request
#define __pyx_n_s_BittrexExchange__format_trading __pyx_mstate_global->__pyx_n_s_BittrexExchange__format_trading
#define __pyx_n_s_BittrexExchange__http_client __pyx_mstate_global->__pyx_n_s_BittrexExchange__http_client
#define __pyx_n_s_BittrexExchange__iter_user_strea __pyx_mstate_global->__pyx_n_s_BittrexExchange__iter_user_strea
#define __pyx_n_s_BittrexExchange__process_api_clo __pyx_mstate_global->__pyx_n_s_BittrexExchange__process_api_clo
#define __pyx_n_s_BittrexExchange__status_polling __pyx_mstate_global->__pyx_n_s_BittrexExchange__status_polling
#define __pyx_n_s_BittrexExchange__stop_network __pyx_mstate_global->__pyx_n_s_BittrexExchange__stop_network
#define __pyx_n_s_BittrexExchange__trading_rules_p __pyx_mstate_global->__pyx_n_s_BittrexExchange__trading_rules_p
#define __pyx_n_s_BittrexExchange__update_balances __pyx_mstate_global->__pyx_n_s_BittrexExchange__update_balances
#define __pyx_n_s_BittrexExchange__update_order_st __pyx_mstate_global->__pyx_n_s_BittrexExchange__update_order_st
#define __pyx_n_s_BittrexExchange__update_trading __pyx_mstate_global->__pyx_n_s_BittrexExchange__update_trading
#define __pyx_n_s_BittrexExchange__user_stream_eve __pyx_mstate_global->__pyx_n_s_BittrexExchange__user_stream_eve
#define __pyx_n_s_BittrexExchange_buy __pyx_mstate_global->__pyx_n_s_BittrexExchange_buy
#define __pyx_n_s_BittrexExchange_cancel __pyx_mstate_global->__pyx_n_s_BittrexExchange_cancel
#define __pyx_n_s_BittrexExchange_cancel_all __pyx_mstate_global->__pyx_n_s_BittrexExchange_cancel_all
#define __pyx_n_s_BittrexExchange_check_network __pyx_mstate_global->__pyx_n_s_BittrexExchange_check_network
#define __pyx_n_s_BittrexExchange_execute_buy __pyx_mstate_global->__pyx_n_s_BittrexExchange_execute_buy
#define __pyx_n_s_BittrexExchange_execute_cancel __pyx_mstate_global->__pyx_n_s_BittrexExchange_execute_cancel
#define __pyx_n_s_BittrexExchange_execute_sell __pyx_mstate_global->__pyx_n_s_BittrexExchange_execute_sell
#define __pyx_n_s_BittrexExchange_get_active_excha __pyx_mstate_global->__pyx_n_s_BittrexExchange_get_active_excha
#define __pyx_n_s_BittrexExchange_get_fee __pyx_mstate_global->__pyx_n_s_BittrexExchange_get_fee
#define __pyx_n_s_BittrexExchange_get_order_book __pyx_mstate_global->__pyx_n_s_BittrexExchange_get_order_book
#define __pyx_n_s_BittrexExchange_get_price __pyx_mstate_global->__pyx_n_s_BittrexExchange_get_price
#define __pyx_n_s_BittrexExchange_list_orders __pyx_mstate_global->__pyx_n_s_BittrexExchange_list_orders
#define __pyx_n_s_BittrexExchange_logger __pyx_mstate_global->__pyx_n_s_BittrexExchange_logger
#define __pyx_n_s_BittrexExchange_place_order __pyx_mstate_global->__pyx_n_s_BittrexExchange_place_order
#define __pyx_n_s_BittrexExchange_restore_tracking __pyx_mstate_global->__pyx_n_s_BittrexExchange_restore_tracking
#define __pyx_n_s_BittrexExchange_sell __pyx_mstate_global->__pyx_n_s_BittrexExchange_sell
#define __pyx_n_s_BittrexExchange_start_network __pyx_mstate_global->__pyx_n_s_BittrexExchange_start_network
#define __pyx_n_s_BittrexExchange_start_tracking_o __pyx_mstate_global->__pyx_n_s_BittrexExchange_start_tracking_o
#define __pyx_n_s_BittrexExchange_stop_network __pyx_mstate_global->__pyx_n_s_BittrexExchange_stop_network
#define __pyx_n_s_BittrexExchange_supported_order __pyx_mstate_global->__pyx_n_s_BittrexExchange_supported_order
#define __pyx_n_s_BittrexInFlightOrder __pyx_mstate_global->__pyx_n_s_BittrexInFlightOrder
#define __pyx_n_s_BittrexOrderBookTracker __pyx_mstate_global->__pyx_n_s_BittrexOrderBookTracker
#define __pyx_n_s_BittrexUserStreamTracker __pyx_mstate_global->__pyx_n_s_BittrexUserStreamTracker
#define __pyx_n_s_BuyOrderCompleted __pyx_mstate_global->__pyx_n_s_BuyOrderCompleted
#define __pyx_n_s_BuyOrderCompletedEvent __pyx_mstate_global->__pyx_n_s_BuyOrderCompletedEvent
#define __pyx_n_s_BuyOrderCreated __pyx_mstate_global->__pyx_n_s_BuyOrderCreated
#define __pyx_n_s_BuyOrderCreatedEvent __pyx_mstate_global->__pyx_n_s_BuyOrderCreatedEvent
#define __pyx_kp_u_Buy_order_amount __pyx_mstate_global->__pyx_kp_u_Buy_order_amount
#define __pyx_n_u_CANCELLED __pyx_mstate_global->__pyx_n_u_CANCELLED
#define __pyx_kp_u_CELO __pyx_mstate_global->__pyx_kp_u_CELO
#define __pyx_kp_u_CGLD __pyx_mstate_global->__pyx_kp_u_CGLD
#define __pyx_n_u_CLOSED __pyx_mstate_global->__pyx_n_u_CLOSED
#define __pyx_n_s_CONNECTED __pyx_mstate_global->__pyx_n_s_CONNECTED
#define __pyx_n_s_CancellationResult __pyx_mstate_global->__pyx_n_s_CancellationResult
#define __pyx_n_s_CancelledError __pyx_mstate_global->__pyx_n_s_CancelledError
#define __pyx_kp_u_Check_API_key_and_network_conne __pyx_mstate_global->__pyx_kp_u_Check_API_key_and_network_conne
#define __pyx_n_s_ClientSession __pyx_mstate_global->__pyx_n_s_ClientSession
#define __pyx_kp_u_Could_not_fetch_updates_for_the __pyx_mstate_global->__pyx_kp_u_Could_not_fetch_updates_for_the
#define __pyx_kp_u_Could_not_fetch_updates_from_Bit __pyx_mstate_global->__pyx_kp_u_Could_not_fetch_updates_from_Bit
#define __pyx_kp_u_Could_not_fetch_updates_from_Bit_2 __pyx_mstate_global->__pyx_kp_u_Could_not_fetch_updates_from_Bit_2
#define __pyx_kp_u_Created __pyx_mstate_global->__pyx_kp_u_Created
#define __pyx_n_u_DELETE __pyx_mstate_global->__pyx_n_u_DELETE
#define __pyx_n_s_Decimal __pyx_mstate_global->__pyx_n_s_Decimal
#define __pyx_n_s_Dict __pyx_mstate_global->__pyx_n_s_Dict
#define __pyx_kp_s_Dict_str_Any __pyx_mstate_global->__pyx_kp_s_Dict_str_Any
#define __pyx_kp_s_Dict_str_any __pyx_mstate_global->__pyx_kp_s_Dict_str_any
#define __pyx_n_u_ETH __pyx_mstate_global->__pyx_n_u_ETH
#define __pyx_kp_u_ETH_BTC __pyx_mstate_global->__pyx_kp_u_ETH_BTC
#define __pyx_kp_u_Error_fetching_response_from __pyx_mstate_global->__pyx_kp_u_Error_fetching_response_from
#define __pyx_kp_u_Error_fetching_status_update_for __pyx_mstate_global->__pyx_kp_u_Error_fetching_status_update_for
#define __pyx_kp_u_Error_parsing_the_trading_pair_r __pyx_mstate_global->__pyx_kp_u_Error_parsing_the_trading_pair_r
#define __pyx_kp_u_Error_submitting_buy __pyx_mstate_global->__pyx_kp_u_Error_submitting_buy
#define __pyx_kp_u_Error_submitting_sell __pyx_mstate_global->__pyx_kp_u_Error_submitting_sell
#define __pyx_n_s_Event __pyx_mstate_global->__pyx_n_s_Event
#define __pyx_n_s_ExchangeBase __pyx_mstate_global->__pyx_n_s_ExchangeBase
#define __pyx_kp_u_Exchange_order_ID_never_updated __pyx_mstate_global->__pyx_kp_u_Exchange_order_ID_never_updated
#define __pyx_n_u_FAILURE __pyx_mstate_global->__pyx_n_u_FAILURE
#define __pyx_kp_u_Failed_to_cancel_order __pyx_mstate_global->__pyx_kp_u_Failed_to_cancel_order
#define __pyx_kp_u_Failed_to_cancel_order_on_Bittre __pyx_mstate_global->__pyx_kp_u_Failed_to_cancel_order_on_Bittre
#define __pyx_kp_u_Failed_to_cancel_the_order __pyx_mstate_global->__pyx_kp_u_Failed_to_cancel_the_order
#define __pyx_kp_u_Failed_to_submit_buy_order_to_Bi __pyx_mstate_global->__pyx_kp_u_Failed_to_submit_buy_order_to_Bi
#define __pyx_kp_u_Failed_to_submit_sell_order_to_B __pyx_mstate_global->__pyx_kp_u_Failed_to_submit_sell_order_to_B
#define __pyx_kp_u_Filled __pyx_mstate_global->__pyx_kp_u_Filled
#define __pyx_n_u_GET __pyx_mstate_global->__pyx_n_u_GET
#define __pyx_n_u_GOOD_TIL_CANCELLED __pyx_mstate_global->__pyx_n_u_GOOD_TIL_CANCELLED
#define __pyx_kp_u_HTTP_Status_Code __pyx_mstate_global->__pyx_kp_u_HTTP_Status_Code
#define __pyx_n_s_HummingbotLogger __pyx_mstate_global->__pyx_n_s_HummingbotLogger
#define __pyx_n_s_IOError __pyx_mstate_global->__pyx_n_s_IOError
#define __pyx_n_s_ImportError __pyx_mstate_global->__pyx_n_s_ImportError
#define __pyx_kp_u_Invalid_OrderType __pyx_mstate_global->__pyx_kp_u_Invalid_OrderType
#define __pyx_n_s_LIMIT __pyx_mstate_global->__pyx_n_s_LIMIT
#define __pyx_n_u_LIMIT __pyx_mstate_global->__pyx_n_u_LIMIT
#define __pyx_n_s_LIMIT_MAKER __pyx_mstate_global->__pyx_n_s_LIMIT_MAKER
#define __pyx_n_s_LimitOrder __pyx_mstate_global->__pyx_n_s_LimitOrder
#define __pyx_n_s_List __pyx_mstate_global->__pyx_n_s_List
#define __pyx_kp_s_List_Any __pyx_mstate_global->__pyx_kp_s_List_Any
#define __pyx_kp_s_List_CancellationResult __pyx_mstate_global->__pyx_kp_s_List_CancellationResult
#define __pyx_kp_s_List_TradingRule __pyx_mstate_global->__pyx_kp_s_List_TradingRule
#define __pyx_n_s_MARKET __pyx_mstate_global->__pyx_n_s_MARKET
#define __pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT __pyx_mstate_global->__pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT
#define __pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T __pyx_mstate_global->__pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T
#define __pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG __pyx_mstate_global->__pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG
#define __pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG __pyx_mstate_global->__pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG
#define __pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG __pyx_mstate_global->__pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG
#define __pyx_n_s_MARKET_RECEIVED_ASSET_EVENT_TAG __pyx_mstate_global->__pyx_n_s_MARKET_RECEIVED_ASSET_EVENT_TAG
#define __pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN __pyx_mstate_global->__pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN
#define __pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT __pyx_mstate_global->__pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT
#define __pyx_n_s_MARKET_TRANSACTION_FAILURE_EVENT __pyx_mstate_global->__pyx_n_s_MARKET_TRANSACTION_FAILURE_EVENT
#define __pyx_n_s_MarketEvent __pyx_mstate_global->__pyx_n_s_MarketEvent
#define __pyx_n_s_MarketOrderFailureEvent __pyx_mstate_global->__pyx_n_s_MarketOrderFailureEvent
#define __pyx_n_s_MarketTransactionFailureEvent __pyx_mstate_global->__pyx_n_s_MarketTransactionFailureEvent
#define __pyx_n_s_NOT_CONNECTED __pyx_mstate_global->__pyx_n_s_NOT_CONNECTED
#define __pyx_n_u_NOT_FOUND __pyx_mstate_global->__pyx_n_u_NOT_FOUND
#define __pyx_n_s_NaN __pyx_mstate_global->__pyx_n_s_NaN
#define __pyx_n_u_NaN __pyx_mstate_global->__pyx_n_u_NaN
#define __pyx_n_s_NetworkStatus __pyx_mstate_global->__pyx_n_s_NetworkStatus
#define __pyx_kp_u_No_exchange_ID_found_for __pyx_mstate_global->__pyx_kp_u_No_exchange_ID_found_for
#define __pyx_kp_u_No_order_book_exists_for __pyx_mstate_global->__pyx_kp_u_No_order_book_exists_for
#define __pyx_kp_u_None __pyx_mstate_global->__pyx_kp_u_None
#define __pyx_n_u_OFFLINE __pyx_mstate_global->__pyx_n_u_OFFLINE
#define __pyx_n_s_ORDER_NOT_EXIST_CONFIRMATION_COU __pyx_mstate_global->__pyx_n_s_ORDER_NOT_EXIST_CONFIRMATION_COU
#define __pyx_n_u_ORDER_NOT_OPEN __pyx_mstate_global->__pyx_n_u_ORDER_NOT_OPEN
#define __pyx_n_s_Optional __pyx_mstate_global->__pyx_n_s_Optional
#define __pyx_kp_s_Optional_Decimal __pyx_mstate_global->__pyx_kp_s_Optional_Decimal
#define __pyx_n_s_OrderBook __pyx_mstate_global->__pyx_n_s_OrderBook
#define __pyx_n_s_OrderCancelled __pyx_mstate_global->__pyx_n_s_OrderCancelled
#define __pyx_n_s_OrderCancelledEvent __pyx_mstate_global->__pyx_n_s_OrderCancelledEvent
#define __pyx_n_s_OrderFailure __pyx_mstate_global->__pyx_n_s_OrderFailure
#define __pyx_n_s_OrderFilled __pyx_mstate_global->__pyx_n_s_OrderFilled
#define __pyx_n_s_OrderFilledEvent __pyx_mstate_global->__pyx_n_s_OrderFilledEvent
#define __pyx_n_s_OrderType __pyx_mstate_global->__pyx_n_s_OrderType
#define __pyx_n_u_POST __pyx_mstate_global->__pyx_n_u_POST
#define __pyx_n_u_POST_ONLY_GOOD_TIL_CANCELLED __pyx_mstate_global->__pyx_n_u_POST_ONLY_GOOD_TIL_CANCELLED
#define __pyx_n_s_ReceivedAsset __pyx_mstate_global->__pyx_n_s_ReceivedAsset
#define __pyx_n_s_SELL __pyx_mstate_global->__pyx_n_s_SELL
#define __pyx_n_u_SELL __pyx_mstate_global->__pyx_n_u_SELL
#define __pyx_n_s_SellOrderCompleted __pyx_mstate_global->__pyx_n_s_SellOrderCompleted
#define __pyx_n_s_SellOrderCompletedEvent __pyx_mstate_global->__pyx_n_s_SellOrderCompletedEvent
#define __pyx_n_s_SellOrderCreated __pyx_mstate_global->__pyx_n_s_SellOrderCreated
#define __pyx_n_s_SellOrderCreatedEvent __pyx_mstate_global->__pyx_n_s_SellOrderCreatedEvent
#define __pyx_kp_u_Sell_order_amount __pyx_mstate_global->__pyx_kp_u_Sell_order_amount
#define __pyx_kp_u_Skipping __pyx_mstate_global->__pyx_kp_u_Skipping
#define __pyx_kp_u_Successfully_cancelled_order __pyx_mstate_global->__pyx_kp_u_Successfully_cancelled_order
#define __pyx_kp_u_The __pyx_mstate_global->__pyx_kp_u_The
#define __pyx_kp_u_The_BUY_order __pyx_mstate_global->__pyx_kp_u_The_BUY_order
#define __pyx_kp_u_The_SELL_order __pyx_mstate_global->__pyx_kp_u_The_SELL_order
#define __pyx_kp_u_The_order __pyx_mstate_global->__pyx_kp_u_The_order
#define __pyx_n_s_TimeoutError __pyx_mstate_global->__pyx_n_s_TimeoutError
#define __pyx_n_s_TradeFee __pyx_mstate_global->__pyx_n_s_TradeFee
#define __pyx_n_s_TradeType __pyx_mstate_global->__pyx_n_s_TradeType
#define __pyx_n_s_TransactionFailure __pyx_mstate_global->__pyx_n_s_TransactionFailure
#define __pyx_kp_u_Tried_to_cancel_order __pyx_mstate_global->__pyx_kp_u_Tried_to_cancel_order
#define __pyx_n_s_TypeError __pyx_mstate_global->__pyx_n_s_TypeError
#define __pyx_n_s_UPDATE_ORDERS_INTERVAL __pyx_mstate_global->__pyx_n_s_UPDATE_ORDERS_INTERVAL
#define __pyx_n_u_USD __pyx_mstate_global->__pyx_n_u_USD
#define __pyx_n_u_USDT __pyx_mstate_global->__pyx_n_u_USDT
#define __pyx_kp_u_Unexpected_error_cancelling_orde __pyx_mstate_global->__pyx_kp_u_Unexpected_error_cancelling_orde
#define __pyx_kp_u_Unexpected_error_in_user_stream __pyx_mstate_global->__pyx_kp_u_Unexpected_error_in_user_stream
#define __pyx_kp_u_Unexpected_error_while_fetching __pyx_mstate_global->__pyx_kp_u_Unexpected_error_while_fetching
#define __pyx_kp_u_Unexpected_error_while_polling_u __pyx_mstate_global->__pyx_kp_u_Unexpected_error_while_polling_u
#define __pyx_kp_u_Unknown_error_Retrying_after_1_s __pyx_mstate_global->__pyx_kp_u_Unknown_error_Retrying_after_1_s
#define __pyx_n_s_ValueError __pyx_mstate_global->__pyx_n_s_ValueError
#define __pyx_kp_u__10 __pyx_mstate_global->__pyx_kp_u__10
#define __pyx_n_s__108 __pyx_mstate_global->__pyx_n_s__108
#define __pyx_kp_u__11 __pyx_mstate_global->__pyx_kp_u__11
#define __pyx_kp_u__12 __pyx_mstate_global->__pyx_kp_u__12
#define __pyx_kp_u__21 __pyx_mstate_global->__pyx_kp_u__21
#define __pyx_n_s__49 __pyx_mstate_global->__pyx_n_s__49
#define __pyx_kp_u__9 __pyx_mstate_global->__pyx_kp_u__9
#define __pyx_n_u_account_balance __pyx_mstate_global->__pyx_n_u_account_balance
#define __pyx_n_s_account_balances __pyx_mstate_global->__pyx_n_s_account_balances
#define __pyx_n_s_account_info __pyx_mstate_global->__pyx_n_s_account_info
#define __pyx_n_s_aenter __pyx_mstate_global->__pyx_n_s_aenter
#define __pyx_n_s_aexit __pyx_mstate_global->__pyx_n_s_aexit
#define __pyx_n_s_aiohttp __pyx_mstate_global->__pyx_n_s_aiohttp
#define __pyx_kp_s_aiohttp_ClientSession __pyx_mstate_global->__pyx_kp_s_aiohttp_ClientSession
#define __pyx_n_s_aiter __pyx_mstate_global->__pyx_n_s_aiter
#define __pyx_n_s_all __pyx_mstate_global->__pyx_n_s_all
#define __pyx_n_s_amount __pyx_mstate_global->__pyx_n_s_amount
#define __pyx_n_s_anext __pyx_mstate_global->__pyx_n_s_anext
#define __pyx_n_s_api_request __pyx_mstate_global->__pyx_n_s_api_request
#define __pyx_n_s_api_response __pyx_mstate_global->__pyx_n_s_api_response
#define __pyx_n_s_api_responses __pyx_mstate_global->__pyx_n_s_api_responses
#define __pyx_n_s_app_warning_msg __pyx_mstate_global->__pyx_n_s_app_warning_msg
#define __pyx_n_s_args __pyx_mstate_global->__pyx_n_s_args
#define __pyx_n_s_asset_name __pyx_mstate_global->__pyx_n_s_asset_name
#define __pyx_n_s_asset_names_to_remove __pyx_mstate_global->__pyx_n_s_asset_names_to_remove
#define __pyx_n_s_async_timeout __pyx_mstate_global->__pyx_n_s_async_timeout
#define __pyx_n_s_asyncio __pyx_mstate_global->__pyx_n_s_asyncio
#define __pyx_n_s_asyncio_coroutines __pyx_mstate_global->__pyx_n_s_asyncio_coroutines
#define __pyx_n_s_asyncio_tasks __pyx_mstate_global->__pyx_n_s_asyncio_tasks
#define __pyx_n_s_auth_dict __pyx_mstate_global->__pyx_n_s_auth_dict
#define __pyx_n_u_available __pyx_mstate_global->__pyx_n_u_available
#define __pyx_n_s_available_balance __pyx_mstate_global->__pyx_n_s_available_balance
#define __pyx_n_s_await __pyx_mstate_global->__pyx_n_s_await
#define __pyx_n_u_balance __pyx_mstate_global->__pyx_n_u_balance
#define __pyx_n_s_balance_delta __pyx_mstate_global->__pyx_n_s_balance_delta
#define __pyx_n_s_balance_entry __pyx_mstate_global->__pyx_n_s_balance_entry
#define __pyx_kp_u_balances __pyx_mstate_global->__pyx_kp_u_balances
#define __pyx_n_s_balances_2 __pyx_mstate_global->__pyx_n_s_balances_2
#define __pyx_n_s_base_asset __pyx_mstate_global->__pyx_n_s_base_asset
#define __pyx_n_s_base_currency __pyx_mstate_global->__pyx_n_s_base_currency
#define __pyx_n_u_bittrex __pyx_mstate_global->__pyx_n_u_bittrex
#define __pyx_n_s_bittrex_api_key __pyx_mstate_global->__pyx_n_s_bittrex_api_key
#define __pyx_n_s_bittrex_auth __pyx_mstate_global->__pyx_n_s_bittrex_auth
#define __pyx_n_s_bittrex_secret_key __pyx_mstate_global->__pyx_n_s_bittrex_secret_key
#define __pyx_n_s_bm_logger __pyx_mstate_global->__pyx_n_s_bm_logger
#define __pyx_n_s_body __pyx_mstate_global->__pyx_n_s_body
#define __pyx_n_u_body __pyx_mstate_global->__pyx_n_u_body
#define __pyx_n_s_bool __pyx_mstate_global->__pyx_n_s_bool
#define __pyx_n_s_btc_usd_price __pyx_mstate_global->__pyx_n_s_btc_usd_price
#define __pyx_n_s_btc_usdt_price __pyx_mstate_global->__pyx_n_s_btc_usdt_price
#define __pyx_kp_u_buy __pyx_mstate_global->__pyx_kp_u_buy
#define __pyx_n_s_buy_2 __pyx_mstate_global->__pyx_n_s_buy_2
#define __pyx_kp_u_buy_order __pyx_mstate_global->__pyx_kp_u_buy_order
#define __pyx_n_s_cancel __pyx_mstate_global->__pyx_n_s_cancel
#define __pyx_n_s_cancel_all __pyx_mstate_global->__pyx_n_s_cancel_all
#define __pyx_n_s_cancel_result __pyx_mstate_global->__pyx_n_s_cancel_result
#define __pyx_n_u_cancelled __pyx_mstate_global->__pyx_n_u_cancelled
#define __pyx_n_s_check_network __pyx_mstate_global->__pyx_n_s_check_network
#define __pyx_n_s_client __pyx_mstate_global->__pyx_n_s_client
#define __pyx_n_s_client_order_id __pyx_mstate_global->__pyx_n_s_client_order_id
#define __pyx_n_s_cline_in_traceback __pyx_mstate_global->__pyx_n_s_cline_in_traceback
#define __pyx_n_s_close __pyx_mstate_global->__pyx_n_s_close
#define __pyx_n_s_cls __pyx_mstate_global->__pyx_n_s_cls
#define __pyx_n_u_commission __pyx_mstate_global->__pyx_n_u_commission
#define __pyx_n_s_content __pyx_mstate_global->__pyx_n_s_content
#define __pyx_n_u_content __pyx_mstate_global->__pyx_n_u_content
#define __pyx_n_u_currencySymbol __pyx_mstate_global->__pyx_n_u_currencySymbol
#define __pyx_n_s_current_tick __pyx_mstate_global->__pyx_n_s_current_tick
#define __pyx_n_s_data __pyx_mstate_global->__pyx_n_s_data
#define __pyx_n_s_decimal __pyx_mstate_global->__pyx_n_s_decimal
#define __pyx_n_s_decimal_amount __pyx_mstate_global->__pyx_n_s_decimal_amount
#define __pyx_n_s_decimal_price __pyx_mstate_global->__pyx_n_s_decimal_price
#define __pyx_n_u_delta __pyx_mstate_global->__pyx_n_u_delta
#define __pyx_n_s_dict __pyx_mstate_global->__pyx_n_s_dict
#define __pyx_n_s_difference __pyx_mstate_global->__pyx_n_s_difference
#define __pyx_n_u_direction __pyx_mstate_global->__pyx_n_u_direction
#define __pyx_kp_u_disable __pyx_mstate_global->__pyx_kp_u_disable
#define __pyx_kp_u_does_not_exist_on_Bittrex_No_ca __pyx_mstate_global->__pyx_kp_u_does_not_exist_on_Bittrex_No_ca
#define __pyx_n_u_done __pyx_mstate_global->__pyx_n_u_done
#define __pyx_kp_u_enable __pyx_mstate_global->__pyx_kp_u_enable
#define __pyx_n_s_err __pyx_mstate_global->__pyx_n_s_err
#define __pyx_n_s_error __pyx_mstate_global->__pyx_n_s_error
#define __pyx_n_s_estimate_fee __pyx_mstate_global->__pyx_n_s_estimate_fee
#define __pyx_n_s_eth_btc_price __pyx_mstate_global->__pyx_n_s_eth_btc_price
#define __pyx_n_s_event_type __pyx_mstate_global->__pyx_n_s_event_type
#define __pyx_n_u_event_type __pyx_mstate_global->__pyx_n_u_event_type
#define __pyx_n_s_exc_info __pyx_mstate_global->__pyx_n_s_exc_info
#define __pyx_n_s_exchange_order_id __pyx_mstate_global->__pyx_n_s_exchange_order_id
#define __pyx_n_s_execute_buy __pyx_mstate_global->__pyx_n_s_execute_buy
#define __pyx_n_s_execute_cancel __pyx_mstate_global->__pyx_n_s_execute_cancel
#define __pyx_n_s_execute_price __pyx_mstate_global->__pyx_n_s_execute_price
#define __pyx_n_s_execute_sell __pyx_mstate_global->__pyx_n_s_execute_sell
#define __pyx_n_s_executed_amount_base __pyx_mstate_global->__pyx_n_s_executed_amount_base
#define __pyx_n_s_executed_amount_diff __pyx_mstate_global->__pyx_n_s_executed_amount_diff
#define __pyx_n_s_executed_amount_quote __pyx_mstate_global->__pyx_n_s_executed_amount_quote
#define __pyx_n_s_executed_price __pyx_mstate_global->__pyx_n_s_executed_price
#define __pyx_n_u_f __pyx_mstate_global->__pyx_n_u_f
#define __pyx_n_s_failed_cancellation __pyx_mstate_global->__pyx_n_s_failed_cancellation
#define __pyx_n_s_fee_asset __pyx_mstate_global->__pyx_n_s_fee_asset
#define __pyx_n_s_fee_paid __pyx_mstate_global->__pyx_n_s_fee_paid
#define __pyx_n_u_fillQuantity __pyx_mstate_global->__pyx_n_u_fillQuantity
#define __pyx_n_s_float __pyx_mstate_global->__pyx_n_s_float
#define __pyx_kp_u_for __pyx_mstate_global->__pyx_kp_u_for
#define __pyx_n_s_format_trading_rules __pyx_mstate_global->__pyx_n_s_format_trading_rules
#define __pyx_n_s_from_json __pyx_mstate_global->__pyx_n_s_from_json
#define __pyx_kp_u_gc __pyx_mstate_global->__pyx_kp_u_gc
#define __pyx_n_s_generate_auth_dict __pyx_mstate_global->__pyx_n_s_generate_auth_dict
#define __pyx_n_s_genexpr __pyx_mstate_global->__pyx_n_s_genexpr
#define __pyx_n_s_get __pyx_mstate_global->__pyx_n_s_get
#define __pyx_n_s_getLogger __pyx_mstate_global->__pyx_n_s_getLogger
#define __pyx_n_s_get_active_exchange_markets __pyx_mstate_global->__pyx_n_s_get_active_exchange_markets
#define __pyx_n_s_get_event_loop __pyx_mstate_global->__pyx_n_s_get_event_loop
#define __pyx_n_s_get_exchange_order_id __pyx_mstate_global->__pyx_n_s_get_exchange_order_id
#define __pyx_n_s_get_fee __pyx_mstate_global->__pyx_n_s_get_fee
#define __pyx_n_s_get_order_book __pyx_mstate_global->__pyx_n_s_get_order_book
#define __pyx_n_s_get_price __pyx_mstate_global->__pyx_n_s_get_price
#define __pyx_n_s_get_tracking_nonce __pyx_mstate_global->__pyx_n_s_get_tracking_nonce
#define __pyx_n_s_getstate __pyx_mstate_global->__pyx_n_s_getstate
#define __pyx_kp_u_has_been_cancelled_according_to __pyx_mstate_global->__pyx_kp_u_has_been_cancelled_according_to
#define __pyx_kp_u_has_been_cancelled_according_to_2 __pyx_mstate_global->__pyx_kp_u_has_been_cancelled_according_to_2
#define __pyx_kp_u_has_completed_according_to_Bitt __pyx_mstate_global->__pyx_kp_u_has_completed_according_to_Bitt
#define __pyx_kp_u_has_completed_according_to_Orde __pyx_mstate_global->__pyx_kp_u_has_completed_according_to_Orde
#define __pyx_kp_u_has_completed_according_to_orde __pyx_mstate_global->__pyx_kp_u_has_completed_according_to_orde
#define __pyx_n_s_headers __pyx_mstate_global->__pyx_n_s_headers
#define __pyx_n_u_headers __pyx_mstate_global->__pyx_n_u_headers
#define __pyx_n_s_http_client __pyx_mstate_global->__pyx_n_s_http_client
#define __pyx_n_s_http_method __pyx_mstate_global->__pyx_n_s_http_method
#define __pyx_kp_u_https_api_bittrex_com_v3 __pyx_mstate_global->__pyx_kp_u_https_api_bittrex_com_v3
#define __pyx_n_s_hummingbot_connector_exchange_ba __pyx_mstate_global->__pyx_n_s_hummingbot_connector_exchange_ba
#define __pyx_n_s_hummingbot_connector_exchange_bi __pyx_mstate_global->__pyx_n_s_hummingbot_connector_exchange_bi
#define __pyx_n_s_hummingbot_connector_exchange_bi_2 __pyx_mstate_global->__pyx_n_s_hummingbot_connector_exchange_bi_2
#define __pyx_n_s_hummingbot_connector_exchange_bi_3 __pyx_mstate_global->__pyx_n_s_hummingbot_connector_exchange_bi_3
#define __pyx_n_s_hummingbot_connector_exchange_bi_4 __pyx_mstate_global->__pyx_n_s_hummingbot_connector_exchange_bi_4
#define __pyx_n_s_hummingbot_connector_exchange_bi_5 __pyx_mstate_global->__pyx_n_s_hummingbot_connector_exchange_bi_5
#define __pyx_n_s_hummingbot_connector_exchange_bi_6 __pyx_mstate_global->__pyx_n_s_hummingbot_connector_exchange_bi_6
#define __pyx_kp_s_hummingbot_connector_exchange_bi_7 __pyx_mstate_global->__pyx_kp_s_hummingbot_connector_exchange_bi_7
#define __pyx_n_s_hummingbot_core_data_type_cancel __pyx_mstate_global->__pyx_n_s_hummingbot_core_data_type_cancel
#define __pyx_n_s_hummingbot_core_data_type_limit __pyx_mstate_global->__pyx_n_s_hummingbot_core_data_type_limit
#define __pyx_n_s_hummingbot_core_event_events __pyx_mstate_global->__pyx_n_s_hummingbot_core_event_events
#define __pyx_n_s_hummingbot_core_network_iterator __pyx_mstate_global->__pyx_n_s_hummingbot_core_network_iterator
#define __pyx_n_s_hummingbot_core_utils_async_util __pyx_mstate_global->__pyx_n_s_hummingbot_core_utils_async_util
#define __pyx_n_s_hummingbot_core_utils_estimate_f __pyx_mstate_global->__pyx_n_s_hummingbot_core_utils_estimate_f
#define __pyx_n_s_hummingbot_core_utils_tracking_n __pyx_mstate_global->__pyx_n_s_hummingbot_core_utils_tracking_n
#define __pyx_n_s_hummingbot_logger __pyx_mstate_global->__pyx_n_s_hummingbot_logger
#define __pyx_n_s_hummingbot_market_market_base __pyx_mstate_global->__pyx_n_s_hummingbot_market_market_base
#define __pyx_n_u_id __pyx_mstate_global->__pyx_n_u_id
#define __pyx_n_s_import __pyx_mstate_global->__pyx_n_s_import
#define __pyx_n_s_incomplete_orders __pyx_mstate_global->__pyx_n_s_incomplete_orders
#define __pyx_n_s_info __pyx_mstate_global->__pyx_n_s_info
#define __pyx_n_s_init __pyx_mstate_global->__pyx_n_s_init
#define __pyx_n_s_initializing __pyx_mstate_global->__pyx_n_s_initializing
#define __pyx_n_s_inspect __pyx_mstate_global->__pyx_n_s_inspect
#define __pyx_n_s_is_buy __pyx_mstate_global->__pyx_n_s_is_buy
#define __pyx_n_s_is_coroutine __pyx_mstate_global->__pyx_n_s_is_coroutine
#define __pyx_n_s_is_done __pyx_mstate_global->__pyx_n_s_is_done
#define __pyx_kp_u_is_lower_than_the_minimum_order __pyx_mstate_global->__pyx_kp_u_is_lower_than_the_minimum_order
#define __pyx_kp_u_is_not_tracked __pyx_mstate_global->__pyx_kp_u_is_not_tracked
#define __pyx_n_s_is_set __pyx_mstate_global->__pyx_n_s_is_set
#define __pyx_kp_u_isenabled __pyx_mstate_global->__pyx_kp_u_isenabled
#define __pyx_n_s_item __pyx_mstate_global->__pyx_n_s_item
#define __pyx_n_s_items __pyx_mstate_global->__pyx_n_s_items
#define __pyx_n_s_iter_user_stream_queue __pyx_mstate_global->__pyx_n_s_iter_user_stream_queue
#define __pyx_n_s_json __pyx_mstate_global->__pyx_n_s_json
#define __pyx_n_s_key __pyx_mstate_global->__pyx_n_s_key
#define __pyx_n_s_keys __pyx_mstate_global->__pyx_n_s_keys
#define __pyx_n_s_kwargs __pyx_mstate_global->__pyx_n_s_kwargs
#define __pyx_n_u_lastTradeRate __pyx_mstate_global->__pyx_n_u_lastTradeRate
#define __pyx_n_s_last_state __pyx_mstate_global->__pyx_n_s_last_state
#define __pyx_n_s_last_tick __pyx_mstate_global->__pyx_n_s_last_tick
#define __pyx_n_s_last_trade_rate __pyx_mstate_global->__pyx_n_s_last_trade_rate
#define __pyx_n_u_limit __pyx_mstate_global->__pyx_n_u_limit
#define __pyx_n_s_list_orders __pyx_mstate_global->__pyx_n_s_list_orders
#define __pyx_n_s_local_asset_names __pyx_mstate_global->__pyx_n_s_local_asset_names
#define __pyx_n_s_logger __pyx_mstate_global->__pyx_n_s_logger
#define __pyx_n_s_logging __pyx_mstate_global->__pyx_n_s_logging
#define __pyx_n_s_lower __pyx_mstate_global->__pyx_n_s_lower
#define __pyx_n_s_main __pyx_mstate_global->__pyx_n_s_main
#define __pyx_n_s_market __pyx_mstate_global->__pyx_n_s_market
#define __pyx_n_u_marketSymbol __pyx_mstate_global->__pyx_n_u_marketSymbol
#define __pyx_n_s_market_dict __pyx_mstate_global->__pyx_n_s_market_dict
#define __pyx_n_s_market_list __pyx_mstate_global->__pyx_n_s_market_list
#define __pyx_n_s_market_path_url __pyx_mstate_global->__pyx_n_s_market_path_url
#define __pyx_kp_u_markets __pyx_mstate_global->__pyx_kp_u_markets
#define __pyx_kp_u_markets_tickers __pyx_mstate_global->__pyx_kp_u_markets_tickers
#define __pyx_n_u_minTradeSize __pyx_mstate_global->__pyx_n_u_minTradeSize
#define __pyx_n_s_min_base_amount_increment __pyx_mstate_global->__pyx_n_s_min_base_amount_increment
#define __pyx_n_s_min_btc_value __pyx_mstate_global->__pyx_n_s_min_btc_value
#define __pyx_n_s_min_order_size __pyx_mstate_global->__pyx_n_s_min_order_size
#define __pyx_n_s_min_order_value __pyx_mstate_global->__pyx_n_s_min_order_value
#define __pyx_n_s_min_price_increment __pyx_mstate_global->__pyx_n_s_min_price_increment
#define __pyx_n_s_min_quote_amount_increment __pyx_mstate_global->__pyx_n_s_min_quote_amount_increment
#define __pyx_n_s_min_trade_size __pyx_mstate_global->__pyx_n_s_min_trade_size
#define __pyx_n_s_name __pyx_mstate_global->__pyx_n_s_name
#define __pyx_n_s_name_2 __pyx_mstate_global->__pyx_n_s_name_2
#define __pyx_n_s_network __pyx_mstate_global->__pyx_n_s_network
#define __pyx_n_s_new_confirmed_amount __pyx_mstate_global->__pyx_n_s_new_confirmed_amount
#define __pyx_kp_u_numpy_core_multiarray_failed_to __pyx_mstate_global->__pyx_kp_u_numpy_core_multiarray_failed_to
#define __pyx_kp_u_numpy_core_umath_failed_to_impor __pyx_mstate_global->__pyx_kp_u_numpy_core_umath_failed_to_impor
#define __pyx_n_s_o __pyx_mstate_global->__pyx_n_s_o
#define __pyx_kp_u_of_the __pyx_mstate_global->__pyx_kp_u_of_the
#define __pyx_n_s_oid __pyx_mstate_global->__pyx_n_s_oid
#define __pyx_kp_u_on_Bittrex_Check_API_key_and_ne __pyx_mstate_global->__pyx_kp_u_on_Bittrex_Check_API_key_and_ne
#define __pyx_kp_u_on_order_status_update_Order_no __pyx_mstate_global->__pyx_kp_u_on_order_status_update_Order_no
#define __pyx_n_s_open_orders __pyx_mstate_global->__pyx_n_s_open_orders
#define __pyx_kp_u_order __pyx_mstate_global->__pyx_kp_u_order
#define __pyx_n_s_order_2 __pyx_mstate_global->__pyx_n_s_order_2
#define __pyx_n_u_order_2 __pyx_mstate_global->__pyx_n_u_order_2
#define __pyx_n_u_order_book_initialized __pyx_mstate_global->__pyx_n_u_order_book_initialized
#define __pyx_n_s_order_books __pyx_mstate_global->__pyx_n_s_order_books
#define __pyx_n_s_order_id __pyx_mstate_global->__pyx_n_s_order_id
#define __pyx_n_s_order_id_set __pyx_mstate_global->__pyx_n_s_order_id_set
#define __pyx_n_s_order_result __pyx_mstate_global->__pyx_n_s_order_result
#define __pyx_n_s_order_side __pyx_mstate_global->__pyx_n_s_order_side
#define __pyx_n_s_order_state __pyx_mstate_global->__pyx_n_s_order_state
#define __pyx_n_s_order_status __pyx_mstate_global->__pyx_n_s_order_status
#define __pyx_kp_u_order_to_Bittrex_for __pyx_mstate_global->__pyx_kp_u_order_to_Bittrex_for
#define __pyx_n_s_order_type __pyx_mstate_global->__pyx_n_s_order_type
#define __pyx_n_s_order_type_description __pyx_mstate_global->__pyx_n_s_order_type_description
#define __pyx_n_s_order_type_str __pyx_mstate_global->__pyx_n_s_order_type_str
#define __pyx_kp_u_orders __pyx_mstate_global->__pyx_kp_u_orders
#define __pyx_kp_u_orders_2 __pyx_mstate_global->__pyx_kp_u_orders_2
#define __pyx_kp_u_orders_open __pyx_mstate_global->__pyx_kp_u_orders_open
#define __pyx_kp_u_out_of __pyx_mstate_global->__pyx_kp_u_out_of
#define __pyx_n_s_owner __pyx_mstate_global->__pyx_n_s_owner
#define __pyx_n_s_pandas __pyx_mstate_global->__pyx_n_s_pandas
#define __pyx_n_s_params __pyx_mstate_global->__pyx_n_s_params
#define __pyx_n_s_path_url __pyx_mstate_global->__pyx_n_s_path_url
#define __pyx_n_s_pd __pyx_mstate_global->__pyx_n_s_pd
#define __pyx_kp_s_pd_DataFrame __pyx_mstate_global->__pyx_kp_s_pd_DataFrame
#define __pyx_kp_u_ping __pyx_mstate_global->__pyx_kp_u_ping
#define __pyx_n_s_place_order __pyx_mstate_global->__pyx_n_s_place_order
#define __pyx_n_s_poll_interval __pyx_mstate_global->__pyx_n_s_poll_interval
#define __pyx_n_s_precision __pyx_mstate_global->__pyx_n_s_precision
#define __pyx_n_u_precision __pyx_mstate_global->__pyx_n_u_precision
#define __pyx_n_s_price __pyx_mstate_global->__pyx_n_s_price
#define __pyx_n_s_process_api_closed __pyx_mstate_global->__pyx_n_s_process_api_closed
#define __pyx_n_s_pyx_state __pyx_mstate_global->__pyx_n_s_pyx_state
#define __pyx_n_s_pyx_vtable __pyx_mstate_global->__pyx_n_s_pyx_vtable
#define __pyx_n_u_quantity __pyx_mstate_global->__pyx_n_u_quantity
#define __pyx_n_u_quoteCurrencySymbol __pyx_mstate_global->__pyx_n_u_quoteCurrencySymbol
#define __pyx_n_s_quote_amount __pyx_mstate_global->__pyx_n_s_quote_amount
#define __pyx_n_s_quote_asset __pyx_mstate_global->__pyx_n_s_quote_asset
#define __pyx_n_s_quote_currency __pyx_mstate_global->__pyx_n_s_quote_currency
#define __pyx_n_s_ready __pyx_mstate_global->__pyx_n_s_ready
#define __pyx_n_s_reduce __pyx_mstate_global->__pyx_n_s_reduce
#define __pyx_n_s_reduce_cython __pyx_mstate_global->__pyx_n_s_reduce_cython
#define __pyx_n_s_reduce_ex __pyx_mstate_global->__pyx_n_s_reduce_ex
#define __pyx_n_s_remaining_size __pyx_mstate_global->__pyx_n_s_remaining_size
#define __pyx_n_s_remote_asset_names __pyx_mstate_global->__pyx_n_s_remote_asset_names
#define __pyx_n_s_replace __pyx_mstate_global->__pyx_n_s_replace
#define __pyx_n_s_request __pyx_mstate_global->__pyx_n_s_request
#define __pyx_n_s_response __pyx_mstate_global->__pyx_n_s_response
#define __pyx_n_s_restore_tracking_states __pyx_mstate_global->__pyx_n_s_restore_tracking_states
#define __pyx_n_s_result __pyx_mstate_global->__pyx_n_s_result
#define __pyx_n_s_result_list __pyx_mstate_global->__pyx_n_s_result_list
#define __pyx_n_s_return __pyx_mstate_global->__pyx_n_s_return
#define __pyx_n_s_return_exceptions __pyx_mstate_global->__pyx_n_s_return_exceptions
#define __pyx_n_s_retval __pyx_mstate_global->__pyx_n_s_retval
#define __pyx_n_s_s_decimal_0 __pyx_mstate_global->__pyx_n_s_s_decimal_0
#define __pyx_n_s_s_decimal_NaN __pyx_mstate_global->__pyx_n_s_s_decimal_NaN
#define __pyx_n_s_safe_ensure_future __pyx_mstate_global->__pyx_n_s_safe_ensure_future
#define __pyx_n_s_safe_gather __pyx_mstate_global->__pyx_n_s_safe_gather
#define __pyx_n_s_saved_states __pyx_mstate_global->__pyx_n_s_saved_states
#define __pyx_n_s_self __pyx_mstate_global->__pyx_n_s_self
#define __pyx_kp_s_self__events_cannot_be_converted __pyx_mstate_global->__pyx_kp_s_self__events_cannot_be_converted
#define __pyx_kp_u_sell __pyx_mstate_global->__pyx_kp_u_sell
#define __pyx_n_s_sell_2 __pyx_mstate_global->__pyx_n_s_sell_2
#define __pyx_kp_u_sell_order __pyx_mstate_global->__pyx_kp_u_sell_order
#define __pyx_n_s_send __pyx_mstate_global->__pyx_n_s_send
#define __pyx_n_s_set __pyx_mstate_global->__pyx_n_s_set
#define __pyx_n_s_setstate __pyx_mstate_global->__pyx_n_s_setstate
#define __pyx_n_s_setstate_cython __pyx_mstate_global->__pyx_n_s_setstate_cython
#define __pyx_n_s_sleep __pyx_mstate_global->__pyx_n_s_sleep
#define __pyx_n_s_spec __pyx_mstate_global->__pyx_n_s_spec
#define __pyx_n_s_start __pyx_mstate_global->__pyx_n_s_start
#define __pyx_n_s_start_network __pyx_mstate_global->__pyx_n_s_start_network
#define __pyx_n_s_start_tracking_order __pyx_mstate_global->__pyx_n_s_start_tracking_order
#define __pyx_n_s_state_result __pyx_mstate_global->__pyx_n_s_state_result
#define __pyx_n_s_status __pyx_mstate_global->__pyx_n_s_status
#define __pyx_n_u_status __pyx_mstate_global->__pyx_n_u_status
#define __pyx_n_s_status_dict __pyx_mstate_global->__pyx_n_s_status_dict
#define __pyx_n_s_status_polling_loop __pyx_mstate_global->__pyx_n_s_status_polling_loop
#define __pyx_n_s_stop __pyx_mstate_global->__pyx_n_s_stop
#define __pyx_n_s_stop_network __pyx_mstate_global->__pyx_n_s_stop_network
#define __pyx_n_s_stop_network_2 __pyx_mstate_global->__pyx_n_s_stop_network_2
#define __pyx_n_s_str __pyx_mstate_global->__pyx_n_s_str
#define __pyx_n_s_stream_message __pyx_mstate_global->__pyx_n_s_stream_message
#define __pyx_kp_s_stringsource __pyx_mstate_global->__pyx_kp_s_stringsource
#define __pyx_n_s_subaccount_id __pyx_mstate_global->__pyx_n_s_subaccount_id
#define __pyx_n_s_successful_cancellation __pyx_mstate_global->__pyx_n_s_successful_cancellation
#define __pyx_n_s_super __pyx_mstate_global->__pyx_n_s_super
#define __pyx_n_s_supported_order_types __pyx_mstate_global->__pyx_n_s_supported_order_types
#define __pyx_n_u_symbol __pyx_mstate_global->__pyx_n_u_symbol
#define __pyx_n_s_tasks __pyx_mstate_global->__pyx_n_s_tasks
#define __pyx_n_s_test __pyx_mstate_global->__pyx_n_s_test
#define __pyx_n_s_throw __pyx_mstate_global->__pyx_n_s_throw
#define __pyx_n_s_ticker_data __pyx_mstate_global->__pyx_n_s_ticker_data
#define __pyx_n_s_ticker_list __pyx_mstate_global->__pyx_n_s_ticker_list
#define __pyx_n_s_ticker_path_url __pyx_mstate_global->__pyx_n_s_ticker_path_url
#define __pyx_n_u_timeInForce __pyx_mstate_global->__pyx_n_u_timeInForce
#define __pyx_n_s_timeout __pyx_mstate_global->__pyx_n_s_timeout
#define __pyx_n_s_timeout_seconds __pyx_mstate_global->__pyx_n_s_timeout_seconds
#define __pyx_n_s_to_json __pyx_mstate_global->__pyx_n_s_to_json
#define __pyx_n_s_to_limit_order __pyx_mstate_global->__pyx_n_s_to_limit_order
#define __pyx_n_u_total __pyx_mstate_global->__pyx_n_u_total
#define __pyx_n_s_total_balance __pyx_mstate_global->__pyx_n_s_total_balance
#define __pyx_n_s_tracked_order __pyx_mstate_global->__pyx_n_s_tracked_order
#define __pyx_n_s_tracked_orders __pyx_mstate_global->__pyx_n_s_tracked_orders
#define __pyx_n_s_trade_type __pyx_mstate_global->__pyx_n_s_trade_type
#define __pyx_n_s_trading_pair __pyx_mstate_global->__pyx_n_s_trading_pair
#define __pyx_n_s_trading_pairs __pyx_mstate_global->__pyx_n_s_trading_pairs
#define __pyx_n_s_trading_required __pyx_mstate_global->__pyx_n_s_trading_required
#define __pyx_n_s_trading_rule __pyx_mstate_global->__pyx_n_s_trading_rule
#define __pyx_n_u_trading_rule_initialized __pyx_mstate_global->__pyx_n_u_trading_rule_initialized
#define __pyx_n_s_trading_rules_list __pyx_mstate_global->__pyx_n_s_trading_rules_list
#define __pyx_n_s_trading_rules_polling_loop __pyx_mstate_global->__pyx_n_s_trading_rules_polling_loop
#define __pyx_n_u_type __pyx_mstate_global->__pyx_n_u_type
#define __pyx_n_s_typing __pyx_mstate_global->__pyx_n_s_typing
#define __pyx_n_s_update __pyx_mstate_global->__pyx_n_s_update
#define __pyx_n_s_update_balances __pyx_mstate_global->__pyx_n_s_update_balances
#define __pyx_n_s_update_exchange_order_id __pyx_mstate_global->__pyx_n_s_update_exchange_order_id
#define __pyx_n_s_update_order_status __pyx_mstate_global->__pyx_n_s_update_order_status
#define __pyx_n_s_update_order_status_locals_gene __pyx_mstate_global->__pyx_n_s_update_order_status_locals_gene
#define __pyx_n_s_update_trading_rules __pyx_mstate_global->__pyx_n_s_update_trading_rules
#define __pyx_n_s_url __pyx_mstate_global->__pyx_n_s_url
#define __pyx_n_s_user_stream __pyx_mstate_global->__pyx_n_s_user_stream
#define __pyx_n_s_user_stream_event_listener __pyx_mstate_global->__pyx_n_s_user_stream_event_listener
#define __pyx_n_s_value __pyx_mstate_global->__pyx_n_s_value
#define __pyx_n_s_values __pyx_mstate_global->__pyx_n_s_values
#define __pyx_n_s_wait __pyx_mstate_global->__pyx_n_s_wait
#define __pyx_n_s_warning __pyx_mstate_global->__pyx_n_s_warning
#define __pyx_kp_u_which_is_already_closed_Order_d __pyx_mstate_global->__pyx_kp_u_which_is_already_closed_Order_d
#define __pyx_kp_u_ws __pyx_mstate_global->__pyx_kp_u_ws
#define __pyx_float_0_0 __pyx_mstate_global->__pyx_float_0_0
#define __pyx_float_0_5 __pyx_mstate_global->__pyx_float_0_5
#define __pyx_float_1_0 __pyx_mstate_global->__pyx_float_1_0
#define __pyx_float_5_0 __pyx_mstate_global->__pyx_float_5_0
#define __pyx_float_10_0 __pyx_mstate_global->__pyx_float_10_0
#define __pyx_int_0 __pyx_mstate_global->__pyx_int_0
#define __pyx_int_1 __pyx_mstate_global->__pyx_int_1
#define __pyx_int_3 __pyx_mstate_global->__pyx_int_3
#define __pyx_int_200 __pyx_mstate_global->__pyx_int_200
#define __pyx_int_201 __pyx_mstate_global->__pyx_int_201
#define __pyx_int_300 __pyx_mstate_global->__pyx_int_300
#define __pyx_k__24 __pyx_mstate_global->__pyx_k__24
#define __pyx_k__26 __pyx_mstate_global->__pyx_k__26
#define __pyx_k__27 __pyx_mstate_global->__pyx_k__27
#define __pyx_k__28 __pyx_mstate_global->__pyx_k__28
#define __pyx_k__29 __pyx_mstate_global->__pyx_k__29
#define __pyx_k__31 __pyx_mstate_global->__pyx_k__31
#define __pyx_k__42 __pyx_mstate_global->__pyx_k__42
#define __pyx_k__43 __pyx_mstate_global->__pyx_k__43
#define __pyx_k__44 __pyx_mstate_global->__pyx_k__44
#define __pyx_k__45 __pyx_mstate_global->__pyx_k__45
#define __pyx_k__46 __pyx_mstate_global->__pyx_k__46
#define __pyx_k__79 __pyx_mstate_global->__pyx_k__79
#define __pyx_k__81 __pyx_mstate_global->__pyx_k__81
#define __pyx_tuple__4 __pyx_mstate_global->__pyx_tuple__4
#define __pyx_tuple__6 __pyx_mstate_global->__pyx_tuple__6
#define __pyx_tuple__14 __pyx_mstate_global->__pyx_tuple__14
#define __pyx_tuple__16 __pyx_mstate_global->__pyx_tuple__16
#define __pyx_tuple__18 __pyx_mstate_global->__pyx_tuple__18
#define __pyx_tuple__20 __pyx_mstate_global->__pyx_tuple__20
#define __pyx_tuple__23 __pyx_mstate_global->__pyx_tuple__23
#define __pyx_tuple__33 __pyx_mstate_global->__pyx_tuple__33
#define __pyx_tuple__35 __pyx_mstate_global->__pyx_tuple__35
#define __pyx_tuple__36 __pyx_mstate_global->__pyx_tuple__36
#define __pyx_tuple__47 __pyx_mstate_global->__pyx_tuple__47
#define __pyx_tuple__48 __pyx_mstate_global->__pyx_tuple__48
#define __pyx_tuple__50 __pyx_mstate_global->__pyx_tuple__50
#define __pyx_tuple__51 __pyx_mstate_global->__pyx_tuple__51
#define __pyx_tuple__52 __pyx_mstate_global->__pyx_tuple__52
#define __pyx_tuple__54 __pyx_mstate_global->__pyx_tuple__54
#define __pyx_tuple__56 __pyx_mstate_global->__pyx_tuple__56
#define __pyx_tuple__58 __pyx_mstate_global->__pyx_tuple__58
#define __pyx_tuple__60 __pyx_mstate_global->__pyx_tuple__60
#define __pyx_tuple__61 __pyx_mstate_global->__pyx_tuple__61
#define __pyx_tuple__62 __pyx_mstate_global->__pyx_tuple__62
#define __pyx_tuple__64 __pyx_mstate_global->__pyx_tuple__64
#define __pyx_tuple__65 __pyx_mstate_global->__pyx_tuple__65
#define __pyx_tuple__66 __pyx_mstate_global->__pyx_tuple__66
#define __pyx_tuple__67 __pyx_mstate_global->__pyx_tuple__67
#define __pyx_tuple__69 __pyx_mstate_global->__pyx_tuple__69
#define __pyx_tuple__70 __pyx_mstate_global->__pyx_tuple__70
#define __pyx_tuple__71 __pyx_mstate_global->__pyx_tuple__71
#define __pyx_tuple__72 __pyx_mstate_global->__pyx_tuple__72
#define __pyx_tuple__73 __pyx_mstate_global->__pyx_tuple__73
#define __pyx_tuple__75 __pyx_mstate_global->__pyx_tuple__75
#define __pyx_tuple__77 __pyx_mstate_global->__pyx_tuple__77
#define __pyx_tuple__78 __pyx_mstate_global->__pyx_tuple__78
#define __pyx_tuple__80 __pyx_mstate_global->__pyx_tuple__80
#define __pyx_tuple__82 __pyx_mstate_global->__pyx_tuple__82
#define __pyx_tuple__83 __pyx_mstate_global->__pyx_tuple__83
#define __pyx_tuple__84 __pyx_mstate_global->__pyx_tuple__84
#define __pyx_tuple__85 __pyx_mstate_global->__pyx_tuple__85
#define __pyx_tuple__86 __pyx_mstate_global->__pyx_tuple__86
#define __pyx_tuple__87 __pyx_mstate_global->__pyx_tuple__87
#define __pyx_tuple__88 __pyx_mstate_global->__pyx_tuple__88
#define __pyx_tuple__90 __pyx_mstate_global->__pyx_tuple__90
#define __pyx_tuple__91 __pyx_mstate_global->__pyx_tuple__91
#define __pyx_tuple__92 __pyx_mstate_global->__pyx_tuple__92
#define __pyx_tuple__94 __pyx_mstate_global->__pyx_tuple__94
#define __pyx_tuple__96 __pyx_mstate_global->__pyx_tuple__96
#define __pyx_tuple__98 __pyx_mstate_global->__pyx_tuple__98
#define __pyx_codeobj__2 __pyx_mstate_global->__pyx_codeobj__2
#define __pyx_codeobj__3 __pyx_mstate_global->__pyx_codeobj__3
#define __pyx_codeobj__5 __pyx_mstate_global->__pyx_codeobj__5
#define __pyx_codeobj__7 __pyx_mstate_global->__pyx_codeobj__7
#define __pyx_codeobj__8 __pyx_mstate_global->__pyx_codeobj__8
#define __pyx_tuple__100 __pyx_mstate_global->__pyx_tuple__100
#define __pyx_tuple__102 __pyx_mstate_global->__pyx_tuple__102
#define __pyx_tuple__104 __pyx_mstate_global->__pyx_tuple__104
#define __pyx_tuple__106 __pyx_mstate_global->__pyx_tuple__106
#define __pyx_codeobj__13 __pyx_mstate_global->__pyx_codeobj__13
#define __pyx_codeobj__15 __pyx_mstate_global->__pyx_codeobj__15
#define __pyx_codeobj__17 __pyx_mstate_global->__pyx_codeobj__17
#define __pyx_codeobj__19 __pyx_mstate_global->__pyx_codeobj__19
#define __pyx_codeobj__22 __pyx_mstate_global->__pyx_codeobj__22
#define __pyx_codeobj__25 __pyx_mstate_global->__pyx_codeobj__25
#define __pyx_codeobj__30 __pyx_mstate_global->__pyx_codeobj__30
#define __pyx_codeobj__32 __pyx_mstate_global->__pyx_codeobj__32
#define __pyx_codeobj__34 __pyx_mstate_global->__pyx_codeobj__34
#define __pyx_codeobj__37 __pyx_mstate_global->__pyx_codeobj__37
#define __pyx_codeobj__38 __pyx_mstate_global->__pyx_codeobj__38
#define __pyx_codeobj__39 __pyx_mstate_global->__pyx_codeobj__39
#define __pyx_codeobj__40 __pyx_mstate_global->__pyx_codeobj__40
#define __pyx_codeobj__41 __pyx_mstate_global->__pyx_codeobj__41
#define __pyx_codeobj__53 __pyx_mstate_global->__pyx_codeobj__53
#define __pyx_codeobj__55 __pyx_mstate_global->__pyx_codeobj__55
#define __pyx_codeobj__57 __pyx_mstate_global->__pyx_codeobj__57
#define __pyx_codeobj__59 __pyx_mstate_global->__pyx_codeobj__59
#define __pyx_codeobj__63 __pyx_mstate_global->__pyx_codeobj__63
#define __pyx_codeobj__68 __pyx_mstate_global->__pyx_codeobj__68
#define __pyx_codeobj__74 __pyx_mstate_global->__pyx_codeobj__74
#define __pyx_codeobj__76 __pyx_mstate_global->__pyx_codeobj__76
#define __pyx_codeobj__89 __pyx_mstate_global->__pyx_codeobj__89
#define __pyx_codeobj__93 __pyx_mstate_global->__pyx_codeobj__93
#define __pyx_codeobj__95 __pyx_mstate_global->__pyx_codeobj__95
#define __pyx_codeobj__97 __pyx_mstate_global->__pyx_codeobj__97
#define __pyx_codeobj__99 __pyx_mstate_global->__pyx_codeobj__99
#define __pyx_codeobj__101 __pyx_mstate_global->__pyx_codeobj__101
#define __pyx_codeobj__103 __pyx_mstate_global->__pyx_codeobj__103
#define __pyx_codeobj__105 __pyx_mstate_global->__pyx_codeobj__105
#define __pyx_codeobj__107 __pyx_mstate_global->__pyx_codeobj__107
#endif
/* #### Code section: module_code ### */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":46
 *         BittrexExchange _owner
 * 
 *     def __init__(self, owner: BittrexExchange):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._owner = owner
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_owner = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_owner,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_owner,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_owner)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 46, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 46, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
    }
    __pyx_v_owner = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 46, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchangeTransactionTracker.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_owner), __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange, 1, "owner", 0))) __PYX_ERR(0, 46, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker___init__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *)__pyx_v_self), __pyx_v_owner);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker___init__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *__pyx_v_self, struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_owner) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":47
 * 
 *     def __init__(self, owner: BittrexExchange):
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         self._owner = owner
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker));
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":48
 *     def __init__(self, owner: BittrexExchange):
 *         super().__init__()
 *         self._owner = owner             # <<<<<<<<<<<<<<
 * 
 *     cdef c_did_timeout_tx(self, str tx_id):
 */
  __Pyx_INCREF((PyObject *)__pyx_v_owner);
  __Pyx_GIVEREF((PyObject *)__pyx_v_owner);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_owner);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_owner);
  __pyx_v_self->_owner = __pyx_v_owner;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":46
 *         BittrexExchange _owner
 * 
 *     def __init__(self, owner: BittrexExchange):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._owner = owner
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchangeTransactionTracker.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":50
 *         self._owner = owner
 * 
 *     cdef c_did_timeout_tx(self, str tx_id):             # <<<<<<<<<<<<<<
 *         TransactionTracker.c_did_timeout_tx(self, tx_id)
 *         self._owner.c_did_timeout_tx(tx_id)
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_c_did_timeout_tx(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *__pyx_v_self, PyObject *__pyx_v_tx_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_timeout_tx", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":51
 * 
 *     cdef c_did_timeout_tx(self, str tx_id):
 *         TransactionTracker.c_did_timeout_tx(self, tx_id)             # <<<<<<<<<<<<<<
 *         self._owner.c_did_timeout_tx(tx_id)
 * 
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->c_did_timeout_tx(((struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *)__pyx_v_self), __pyx_v_tx_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":52
 *     cdef c_did_timeout_tx(self, str tx_id):
 *         TransactionTracker.c_did_timeout_tx(self, tx_id)
 *         self._owner.c_did_timeout_tx(tx_id)             # <<<<<<<<<<<<<<
 * 
 * cdef class BittrexExchange(ExchangeBase):
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self->_owner->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_did_timeout_tx(__pyx_v_self->_owner, __pyx_v_tx_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":50
 *         self._owner = owner
 * 
 *     cdef c_did_timeout_tx(self, str tx_id):             # <<<<<<<<<<<<<<
 *         TransactionTracker.c_did_timeout_tx(self, tx_id)
 *         self._owner.c_did_timeout_tx(tx_id)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchangeTransactionTracker.c_did_timeout_tx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_2__reduce_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__events_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchangeTransactionTracker.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchangeTransactionTracker.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_4__setstate_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__events_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchangeTransactionTracker.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":71
 *     BITTREX_API_ENDPOINT = "https://api.bittrex.com/v3"
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls) -> HummingbotLogger:
 *         global bm_logger
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_1logger(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_1logger = {"logger", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_1logger, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_1logger(PyObject *__pyx_v_cls, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logger (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("logger", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "logger", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_logger(((PyTypeObject*)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_logger(CYTHON_UNUSED PyTypeObject *__pyx_v_cls) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("logger", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":74
 *     def logger(cls) -> HummingbotLogger:
 *         global bm_logger
 *         if bm_logger is None:             # <<<<<<<<<<<<<<
 *             bm_logger = logging.getLogger(__name__)
 *         return bm_logger
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_bm_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__pyx_t_1 == Py_None);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":75
 *         global bm_logger
 *         if bm_logger is None:
 *             bm_logger = logging.getLogger(__name__)             # <<<<<<<<<<<<<<
 *         return bm_logger
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_logging); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_getLogger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_7 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    if (PyDict_SetItem(__pyx_d, __pyx_n_s_bm_logger, __pyx_t_1) < 0) __PYX_ERR(0, 75, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":74
 *     def logger(cls) -> HummingbotLogger:
 *         global bm_logger
 *         if bm_logger is None:             # <<<<<<<<<<<<<<
 *             bm_logger = logging.getLogger(__name__)
 *         return bm_logger
 */
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":76
 *         if bm_logger is None:
 *             bm_logger = logging.getLogger(__name__)
 *         return bm_logger             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_bm_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":71
 *     BITTREX_API_ENDPOINT = "https://api.bittrex.com/v3"
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls) -> HummingbotLogger:
 *         global bm_logger
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.logger", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":78
 *         return bm_logger
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  bittrex_api_key: str,
 *                  bittrex_secret_key: str,
 */

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_bittrex_api_key = 0;
  PyObject *__pyx_v_bittrex_secret_key = 0;
  double __pyx_v_poll_interval;
  PyObject *__pyx_v_trading_pairs = 0;
  PyObject *__pyx_v_trading_required = 0;
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bittrex_api_key,&__pyx_n_s_bittrex_secret_key,&__pyx_n_s_poll_interval,&__pyx_n_s_trading_pairs,&__pyx_n_s_trading_required,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_bittrex_api_key,&__pyx_n_s_bittrex_secret_key,&__pyx_n_s_poll_interval,&__pyx_n_s_trading_pairs,&__pyx_n_s_trading_required,0};
    #endif
    PyObject* values[5] = {0,0,0,0,0};

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":82
 *                  bittrex_secret_key: str,
 *                  poll_interval: float = 5.0,
 *                  trading_pairs: Optional[List[str]] = None,             # <<<<<<<<<<<<<<
 *                  trading_required: bool = True):
 *         super().__init__()
 */
    values[3] = ((PyObject *)Py_None);

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":83
 *                  poll_interval: float = 5.0,
 *                  trading_pairs: Optional[List[str]] = None,
 *                  trading_required: bool = True):             # <<<<<<<<<<<<<<
 *         super().__init__()
 *         self._account_available_balances = {}
 */
    values[4] = ((PyObject *)Py_True);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_VARARGS(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bittrex_api_key)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 78, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_bittrex_secret_key)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 78, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 5, 1); __PYX_ERR(0, 78, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_poll_interval);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 78, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pairs);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 78, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_VARARGS(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_required);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 78, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__init__") < 0)) __PYX_ERR(0, 78, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_VARARGS(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_VARARGS(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_VARARGS(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_VARARGS(__pyx_args, 1);
        values[0] = __Pyx_Arg_VARARGS(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_bittrex_api_key = ((PyObject*)values[0]);
    __pyx_v_bittrex_secret_key = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_poll_interval = __pyx_PyFloat_AsDouble(values[2]); if (unlikely((__pyx_v_poll_interval == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 81, __pyx_L3_error)
    } else {
      __pyx_v_poll_interval = ((double)5.0);
    }
    __pyx_v_trading_pairs = values[3];
    __pyx_v_trading_required = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 5, __pyx_nargs); __PYX_ERR(0, 78, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bittrex_api_key), (&PyUnicode_Type), 1, "bittrex_api_key", 1))) __PYX_ERR(0, 79, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bittrex_secret_key), (&PyUnicode_Type), 1, "bittrex_secret_key", 1))) __PYX_ERR(0, 80, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_2__init__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), __pyx_v_bittrex_api_key, __pyx_v_bittrex_secret_key, __pyx_v_poll_interval, __pyx_v_trading_pairs, __pyx_v_trading_required);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":78
 *         return bm_logger
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  bittrex_api_key: str,
 *                  bittrex_secret_key: str,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_2__init__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_bittrex_api_key, PyObject *__pyx_v_bittrex_secret_key, double __pyx_v_poll_interval, PyObject *__pyx_v_trading_pairs, PyObject *__pyx_v_trading_required) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":84
 *                  trading_pairs: Optional[List[str]] = None,
 *                  trading_required: bool = True):
 *         super().__init__()             # <<<<<<<<<<<<<<
 *         self._account_available_balances = {}
 *         self._account_balances = {}
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);
  __Pyx_GIVEREF((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange));
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_super, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_init); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":85
 *                  trading_required: bool = True):
 *         super().__init__()
 *         self._account_available_balances = {}             # <<<<<<<<<<<<<<
 *         self._account_balances = {}
 *         self._account_id = ""
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.__pyx_base._account_available_balances);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.__pyx_base._account_available_balances);
  __pyx_v_self->__pyx_base.__pyx_base._account_available_balances = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":86
 *         super().__init__()
 *         self._account_available_balances = {}
 *         self._account_balances = {}             # <<<<<<<<<<<<<<
 *         self._account_id = ""
 *         self._bittrex_auth = BittrexAuth(bittrex_api_key, bittrex_secret_key)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base.__pyx_base._account_balances);
  __Pyx_DECREF(__pyx_v_self->__pyx_base.__pyx_base._account_balances);
  __pyx_v_self->__pyx_base.__pyx_base._account_balances = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":87
 *         self._account_available_balances = {}
 *         self._account_balances = {}
 *         self._account_id = ""             # <<<<<<<<<<<<<<
 *         self._bittrex_auth = BittrexAuth(bittrex_api_key, bittrex_secret_key)
 *         self._ev_loop = asyncio.get_event_loop()
 */
  __Pyx_INCREF(__pyx_kp_u_);
  __Pyx_GIVEREF(__pyx_kp_u_);
  __Pyx_GOTREF(__pyx_v_self->_account_id);
  __Pyx_DECREF(__pyx_v_self->_account_id);
  __pyx_v_self->_account_id = __pyx_kp_u_;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":88
 *         self._account_balances = {}
 *         self._account_id = ""
 *         self._bittrex_auth = BittrexAuth(bittrex_api_key, bittrex_secret_key)             # <<<<<<<<<<<<<<
 *         self._ev_loop = asyncio.get_event_loop()
 *         self._in_flight_orders = {}
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_BittrexAuth); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_bittrex_api_key, __pyx_v_bittrex_secret_key};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_bittrex_auth);
  __Pyx_DECREF(__pyx_v_self->_bittrex_auth);
  __pyx_v_self->_bittrex_auth = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":89
 *         self._account_id = ""
 *         self._bittrex_auth = BittrexAuth(bittrex_api_key, bittrex_secret_key)
 *         self._ev_loop = asyncio.get_event_loop()             # <<<<<<<<<<<<<<
 *         self._in_flight_orders = {}
 *         self._last_poll_timestamp = 0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_event_loop); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_2, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_ev_loop);
  __Pyx_DECREF(__pyx_v_self->_ev_loop);
  __pyx_v_self->_ev_loop = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":90
 *         self._bittrex_auth = BittrexAuth(bittrex_api_key, bittrex_secret_key)
 *         self._ev_loop = asyncio.get_event_loop()
 *         self._in_flight_orders = {}             # <<<<<<<<<<<<<<
 *         self._last_poll_timestamp = 0
 *         self._last_timestamp = 0
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_self->_in_flight_orders);
  __Pyx_DECREF(__pyx_v_self->_in_flight_orders);
  __pyx_v_self->_in_flight_orders = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":91
 *         self._ev_loop = asyncio.get_event_loop()
 *         self._in_flight_orders = {}
 *         self._last_poll_timestamp = 0             # <<<<<<<<<<<<<<
 *         self._last_timestamp = 0
 *         self._order_book_tracker = BittrexOrderBookTracker(trading_pairs=trading_pairs)
 */
  __pyx_v_self->_last_poll_timestamp = 0.0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":92
 *         self._in_flight_orders = {}
 *         self._last_poll_timestamp = 0
 *         self._last_timestamp = 0             # <<<<<<<<<<<<<<
 *         self._order_book_tracker = BittrexOrderBookTracker(trading_pairs=trading_pairs)
 *         self._order_not_found_records = {}
 */
  __pyx_v_self->_last_timestamp = 0.0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":93
 *         self._last_poll_timestamp = 0
 *         self._last_timestamp = 0
 *         self._order_book_tracker = BittrexOrderBookTracker(trading_pairs=trading_pairs)             # <<<<<<<<<<<<<<
 *         self._order_not_found_records = {}
 *         self._poll_notifier = asyncio.Event()
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_BittrexOrderBookTracker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_trading_pairs, __pyx_v_trading_pairs) < 0) __PYX_ERR(0, 93, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->__pyx_base._order_book_tracker);
  __Pyx_DECREF(__pyx_v_self->__pyx_base._order_book_tracker);
  __pyx_v_self->__pyx_base._order_book_tracker = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":94
 *         self._last_timestamp = 0
 *         self._order_book_tracker = BittrexOrderBookTracker(trading_pairs=trading_pairs)
 *         self._order_not_found_records = {}             # <<<<<<<<<<<<<<
 *         self._poll_notifier = asyncio.Event()
 *         self._poll_interval = poll_interval
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_order_not_found_records);
  __Pyx_DECREF(__pyx_v_self->_order_not_found_records);
  __pyx_v_self->_order_not_found_records = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":95
 *         self._order_book_tracker = BittrexOrderBookTracker(trading_pairs=trading_pairs)
 *         self._order_not_found_records = {}
 *         self._poll_notifier = asyncio.Event()             # <<<<<<<<<<<<<<
 *         self._poll_interval = poll_interval
 *         self._shared_client = None
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Event); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_poll_notifier);
  __Pyx_DECREF(__pyx_v_self->_poll_notifier);
  __pyx_v_self->_poll_notifier = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":96
 *         self._order_not_found_records = {}
 *         self._poll_notifier = asyncio.Event()
 *         self._poll_interval = poll_interval             # <<<<<<<<<<<<<<
 *         self._shared_client = None
 *         self._status_polling_task = None
 */
  __pyx_v_self->_poll_interval = __pyx_v_poll_interval;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":97
 *         self._poll_notifier = asyncio.Event()
 *         self._poll_interval = poll_interval
 *         self._shared_client = None             # <<<<<<<<<<<<<<
 *         self._status_polling_task = None
 *         self._trading_required = trading_required
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_shared_client);
  __Pyx_DECREF(__pyx_v_self->_shared_client);
  __pyx_v_self->_shared_client = Py_None;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":98
 *         self._poll_interval = poll_interval
 *         self._shared_client = None
 *         self._status_polling_task = None             # <<<<<<<<<<<<<<
 *         self._trading_required = trading_required
 *         self._trading_rules = {}
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_status_polling_task);
  __Pyx_DECREF(__pyx_v_self->_status_polling_task);
  __pyx_v_self->_status_polling_task = Py_None;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":99
 *         self._shared_client = None
 *         self._status_polling_task = None
 *         self._trading_required = trading_required             # <<<<<<<<<<<<<<
 *         self._trading_rules = {}
 *         self._trading_rules_polling_task = None
 */
  __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_v_trading_required); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 99, __pyx_L1_error)
  __pyx_v_self->__pyx_base.__pyx_base._trading_required = __pyx_t_5;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":100
 *         self._status_polling_task = None
 *         self._trading_required = trading_required
 *         self._trading_rules = {}             # <<<<<<<<<<<<<<
 *         self._trading_rules_polling_task = None
 *         self._tx_tracker = BittrexExchangeTransactionTracker(self)
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF(__pyx_v_self->_trading_rules);
  __Pyx_DECREF(__pyx_v_self->_trading_rules);
  __pyx_v_self->_trading_rules = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":101
 *         self._trading_required = trading_required
 *         self._trading_rules = {}
 *         self._trading_rules_polling_task = None             # <<<<<<<<<<<<<<
 *         self._tx_tracker = BittrexExchangeTransactionTracker(self)
 *         self._user_stream_event_listener_task = None
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_trading_rules_polling_task);
  __Pyx_DECREF(__pyx_v_self->_trading_rules_polling_task);
  __pyx_v_self->_trading_rules_polling_task = Py_None;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":102
 *         self._trading_rules = {}
 *         self._trading_rules_polling_task = None
 *         self._tx_tracker = BittrexExchangeTransactionTracker(self)             # <<<<<<<<<<<<<<
 *         self._user_stream_event_listener_task = None
 *         self._user_stream_tracker = BittrexUserStreamTracker(bittrex_auth=self._bittrex_auth,
 */
  __pyx_t_2 = __Pyx_PyObject_CallOneArg(((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker), ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __Pyx_GOTREF((PyObject *)__pyx_v_self->_tx_tracker);
  __Pyx_DECREF((PyObject *)__pyx_v_self->_tx_tracker);
  __pyx_v_self->_tx_tracker = ((struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":103
 *         self._trading_rules_polling_task = None
 *         self._tx_tracker = BittrexExchangeTransactionTracker(self)
 *         self._user_stream_event_listener_task = None             # <<<<<<<<<<<<<<
 *         self._user_stream_tracker = BittrexUserStreamTracker(bittrex_auth=self._bittrex_auth,
 *                                                              trading_pairs=trading_pairs)
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_user_stream_event_listener_task);
  __Pyx_DECREF(__pyx_v_self->_user_stream_event_listener_task);
  __pyx_v_self->_user_stream_event_listener_task = Py_None;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":104
 *         self._tx_tracker = BittrexExchangeTransactionTracker(self)
 *         self._user_stream_event_listener_task = None
 *         self._user_stream_tracker = BittrexUserStreamTracker(bittrex_auth=self._bittrex_auth,             # <<<<<<<<<<<<<<
 *                                                              trading_pairs=trading_pairs)
 *         self._user_stream_tracker_task = None
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_BittrexUserStreamTracker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_bittrex_auth, __pyx_v_self->_bittrex_auth) < 0) __PYX_ERR(0, 104, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":105
 *         self._user_stream_event_listener_task = None
 *         self._user_stream_tracker = BittrexUserStreamTracker(bittrex_auth=self._bittrex_auth,
 *                                                              trading_pairs=trading_pairs)             # <<<<<<<<<<<<<<
 *         self._user_stream_tracker_task = None
 *         self._check_network_interval = 60.0
 */
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_trading_pairs, __pyx_v_trading_pairs) < 0) __PYX_ERR(0, 104, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":104
 *         self._tx_tracker = BittrexExchangeTransactionTracker(self)
 *         self._user_stream_event_listener_task = None
 *         self._user_stream_tracker = BittrexUserStreamTracker(bittrex_auth=self._bittrex_auth,             # <<<<<<<<<<<<<<
 *                                                              trading_pairs=trading_pairs)
 *         self._user_stream_tracker_task = None
 */
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_self->_user_stream_tracker);
  __Pyx_DECREF(__pyx_v_self->_user_stream_tracker);
  __pyx_v_self->_user_stream_tracker = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":106
 *         self._user_stream_tracker = BittrexUserStreamTracker(bittrex_auth=self._bittrex_auth,
 *                                                              trading_pairs=trading_pairs)
 *         self._user_stream_tracker_task = None             # <<<<<<<<<<<<<<
 *         self._check_network_interval = 60.0
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_user_stream_tracker_task);
  __Pyx_DECREF(__pyx_v_self->_user_stream_tracker_task);
  __pyx_v_self->_user_stream_tracker_task = Py_None;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":107
 *                                                              trading_pairs=trading_pairs)
 *         self._user_stream_tracker_task = None
 *         self._check_network_interval = 60.0             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->__pyx_base.__pyx_base.__pyx_base._check_network_interval = 60.0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":78
 *         return bm_logger
 * 
 *     def __init__(self,             # <<<<<<<<<<<<<<
 *                  bittrex_api_key: str,
 *                  bittrex_secret_key: str,
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":109
 *         self._check_network_interval = 60.0
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def name(self) -> str:
 *         return "bittrex"
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_4name_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_4name___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_4name___get__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":111
 *     @property
 *     def name(self) -> str:
 *         return "bittrex"             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_n_u_bittrex);
  __pyx_r = __pyx_n_u_bittrex;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":109
 *         self._check_network_interval = 60.0
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def name(self) -> str:
 *         return "bittrex"
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":113
 *         return "bittrex"
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def order_books(self) -> Dict[str, OrderBook]:
 *         return self._order_book_tracker.order_books
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_11order_books_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_11order_books_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_11order_books___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_11order_books___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":115
 *     @property
 *     def order_books(self) -> Dict[str, OrderBook]:
 *         return self._order_book_tracker.order_books             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_order_books); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 115, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":113
 *         return "bittrex"
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def order_books(self) -> Dict[str, OrderBook]:
 *         return self._order_book_tracker.order_books
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.order_books.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":117
 *         return self._order_book_tracker.order_books
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def bittrex_auth(self) -> BittrexAuth:
 *         return self._bittrex_auth
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_12bittrex_auth_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_12bittrex_auth_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_12bittrex_auth___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_12bittrex_auth___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":119
 *     @property
 *     def bittrex_auth(self) -> BittrexAuth:
 *         return self._bittrex_auth             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_bittrex_auth);
  __pyx_r = __pyx_v_self->_bittrex_auth;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":117
 *         return self._order_book_tracker.order_books
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def bittrex_auth(self) -> BittrexAuth:
 *         return self._bittrex_auth
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":121
 *         return self._bittrex_auth
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def status_dict(self) -> Dict[str, bool]:
 *         return {
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_11status_dict_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_11status_dict_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_11status_dict___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_11status_dict___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":123
 *     @property
 *     def status_dict(self) -> Dict[str, bool]:
 *         return {             # <<<<<<<<<<<<<<
 *             "order_book_initialized": self._order_book_tracker.ready,
 *             "account_balance": len(self._account_balances) > 0 if self._trading_required else True,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":124
 *     def status_dict(self) -> Dict[str, bool]:
 *         return {
 *             "order_book_initialized": self._order_book_tracker.ready,             # <<<<<<<<<<<<<<
 *             "account_balance": len(self._account_balances) > 0 if self._trading_required else True,
 *             "trading_rule_initialized": len(self._trading_rules) > 0 if self._trading_required else True
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_ready); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_order_book_initialized, __pyx_t_2) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":125
 *         return {
 *             "order_book_initialized": self._order_book_tracker.ready,
 *             "account_balance": len(self._account_balances) > 0 if self._trading_required else True,             # <<<<<<<<<<<<<<
 *             "trading_rule_initialized": len(self._trading_rules) > 0 if self._trading_required else True
 *         }
 */
  if ((__pyx_v_self->__pyx_base.__pyx_base._trading_required != 0)) {
    __pyx_t_3 = __pyx_v_self->__pyx_base.__pyx_base._account_balances;
    __Pyx_INCREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 125, __pyx_L1_error)
    }
    __pyx_t_4 = PyDict_Size(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 > 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 125, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_True);
    __pyx_t_2 = Py_True;
  }
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_account_balance, __pyx_t_2) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":126
 *             "order_book_initialized": self._order_book_tracker.ready,
 *             "account_balance": len(self._account_balances) > 0 if self._trading_required else True,
 *             "trading_rule_initialized": len(self._trading_rules) > 0 if self._trading_required else True             # <<<<<<<<<<<<<<
 *         }
 * 
 */
  if ((__pyx_v_self->__pyx_base.__pyx_base._trading_required != 0)) {
    __pyx_t_3 = __pyx_v_self->_trading_rules;
    __Pyx_INCREF(__pyx_t_3);
    if (unlikely(__pyx_t_3 == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 126, __pyx_L1_error)
    }
    __pyx_t_4 = PyDict_Size(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 126, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 > 0)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 126, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __pyx_t_3;
    __pyx_t_3 = 0;
  } else {
    __Pyx_INCREF(Py_True);
    __pyx_t_2 = Py_True;
  }
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_trading_rule_initialized, __pyx_t_2) < 0) __PYX_ERR(0, 124, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":121
 *         return self._bittrex_auth
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def status_dict(self) -> Dict[str, bool]:
 *         return {
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.status_dict.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":129
 *         }
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ready(self) -> bool:
 *         return all(self.status_dict.values())
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_5ready_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_5ready_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_5ready___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_5ready___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":131
 *     @property
 *     def ready(self) -> bool:
 *         return all(self.status_dict.values())             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_status_dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_values); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_2, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_builtin_all, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":129
 *         }
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ready(self) -> bool:
 *         return all(self.status_dict.values())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.ready.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":133
 *         return all(self.status_dict.values())
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def limit_orders(self) -> List[LimitOrder]:
 *         return [
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_12limit_orders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_12limit_orders_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_12limit_orders___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_12limit_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  PyObject *__pyx_7genexpr__pyx_v_in_flight_order = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":135
 *     @property
 *     def limit_orders(self) -> List[LimitOrder]:
 *         return [             # <<<<<<<<<<<<<<
 *             in_flight_order.to_limit_order()
 *             for in_flight_order in self._in_flight_orders.values()
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 135, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":137
 *         return [
 *             in_flight_order.to_limit_order()
 *             for in_flight_order in self._in_flight_orders.values()             # <<<<<<<<<<<<<<
 *         ]
 * 
 */
    __pyx_t_3 = 0;
    if (unlikely(__pyx_v_self->_in_flight_orders == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
      __PYX_ERR(0, 137, __pyx_L5_error)
    }
    __pyx_t_6 = __Pyx_dict_iterator(__pyx_v_self->_in_flight_orders, 1, __pyx_n_s_values, (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 137, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_6;
    __pyx_t_6 = 0;
    while (1) {
      __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_4, &__pyx_t_3, NULL, &__pyx_t_6, NULL, __pyx_t_5);
      if (unlikely(__pyx_t_7 == 0)) break;
      if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 137, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_in_flight_order, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":136
 *     def limit_orders(self) -> List[LimitOrder]:
 *         return [
 *             in_flight_order.to_limit_order()             # <<<<<<<<<<<<<<
 *             for in_flight_order in self._in_flight_orders.values()
 *         ]
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_7genexpr__pyx_v_in_flight_order, __pyx_n_s_to_limit_order); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 136, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_7 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_9, };
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 136, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 135, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_in_flight_order); __pyx_7genexpr__pyx_v_in_flight_order = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_in_flight_order); __pyx_7genexpr__pyx_v_in_flight_order = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":133
 *         return all(self.status_dict.values())
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def limit_orders(self) -> List[LimitOrder]:
 *         return [
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.limit_orders.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_in_flight_order);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":140
 *         ]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def tracking_states(self) -> Dict[str, any]:
 *         return {
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_15tracking_states_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_15tracking_states_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_15tracking_states___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_15tracking_states___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  PyObject *__pyx_8genexpr1__pyx_v_key = NULL;
  PyObject *__pyx_8genexpr1__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":142
 *     @property
 *     def tracking_states(self) -> Dict[str, any]:
 *         return {             # <<<<<<<<<<<<<<
 *             key: value.to_json()
 *             for key, value in self._in_flight_orders.items()
 */
  __Pyx_XDECREF(__pyx_r);
  { /* enter inner scope */
    __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 142, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":144
 *         return {
 *             key: value.to_json()
 *             for key, value in self._in_flight_orders.items()             # <<<<<<<<<<<<<<
 *         }
 * 
 */
    __pyx_t_3 = 0;
    if (unlikely(__pyx_v_self->_in_flight_orders == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 144, __pyx_L5_error)
    }
    __pyx_t_6 = __Pyx_dict_iterator(__pyx_v_self->_in_flight_orders, 1, __pyx_n_s_items, (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 144, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_6;
    __pyx_t_6 = 0;
    while (1) {
      __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_4, &__pyx_t_3, &__pyx_t_6, &__pyx_t_7, NULL, __pyx_t_5);
      if (unlikely(__pyx_t_8 == 0)) break;
      if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 144, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_key, __pyx_t_6);
      __pyx_t_6 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_value, __pyx_t_7);
      __pyx_t_7 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":143
 *     def tracking_states(self) -> Dict[str, any]:
 *         return {
 *             key: value.to_json()             # <<<<<<<<<<<<<<
 *             for key, value in self._in_flight_orders.items()
 *         }
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_8genexpr1__pyx_v_value, __pyx_n_s_to_json); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 143, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_9 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_6, function);
          __pyx_t_8 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_9, };
        __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 143, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      if (unlikely(PyDict_SetItem(__pyx_t_1, (PyObject*)__pyx_8genexpr1__pyx_v_key, (PyObject*)__pyx_t_7))) __PYX_ERR(0, 143, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_key); __pyx_8genexpr1__pyx_v_key = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_value); __pyx_8genexpr1__pyx_v_value = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_key); __pyx_8genexpr1__pyx_v_key = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_value); __pyx_8genexpr1__pyx_v_value = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":140
 *         ]
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def tracking_states(self) -> Dict[str, any]:
 *         return {
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.tracking_states.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_key);
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":147
 *         }
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def in_flight_orders(self) -> Dict[str, BittrexInFlightOrder]:
 *         return self._in_flight_orders
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_16in_flight_orders_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_16in_flight_orders_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_16in_flight_orders___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_16in_flight_orders___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":149
 *     @property
 *     def in_flight_orders(self) -> Dict[str, BittrexInFlightOrder]:
 *         return self._in_flight_orders             # <<<<<<<<<<<<<<
 * 
 *     def restore_tracking_states(self, saved_states: Dict[str, any]):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_in_flight_orders);
  __pyx_r = __pyx_v_self->_in_flight_orders;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":147
 *         }
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def in_flight_orders(self) -> Dict[str, BittrexInFlightOrder]:
 *         return self._in_flight_orders
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":151
 *         return self._in_flight_orders
 * 
 *     def restore_tracking_states(self, saved_states: Dict[str, any]):             # <<<<<<<<<<<<<<
 *         self._in_flight_orders.update({
 *             key: BittrexInFlightOrder.from_json(value)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_5restore_tracking_states(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_5restore_tracking_states = {"restore_tracking_states", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_5restore_tracking_states, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_5restore_tracking_states(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_saved_states = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restore_tracking_states (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_saved_states,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_saved_states,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_saved_states)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 151, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "restore_tracking_states") < 0)) __PYX_ERR(0, 151, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_saved_states = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("restore_tracking_states", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 151, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.restore_tracking_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_4restore_tracking_states(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), __pyx_v_saved_states);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_4restore_tracking_states(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_saved_states) {
  PyObject *__pyx_8genexpr2__pyx_v_key = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("restore_tracking_states", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":152
 * 
 *     def restore_tracking_states(self, saved_states: Dict[str, any]):
 *         self._in_flight_orders.update({             # <<<<<<<<<<<<<<
 *             key: BittrexInFlightOrder.from_json(value)
 *             for key, value in saved_states.items()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_in_flight_orders, __pyx_n_s_update); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  { /* enter inner scope */
    __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 152, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_3);

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":154
 *         self._in_flight_orders.update({
 *             key: BittrexInFlightOrder.from_json(value)
 *             for key, value in saved_states.items()             # <<<<<<<<<<<<<<
 *         })
 * 
 */
    __pyx_t_5 = 0;
    if (unlikely(__pyx_v_saved_states == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "items");
      __PYX_ERR(0, 154, __pyx_L5_error)
    }
    __pyx_t_8 = __Pyx_dict_iterator(__pyx_v_saved_states, 0, __pyx_n_s_items, (&__pyx_t_6), (&__pyx_t_7)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 154, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF(__pyx_t_4);
    __pyx_t_4 = __pyx_t_8;
    __pyx_t_8 = 0;
    while (1) {
      __pyx_t_10 = __Pyx_dict_iter_next(__pyx_t_4, __pyx_t_6, &__pyx_t_5, &__pyx_t_8, &__pyx_t_9, NULL, __pyx_t_7);
      if (unlikely(__pyx_t_10 == 0)) break;
      if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(0, 154, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_key, __pyx_t_8);
      __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_value, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":153
 *     def restore_tracking_states(self, saved_states: Dict[str, any]):
 *         self._in_flight_orders.update({
 *             key: BittrexInFlightOrder.from_json(value)             # <<<<<<<<<<<<<<
 *             for key, value in saved_states.items()
 *         })
 */
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_BittrexInFlightOrder); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 153, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_from_json); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 153, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = NULL;
      __pyx_t_10 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_8)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_8);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_10 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_8genexpr2__pyx_v_value};
        __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 153, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      if (unlikely(PyDict_SetItem(__pyx_t_3, (PyObject*)__pyx_8genexpr2__pyx_v_key, (PyObject*)__pyx_t_9))) __PYX_ERR(0, 153, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_key); __pyx_8genexpr2__pyx_v_key = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_value); __pyx_8genexpr2__pyx_v_value = 0;
    goto __pyx_L8_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_key); __pyx_8genexpr2__pyx_v_key = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_value); __pyx_8genexpr2__pyx_v_value = 0;
    goto __pyx_L1_error;
    __pyx_L8_exit_scope:;
  } /* exit inner scope */
  __pyx_t_4 = NULL;
  __pyx_t_7 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_7 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":151
 *         return self._in_flight_orders
 * 
 *     def restore_tracking_states(self, saved_states: Dict[str, any]):             # <<<<<<<<<<<<<<
 *         self._in_flight_orders.update({
 *             key: BittrexInFlightOrder.from_json(value)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.restore_tracking_states", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_key);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_8generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":157
 *         })
 * 
 *     async def get_active_exchange_markets(self) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         return await BittrexAPIOrderBookDataSource.get_active_exchange_markets()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_7get_active_exchange_markets(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_7get_active_exchange_markets = {"get_active_exchange_markets", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_7get_active_exchange_markets, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_7get_active_exchange_markets(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_active_exchange_markets (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_active_exchange_markets", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_active_exchange_markets", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_6get_active_exchange_markets(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_6get_active_exchange_markets(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_active_exchange_markets", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 157, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_8generator, __pyx_codeobj__2, (PyObject *) __pyx_cur_scope, __pyx_n_s_get_active_exchange_markets, __pyx_n_s_BittrexExchange_get_active_excha, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 157, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.get_active_exchange_markets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_8generator(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_active_exchange_markets", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 157, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":158
 * 
 *     async def get_active_exchange_markets(self) -> pd.DataFrame:
 *         return await BittrexAPIOrderBookDataSource.get_active_exchange_markets()             # <<<<<<<<<<<<<<
 * 
 *     cdef c_start(self, Clock clock, double timestamp):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_BittrexAPIOrderBookDataSource); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_get_active_exchange_markets); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_2, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L4_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 158, __pyx_L1_error)
    __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
  } else {
    __pyx_t_1 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 158, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":157
 *         })
 * 
 *     async def get_active_exchange_markets(self) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         return await BittrexAPIOrderBookDataSource.get_active_exchange_markets()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("get_active_exchange_markets", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":160
 *         return await BittrexAPIOrderBookDataSource.get_active_exchange_markets()
 * 
 *     cdef c_start(self, Clock clock, double timestamp):             # <<<<<<<<<<<<<<
 *         self._tx_tracker.c_start(clock, timestamp)
 *         ExchangeBase.c_start(self, clock, timestamp)
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_start(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, struct __pyx_obj_10hummingbot_4core_5clock_Clock *__pyx_v_clock, double __pyx_v_timestamp) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_start", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":161
 * 
 *     cdef c_start(self, Clock clock, double timestamp):
 *         self._tx_tracker.c_start(clock, timestamp)             # <<<<<<<<<<<<<<
 *         ExchangeBase.c_start(self, clock, timestamp)
 * 
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *)__pyx_v_self->_tx_tracker->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_start(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self->_tx_tracker), __pyx_v_clock, __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":162
 *     cdef c_start(self, Clock clock, double timestamp):
 *         self._tx_tracker.c_start(clock, timestamp)
 *         ExchangeBase.c_start(self, clock, timestamp)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_tick(self, double timestamp):
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase->__pyx_base.__pyx_base.__pyx_base.c_start(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self), __pyx_v_clock, __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":160
 *         return await BittrexAPIOrderBookDataSource.get_active_exchange_markets()
 * 
 *     cdef c_start(self, Clock clock, double timestamp):             # <<<<<<<<<<<<<<
 *         self._tx_tracker.c_start(clock, timestamp)
 *         ExchangeBase.c_start(self, clock, timestamp)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.c_start", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":164
 *         ExchangeBase.c_start(self, clock, timestamp)
 * 
 *     cdef c_tick(self, double timestamp):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int64_t last_tick = <int64_t> (self._last_timestamp / self._poll_interval)
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_tick(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, double __pyx_v_timestamp) {
  int64_t __pyx_v_last_tick;
  int64_t __pyx_v_current_tick;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_tick", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":166
 *     cdef c_tick(self, double timestamp):
 *         cdef:
 *             int64_t last_tick = <int64_t> (self._last_timestamp / self._poll_interval)             # <<<<<<<<<<<<<<
 *             int64_t current_tick = <int64_t> (timestamp / self._poll_interval)
 * 
 */
  if (unlikely(__pyx_v_self->_poll_interval == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 166, __pyx_L1_error)
  }
  __pyx_v_last_tick = ((int64_t)(__pyx_v_self->_last_timestamp / __pyx_v_self->_poll_interval));

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":167
 *         cdef:
 *             int64_t last_tick = <int64_t> (self._last_timestamp / self._poll_interval)
 *             int64_t current_tick = <int64_t> (timestamp / self._poll_interval)             # <<<<<<<<<<<<<<
 * 
 *         ExchangeBase.c_tick(self, timestamp)
 */
  if (unlikely(__pyx_v_self->_poll_interval == 0)) {
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    __PYX_ERR(0, 167, __pyx_L1_error)
  }
  __pyx_v_current_tick = ((int64_t)(__pyx_v_timestamp / __pyx_v_self->_poll_interval));

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":169
 *             int64_t current_tick = <int64_t> (timestamp / self._poll_interval)
 * 
 *         ExchangeBase.c_tick(self, timestamp)             # <<<<<<<<<<<<<<
 *         self._tx_tracker.c_tick(timestamp)
 *         if current_tick > last_tick:
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase->__pyx_base.__pyx_base.__pyx_base.c_tick(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self), __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":170
 * 
 *         ExchangeBase.c_tick(self, timestamp)
 *         self._tx_tracker.c_tick(timestamp)             # <<<<<<<<<<<<<<
 *         if current_tick > last_tick:
 *             if not self._poll_notifier.is_set():
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *)__pyx_v_self->_tx_tracker->__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_tick(((struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *)__pyx_v_self->_tx_tracker), __pyx_v_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 170, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":171
 *         ExchangeBase.c_tick(self, timestamp)
 *         self._tx_tracker.c_tick(timestamp)
 *         if current_tick > last_tick:             # <<<<<<<<<<<<<<
 *             if not self._poll_notifier.is_set():
 *                 self._poll_notifier.set()
 */
  __pyx_t_2 = ((__pyx_v_current_tick > __pyx_v_last_tick) != 0);
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":172
 *         self._tx_tracker.c_tick(timestamp)
 *         if current_tick > last_tick:
 *             if not self._poll_notifier.is_set():             # <<<<<<<<<<<<<<
 *                 self._poll_notifier.set()
 *         self._last_timestamp = timestamp
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_poll_notifier, __pyx_n_s_is_set); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = NULL;
    __pyx_t_5 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
        __pyx_t_5 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_4, };
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 172, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 172, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_6 = ((!__pyx_t_2) != 0);
    if (__pyx_t_6) {

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":173
 *         if current_tick > last_tick:
 *             if not self._poll_notifier.is_set():
 *                 self._poll_notifier.set()             # <<<<<<<<<<<<<<
 *         self._last_timestamp = timestamp
 * 
 */
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_poll_notifier, __pyx_n_s_set); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 173, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_5 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_4, };
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 173, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":172
 *         self._tx_tracker.c_tick(timestamp)
 *         if current_tick > last_tick:
 *             if not self._poll_notifier.is_set():             # <<<<<<<<<<<<<<
 *                 self._poll_notifier.set()
 *         self._last_timestamp = timestamp
 */
    }

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":171
 *         ExchangeBase.c_tick(self, timestamp)
 *         self._tx_tracker.c_tick(timestamp)
 *         if current_tick > last_tick:             # <<<<<<<<<<<<<<
 *             if not self._poll_notifier.is_set():
 *                 self._poll_notifier.set()
 */
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":174
 *             if not self._poll_notifier.is_set():
 *                 self._poll_notifier.set()
 *         self._last_timestamp = timestamp             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_get_fee(self,
 */
  __pyx_v_self->_last_timestamp = __pyx_v_timestamp;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":164
 *         ExchangeBase.c_start(self, clock, timestamp)
 * 
 *     cdef c_tick(self, double timestamp):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int64_t last_tick = <int64_t> (self._last_timestamp / self._poll_interval)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.c_tick", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":176
 *         self._last_timestamp = timestamp
 * 
 *     cdef object c_get_fee(self,             # <<<<<<<<<<<<<<
 *                           str base_currency,
 *                           str quote_currency,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_get_fee(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_base_currency, CYTHON_UNUSED PyObject *__pyx_v_quote_currency, PyObject *__pyx_v_order_type, CYTHON_UNUSED PyObject *__pyx_v_order_side, CYTHON_UNUSED PyObject *__pyx_v_amount, CYTHON_UNUSED PyObject *__pyx_v_price) {
  PyObject *__pyx_v_is_maker = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_fee", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":196
 *         return TradeFee(percent=maker_fee if order_type is OrderType.LIMIT else taker_fee)
 *         """
 *         is_maker = order_type is OrderType.LIMIT_MAKER             # <<<<<<<<<<<<<<
 *         return estimate_fee("bittrex", is_maker)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT_MAKER); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_v_order_type == __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_is_maker = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":197
 *         """
 *         is_maker = order_type is OrderType.LIMIT_MAKER
 *         return estimate_fee("bittrex", is_maker)             # <<<<<<<<<<<<<<
 * 
 *     async def _update_balances(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_estimate_fee); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 197, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = NULL;
  __pyx_t_5 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
      __pyx_t_5 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_n_u_bittrex, __pyx_v_is_maker};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 197, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":176
 *         self._last_timestamp = timestamp
 * 
 *     cdef object c_get_fee(self,             # <<<<<<<<<<<<<<
 *                           str base_currency,
 *                           str quote_currency,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.c_get_fee", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_is_maker);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_11generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":199
 *         return estimate_fee("bittrex", is_maker)
 * 
 *     async def _update_balances(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             dict account_info
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_10_update_balances(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_10_update_balances = {"_update_balances", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_10_update_balances, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_10_update_balances(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_balances (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_update_balances", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_update_balances", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_9_update_balances(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_9_update_balances(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_update_balances", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 199, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_11generator1, __pyx_codeobj__3, (PyObject *) __pyx_cur_scope, __pyx_n_s_update_balances, __pyx_n_s_BittrexExchange__update_balances, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 199, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._update_balances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_11generator1(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_balances", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 199, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":204
 *             list balances
 *             str asset_name
 *             set local_asset_names = set(self._account_balances.keys())             # <<<<<<<<<<<<<<
 *             set remote_asset_names = set()
 *             set asset_names_to_remove
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_balances == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "keys");
    __PYX_ERR(0, 204, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_Keys(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_balances); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_local_asset_names = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":205
 *             str asset_name
 *             set local_asset_names = set(self._account_balances.keys())
 *             set remote_asset_names = set()             # <<<<<<<<<<<<<<
 *             set asset_names_to_remove
 * 
 */
  __pyx_t_2 = PySet_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 205, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_remote_asset_names = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":208
 *             set asset_names_to_remove
 * 
 *         path_url = "/balances"             # <<<<<<<<<<<<<<
 *         account_balances = await self._api_request("GET", path_url=path_url)
 * 
 */
  __Pyx_INCREF(__pyx_kp_u_balances);
  __Pyx_GIVEREF(__pyx_kp_u_balances);
  __pyx_cur_scope->__pyx_v_path_url = __pyx_kp_u_balances;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":209
 * 
 *         path_url = "/balances"
 *         account_balances = await self._api_request("GET", path_url=path_url)             # <<<<<<<<<<<<<<
 * 
 *         for balance_entry in account_balances:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_path_url, __pyx_cur_scope->__pyx_v_path_url) < 0) __PYX_ERR(0, 209, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__4, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L4_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 209, __pyx_L1_error)
    __pyx_t_3 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_3);
  } else {
    __pyx_t_3 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_3) < 0) __PYX_ERR(0, 209, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_account_balances = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":211
 *         account_balances = await self._api_request("GET", path_url=path_url)
 * 
 *         for balance_entry in account_balances:             # <<<<<<<<<<<<<<
 *             asset_name = balance_entry["currencySymbol"]
 *             available_balance = Decimal(balance_entry["available"])
 */
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_account_balances)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_account_balances)) {
    __pyx_t_3 = __pyx_cur_scope->__pyx_v_account_balances; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_account_balances); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 211, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 211, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_1); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 211, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 211, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 211, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_balance_entry);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_balance_entry, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":212
 * 
 *         for balance_entry in account_balances:
 *             asset_name = balance_entry["currencySymbol"]             # <<<<<<<<<<<<<<
 *             available_balance = Decimal(balance_entry["available"])
 *             total_balance = Decimal(balance_entry["total"])
 */
    __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_balance_entry, __pyx_n_u_currencySymbol); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 212, __pyx_L1_error)
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_asset_name);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_asset_name, ((PyObject*)__pyx_t_1));
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":213
 *         for balance_entry in account_balances:
 *             asset_name = balance_entry["currencySymbol"]
 *             available_balance = Decimal(balance_entry["available"])             # <<<<<<<<<<<<<<
 *             total_balance = Decimal(balance_entry["total"])
 *             self._account_available_balances[asset_name] = available_balance
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_balance_entry, __pyx_n_u_available); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 213, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_available_balance);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_available_balance, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":214
 *             asset_name = balance_entry["currencySymbol"]
 *             available_balance = Decimal(balance_entry["available"])
 *             total_balance = Decimal(balance_entry["total"])             # <<<<<<<<<<<<<<
 *             self._account_available_balances[asset_name] = available_balance
 *             self._account_balances[asset_name] = total_balance
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_balance_entry, __pyx_n_u_total); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_total_balance);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_total_balance, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":215
 *             available_balance = Decimal(balance_entry["available"])
 *             total_balance = Decimal(balance_entry["total"])
 *             self._account_available_balances[asset_name] = available_balance             # <<<<<<<<<<<<<<
 *             self._account_balances[asset_name] = total_balance
 *             remote_asset_names.add(asset_name)
 */
    if (unlikely(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_available_balances == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 215, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_available_balances, __pyx_cur_scope->__pyx_v_asset_name, __pyx_cur_scope->__pyx_v_available_balance) < 0))) __PYX_ERR(0, 215, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":216
 *             total_balance = Decimal(balance_entry["total"])
 *             self._account_available_balances[asset_name] = available_balance
 *             self._account_balances[asset_name] = total_balance             # <<<<<<<<<<<<<<
 *             remote_asset_names.add(asset_name)
 * 
 */
    if (unlikely(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_balances == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 216, __pyx_L1_error)
    }
    if (unlikely((PyDict_SetItem(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_balances, __pyx_cur_scope->__pyx_v_asset_name, __pyx_cur_scope->__pyx_v_total_balance) < 0))) __PYX_ERR(0, 216, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":217
 *             self._account_available_balances[asset_name] = available_balance
 *             self._account_balances[asset_name] = total_balance
 *             remote_asset_names.add(asset_name)             # <<<<<<<<<<<<<<
 * 
 *         asset_names_to_remove = local_asset_names.difference(remote_asset_names)
 */
    __pyx_t_9 = PySet_Add(__pyx_cur_scope->__pyx_v_remote_asset_names, __pyx_cur_scope->__pyx_v_asset_name); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 217, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":211
 *         account_balances = await self._api_request("GET", path_url=path_url)
 * 
 *         for balance_entry in account_balances:             # <<<<<<<<<<<<<<
 *             asset_name = balance_entry["currencySymbol"]
 *             available_balance = Decimal(balance_entry["available"])
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":219
 *             remote_asset_names.add(asset_name)
 * 
 *         asset_names_to_remove = local_asset_names.difference(remote_asset_names)             # <<<<<<<<<<<<<<
 *         for asset_name in asset_names_to_remove:
 *             del self._account_available_balances[asset_name]
 */
  __pyx_t_3 = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PySet_Type_difference, __pyx_cur_scope->__pyx_v_local_asset_names, __pyx_cur_scope->__pyx_v_remote_asset_names); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(PySet_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None) || __Pyx_RaiseUnexpectedTypeError("set", __pyx_t_3))) __PYX_ERR(0, 219, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_asset_names_to_remove = ((PyObject*)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":220
 * 
 *         asset_names_to_remove = local_asset_names.difference(remote_asset_names)
 *         for asset_name in asset_names_to_remove:             # <<<<<<<<<<<<<<
 *             del self._account_available_balances[asset_name]
 *             del self._account_balances[asset_name]
 */
  __pyx_t_4 = 0;
  __pyx_t_1 = __Pyx_set_iterator(__pyx_cur_scope->__pyx_v_asset_names_to_remove, 1, (&__pyx_t_10), (&__pyx_t_8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __pyx_t_3 = __pyx_t_1;
  __pyx_t_1 = 0;
  while (1) {
    __pyx_t_11 = __Pyx_set_iter_next(__pyx_t_3, __pyx_t_10, &__pyx_t_4, &__pyx_t_1, __pyx_t_8);
    if (unlikely(__pyx_t_11 == 0)) break;
    if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 220, __pyx_L1_error)
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_asset_name);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_asset_name, ((PyObject*)__pyx_t_1));
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":221
 *         asset_names_to_remove = local_asset_names.difference(remote_asset_names)
 *         for asset_name in asset_names_to_remove:
 *             del self._account_available_balances[asset_name]             # <<<<<<<<<<<<<<
 *             del self._account_balances[asset_name]
 * 
 */
    if (unlikely(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_available_balances == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 221, __pyx_L1_error)
    }
    if (unlikely((PyDict_DelItem(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_available_balances, __pyx_cur_scope->__pyx_v_asset_name) < 0))) __PYX_ERR(0, 221, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":222
 *         for asset_name in asset_names_to_remove:
 *             del self._account_available_balances[asset_name]
 *             del self._account_balances[asset_name]             # <<<<<<<<<<<<<<
 * 
 *     def _format_trading_rules(self, market_dict: Dict[str, Any]) -> List[TradingRule]:
 */
    if (unlikely(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_balances == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 222, __pyx_L1_error)
    }
    if (unlikely((PyDict_DelItem(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_balances, __pyx_cur_scope->__pyx_v_asset_name) < 0))) __PYX_ERR(0, 222, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":199
 *         return estimate_fee("bittrex", is_maker)
 * 
 *     async def _update_balances(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             dict account_info
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("_update_balances", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":224
 *             del self._account_balances[asset_name]
 * 
 *     def _format_trading_rules(self, market_dict: Dict[str, Any]) -> List[TradingRule]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list retval = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_13_format_trading_rules(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_13_format_trading_rules = {"_format_trading_rules", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_13_format_trading_rules, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_13_format_trading_rules(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_market_dict = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_format_trading_rules (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_dict,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_market_dict,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_market_dict)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 224, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_format_trading_rules") < 0)) __PYX_ERR(0, 224, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_market_dict = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_format_trading_rules", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 224, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._format_trading_rules", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_12_format_trading_rules(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), __pyx_v_market_dict);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_12_format_trading_rules(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_market_dict) {
  PyObject *__pyx_v_retval = 0;
  PyObject *__pyx_v_min_btc_value = 0;
  PyObject *__pyx_v_eth_btc_price = 0;
  PyObject *__pyx_v_btc_usd_price = 0;
  PyObject *__pyx_v_btc_usdt_price = 0;
  PyObject *__pyx_v_market = NULL;
  PyObject *__pyx_v_trading_pair = NULL;
  PyObject *__pyx_v_min_trade_size = NULL;
  PyObject *__pyx_v_precision = NULL;
  PyObject *__pyx_v_last_trade_rate = NULL;
  PyObject *__pyx_v_min_order_value = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  int __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_t_19;
  int __pyx_t_20;
  Py_ssize_t __pyx_t_21;
  Py_UCS4 __pyx_t_22;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_format_trading_rules", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":226
 *     def _format_trading_rules(self, market_dict: Dict[str, Any]) -> List[TradingRule]:
 *         cdef:
 *             list retval = []             # <<<<<<<<<<<<<<
 *             object min_btc_value = Decimal("0.0005")
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 226, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_retval = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":227
 *         cdef:
 *             list retval = []
 *             object min_btc_value = Decimal("0.0005")             # <<<<<<<<<<<<<<
 * 
 *             object eth_btc_price = Decimal(market_dict["ETH-BTC"]["lastTradeRate"])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_kp_u_0_0005};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 227, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_min_btc_value = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":229
 *             object min_btc_value = Decimal("0.0005")
 * 
 *             object eth_btc_price = Decimal(market_dict["ETH-BTC"]["lastTradeRate"])             # <<<<<<<<<<<<<<
 *             object btc_usd_price = Decimal(market_dict["BTC-USD"]["lastTradeRate"])
 *             object btc_usdt_price = Decimal(market_dict["BTC-USDT"]["lastTradeRate"])
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_market_dict, __pyx_kp_u_ETH_BTC); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_3, __pyx_n_u_lastTradeRate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 229, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_eth_btc_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":230
 * 
 *             object eth_btc_price = Decimal(market_dict["ETH-BTC"]["lastTradeRate"])
 *             object btc_usd_price = Decimal(market_dict["BTC-USD"]["lastTradeRate"])             # <<<<<<<<<<<<<<
 *             object btc_usdt_price = Decimal(market_dict["BTC-USDT"]["lastTradeRate"])
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_v_market_dict, __pyx_kp_u_BTC_USD); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_t_5, __pyx_n_u_lastTradeRate); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_btc_usd_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":231
 *             object eth_btc_price = Decimal(market_dict["ETH-BTC"]["lastTradeRate"])
 *             object btc_usd_price = Decimal(market_dict["BTC-USD"]["lastTradeRate"])
 *             object btc_usdt_price = Decimal(market_dict["BTC-USDT"]["lastTradeRate"])             # <<<<<<<<<<<<<<
 * 
 *         for market in market_dict.values():
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_v_market_dict, __pyx_kp_u_BTC_USDT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_t_3, __pyx_n_u_lastTradeRate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 231, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 231, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_v_btc_usdt_price = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":233
 *             object btc_usdt_price = Decimal(market_dict["BTC-USDT"]["lastTradeRate"])
 * 
 *         for market in market_dict.values():             # <<<<<<<<<<<<<<
 *             try:
 *                 trading_pair = market.get("symbol")
 */
  __pyx_t_6 = 0;
  if (unlikely(__pyx_v_market_dict == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
    __PYX_ERR(0, 233, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_dict_iterator(__pyx_v_market_dict, 0, __pyx_n_s_values, (&__pyx_t_7), (&__pyx_t_4)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_1);
  __pyx_t_1 = __pyx_t_2;
  __pyx_t_2 = 0;
  while (1) {
    __pyx_t_8 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_7, &__pyx_t_6, NULL, &__pyx_t_2, NULL, __pyx_t_4);
    if (unlikely(__pyx_t_8 == 0)) break;
    if (unlikely(__pyx_t_8 == -1)) __PYX_ERR(0, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_market, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":234
 * 
 *         for market in market_dict.values():
 *             try:             # <<<<<<<<<<<<<<
 *                 trading_pair = market.get("symbol")
 *                 min_trade_size = market.get("minTradeSize")
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_11);
      /*try:*/ {

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":235
 *         for market in market_dict.values():
 *             try:
 *                 trading_pair = market.get("symbol")             # <<<<<<<<<<<<<<
 *                 min_trade_size = market.get("minTradeSize")
 *                 precision = market.get("precision")
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market, __pyx_n_s_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 235, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_n_u_symbol};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 235, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_XDECREF_SET(__pyx_v_trading_pair, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":236
 *             try:
 *                 trading_pair = market.get("symbol")
 *                 min_trade_size = market.get("minTradeSize")             # <<<<<<<<<<<<<<
 *                 precision = market.get("precision")
 *                 last_trade_rate = Decimal(market.get("lastTradeRate"))
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market, __pyx_n_s_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 236, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_n_u_minTradeSize};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 236, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_XDECREF_SET(__pyx_v_min_trade_size, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":237
 *                 trading_pair = market.get("symbol")
 *                 min_trade_size = market.get("minTradeSize")
 *                 precision = market.get("precision")             # <<<<<<<<<<<<<<
 *                 last_trade_rate = Decimal(market.get("lastTradeRate"))
 * 
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market, __pyx_n_s_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 237, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_n_u_precision};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 237, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_XDECREF_SET(__pyx_v_precision, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":238
 *                 min_trade_size = market.get("minTradeSize")
 *                 precision = market.get("precision")
 *                 last_trade_rate = Decimal(market.get("lastTradeRate"))             # <<<<<<<<<<<<<<
 * 
 *                 # skip offline trading pair
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 238, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_market, __pyx_n_s_get); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 238, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_13 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_n_u_lastTradeRate};
          __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 238, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __pyx_t_12 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_3};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 238, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __Pyx_XDECREF_SET(__pyx_v_last_trade_rate, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":241
 * 
 *                 # skip offline trading pair
 *                 if market.get("status") != "OFFLINE":             # <<<<<<<<<<<<<<
 *                     # min_order_value is the base asset value corresponding to 50,000 Satoshis(~0.0005BTC)
 *                     # https://bittrex.zendesk.com/hc/en-us/articles/360001473863-Bittrex-Trading-Rules
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_market, __pyx_n_s_get); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 241, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_3 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_n_u_status};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 241, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __pyx_t_14 = (__Pyx_PyUnicode_Equals(__pyx_t_2, __pyx_n_u_OFFLINE, Py_NE)); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 241, __pyx_L5_error)
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (__pyx_t_14) {

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":244
 *                     # min_order_value is the base asset value corresponding to 50,000 Satoshis(~0.0005BTC)
 *                     # https://bittrex.zendesk.com/hc/en-us/articles/360001473863-Bittrex-Trading-Rules
 *                     if last_trade_rate != 0:             # <<<<<<<<<<<<<<
 *                         min_order_value = (
 *                             min_btc_value / last_trade_rate if market.get("quoteCurrencySymbol") == "BTC" else
 */
          __pyx_t_2 = __Pyx_PyInt_NeObjC(__pyx_v_last_trade_rate, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 244, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 244, __pyx_L5_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          if (__pyx_t_14) {

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":246
 *                     if last_trade_rate != 0:
 *                         min_order_value = (
 *                             min_btc_value / last_trade_rate if market.get("quoteCurrencySymbol") == "BTC" else             # <<<<<<<<<<<<<<
 *                             min_btc_value / eth_btc_price / last_trade_rate if market.get("quoteCurrencySymbol") == "ETH" else
 *                             min_btc_value * btc_usd_price / last_trade_rate if market.get("quoteCurrencySymbol") == "USD" else
 */
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_market, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 246, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_12 = NULL;
            __pyx_t_8 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
              __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_3);
              if (likely(__pyx_t_12)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                __Pyx_INCREF(__pyx_t_12);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_3, function);
                __pyx_t_8 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_n_u_quoteCurrencySymbol};
              __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
              __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
              if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 246, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            }
            __pyx_t_14 = (__Pyx_PyUnicode_Equals(__pyx_t_5, __pyx_n_u_BTC, Py_EQ)); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 246, __pyx_L5_error)
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            if (__pyx_t_14) {
              __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_v_min_btc_value, __pyx_v_last_trade_rate); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 246, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_5);
              __pyx_t_2 = __pyx_t_5;
              __pyx_t_5 = 0;
            } else {

              /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":247
 *                         min_order_value = (
 *                             min_btc_value / last_trade_rate if market.get("quoteCurrencySymbol") == "BTC" else
 *                             min_btc_value / eth_btc_price / last_trade_rate if market.get("quoteCurrencySymbol") == "ETH" else             # <<<<<<<<<<<<<<
 *                             min_btc_value * btc_usd_price / last_trade_rate if market.get("quoteCurrencySymbol") == "USD" else
 *                             min_btc_value * btc_usdt_price / last_trade_rate if market.get("quoteCurrencySymbol") == "USDT" else
 */
              __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_market, __pyx_n_s_get); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 247, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_12);
              __pyx_t_13 = NULL;
              __pyx_t_8 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
                __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
                if (likely(__pyx_t_13)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
                  __Pyx_INCREF(__pyx_t_13);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_12, function);
                  __pyx_t_8 = 1;
                }
              }
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_n_u_quoteCurrencySymbol};
                __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
                __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
                if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 247, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
              }
              __pyx_t_15 = (__Pyx_PyUnicode_Equals(__pyx_t_3, __pyx_n_u_ETH, Py_EQ)); if (unlikely((__pyx_t_15 < 0))) __PYX_ERR(0, 247, __pyx_L5_error)
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              if (__pyx_t_15) {
                __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_v_min_btc_value, __pyx_v_eth_btc_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 247, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_12 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_last_trade_rate); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 247, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_12);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_t_5 = __pyx_t_12;
                __pyx_t_12 = 0;
              } else {

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":248
 *                             min_btc_value / last_trade_rate if market.get("quoteCurrencySymbol") == "BTC" else
 *                             min_btc_value / eth_btc_price / last_trade_rate if market.get("quoteCurrencySymbol") == "ETH" else
 *                             min_btc_value * btc_usd_price / last_trade_rate if market.get("quoteCurrencySymbol") == "USD" else             # <<<<<<<<<<<<<<
 *                             min_btc_value * btc_usdt_price / last_trade_rate if market.get("quoteCurrencySymbol") == "USDT" else
 *                             min_btc_value
 */
                __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_market, __pyx_n_s_get); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 248, __pyx_L5_error)
                __Pyx_GOTREF(__pyx_t_13);
                __pyx_t_16 = NULL;
                __pyx_t_8 = 0;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_13))) {
                  __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_13);
                  if (likely(__pyx_t_16)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
                    __Pyx_INCREF(__pyx_t_16);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_13, function);
                    __pyx_t_8 = 1;
                  }
                }
                {
                  PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_n_u_quoteCurrencySymbol};
                  __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
                  __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
                  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L5_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
                }
                __pyx_t_17 = (__Pyx_PyUnicode_Equals(__pyx_t_3, __pyx_n_u_USD, Py_EQ)); if (unlikely((__pyx_t_17 < 0))) __PYX_ERR(0, 248, __pyx_L5_error)
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                if (__pyx_t_17) {
                  __pyx_t_3 = PyNumber_Multiply(__pyx_v_min_btc_value, __pyx_v_btc_usd_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 248, __pyx_L5_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __pyx_t_13 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_last_trade_rate); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 248, __pyx_L5_error)
                  __Pyx_GOTREF(__pyx_t_13);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __pyx_t_12 = __pyx_t_13;
                  __pyx_t_13 = 0;
                } else {

                  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":249
 *                             min_btc_value / eth_btc_price / last_trade_rate if market.get("quoteCurrencySymbol") == "ETH" else
 *                             min_btc_value * btc_usd_price / last_trade_rate if market.get("quoteCurrencySymbol") == "USD" else
 *                             min_btc_value * btc_usdt_price / last_trade_rate if market.get("quoteCurrencySymbol") == "USDT" else             # <<<<<<<<<<<<<<
 *                             min_btc_value
 *                         ) * Decimal("1.01")  # Compensates for possible fluctuations
 */
                  __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_market, __pyx_n_s_get); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 249, __pyx_L5_error)
                  __Pyx_GOTREF(__pyx_t_16);
                  __pyx_t_18 = NULL;
                  __pyx_t_8 = 0;
                  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
                    __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_16);
                    if (likely(__pyx_t_18)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                      __Pyx_INCREF(__pyx_t_18);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_16, function);
                      __pyx_t_8 = 1;
                    }
                  }
                  {
                    PyObject *__pyx_callargs[2] = {__pyx_t_18, __pyx_n_u_quoteCurrencySymbol};
                    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
                    __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
                    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 249, __pyx_L5_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
                  }
                  __pyx_t_19 = (__Pyx_PyUnicode_Equals(__pyx_t_3, __pyx_n_u_USDT, Py_EQ)); if (unlikely((__pyx_t_19 < 0))) __PYX_ERR(0, 249, __pyx_L5_error)
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  if (__pyx_t_19) {
                    __pyx_t_3 = PyNumber_Multiply(__pyx_v_min_btc_value, __pyx_v_btc_usdt_price); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 249, __pyx_L5_error)
                    __Pyx_GOTREF(__pyx_t_3);
                    __pyx_t_16 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_v_last_trade_rate); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 249, __pyx_L5_error)
                    __Pyx_GOTREF(__pyx_t_16);
                    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                    __pyx_t_13 = __pyx_t_16;
                    __pyx_t_16 = 0;
                  } else {

                    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":250
 *                             min_btc_value * btc_usd_price / last_trade_rate if market.get("quoteCurrencySymbol") == "USD" else
 *                             min_btc_value * btc_usdt_price / last_trade_rate if market.get("quoteCurrencySymbol") == "USDT" else
 *                             min_btc_value             # <<<<<<<<<<<<<<
 *                         ) * Decimal("1.01")  # Compensates for possible fluctuations
 *                     else:
 */
                    __Pyx_INCREF(__pyx_v_min_btc_value);
                    __pyx_t_13 = __pyx_v_min_btc_value;
                  }
                  __pyx_t_12 = __pyx_t_13;
                  __pyx_t_13 = 0;
                }
                __pyx_t_5 = __pyx_t_12;
                __pyx_t_12 = 0;
              }
              __pyx_t_2 = __pyx_t_5;
              __pyx_t_5 = 0;
            }

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":251
 *                             min_btc_value * btc_usdt_price / last_trade_rate if market.get("quoteCurrencySymbol") == "USDT" else
 *                             min_btc_value
 *                         ) * Decimal("1.01")  # Compensates for possible fluctuations             # <<<<<<<<<<<<<<
 *                     else:
 *                         min_order_value = s_decimal_0
 */
            __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 251, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_13 = NULL;
            __pyx_t_8 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_12))) {
              __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_12);
              if (likely(__pyx_t_13)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
                __Pyx_INCREF(__pyx_t_13);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_12, function);
                __pyx_t_8 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_kp_u_1_01};
              __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 251, __pyx_L5_error)
              __Pyx_GOTREF(__pyx_t_5);
              __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
            }
            __pyx_t_12 = PyNumber_Multiply(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 251, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF_SET(__pyx_v_min_order_value, __pyx_t_12);
            __pyx_t_12 = 0;

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":244
 *                     # min_order_value is the base asset value corresponding to 50,000 Satoshis(~0.0005BTC)
 *                     # https://bittrex.zendesk.com/hc/en-us/articles/360001473863-Bittrex-Trading-Rules
 *                     if last_trade_rate != 0:             # <<<<<<<<<<<<<<
 *                         min_order_value = (
 *                             min_btc_value / last_trade_rate if market.get("quoteCurrencySymbol") == "BTC" else
 */
            goto __pyx_L14;
          }

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":253
 *                         ) * Decimal("1.01")  # Compensates for possible fluctuations
 *                     else:
 *                         min_order_value = s_decimal_0             # <<<<<<<<<<<<<<
 * 
 *                     # Trading Rules info from Bittrex API response
 */
          /*else*/ {
            __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 253, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_12);
            __Pyx_XDECREF_SET(__pyx_v_min_order_value, __pyx_t_12);
            __pyx_t_12 = 0;
          }
          __pyx_L14:;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":256
 * 
 *                     # Trading Rules info from Bittrex API response
 *                     retval.append(TradingRule(trading_pair,             # <<<<<<<<<<<<<<
 *                                               min_order_size=Decimal(min_trade_size),
 *                                               min_price_increment=Decimal(f"1e-{precision}"),
 */
          __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 256, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_INCREF(__pyx_v_trading_pair);
          __Pyx_GIVEREF(__pyx_v_trading_pair);
          PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_v_trading_pair);

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":257
 *                     # Trading Rules info from Bittrex API response
 *                     retval.append(TradingRule(trading_pair,
 *                                               min_order_size=Decimal(min_trade_size),             # <<<<<<<<<<<<<<
 *                                               min_price_increment=Decimal(f"1e-{precision}"),
 *                                               min_base_amount_increment=Decimal(f"1e-{precision}"),
 */
          __pyx_t_5 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 257, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 257, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_16 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
            __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_13);
            if (likely(__pyx_t_16)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
              __Pyx_INCREF(__pyx_t_16);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_13, function);
              __pyx_t_8 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_v_min_trade_size};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
            __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 257, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
          if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_min_order_size, __pyx_t_2) < 0) __PYX_ERR(0, 257, __pyx_L5_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":258
 *                     retval.append(TradingRule(trading_pair,
 *                                               min_order_size=Decimal(min_trade_size),
 *                                               min_price_increment=Decimal(f"1e-{precision}"),             # <<<<<<<<<<<<<<
 *                                               min_base_amount_increment=Decimal(f"1e-{precision}"),
 *                                               min_quote_amount_increment=Decimal(f"1e-{precision}"),
 */
          __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 258, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_16 = __Pyx_PyObject_FormatSimple(__pyx_v_precision, __pyx_empty_unicode); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 258, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e, __pyx_t_16); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 258, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_16 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
            __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_13);
            if (likely(__pyx_t_16)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
              __Pyx_INCREF(__pyx_t_16);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_13, function);
              __pyx_t_8 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_t_3};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
            __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 258, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
          if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_min_price_increment, __pyx_t_2) < 0) __PYX_ERR(0, 257, __pyx_L5_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":259
 *                                               min_order_size=Decimal(min_trade_size),
 *                                               min_price_increment=Decimal(f"1e-{precision}"),
 *                                               min_base_amount_increment=Decimal(f"1e-{precision}"),             # <<<<<<<<<<<<<<
 *                                               min_quote_amount_increment=Decimal(f"1e-{precision}"),
 *                                               min_order_value=Decimal(min_order_value),
 */
          __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 259, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_v_precision, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 259, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_16 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e, __pyx_t_3); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 259, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_13);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_13, function);
              __pyx_t_8 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_16};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 259, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
          if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_min_base_amount_increment, __pyx_t_2) < 0) __PYX_ERR(0, 257, __pyx_L5_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":260
 *                                               min_price_increment=Decimal(f"1e-{precision}"),
 *                                               min_base_amount_increment=Decimal(f"1e-{precision}"),
 *                                               min_quote_amount_increment=Decimal(f"1e-{precision}"),             # <<<<<<<<<<<<<<
 *                                               min_order_value=Decimal(min_order_value),
 *                                               ))
 */
          __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 260, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_16 = __Pyx_PyObject_FormatSimple(__pyx_v_precision, __pyx_empty_unicode); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 260, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_3 = __Pyx_PyUnicode_Concat(__pyx_kp_u_1e, __pyx_t_16); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 260, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __pyx_t_16 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
            __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_13);
            if (likely(__pyx_t_16)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
              __Pyx_INCREF(__pyx_t_16);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_13, function);
              __pyx_t_8 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_t_3};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
            __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 260, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
          if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_min_quote_amount_increment, __pyx_t_2) < 0) __PYX_ERR(0, 257, __pyx_L5_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":261
 *                                               min_base_amount_increment=Decimal(f"1e-{precision}"),
 *                                               min_quote_amount_increment=Decimal(f"1e-{precision}"),
 *                                               min_order_value=Decimal(min_order_value),             # <<<<<<<<<<<<<<
 *                                               ))
 *                     # https://bittrex.zendesk.com/hc/en-us/articles/360001473863-Bittrex-Trading-Rules
 */
          __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 261, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_3 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_13))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_13);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_13);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_13, function);
              __pyx_t_8 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_min_order_value};
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 261, __pyx_L5_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
          if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_min_order_value, __pyx_t_2) < 0) __PYX_ERR(0, 257, __pyx_L5_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":256
 * 
 *                     # Trading Rules info from Bittrex API response
 *                     retval.append(TradingRule(trading_pair,             # <<<<<<<<<<<<<<
 *                                               min_order_size=Decimal(min_trade_size),
 *                                               min_price_increment=Decimal(f"1e-{precision}"),
 */
          __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule), __pyx_t_12, __pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 256, __pyx_L5_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_20 = __Pyx_PyList_Append(__pyx_v_retval, __pyx_t_2); if (unlikely(__pyx_t_20 == ((int)-1))) __PYX_ERR(0, 256, __pyx_L5_error)
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":241
 * 
 *                 # skip offline trading pair
 *                 if market.get("status") != "OFFLINE":             # <<<<<<<<<<<<<<
 *                     # min_order_value is the base asset value corresponding to 50,000 Satoshis(~0.0005BTC)
 *                     # https://bittrex.zendesk.com/hc/en-us/articles/360001473863-Bittrex-Trading-Rules
 */
        }

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":234
 * 
 *         for market in market_dict.values():
 *             try:             # <<<<<<<<<<<<<<
 *                 trading_pair = market.get("symbol")
 *                 min_trade_size = market.get("minTradeSize")
 */
      }
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      goto __pyx_L12_try_end;
      __pyx_L5_error:;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":265
 *                     # https://bittrex.zendesk.com/hc/en-us/articles/360001473863-Bittrex-Trading-Rules
 *                     # "No maximum, but the user must have sufficient funds to cover the order at the time it is placed."
 *             except Exception:             # <<<<<<<<<<<<<<
 *                 self.logger().error(f"Error parsing the trading pair rule {market}. Skipping.", exc_info=True)
 *         return retval
 */
      __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_8) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._format_trading_rules", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_5, &__pyx_t_12) < 0) __PYX_ERR(0, 265, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_12);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":266
 *                     # "No maximum, but the user must have sufficient funds to cover the order at the time it is placed."
 *             except Exception:
 *                 self.logger().error(f"Error parsing the trading pair rule {market}. Skipping.", exc_info=True)             # <<<<<<<<<<<<<<
 *         return retval
 * 
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 266, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_16 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_16)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_16);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_16, };
          __pyx_t_13 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 266, __pyx_L7_except_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_error); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 266, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 266, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_21 = 0;
        __pyx_t_22 = 127;
        __Pyx_INCREF(__pyx_kp_u_Error_parsing_the_trading_pair_r);
        __pyx_t_21 += 36;
        __Pyx_GIVEREF(__pyx_kp_u_Error_parsing_the_trading_pair_r);
        PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_kp_u_Error_parsing_the_trading_pair_r);
        __pyx_t_16 = __Pyx_PyObject_FormatSimple(__pyx_v_market, __pyx_empty_unicode); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 266, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_22 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) > __pyx_t_22) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) : __pyx_t_22;
        __pyx_t_21 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_16);
        __Pyx_GIVEREF(__pyx_t_16);
        PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_16);
        __pyx_t_16 = 0;
        __Pyx_INCREF(__pyx_kp_u_Skipping);
        __pyx_t_21 += 11;
        __Pyx_GIVEREF(__pyx_kp_u_Skipping);
        PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_kp_u_Skipping);
        __pyx_t_16 = __Pyx_PyUnicode_Join(__pyx_t_13, 3, __pyx_t_21, __pyx_t_22); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 266, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 266, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_16);
        PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_16);
        __pyx_t_16 = 0;
        __pyx_t_16 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 266, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_16);
        if (PyDict_SetItem(__pyx_t_16, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 266, __pyx_L7_except_error)
        __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_13, __pyx_t_16); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 266, __pyx_L7_except_error)
        __Pyx_GOTREF(__pyx_t_18);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L6_exception_handled;
      }
      goto __pyx_L7_except_error;
      __pyx_L7_except_error:;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":234
 * 
 *         for market in market_dict.values():
 *             try:             # <<<<<<<<<<<<<<
 *                 trading_pair = market.get("symbol")
 *                 min_trade_size = market.get("minTradeSize")
 */
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      goto __pyx_L1_error;
      __pyx_L6_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_XGIVEREF(__pyx_t_11);
      __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      __pyx_L12_try_end:;
    }
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":267
 *             except Exception:
 *                 self.logger().error(f"Error parsing the trading pair rule {market}. Skipping.", exc_info=True)
 *         return retval             # <<<<<<<<<<<<<<
 * 
 *     async def _update_trading_rules(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_retval);
  __pyx_r = __pyx_v_retval;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":224
 *             del self._account_balances[asset_name]
 * 
 *     def _format_trading_rules(self, market_dict: Dict[str, Any]) -> List[TradingRule]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list retval = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._format_trading_rules", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_retval);
  __Pyx_XDECREF(__pyx_v_min_btc_value);
  __Pyx_XDECREF(__pyx_v_eth_btc_price);
  __Pyx_XDECREF(__pyx_v_btc_usd_price);
  __Pyx_XDECREF(__pyx_v_btc_usdt_price);
  __Pyx_XDECREF(__pyx_v_market);
  __Pyx_XDECREF(__pyx_v_trading_pair);
  __Pyx_XDECREF(__pyx_v_min_trade_size);
  __Pyx_XDECREF(__pyx_v_precision);
  __Pyx_XDECREF(__pyx_v_last_trade_rate);
  __Pyx_XDECREF(__pyx_v_min_order_value);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_16generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":269
 *         return retval
 * 
 *     async def _update_trading_rules(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             # The poll interval for withdraw rules is 60 seconds.
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_15_update_trading_rules(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_15_update_trading_rules = {"_update_trading_rules", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_15_update_trading_rules, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_15_update_trading_rules(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_trading_rules (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_update_trading_rules", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_update_trading_rules", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_update_trading_rules(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_update_trading_rules(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_update_trading_rules", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 269, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_16generator2, __pyx_codeobj__5, (PyObject *) __pyx_cur_scope, __pyx_n_s_update_trading_rules, __pyx_n_s_BittrexExchange__update_trading, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 269, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._update_trading_rules", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_16generator2(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_trading_rules", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_await;
    case 2: goto __pyx_L8_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 269, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":272
 *         cdef:
 *             # The poll interval for withdraw rules is 60 seconds.
 *             int64_t last_tick = <int64_t> (self._last_timestamp / 60.0)             # <<<<<<<<<<<<<<
 *             int64_t current_tick = <int64_t> (self._current_timestamp / 60.0)
 *         if current_tick > last_tick or len(self._trading_rules) <= 0:
 */
  __pyx_cur_scope->__pyx_v_last_tick = ((int64_t)(__pyx_cur_scope->__pyx_v_self->_last_timestamp / 60.0));

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":273
 *             # The poll interval for withdraw rules is 60 seconds.
 *             int64_t last_tick = <int64_t> (self._last_timestamp / 60.0)
 *             int64_t current_tick = <int64_t> (self._current_timestamp / 60.0)             # <<<<<<<<<<<<<<
 *         if current_tick > last_tick or len(self._trading_rules) <= 0:
 *             market_path_url = "/markets"
 */
  __pyx_cur_scope->__pyx_v_current_tick = ((int64_t)(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp / 60.0));

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":274
 *             int64_t last_tick = <int64_t> (self._last_timestamp / 60.0)
 *             int64_t current_tick = <int64_t> (self._current_timestamp / 60.0)
 *         if current_tick > last_tick or len(self._trading_rules) <= 0:             # <<<<<<<<<<<<<<
 *             market_path_url = "/markets"
 *             ticker_path_url = "/markets/tickers"
 */
  __pyx_t_2 = ((__pyx_cur_scope->__pyx_v_current_tick > __pyx_cur_scope->__pyx_v_last_tick) != 0);
  if (!__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_3 = __pyx_cur_scope->__pyx_v_self->_trading_rules;
  __Pyx_INCREF(__pyx_t_3);
  if (unlikely(__pyx_t_3 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 274, __pyx_L1_error)
  }
  __pyx_t_4 = PyDict_Size(__pyx_t_3); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 274, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_2 = ((__pyx_t_4 <= 0) != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_1) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":275
 *             int64_t current_tick = <int64_t> (self._current_timestamp / 60.0)
 *         if current_tick > last_tick or len(self._trading_rules) <= 0:
 *             market_path_url = "/markets"             # <<<<<<<<<<<<<<
 *             ticker_path_url = "/markets/tickers"
 * 
 */
    __Pyx_INCREF(__pyx_kp_u_markets);
    __Pyx_GIVEREF(__pyx_kp_u_markets);
    __pyx_cur_scope->__pyx_v_market_path_url = __pyx_kp_u_markets;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":276
 *         if current_tick > last_tick or len(self._trading_rules) <= 0:
 *             market_path_url = "/markets"
 *             ticker_path_url = "/markets/tickers"             # <<<<<<<<<<<<<<
 * 
 *             market_list = await self._api_request("GET", path_url=market_path_url)
 */
    __Pyx_INCREF(__pyx_kp_u_markets_tickers);
    __Pyx_GIVEREF(__pyx_kp_u_markets_tickers);
    __pyx_cur_scope->__pyx_v_ticker_path_url = __pyx_kp_u_markets_tickers;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":278
 *             ticker_path_url = "/markets/tickers"
 * 
 *             market_list = await self._api_request("GET", path_url=market_path_url)             # <<<<<<<<<<<<<<
 * 
 *             ticker_list = await self._api_request("GET", path_url=ticker_path_url)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_path_url, __pyx_cur_scope->__pyx_v_market_path_url) < 0) __PYX_ERR(0, 278, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 278, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_6);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, awaiting value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_await:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 278, __pyx_L1_error)
      __pyx_t_6 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_6);
    } else {
      __pyx_t_6 = NULL;
      if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_6) < 0) __PYX_ERR(0, 278, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_cur_scope->__pyx_v_market_list = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":280
 *             market_list = await self._api_request("GET", path_url=market_path_url)
 * 
 *             ticker_list = await self._api_request("GET", path_url=ticker_path_url)             # <<<<<<<<<<<<<<
 *             # A temp fix, Bittrex refers to CELO as CGLD on their tickers end point, but CELO on markets end point.
 *             # I think this will be rectified by Bittrex soon.
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_path_url, __pyx_cur_scope->__pyx_v_ticker_path_url) < 0) __PYX_ERR(0, 280, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 280, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, awaiting value */
      __pyx_generator->resume_label = 2;
      return __pyx_r;
      __pyx_L8_resume_from_await:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 280, __pyx_L1_error)
      __pyx_t_3 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_3);
    } else {
      __pyx_t_3 = NULL;
      if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_3) < 0) __PYX_ERR(0, 280, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_v_ticker_list = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":283
 *             # A temp fix, Bittrex refers to CELO as CGLD on their tickers end point, but CELO on markets end point.
 *             # I think this will be rectified by Bittrex soon.
 *             for item in ticker_list:             # <<<<<<<<<<<<<<
 *                 item["symbol"] = item["symbol"].replace("CGLD-", "CELO-")
 *             ticker_data = {item["symbol"]: item for item in ticker_list}
 */
    if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_ticker_list)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_ticker_list)) {
      __pyx_t_3 = __pyx_cur_scope->__pyx_v_ticker_list; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_ticker_list); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 283, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 283, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 283, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 283, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 283, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 283, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_3);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 283, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_item);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_item, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":284
 *             # I think this will be rectified by Bittrex soon.
 *             for item in ticker_list:
 *                 item["symbol"] = item["symbol"].replace("CGLD-", "CELO-")             # <<<<<<<<<<<<<<
 *             ticker_data = {item["symbol"]: item for item in ticker_list}
 * 
 */
      __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_item, __pyx_n_u_symbol); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_replace); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 284, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely((PyObject_SetItem(__pyx_cur_scope->__pyx_v_item, __pyx_n_u_symbol, __pyx_t_5) < 0))) __PYX_ERR(0, 284, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":283
 *             # A temp fix, Bittrex refers to CELO as CGLD on their tickers end point, but CELO on markets end point.
 *             # I think this will be rectified by Bittrex soon.
 *             for item in ticker_list:             # <<<<<<<<<<<<<<
 *                 item["symbol"] = item["symbol"].replace("CGLD-", "CELO-")
 *             ticker_data = {item["symbol"]: item for item in ticker_list}
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":285
 *             for item in ticker_list:
 *                 item["symbol"] = item["symbol"].replace("CGLD-", "CELO-")
 *             ticker_data = {item["symbol"]: item for item in ticker_list}             # <<<<<<<<<<<<<<
 * 
 *             result_list = [
 */
    { /* enter inner scope */
      __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 285, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_ticker_list)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_ticker_list)) {
        __pyx_t_5 = __pyx_cur_scope->__pyx_v_ticker_list; __Pyx_INCREF(__pyx_t_5); __pyx_t_4 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_4 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_ticker_list); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 285, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 285, __pyx_L1_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 285, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 285, __pyx_L1_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 285, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_7(__pyx_t_5);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 285, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_8genexpr3__pyx_v_item);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_8genexpr3__pyx_v_item, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_8genexpr3__pyx_v_item, __pyx_n_u_symbol); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(PyDict_SetItem(__pyx_t_3, (PyObject*)__pyx_t_6, (PyObject*)__pyx_cur_scope->__pyx_8genexpr3__pyx_v_item))) __PYX_ERR(0, 285, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } /* exit inner scope */
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_v_ticker_data = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":287
 *             ticker_data = {item["symbol"]: item for item in ticker_list}
 * 
 *             result_list = [             # <<<<<<<<<<<<<<
 *                 {**market, **ticker_data[market["symbol"]]}
 *                 for market in market_list
 */
    { /* enter inner scope */
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 287, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":289
 *             result_list = [
 *                 {**market, **ticker_data[market["symbol"]]}
 *                 for market in market_list             # <<<<<<<<<<<<<<
 *                 if market["symbol"] in ticker_data
 *             ]
 */
      if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_market_list)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_market_list)) {
        __pyx_t_5 = __pyx_cur_scope->__pyx_v_market_list; __Pyx_INCREF(__pyx_t_5); __pyx_t_4 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_4 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_market_list); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 289, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 289, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 289, __pyx_L1_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 289, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 289, __pyx_L1_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 289, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_7(__pyx_t_5);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 289, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_8genexpr4__pyx_v_market);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_8genexpr4__pyx_v_market, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        __pyx_t_6 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":290
 *                 {**market, **ticker_data[market["symbol"]]}
 *                 for market in market_list
 *                 if market["symbol"] in ticker_data             # <<<<<<<<<<<<<<
 *             ]
 * 
 */
        __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_8genexpr4__pyx_v_market, __pyx_n_u_symbol); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 290, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_t_6, __pyx_cur_scope->__pyx_v_ticker_data, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 290, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_2 = (__pyx_t_1 != 0);
        if (__pyx_t_2) {

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":288
 * 
 *             result_list = [
 *                 {**market, **ticker_data[market["symbol"]]}             # <<<<<<<<<<<<<<
 *                 for market in market_list
 *                 if market["symbol"] in ticker_data
 */
          if (unlikely(__pyx_cur_scope->__pyx_8genexpr4__pyx_v_market == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
            __PYX_ERR(0, 288, __pyx_L1_error)
          }
          if (likely(PyDict_CheckExact(__pyx_cur_scope->__pyx_8genexpr4__pyx_v_market))) {
            __pyx_t_6 = PyDict_Copy(__pyx_cur_scope->__pyx_8genexpr4__pyx_v_market); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 288, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
          } else {
            __pyx_t_6 = __Pyx_PyObject_CallOneArg((PyObject*)&PyDict_Type, __pyx_cur_scope->__pyx_8genexpr4__pyx_v_market); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 288, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
          }
          __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_8genexpr4__pyx_v_market, __pyx_n_u_symbol); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 288, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_ticker_data, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 288, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(__pyx_t_9 == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "argument after ** must be a mapping, not NoneType");
            __PYX_ERR(0, 288, __pyx_L1_error)
          }
          if (unlikely(PyDict_Update(__pyx_t_6, __pyx_t_9) < 0)) {
            if (PyErr_ExceptionMatches(PyExc_AttributeError)) __Pyx_RaiseMappingExpectedError(__pyx_t_9);
            __PYX_ERR(0, 288, __pyx_L1_error)
          }
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 287, __pyx_L1_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":290
 *                 {**market, **ticker_data[market["symbol"]]}
 *                 for market in market_list
 *                 if market["symbol"] in ticker_data             # <<<<<<<<<<<<<<
 *             ]
 * 
 */
        }

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":289
 *             result_list = [
 *                 {**market, **ticker_data[market["symbol"]]}
 *                 for market in market_list             # <<<<<<<<<<<<<<
 *                 if market["symbol"] in ticker_data
 *             ]
 */
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } /* exit inner scope */
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_v_result_list = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":293
 *             ]
 * 
 *             result_list = {market["symbol"]: market for market in result_list}             # <<<<<<<<<<<<<<
 * 
 *             trading_rules_list = self._format_trading_rules(result_list)
 */
    { /* enter inner scope */
      __pyx_t_3 = PyDict_New(); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 293, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_result_list)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_result_list)) {
        __pyx_t_5 = __pyx_cur_scope->__pyx_v_result_list; __Pyx_INCREF(__pyx_t_5); __pyx_t_4 = 0;
        __pyx_t_7 = NULL;
      } else {
        __pyx_t_4 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_result_list); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 293, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 293, __pyx_L1_error)
      }
      for (;;) {
        if (likely(!__pyx_t_7)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 293, __pyx_L1_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 293, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          } else {
            if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 293, __pyx_L1_error)
            #else
            __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 293, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_6);
            #endif
          }
        } else {
          __pyx_t_6 = __pyx_t_7(__pyx_t_5);
          if (unlikely(!__pyx_t_6)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(0, 293, __pyx_L1_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_6);
        }
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_8genexpr5__pyx_v_market);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_8genexpr5__pyx_v_market, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_8genexpr5__pyx_v_market, __pyx_n_u_symbol); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 293, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        if (unlikely(PyDict_SetItem(__pyx_t_3, (PyObject*)__pyx_t_6, (PyObject*)__pyx_cur_scope->__pyx_8genexpr5__pyx_v_market))) __PYX_ERR(0, 293, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    } /* exit inner scope */
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_result_list);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_result_list, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":295
 *             result_list = {market["symbol"]: market for market in result_list}
 * 
 *             trading_rules_list = self._format_trading_rules(result_list)             # <<<<<<<<<<<<<<
 *             self._trading_rules.clear()
 *             for trading_rule in trading_rules_list:
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_format_trading_rules); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_10 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_10 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_cur_scope->__pyx_v_result_list};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 295, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_cur_scope->__pyx_v_trading_rules_list = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":296
 * 
 *             trading_rules_list = self._format_trading_rules(result_list)
 *             self._trading_rules.clear()             # <<<<<<<<<<<<<<
 *             for trading_rule in trading_rules_list:
 *                 self._trading_rules[trading_rule.trading_pair] = trading_rule
 */
    if (unlikely(__pyx_cur_scope->__pyx_v_self->_trading_rules == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "clear");
      __PYX_ERR(0, 296, __pyx_L1_error)
    }
    __pyx_t_11 = __Pyx_PyDict_Clear(__pyx_cur_scope->__pyx_v_self->_trading_rules); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 296, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":297
 *             trading_rules_list = self._format_trading_rules(result_list)
 *             self._trading_rules.clear()
 *             for trading_rule in trading_rules_list:             # <<<<<<<<<<<<<<
 *                 self._trading_rules[trading_rule.trading_pair] = trading_rule
 * 
 */
    if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_trading_rules_list)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_trading_rules_list)) {
      __pyx_t_3 = __pyx_cur_scope->__pyx_v_trading_rules_list; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_trading_rules_list); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 297, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 297, __pyx_L1_error)
    }
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 297, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 297, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 297, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 297, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_3);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(0, 297, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_trading_rule);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_trading_rule, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":298
 *             self._trading_rules.clear()
 *             for trading_rule in trading_rules_list:
 *                 self._trading_rules[trading_rule.trading_pair] = trading_rule             # <<<<<<<<<<<<<<
 * 
 *     async def list_orders(self) -> List[Any]:
 */
      if (unlikely(__pyx_cur_scope->__pyx_v_self->_trading_rules == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 298, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_trading_rule, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 298, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely((PyDict_SetItem(__pyx_cur_scope->__pyx_v_self->_trading_rules, __pyx_t_5, __pyx_cur_scope->__pyx_v_trading_rule) < 0))) __PYX_ERR(0, 298, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":297
 *             trading_rules_list = self._format_trading_rules(result_list)
 *             self._trading_rules.clear()
 *             for trading_rule in trading_rules_list:             # <<<<<<<<<<<<<<
 *                 self._trading_rules[trading_rule.trading_pair] = trading_rule
 * 
 */
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":274
 *             int64_t last_tick = <int64_t> (self._last_timestamp / 60.0)
 *             int64_t current_tick = <int64_t> (self._current_timestamp / 60.0)
 *         if current_tick > last_tick or len(self._trading_rules) <= 0:             # <<<<<<<<<<<<<<
 *             market_path_url = "/markets"
 *             ticker_path_url = "/markets/tickers"
 */
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":269
 *         return retval
 * 
 *     async def _update_trading_rules(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             # The poll interval for withdraw rules is 60 seconds.
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("_update_trading_rules", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_19generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":300
 *                 self._trading_rules[trading_rule.trading_pair] = trading_rule
 * 
 *     async def list_orders(self) -> List[Any]:             # <<<<<<<<<<<<<<
 *         """
 *         Only a list of all currently open orders(does not include filled orders)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_18list_orders(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_17list_orders, "\n        Only a list of all currently open orders(does not include filled orders)\n        :returns json response\n        i.e.\n        Result = [\n              {\n                \"id\": \"string (uuid)\",\n                \"marketSymbol\": \"string\",\n                \"direction\": \"string\",\n                \"type\": \"string\",\n                \"quantity\": \"number (double)\",\n                \"limit\": \"number (double)\",\n                \"ceiling\": \"number (double)\",\n                \"timeInForce\": \"string\",\n                \"expiresAt\": \"string (date-time)\",\n                \"clientOrderId\": \"string (uuid)\",\n                \"fillQuantity\": \"number (double)\",\n                \"commission\": \"number (double)\",\n                \"proceeds\": \"number (double)\",\n                \"status\": \"string\",\n                \"createdAt\": \"string (date-time)\",\n                \"updatedAt\": \"string (date-time)\",\n                \"closedAt\": \"string (date-time)\"\n              }\n              ...\n            ]\n\n        ");
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_18list_orders = {"list_orders", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_18list_orders, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_17list_orders};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_18list_orders(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("list_orders (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("list_orders", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "list_orders", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_17list_orders(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_17list_orders(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("list_orders", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 300, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_19generator3, __pyx_codeobj__7, (PyObject *) __pyx_cur_scope, __pyx_n_s_list_orders, __pyx_n_s_BittrexExchange_list_orders, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 300, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.list_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_19generator3(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("list_orders", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L4_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 300, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":329
 * 
 *         """
 *         path_url = "/orders/open"             # <<<<<<<<<<<<<<
 * 
 *         result = await self._api_request("GET", path_url=path_url)
 */
  __Pyx_INCREF(__pyx_kp_u_orders_open);
  __Pyx_GIVEREF(__pyx_kp_u_orders_open);
  __pyx_cur_scope->__pyx_v_path_url = __pyx_kp_u_orders_open;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":331
 *         path_url = "/orders/open"
 * 
 *         result = await self._api_request("GET", path_url=path_url)             # <<<<<<<<<<<<<<
 *         return result
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_path_url, __pyx_cur_scope->__pyx_v_path_url) < 0) __PYX_ERR(0, 331, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__4, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 331, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L4_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 331, __pyx_L1_error)
    __pyx_t_3 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_3);
  } else {
    __pyx_t_3 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_3) < 0) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_cur_scope->__pyx_v_result = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":332
 * 
 *         result = await self._api_request("GET", path_url=path_url)
 *         return result             # <<<<<<<<<<<<<<
 * 
 *     async def _update_order_status(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_cur_scope->__pyx_v_result);
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":300
 *                 self._trading_rules[trading_rule.trading_pair] = trading_rule
 * 
 *     async def list_orders(self) -> List[Any]:             # <<<<<<<<<<<<<<
 *         """
 *         Only a list of all currently open orders(does not include filled orders)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("list_orders", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_22generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":334
 *         return result
 * 
 *     async def _update_order_status(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             # This is intended to be a backup measure to close straggler orders, in case Bittrex's user stream events
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_21_update_order_status(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_21_update_order_status = {"_update_order_status", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_21_update_order_status, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_21_update_order_status(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_order_status (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_update_order_status", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_update_order_status", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_update_order_status(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_update_order_status_2generator19(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":347
 *             tracked_orders = list(self._in_flight_orders.values())
 *             open_orders = await self.list_orders()
 *             open_orders = dict((entry["id"], entry) for entry in open_orders)             # <<<<<<<<<<<<<<
 * 
 *             for tracked_order in tracked_orders:
 */

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_update_order_status_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 347, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status *) __pyx_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_update_order_status_2generator19, NULL, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_update_order_status_locals_gene, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._update_order_status.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_update_order_status_2generator19(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 347, __pyx_L1_error)
  __pyx_r = PyDict_New(); if (unlikely(!__pyx_r)) __PYX_ERR(0, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_open_orders)) { __Pyx_RaiseClosureNameError("open_orders"); __PYX_ERR(0, 347, __pyx_L1_error) }
  if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_open_orders)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_open_orders)) {
    __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_open_orders; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_open_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 347, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 347, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely((0 < 0))) __PYX_ERR(0, 347, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 347, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(0, 347, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_entry);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_entry, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_entry, __pyx_n_u_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(PyDict_SetItem(__pyx_r, (PyObject*)__pyx_t_4, (PyObject*)__pyx_cur_scope->__pyx_v_entry))) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":334
 *         return result
 * 
 *     async def _update_order_status(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             # This is intended to be a backup measure to close straggler orders, in case Bittrex's user stream events
 */

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_update_order_status(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status *__pyx_cur_scope;
  PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_update_order_status_2generator19 = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_update_order_status", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 334, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_22generator4, __pyx_codeobj__8, (PyObject *) __pyx_cur_scope, __pyx_n_s_update_order_status, __pyx_n_s_BittrexExchange__update_order_st, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 334, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._update_order_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XDECREF(__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_update_order_status_2generator19);
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_22generator4(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int64_t __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  Py_ssize_t __pyx_t_17;
  Py_UCS4 __pyx_t_18;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_update_order_status", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L7_resume_from_await;
    case 2: goto __pyx_L18_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 334, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":340
 *             # _user_stream_event_listener
 *             # The poll interval for order status is 10 seconds.
 *             int64_t last_tick = <int64_t> (self._last_poll_timestamp / self.UPDATE_ORDERS_INTERVAL)             # <<<<<<<<<<<<<<
 *             int64_t current_tick = <int64_t> (self._current_timestamp / self.UPDATE_ORDERS_INTERVAL)
 * 
 */
  __pyx_t_1 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->_last_poll_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_UPDATE_ORDERS_INTERVAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyNumber_Divide(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_cur_scope->__pyx_v_last_tick = ((int64_t)__pyx_t_4);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":341
 *             # The poll interval for order status is 10 seconds.
 *             int64_t last_tick = <int64_t> (self._last_poll_timestamp / self.UPDATE_ORDERS_INTERVAL)
 *             int64_t current_tick = <int64_t> (self._current_timestamp / self.UPDATE_ORDERS_INTERVAL)             # <<<<<<<<<<<<<<
 * 
 *         if current_tick > last_tick and len(self._in_flight_orders) > 0:
 */
  __pyx_t_3 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_UPDATE_ORDERS_INTERVAL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyNumber_Divide(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 341, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_cur_scope->__pyx_v_current_tick = ((int64_t)__pyx_t_4);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":343
 *             int64_t current_tick = <int64_t> (self._current_timestamp / self.UPDATE_ORDERS_INTERVAL)
 * 
 *         if current_tick > last_tick and len(self._in_flight_orders) > 0:             # <<<<<<<<<<<<<<
 * 
 *             tracked_orders = list(self._in_flight_orders.values())
 */
  __pyx_t_6 = ((__pyx_cur_scope->__pyx_v_current_tick > __pyx_cur_scope->__pyx_v_last_tick) != 0);
  if (__pyx_t_6) {
  } else {
    __pyx_t_5 = __pyx_t_6;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_self->_in_flight_orders;
  __Pyx_INCREF(__pyx_t_1);
  if (unlikely(__pyx_t_1 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 343, __pyx_L1_error)
  }
  __pyx_t_7 = PyDict_Size(__pyx_t_1); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 343, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_6 = ((__pyx_t_7 > 0) != 0);
  __pyx_t_5 = __pyx_t_6;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":345
 *         if current_tick > last_tick and len(self._in_flight_orders) > 0:
 * 
 *             tracked_orders = list(self._in_flight_orders.values())             # <<<<<<<<<<<<<<
 *             open_orders = await self.list_orders()
 *             open_orders = dict((entry["id"], entry) for entry in open_orders)
 */
    if (unlikely(__pyx_cur_scope->__pyx_v_self->_in_flight_orders == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
      __PYX_ERR(0, 345, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyDict_Values(__pyx_cur_scope->__pyx_v_self->_in_flight_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PySequence_ListKeepNew(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_v_tracked_orders = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":346
 * 
 *             tracked_orders = list(self._in_flight_orders.values())
 *             open_orders = await self.list_orders()             # <<<<<<<<<<<<<<
 *             open_orders = dict((entry["id"], entry) for entry in open_orders)
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_list_orders); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = NULL;
    __pyx_t_8 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_8 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_3, };
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 346, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_2);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, awaiting value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L7_resume_from_await:;
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 346, __pyx_L1_error)
      __pyx_t_2 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_2);
    } else {
      __pyx_t_2 = NULL;
      if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_2) < 0) __PYX_ERR(0, 346, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_cur_scope->__pyx_v_open_orders = __pyx_t_2;
    __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":347
 *             tracked_orders = list(self._in_flight_orders.values())
 *             open_orders = await self.list_orders()
 *             open_orders = dict((entry["id"], entry) for entry in open_orders)             # <<<<<<<<<<<<<<
 * 
 *             for tracked_order in tracked_orders:
 */
    __pyx_t_2 = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_update_order_status_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_Generator_Next(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_open_orders);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_open_orders, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":349
 *             open_orders = dict((entry["id"], entry) for entry in open_orders)
 * 
 *             for tracked_order in tracked_orders:             # <<<<<<<<<<<<<<
 *                 try:
 *                     exchange_order_id = await tracked_order.get_exchange_order_id()
 */
    __pyx_t_1 = __pyx_cur_scope->__pyx_v_tracked_orders; __Pyx_INCREF(__pyx_t_1); __pyx_t_7 = 0;
    for (;;) {
      if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_7); __Pyx_INCREF(__pyx_t_2); __pyx_t_7++; if (unlikely((0 < 0))) __PYX_ERR(0, 349, __pyx_L1_error)
      #else
      __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 349, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      #endif
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tracked_order);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":350
 * 
 *             for tracked_order in tracked_orders:
 *                 try:             # <<<<<<<<<<<<<<
 *                     exchange_order_id = await tracked_order.get_exchange_order_id()
 *                 except asyncio.TimeoutError:
 */
      {
        __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        /*try:*/ {

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":351
 *             for tracked_order in tracked_orders:
 *                 try:
 *                     exchange_order_id = await tracked_order.get_exchange_order_id()             # <<<<<<<<<<<<<<
 *                 except asyncio.TimeoutError:
 *                     if tracked_order.last_state == "FAILURE":
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_get_exchange_order_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 351, __pyx_L10_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_12 = NULL;
          __pyx_t_8 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_12)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_12);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_8 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_12, };
            __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_2);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_2);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_1);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_7;
            __Pyx_XGIVEREF(__pyx_t_9);
            __pyx_cur_scope->__pyx_t_2 = __pyx_t_9;
            __Pyx_XGIVEREF(__pyx_t_10);
            __pyx_cur_scope->__pyx_t_3 = __pyx_t_10;
            __Pyx_XGIVEREF(__pyx_t_11);
            __pyx_cur_scope->__pyx_t_4 = __pyx_t_11;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 2;
            return __pyx_r;
            __pyx_L18_resume_from_await:;
            __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_1);
            __pyx_t_7 = __pyx_cur_scope->__pyx_t_1;
            __pyx_t_9 = __pyx_cur_scope->__pyx_t_2;
            __pyx_cur_scope->__pyx_t_2 = 0;
            __Pyx_XGOTREF(__pyx_t_9);
            __pyx_t_10 = __pyx_cur_scope->__pyx_t_3;
            __pyx_cur_scope->__pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_t_10);
            __pyx_t_11 = __pyx_cur_scope->__pyx_t_4;
            __pyx_cur_scope->__pyx_t_4 = 0;
            __Pyx_XGOTREF(__pyx_t_11);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 351, __pyx_L10_error)
            __pyx_t_2 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_2);
          } else {
            __pyx_t_2 = NULL;
            if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_2) < 0) __PYX_ERR(0, 351, __pyx_L10_error)
            __Pyx_GOTREF(__pyx_t_2);
          }
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_exchange_order_id);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_exchange_order_id, __pyx_t_2);
          __Pyx_GIVEREF(__pyx_t_2);
          __pyx_t_2 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":350
 * 
 *             for tracked_order in tracked_orders:
 *                 try:             # <<<<<<<<<<<<<<
 *                     exchange_order_id = await tracked_order.get_exchange_order_id()
 *                 except asyncio.TimeoutError:
 */
        }
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        goto __pyx_L17_try_end;
        __pyx_L10_error:;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":352
 *                 try:
 *                     exchange_order_id = await tracked_order.get_exchange_order_id()
 *                 except asyncio.TimeoutError:             # <<<<<<<<<<<<<<
 *                     if tracked_order.last_state == "FAILURE":
 *                         self.c_stop_tracking_order(client_order_id)
 */
        __Pyx_ErrFetch(&__pyx_t_2, &__pyx_t_3, &__pyx_t_12);
        __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 352, __pyx_L12_except_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_TimeoutError); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 352, __pyx_L12_except_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_8 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_2, __pyx_t_14);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_ErrRestore(__pyx_t_2, __pyx_t_3, __pyx_t_12);
        __pyx_t_2 = 0; __pyx_t_3 = 0; __pyx_t_12 = 0;
        if (__pyx_t_8) {
          __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._update_order_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_12, &__pyx_t_3, &__pyx_t_2) < 0) __PYX_ERR(0, 352, __pyx_L12_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_2);

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":353
 *                     exchange_order_id = await tracked_order.get_exchange_order_id()
 *                 except asyncio.TimeoutError:
 *                     if tracked_order.last_state == "FAILURE":             # <<<<<<<<<<<<<<
 *                         self.c_stop_tracking_order(client_order_id)
 *                         self.logger().warning(
 */
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_last_state); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 353, __pyx_L12_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_t_14, __pyx_n_u_FAILURE, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 353, __pyx_L12_except_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (likely(__pyx_t_5)) {

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":354
 *                 except asyncio.TimeoutError:
 *                     if tracked_order.last_state == "FAILURE":
 *                         self.c_stop_tracking_order(client_order_id)             # <<<<<<<<<<<<<<
 *                         self.logger().warning(
 *                             f"No exchange ID found for {client_order_id} on order status update."
 */
            if (unlikely(!__pyx_cur_scope->__pyx_v_client_order_id)) { __Pyx_RaiseUnboundLocalError("client_order_id"); __PYX_ERR(0, 354, __pyx_L12_except_error) }
            if (!(likely(PyUnicode_CheckExact(__pyx_cur_scope->__pyx_v_client_order_id))||((__pyx_cur_scope->__pyx_v_client_order_id) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_cur_scope->__pyx_v_client_order_id))) __PYX_ERR(0, 354, __pyx_L12_except_error)
            __pyx_t_14 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_stop_tracking_order(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), ((PyObject*)__pyx_cur_scope->__pyx_v_client_order_id)); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 354, __pyx_L12_except_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":355
 *                     if tracked_order.last_state == "FAILURE":
 *                         self.c_stop_tracking_order(client_order_id)
 *                         self.logger().warning(             # <<<<<<<<<<<<<<
 *                             f"No exchange ID found for {client_order_id} on order status update."
 *                             f" Order no longer tracked. This is most likely due to a POST_ONLY_NOT_MET error."
 */
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 355, __pyx_L12_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_16 = NULL;
            __pyx_t_8 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
              __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_15);
              if (likely(__pyx_t_16)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                __Pyx_INCREF(__pyx_t_16);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_15, function);
                __pyx_t_8 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[1] = {__pyx_t_16, };
              __pyx_t_13 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
              __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
              if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 355, __pyx_L12_except_error)
              __Pyx_GOTREF(__pyx_t_13);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            }
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_warning); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 355, __pyx_L12_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":356
 *                         self.c_stop_tracking_order(client_order_id)
 *                         self.logger().warning(
 *                             f"No exchange ID found for {client_order_id} on order status update."             # <<<<<<<<<<<<<<
 *                             f" Order no longer tracked. This is most likely due to a POST_ONLY_NOT_MET error."
 *                         )
 */
            __pyx_t_13 = PyTuple_New(3); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 356, __pyx_L12_except_error)
            __Pyx_GOTREF(__pyx_t_13);
            __pyx_t_17 = 0;
            __pyx_t_18 = 127;
            __Pyx_INCREF(__pyx_kp_u_No_exchange_ID_found_for);
            __pyx_t_17 += 25;
            __Pyx_GIVEREF(__pyx_kp_u_No_exchange_ID_found_for);
            PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_kp_u_No_exchange_ID_found_for);
            if (unlikely(!__pyx_cur_scope->__pyx_v_client_order_id)) { __Pyx_RaiseUnboundLocalError("client_order_id"); __PYX_ERR(0, 356, __pyx_L12_except_error) }
            __pyx_t_16 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_client_order_id, __pyx_empty_unicode); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 356, __pyx_L12_except_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_18 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) > __pyx_t_18) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) : __pyx_t_18;
            __pyx_t_17 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_16);
            __Pyx_GIVEREF(__pyx_t_16);
            PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_t_16);
            __pyx_t_16 = 0;
            __Pyx_INCREF(__pyx_kp_u_on_order_status_update_Order_no);
            __pyx_t_17 += 103;
            __Pyx_GIVEREF(__pyx_kp_u_on_order_status_update_Order_no);
            PyTuple_SET_ITEM(__pyx_t_13, 2, __pyx_kp_u_on_order_status_update_Order_no);
            __pyx_t_16 = __Pyx_PyUnicode_Join(__pyx_t_13, 3, __pyx_t_17, __pyx_t_18); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 356, __pyx_L12_except_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_13 = NULL;
            __pyx_t_8 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
              __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_15);
              if (likely(__pyx_t_13)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                __Pyx_INCREF(__pyx_t_13);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_15, function);
                __pyx_t_8 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_t_16};
              __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
              if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 355, __pyx_L12_except_error)
              __Pyx_GOTREF(__pyx_t_14);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            }
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":359
 *                             f" Order no longer tracked. This is most likely due to a POST_ONLY_NOT_MET error."
 *                         )
 *                         continue             # <<<<<<<<<<<<<<
 *                     else:
 *                         self.logger().error(f"Exchange order ID never updated for {tracked_order.client_order_id}")
 */
            goto __pyx_L20_except_continue;

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":353
 *                     exchange_order_id = await tracked_order.get_exchange_order_id()
 *                 except asyncio.TimeoutError:
 *                     if tracked_order.last_state == "FAILURE":             # <<<<<<<<<<<<<<
 *                         self.c_stop_tracking_order(client_order_id)
 *                         self.logger().warning(
 */
          }

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":361
 *                         continue
 *                     else:
 *                         self.logger().error(f"Exchange order ID never updated for {tracked_order.client_order_id}")             # <<<<<<<<<<<<<<
 *                         raise
 *                 client_order_id = tracked_order.client_order_id
 */
          /*else*/ {
            __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 361, __pyx_L12_except_error)
            __Pyx_GOTREF(__pyx_t_16);
            __pyx_t_13 = NULL;
            __pyx_t_8 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
              __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_16);
              if (likely(__pyx_t_13)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                __Pyx_INCREF(__pyx_t_13);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_16, function);
                __pyx_t_8 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[1] = {__pyx_t_13, };
              __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 361, __pyx_L12_except_error)
              __Pyx_GOTREF(__pyx_t_15);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            }
            __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_error); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 361, __pyx_L12_except_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 361, __pyx_L12_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_13 = __Pyx_PyObject_FormatSimple(__pyx_t_15, __pyx_empty_unicode); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 361, __pyx_L12_except_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_t_15 = __Pyx_PyUnicode_Concat(__pyx_kp_u_Exchange_order_ID_never_updated, __pyx_t_13); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 361, __pyx_L12_except_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
            __pyx_t_13 = NULL;
            __pyx_t_8 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
              __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_16);
              if (likely(__pyx_t_13)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
                __Pyx_INCREF(__pyx_t_13);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_16, function);
                __pyx_t_8 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_t_15};
              __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
              __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 361, __pyx_L12_except_error)
              __Pyx_GOTREF(__pyx_t_14);
              __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            }
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":362
 *                     else:
 *                         self.logger().error(f"Exchange order ID never updated for {tracked_order.client_order_id}")
 *                         raise             # <<<<<<<<<<<<<<
 *                 client_order_id = tracked_order.client_order_id
 *                 order = open_orders.get(exchange_order_id)
 */
            __Pyx_GIVEREF(__pyx_t_12);
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_XGIVEREF(__pyx_t_2);
            __Pyx_ErrRestoreWithState(__pyx_t_12, __pyx_t_3, __pyx_t_2);
            __pyx_t_12 = 0; __pyx_t_3 = 0; __pyx_t_2 = 0; 
            __PYX_ERR(0, 362, __pyx_L12_except_error)
          }
          __pyx_L20_except_continue:;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
          goto __pyx_L16_try_continue;
        }
        goto __pyx_L12_except_error;
        __pyx_L12_except_error:;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":350
 * 
 *             for tracked_order in tracked_orders:
 *                 try:             # <<<<<<<<<<<<<<
 *                     exchange_order_id = await tracked_order.get_exchange_order_id()
 *                 except asyncio.TimeoutError:
 */
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        goto __pyx_L1_error;
        __pyx_L16_try_continue:;
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        goto __pyx_L8_continue;
        __pyx_L17_try_end:;
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":363
 *                         self.logger().error(f"Exchange order ID never updated for {tracked_order.client_order_id}")
 *                         raise
 *                 client_order_id = tracked_order.client_order_id             # <<<<<<<<<<<<<<
 *                 order = open_orders.get(exchange_order_id)
 * 
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 363, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_client_order_id);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_client_order_id, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":364
 *                         raise
 *                 client_order_id = tracked_order.client_order_id
 *                 order = open_orders.get(exchange_order_id)             # <<<<<<<<<<<<<<
 * 
 *                 # Do nothing, if the order has already been cancelled or has failed
 */
      if (unlikely(__pyx_cur_scope->__pyx_v_open_orders == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
        __PYX_ERR(0, 364, __pyx_L1_error)
      }
      __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_cur_scope->__pyx_v_open_orders, __pyx_cur_scope->__pyx_v_exchange_order_id, Py_None); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":367
 * 
 *                 # Do nothing, if the order has already been cancelled or has failed
 *                 if client_order_id not in self._in_flight_orders:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      if (unlikely(__pyx_cur_scope->__pyx_v_self->_in_flight_orders == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
        __PYX_ERR(0, 367, __pyx_L1_error)
      }
      __pyx_t_5 = (__Pyx_PyDict_ContainsTF(__pyx_cur_scope->__pyx_v_client_order_id, __pyx_cur_scope->__pyx_v_self->_in_flight_orders, Py_NE)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 367, __pyx_L1_error)
      __pyx_t_6 = (__pyx_t_5 != 0);
      if (__pyx_t_6) {

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":368
 *                 # Do nothing, if the order has already been cancelled or has failed
 *                 if client_order_id not in self._in_flight_orders:
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 if order is None:  # Handles order that are currently tracked but no longer open in exchange
 */
        goto __pyx_L8_continue;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":367
 * 
 *                 # Do nothing, if the order has already been cancelled or has failed
 *                 if client_order_id not in self._in_flight_orders:             # <<<<<<<<<<<<<<
 *                     continue
 * 
 */
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":370
 *                     continue
 * 
 *                 if order is None:  # Handles order that are currently tracked but no longer open in exchange             # <<<<<<<<<<<<<<
 *                     self._order_not_found_records[client_order_id] = \
 *                         self._order_not_found_records.get(client_order_id, 0) + 1
 */
      __pyx_t_6 = (__pyx_cur_scope->__pyx_v_order == Py_None);
      __pyx_t_5 = (__pyx_t_6 != 0);
      if (__pyx_t_5) {

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":372
 *                 if order is None:  # Handles order that are currently tracked but no longer open in exchange
 *                     self._order_not_found_records[client_order_id] = \
 *                         self._order_not_found_records.get(client_order_id, 0) + 1             # <<<<<<<<<<<<<<
 * 
 *                     if self._order_not_found_records[client_order_id] < self.ORDER_NOT_EXIST_CONFIRMATION_COUNT:
 */
        if (unlikely(__pyx_cur_scope->__pyx_v_self->_order_not_found_records == Py_None)) {
          PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
          __PYX_ERR(0, 372, __pyx_L1_error)
        }
        __pyx_t_2 = __Pyx_PyDict_GetItemDefault(__pyx_cur_scope->__pyx_v_self->_order_not_found_records, __pyx_cur_scope->__pyx_v_client_order_id, __pyx_int_0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 372, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 372, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":371
 * 
 *                 if order is None:  # Handles order that are currently tracked but no longer open in exchange
 *                     self._order_not_found_records[client_order_id] = \             # <<<<<<<<<<<<<<
 *                         self._order_not_found_records.get(client_order_id, 0) + 1
 * 
 */
        if (unlikely(__pyx_cur_scope->__pyx_v_self->_order_not_found_records == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 371, __pyx_L1_error)
        }
        if (unlikely((PyDict_SetItem(__pyx_cur_scope->__pyx_v_self->_order_not_found_records, __pyx_cur_scope->__pyx_v_client_order_id, __pyx_t_3) < 0))) __PYX_ERR(0, 371, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":374
 *                         self._order_not_found_records.get(client_order_id, 0) + 1
 * 
 *                     if self._order_not_found_records[client_order_id] < self.ORDER_NOT_EXIST_CONFIRMATION_COUNT:             # <<<<<<<<<<<<<<
 *                         # Wait until the order not found error have repeated for a few times before actually treating
 *                         # it as a fail. See: https://github.com/CoinAlpha/hummingbot/issues/601
 */
        if (unlikely(__pyx_cur_scope->__pyx_v_self->_order_not_found_records == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 374, __pyx_L1_error)
        }
        __pyx_t_3 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_self->_order_not_found_records, __pyx_cur_scope->__pyx_v_client_order_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 374, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_ORDER_NOT_EXIST_CONFIRMATION_COU); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 374, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_12 = PyObject_RichCompare(__pyx_t_3, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_12); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 374, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 374, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (__pyx_t_5) {

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":377
 *                         # Wait until the order not found error have repeated for a few times before actually treating
 *                         # it as a fail. See: https://github.com/CoinAlpha/hummingbot/issues/601
 *                         continue             # <<<<<<<<<<<<<<
 *                     tracked_order.last_state = "CLOSED"
 *                     self.c_trigger_event(
 */
          goto __pyx_L8_continue;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":374
 *                         self._order_not_found_records.get(client_order_id, 0) + 1
 * 
 *                     if self._order_not_found_records[client_order_id] < self.ORDER_NOT_EXIST_CONFIRMATION_COUNT:             # <<<<<<<<<<<<<<
 *                         # Wait until the order not found error have repeated for a few times before actually treating
 *                         # it as a fail. See: https://github.com/CoinAlpha/hummingbot/issues/601
 */
        }

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":378
 *                         # it as a fail. See: https://github.com/CoinAlpha/hummingbot/issues/601
 *                         continue
 *                     tracked_order.last_state = "CLOSED"             # <<<<<<<<<<<<<<
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_FAILURE_EVENT_TAG,
 */
        if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_last_state, __pyx_n_u_CLOSED) < 0) __PYX_ERR(0, 378, __pyx_L1_error)

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":380
 *                     tracked_order.last_state = "CLOSED"
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_FAILURE_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                         MarketOrderFailureEvent(self._current_timestamp,
 *                                                 client_order_id,
 */
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 380, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_t_12); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 380, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":381
 *                     self.c_trigger_event(
 *                         self.MARKET_ORDER_FAILURE_EVENT_TAG,
 *                         MarketOrderFailureEvent(self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                                 client_order_id,
 *                                                 tracked_order.order_type)
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_MarketOrderFailureEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 381, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_3 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 381, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":383
 *                         MarketOrderFailureEvent(self._current_timestamp,
 *                                                 client_order_id,
 *                                                 tracked_order.order_type)             # <<<<<<<<<<<<<<
 *                     )
 *                     self.c_stop_tracking_order(client_order_id)
 */
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_order_type); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 383, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_16 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_16)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_16);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[4] = {__pyx_t_16, __pyx_t_3, __pyx_cur_scope->__pyx_v_client_order_id, __pyx_t_14};
          __pyx_t_12 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 3+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 381, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":379
 *                         continue
 *                     tracked_order.last_state = "CLOSED"
 *                     self.c_trigger_event(             # <<<<<<<<<<<<<<
 *                         self.MARKET_ORDER_FAILURE_EVENT_TAG,
 *                         MarketOrderFailureEvent(self._current_timestamp,
 */
        __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_4, __pyx_t_12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 379, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":385
 *                                                 tracked_order.order_type)
 *                     )
 *                     self.c_stop_tracking_order(client_order_id)             # <<<<<<<<<<<<<<
 *                     self.logger().network(
 *                         f"Error fetching status update for the order {client_order_id}: "
 */
        if (!(likely(PyUnicode_CheckExact(__pyx_cur_scope->__pyx_v_client_order_id))||((__pyx_cur_scope->__pyx_v_client_order_id) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_cur_scope->__pyx_v_client_order_id))) __PYX_ERR(0, 385, __pyx_L1_error)
        __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_stop_tracking_order(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), ((PyObject*)__pyx_cur_scope->__pyx_v_client_order_id)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 385, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":386
 *                     )
 *                     self.c_stop_tracking_order(client_order_id)
 *                     self.logger().network(             # <<<<<<<<<<<<<<
 *                         f"Error fetching status update for the order {client_order_id}: "
 *                         f"{tracked_order}",
 */
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 386, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_14 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
          __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_12);
          if (likely(__pyx_t_14)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
            __Pyx_INCREF(__pyx_t_14);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_12, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_14, };
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 386, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        }
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_network); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 386, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":387
 *                     self.c_stop_tracking_order(client_order_id)
 *                     self.logger().network(
 *                         f"Error fetching status update for the order {client_order_id}: "             # <<<<<<<<<<<<<<
 *                         f"{tracked_order}",
 *                         app_warning_msg=f"Could not fetch updates for the order {client_order_id}. "
 */
        __pyx_t_2 = PyTuple_New(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 387, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_17 = 0;
        __pyx_t_18 = 127;
        __Pyx_INCREF(__pyx_kp_u_Error_fetching_status_update_for);
        __pyx_t_17 += 43;
        __Pyx_GIVEREF(__pyx_kp_u_Error_fetching_status_update_for);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_Error_fetching_status_update_for);
        __pyx_t_14 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_client_order_id, __pyx_empty_unicode); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 387, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_18 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) > __pyx_t_18) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) : __pyx_t_18;
        __pyx_t_17 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_14);
        PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_14);
        __pyx_t_14 = 0;
        __Pyx_INCREF(__pyx_kp_u__9);
        __pyx_t_17 += 2;
        __Pyx_GIVEREF(__pyx_kp_u__9);
        PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u__9);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":388
 *                     self.logger().network(
 *                         f"Error fetching status update for the order {client_order_id}: "
 *                         f"{tracked_order}",             # <<<<<<<<<<<<<<
 *                         app_warning_msg=f"Could not fetch updates for the order {client_order_id}. "
 *                                         f"Check API key and network connection."
 */
        __pyx_t_14 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_empty_unicode); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 388, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_18 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) > __pyx_t_18) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_14) : __pyx_t_18;
        __pyx_t_17 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_14);
        __Pyx_GIVEREF(__pyx_t_14);
        PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_14);
        __pyx_t_14 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":387
 *                     self.c_stop_tracking_order(client_order_id)
 *                     self.logger().network(
 *                         f"Error fetching status update for the order {client_order_id}: "             # <<<<<<<<<<<<<<
 *                         f"{tracked_order}",
 *                         app_warning_msg=f"Could not fetch updates for the order {client_order_id}. "
 */
        __pyx_t_14 = __Pyx_PyUnicode_Join(__pyx_t_2, 4, __pyx_t_17, __pyx_t_18); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 387, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":386
 *                     )
 *                     self.c_stop_tracking_order(client_order_id)
 *                     self.logger().network(             # <<<<<<<<<<<<<<
 *                         f"Error fetching status update for the order {client_order_id}: "
 *                         f"{tracked_order}",
 */
        __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 386, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_GIVEREF(__pyx_t_14);
        PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_14);
        __pyx_t_14 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":389
 *                         f"Error fetching status update for the order {client_order_id}: "
 *                         f"{tracked_order}",
 *                         app_warning_msg=f"Could not fetch updates for the order {client_order_id}. "             # <<<<<<<<<<<<<<
 *                                         f"Check API key and network connection."
 *                     )
 */
        __pyx_t_14 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 389, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 389, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_17 = 0;
        __pyx_t_18 = 127;
        __Pyx_INCREF(__pyx_kp_u_Could_not_fetch_updates_for_the);
        __pyx_t_17 += 38;
        __Pyx_GIVEREF(__pyx_kp_u_Could_not_fetch_updates_for_the);
        PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_Could_not_fetch_updates_for_the);
        __pyx_t_16 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_client_order_id, __pyx_empty_unicode); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 389, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_18 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) > __pyx_t_18) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) : __pyx_t_18;
        __pyx_t_17 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_16);
        __Pyx_GIVEREF(__pyx_t_16);
        PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_16);
        __pyx_t_16 = 0;
        __Pyx_INCREF(__pyx_kp_u_Check_API_key_and_network_conne);
        __pyx_t_17 += 39;
        __Pyx_GIVEREF(__pyx_kp_u_Check_API_key_and_network_conne);
        PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_Check_API_key_and_network_conne);
        __pyx_t_16 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_17, __pyx_t_18); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 389, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_app_warning_msg, __pyx_t_16) < 0) __PYX_ERR(0, 389, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":386
 *                     )
 *                     self.c_stop_tracking_order(client_order_id)
 *                     self.logger().network(             # <<<<<<<<<<<<<<
 *                         f"Error fetching status update for the order {client_order_id}: "
 *                         f"{tracked_order}",
 */
        __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_2, __pyx_t_14); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 386, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":392
 *                                         f"Check API key and network connection."
 *                     )
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *                 order_state = order["status"]
 */
        goto __pyx_L8_continue;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":370
 *                     continue
 * 
 *                 if order is None:  # Handles order that are currently tracked but no longer open in exchange             # <<<<<<<<<<<<<<
 *                     self._order_not_found_records[client_order_id] = \
 *                         self._order_not_found_records.get(client_order_id, 0) + 1
 */
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":394
 *                     continue
 * 
 *                 order_state = order["status"]             # <<<<<<<<<<<<<<
 *                 order_type = tracked_order.order_type.name.lower()
 *                 trade_type = tracked_order.trade_type.name.lower()
 */
      __pyx_t_16 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_status); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 394, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order_state);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order_state, __pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_16);
      __pyx_t_16 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":395
 * 
 *                 order_state = order["status"]
 *                 order_type = tracked_order.order_type.name.lower()             # <<<<<<<<<<<<<<
 *                 trade_type = tracked_order.trade_type.name.lower()
 *                 order_type_description = tracked_order.order_type_description
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_order_type); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 395, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 395, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_lower); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 395, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
          __pyx_t_8 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_2, };
        __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 395, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order_type);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order_type, __pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_16);
      __pyx_t_16 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":396
 *                 order_state = order["status"]
 *                 order_type = tracked_order.order_type.name.lower()
 *                 trade_type = tracked_order.trade_type.name.lower()             # <<<<<<<<<<<<<<
 *                 order_type_description = tracked_order.order_type_description
 * 
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_trade_type); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 396, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_name_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 396, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_lower); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 396, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
          __pyx_t_8 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_2, };
        __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 396, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_trade_type);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_trade_type, __pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_16);
      __pyx_t_16 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":397
 *                 order_type = tracked_order.order_type.name.lower()
 *                 trade_type = tracked_order.trade_type.name.lower()
 *                 order_type_description = tracked_order.order_type_description             # <<<<<<<<<<<<<<
 * 
 *                 executed_price = Decimal(order["limit"])
 */
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_order_type_description); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 397, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order_type_description);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order_type_description, __pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_16);
      __pyx_t_16 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":399
 *                 order_type_description = tracked_order.order_type_description
 * 
 *                 executed_price = Decimal(order["limit"])             # <<<<<<<<<<<<<<
 *                 executed_amount_diff = s_decimal_0
 * 
 */
      __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 399, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_limit); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 399, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
          __pyx_t_8 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_2};
        __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 399, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_executed_price);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_executed_price, __pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_16);
      __pyx_t_16 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":400
 * 
 *                 executed_price = Decimal(order["limit"])
 *                 executed_amount_diff = s_decimal_0             # <<<<<<<<<<<<<<
 * 
 *                 remaining_size = Decimal(order["quantity"]) - Decimal(order["fillQuantity"])
 */
      __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 400, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_executed_amount_diff);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_executed_amount_diff, __pyx_t_16);
      __Pyx_GIVEREF(__pyx_t_16);
      __pyx_t_16 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":402
 *                 executed_amount_diff = s_decimal_0
 * 
 *                 remaining_size = Decimal(order["quantity"]) - Decimal(order["fillQuantity"])             # <<<<<<<<<<<<<<
 *                 new_confirmed_amount = tracked_order.amount - remaining_size
 *                 executed_amount_diff = new_confirmed_amount - tracked_order.executed_amount_base
 */
      __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 402, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_quantity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 402, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_14))) {
        __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_14);
        if (likely(__pyx_t_12)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
          __Pyx_INCREF(__pyx_t_12);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_14, function);
          __pyx_t_8 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_12, __pyx_t_2};
        __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 402, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      }
      __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 402, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_fillQuantity); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 402, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_3 = NULL;
      __pyx_t_8 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_2, function);
          __pyx_t_8 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_12};
        __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 402, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      }
      __pyx_t_2 = PyNumber_Subtract(__pyx_t_16, __pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 402, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_remaining_size);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_remaining_size, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":403
 * 
 *                 remaining_size = Decimal(order["quantity"]) - Decimal(order["fillQuantity"])
 *                 new_confirmed_amount = tracked_order.amount - remaining_size             # <<<<<<<<<<<<<<
 *                 executed_amount_diff = new_confirmed_amount - tracked_order.executed_amount_base
 *                 tracked_order.executed_amount_base = new_confirmed_amount
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_amount); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 403, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_14 = PyNumber_Subtract(__pyx_t_2, __pyx_cur_scope->__pyx_v_remaining_size); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 403, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_new_confirmed_amount);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_new_confirmed_amount, __pyx_t_14);
      __Pyx_GIVEREF(__pyx_t_14);
      __pyx_t_14 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":404
 *                 remaining_size = Decimal(order["quantity"]) - Decimal(order["fillQuantity"])
 *                 new_confirmed_amount = tracked_order.amount - remaining_size
 *                 executed_amount_diff = new_confirmed_amount - tracked_order.executed_amount_base             # <<<<<<<<<<<<<<
 *                 tracked_order.executed_amount_base = new_confirmed_amount
 *                 tracked_order.executed_amount_quote += executed_amount_diff * executed_price
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_executed_amount_base); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 404, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_2 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_new_confirmed_amount, __pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 404, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_executed_amount_diff);
      __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_executed_amount_diff, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":405
 *                 new_confirmed_amount = tracked_order.amount - remaining_size
 *                 executed_amount_diff = new_confirmed_amount - tracked_order.executed_amount_base
 *                 tracked_order.executed_amount_base = new_confirmed_amount             # <<<<<<<<<<<<<<
 *                 tracked_order.executed_amount_quote += executed_amount_diff * executed_price
 * 
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_executed_amount_base, __pyx_cur_scope->__pyx_v_new_confirmed_amount) < 0) __PYX_ERR(0, 405, __pyx_L1_error)

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":406
 *                 executed_amount_diff = new_confirmed_amount - tracked_order.executed_amount_base
 *                 tracked_order.executed_amount_base = new_confirmed_amount
 *                 tracked_order.executed_amount_quote += executed_amount_diff * executed_price             # <<<<<<<<<<<<<<
 * 
 *                 if executed_amount_diff > s_decimal_0:
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_executed_amount_quote); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 406, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_14 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_executed_amount_diff, __pyx_cur_scope->__pyx_v_executed_price); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 406, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_16 = PyNumber_InPlaceAdd(__pyx_t_2, __pyx_t_14); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 406, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_executed_amount_quote, __pyx_t_16) < 0) __PYX_ERR(0, 406, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":408
 *                 tracked_order.executed_amount_quote += executed_amount_diff * executed_price
 * 
 *                 if executed_amount_diff > s_decimal_0:             # <<<<<<<<<<<<<<
 *                     self.logger().info(f"Filled {executed_amount_diff} out of {tracked_order.amount} of the "
 *                                        f"{order_type_description} order {tracked_order.client_order_id}.")
 */
      __Pyx_GetModuleGlobalName(__pyx_t_16, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 408, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_14 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_executed_amount_diff, __pyx_t_16, Py_GT); __Pyx_XGOTREF(__pyx_t_14); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 408, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 408, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      if (__pyx_t_5) {

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":409
 * 
 *                 if executed_amount_diff > s_decimal_0:
 *                     self.logger().info(f"Filled {executed_amount_diff} out of {tracked_order.amount} of the "             # <<<<<<<<<<<<<<
 *                                        f"{order_type_description} order {tracked_order.client_order_id}.")
 *                     self.c_trigger_event(self.MARKET_ORDER_FILLED_EVENT_TAG,
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_12 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_12 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_12)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_12);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_12, };
          __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 0+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 409, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_info); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_16 = PyTuple_New(9); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_17 = 0;
        __pyx_t_18 = 127;
        __Pyx_INCREF(__pyx_kp_u_Filled);
        __pyx_t_17 += 7;
        __Pyx_GIVEREF(__pyx_kp_u_Filled);
        PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_kp_u_Filled);
        __pyx_t_12 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_executed_amount_diff, __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_18 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) > __pyx_t_18) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) : __pyx_t_18;
        __pyx_t_17 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_12);
        __pyx_t_12 = 0;
        __Pyx_INCREF(__pyx_kp_u_out_of);
        __pyx_t_17 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_out_of);
        PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_kp_u_out_of);
        __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_amount); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_12, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_18 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_18) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_18;
        __pyx_t_17 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_16, 3, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_INCREF(__pyx_kp_u_of_the);
        __pyx_t_17 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_of_the);
        PyTuple_SET_ITEM(__pyx_t_16, 4, __pyx_kp_u_of_the);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":410
 *                 if executed_amount_diff > s_decimal_0:
 *                     self.logger().info(f"Filled {executed_amount_diff} out of {tracked_order.amount} of the "
 *                                        f"{order_type_description} order {tracked_order.client_order_id}.")             # <<<<<<<<<<<<<<
 *                     self.c_trigger_event(self.MARKET_ORDER_FILLED_EVENT_TAG,
 *                                          OrderFilledEvent(
 */
        __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_order_type_description, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 410, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_18 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_18) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_18;
        __pyx_t_17 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_16, 5, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_INCREF(__pyx_kp_u_order);
        __pyx_t_17 += 7;
        __Pyx_GIVEREF(__pyx_kp_u_order);
        PyTuple_SET_ITEM(__pyx_t_16, 6, __pyx_kp_u_order);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 410, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_12 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 410, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_18 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) > __pyx_t_18) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_12) : __pyx_t_18;
        __pyx_t_17 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_12);
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_16, 7, __pyx_t_12);
        __pyx_t_12 = 0;
        __Pyx_INCREF(__pyx_kp_u__10);
        __pyx_t_17 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__10);
        PyTuple_SET_ITEM(__pyx_t_16, 8, __pyx_kp_u__10);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":409
 * 
 *                 if executed_amount_diff > s_decimal_0:
 *                     self.logger().info(f"Filled {executed_amount_diff} out of {tracked_order.amount} of the "             # <<<<<<<<<<<<<<
 *                                        f"{order_type_description} order {tracked_order.client_order_id}.")
 *                     self.c_trigger_event(self.MARKET_ORDER_FILLED_EVENT_TAG,
 */
        __pyx_t_12 = __Pyx_PyUnicode_Join(__pyx_t_16, 9, __pyx_t_17, __pyx_t_18); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 409, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_16 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_16)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_16);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_16, __pyx_t_12};
          __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 1+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 409, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":411
 *                     self.logger().info(f"Filled {executed_amount_diff} out of {tracked_order.amount} of the "
 *                                        f"{order_type_description} order {tracked_order.client_order_id}.")
 *                     self.c_trigger_event(self.MARKET_ORDER_FILLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                          OrderFilledEvent(
 *                                              self._current_timestamp,
 */
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 411, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_4 = __Pyx_PyInt_As_int64_t(__pyx_t_14); if (unlikely((__pyx_t_4 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 411, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":412
 *                                        f"{order_type_description} order {tracked_order.client_order_id}.")
 *                     self.c_trigger_event(self.MARKET_ORDER_FILLED_EVENT_TAG,
 *                                          OrderFilledEvent(             # <<<<<<<<<<<<<<
 *                                              self._current_timestamp,
 *                                              tracked_order.client_order_id,
 */
        __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderFilledEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 412, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":413
 *                     self.c_trigger_event(self.MARKET_ORDER_FILLED_EVENT_TAG,
 *                                          OrderFilledEvent(
 *                                              self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                              tracked_order.client_order_id,
 *                                              tracked_order.trading_pair,
 */
        __pyx_t_12 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 413, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":414
 *                                          OrderFilledEvent(
 *                                              self._current_timestamp,
 *                                              tracked_order.client_order_id,             # <<<<<<<<<<<<<<
 *                                              tracked_order.trading_pair,
 *                                              tracked_order.trade_type,
 */
        __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 414, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_16);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":415
 *                                              self._current_timestamp,
 *                                              tracked_order.client_order_id,
 *                                              tracked_order.trading_pair,             # <<<<<<<<<<<<<<
 *                                              tracked_order.trade_type,
 *                                              tracked_order.order_type,
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 415, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":416
 *                                              tracked_order.client_order_id,
 *                                              tracked_order.trading_pair,
 *                                              tracked_order.trade_type,             # <<<<<<<<<<<<<<
 *                                              tracked_order.order_type,
 *                                              executed_price,
 */
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_trade_type); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 416, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_15);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":417
 *                                              tracked_order.trading_pair,
 *                                              tracked_order.trade_type,
 *                                              tracked_order.order_type,             # <<<<<<<<<<<<<<
 *                                              executed_price,
 *                                              executed_amount_diff,
 */
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_order_type); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 417, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":421
 *                                              executed_amount_diff,
 *                                              self.c_get_fee(
 *                                                  tracked_order.base_asset,             # <<<<<<<<<<<<<<
 *                                                  tracked_order.quote_asset,
 *                                                  tracked_order.order_type,
 */
        __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 421, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_19);
        if (!(likely(PyUnicode_CheckExact(__pyx_t_19))||((__pyx_t_19) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_19))) __PYX_ERR(0, 421, __pyx_L1_error)

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":422
 *                                              self.c_get_fee(
 *                                                  tracked_order.base_asset,
 *                                                  tracked_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                  tracked_order.order_type,
 *                                                  tracked_order.trade_type,
 */
        __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 422, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_20);
        if (!(likely(PyUnicode_CheckExact(__pyx_t_20))||((__pyx_t_20) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_20))) __PYX_ERR(0, 422, __pyx_L1_error)

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":423
 *                                                  tracked_order.base_asset,
 *                                                  tracked_order.quote_asset,
 *                                                  tracked_order.order_type,             # <<<<<<<<<<<<<<
 *                                                  tracked_order.trade_type,
 *                                                  executed_price,
 */
        __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_order_type); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 423, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_21);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":424
 *                                                  tracked_order.quote_asset,
 *                                                  tracked_order.order_type,
 *                                                  tracked_order.trade_type,             # <<<<<<<<<<<<<<
 *                                                  executed_price,
 *                                                  executed_amount_diff
 */
        __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_trade_type); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 424, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_22);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":420
 *                                              executed_price,
 *                                              executed_amount_diff,
 *                                              self.c_get_fee(             # <<<<<<<<<<<<<<
 *                                                  tracked_order.base_asset,
 *                                                  tracked_order.quote_asset,
 */
        __pyx_t_23 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_fee(((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_cur_scope->__pyx_v_self), ((PyObject*)__pyx_t_19), ((PyObject*)__pyx_t_20), __pyx_t_21, __pyx_t_22, __pyx_cur_scope->__pyx_v_executed_price, __pyx_cur_scope->__pyx_v_executed_amount_diff); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 420, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_23);
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
        __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
        __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
        __pyx_t_22 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
          __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_2);
          if (likely(__pyx_t_22)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
            __Pyx_INCREF(__pyx_t_22);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_2, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[9] = {__pyx_t_22, __pyx_t_12, __pyx_t_16, __pyx_t_3, __pyx_t_15, __pyx_t_13, __pyx_cur_scope->__pyx_v_executed_price, __pyx_cur_scope->__pyx_v_executed_amount_diff, __pyx_t_23};
          __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_8, 8+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
          if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 412, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        }

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":411
 *                     self.logger().info(f"Filled {executed_amount_diff} out of {tracked_order.amount} of the "
 *                                        f"{order_type_description} order {tracked_order.client_order_id}.")
 *                     self.c_trigger_event(self.MARKET_ORDER_FILLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                          OrderFilledEvent(
 *                                              self._current_timestamp,
 */
        __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_4, __pyx_t_14); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 411, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":408
 *                 tracked_order.executed_amount_quote += executed_amount_diff * executed_price
 * 
 *                 if executed_amount_diff > s_decimal_0:             # <<<<<<<<<<<<<<
 *                     self.logger().info(f"Filled {executed_amount_diff} out of {tracked_order.amount} of the "
 *                                        f"{order_type_description} order {tracked_order.client_order_id}.")
 */
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":430
 *                                          ))
 * 
 *                 if order_state == "CLOSED":             # <<<<<<<<<<<<<<
 *                     self._process_api_closed(order, tracked_order)
 * 
 */
      __pyx_t_5 = (__Pyx_PyUnicode_Equals(__pyx_cur_scope->__pyx_v_order_state, __pyx_n_u_CLOSED, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 430, __pyx_L1_error)
      if (__pyx_t_5) {

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":431
 * 
 *                 if order_state == "CLOSED":
 *                     self._process_api_closed(order, tracked_order)             # <<<<<<<<<<<<<<
 * 
 *     def _process_api_closed(self, order: Dict, tracked_order: BittrexInFlightOrder):
 */
        __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_process_api_closed); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 431, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_23 = NULL;
        __pyx_t_8 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_14))) {
          __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_14);
          if (likely(__pyx_t_23)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_14);
            __Pyx_INCREF(__pyx_t_23);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_14, function);
            __pyx_t_8 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_23, __pyx_cur_scope->__pyx_v_order, __pyx_cur_scope->__pyx_v_tracked_order};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_14, __pyx_callargs+1-__pyx_t_8, 2+__pyx_t_8);
          __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 431, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        }
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":430
 *                                          ))
 * 
 *                 if order_state == "CLOSED":             # <<<<<<<<<<<<<<
 *                     self._process_api_closed(order, tracked_order)
 * 
 */
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":349
 *             open_orders = dict((entry["id"], entry) for entry in open_orders)
 * 
 *             for tracked_order in tracked_orders:             # <<<<<<<<<<<<<<
 *                 try:
 *                     exchange_order_id = await tracked_order.get_exchange_order_id()
 */
      __pyx_L8_continue:;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":343
 *             int64_t current_tick = <int64_t> (self._current_timestamp / self.UPDATE_ORDERS_INTERVAL)
 * 
 *         if current_tick > last_tick and len(self._in_flight_orders) > 0:             # <<<<<<<<<<<<<<
 * 
 *             tracked_orders = list(self._in_flight_orders.values())
 */
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":334
 *         return result
 * 
 *     async def _update_order_status(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             # This is intended to be a backup measure to close straggler orders, in case Bittrex's user stream events
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_AddTraceback("_update_order_status", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":433
 *                     self._process_api_closed(order, tracked_order)
 * 
 *     def _process_api_closed(self, order: Dict, tracked_order: BittrexInFlightOrder):             # <<<<<<<<<<<<<<
 *         order_type = tracked_order.order_type
 *         trade_type = tracked_order.trade_type
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_24_process_api_closed(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_24_process_api_closed = {"_process_api_closed", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_24_process_api_closed, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_24_process_api_closed(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_order = 0;
  PyObject *__pyx_v_tracked_order = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_process_api_closed (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_2,&__pyx_n_s_tracked_order,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_2,&__pyx_n_s_tracked_order,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_2)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 433, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_tracked_order)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 433, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("_process_api_closed", 1, 2, 2, 1); __PYX_ERR(0, 433, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_process_api_closed") < 0)) __PYX_ERR(0, 433, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_order = values[0];
    __pyx_v_tracked_order = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_process_api_closed", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 433, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._process_api_closed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_23_process_api_closed(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), __pyx_v_order, __pyx_v_tracked_order);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_23_process_api_closed(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_order, PyObject *__pyx_v_tracked_order) {
  PyObject *__pyx_v_order_type = NULL;
  PyObject *__pyx_v_trade_type = NULL;
  PyObject *__pyx_v_client_order_id = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  Py_UCS4 __pyx_t_8;
  int __pyx_t_9;
  int64_t __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_process_api_closed", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":434
 * 
 *     def _process_api_closed(self, order: Dict, tracked_order: BittrexInFlightOrder):
 *         order_type = tracked_order.order_type             # <<<<<<<<<<<<<<
 *         trade_type = tracked_order.trade_type
 *         client_order_id = tracked_order.client_order_id
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_order_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 434, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_order_type = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":435
 *     def _process_api_closed(self, order: Dict, tracked_order: BittrexInFlightOrder):
 *         order_type = tracked_order.order_type
 *         trade_type = tracked_order.trade_type             # <<<<<<<<<<<<<<
 *         client_order_id = tracked_order.client_order_id
 *         if order["quantity"] == order["fillQuantity"]:  # Order COMPLETED
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_trade_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 435, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_trade_type = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":436
 *         order_type = tracked_order.order_type
 *         trade_type = tracked_order.trade_type
 *         client_order_id = tracked_order.client_order_id             # <<<<<<<<<<<<<<
 *         if order["quantity"] == order["fillQuantity"]:  # Order COMPLETED
 *             tracked_order.last_state = "CLOSED"
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 436, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_client_order_id = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":437
 *         trade_type = tracked_order.trade_type
 *         client_order_id = tracked_order.client_order_id
 *         if order["quantity"] == order["fillQuantity"]:  # Order COMPLETED             # <<<<<<<<<<<<<<
 *             tracked_order.last_state = "CLOSED"
 *             self.logger().info(f"The {order_type}-{trade_type} "
 */
  __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_v_order, __pyx_n_u_quantity); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Dict_GetItem(__pyx_v_order, __pyx_n_u_fillQuantity); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 437, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__pyx_t_4) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":438
 *         client_order_id = tracked_order.client_order_id
 *         if order["quantity"] == order["fillQuantity"]:  # Order COMPLETED
 *             tracked_order.last_state = "CLOSED"             # <<<<<<<<<<<<<<
 *             self.logger().info(f"The {order_type}-{trade_type} "
 *                                f"{client_order_id} has completed according to Bittrex order status API.")
 */
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_tracked_order, __pyx_n_s_last_state, __pyx_n_u_CLOSED) < 0) __PYX_ERR(0, 438, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":439
 *         if order["quantity"] == order["fillQuantity"]:  # Order COMPLETED
 *             tracked_order.last_state = "CLOSED"
 *             self.logger().info(f"The {order_type}-{trade_type} "             # <<<<<<<<<<<<<<
 *                                f"{client_order_id} has completed according to Bittrex order status API.")
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_5, };
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyTuple_New(7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_7 = 0;
    __pyx_t_8 = 127;
    __Pyx_INCREF(__pyx_kp_u_The);
    __pyx_t_7 += 4;
    __Pyx_GIVEREF(__pyx_kp_u_The);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_kp_u_The);
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_order_type, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_8;
    __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u__11);
    __pyx_t_7 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__11);
    PyTuple_SET_ITEM(__pyx_t_2, 2, __pyx_kp_u__11);
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_trade_type, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_8;
    __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 3, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u__12);
    __pyx_t_7 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__12);
    PyTuple_SET_ITEM(__pyx_t_2, 4, __pyx_kp_u__12);

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":440
 *             tracked_order.last_state = "CLOSED"
 *             self.logger().info(f"The {order_type}-{trade_type} "
 *                                f"{client_order_id} has completed according to Bittrex order status API.")             # <<<<<<<<<<<<<<
 * 
 *             if tracked_order.trade_type is TradeType.BUY:
 */
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_client_order_id, __pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 440, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_5) : __pyx_t_8;
    __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_2, 5, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_kp_u_has_completed_according_to_Bitt);
    __pyx_t_7 += 53;
    __Pyx_GIVEREF(__pyx_kp_u_has_completed_according_to_Bitt);
    PyTuple_SET_ITEM(__pyx_t_2, 6, __pyx_kp_u_has_completed_according_to_Bitt);

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":439
 *         if order["quantity"] == order["fillQuantity"]:  # Order COMPLETED
 *             tracked_order.last_state = "CLOSED"
 *             self.logger().info(f"The {order_type}-{trade_type} "             # <<<<<<<<<<<<<<
 *                                f"{client_order_id} has completed according to Bittrex order status API.")
 * 
 */
    __pyx_t_5 = __Pyx_PyUnicode_Join(__pyx_t_2, 7, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 439, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_5};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 439, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":442
 *                                f"{client_order_id} has completed according to Bittrex order status API.")
 * 
 *             if tracked_order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                 self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,
 *                                      BuyOrderCompletedEvent(
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_trade_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_BUY); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 442, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_4 = (__pyx_t_3 == __pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_9 = (__pyx_t_4 != 0);
    if (__pyx_t_9) {

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":443
 * 
 *             if tracked_order.trade_type is TradeType.BUY:
 *                 self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                      BuyOrderCompletedEvent(
 *                                          self._current_timestamp,
 */
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 443, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_10 = __Pyx_PyInt_As_int64_t(__pyx_t_5); if (unlikely((__pyx_t_10 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 443, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":444
 *             if tracked_order.trade_type is TradeType.BUY:
 *                 self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,
 *                                      BuyOrderCompletedEvent(             # <<<<<<<<<<<<<<
 *                                          self._current_timestamp,
 *                                          tracked_order.client_order_id,
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_BuyOrderCompletedEvent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 444, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":445
 *                 self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,
 *                                      BuyOrderCompletedEvent(
 *                                          self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                          tracked_order.client_order_id,
 *                                          tracked_order.base_asset,
 */
      __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 445, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":446
 *                                      BuyOrderCompletedEvent(
 *                                          self._current_timestamp,
 *                                          tracked_order.client_order_id,             # <<<<<<<<<<<<<<
 *                                          tracked_order.base_asset,
 *                                          tracked_order.quote_asset,
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 446, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":447
 *                                          self._current_timestamp,
 *                                          tracked_order.client_order_id,
 *                                          tracked_order.base_asset,             # <<<<<<<<<<<<<<
 *                                          tracked_order.quote_asset,
 *                                          tracked_order.fee_asset or tracked_order.base_asset,
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 447, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":448
 *                                          tracked_order.client_order_id,
 *                                          tracked_order.base_asset,
 *                                          tracked_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                          tracked_order.fee_asset or tracked_order.base_asset,
 *                                          tracked_order.executed_amount_base,
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 448, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":449
 *                                          tracked_order.base_asset,
 *                                          tracked_order.quote_asset,
 *                                          tracked_order.fee_asset or tracked_order.base_asset,             # <<<<<<<<<<<<<<
 *                                          tracked_order.executed_amount_base,
 *                                          tracked_order.executed_amount_quote,
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_fee_asset); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 449, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_14); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 449, __pyx_L1_error)
      if (!__pyx_t_9) {
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      } else {
        __Pyx_INCREF(__pyx_t_14);
        __pyx_t_13 = __pyx_t_14;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        goto __pyx_L5_bool_binop_done;
      }
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 449, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);
      __Pyx_INCREF(__pyx_t_14);
      __pyx_t_13 = __pyx_t_14;
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_L5_bool_binop_done:;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":450
 *                                          tracked_order.quote_asset,
 *                                          tracked_order.fee_asset or tracked_order.base_asset,
 *                                          tracked_order.executed_amount_base,             # <<<<<<<<<<<<<<
 *                                          tracked_order.executed_amount_quote,
 *                                          tracked_order.fee_paid,
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_executed_amount_base); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 450, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":451
 *                                          tracked_order.fee_asset or tracked_order.base_asset,
 *                                          tracked_order.executed_amount_base,
 *                                          tracked_order.executed_amount_quote,             # <<<<<<<<<<<<<<
 *                                          tracked_order.fee_paid,
 *                                          tracked_order.order_type))
 */
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_executed_amount_quote); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 451, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":452
 *                                          tracked_order.executed_amount_base,
 *                                          tracked_order.executed_amount_quote,
 *                                          tracked_order.fee_paid,             # <<<<<<<<<<<<<<
 *                                          tracked_order.order_type))
 *             elif tracked_order.trade_type is TradeType.SELL:
 */
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_fee_paid); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 452, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":453
 *                                          tracked_order.executed_amount_quote,
 *                                          tracked_order.fee_paid,
 *                                          tracked_order.order_type))             # <<<<<<<<<<<<<<
 *             elif tracked_order.trade_type is TradeType.SELL:
 *                 self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,
 */
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_order_type); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 453, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_18 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_18)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_18);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_6 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[10] = {__pyx_t_18, __pyx_t_1, __pyx_t_2, __pyx_t_11, __pyx_t_12, __pyx_t_13, __pyx_t_14, __pyx_t_15, __pyx_t_16, __pyx_t_17};
        __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 9+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 444, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":443
 * 
 *             if tracked_order.trade_type is TradeType.BUY:
 *                 self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                      BuyOrderCompletedEvent(
 *                                          self._current_timestamp,
 */
      __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_10, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 443, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":442
 *                                f"{client_order_id} has completed according to Bittrex order status API.")
 * 
 *             if tracked_order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                 self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,
 *                                      BuyOrderCompletedEvent(
 */
      goto __pyx_L4;
    }

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":454
 *                                          tracked_order.fee_paid,
 *                                          tracked_order.order_type))
 *             elif tracked_order.trade_type is TradeType.SELL:             # <<<<<<<<<<<<<<
 *                 self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,
 *                                      SellOrderCompletedEvent(
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_trade_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_17 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_SELL); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 454, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_9 = (__pyx_t_3 == __pyx_t_17);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_4 = (__pyx_t_9 != 0);
    if (__pyx_t_4) {

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":455
 *                                          tracked_order.order_type))
 *             elif tracked_order.trade_type is TradeType.SELL:
 *                 self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                      SellOrderCompletedEvent(
 *                                          self._current_timestamp,
 */
      __pyx_t_17 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_10 = __Pyx_PyInt_As_int64_t(__pyx_t_17); if (unlikely((__pyx_t_10 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":456
 *             elif tracked_order.trade_type is TradeType.SELL:
 *                 self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,
 *                                      SellOrderCompletedEvent(             # <<<<<<<<<<<<<<
 *                                          self._current_timestamp,
 *                                          tracked_order.client_order_id,
 */
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_SellOrderCompletedEvent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 456, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":457
 *                 self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,
 *                                      SellOrderCompletedEvent(
 *                                          self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                          tracked_order.client_order_id,
 *                                          tracked_order.base_asset,
 */
      __pyx_t_5 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 457, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":458
 *                                      SellOrderCompletedEvent(
 *                                          self._current_timestamp,
 *                                          tracked_order.client_order_id,             # <<<<<<<<<<<<<<
 *                                          tracked_order.base_asset,
 *                                          tracked_order.quote_asset,
 */
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 458, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_16);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":459
 *                                          self._current_timestamp,
 *                                          tracked_order.client_order_id,
 *                                          tracked_order.base_asset,             # <<<<<<<<<<<<<<
 *                                          tracked_order.quote_asset,
 *                                          tracked_order.fee_asset or tracked_order.base_asset,
 */
      __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 459, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":460
 *                                          tracked_order.client_order_id,
 *                                          tracked_order.base_asset,
 *                                          tracked_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                          tracked_order.fee_asset or tracked_order.base_asset,
 *                                          tracked_order.executed_amount_base,
 */
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 460, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_14);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":461
 *                                          tracked_order.base_asset,
 *                                          tracked_order.quote_asset,
 *                                          tracked_order.fee_asset or tracked_order.base_asset,             # <<<<<<<<<<<<<<
 *                                          tracked_order.executed_amount_base,
 *                                          tracked_order.executed_amount_quote,
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_fee_asset); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 461, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_12); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 461, __pyx_L1_error)
      if (!__pyx_t_4) {
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      } else {
        __Pyx_INCREF(__pyx_t_12);
        __pyx_t_13 = __pyx_t_12;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L7_bool_binop_done;
      }
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 461, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_INCREF(__pyx_t_12);
      __pyx_t_13 = __pyx_t_12;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __pyx_L7_bool_binop_done:;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":462
 *                                          tracked_order.quote_asset,
 *                                          tracked_order.fee_asset or tracked_order.base_asset,
 *                                          tracked_order.executed_amount_base,             # <<<<<<<<<<<<<<
 *                                          tracked_order.executed_amount_quote,
 *                                          tracked_order.fee_paid,
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_executed_amount_base); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 462, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":463
 *                                          tracked_order.fee_asset or tracked_order.base_asset,
 *                                          tracked_order.executed_amount_base,
 *                                          tracked_order.executed_amount_quote,             # <<<<<<<<<<<<<<
 *                                          tracked_order.fee_paid,
 *                                          tracked_order.order_type))
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_executed_amount_quote); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 463, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":464
 *                                          tracked_order.executed_amount_base,
 *                                          tracked_order.executed_amount_quote,
 *                                          tracked_order.fee_paid,             # <<<<<<<<<<<<<<
 *                                          tracked_order.order_type))
 *         else:  # Order PARTIAL-CANCEL or CANCEL
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_fee_paid); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 464, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":465
 *                                          tracked_order.executed_amount_quote,
 *                                          tracked_order.fee_paid,
 *                                          tracked_order.order_type))             # <<<<<<<<<<<<<<
 *         else:  # Order PARTIAL-CANCEL or CANCEL
 *             tracked_order.last_state = "CANCELLED"
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_order_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 465, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_18 = NULL;
      __pyx_t_6 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
        __pyx_t_18 = PyMethod_GET_SELF(__pyx_t_3);
        if (likely(__pyx_t_18)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_18);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_3, function);
          __pyx_t_6 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[10] = {__pyx_t_18, __pyx_t_5, __pyx_t_16, __pyx_t_15, __pyx_t_14, __pyx_t_13, __pyx_t_12, __pyx_t_11, __pyx_t_2, __pyx_t_1};
        __pyx_t_17 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 9+__pyx_t_6);
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 456, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":455
 *                                          tracked_order.order_type))
 *             elif tracked_order.trade_type is TradeType.SELL:
 *                 self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                      SellOrderCompletedEvent(
 *                                          self._current_timestamp,
 */
      __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_10, __pyx_t_17); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 455, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":454
 *                                          tracked_order.fee_paid,
 *                                          tracked_order.order_type))
 *             elif tracked_order.trade_type is TradeType.SELL:             # <<<<<<<<<<<<<<
 *                 self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,
 *                                      SellOrderCompletedEvent(
 */
    }
    __pyx_L4:;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":437
 *         trade_type = tracked_order.trade_type
 *         client_order_id = tracked_order.client_order_id
 *         if order["quantity"] == order["fillQuantity"]:  # Order COMPLETED             # <<<<<<<<<<<<<<
 *             tracked_order.last_state = "CLOSED"
 *             self.logger().info(f"The {order_type}-{trade_type} "
 */
    goto __pyx_L3;
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":467
 *                                          tracked_order.order_type))
 *         else:  # Order PARTIAL-CANCEL or CANCEL
 *             tracked_order.last_state = "CANCELLED"             # <<<<<<<<<<<<<<
 *             self.logger().info(f"The {tracked_order.order_type}-{tracked_order.trade_type} "
 *                                f"{client_order_id} has been cancelled according to Bittrex order status API.")
 */
  /*else*/ {
    if (__Pyx_PyObject_SetAttrStr(__pyx_v_tracked_order, __pyx_n_s_last_state, __pyx_n_u_CANCELLED) < 0) __PYX_ERR(0, 467, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":468
 *         else:  # Order PARTIAL-CANCEL or CANCEL
 *             tracked_order.last_state = "CANCELLED"
 *             self.logger().info(f"The {tracked_order.order_type}-{tracked_order.trade_type} "             # <<<<<<<<<<<<<<
 *                                f"{client_order_id} has been cancelled according to Bittrex order status API.")
 *             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_2, };
      __pyx_t_17 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 468, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_17, __pyx_n_s_info); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_17 = PyTuple_New(7); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_17);
    __pyx_t_7 = 0;
    __pyx_t_8 = 127;
    __Pyx_INCREF(__pyx_kp_u_The);
    __pyx_t_7 += 4;
    __Pyx_GIVEREF(__pyx_kp_u_The);
    PyTuple_SET_ITEM(__pyx_t_17, 0, __pyx_kp_u_The);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_order_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_8;
    __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_17, 1, __pyx_t_11);
    __pyx_t_11 = 0;
    __Pyx_INCREF(__pyx_kp_u__11);
    __pyx_t_7 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__11);
    PyTuple_SET_ITEM(__pyx_t_17, 2, __pyx_kp_u__11);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_tracked_order, __pyx_n_s_trade_type); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_t_11, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_8;
    __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_17, 3, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_kp_u__12);
    __pyx_t_7 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__12);
    PyTuple_SET_ITEM(__pyx_t_17, 4, __pyx_kp_u__12);

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":469
 *             tracked_order.last_state = "CANCELLED"
 *             self.logger().info(f"The {tracked_order.order_type}-{tracked_order.trade_type} "
 *                                f"{client_order_id} has been cancelled according to Bittrex order status API.")             # <<<<<<<<<<<<<<
 *             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                  OrderCancelledEvent(
 */
    __pyx_t_2 = __Pyx_PyObject_FormatSimple(__pyx_v_client_order_id, __pyx_empty_unicode); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 469, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_8) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_8;
    __pyx_t_7 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_17, 5, __pyx_t_2);
    __pyx_t_2 = 0;
    __Pyx_INCREF(__pyx_kp_u_has_been_cancelled_according_to);
    __pyx_t_7 += 58;
    __Pyx_GIVEREF(__pyx_kp_u_has_been_cancelled_according_to);
    PyTuple_SET_ITEM(__pyx_t_17, 6, __pyx_kp_u_has_been_cancelled_according_to);

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":468
 *         else:  # Order PARTIAL-CANCEL or CANCEL
 *             tracked_order.last_state = "CANCELLED"
 *             self.logger().info(f"The {tracked_order.order_type}-{tracked_order.trade_type} "             # <<<<<<<<<<<<<<
 *                                f"{client_order_id} has been cancelled according to Bittrex order status API.")
 *             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 */
    __pyx_t_2 = __Pyx_PyUnicode_Join(__pyx_t_17, 7, __pyx_t_7, __pyx_t_8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 468, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
    __pyx_t_17 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_17)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_17);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_17, __pyx_t_2};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 468, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":470
 *             self.logger().info(f"The {tracked_order.order_type}-{tracked_order.trade_type} "
 *                                f"{client_order_id} has been cancelled according to Bittrex order status API.")
 *             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                  OrderCancelledEvent(
 *                                      self._current_timestamp,
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_10 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_10 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":471
 *                                f"{client_order_id} has been cancelled according to Bittrex order status API.")
 *             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                  OrderCancelledEvent(             # <<<<<<<<<<<<<<
 *                                      self._current_timestamp,
 *                                      client_order_id
 */
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":472
 *             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                  OrderCancelledEvent(
 *                                      self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                      client_order_id
 *                                  ))
 */
    __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 472, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":473
 *                                  OrderCancelledEvent(
 *                                      self._current_timestamp,
 *                                      client_order_id             # <<<<<<<<<<<<<<
 *                                  ))
 * 
 */
    __pyx_t_17 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
      __pyx_t_17 = PyMethod_GET_SELF(__pyx_t_1);
      if (likely(__pyx_t_17)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
        __Pyx_INCREF(__pyx_t_17);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_1, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_17, __pyx_t_2, __pyx_v_client_order_id};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 471, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":470
 *             self.logger().info(f"The {tracked_order.order_type}-{tracked_order.trade_type} "
 *                                f"{client_order_id} has been cancelled according to Bittrex order status API.")
 *             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                  OrderCancelledEvent(
 *                                      self._current_timestamp,
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_10, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 470, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }
  __pyx_L3:;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":476
 *                                  ))
 * 
 *         self.c_stop_tracking_order(client_order_id)             # <<<<<<<<<<<<<<
 * 
 *     async def _iter_user_stream_queue(self) -> AsyncIterable[Dict[str, Any]]:
 */
  if (!(likely(PyUnicode_CheckExact(__pyx_v_client_order_id))||((__pyx_v_client_order_id) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_v_client_order_id))) __PYX_ERR(0, 476, __pyx_L1_error)
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_stop_tracking_order(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), ((PyObject*)__pyx_v_client_order_id)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 476, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":433
 *                     self._process_api_closed(order, tracked_order)
 * 
 *     def _process_api_closed(self, order: Dict, tracked_order: BittrexInFlightOrder):             # <<<<<<<<<<<<<<
 *         order_type = tracked_order.order_type
 *         trade_type = tracked_order.trade_type
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._process_api_closed", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_type);
  __Pyx_XDECREF(__pyx_v_trade_type);
  __Pyx_XDECREF(__pyx_v_client_order_id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":478
 *         self.c_stop_tracking_order(client_order_id)
 * 
 *     async def _iter_user_stream_queue(self) -> AsyncIterable[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_26_iter_user_stream_queue(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_26_iter_user_stream_queue = {"_iter_user_stream_queue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_26_iter_user_stream_queue, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_26_iter_user_stream_queue(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_iter_user_stream_queue (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_iter_user_stream_queue", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_iter_user_stream_queue", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_iter_user_stream_queue(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_iter_user_stream_queue(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_iter_user_stream_queue", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 478, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_AsyncGen_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27generator5, __pyx_codeobj__13, (PyObject *) __pyx_cur_scope, __pyx_n_s_iter_user_stream_queue, __pyx_n_s_BittrexExchange__iter_user_strea, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 478, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._iter_user_stream_queue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27generator5(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_iter_user_stream_queue", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L14_resume_from_await;
    case 2: goto __pyx_L15_resume_from_yield;
    case 3: goto __pyx_L20_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 478, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":479
 * 
 *     async def _iter_user_stream_queue(self) -> AsyncIterable[Dict[str, Any]]:
 *         while True:             # <<<<<<<<<<<<<<
 *             try:
 *                 yield await self._user_stream_tracker.user_stream.get()
 */
  while (1) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":480
 *     async def _iter_user_stream_queue(self) -> AsyncIterable[Dict[str, Any]]:
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 yield await self._user_stream_tracker.user_stream.get()
 *             except asyncio.CancelledError:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":481
 *         while True:
 *             try:
 *                 yield await self._user_stream_tracker.user_stream.get()             # <<<<<<<<<<<<<<
 *             except asyncio.CancelledError:
 *                 raise
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_user_stream_tracker, __pyx_n_s_user_stream); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 481, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_get); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 481, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_5, };
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 481, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from async generator, awaiting value */
          __pyx_generator->resume_label = 1;
          return __pyx_r;
          __pyx_L14_resume_from_await:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 481, __pyx_L6_error)
          __pyx_t_4 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_4);
        } else {
          __pyx_t_4 = NULL;
          if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_4) < 0) __PYX_ERR(0, 481, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
        }
        __pyx_r = __pyx_t_4;
        __pyx_t_4 = 0;
        __Pyx_XGIVEREF(__pyx_t_1);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
        __Pyx_XGIVEREF(__pyx_t_2);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
        __Pyx_XGIVEREF(__pyx_t_3);
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from async generator, yielding value */
        __pyx_generator->resume_label = 2;
        return __Pyx__PyAsyncGenValueWrapperNew(__pyx_r);
        __pyx_L15_resume_from_yield:;
        __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_1);
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_2);
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = 0;
        __Pyx_XGOTREF(__pyx_t_3);
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 481, __pyx_L6_error)

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":480
 *     async def _iter_user_stream_queue(self) -> AsyncIterable[Dict[str, Any]]:
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 yield await self._user_stream_tracker.user_stream.get()
 *             except asyncio.CancelledError:
 */
      }
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L13_try_end;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":482
 *             try:
 *                 yield await self._user_stream_tracker.user_stream.get()
 *             except asyncio.CancelledError:             # <<<<<<<<<<<<<<
 *                 raise
 *             except Exception:
 */
      __Pyx_ErrFetch(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5);
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 482, __pyx_L8_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_CancelledError); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 482, __pyx_L8_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_7 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_4, __pyx_t_9);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_ErrRestore(__pyx_t_4, __pyx_t_6, __pyx_t_5);
      __pyx_t_4 = 0; __pyx_t_6 = 0; __pyx_t_5 = 0;
      if (__pyx_t_7) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._iter_user_stream_queue", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_4) < 0) __PYX_ERR(0, 482, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_4);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":483
 *                 yield await self._user_stream_tracker.user_stream.get()
 *             except asyncio.CancelledError:
 *                 raise             # <<<<<<<<<<<<<<
 *             except Exception:
 *                 self.logger().error("Unknown error. Retrying after 1 second.", exc_info=True)
 */
        __Pyx_GIVEREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_4);
        __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_6, __pyx_t_4);
        __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_4 = 0; 
        __PYX_ERR(0, 483, __pyx_L8_except_error)
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":484
 *             except asyncio.CancelledError:
 *                 raise
 *             except Exception:             # <<<<<<<<<<<<<<
 *                 self.logger().error("Unknown error. Retrying after 1 second.", exc_info=True)
 *                 await asyncio.sleep(1.0)
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_7) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._iter_user_stream_queue", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 484, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_5);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":485
 *                 raise
 *             except Exception:
 *                 self.logger().error("Unknown error. Retrying after 1 second.", exc_info=True)             # <<<<<<<<<<<<<<
 *                 await asyncio.sleep(1.0)
 * 
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 485, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_10, };
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 485, __pyx_L8_except_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_error); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 485, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 485, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 485, __pyx_L8_except_error)
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__14, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 485, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":486
 *             except Exception:
 *                 self.logger().error("Unknown error. Retrying after 1 second.", exc_info=True)
 *                 await asyncio.sleep(1.0)             # <<<<<<<<<<<<<<
 * 
 *     async def _user_stream_event_listener(self):
 */
        __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 486, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_sleep); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 486, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_float_1_0};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 486, __pyx_L8_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_10);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
          __Pyx_XGIVEREF(__pyx_t_4);
          __pyx_cur_scope->__pyx_t_3 = __pyx_t_4;
          __Pyx_XGIVEREF(__pyx_t_5);
          __pyx_cur_scope->__pyx_t_4 = __pyx_t_5;
          __Pyx_XGIVEREF(__pyx_t_6);
          __pyx_cur_scope->__pyx_t_5 = __pyx_t_6;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_SwapException(__pyx_generator);
          /* return from async generator, awaiting value */
          __pyx_generator->resume_label = 3;
          return __pyx_r;
          __pyx_L20_resume_from_await:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          __pyx_t_4 = __pyx_cur_scope->__pyx_t_3;
          __pyx_cur_scope->__pyx_t_3 = 0;
          __Pyx_XGOTREF(__pyx_t_4);
          __pyx_t_5 = __pyx_cur_scope->__pyx_t_4;
          __pyx_cur_scope->__pyx_t_4 = 0;
          __Pyx_XGOTREF(__pyx_t_5);
          __pyx_t_6 = __pyx_cur_scope->__pyx_t_5;
          __pyx_cur_scope->__pyx_t_5 = 0;
          __Pyx_XGOTREF(__pyx_t_6);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 486, __pyx_L8_except_error)
        } else {
          PyObject* exc_type = __Pyx_PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
            else __PYX_ERR(0, 486, __pyx_L8_except_error)
          }
        }
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L7_exception_handled;
      }
      goto __pyx_L8_except_error;
      __pyx_L8_except_error:;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":480
 *     async def _iter_user_stream_queue(self) -> AsyncIterable[Dict[str, Any]]:
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 yield await self._user_stream_tracker.user_stream.get()
 *             except asyncio.CancelledError:
 */
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L7_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      __pyx_L13_try_end:;
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":478
 *         self.c_stop_tracking_order(client_order_id)
 * 
 *     async def _iter_user_stream_queue(self) -> AsyncIterable[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */

  /* function exit code */
  PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("_iter_user_stream_queue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_30generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":488
 *                 await asyncio.sleep(1.0)
 * 
 *     async def _user_stream_event_listener(self):             # <<<<<<<<<<<<<<
 *         async for stream_message in self._iter_user_stream_queue():
 *             try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_29_user_stream_event_listener(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_29_user_stream_event_listener = {"_user_stream_event_listener", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_29_user_stream_event_listener, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_29_user_stream_event_listener(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_user_stream_event_listener (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_user_stream_event_listener", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_user_stream_event_listener", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_28_user_stream_event_listener(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_28_user_stream_event_listener(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_user_stream_event_listener", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 488, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_30generator6, __pyx_codeobj__15, (PyObject *) __pyx_cur_scope, __pyx_n_s_user_stream_event_listener, __pyx_n_s_BittrexExchange__user_stream_eve, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._user_stream_event_listener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_30generator6(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  Py_ssize_t __pyx_t_11;
  Py_ssize_t __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  Py_UCS4 __pyx_t_16;
  int64_t __pyx_t_17;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_user_stream_event_listener", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_await;
    case 2: goto __pyx_L18_resume_from_await;
    case 3: goto __pyx_L33_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 488, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":489
 * 
 *     async def _user_stream_event_listener(self):
 *         async for stream_message in self._iter_user_stream_queue():             # <<<<<<<<<<<<<<
 *             try:
 *                 content = stream_message.get("content")
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_iter_user_stream_queue); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_2 = __Pyx_Coroutine_GetAsyncIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 489, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    __pyx_t_1 = __Pyx_Coroutine_AsyncIterNext(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 489, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_t_2);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, awaiting value */
      __pyx_generator->resume_label = 1;
      return __pyx_r;
      __pyx_L6_resume_from_await:;
      __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_2);
      if (unlikely(!__pyx_sent_value)) {
        PyObject* exc_type = __Pyx_PyErr_Occurred();
        if (unlikely(exc_type && (exc_type == __Pyx_PyExc_StopAsyncIteration || ( exc_type != PyExc_StopIteration && exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, __Pyx_PyExc_StopAsyncIteration))))) {
          PyErr_Clear();
          break;
        }
        __PYX_ERR(0, 489, __pyx_L1_error)
      }
      __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
    } else {
      PyObject* exc_type = __Pyx_PyErr_Occurred();
      if (unlikely(exc_type && (exc_type == __Pyx_PyExc_StopAsyncIteration || ( exc_type != PyExc_StopIteration && exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, __Pyx_PyExc_StopAsyncIteration))))) {
        PyErr_Clear();
        break;
      }
      __pyx_t_1 = NULL;
      if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 489, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_stream_message);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_stream_message, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":490
 *     async def _user_stream_event_listener(self):
 *         async for stream_message in self._iter_user_stream_queue():
 *             try:             # <<<<<<<<<<<<<<
 *                 content = stream_message.get("content")
 *                 event_type = stream_message.get("event_type")
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_t_7);
      /*try:*/ {

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":491
 *         async for stream_message in self._iter_user_stream_queue():
 *             try:
 *                 content = stream_message.get("content")             # <<<<<<<<<<<<<<
 *                 event_type = stream_message.get("event_type")
 * 
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_stream_message, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 491, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = NULL;
        __pyx_t_4 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_4 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_n_u_content};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_content);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_content, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":492
 *             try:
 *                 content = stream_message.get("content")
 *                 event_type = stream_message.get("event_type")             # <<<<<<<<<<<<<<
 * 
 *                 if event_type == "balance":  # Updates total balance and available balance of specified currency
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_stream_message, __pyx_n_s_get); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 492, __pyx_L7_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = NULL;
        __pyx_t_4 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_4 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_n_u_event_type};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 492, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_event_type);
        __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_event_type, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":494
 *                 event_type = stream_message.get("event_type")
 * 
 *                 if event_type == "balance":  # Updates total balance and available balance of specified currency             # <<<<<<<<<<<<<<
 *                     balance_delta = content["delta"]
 *                     asset_name = balance_delta["currencySymbol"]
 */
        __pyx_t_9 = (__Pyx_PyUnicode_Equals(__pyx_cur_scope->__pyx_v_event_type, __pyx_n_u_balance, Py_EQ)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 494, __pyx_L7_error)
        if (__pyx_t_9) {

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":495
 * 
 *                 if event_type == "balance":  # Updates total balance and available balance of specified currency
 *                     balance_delta = content["delta"]             # <<<<<<<<<<<<<<
 *                     asset_name = balance_delta["currencySymbol"]
 *                     total_balance = Decimal(balance_delta["total"])
 */
          __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_content, __pyx_n_u_delta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 495, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_balance_delta);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_balance_delta, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":496
 *                 if event_type == "balance":  # Updates total balance and available balance of specified currency
 *                     balance_delta = content["delta"]
 *                     asset_name = balance_delta["currencySymbol"]             # <<<<<<<<<<<<<<
 *                     total_balance = Decimal(balance_delta["total"])
 *                     available_balance = Decimal(balance_delta["available"])
 */
          __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_balance_delta, __pyx_n_u_currencySymbol); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 496, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_asset_name);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_asset_name, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":497
 *                     balance_delta = content["delta"]
 *                     asset_name = balance_delta["currencySymbol"]
 *                     total_balance = Decimal(balance_delta["total"])             # <<<<<<<<<<<<<<
 *                     available_balance = Decimal(balance_delta["available"])
 *                     self._account_available_balances[asset_name] = available_balance
 */
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 497, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_balance_delta, __pyx_n_u_total); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 497, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_10 = NULL;
          __pyx_t_4 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_4 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_8};
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 497, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_total_balance);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_total_balance, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":498
 *                     asset_name = balance_delta["currencySymbol"]
 *                     total_balance = Decimal(balance_delta["total"])
 *                     available_balance = Decimal(balance_delta["available"])             # <<<<<<<<<<<<<<
 *                     self._account_available_balances[asset_name] = available_balance
 *                     self._account_balances[asset_name] = total_balance
 */
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 498, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_balance_delta, __pyx_n_u_available); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 498, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_10 = NULL;
          __pyx_t_4 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_4 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_8};
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 498, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_available_balance);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_available_balance, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":499
 *                     total_balance = Decimal(balance_delta["total"])
 *                     available_balance = Decimal(balance_delta["available"])
 *                     self._account_available_balances[asset_name] = available_balance             # <<<<<<<<<<<<<<
 *                     self._account_balances[asset_name] = total_balance
 *                 elif event_type == "order":  # Updates track order status
 */
          if (unlikely(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_available_balances == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 499, __pyx_L7_error)
          }
          if (unlikely((PyDict_SetItem(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_available_balances, __pyx_cur_scope->__pyx_v_asset_name, __pyx_cur_scope->__pyx_v_available_balance) < 0))) __PYX_ERR(0, 499, __pyx_L7_error)

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":500
 *                     available_balance = Decimal(balance_delta["available"])
 *                     self._account_available_balances[asset_name] = available_balance
 *                     self._account_balances[asset_name] = total_balance             # <<<<<<<<<<<<<<
 *                 elif event_type == "order":  # Updates track order status
 *                     order = content["delta"]
 */
          if (unlikely(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_balances == Py_None)) {
            PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
            __PYX_ERR(0, 500, __pyx_L7_error)
          }
          if (unlikely((PyDict_SetItem(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._account_balances, __pyx_cur_scope->__pyx_v_asset_name, __pyx_cur_scope->__pyx_v_total_balance) < 0))) __PYX_ERR(0, 500, __pyx_L7_error)

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":494
 *                 event_type = stream_message.get("event_type")
 * 
 *                 if event_type == "balance":  # Updates total balance and available balance of specified currency             # <<<<<<<<<<<<<<
 *                     balance_delta = content["delta"]
 *                     asset_name = balance_delta["currencySymbol"]
 */
          goto __pyx_L15;
        }

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":501
 *                     self._account_available_balances[asset_name] = available_balance
 *                     self._account_balances[asset_name] = total_balance
 *                 elif event_type == "order":  # Updates track order status             # <<<<<<<<<<<<<<
 *                     order = content["delta"]
 *                     order_status = order["status"]
 */
        __pyx_t_9 = (__Pyx_PyUnicode_Equals(__pyx_cur_scope->__pyx_v_event_type, __pyx_n_u_order_2, Py_EQ)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 501, __pyx_L7_error)
        if (__pyx_t_9) {

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":502
 *                     self._account_balances[asset_name] = total_balance
 *                 elif event_type == "order":  # Updates track order status
 *                     order = content["delta"]             # <<<<<<<<<<<<<<
 *                     order_status = order["status"]
 *                     order_id = order["id"]
 */
          __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_content, __pyx_n_u_delta); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 502, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":503
 *                 elif event_type == "order":  # Updates track order status
 *                     order = content["delta"]
 *                     order_status = order["status"]             # <<<<<<<<<<<<<<
 *                     order_id = order["id"]
 * 
 */
          __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_status); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 503, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order_status);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order_status, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":504
 *                     order = content["delta"]
 *                     order_status = order["status"]
 *                     order_id = order["id"]             # <<<<<<<<<<<<<<
 * 
 *                     tracked_order = None
 */
          __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 504, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order_id);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order_id, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":506
 *                     order_id = order["id"]
 * 
 *                     tracked_order = None             # <<<<<<<<<<<<<<
 *                     for o in self._in_flight_orders.values():
 *                         exchange_order_id = await o.get_exchange_order_id()
 */
          __Pyx_INCREF(Py_None);
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tracked_order);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tracked_order, Py_None);
          __Pyx_GIVEREF(Py_None);

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":507
 * 
 *                     tracked_order = None
 *                     for o in self._in_flight_orders.values():             # <<<<<<<<<<<<<<
 *                         exchange_order_id = await o.get_exchange_order_id()
 *                         if exchange_order_id == order_id:
 */
          __pyx_t_11 = 0;
          if (unlikely(__pyx_cur_scope->__pyx_v_self->_in_flight_orders == Py_None)) {
            PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
            __PYX_ERR(0, 507, __pyx_L7_error)
          }
          __pyx_t_3 = __Pyx_dict_iterator(__pyx_cur_scope->__pyx_v_self->_in_flight_orders, 1, __pyx_n_s_values, (&__pyx_t_12), (&__pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 507, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_XDECREF(__pyx_t_1);
          __pyx_t_1 = __pyx_t_3;
          __pyx_t_3 = 0;
          while (1) {
            __pyx_t_13 = __Pyx_dict_iter_next(__pyx_t_1, __pyx_t_12, &__pyx_t_11, NULL, &__pyx_t_3, NULL, __pyx_t_4);
            if (unlikely(__pyx_t_13 == 0)) break;
            if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(0, 507, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_o);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_o, __pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_3);
            __pyx_t_3 = 0;

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":508
 *                     tracked_order = None
 *                     for o in self._in_flight_orders.values():
 *                         exchange_order_id = await o.get_exchange_order_id()             # <<<<<<<<<<<<<<
 *                         if exchange_order_id == order_id:
 *                             tracked_order = o
 */
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_o, __pyx_n_s_get_exchange_order_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 508, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_10 = NULL;
            __pyx_t_13 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_10)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_10);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
                __pyx_t_13 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[1] = {__pyx_t_10, };
              __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_13, 0+__pyx_t_13);
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 508, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            }
            __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_3);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_r);
            if (likely(__pyx_r)) {
              __Pyx_XGIVEREF(__pyx_t_1);
              __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
              __Pyx_XGIVEREF(__pyx_t_2);
              __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
              __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
              __Pyx_XGIVEREF(__pyx_t_5);
              __pyx_cur_scope->__pyx_t_3 = __pyx_t_5;
              __Pyx_XGIVEREF(__pyx_t_6);
              __pyx_cur_scope->__pyx_t_4 = __pyx_t_6;
              __Pyx_XGIVEREF(__pyx_t_7);
              __pyx_cur_scope->__pyx_t_5 = __pyx_t_7;
              __pyx_cur_scope->__pyx_t_6 = __pyx_t_11;
              __pyx_cur_scope->__pyx_t_7 = __pyx_t_12;
              __Pyx_XGIVEREF(__pyx_r);
              __Pyx_RefNannyFinishContext();
              __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
              /* return from generator, awaiting value */
              __pyx_generator->resume_label = 2;
              return __pyx_r;
              __pyx_L18_resume_from_await:;
              __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
              __pyx_cur_scope->__pyx_t_0 = 0;
              __Pyx_XGOTREF(__pyx_t_1);
              __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
              __pyx_cur_scope->__pyx_t_1 = 0;
              __Pyx_XGOTREF(__pyx_t_2);
              __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
              __pyx_t_5 = __pyx_cur_scope->__pyx_t_3;
              __pyx_cur_scope->__pyx_t_3 = 0;
              __Pyx_XGOTREF(__pyx_t_5);
              __pyx_t_6 = __pyx_cur_scope->__pyx_t_4;
              __pyx_cur_scope->__pyx_t_4 = 0;
              __Pyx_XGOTREF(__pyx_t_6);
              __pyx_t_7 = __pyx_cur_scope->__pyx_t_5;
              __pyx_cur_scope->__pyx_t_5 = 0;
              __Pyx_XGOTREF(__pyx_t_7);
              __pyx_t_11 = __pyx_cur_scope->__pyx_t_6;
              __pyx_t_12 = __pyx_cur_scope->__pyx_t_7;
              if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 508, __pyx_L7_error)
              __pyx_t_3 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_3);
            } else {
              __pyx_t_3 = NULL;
              if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_3) < 0) __PYX_ERR(0, 508, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_3);
            }
            __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_exchange_order_id);
            __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_exchange_order_id, __pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_3);
            __pyx_t_3 = 0;

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":509
 *                     for o in self._in_flight_orders.values():
 *                         exchange_order_id = await o.get_exchange_order_id()
 *                         if exchange_order_id == order_id:             # <<<<<<<<<<<<<<
 *                             tracked_order = o
 *                             break
 */
            __pyx_t_3 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_exchange_order_id, __pyx_cur_scope->__pyx_v_order_id, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 509, __pyx_L7_error)
            __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 509, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (__pyx_t_9) {

              /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":510
 *                         exchange_order_id = await o.get_exchange_order_id()
 *                         if exchange_order_id == order_id:
 *                             tracked_order = o             # <<<<<<<<<<<<<<
 *                             break
 * 
 */
              __Pyx_INCREF(__pyx_cur_scope->__pyx_v_o);
              __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_tracked_order);
              __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_cur_scope->__pyx_v_o);
              __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_o);

              /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":511
 *                         if exchange_order_id == order_id:
 *                             tracked_order = o
 *                             break             # <<<<<<<<<<<<<<
 * 
 *                     if tracked_order is None:
 */
              goto __pyx_L17_break;

              /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":509
 *                     for o in self._in_flight_orders.values():
 *                         exchange_order_id = await o.get_exchange_order_id()
 *                         if exchange_order_id == order_id:             # <<<<<<<<<<<<<<
 *                             tracked_order = o
 *                             break
 */
            }
          }
          __pyx_L17_break:;
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":513
 *                             break
 * 
 *                     if tracked_order is None:             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          __pyx_t_9 = (__pyx_cur_scope->__pyx_v_tracked_order == Py_None);
          __pyx_t_14 = (__pyx_t_9 != 0);
          if (__pyx_t_14) {

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":514
 * 
 *                     if tracked_order is None:
 *                         continue             # <<<<<<<<<<<<<<
 * 
 *                     order_type_description = tracked_order.order_type_description
 */
            goto __pyx_L13_try_continue;

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":513
 *                             break
 * 
 *                     if tracked_order is None:             # <<<<<<<<<<<<<<
 *                         continue
 * 
 */
          }

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":516
 *                         continue
 * 
 *                     order_type_description = tracked_order.order_type_description             # <<<<<<<<<<<<<<
 *                     execute_price = Decimal(order["limit"])
 *                     executed_amount_diff = s_decimal_0
 */
          __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_order_type_description); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order_type_description);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order_type_description, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":517
 * 
 *                     order_type_description = tracked_order.order_type_description
 *                     execute_price = Decimal(order["limit"])             # <<<<<<<<<<<<<<
 *                     executed_amount_diff = s_decimal_0
 * 
 */
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 517, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_limit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 517, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_10 = NULL;
          __pyx_t_4 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_4 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_8};
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_execute_price);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_execute_price, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":518
 *                     order_type_description = tracked_order.order_type_description
 *                     execute_price = Decimal(order["limit"])
 *                     executed_amount_diff = s_decimal_0             # <<<<<<<<<<<<<<
 * 
 *                     tracked_order.fee_paid = Decimal(order["commission"])
 */
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 518, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_executed_amount_diff);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_executed_amount_diff, __pyx_t_1);
          __Pyx_GIVEREF(__pyx_t_1);
          __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":520
 *                     executed_amount_diff = s_decimal_0
 * 
 *                     tracked_order.fee_paid = Decimal(order["commission"])             # <<<<<<<<<<<<<<
 *                     remaining_size = Decimal(order["quantity"]) - Decimal(order["fillQuantity"])
 *                     new_confirmed_amount = tracked_order.amount - remaining_size
 */
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 520, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_commission); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 520, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_10 = NULL;
          __pyx_t_4 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_4 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_8};
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 520, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_fee_paid, __pyx_t_1) < 0) __PYX_ERR(0, 520, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":521
 * 
 *                     tracked_order.fee_paid = Decimal(order["commission"])
 *                     remaining_size = Decimal(order["quantity"]) - Decimal(order["fillQuantity"])             # <<<<<<<<<<<<<<
 *                     new_confirmed_amount = tracked_order.amount - remaining_size
 *                     executed_amount_diff = new_confirmed_amount - tracked_order.executed_amount_base
 */
          __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 521, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_quantity); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 521, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_10 = NULL;
          __pyx_t_4 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
            __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_3);
            if (likely(__pyx_t_10)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
              __Pyx_INCREF(__pyx_t_10);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_3, function);
              __pyx_t_4 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_8};
            __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 521, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          }
          __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 521, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_10 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_fillQuantity); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 521, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_15 = NULL;
          __pyx_t_4 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
            __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_8);
            if (likely(__pyx_t_15)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
              __Pyx_INCREF(__pyx_t_15);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_8, function);
              __pyx_t_4 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_t_10};
            __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 521, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          }
          __pyx_t_8 = PyNumber_Subtract(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 521, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_remaining_size);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_remaining_size, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_8);
          __pyx_t_8 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":522
 *                     tracked_order.fee_paid = Decimal(order["commission"])
 *                     remaining_size = Decimal(order["quantity"]) - Decimal(order["fillQuantity"])
 *                     new_confirmed_amount = tracked_order.amount - remaining_size             # <<<<<<<<<<<<<<
 *                     executed_amount_diff = new_confirmed_amount - tracked_order.executed_amount_base
 *                     tracked_order.executed_amount_base = new_confirmed_amount
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_amount); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 522, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_3 = PyNumber_Subtract(__pyx_t_8, __pyx_cur_scope->__pyx_v_remaining_size); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 522, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_new_confirmed_amount);
          __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_new_confirmed_amount, __pyx_t_3);
          __Pyx_GIVEREF(__pyx_t_3);
          __pyx_t_3 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":523
 *                     remaining_size = Decimal(order["quantity"]) - Decimal(order["fillQuantity"])
 *                     new_confirmed_amount = tracked_order.amount - remaining_size
 *                     executed_amount_diff = new_confirmed_amount - tracked_order.executed_amount_base             # <<<<<<<<<<<<<<
 *                     tracked_order.executed_amount_base = new_confirmed_amount
 *                     tracked_order.executed_amount_quote += Decimal(executed_amount_diff * execute_price)
 */
          __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_executed_amount_base); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 523, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_8 = PyNumber_Subtract(__pyx_cur_scope->__pyx_v_new_confirmed_amount, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 523, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_executed_amount_diff);
          __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_executed_amount_diff, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_8);
          __pyx_t_8 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":524
 *                     new_confirmed_amount = tracked_order.amount - remaining_size
 *                     executed_amount_diff = new_confirmed_amount - tracked_order.executed_amount_base
 *                     tracked_order.executed_amount_base = new_confirmed_amount             # <<<<<<<<<<<<<<
 *                     tracked_order.executed_amount_quote += Decimal(executed_amount_diff * execute_price)
 * 
 */
          if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_executed_amount_base, __pyx_cur_scope->__pyx_v_new_confirmed_amount) < 0) __PYX_ERR(0, 524, __pyx_L7_error)

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":525
 *                     executed_amount_diff = new_confirmed_amount - tracked_order.executed_amount_base
 *                     tracked_order.executed_amount_base = new_confirmed_amount
 *                     tracked_order.executed_amount_quote += Decimal(executed_amount_diff * execute_price)             # <<<<<<<<<<<<<<
 * 
 *                     if executed_amount_diff > s_decimal_0:
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_executed_amount_quote); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 525, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 525, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_10 = PyNumber_Multiply(__pyx_cur_scope->__pyx_v_executed_amount_diff, __pyx_cur_scope->__pyx_v_execute_price); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 525, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_10);
          __pyx_t_15 = NULL;
          __pyx_t_4 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
            __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_1);
            if (likely(__pyx_t_15)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
              __Pyx_INCREF(__pyx_t_15);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_1, function);
              __pyx_t_4 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_15, __pyx_t_10};
            __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 525, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          }
          __pyx_t_1 = PyNumber_InPlaceAdd(__pyx_t_8, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 525, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_executed_amount_quote, __pyx_t_1) < 0) __PYX_ERR(0, 525, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":527
 *                     tracked_order.executed_amount_quote += Decimal(executed_amount_diff * execute_price)
 * 
 *                     if executed_amount_diff > s_decimal_0:             # <<<<<<<<<<<<<<
 *                         self.logger().info(f"Filled {executed_amount_diff} out of {tracked_order.amount} of the "
 *                                            f"{order_type_description} order {tracked_order.client_order_id}. - ws")
 */
          __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 527, __pyx_L7_error)
          __Pyx_GOTREF(__pyx_t_1);
          __pyx_t_3 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_executed_amount_diff, __pyx_t_1, Py_GT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 527, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
          __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 527, __pyx_L7_error)
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (__pyx_t_14) {

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":528
 * 
 *                     if executed_amount_diff > s_decimal_0:
 *                         self.logger().info(f"Filled {executed_amount_diff} out of {tracked_order.amount} of the "             # <<<<<<<<<<<<<<
 *                                            f"{order_type_description} order {tracked_order.client_order_id}. - ws")
 *                         self.c_trigger_event(self.MARKET_ORDER_FILLED_EVENT_TAG,
 */
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 528, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_10 = NULL;
            __pyx_t_4 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_10)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_10);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
                __pyx_t_4 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[1] = {__pyx_t_10, };
              __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            }
            __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 528, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = PyTuple_New(9); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 528, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);
            __pyx_t_12 = 0;
            __pyx_t_16 = 127;
            __Pyx_INCREF(__pyx_kp_u_Filled);
            __pyx_t_12 += 7;
            __Pyx_GIVEREF(__pyx_kp_u_Filled);
            PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Filled);
            __pyx_t_10 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_executed_amount_diff, __pyx_empty_unicode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 528, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_16;
            __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
            __Pyx_GIVEREF(__pyx_t_10);
            PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_10);
            __pyx_t_10 = 0;
            __Pyx_INCREF(__pyx_kp_u_out_of);
            __pyx_t_12 += 8;
            __Pyx_GIVEREF(__pyx_kp_u_out_of);
            PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_out_of);
            __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_amount); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 528, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_10);
            __pyx_t_15 = __Pyx_PyObject_FormatSimple(__pyx_t_10, __pyx_empty_unicode); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 528, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_15);
            __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
            __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) : __pyx_t_16;
            __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_15);
            __Pyx_GIVEREF(__pyx_t_15);
            PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_15);
            __pyx_t_15 = 0;
            __Pyx_INCREF(__pyx_kp_u_of_the);
            __pyx_t_12 += 8;
            __Pyx_GIVEREF(__pyx_kp_u_of_the);
            PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u_of_the);

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":529
 *                     if executed_amount_diff > s_decimal_0:
 *                         self.logger().info(f"Filled {executed_amount_diff} out of {tracked_order.amount} of the "
 *                                            f"{order_type_description} order {tracked_order.client_order_id}. - ws")             # <<<<<<<<<<<<<<
 *                         self.c_trigger_event(self.MARKET_ORDER_FILLED_EVENT_TAG,
 *                                              OrderFilledEvent(
 */
            __pyx_t_15 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_order_type_description, __pyx_empty_unicode); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 529, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_15) : __pyx_t_16;
            __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_15);
            __Pyx_GIVEREF(__pyx_t_15);
            PyTuple_SET_ITEM(__pyx_t_1, 5, __pyx_t_15);
            __pyx_t_15 = 0;
            __Pyx_INCREF(__pyx_kp_u_order);
            __pyx_t_12 += 7;
            __Pyx_GIVEREF(__pyx_kp_u_order);
            PyTuple_SET_ITEM(__pyx_t_1, 6, __pyx_kp_u_order);
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 529, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_10 = __Pyx_PyObject_FormatSimple(__pyx_t_15, __pyx_empty_unicode); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 529, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_10) : __pyx_t_16;
            __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_10);
            __Pyx_GIVEREF(__pyx_t_10);
            PyTuple_SET_ITEM(__pyx_t_1, 7, __pyx_t_10);
            __pyx_t_10 = 0;
            __Pyx_INCREF(__pyx_kp_u_ws);
            __pyx_t_12 += 6;
            __Pyx_GIVEREF(__pyx_kp_u_ws);
            PyTuple_SET_ITEM(__pyx_t_1, 8, __pyx_kp_u_ws);

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":528
 * 
 *                     if executed_amount_diff > s_decimal_0:
 *                         self.logger().info(f"Filled {executed_amount_diff} out of {tracked_order.amount} of the "             # <<<<<<<<<<<<<<
 *                                            f"{order_type_description} order {tracked_order.client_order_id}. - ws")
 *                         self.c_trigger_event(self.MARKET_ORDER_FILLED_EVENT_TAG,
 */
            __pyx_t_10 = __Pyx_PyUnicode_Join(__pyx_t_1, 9, __pyx_t_12, __pyx_t_16); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 528, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_10);
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            __pyx_t_1 = NULL;
            __pyx_t_4 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_1 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_1)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_1);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
                __pyx_t_4 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_10};
              __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 528, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            }
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":530
 *                         self.logger().info(f"Filled {executed_amount_diff} out of {tracked_order.amount} of the "
 *                                            f"{order_type_description} order {tracked_order.client_order_id}. - ws")
 *                         self.c_trigger_event(self.MARKET_ORDER_FILLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                              OrderFilledEvent(
 *                                                  self._current_timestamp,
 */
            __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 530, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_17 = __Pyx_PyInt_As_int64_t(__pyx_t_3); if (unlikely((__pyx_t_17 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 530, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":531
 *                                            f"{order_type_description} order {tracked_order.client_order_id}. - ws")
 *                         self.c_trigger_event(self.MARKET_ORDER_FILLED_EVENT_TAG,
 *                                              OrderFilledEvent(             # <<<<<<<<<<<<<<
 *                                                  self._current_timestamp,
 *                                                  tracked_order.client_order_id,
 */
            __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_OrderFilledEvent); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 531, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_8);

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":532
 *                         self.c_trigger_event(self.MARKET_ORDER_FILLED_EVENT_TAG,
 *                                              OrderFilledEvent(
 *                                                  self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                                  tracked_order.client_order_id,
 *                                                  tracked_order.trading_pair,
 */
            __pyx_t_10 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 532, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_10);

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":533
 *                                              OrderFilledEvent(
 *                                                  self._current_timestamp,
 *                                                  tracked_order.client_order_id,             # <<<<<<<<<<<<<<
 *                                                  tracked_order.trading_pair,
 *                                                  tracked_order.trade_type,
 */
            __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 533, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_1);

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":534
 *                                                  self._current_timestamp,
 *                                                  tracked_order.client_order_id,
 *                                                  tracked_order.trading_pair,             # <<<<<<<<<<<<<<
 *                                                  tracked_order.trade_type,
 *                                                  tracked_order.order_type,
 */
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 534, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_15);

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":535
 *                                                  tracked_order.client_order_id,
 *                                                  tracked_order.trading_pair,
 *                                                  tracked_order.trade_type,             # <<<<<<<<<<<<<<
 *                                                  tracked_order.order_type,
 *                                                  execute_price,
 */
            __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_trade_type); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 535, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_18);

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":536
 *                                                  tracked_order.trading_pair,
 *                                                  tracked_order.trade_type,
 *                                                  tracked_order.order_type,             # <<<<<<<<<<<<<<
 *                                                  execute_price,
 *                                                  executed_amount_diff,
 */
            __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_order_type); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 536, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_19);

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":540
 *                                                  executed_amount_diff,
 *                                                  self.c_get_fee(
 *                                                      tracked_order.base_asset,             # <<<<<<<<<<<<<<
 *                                                      tracked_order.quote_asset,
 *                                                      tracked_order.order_type,
 */
            __pyx_t_20 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 540, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_20);
            if (!(likely(PyUnicode_CheckExact(__pyx_t_20))||((__pyx_t_20) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_20))) __PYX_ERR(0, 540, __pyx_L7_error)

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":541
 *                                                  self.c_get_fee(
 *                                                      tracked_order.base_asset,
 *                                                      tracked_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                      tracked_order.order_type,
 *                                                      tracked_order.trade_type,
 */
            __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 541, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_21);
            if (!(likely(PyUnicode_CheckExact(__pyx_t_21))||((__pyx_t_21) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_21))) __PYX_ERR(0, 541, __pyx_L7_error)

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":542
 *                                                      tracked_order.base_asset,
 *                                                      tracked_order.quote_asset,
 *                                                      tracked_order.order_type,             # <<<<<<<<<<<<<<
 *                                                      tracked_order.trade_type,
 *                                                      execute_price,
 */
            __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_order_type); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 542, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_22);

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":543
 *                                                      tracked_order.quote_asset,
 *                                                      tracked_order.order_type,
 *                                                      tracked_order.trade_type,             # <<<<<<<<<<<<<<
 *                                                      execute_price,
 *                                                      executed_amount_diff
 */
            __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_trade_type); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 543, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_23);

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":539
 *                                                  execute_price,
 *                                                  executed_amount_diff,
 *                                                  self.c_get_fee(             # <<<<<<<<<<<<<<
 *                                                      tracked_order.base_asset,
 *                                                      tracked_order.quote_asset,
 */
            __pyx_t_24 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_fee(((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_cur_scope->__pyx_v_self), ((PyObject*)__pyx_t_20), ((PyObject*)__pyx_t_21), __pyx_t_22, __pyx_t_23, __pyx_cur_scope->__pyx_v_execute_price, __pyx_cur_scope->__pyx_v_executed_amount_diff); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 539, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_24);
            __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
            __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
            __pyx_t_23 = NULL;
            __pyx_t_4 = 0;
            if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
              __pyx_t_23 = PyMethod_GET_SELF(__pyx_t_8);
              if (likely(__pyx_t_23)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                __Pyx_INCREF(__pyx_t_23);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_8, function);
                __pyx_t_4 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[9] = {__pyx_t_23, __pyx_t_10, __pyx_t_1, __pyx_t_15, __pyx_t_18, __pyx_t_19, __pyx_cur_scope->__pyx_v_execute_price, __pyx_cur_scope->__pyx_v_executed_amount_diff, __pyx_t_24};
              __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 8+__pyx_t_4);
              __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
              __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
              __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
              if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 531, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            }

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":530
 *                         self.logger().info(f"Filled {executed_amount_diff} out of {tracked_order.amount} of the "
 *                                            f"{order_type_description} order {tracked_order.client_order_id}. - ws")
 *                         self.c_trigger_event(self.MARKET_ORDER_FILLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                              OrderFilledEvent(
 *                                                  self._current_timestamp,
 */
            __pyx_t_8 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_17, __pyx_t_3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 530, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":527
 *                     tracked_order.executed_amount_quote += Decimal(executed_amount_diff * execute_price)
 * 
 *                     if executed_amount_diff > s_decimal_0:             # <<<<<<<<<<<<<<
 *                         self.logger().info(f"Filled {executed_amount_diff} out of {tracked_order.amount} of the "
 *                                            f"{order_type_description} order {tracked_order.client_order_id}. - ws")
 */
          }

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":549
 *                                              ))
 * 
 *                     if order_status == "CLOSED":             # <<<<<<<<<<<<<<
 *                         if order["quantity"] == order["fillQuantity"]:
 *                             tracked_order.last_state = "done"
 */
          __pyx_t_14 = (__Pyx_PyUnicode_Equals(__pyx_cur_scope->__pyx_v_order_status, __pyx_n_u_CLOSED, Py_EQ)); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 549, __pyx_L7_error)
          if (__pyx_t_14) {

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":550
 * 
 *                     if order_status == "CLOSED":
 *                         if order["quantity"] == order["fillQuantity"]:             # <<<<<<<<<<<<<<
 *                             tracked_order.last_state = "done"
 *                             if tracked_order.trade_type is TradeType.BUY:
 */
            __pyx_t_8 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_quantity); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 550, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_8);
            __pyx_t_3 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order, __pyx_n_u_fillQuantity); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 550, __pyx_L7_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_24 = PyObject_RichCompare(__pyx_t_8, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_24); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 550, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_24); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 550, __pyx_L7_error)
            __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
            if (__pyx_t_14) {

              /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":551
 *                     if order_status == "CLOSED":
 *                         if order["quantity"] == order["fillQuantity"]:
 *                             tracked_order.last_state = "done"             # <<<<<<<<<<<<<<
 *                             if tracked_order.trade_type is TradeType.BUY:
 *                                 self.logger().info(f"The BUY order {tracked_order.client_order_id} has completed "
 */
              if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_last_state, __pyx_n_u_done) < 0) __PYX_ERR(0, 551, __pyx_L7_error)

              /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":552
 *                         if order["quantity"] == order["fillQuantity"]:
 *                             tracked_order.last_state = "done"
 *                             if tracked_order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                                 self.logger().info(f"The BUY order {tracked_order.client_order_id} has completed "
 *                                                    f"according to order delta websocket API.")
 */
              __pyx_t_24 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_trade_type); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 552, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_24);
              __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 552, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_3);
              __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_BUY); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 552, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __pyx_t_14 = (__pyx_t_24 == __pyx_t_8);
              __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_t_9 = (__pyx_t_14 != 0);
              if (__pyx_t_9) {

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":553
 *                             tracked_order.last_state = "done"
 *                             if tracked_order.trade_type is TradeType.BUY:
 *                                 self.logger().info(f"The BUY order {tracked_order.client_order_id} has completed "             # <<<<<<<<<<<<<<
 *                                                    f"according to order delta websocket API.")
 *                                 self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,
 */
                __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 553, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_19 = NULL;
                __pyx_t_4 = 0;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                  __pyx_t_19 = PyMethod_GET_SELF(__pyx_t_3);
                  if (likely(__pyx_t_19)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                    __Pyx_INCREF(__pyx_t_19);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_3, function);
                    __pyx_t_4 = 1;
                  }
                }
                {
                  PyObject *__pyx_callargs[1] = {__pyx_t_19, };
                  __pyx_t_24 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                  __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
                  if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 553, __pyx_L7_error)
                  __Pyx_GOTREF(__pyx_t_24);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                }
                __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_24, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 553, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
                __pyx_t_24 = PyTuple_New(3); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 553, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_24);
                __pyx_t_12 = 0;
                __pyx_t_16 = 127;
                __Pyx_INCREF(__pyx_kp_u_The_BUY_order);
                __pyx_t_12 += 14;
                __Pyx_GIVEREF(__pyx_kp_u_The_BUY_order);
                PyTuple_SET_ITEM(__pyx_t_24, 0, __pyx_kp_u_The_BUY_order);
                __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 553, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_19);
                __pyx_t_18 = __Pyx_PyObject_FormatSimple(__pyx_t_19, __pyx_empty_unicode); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 553, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_18);
                __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_18) : __pyx_t_16;
                __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_18);
                __Pyx_GIVEREF(__pyx_t_18);
                PyTuple_SET_ITEM(__pyx_t_24, 1, __pyx_t_18);
                __pyx_t_18 = 0;
                __Pyx_INCREF(__pyx_kp_u_has_completed_according_to_orde);
                __pyx_t_12 += 54;
                __Pyx_GIVEREF(__pyx_kp_u_has_completed_according_to_orde);
                PyTuple_SET_ITEM(__pyx_t_24, 2, __pyx_kp_u_has_completed_according_to_orde);
                __pyx_t_18 = __Pyx_PyUnicode_Join(__pyx_t_24, 3, __pyx_t_12, __pyx_t_16); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 553, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_18);
                __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
                __pyx_t_24 = NULL;
                __pyx_t_4 = 0;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
                  __pyx_t_24 = PyMethod_GET_SELF(__pyx_t_3);
                  if (likely(__pyx_t_24)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                    __Pyx_INCREF(__pyx_t_24);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_3, function);
                    __pyx_t_4 = 1;
                  }
                }
                {
                  PyObject *__pyx_callargs[2] = {__pyx_t_24, __pyx_t_18};
                  __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                  __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
                  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 553, __pyx_L7_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                }
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":555
 *                                 self.logger().info(f"The BUY order {tracked_order.client_order_id} has completed "
 *                                                    f"according to order delta websocket API.")
 *                                 self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                                      BuyOrderCompletedEvent(
 *                                                          self._current_timestamp,
 */
                __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 555, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_8);
                __pyx_t_17 = __Pyx_PyInt_As_int64_t(__pyx_t_8); if (unlikely((__pyx_t_17 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 555, __pyx_L7_error)
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":556
 *                                                    f"according to order delta websocket API.")
 *                                 self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,
 *                                                      BuyOrderCompletedEvent(             # <<<<<<<<<<<<<<
 *                                                          self._current_timestamp,
 *                                                          tracked_order.client_order_id,
 */
                __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_BuyOrderCompletedEvent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 556, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_3);

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":557
 *                                 self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,
 *                                                      BuyOrderCompletedEvent(
 *                                                          self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                                          tracked_order.client_order_id,
 *                                                          tracked_order.base_asset,
 */
                __pyx_t_18 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 557, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_18);

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":558
 *                                                      BuyOrderCompletedEvent(
 *                                                          self._current_timestamp,
 *                                                          tracked_order.client_order_id,             # <<<<<<<<<<<<<<
 *                                                          tracked_order.base_asset,
 *                                                          tracked_order.quote_asset,
 */
                __pyx_t_24 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 558, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_24);

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":559
 *                                                          self._current_timestamp,
 *                                                          tracked_order.client_order_id,
 *                                                          tracked_order.base_asset,             # <<<<<<<<<<<<<<
 *                                                          tracked_order.quote_asset,
 *                                                          tracked_order.fee_asset or tracked_order.quote_asset,
 */
                __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 559, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_19);

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":560
 *                                                          tracked_order.client_order_id,
 *                                                          tracked_order.base_asset,
 *                                                          tracked_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                          tracked_order.fee_asset or tracked_order.quote_asset,
 *                                                          tracked_order.executed_amount_base,
 */
                __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 560, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_15);

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":561
 *                                                          tracked_order.base_asset,
 *                                                          tracked_order.quote_asset,
 *                                                          tracked_order.fee_asset or tracked_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                          tracked_order.executed_amount_base,
 *                                                          tracked_order.executed_amount_quote,
 */
                __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_fee_asset); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 561, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_10); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 561, __pyx_L7_error)
                if (!__pyx_t_9) {
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                } else {
                  __Pyx_INCREF(__pyx_t_10);
                  __pyx_t_1 = __pyx_t_10;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  goto __pyx_L25_bool_binop_done;
                }
                __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 561, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_10);
                __Pyx_INCREF(__pyx_t_10);
                __pyx_t_1 = __pyx_t_10;
                __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                __pyx_L25_bool_binop_done:;

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":562
 *                                                          tracked_order.quote_asset,
 *                                                          tracked_order.fee_asset or tracked_order.quote_asset,
 *                                                          tracked_order.executed_amount_base,             # <<<<<<<<<<<<<<
 *                                                          tracked_order.executed_amount_quote,
 *                                                          tracked_order.fee_paid,
 */
                __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_executed_amount_base); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 562, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_10);

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":563
 *                                                          tracked_order.fee_asset or tracked_order.quote_asset,
 *                                                          tracked_order.executed_amount_base,
 *                                                          tracked_order.executed_amount_quote,             # <<<<<<<<<<<<<<
 *                                                          tracked_order.fee_paid,
 *                                                          tracked_order.order_type
 */
                __pyx_t_23 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_executed_amount_quote); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 563, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_23);

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":564
 *                                                          tracked_order.executed_amount_base,
 *                                                          tracked_order.executed_amount_quote,
 *                                                          tracked_order.fee_paid,             # <<<<<<<<<<<<<<
 *                                                          tracked_order.order_type
 *                                                      ))
 */
                __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_fee_paid); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 564, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_22);

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":565
 *                                                          tracked_order.executed_amount_quote,
 *                                                          tracked_order.fee_paid,
 *                                                          tracked_order.order_type             # <<<<<<<<<<<<<<
 *                                                      ))
 *                             elif tracked_order.trade_type is TradeType.SELL:
 */
                __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_order_type); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 565, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_21);
                __pyx_t_20 = NULL;
                __pyx_t_4 = 0;
                if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
                  __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_3);
                  if (likely(__pyx_t_20)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
                    __Pyx_INCREF(__pyx_t_20);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_3, function);
                    __pyx_t_4 = 1;
                  }
                }
                {
                  PyObject *__pyx_callargs[10] = {__pyx_t_20, __pyx_t_18, __pyx_t_24, __pyx_t_19, __pyx_t_15, __pyx_t_1, __pyx_t_10, __pyx_t_23, __pyx_t_22, __pyx_t_21};
                  __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 9+__pyx_t_4);
                  __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
                  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
                  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                  __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                  if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 556, __pyx_L7_error)
                  __Pyx_GOTREF(__pyx_t_8);
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                }

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":555
 *                                 self.logger().info(f"The BUY order {tracked_order.client_order_id} has completed "
 *                                                    f"according to order delta websocket API.")
 *                                 self.c_trigger_event(self.MARKET_BUY_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                                      BuyOrderCompletedEvent(
 *                                                          self._current_timestamp,
 */
                __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_17, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 555, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_3);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":552
 *                         if order["quantity"] == order["fillQuantity"]:
 *                             tracked_order.last_state = "done"
 *                             if tracked_order.trade_type is TradeType.BUY:             # <<<<<<<<<<<<<<
 *                                 self.logger().info(f"The BUY order {tracked_order.client_order_id} has completed "
 *                                                    f"according to order delta websocket API.")
 */
                goto __pyx_L24;
              }

              /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":567
 *                                                          tracked_order.order_type
 *                                                      ))
 *                             elif tracked_order.trade_type is TradeType.SELL:             # <<<<<<<<<<<<<<
 *                                 self.logger().info(f"The SELL order {tracked_order.client_order_id} has completed "
 *                                                    f"according to Order Delta WebSocket API.")
 */
              __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_trade_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 567, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 567, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_21 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_SELL); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 567, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_21);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_t_9 = (__pyx_t_3 == __pyx_t_21);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
              __pyx_t_14 = (__pyx_t_9 != 0);
              if (__pyx_t_14) {

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":568
 *                                                      ))
 *                             elif tracked_order.trade_type is TradeType.SELL:
 *                                 self.logger().info(f"The SELL order {tracked_order.client_order_id} has completed "             # <<<<<<<<<<<<<<
 *                                                    f"according to Order Delta WebSocket API.")
 *                                 self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,
 */
                __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 568, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_8);
                __pyx_t_22 = NULL;
                __pyx_t_4 = 0;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
                  __pyx_t_22 = PyMethod_GET_SELF(__pyx_t_8);
                  if (likely(__pyx_t_22)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                    __Pyx_INCREF(__pyx_t_22);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_8, function);
                    __pyx_t_4 = 1;
                  }
                }
                {
                  PyObject *__pyx_callargs[1] = {__pyx_t_22, };
                  __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                  __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
                  if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L7_error)
                  __Pyx_GOTREF(__pyx_t_3);
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                }
                __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_info); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 568, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_8);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_t_3 = PyTuple_New(3); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 568, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_3);
                __pyx_t_12 = 0;
                __pyx_t_16 = 127;
                __Pyx_INCREF(__pyx_kp_u_The_SELL_order);
                __pyx_t_12 += 15;
                __Pyx_GIVEREF(__pyx_kp_u_The_SELL_order);
                PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_kp_u_The_SELL_order);
                __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 568, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_22);
                __pyx_t_23 = __Pyx_PyObject_FormatSimple(__pyx_t_22, __pyx_empty_unicode); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 568, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_23);
                __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_23) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_23) : __pyx_t_16;
                __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_23);
                __Pyx_GIVEREF(__pyx_t_23);
                PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_23);
                __pyx_t_23 = 0;
                __Pyx_INCREF(__pyx_kp_u_has_completed_according_to_Orde);
                __pyx_t_12 += 54;
                __Pyx_GIVEREF(__pyx_kp_u_has_completed_according_to_Orde);
                PyTuple_SET_ITEM(__pyx_t_3, 2, __pyx_kp_u_has_completed_according_to_Orde);
                __pyx_t_23 = __Pyx_PyUnicode_Join(__pyx_t_3, 3, __pyx_t_12, __pyx_t_16); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 568, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_23);
                __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                __pyx_t_3 = NULL;
                __pyx_t_4 = 0;
                if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
                  __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_8);
                  if (likely(__pyx_t_3)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                    __Pyx_INCREF(__pyx_t_3);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_8, function);
                    __pyx_t_4 = 1;
                  }
                }
                {
                  PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_23};
                  __pyx_t_21 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                  if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 568, __pyx_L7_error)
                  __Pyx_GOTREF(__pyx_t_21);
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                }
                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":570
 *                                 self.logger().info(f"The SELL order {tracked_order.client_order_id} has completed "
 *                                                    f"according to Order Delta WebSocket API.")
 *                                 self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                                      SellOrderCompletedEvent(
 *                                                          self._current_timestamp,
 */
                __pyx_t_21 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 570, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_21);
                __pyx_t_17 = __Pyx_PyInt_As_int64_t(__pyx_t_21); if (unlikely((__pyx_t_17 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 570, __pyx_L7_error)
                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":571
 *                                                    f"according to Order Delta WebSocket API.")
 *                                 self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,
 *                                                      SellOrderCompletedEvent(             # <<<<<<<<<<<<<<
 *                                                          self._current_timestamp,
 *                                                          tracked_order.client_order_id,
 */
                __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_SellOrderCompletedEvent); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 571, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_8);

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":572
 *                                 self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,
 *                                                      SellOrderCompletedEvent(
 *                                                          self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                                          tracked_order.client_order_id,
 *                                                          tracked_order.base_asset,
 */
                __pyx_t_23 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 572, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_23);

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":573
 *                                                      SellOrderCompletedEvent(
 *                                                          self._current_timestamp,
 *                                                          tracked_order.client_order_id,             # <<<<<<<<<<<<<<
 *                                                          tracked_order.base_asset,
 *                                                          tracked_order.quote_asset,
 */
                __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 573, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_3);

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":574
 *                                                          self._current_timestamp,
 *                                                          tracked_order.client_order_id,
 *                                                          tracked_order.base_asset,             # <<<<<<<<<<<<<<
 *                                                          tracked_order.quote_asset,
 *                                                          tracked_order.fee_asset or tracked_order.quote_asset,
 */
                __pyx_t_22 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_base_asset); if (unlikely(!__pyx_t_22)) __PYX_ERR(0, 574, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_22);

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":575
 *                                                          tracked_order.client_order_id,
 *                                                          tracked_order.base_asset,
 *                                                          tracked_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                          tracked_order.fee_asset or tracked_order.quote_asset,
 *                                                          tracked_order.executed_amount_base,
 */
                __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 575, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_10);

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":576
 *                                                          tracked_order.base_asset,
 *                                                          tracked_order.quote_asset,
 *                                                          tracked_order.fee_asset or tracked_order.quote_asset,             # <<<<<<<<<<<<<<
 *                                                          tracked_order.executed_amount_base,
 *                                                          tracked_order.executed_amount_quote,
 */
                __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_fee_asset); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 576, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_15);
                __pyx_t_14 = __Pyx_PyObject_IsTrue(__pyx_t_15); if (unlikely((__pyx_t_14 < 0))) __PYX_ERR(0, 576, __pyx_L7_error)
                if (!__pyx_t_14) {
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                } else {
                  __Pyx_INCREF(__pyx_t_15);
                  __pyx_t_1 = __pyx_t_15;
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  goto __pyx_L27_bool_binop_done;
                }
                __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_quote_asset); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 576, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_15);
                __Pyx_INCREF(__pyx_t_15);
                __pyx_t_1 = __pyx_t_15;
                __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                __pyx_L27_bool_binop_done:;

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":577
 *                                                          tracked_order.quote_asset,
 *                                                          tracked_order.fee_asset or tracked_order.quote_asset,
 *                                                          tracked_order.executed_amount_base,             # <<<<<<<<<<<<<<
 *                                                          tracked_order.executed_amount_quote,
 *                                                          tracked_order.fee_paid,
 */
                __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_executed_amount_base); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 577, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_15);

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":578
 *                                                          tracked_order.fee_asset or tracked_order.quote_asset,
 *                                                          tracked_order.executed_amount_base,
 *                                                          tracked_order.executed_amount_quote,             # <<<<<<<<<<<<<<
 *                                                          tracked_order.fee_paid,
 *                                                          tracked_order.order_type
 */
                __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_executed_amount_quote); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 578, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_19);

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":579
 *                                                          tracked_order.executed_amount_base,
 *                                                          tracked_order.executed_amount_quote,
 *                                                          tracked_order.fee_paid,             # <<<<<<<<<<<<<<
 *                                                          tracked_order.order_type
 *                                                      ))
 */
                __pyx_t_24 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_fee_paid); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 579, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_24);

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":580
 *                                                          tracked_order.executed_amount_quote,
 *                                                          tracked_order.fee_paid,
 *                                                          tracked_order.order_type             # <<<<<<<<<<<<<<
 *                                                      ))
 *                             self.c_stop_tracking_order(tracked_order.client_order_id)
 */
                __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_order_type); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 580, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_18);
                __pyx_t_20 = NULL;
                __pyx_t_4 = 0;
                if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
                  __pyx_t_20 = PyMethod_GET_SELF(__pyx_t_8);
                  if (likely(__pyx_t_20)) {
                    PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
                    __Pyx_INCREF(__pyx_t_20);
                    __Pyx_INCREF(function);
                    __Pyx_DECREF_SET(__pyx_t_8, function);
                    __pyx_t_4 = 1;
                  }
                }
                {
                  PyObject *__pyx_callargs[10] = {__pyx_t_20, __pyx_t_23, __pyx_t_3, __pyx_t_22, __pyx_t_10, __pyx_t_1, __pyx_t_15, __pyx_t_19, __pyx_t_24, __pyx_t_18};
                  __pyx_t_21 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 9+__pyx_t_4);
                  __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
                  __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
                  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
                  __Pyx_DECREF(__pyx_t_22); __pyx_t_22 = 0;
                  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
                  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
                  __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                  __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
                  __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
                  if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 571, __pyx_L7_error)
                  __Pyx_GOTREF(__pyx_t_21);
                  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                }

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":570
 *                                 self.logger().info(f"The SELL order {tracked_order.client_order_id} has completed "
 *                                                    f"according to Order Delta WebSocket API.")
 *                                 self.c_trigger_event(self.MARKET_SELL_ORDER_COMPLETED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                                      SellOrderCompletedEvent(
 *                                                          self._current_timestamp,
 */
                __pyx_t_8 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_17, __pyx_t_21); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 570, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_8);
                __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":567
 *                                                          tracked_order.order_type
 *                                                      ))
 *                             elif tracked_order.trade_type is TradeType.SELL:             # <<<<<<<<<<<<<<
 *                                 self.logger().info(f"The SELL order {tracked_order.client_order_id} has completed "
 *                                                    f"according to Order Delta WebSocket API.")
 */
              }
              __pyx_L24:;

              /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":582
 *                                                          tracked_order.order_type
 *                                                      ))
 *                             self.c_stop_tracking_order(tracked_order.client_order_id)             # <<<<<<<<<<<<<<
 *                             continue
 * 
 */
              __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 582, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_8);
              if (!(likely(PyUnicode_CheckExact(__pyx_t_8))||((__pyx_t_8) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_8))) __PYX_ERR(0, 582, __pyx_L7_error)
              __pyx_t_21 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_stop_tracking_order(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), ((PyObject*)__pyx_t_8)); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 582, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_21);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;

              /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":583
 *                                                      ))
 *                             self.c_stop_tracking_order(tracked_order.client_order_id)
 *                             continue             # <<<<<<<<<<<<<<
 * 
 *                         else:  # CANCEL
 */
              goto __pyx_L13_try_continue;

              /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":550
 * 
 *                     if order_status == "CLOSED":
 *                         if order["quantity"] == order["fillQuantity"]:             # <<<<<<<<<<<<<<
 *                             tracked_order.last_state = "done"
 *                             if tracked_order.trade_type is TradeType.BUY:
 */
            }

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":586
 * 
 *                         else:  # CANCEL
 *                             self.logger().info(f"The order {tracked_order.client_order_id} has been cancelled "             # <<<<<<<<<<<<<<
 *                                                f"according to Order Delta WebSocket API.")
 *                             tracked_order.last_state = "cancelled"
 */
            /*else*/ {
              __pyx_t_18 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 586, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_18);
              __pyx_t_24 = NULL;
              __pyx_t_4 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_18))) {
                __pyx_t_24 = PyMethod_GET_SELF(__pyx_t_18);
                if (likely(__pyx_t_24)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
                  __Pyx_INCREF(__pyx_t_24);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_18, function);
                  __pyx_t_4 = 1;
                }
              }
              {
                PyObject *__pyx_callargs[1] = {__pyx_t_24, };
                __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_18, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
                __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
                if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 586, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_8);
                __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
              }
              __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_info); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 586, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_18);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 586, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_12 = 0;
              __pyx_t_16 = 127;
              __Pyx_INCREF(__pyx_kp_u_The_order);
              __pyx_t_12 += 10;
              __Pyx_GIVEREF(__pyx_kp_u_The_order);
              PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_The_order);
              __pyx_t_24 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 586, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_24);
              __pyx_t_19 = __Pyx_PyObject_FormatSimple(__pyx_t_24, __pyx_empty_unicode); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 586, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_19);
              __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
              __pyx_t_16 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_19) > __pyx_t_16) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_19) : __pyx_t_16;
              __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_19);
              __Pyx_GIVEREF(__pyx_t_19);
              PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_19);
              __pyx_t_19 = 0;
              __Pyx_INCREF(__pyx_kp_u_has_been_cancelled_according_to_2);
              __pyx_t_12 += 59;
              __Pyx_GIVEREF(__pyx_kp_u_has_been_cancelled_according_to_2);
              PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u_has_been_cancelled_according_to_2);
              __pyx_t_19 = __Pyx_PyUnicode_Join(__pyx_t_8, 3, __pyx_t_12, __pyx_t_16); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 586, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_19);
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __pyx_t_8 = NULL;
              __pyx_t_4 = 0;
              if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_18))) {
                __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_18);
                if (likely(__pyx_t_8)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
                  __Pyx_INCREF(__pyx_t_8);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_18, function);
                  __pyx_t_4 = 1;
                }
              }
              {
                PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_19};
                __pyx_t_21 = __Pyx_PyObject_FastCall(__pyx_t_18, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
                __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
                __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 586, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_21);
                __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
              }
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;

              /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":588
 *                             self.logger().info(f"The order {tracked_order.client_order_id} has been cancelled "
 *                                                f"according to Order Delta WebSocket API.")
 *                             tracked_order.last_state = "cancelled"             # <<<<<<<<<<<<<<
 *                             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                                  OrderCancelledEvent(self._current_timestamp,
 */
              if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_last_state, __pyx_n_u_cancelled) < 0) __PYX_ERR(0, 588, __pyx_L7_error)

              /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":589
 *                                                f"according to Order Delta WebSocket API.")
 *                             tracked_order.last_state = "cancelled"
 *                             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                                  OrderCancelledEvent(self._current_timestamp,
 *                                                                      tracked_order.client_order_id))
 */
              __pyx_t_21 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 589, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_21);
              __pyx_t_17 = __Pyx_PyInt_As_int64_t(__pyx_t_21); if (unlikely((__pyx_t_17 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 589, __pyx_L7_error)
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;

              /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":590
 *                             tracked_order.last_state = "cancelled"
 *                             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                                  OrderCancelledEvent(self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                                                      tracked_order.client_order_id))
 *                             self.c_stop_tracking_order(tracked_order.client_order_id)
 */
              __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 590, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_18);
              __pyx_t_19 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 590, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_19);

              /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":591
 *                             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                                  OrderCancelledEvent(self._current_timestamp,
 *                                                                      tracked_order.client_order_id))             # <<<<<<<<<<<<<<
 *                             self.c_stop_tracking_order(tracked_order.client_order_id)
 *                 else:
 */
              __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 591, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_8);
              __pyx_t_24 = NULL;
              __pyx_t_4 = 0;
              if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_18))) {
                __pyx_t_24 = PyMethod_GET_SELF(__pyx_t_18);
                if (likely(__pyx_t_24)) {
                  PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_18);
                  __Pyx_INCREF(__pyx_t_24);
                  __Pyx_INCREF(function);
                  __Pyx_DECREF_SET(__pyx_t_18, function);
                  __pyx_t_4 = 1;
                }
              }
              {
                PyObject *__pyx_callargs[3] = {__pyx_t_24, __pyx_t_19, __pyx_t_8};
                __pyx_t_21 = __Pyx_PyObject_FastCall(__pyx_t_18, __pyx_callargs+1-__pyx_t_4, 2+__pyx_t_4);
                __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
                __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 590, __pyx_L7_error)
                __Pyx_GOTREF(__pyx_t_21);
                __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
              }

              /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":589
 *                                                f"according to Order Delta WebSocket API.")
 *                             tracked_order.last_state = "cancelled"
 *                             self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                                  OrderCancelledEvent(self._current_timestamp,
 *                                                                      tracked_order.client_order_id))
 */
              __pyx_t_18 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_17, __pyx_t_21); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 589, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_18);
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;

              /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":592
 *                                                  OrderCancelledEvent(self._current_timestamp,
 *                                                                      tracked_order.client_order_id))
 *                             self.c_stop_tracking_order(tracked_order.client_order_id)             # <<<<<<<<<<<<<<
 *                 else:
 *                     # Ignores all other user stream message types
 */
              __pyx_t_18 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 592, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_18);
              if (!(likely(PyUnicode_CheckExact(__pyx_t_18))||((__pyx_t_18) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_18))) __PYX_ERR(0, 592, __pyx_L7_error)
              __pyx_t_21 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_stop_tracking_order(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), ((PyObject*)__pyx_t_18)); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 592, __pyx_L7_error)
              __Pyx_GOTREF(__pyx_t_21);
              __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
              __Pyx_DECREF(__pyx_t_21); __pyx_t_21 = 0;
            }

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":549
 *                                              ))
 * 
 *                     if order_status == "CLOSED":             # <<<<<<<<<<<<<<
 *                         if order["quantity"] == order["fillQuantity"]:
 *                             tracked_order.last_state = "done"
 */
          }

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":501
 *                     self._account_available_balances[asset_name] = available_balance
 *                     self._account_balances[asset_name] = total_balance
 *                 elif event_type == "order":  # Updates track order status             # <<<<<<<<<<<<<<
 *                     order = content["delta"]
 *                     order_status = order["status"]
 */
          goto __pyx_L15;
        }

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":595
 *                 else:
 *                     # Ignores all other user stream message types
 *                     continue             # <<<<<<<<<<<<<<
 * 
 *             except asyncio.CancelledError:
 */
        /*else*/ {
          goto __pyx_L13_try_continue;
        }
        __pyx_L15:;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":490
 *     async def _user_stream_event_listener(self):
 *         async for stream_message in self._iter_user_stream_queue():
 *             try:             # <<<<<<<<<<<<<<
 *                 content = stream_message.get("content")
 *                 event_type = stream_message.get("event_type")
 */
      }
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L14_try_end;
      __pyx_L7_error:;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
      __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
      __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
      __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
      __Pyx_XDECREF(__pyx_t_22); __pyx_t_22 = 0;
      __Pyx_XDECREF(__pyx_t_23); __pyx_t_23 = 0;
      __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":597
 *                     continue
 * 
 *             except asyncio.CancelledError:             # <<<<<<<<<<<<<<
 *                 raise
 *             except Exception:
 */
      __Pyx_ErrFetch(&__pyx_t_21, &__pyx_t_18, &__pyx_t_8);
      __Pyx_GetModuleGlobalName(__pyx_t_19, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 597, __pyx_L9_except_error)
      __Pyx_GOTREF(__pyx_t_19);
      __pyx_t_24 = __Pyx_PyObject_GetAttrStr(__pyx_t_19, __pyx_n_s_CancelledError); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 597, __pyx_L9_except_error)
      __Pyx_GOTREF(__pyx_t_24);
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __pyx_t_4 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_21, __pyx_t_24);
      __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
      __Pyx_ErrRestore(__pyx_t_21, __pyx_t_18, __pyx_t_8);
      __pyx_t_21 = 0; __pyx_t_18 = 0; __pyx_t_8 = 0;
      if (__pyx_t_4) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._user_stream_event_listener", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_18, &__pyx_t_21) < 0) __PYX_ERR(0, 597, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_18);
        __Pyx_GOTREF(__pyx_t_21);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":598
 * 
 *             except asyncio.CancelledError:
 *                 raise             # <<<<<<<<<<<<<<
 *             except Exception:
 *                 self.logger().error("Unexpected error in user stream listener loop.", exc_info=True)
 */
        __Pyx_GIVEREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_18);
        __Pyx_XGIVEREF(__pyx_t_21);
        __Pyx_ErrRestoreWithState(__pyx_t_8, __pyx_t_18, __pyx_t_21);
        __pyx_t_8 = 0; __pyx_t_18 = 0; __pyx_t_21 = 0; 
        __PYX_ERR(0, 598, __pyx_L9_except_error)
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":599
 *             except asyncio.CancelledError:
 *                 raise
 *             except Exception:             # <<<<<<<<<<<<<<
 *                 self.logger().error("Unexpected error in user stream listener loop.", exc_info=True)
 *                 await asyncio.sleep(5.0)
 */
      __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_4) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._user_stream_event_listener", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_21, &__pyx_t_18, &__pyx_t_8) < 0) __PYX_ERR(0, 599, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_21);
        __Pyx_GOTREF(__pyx_t_18);
        __Pyx_GOTREF(__pyx_t_8);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":600
 *                 raise
 *             except Exception:
 *                 self.logger().error("Unexpected error in user stream listener loop.", exc_info=True)             # <<<<<<<<<<<<<<
 *                 await asyncio.sleep(5.0)
 * 
 */
        __pyx_t_19 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 600, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_19);
        __pyx_t_15 = NULL;
        __pyx_t_4 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_19))) {
          __pyx_t_15 = PyMethod_GET_SELF(__pyx_t_19);
          if (likely(__pyx_t_15)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
            __Pyx_INCREF(__pyx_t_15);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_19, function);
            __pyx_t_4 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_15, };
          __pyx_t_24 = __Pyx_PyObject_FastCall(__pyx_t_19, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 600, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_24);
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        }
        __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_24, __pyx_n_s_error); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 600, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
        __pyx_t_24 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 600, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_24);
        if (PyDict_SetItem(__pyx_t_24, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 600, __pyx_L9_except_error)
        __pyx_t_15 = __Pyx_PyObject_Call(__pyx_t_19, __pyx_tuple__16, __pyx_t_24); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 600, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":601
 *             except Exception:
 *                 self.logger().error("Unexpected error in user stream listener loop.", exc_info=True)
 *                 await asyncio.sleep(5.0)             # <<<<<<<<<<<<<<
 * 
 *     async def _status_polling_loop(self):
 */
        __Pyx_GetModuleGlobalName(__pyx_t_24, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_24)) __PYX_ERR(0, 601, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_24);
        __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_24, __pyx_n_s_sleep); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 601, __pyx_L9_except_error)
        __Pyx_GOTREF(__pyx_t_19);
        __Pyx_DECREF(__pyx_t_24); __pyx_t_24 = 0;
        __pyx_t_24 = NULL;
        __pyx_t_4 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_19))) {
          __pyx_t_24 = PyMethod_GET_SELF(__pyx_t_19);
          if (likely(__pyx_t_24)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_19);
            __Pyx_INCREF(__pyx_t_24);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_19, function);
            __pyx_t_4 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_24, __pyx_float_5_0};
          __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_19, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
          __Pyx_XDECREF(__pyx_t_24); __pyx_t_24 = 0;
          if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 601, __pyx_L9_except_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
        }
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_15);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_5);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_5;
          __Pyx_XGIVEREF(__pyx_t_6);
          __pyx_cur_scope->__pyx_t_3 = __pyx_t_6;
          __Pyx_XGIVEREF(__pyx_t_7);
          __pyx_cur_scope->__pyx_t_4 = __pyx_t_7;
          __Pyx_XGIVEREF(__pyx_t_8);
          __pyx_cur_scope->__pyx_t_5 = __pyx_t_8;
          __Pyx_XGIVEREF(__pyx_t_18);
          __pyx_cur_scope->__pyx_t_8 = __pyx_t_18;
          __Pyx_XGIVEREF(__pyx_t_21);
          __pyx_cur_scope->__pyx_t_9 = __pyx_t_21;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_SwapException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 3;
          return __pyx_r;
          __pyx_L33_resume_from_await:;
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_5 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_5);
          __pyx_t_6 = __pyx_cur_scope->__pyx_t_3;
          __pyx_cur_scope->__pyx_t_3 = 0;
          __Pyx_XGOTREF(__pyx_t_6);
          __pyx_t_7 = __pyx_cur_scope->__pyx_t_4;
          __pyx_cur_scope->__pyx_t_4 = 0;
          __Pyx_XGOTREF(__pyx_t_7);
          __pyx_t_8 = __pyx_cur_scope->__pyx_t_5;
          __pyx_cur_scope->__pyx_t_5 = 0;
          __Pyx_XGOTREF(__pyx_t_8);
          __pyx_t_18 = __pyx_cur_scope->__pyx_t_8;
          __pyx_cur_scope->__pyx_t_8 = 0;
          __Pyx_XGOTREF(__pyx_t_18);
          __pyx_t_21 = __pyx_cur_scope->__pyx_t_9;
          __pyx_cur_scope->__pyx_t_9 = 0;
          __Pyx_XGOTREF(__pyx_t_21);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 601, __pyx_L9_except_error)
        } else {
          PyObject* exc_type = __Pyx_PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
            else __PYX_ERR(0, 601, __pyx_L9_except_error)
          }
        }
        __Pyx_XDECREF(__pyx_t_21); __pyx_t_21 = 0;
        __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L8_exception_handled;
      }
      goto __pyx_L9_except_error;
      __pyx_L9_except_error:;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":490
 *     async def _user_stream_event_listener(self):
 *         async for stream_message in self._iter_user_stream_queue():
 *             try:             # <<<<<<<<<<<<<<
 *                 content = stream_message.get("content")
 *                 event_type = stream_message.get("event_type")
 */
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L1_error;
      __pyx_L13_try_continue:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      goto __pyx_L4_continue;
      __pyx_L8_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
      __pyx_L14_try_end:;
    }

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":489
 * 
 *     async def _user_stream_event_listener(self):
 *         async for stream_message in self._iter_user_stream_queue():             # <<<<<<<<<<<<<<
 *             try:
 *                 content = stream_message.get("content")
 */
    __pyx_L4_continue:;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":488
 *                 await asyncio.sleep(1.0)
 * 
 *     async def _user_stream_event_listener(self):             # <<<<<<<<<<<<<<
 *         async for stream_message in self._iter_user_stream_queue():
 *             try:
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_XDECREF(__pyx_t_20);
  __Pyx_XDECREF(__pyx_t_21);
  __Pyx_XDECREF(__pyx_t_22);
  __Pyx_XDECREF(__pyx_t_23);
  __Pyx_XDECREF(__pyx_t_24);
  __Pyx_AddTraceback("_user_stream_event_listener", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_33generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":603
 *                 await asyncio.sleep(5.0)
 * 
 *     async def _status_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_status_polling_loop(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_status_polling_loop = {"_status_polling_loop", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_status_polling_loop, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_status_polling_loop(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_status_polling_loop (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_status_polling_loop", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_status_polling_loop", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_31_status_polling_loop(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_31_status_polling_loop(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_status_polling_loop", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 603, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_33generator7, __pyx_codeobj__17, (PyObject *) __pyx_cur_scope, __pyx_n_s_status_polling_loop, __pyx_n_s_BittrexExchange__status_polling, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 603, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._status_polling_loop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_33generator7(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  double __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_status_polling_loop", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L14_resume_from_await;
    case 2: goto __pyx_L15_resume_from_await;
    case 3: goto __pyx_L20_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 603, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":604
 * 
 *     async def _status_polling_loop(self):
 *         while True:             # <<<<<<<<<<<<<<
 *             try:
 *                 self._poll_notifier = asyncio.Event()
 */
  while (1) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":605
 *     async def _status_polling_loop(self):
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 self._poll_notifier = asyncio.Event()
 *                 await self._poll_notifier.wait()
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":606
 *         while True:
 *             try:
 *                 self._poll_notifier = asyncio.Event()             # <<<<<<<<<<<<<<
 *                 await self._poll_notifier.wait()
 * 
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 606, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Event); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 606, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_5, };
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 606, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __Pyx_GIVEREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_poll_notifier);
        __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_poll_notifier);
        __pyx_cur_scope->__pyx_v_self->_poll_notifier = __pyx_t_4;
        __pyx_t_4 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":607
 *             try:
 *                 self._poll_notifier = asyncio.Event()
 *                 await self._poll_notifier.wait()             # <<<<<<<<<<<<<<
 * 
 *                 await safe_gather(
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_poll_notifier, __pyx_n_s_wait); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 607, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_5, };
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 607, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 1;
          return __pyx_r;
          __pyx_L14_resume_from_await:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 607, __pyx_L6_error)
        } else {
          PyObject* exc_type = __Pyx_PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
            else __PYX_ERR(0, 607, __pyx_L6_error)
          }
        }

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":609
 *                 await self._poll_notifier.wait()
 * 
 *                 await safe_gather(             # <<<<<<<<<<<<<<
 *                     self._update_balances(),
 *                     self._update_order_status(),
 */
        __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_n_s_safe_gather); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 609, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":610
 * 
 *                 await safe_gather(
 *                     self._update_balances(),             # <<<<<<<<<<<<<<
 *                     self._update_order_status(),
 *                 )
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_update_balances); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 610, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_9, };
          __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 610, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":611
 *                 await safe_gather(
 *                     self._update_balances(),
 *                     self._update_order_status(),             # <<<<<<<<<<<<<<
 *                 )
 *                 self._last_poll_timestamp = self._current_timestamp
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_update_order_status); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 611, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_9))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_9);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_9);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_9, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_10, };
          __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 611, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __pyx_t_9 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_9, __pyx_t_5, __pyx_t_8};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 609, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 2;
          return __pyx_r;
          __pyx_L15_resume_from_await:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 609, __pyx_L6_error)
        } else {
          PyObject* exc_type = __Pyx_PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
            else __PYX_ERR(0, 609, __pyx_L6_error)
          }
        }

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":613
 *                     self._update_order_status(),
 *                 )
 *                 self._last_poll_timestamp = self._current_timestamp             # <<<<<<<<<<<<<<
 *             except asyncio.CancelledError:
 *                 raise
 */
        __pyx_t_11 = __pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp;
        __pyx_cur_scope->__pyx_v_self->_last_poll_timestamp = __pyx_t_11;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":605
 *     async def _status_polling_loop(self):
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 self._poll_notifier = asyncio.Event()
 *                 await self._poll_notifier.wait()
 */
      }
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L13_try_end;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":614
 *                 )
 *                 self._last_poll_timestamp = self._current_timestamp
 *             except asyncio.CancelledError:             # <<<<<<<<<<<<<<
 *                 raise
 *             except Exception:
 */
      __Pyx_ErrFetch(&__pyx_t_4, &__pyx_t_6, &__pyx_t_8);
      __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 614, __pyx_L8_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_CancelledError); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 614, __pyx_L8_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_4, __pyx_t_9);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_ErrRestore(__pyx_t_4, __pyx_t_6, __pyx_t_8);
      __pyx_t_4 = 0; __pyx_t_6 = 0; __pyx_t_8 = 0;
      if (__pyx_t_7) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._status_polling_loop", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_6, &__pyx_t_4) < 0) __PYX_ERR(0, 614, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_4);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":615
 *                 self._last_poll_timestamp = self._current_timestamp
 *             except asyncio.CancelledError:
 *                 raise             # <<<<<<<<<<<<<<
 *             except Exception:
 *                 self.logger().network("Unexpected error while polling updates.",
 */
        __Pyx_GIVEREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_4);
        __Pyx_ErrRestoreWithState(__pyx_t_8, __pyx_t_6, __pyx_t_4);
        __pyx_t_8 = 0; __pyx_t_6 = 0; __pyx_t_4 = 0; 
        __PYX_ERR(0, 615, __pyx_L8_except_error)
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":616
 *             except asyncio.CancelledError:
 *                 raise
 *             except Exception:             # <<<<<<<<<<<<<<
 *                 self.logger().network("Unexpected error while polling updates.",
 *                                       exc_info=True,
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_7) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._status_polling_loop", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_8) < 0) __PYX_ERR(0, 616, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_8);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":617
 *                 raise
 *             except Exception:
 *                 self.logger().network("Unexpected error while polling updates.",             # <<<<<<<<<<<<<<
 *                                       exc_info=True,
 *                                       app_warning_msg=f"Could not fetch updates from Bittrex. "
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 617, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_10 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_10, };
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 617, __pyx_L8_except_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_network); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 617, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":618
 *             except Exception:
 *                 self.logger().network("Unexpected error while polling updates.",
 *                                       exc_info=True,             # <<<<<<<<<<<<<<
 *                                       app_warning_msg=f"Could not fetch updates from Bittrex. "
 *                                                       f"Check API key and network connection.")
 */
        __pyx_t_9 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 618, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 618, __pyx_L8_except_error)
        if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_app_warning_msg, __pyx_kp_u_Could_not_fetch_updates_from_Bit) < 0) __PYX_ERR(0, 618, __pyx_L8_except_error)

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":617
 *                 raise
 *             except Exception:
 *                 self.logger().network("Unexpected error while polling updates.",             # <<<<<<<<<<<<<<
 *                                       exc_info=True,
 *                                       app_warning_msg=f"Could not fetch updates from Bittrex. "
 */
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__18, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 617, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":621
 *                                       app_warning_msg=f"Could not fetch updates from Bittrex. "
 *                                                       f"Check API key and network connection.")
 *                 await asyncio.sleep(5.0)             # <<<<<<<<<<<<<<
 * 
 *     async def _trading_rules_polling_loop(self):
 */
        __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 621, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_sleep); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 621, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_float_5_0};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 621, __pyx_L8_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_10);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
          __Pyx_XGIVEREF(__pyx_t_4);
          __pyx_cur_scope->__pyx_t_3 = __pyx_t_4;
          __Pyx_XGIVEREF(__pyx_t_6);
          __pyx_cur_scope->__pyx_t_4 = __pyx_t_6;
          __Pyx_XGIVEREF(__pyx_t_8);
          __pyx_cur_scope->__pyx_t_5 = __pyx_t_8;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_SwapException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 3;
          return __pyx_r;
          __pyx_L20_resume_from_await:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          __pyx_t_4 = __pyx_cur_scope->__pyx_t_3;
          __pyx_cur_scope->__pyx_t_3 = 0;
          __Pyx_XGOTREF(__pyx_t_4);
          __pyx_t_6 = __pyx_cur_scope->__pyx_t_4;
          __pyx_cur_scope->__pyx_t_4 = 0;
          __Pyx_XGOTREF(__pyx_t_6);
          __pyx_t_8 = __pyx_cur_scope->__pyx_t_5;
          __pyx_cur_scope->__pyx_t_5 = 0;
          __Pyx_XGOTREF(__pyx_t_8);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 621, __pyx_L8_except_error)
        } else {
          PyObject* exc_type = __Pyx_PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
            else __PYX_ERR(0, 621, __pyx_L8_except_error)
          }
        }
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L7_exception_handled;
      }
      goto __pyx_L8_except_error;
      __pyx_L8_except_error:;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":605
 *     async def _status_polling_loop(self):
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 self._poll_notifier = asyncio.Event()
 *                 await self._poll_notifier.wait()
 */
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L7_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      __pyx_L13_try_end:;
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":603
 *                 await asyncio.sleep(5.0)
 * 
 *     async def _status_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("_status_polling_loop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_36generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":623
 *                 await asyncio.sleep(5.0)
 * 
 *     async def _trading_rules_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_35_trading_rules_polling_loop(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_35_trading_rules_polling_loop = {"_trading_rules_polling_loop", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_35_trading_rules_polling_loop, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_35_trading_rules_polling_loop(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_trading_rules_polling_loop (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_trading_rules_polling_loop", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_trading_rules_polling_loop", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_34_trading_rules_polling_loop(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_34_trading_rules_polling_loop(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_trading_rules_polling_loop", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 623, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_36generator8, __pyx_codeobj__19, (PyObject *) __pyx_cur_scope, __pyx_n_s_trading_rules_polling_loop, __pyx_n_s_BittrexExchange__trading_rules_p, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 623, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._trading_rules_polling_loop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_36generator8(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_trading_rules_polling_loop", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L14_resume_from_await;
    case 2: goto __pyx_L15_resume_from_await;
    case 3: goto __pyx_L20_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 623, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":624
 * 
 *     async def _trading_rules_polling_loop(self):
 *         while True:             # <<<<<<<<<<<<<<
 *             try:
 *                 await self._update_trading_rules()
 */
  while (1) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":625
 *     async def _trading_rules_polling_loop(self):
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 await self._update_trading_rules()
 *                 await asyncio.sleep(60 * 5)
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      /*try:*/ {

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":626
 *         while True:
 *             try:
 *                 await self._update_trading_rules()             # <<<<<<<<<<<<<<
 *                 await asyncio.sleep(60 * 5)
 *             except asyncio.CancelledError:
 */
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_update_trading_rules); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 626, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
          __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
          if (likely(__pyx_t_6)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
            __Pyx_INCREF(__pyx_t_6);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_5, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_6, };
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 626, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        }
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 1;
          return __pyx_r;
          __pyx_L14_resume_from_await:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 626, __pyx_L6_error)
        } else {
          PyObject* exc_type = __Pyx_PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
            else __PYX_ERR(0, 626, __pyx_L6_error)
          }
        }

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":627
 *             try:
 *                 await self._update_trading_rules()
 *                 await asyncio.sleep(60 * 5)             # <<<<<<<<<<<<<<
 *             except asyncio.CancelledError:
 *                 raise
 */
        __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 627, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_sleep); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 627, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_int_300};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 627, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_4);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 2;
          return __pyx_r;
          __pyx_L15_resume_from_await:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 627, __pyx_L6_error)
        } else {
          PyObject* exc_type = __Pyx_PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
            else __PYX_ERR(0, 627, __pyx_L6_error)
          }
        }

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":625
 *     async def _trading_rules_polling_loop(self):
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 await self._update_trading_rules()
 *                 await asyncio.sleep(60 * 5)
 */
      }
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L13_try_end;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":628
 *                 await self._update_trading_rules()
 *                 await asyncio.sleep(60 * 5)
 *             except asyncio.CancelledError:             # <<<<<<<<<<<<<<
 *                 raise
 *             except Exception:
 */
      __Pyx_ErrFetch(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5);
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 628, __pyx_L8_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_CancelledError); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 628, __pyx_L8_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_7 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_4, __pyx_t_9);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_ErrRestore(__pyx_t_4, __pyx_t_6, __pyx_t_5);
      __pyx_t_4 = 0; __pyx_t_6 = 0; __pyx_t_5 = 0;
      if (__pyx_t_7) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._trading_rules_polling_loop", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_4) < 0) __PYX_ERR(0, 628, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_4);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":629
 *                 await asyncio.sleep(60 * 5)
 *             except asyncio.CancelledError:
 *                 raise             # <<<<<<<<<<<<<<
 *             except Exception:
 *                 self.logger().network("Unexpected error while fetching trading rule updates.",
 */
        __Pyx_GIVEREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_6);
        __Pyx_XGIVEREF(__pyx_t_4);
        __Pyx_ErrRestoreWithState(__pyx_t_5, __pyx_t_6, __pyx_t_4);
        __pyx_t_5 = 0; __pyx_t_6 = 0; __pyx_t_4 = 0; 
        __PYX_ERR(0, 629, __pyx_L8_except_error)
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":630
 *             except asyncio.CancelledError:
 *                 raise
 *             except Exception:             # <<<<<<<<<<<<<<
 *                 self.logger().network("Unexpected error while fetching trading rule updates.",
 *                                       exc_info=True,
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
      if (__pyx_t_7) {
        __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._trading_rules_polling_loop", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_6, &__pyx_t_5) < 0) __PYX_ERR(0, 630, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_5);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":631
 *                 raise
 *             except Exception:
 *                 self.logger().network("Unexpected error while fetching trading rule updates.",             # <<<<<<<<<<<<<<
 *                                       exc_info=True,
 *                                       app_warning_msg=f"Could not fetch updates from Bitrrex. "
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 631, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_10, };
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_7, 0+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 631, __pyx_L8_except_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_network); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 631, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":632
 *             except Exception:
 *                 self.logger().network("Unexpected error while fetching trading rule updates.",
 *                                       exc_info=True,             # <<<<<<<<<<<<<<
 *                                       app_warning_msg=f"Could not fetch updates from Bitrrex. "
 *                                                       f"Check API key and network connection.")
 */
        __pyx_t_9 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 632, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 632, __pyx_L8_except_error)
        if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_app_warning_msg, __pyx_kp_u_Could_not_fetch_updates_from_Bit_2) < 0) __PYX_ERR(0, 632, __pyx_L8_except_error)

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":631
 *                 raise
 *             except Exception:
 *                 self.logger().network("Unexpected error while fetching trading rule updates.",             # <<<<<<<<<<<<<<
 *                                       exc_info=True,
 *                                       app_warning_msg=f"Could not fetch updates from Bitrrex. "
 */
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__20, __pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 631, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":635
 *                                       app_warning_msg=f"Could not fetch updates from Bitrrex. "
 *                                                       f"Check API key and network connection.")
 *                 await asyncio.sleep(0.5)             # <<<<<<<<<<<<<<
 * 
 *     cdef OrderBook c_get_order_book(self, str trading_pair):
 */
        __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 635, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_sleep); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 635, __pyx_L8_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_9 = NULL;
        __pyx_t_7 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_7 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_float_0_5};
          __pyx_t_10 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_7, 1+__pyx_t_7);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 635, __pyx_L8_except_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_10);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_1);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_3);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
          __Pyx_XGIVEREF(__pyx_t_4);
          __pyx_cur_scope->__pyx_t_3 = __pyx_t_4;
          __Pyx_XGIVEREF(__pyx_t_5);
          __pyx_cur_scope->__pyx_t_4 = __pyx_t_5;
          __Pyx_XGIVEREF(__pyx_t_6);
          __pyx_cur_scope->__pyx_t_5 = __pyx_t_6;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_SwapException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 3;
          return __pyx_r;
          __pyx_L20_resume_from_await:;
          __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_1);
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_3);
          __pyx_t_4 = __pyx_cur_scope->__pyx_t_3;
          __pyx_cur_scope->__pyx_t_3 = 0;
          __Pyx_XGOTREF(__pyx_t_4);
          __pyx_t_5 = __pyx_cur_scope->__pyx_t_4;
          __pyx_cur_scope->__pyx_t_4 = 0;
          __Pyx_XGOTREF(__pyx_t_5);
          __pyx_t_6 = __pyx_cur_scope->__pyx_t_5;
          __pyx_cur_scope->__pyx_t_5 = 0;
          __Pyx_XGOTREF(__pyx_t_6);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 635, __pyx_L8_except_error)
        } else {
          PyObject* exc_type = __Pyx_PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
            else __PYX_ERR(0, 635, __pyx_L8_except_error)
          }
        }
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        goto __pyx_L7_exception_handled;
      }
      goto __pyx_L8_except_error;
      __pyx_L8_except_error:;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":625
 *     async def _trading_rules_polling_loop(self):
 *         while True:
 *             try:             # <<<<<<<<<<<<<<
 *                 await self._update_trading_rules()
 *                 await asyncio.sleep(60 * 5)
 */
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      goto __pyx_L1_error;
      __pyx_L7_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
      __pyx_L13_try_end:;
    }
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":623
 *                 await asyncio.sleep(5.0)
 * 
 *     async def _trading_rules_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("_trading_rules_polling_loop", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":637
 *                 await asyncio.sleep(0.5)
 * 
 *     cdef OrderBook c_get_order_book(self, str trading_pair):             # <<<<<<<<<<<<<<
 *         cdef:
 *             dict order_books = self._order_book_tracker.order_books
 */

static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_get_order_book(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair) {
  PyObject *__pyx_v_order_books = 0;
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_UCS4 __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_order_book", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":639
 *     cdef OrderBook c_get_order_book(self, str trading_pair):
 *         cdef:
 *             dict order_books = self._order_book_tracker.order_books             # <<<<<<<<<<<<<<
 * 
 *         if trading_pair not in order_books:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_order_books); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 639, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(PyDict_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("dict", __pyx_t_1))) __PYX_ERR(0, 639, __pyx_L1_error)
  __pyx_v_order_books = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":641
 *             dict order_books = self._order_book_tracker.order_books
 * 
 *         if trading_pair not in order_books:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")
 *         return order_books[trading_pair]
 */
  if (unlikely(__pyx_v_order_books == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 641, __pyx_L1_error)
  }
  __pyx_t_2 = (__Pyx_PyDict_ContainsTF(__pyx_v_trading_pair, __pyx_v_order_books, Py_NE)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 641, __pyx_L1_error)
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (unlikely(__pyx_t_3)) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":642
 * 
 *         if trading_pair not in order_books:
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")             # <<<<<<<<<<<<<<
 *         return order_books[trading_pair]
 * 
 */
    __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 642, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = 0;
    __pyx_t_5 = 127;
    __Pyx_INCREF(__pyx_kp_u_No_order_book_exists_for);
    __pyx_t_4 += 26;
    __Pyx_GIVEREF(__pyx_kp_u_No_order_book_exists_for);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_No_order_book_exists_for);
    __pyx_t_6 = __Pyx_PyUnicode_Unicode(__pyx_v_trading_pair); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 642, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) > __pyx_t_5) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_6) : __pyx_t_5;
    __pyx_t_4 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_6);
    __pyx_t_6 = 0;
    __Pyx_INCREF(__pyx_kp_u__21);
    __pyx_t_4 += 2;
    __Pyx_GIVEREF(__pyx_kp_u__21);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__21);
    __pyx_t_6 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 642, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 642, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 642, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":641
 *             dict order_books = self._order_book_tracker.order_books
 * 
 *         if trading_pair not in order_books:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")
 *         return order_books[trading_pair]
 */
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":643
 *         if trading_pair not in order_books:
 *             raise ValueError(f"No order book exists for '{trading_pair}'.")
 *         return order_books[trading_pair]             # <<<<<<<<<<<<<<
 * 
 *     def start_tracking_order(self,
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  if (unlikely(__pyx_v_order_books == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 643, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_order_books, __pyx_v_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 643, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook))))) __PYX_ERR(0, 643, __pyx_L1_error)
  __pyx_r = ((struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":637
 *                 await asyncio.sleep(0.5)
 * 
 *     cdef OrderBook c_get_order_book(self, str trading_pair):             # <<<<<<<<<<<<<<
 *         cdef:
 *             dict order_books = self._order_book_tracker.order_books
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.c_get_order_book", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_books);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":645
 *         return order_books[trading_pair]
 * 
 *     def start_tracking_order(self,             # <<<<<<<<<<<<<<
 *                              order_id: str,
 *                              exchange_order_id: str,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_38start_tracking_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
PyDoc_STRVAR(__pyx_doc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_37start_tracking_order, "Helper method for testing.");
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_38start_tracking_order = {"start_tracking_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_38start_tracking_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_37start_tracking_order};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_38start_tracking_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_exchange_order_id = 0;
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_trade_type = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_v_amount = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start_tracking_order (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_id,&__pyx_n_s_exchange_order_id,&__pyx_n_s_trading_pair,&__pyx_n_s_order_type,&__pyx_n_s_trade_type,&__pyx_n_s_price,&__pyx_n_s_amount,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_id,&__pyx_n_s_exchange_order_id,&__pyx_n_s_trading_pair,&__pyx_n_s_order_type,&__pyx_n_s_trade_type,&__pyx_n_s_price,&__pyx_n_s_amount,0};
    #endif
    PyObject* values[7] = {0,0,0,0,0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  7: values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
        CYTHON_FALLTHROUGH;
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_id)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_exchange_order_id)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("start_tracking_order", 1, 7, 7, 1); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("start_tracking_order", 1, 7, 7, 2); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("start_tracking_order", 1, 7, 7, 3); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trade_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("start_tracking_order", 1, 7, 7, 4); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_price)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("start_tracking_order", 1, 7, 7, 5); __PYX_ERR(0, 645, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  6:
        if (likely((values[6] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_amount)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 645, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("start_tracking_order", 1, 7, 7, 6); __PYX_ERR(0, 645, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "start_tracking_order") < 0)) __PYX_ERR(0, 645, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 7)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
      values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
      values[6] = __Pyx_Arg_FASTCALL(__pyx_args, 6);
    }
    __pyx_v_order_id = ((PyObject*)values[0]);
    __pyx_v_exchange_order_id = ((PyObject*)values[1]);
    __pyx_v_trading_pair = ((PyObject*)values[2]);
    __pyx_v_order_type = values[3];
    __pyx_v_trade_type = values[4];
    __pyx_v_price = values[5];
    __pyx_v_amount = values[6];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("start_tracking_order", 1, 7, 7, __pyx_nargs); __PYX_ERR(0, 645, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.start_tracking_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order_id), (&PyUnicode_Type), 1, "order_id", 1))) __PYX_ERR(0, 646, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_exchange_order_id), (&PyUnicode_Type), 1, "exchange_order_id", 1))) __PYX_ERR(0, 647, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 648, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_37start_tracking_order(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), __pyx_v_order_id, __pyx_v_exchange_order_id, __pyx_v_trading_pair, __pyx_v_order_type, __pyx_v_trade_type, __pyx_v_price, __pyx_v_amount);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_37start_tracking_order(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_exchange_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_order_type, PyObject *__pyx_v_trade_type, PyObject *__pyx_v_price, PyObject *__pyx_v_amount) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("start_tracking_order", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":654
 *                              amount: Decimal):
 *         """Helper method for testing."""
 *         self.c_start_tracking_order(order_id, exchange_order_id, trading_pair, order_type, trade_type, price, amount)             # <<<<<<<<<<<<<<
 * 
 *     cdef c_start_tracking_order(self,
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_start_tracking_order(__pyx_v_self, __pyx_v_order_id, __pyx_v_exchange_order_id, __pyx_v_trading_pair, __pyx_v_order_type, __pyx_v_trade_type, __pyx_v_price, __pyx_v_amount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 654, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":645
 *         return order_books[trading_pair]
 * 
 *     def start_tracking_order(self,             # <<<<<<<<<<<<<<
 *                              order_id: str,
 *                              exchange_order_id: str,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.start_tracking_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":656
 *         self.c_start_tracking_order(order_id, exchange_order_id, trading_pair, order_type, trade_type, price, amount)
 * 
 *     cdef c_start_tracking_order(self,             # <<<<<<<<<<<<<<
 *                                 str order_id,
 *                                 str exchange_order_id,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_start_tracking_order(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_exchange_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_order_type, PyObject *__pyx_v_trade_type, PyObject *__pyx_v_price, PyObject *__pyx_v_amount) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_start_tracking_order", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":664
 *                                 object price,
 *                                 object amount):
 *         self._in_flight_orders[order_id] = BittrexInFlightOrder(             # <<<<<<<<<<<<<<
 *             order_id,
 *             exchange_order_id,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_BittrexInFlightOrder); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":671
 *             trade_type,
 *             price,
 *             amount             # <<<<<<<<<<<<<<
 *         )
 * 
 */
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[8] = {__pyx_t_3, __pyx_v_order_id, __pyx_v_exchange_order_id, __pyx_v_trading_pair, __pyx_v_order_type, __pyx_v_trade_type, __pyx_v_price, __pyx_v_amount};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 7+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 664, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":664
 *                                 object price,
 *                                 object amount):
 *         self._in_flight_orders[order_id] = BittrexInFlightOrder(             # <<<<<<<<<<<<<<
 *             order_id,
 *             exchange_order_id,
 */
  if (unlikely(__pyx_v_self->_in_flight_orders == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 664, __pyx_L1_error)
  }
  if (unlikely((PyDict_SetItem(__pyx_v_self->_in_flight_orders, __pyx_v_order_id, __pyx_t_1) < 0))) __PYX_ERR(0, 664, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":656
 *         self.c_start_tracking_order(order_id, exchange_order_id, trading_pair, order_type, trade_type, price, amount)
 * 
 *     cdef c_start_tracking_order(self,             # <<<<<<<<<<<<<<
 *                                 str order_id,
 *                                 str exchange_order_id,
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.c_start_tracking_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":674
 *         )
 * 
 *     cdef c_stop_tracking_order(self, str order_id):             # <<<<<<<<<<<<<<
 *         if order_id in self._in_flight_orders:
 *             del self._in_flight_orders[order_id]
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_stop_tracking_order(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_order_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_stop_tracking_order", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":675
 * 
 *     cdef c_stop_tracking_order(self, str order_id):
 *         if order_id in self._in_flight_orders:             # <<<<<<<<<<<<<<
 *             del self._in_flight_orders[order_id]
 * 
 */
  if (unlikely(__pyx_v_self->_in_flight_orders == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(0, 675, __pyx_L1_error)
  }
  __pyx_t_1 = (__Pyx_PyDict_ContainsTF(__pyx_v_order_id, __pyx_v_self->_in_flight_orders, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 675, __pyx_L1_error)
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":676
 *     cdef c_stop_tracking_order(self, str order_id):
 *         if order_id in self._in_flight_orders:
 *             del self._in_flight_orders[order_id]             # <<<<<<<<<<<<<<
 * 
 *     cdef c_did_timeout_tx(self, str tracking_id):
 */
    if (unlikely(__pyx_v_self->_in_flight_orders == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 676, __pyx_L1_error)
    }
    if (unlikely((PyDict_DelItem(__pyx_v_self->_in_flight_orders, __pyx_v_order_id) < 0))) __PYX_ERR(0, 676, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":675
 * 
 *     cdef c_stop_tracking_order(self, str order_id):
 *         if order_id in self._in_flight_orders:             # <<<<<<<<<<<<<<
 *             del self._in_flight_orders[order_id]
 * 
 */
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":674
 *         )
 * 
 *     cdef c_stop_tracking_order(self, str order_id):             # <<<<<<<<<<<<<<
 *         if order_id in self._in_flight_orders:
 *             del self._in_flight_orders[order_id]
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.c_stop_tracking_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":678
 *             del self._in_flight_orders[order_id]
 * 
 *     cdef c_did_timeout_tx(self, str tracking_id):             # <<<<<<<<<<<<<<
 *         self.c_trigger_event(self.MARKET_TRANSACTION_FAILURE_EVENT_TAG,
 *                              MarketTransactionFailureEvent(self._current_timestamp, tracking_id))
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_did_timeout_tx(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_tracking_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int64_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_did_timeout_tx", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":679
 * 
 *     cdef c_did_timeout_tx(self, str tracking_id):
 *         self.c_trigger_event(self.MARKET_TRANSACTION_FAILURE_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                              MarketTransactionFailureEvent(self._current_timestamp, tracking_id))
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_MARKET_TRANSACTION_FAILURE_EVENT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_2 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":680
 *     cdef c_did_timeout_tx(self, str tracking_id):
 *         self.c_trigger_event(self.MARKET_TRANSACTION_FAILURE_EVENT_TAG,
 *                              MarketTransactionFailureEvent(self._current_timestamp, tracking_id))             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_get_order_price_quantum(self, str trading_pair, object price):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_MarketTransactionFailureEvent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 680, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_t_4, __pyx_v_tracking_id};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 680, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":679
 * 
 *     cdef c_did_timeout_tx(self, str tracking_id):
 *         self.c_trigger_event(self.MARKET_TRANSACTION_FAILURE_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                              MarketTransactionFailureEvent(self._current_timestamp, tracking_id))
 * 
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_v_self), __pyx_t_2, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 679, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":678
 *             del self._in_flight_orders[order_id]
 * 
 *     cdef c_did_timeout_tx(self, str tracking_id):             # <<<<<<<<<<<<<<
 *         self.c_trigger_event(self.MARKET_TRANSACTION_FAILURE_EVENT_TAG,
 *                              MarketTransactionFailureEvent(self._current_timestamp, tracking_id))
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.c_did_timeout_tx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":682
 *                              MarketTransactionFailureEvent(self._current_timestamp, tracking_id))
 * 
 *     cdef object c_get_order_price_quantum(self, str trading_pair, object price):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_get_order_price_quantum(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, CYTHON_UNUSED PyObject *__pyx_v_price) {
  struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule *__pyx_v_trading_rule = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_order_price_quantum", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":684
 *     cdef object c_get_order_price_quantum(self, str trading_pair, object price):
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]             # <<<<<<<<<<<<<<
 *         return Decimal(trading_rule.min_price_increment)
 * 
 */
  if (unlikely(__pyx_v_self->_trading_rules == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 684, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->_trading_rules, __pyx_v_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule))))) __PYX_ERR(0, 684, __pyx_L1_error)
  __pyx_v_trading_rule = ((struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":685
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 *         return Decimal(trading_rule.min_price_increment)             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object order_size):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 685, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_trading_rule->min_price_increment};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 685, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":682
 *                              MarketTransactionFailureEvent(self._current_timestamp, tracking_id))
 * 
 *     cdef object c_get_order_price_quantum(self, str trading_pair, object price):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.c_get_order_price_quantum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_trading_rule);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":687
 *         return Decimal(trading_rule.min_price_increment)
 * 
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object order_size):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_get_order_size_quantum(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, CYTHON_UNUSED PyObject *__pyx_v_order_size) {
  struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule *__pyx_v_trading_rule = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_get_order_size_quantum", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":689
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object order_size):
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]             # <<<<<<<<<<<<<<
 *         return Decimal(trading_rule.min_base_amount_increment)
 * 
 */
  if (unlikely(__pyx_v_self->_trading_rules == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 689, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->_trading_rules, __pyx_v_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 689, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule))))) __PYX_ERR(0, 689, __pyx_L1_error)
  __pyx_v_trading_rule = ((struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":690
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 *         return Decimal(trading_rule.min_base_amount_increment)             # <<<<<<<<<<<<<<
 * 
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price=0.0):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 690, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_trading_rule->min_base_amount_increment};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 690, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":687
 *         return Decimal(trading_rule.min_price_increment)
 * 
 *     cdef object c_get_order_size_quantum(self, str trading_pair, object order_size):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.c_get_order_size_quantum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_trading_rule);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":692
 *         return Decimal(trading_rule.min_base_amount_increment)
 * 
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price=0.0):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_quantize_order_amount(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_quantize_order_amount *__pyx_optional_args) {
  struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule *__pyx_v_trading_rule = 0;
  PyObject *__pyx_v_quantized_amount = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_quantize_order_amount", 0);
  if (__pyx_optional_args) {
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":694
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price=0.0):
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]             # <<<<<<<<<<<<<<
 *             object quantized_amount = ExchangeBase.c_quantize_order_amount(self, trading_pair, amount)
 * 
 */
  if (unlikely(__pyx_v_self->_trading_rules == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 694, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_v_self->_trading_rules, __pyx_v_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule))))) __PYX_ERR(0, 694, __pyx_L1_error)
  __pyx_v_trading_rule = ((struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":695
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 *             object quantized_amount = ExchangeBase.c_quantize_order_amount(self, trading_pair, amount)             # <<<<<<<<<<<<<<
 * 
 *         global s_decimal_0
 */
  __pyx_t_1 = __pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase->__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_amount, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 695, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_quantized_amount = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":698
 * 
 *         global s_decimal_0
 *         if quantized_amount < trading_rule.min_order_size:             # <<<<<<<<<<<<<<
 *             return s_decimal_0
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_quantized_amount, __pyx_v_trading_rule->min_order_size, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 698, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 698, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":699
 *         global s_decimal_0
 *         if quantized_amount < trading_rule.min_order_size:
 *             return s_decimal_0             # <<<<<<<<<<<<<<
 * 
 *         if quantized_amount < trading_rule.min_order_value:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 699, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":698
 * 
 *         global s_decimal_0
 *         if quantized_amount < trading_rule.min_order_size:             # <<<<<<<<<<<<<<
 *             return s_decimal_0
 * 
 */
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":701
 *             return s_decimal_0
 * 
 *         if quantized_amount < trading_rule.min_order_value:             # <<<<<<<<<<<<<<
 *             return s_decimal_0
 * 
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_quantized_amount, __pyx_v_trading_rule->min_order_value, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 701, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 701, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":702
 * 
 *         if quantized_amount < trading_rule.min_order_value:
 *             return s_decimal_0             # <<<<<<<<<<<<<<
 * 
 *         return quantized_amount
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 702, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":701
 *             return s_decimal_0
 * 
 *         if quantized_amount < trading_rule.min_order_value:             # <<<<<<<<<<<<<<
 *             return s_decimal_0
 * 
 */
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":704
 *             return s_decimal_0
 * 
 *         return quantized_amount             # <<<<<<<<<<<<<<
 * 
 *     def supported_order_types(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_quantized_amount);
  __pyx_r = __pyx_v_quantized_amount;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":692
 *         return Decimal(trading_rule.min_base_amount_increment)
 * 
 *     cdef object c_quantize_order_amount(self, str trading_pair, object amount, object price=0.0):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.c_quantize_order_amount", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_trading_rule);
  __Pyx_XDECREF(__pyx_v_quantized_amount);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":706
 *         return quantized_amount
 * 
 *     def supported_order_types(self):             # <<<<<<<<<<<<<<
 *         return [OrderType.LIMIT, OrderType.LIMIT_MAKER]
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_40supported_order_types(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_40supported_order_types = {"supported_order_types", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_40supported_order_types, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_40supported_order_types(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("supported_order_types (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("supported_order_types", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "supported_order_types", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_39supported_order_types(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_39supported_order_types(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("supported_order_types", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":707
 * 
 *     def supported_order_types(self):
 *         return [OrderType.LIMIT, OrderType.LIMIT_MAKER]             # <<<<<<<<<<<<<<
 * 
 *     async def place_order(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT_MAKER); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 707, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":706
 *         return quantized_amount
 * 
 *     def supported_order_types(self):             # <<<<<<<<<<<<<<
 *         return [OrderType.LIMIT, OrderType.LIMIT_MAKER]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.supported_order_types", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_43generator9(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":709
 *         return [OrderType.LIMIT, OrderType.LIMIT_MAKER]
 * 
 *     async def place_order(self,             # <<<<<<<<<<<<<<
 *                           order_id: str,
 *                           trading_pair: str,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_42place_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_42place_order = {"place_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_42place_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_42place_order(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_is_buy = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_price = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("place_order (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_id,&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_is_buy,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_id,&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_is_buy,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    #endif
    PyObject* values[6] = {0,0,0,0,0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_id)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 709, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 709, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("place_order", 1, 6, 6, 1); __PYX_ERR(0, 709, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_amount)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 709, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("place_order", 1, 6, 6, 2); __PYX_ERR(0, 709, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_is_buy)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 709, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("place_order", 1, 6, 6, 3); __PYX_ERR(0, 709, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 709, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("place_order", 1, 6, 6, 4); __PYX_ERR(0, 709, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (likely((values[5] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_price)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 709, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("place_order", 1, 6, 6, 5); __PYX_ERR(0, 709, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "place_order") < 0)) __PYX_ERR(0, 709, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 6)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
      values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
      values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
      values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
      values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
    }
    __pyx_v_order_id = ((PyObject*)values[0]);
    __pyx_v_trading_pair = ((PyObject*)values[1]);
    __pyx_v_amount = values[2];
    __pyx_v_is_buy = values[3];
    __pyx_v_order_type = values[4];
    __pyx_v_price = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("place_order", 1, 6, 6, __pyx_nargs); __PYX_ERR(0, 709, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.place_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order_id), (&PyUnicode_Type), 1, "order_id", 1))) __PYX_ERR(0, 710, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 711, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_41place_order(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), __pyx_v_order_id, __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_is_buy, __pyx_v_order_type, __pyx_v_price);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_41place_order(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_is_buy, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("place_order", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 709, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_order_id = __pyx_v_order_id;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_id);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_id);
  __pyx_cur_scope->__pyx_v_trading_pair = __pyx_v_trading_pair;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __pyx_cur_scope->__pyx_v_amount = __pyx_v_amount;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_amount);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_amount);
  __pyx_cur_scope->__pyx_v_is_buy = __pyx_v_is_buy;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_is_buy);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_is_buy);
  __pyx_cur_scope->__pyx_v_order_type = __pyx_v_order_type;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_type);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_type);
  __pyx_cur_scope->__pyx_v_price = __pyx_v_price;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_price);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_price);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_43generator9, __pyx_codeobj__22, (PyObject *) __pyx_cur_scope, __pyx_n_s_place_order, __pyx_n_s_BittrexExchange_place_order, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 709, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.place_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_43generator9(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("place_order", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L5_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 709, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":717
 *                           price: Decimal) -> Dict[str, Any]:
 * 
 *         path_url = "/orders"             # <<<<<<<<<<<<<<
 * 
 *         body = {}
 */
  __Pyx_INCREF(__pyx_kp_u_orders);
  __Pyx_GIVEREF(__pyx_kp_u_orders);
  __pyx_cur_scope->__pyx_v_path_url = __pyx_kp_u_orders;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":719
 *         path_url = "/orders"
 * 
 *         body = {}             # <<<<<<<<<<<<<<
 *         if order_type is OrderType.LIMIT:  # Bittrex supports CEILING_LIMIT & CEILING_MARKET
 *             body = {
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_body = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":720
 * 
 *         body = {}
 *         if order_type is OrderType.LIMIT:  # Bittrex supports CEILING_LIMIT & CEILING_MARKET             # <<<<<<<<<<<<<<
 *             body = {
 *                 "marketSymbol": str(trading_pair),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 720, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_cur_scope->__pyx_v_order_type == __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_t_3 != 0);
  if (__pyx_t_4) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":722
 *         if order_type is OrderType.LIMIT:  # Bittrex supports CEILING_LIMIT & CEILING_MARKET
 *             body = {
 *                 "marketSymbol": str(trading_pair),             # <<<<<<<<<<<<<<
 *                 "direction": "BUY" if is_buy else "SELL",
 *                 "type": "LIMIT",
 */
    __pyx_t_2 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Str(__pyx_cur_scope->__pyx_v_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_marketSymbol, __pyx_t_1) < 0) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":723
 *             body = {
 *                 "marketSymbol": str(trading_pair),
 *                 "direction": "BUY" if is_buy else "SELL",             # <<<<<<<<<<<<<<
 *                 "type": "LIMIT",
 *                 "quantity": f"{amount:f}",
 */
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_is_buy); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 723, __pyx_L1_error)
    if (__pyx_t_4) {
      __Pyx_INCREF(__pyx_n_u_BUY);
      __pyx_t_1 = __pyx_n_u_BUY;
    } else {
      __Pyx_INCREF(__pyx_n_u_SELL);
      __pyx_t_1 = __pyx_n_u_SELL;
    }
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_direction, __pyx_t_1) < 0) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_type, __pyx_n_u_LIMIT) < 0) __PYX_ERR(0, 722, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":725
 *                 "direction": "BUY" if is_buy else "SELL",
 *                 "type": "LIMIT",
 *                 "quantity": f"{amount:f}",             # <<<<<<<<<<<<<<
 *                 "limit": f"{price:f}",
 *                 "timeInForce": "GOOD_TIL_CANCELLED"
 */
    __pyx_t_1 = __Pyx_PyObject_Format(__pyx_cur_scope->__pyx_v_amount, __pyx_n_u_f); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_quantity, __pyx_t_1) < 0) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":726
 *                 "type": "LIMIT",
 *                 "quantity": f"{amount:f}",
 *                 "limit": f"{price:f}",             # <<<<<<<<<<<<<<
 *                 "timeInForce": "GOOD_TIL_CANCELLED"
 *                 # Available options [GOOD_TIL_CANCELLED, IMMEDIATE_OR_CANCEL,
 */
    __pyx_t_1 = __Pyx_PyObject_Format(__pyx_cur_scope->__pyx_v_price, __pyx_n_u_f); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 726, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_limit, __pyx_t_1) < 0) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (PyDict_SetItem(__pyx_t_2, __pyx_n_u_timeInForce, __pyx_n_u_GOOD_TIL_CANCELLED) < 0) __PYX_ERR(0, 722, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_body);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_body, ((PyObject*)__pyx_t_2));
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":720
 * 
 *         body = {}
 *         if order_type is OrderType.LIMIT:  # Bittrex supports CEILING_LIMIT & CEILING_MARKET             # <<<<<<<<<<<<<<
 *             body = {
 *                 "marketSymbol": str(trading_pair),
 */
    goto __pyx_L4;
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":731
 *                 # FILL_OR_KILL, POST_ONLY_GOOD_TIL_CANCELLED]
 *             }
 *         elif order_type is OrderType.LIMIT_MAKER:             # <<<<<<<<<<<<<<
 *             body = {
 *                 "marketSymbol": str(trading_pair),
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_LIMIT_MAKER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 731, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__pyx_cur_scope->__pyx_v_order_type == __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_4 != 0);
  if (__pyx_t_3) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":733
 *         elif order_type is OrderType.LIMIT_MAKER:
 *             body = {
 *                 "marketSymbol": str(trading_pair),             # <<<<<<<<<<<<<<
 *                 "direction": "BUY" if is_buy else "SELL",
 *                 "type": "LIMIT",
 */
    __pyx_t_1 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_Str(__pyx_cur_scope->__pyx_v_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_marketSymbol, __pyx_t_2) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":734
 *             body = {
 *                 "marketSymbol": str(trading_pair),
 *                 "direction": "BUY" if is_buy else "SELL",             # <<<<<<<<<<<<<<
 *                 "type": "LIMIT",
 *                 "quantity": f"{amount:f}",
 */
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_is_buy); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 734, __pyx_L1_error)
    if (__pyx_t_3) {
      __Pyx_INCREF(__pyx_n_u_BUY);
      __pyx_t_2 = __pyx_n_u_BUY;
    } else {
      __Pyx_INCREF(__pyx_n_u_SELL);
      __pyx_t_2 = __pyx_n_u_SELL;
    }
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_direction, __pyx_t_2) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_type, __pyx_n_u_LIMIT) < 0) __PYX_ERR(0, 733, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":736
 *                 "direction": "BUY" if is_buy else "SELL",
 *                 "type": "LIMIT",
 *                 "quantity": f"{amount:f}",             # <<<<<<<<<<<<<<
 *                 "limit": f"{price:f}",
 *                 "timeInForce": "POST_ONLY_GOOD_TIL_CANCELLED"
 */
    __pyx_t_2 = __Pyx_PyObject_Format(__pyx_cur_scope->__pyx_v_amount, __pyx_n_u_f); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 736, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_quantity, __pyx_t_2) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":737
 *                 "type": "LIMIT",
 *                 "quantity": f"{amount:f}",
 *                 "limit": f"{price:f}",             # <<<<<<<<<<<<<<
 *                 "timeInForce": "POST_ONLY_GOOD_TIL_CANCELLED"
 *             }
 */
    __pyx_t_2 = __Pyx_PyObject_Format(__pyx_cur_scope->__pyx_v_price, __pyx_n_u_f); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 737, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_limit, __pyx_t_2) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (PyDict_SetItem(__pyx_t_1, __pyx_n_u_timeInForce, __pyx_n_u_POST_ONLY_GOOD_TIL_CANCELLED) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_body);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_body, ((PyObject*)__pyx_t_1));
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":731
 *                 # FILL_OR_KILL, POST_ONLY_GOOD_TIL_CANCELLED]
 *             }
 *         elif order_type is OrderType.LIMIT_MAKER:             # <<<<<<<<<<<<<<
 *             body = {
 *                 "marketSymbol": str(trading_pair),
 */
  }
  __pyx_L4:;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":740
 *                 "timeInForce": "POST_ONLY_GOOD_TIL_CANCELLED"
 *             }
 *         api_response = await self._api_request("POST", path_url=path_url, body=body)             # <<<<<<<<<<<<<<
 *         return api_response
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_path_url, __pyx_cur_scope->__pyx_v_path_url) < 0) __PYX_ERR(0, 740, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_body, __pyx_cur_scope->__pyx_v_body) < 0) __PYX_ERR(0, 740, __pyx_L1_error)
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__23, __pyx_t_2); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L5_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 740, __pyx_L1_error)
    __pyx_t_5 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_5);
  } else {
    __pyx_t_5 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_5) < 0) __PYX_ERR(0, 740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  }
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_api_response = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":741
 *             }
 *         api_response = await self._api_request("POST", path_url=path_url, body=body)
 *         return api_response             # <<<<<<<<<<<<<<
 * 
 *     async def execute_buy(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_cur_scope->__pyx_v_api_response);
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":709
 *         return [OrderType.LIMIT, OrderType.LIMIT_MAKER]
 * 
 *     async def place_order(self,             # <<<<<<<<<<<<<<
 *                           order_id: str,
 *                           trading_pair: str,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("place_order", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_46generator10(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":743
 *         return api_response
 * 
 *     async def execute_buy(self,             # <<<<<<<<<<<<<<
 *                           order_id: str,
 *                           trading_pair: str,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_45execute_buy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_45execute_buy = {"execute_buy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_45execute_buy, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_45execute_buy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_price = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_buy (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_id,&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_id,&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    #endif
    PyObject* values[5] = {0,0,0,0,0};
    values[4] = __pyx_k__24;
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_id)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 743, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 743, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("execute_buy", 0, 4, 5, 1); __PYX_ERR(0, 743, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_amount)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 743, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("execute_buy", 0, 4, 5, 2); __PYX_ERR(0, 743, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 743, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("execute_buy", 0, 4, 5, 3); __PYX_ERR(0, 743, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_price);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 743, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "execute_buy") < 0)) __PYX_ERR(0, 743, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_order_id = ((PyObject*)values[0]);
    __pyx_v_trading_pair = ((PyObject*)values[1]);
    __pyx_v_amount = values[2];
    __pyx_v_order_type = values[3];
    __pyx_v_price = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("execute_buy", 0, 4, 5, __pyx_nargs); __PYX_ERR(0, 743, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.execute_buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order_id), (&PyUnicode_Type), 1, "order_id", 1))) __PYX_ERR(0, 744, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 745, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_44execute_buy(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), __pyx_v_order_id, __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_44execute_buy(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("execute_buy", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 743, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_order_id = __pyx_v_order_id;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_id);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_id);
  __pyx_cur_scope->__pyx_v_trading_pair = __pyx_v_trading_pair;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __pyx_cur_scope->__pyx_v_amount = __pyx_v_amount;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_amount);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_amount);
  __pyx_cur_scope->__pyx_v_order_type = __pyx_v_order_type;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_type);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_type);
  __pyx_cur_scope->__pyx_v_price = __pyx_v_price;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_price);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_price);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_46generator10, __pyx_codeobj__25, (PyObject *) __pyx_cur_scope, __pyx_n_s_execute_buy, __pyx_n_s_BittrexExchange_execute_buy, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 743, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.execute_buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_46generator10(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  int64_t __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_buy", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L17_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 743, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":750
 *                           price: Optional[Decimal] = s_decimal_0):
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]             # <<<<<<<<<<<<<<
 *             double quote_amount
 *             object decimal_amount
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_self->_trading_rules == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 750, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_self->_trading_rules, __pyx_cur_scope->__pyx_v_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule))))) __PYX_ERR(0, 750, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_trading_rule = ((struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":757
 *             object tracked_order
 * 
 *         decimal_amount = self.c_quantize_order_amount(trading_pair, amount)             # <<<<<<<<<<<<<<
 *         if order_type is OrderType.LIMIT or order_type is OrderType.LIMIT_MAKER:
 *             decimal_price = self.c_quantize_order_price(trading_pair, price)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_amount, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 757, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_decimal_amount = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":758
 * 
 *         decimal_amount = self.c_quantize_order_amount(trading_pair, amount)
 *         if order_type is OrderType.LIMIT or order_type is OrderType.LIMIT_MAKER:             # <<<<<<<<<<<<<<
 *             decimal_price = self.c_quantize_order_price(trading_pair, price)
 *         else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__pyx_cur_scope->__pyx_v_order_type == __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_LIMIT_MAKER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_cur_scope->__pyx_v_order_type == __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":759
 *         decimal_amount = self.c_quantize_order_amount(trading_pair, amount)
 *         if order_type is OrderType.LIMIT or order_type is OrderType.LIMIT_MAKER:
 *             decimal_price = self.c_quantize_order_price(trading_pair, price)             # <<<<<<<<<<<<<<
 *         else:
 *             decimal_price = s_decimal_0
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_quantize_order_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 759, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_v_decimal_price = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":758
 * 
 *         decimal_amount = self.c_quantize_order_amount(trading_pair, amount)
 *         if order_type is OrderType.LIMIT or order_type is OrderType.LIMIT_MAKER:             # <<<<<<<<<<<<<<
 *             decimal_price = self.c_quantize_order_price(trading_pair, price)
 *         else:
 */
    goto __pyx_L4;
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":761
 *             decimal_price = self.c_quantize_order_price(trading_pair, price)
 *         else:
 *             decimal_price = s_decimal_0             # <<<<<<<<<<<<<<
 * 
 *         if decimal_amount < trading_rule.min_order_size:
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_v_decimal_price = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_L4:;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":763
 *             decimal_price = s_decimal_0
 * 
 *         if decimal_amount < trading_rule.min_order_size:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Buy order amount {decimal_amount} is lower than the minimum order size "
 *                              f"{trading_rule.min_order_size}.")
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_decimal_amount, __pyx_cur_scope->__pyx_v_trading_rule->min_order_size, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 763, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":764
 * 
 *         if decimal_amount < trading_rule.min_order_size:
 *             raise ValueError(f"Buy order amount {decimal_amount} is lower than the minimum order size "             # <<<<<<<<<<<<<<
 *                              f"{trading_rule.min_order_size}.")
 * 
 */
    __pyx_t_1 = PyTuple_New(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = 0;
    __pyx_t_7 = 127;
    __Pyx_INCREF(__pyx_kp_u_Buy_order_amount);
    __pyx_t_6 += 17;
    __Pyx_GIVEREF(__pyx_kp_u_Buy_order_amount);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Buy_order_amount);
    __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_decimal_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_kp_u_is_lower_than_the_minimum_order);
    __pyx_t_6 += 38;
    __Pyx_GIVEREF(__pyx_kp_u_is_lower_than_the_minimum_order);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_is_lower_than_the_minimum_order);

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":765
 *         if decimal_amount < trading_rule.min_order_size:
 *             raise ValueError(f"Buy order amount {decimal_amount} is lower than the minimum order size "
 *                              f"{trading_rule.min_order_size}.")             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
    __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_trading_rule->min_order_size, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_kp_u__10);
    __pyx_t_6 += 1;
    __Pyx_GIVEREF(__pyx_kp_u__10);
    PyTuple_SET_ITEM(__pyx_t_1, 4, __pyx_kp_u__10);

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":764
 * 
 *         if decimal_amount < trading_rule.min_order_size:
 *             raise ValueError(f"Buy order amount {decimal_amount} is lower than the minimum order size "             # <<<<<<<<<<<<<<
 *                              f"{trading_rule.min_order_size}.")
 * 
 */
    __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 5, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 764, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 764, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":763
 *             decimal_price = s_decimal_0
 * 
 *         if decimal_amount < trading_rule.min_order_size:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Buy order amount {decimal_amount} is lower than the minimum order size "
 *                              f"{trading_rule.min_order_size}.")
 */
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":767
 *                              f"{trading_rule.min_order_size}.")
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             order_result = None
 *             self.c_start_tracking_order(
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_10);
    /*try:*/ {

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":768
 * 
 *         try:
 *             order_result = None             # <<<<<<<<<<<<<<
 *             self.c_start_tracking_order(
 *                 order_id,
 */
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      __pyx_cur_scope->__pyx_v_order_result = Py_None;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":774
 *                 trading_pair,
 *                 order_type,
 *                 TradeType.BUY,             # <<<<<<<<<<<<<<
 *                 decimal_price,
 *                 decimal_amount
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 774, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_BUY); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 774, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":769
 *         try:
 *             order_result = None
 *             self.c_start_tracking_order(             # <<<<<<<<<<<<<<
 *                 order_id,
 *                 None,
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_start_tracking_order(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_order_id, ((PyObject*)Py_None), __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_order_type, __pyx_t_3, __pyx_cur_scope->__pyx_v_decimal_price, __pyx_cur_scope->__pyx_v_decimal_amount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 769, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":778
 *                 decimal_amount
 *             )
 *             if order_type is OrderType.LIMIT or order_type is OrderType.LIMIT_MAKER:             # <<<<<<<<<<<<<<
 *                 order_result = await self.place_order(order_id,
 *                                                       trading_pair,
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 778, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 778, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_4 = (__pyx_cur_scope->__pyx_v_order_type == __pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = (__pyx_t_4 != 0);
      if (!__pyx_t_5) {
      } else {
        __pyx_t_2 = __pyx_t_5;
        goto __pyx_L15_bool_binop_done;
      }
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 778, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_LIMIT_MAKER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 778, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = (__pyx_cur_scope->__pyx_v_order_type == __pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_4 = (__pyx_t_5 != 0);
      __pyx_t_2 = __pyx_t_4;
      __pyx_L15_bool_binop_done:;
      if (likely(__pyx_t_2)) {

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":779
 *             )
 *             if order_type is OrderType.LIMIT or order_type is OrderType.LIMIT_MAKER:
 *                 order_result = await self.place_order(order_id,             # <<<<<<<<<<<<<<
 *                                                       trading_pair,
 *                                                       decimal_amount,
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_place_order); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 779, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":784
 *                                                       True,
 *                                                       order_type,
 *                                                       decimal_price)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(f"Invalid OrderType {order_type}. Aborting.")
 */
        __pyx_t_11 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_12 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[7] = {__pyx_t_11, __pyx_cur_scope->__pyx_v_order_id, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_decimal_amount, Py_True, __pyx_cur_scope->__pyx_v_order_type, __pyx_cur_scope->__pyx_v_decimal_price};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_12, 6+__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 779, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_8);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_8;
          __Pyx_XGIVEREF(__pyx_t_9);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_9;
          __Pyx_XGIVEREF(__pyx_t_10);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_10;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 1;
          return __pyx_r;
          __pyx_L17_resume_from_await:;
          __pyx_t_8 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_8);
          __pyx_t_9 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_9);
          __pyx_t_10 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_10);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 779, __pyx_L8_error)
          __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
        } else {
          __pyx_t_1 = NULL;
          if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 779, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_order_result);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_order_result, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":778
 *                 decimal_amount
 *             )
 *             if order_type is OrderType.LIMIT or order_type is OrderType.LIMIT_MAKER:             # <<<<<<<<<<<<<<
 *                 order_result = await self.place_order(order_id,
 *                                                       trading_pair,
 */
        goto __pyx_L14;
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":786
 *                                                       decimal_price)
 *             else:
 *                 raise ValueError(f"Invalid OrderType {order_type}. Aborting.")             # <<<<<<<<<<<<<<
 * 
 *             exchange_order_id = order_result["id"]
 */
      /*else*/ {
        __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 786, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = 0;
        __pyx_t_7 = 127;
        __Pyx_INCREF(__pyx_kp_u_Invalid_OrderType);
        __pyx_t_6 += 18;
        __Pyx_GIVEREF(__pyx_kp_u_Invalid_OrderType);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Invalid_OrderType);
        __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_order_type, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 786, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_INCREF(__pyx_kp_u_Aborting);
        __pyx_t_6 += 11;
        __Pyx_GIVEREF(__pyx_kp_u_Aborting);
        PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_Aborting);
        __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 786, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 786, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __PYX_ERR(0, 786, __pyx_L8_error)
      }
      __pyx_L14:;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":788
 *                 raise ValueError(f"Invalid OrderType {order_type}. Aborting.")
 * 
 *             exchange_order_id = order_result["id"]             # <<<<<<<<<<<<<<
 * 
 *             tracked_order = self._in_flight_orders.get(order_id)
 */
      __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order_result, __pyx_n_u_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 788, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 788, __pyx_L8_error)
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_v_exchange_order_id = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":790
 *             exchange_order_id = order_result["id"]
 * 
 *             tracked_order = self._in_flight_orders.get(order_id)             # <<<<<<<<<<<<<<
 *             if tracked_order is not None and exchange_order_id:
 *                 tracked_order.update_exchange_order_id(exchange_order_id)
 */
      if (unlikely(__pyx_cur_scope->__pyx_v_self->_in_flight_orders == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
        __PYX_ERR(0, 790, __pyx_L8_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_cur_scope->__pyx_v_self->_in_flight_orders, __pyx_cur_scope->__pyx_v_order_id, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 790, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_v_tracked_order = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":791
 * 
 *             tracked_order = self._in_flight_orders.get(order_id)
 *             if tracked_order is not None and exchange_order_id:             # <<<<<<<<<<<<<<
 *                 tracked_order.update_exchange_order_id(exchange_order_id)
 *                 order_type_str = order_type.name.lower()
 */
      __pyx_t_4 = (__pyx_cur_scope->__pyx_v_tracked_order != Py_None);
      __pyx_t_5 = (__pyx_t_4 != 0);
      if (__pyx_t_5) {
      } else {
        __pyx_t_2 = __pyx_t_5;
        goto __pyx_L19_bool_binop_done;
      }
      __pyx_t_5 = (__pyx_cur_scope->__pyx_v_exchange_order_id != Py_None)&&(__Pyx_PyUnicode_IS_TRUE(__pyx_cur_scope->__pyx_v_exchange_order_id) != 0);
      __pyx_t_2 = __pyx_t_5;
      __pyx_L19_bool_binop_done:;
      if (__pyx_t_2) {

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":792
 *             tracked_order = self._in_flight_orders.get(order_id)
 *             if tracked_order is not None and exchange_order_id:
 *                 tracked_order.update_exchange_order_id(exchange_order_id)             # <<<<<<<<<<<<<<
 *                 order_type_str = order_type.name.lower()
 *                 self.logger().info(f"Created {order_type_str} buy order {order_id} for "
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_update_exchange_order_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 792, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_12 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_cur_scope->__pyx_v_exchange_order_id};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_12, 1+__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 792, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":793
 *             if tracked_order is not None and exchange_order_id:
 *                 tracked_order.update_exchange_order_id(exchange_order_id)
 *                 order_type_str = order_type.name.lower()             # <<<<<<<<<<<<<<
 *                 self.logger().info(f"Created {order_type_str} buy order {order_id} for "
 *                                    f"{decimal_amount} {trading_pair}")
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order_type, __pyx_n_s_name_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 793, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_lower); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 793, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_12 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_3, };
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_12, 0+__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 793, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_cur_scope->__pyx_v_order_type_str = __pyx_t_1;
        __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":794
 *                 tracked_order.update_exchange_order_id(exchange_order_id)
 *                 order_type_str = order_type.name.lower()
 *                 self.logger().info(f"Created {order_type_str} buy order {order_id} for "             # <<<<<<<<<<<<<<
 *                                    f"{decimal_amount} {trading_pair}")
 *                 self.c_trigger_event(self.MARKET_BUY_ORDER_CREATED_EVENT_TAG,
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 794, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_13 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_12 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_13, };
          __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_12, 0+__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 794, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 794, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyTuple_New(8); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 794, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_6 = 0;
        __pyx_t_7 = 127;
        __Pyx_INCREF(__pyx_kp_u_Created);
        __pyx_t_6 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_Created);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_kp_u_Created);
        __pyx_t_13 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_order_type_str, __pyx_empty_unicode); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 794, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_13);
        __pyx_t_13 = 0;
        __Pyx_INCREF(__pyx_kp_u_buy_order);
        __pyx_t_6 += 11;
        __Pyx_GIVEREF(__pyx_kp_u_buy_order);
        PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_kp_u_buy_order);
        __pyx_t_13 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_order_id); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 794, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_11, 3, __pyx_t_13);
        __pyx_t_13 = 0;
        __Pyx_INCREF(__pyx_kp_u_for);
        __pyx_t_6 += 5;
        __Pyx_GIVEREF(__pyx_kp_u_for);
        PyTuple_SET_ITEM(__pyx_t_11, 4, __pyx_kp_u_for);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":795
 *                 order_type_str = order_type.name.lower()
 *                 self.logger().info(f"Created {order_type_str} buy order {order_id} for "
 *                                    f"{decimal_amount} {trading_pair}")             # <<<<<<<<<<<<<<
 *                 self.c_trigger_event(self.MARKET_BUY_ORDER_CREATED_EVENT_TAG,
 *                                      BuyOrderCreatedEvent(
 */
        __pyx_t_13 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_decimal_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 795, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_11, 5, __pyx_t_13);
        __pyx_t_13 = 0;
        __Pyx_INCREF(__pyx_kp_u__12);
        __pyx_t_6 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__12);
        PyTuple_SET_ITEM(__pyx_t_11, 6, __pyx_kp_u__12);
        __pyx_t_13 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_trading_pair); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 795, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_11, 7, __pyx_t_13);
        __pyx_t_13 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":794
 *                 tracked_order.update_exchange_order_id(exchange_order_id)
 *                 order_type_str = order_type.name.lower()
 *                 self.logger().info(f"Created {order_type_str} buy order {order_id} for "             # <<<<<<<<<<<<<<
 *                                    f"{decimal_amount} {trading_pair}")
 *                 self.c_trigger_event(self.MARKET_BUY_ORDER_CREATED_EVENT_TAG,
 */
        __pyx_t_13 = __Pyx_PyUnicode_Join(__pyx_t_11, 8, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 794, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_12 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_13};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_12, 1+__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 794, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":796
 *                 self.logger().info(f"Created {order_type_str} buy order {order_id} for "
 *                                    f"{decimal_amount} {trading_pair}")
 *                 self.c_trigger_event(self.MARKET_BUY_ORDER_CREATED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                      BuyOrderCreatedEvent(
 *                                          self._current_timestamp,
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 796, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_14 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_14 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 796, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":797
 *                                    f"{decimal_amount} {trading_pair}")
 *                 self.c_trigger_event(self.MARKET_BUY_ORDER_CREATED_EVENT_TAG,
 *                                      BuyOrderCreatedEvent(             # <<<<<<<<<<<<<<
 *                                          self._current_timestamp,
 *                                          order_type,
 */
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_BuyOrderCreatedEvent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 797, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":798
 *                 self.c_trigger_event(self.MARKET_BUY_ORDER_CREATED_EVENT_TAG,
 *                                      BuyOrderCreatedEvent(
 *                                          self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                          order_type,
 *                                          trading_pair,
 */
        __pyx_t_13 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 798, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_13);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":803
 *                                          decimal_amount,
 *                                          decimal_price,
 *                                          order_id             # <<<<<<<<<<<<<<
 *                                      ))
 * 
 */
        __pyx_t_11 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_12 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[7] = {__pyx_t_11, __pyx_t_13, __pyx_cur_scope->__pyx_v_order_type, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_decimal_amount, __pyx_cur_scope->__pyx_v_decimal_price, __pyx_cur_scope->__pyx_v_order_id};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_12, 6+__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 797, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":796
 *                 self.logger().info(f"Created {order_type_str} buy order {order_id} for "
 *                                    f"{decimal_amount} {trading_pair}")
 *                 self.c_trigger_event(self.MARKET_BUY_ORDER_CREATED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                      BuyOrderCreatedEvent(
 *                                          self._current_timestamp,
 */
        __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_14, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 796, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":791
 * 
 *             tracked_order = self._in_flight_orders.get(order_id)
 *             if tracked_order is not None and exchange_order_id:             # <<<<<<<<<<<<<<
 *                 tracked_order.update_exchange_order_id(exchange_order_id)
 *                 order_type_str = order_type.name.lower()
 */
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":767
 *                              f"{trading_rule.min_order_size}.")
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             order_result = None
 *             self.c_start_tracking_order(
 */
    }
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    goto __pyx_L13_try_end;
    __pyx_L8_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":806
 *                                      ))
 * 
 *         except asyncio.CancelledError:             # <<<<<<<<<<<<<<
 *             raise
 *         except Exception:
 */
    __Pyx_ErrFetch(&__pyx_t_3, &__pyx_t_1, &__pyx_t_13);
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 806, __pyx_L10_except_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_CancelledError); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 806, __pyx_L10_except_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_12 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_3, __pyx_t_15);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_ErrRestore(__pyx_t_3, __pyx_t_1, __pyx_t_13);
    __pyx_t_3 = 0; __pyx_t_1 = 0; __pyx_t_13 = 0;
    if (__pyx_t_12) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.execute_buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_13, &__pyx_t_1, &__pyx_t_3) < 0) __PYX_ERR(0, 806, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_3);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":807
 * 
 *         except asyncio.CancelledError:
 *             raise             # <<<<<<<<<<<<<<
 *         except Exception:
 *             tracked_order = self._in_flight_orders.get(order_id)
 */
      __Pyx_GIVEREF(__pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ErrRestoreWithState(__pyx_t_13, __pyx_t_1, __pyx_t_3);
      __pyx_t_13 = 0; __pyx_t_1 = 0; __pyx_t_3 = 0; 
      __PYX_ERR(0, 807, __pyx_L10_except_error)
    }

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":808
 *         except asyncio.CancelledError:
 *             raise
 *         except Exception:             # <<<<<<<<<<<<<<
 *             tracked_order = self._in_flight_orders.get(order_id)
 *             tracked_order.last_state = "FAILURE"
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_12) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.execute_buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_1, &__pyx_t_13) < 0) __PYX_ERR(0, 808, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_13);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":809
 *             raise
 *         except Exception:
 *             tracked_order = self._in_flight_orders.get(order_id)             # <<<<<<<<<<<<<<
 *             tracked_order.last_state = "FAILURE"
 *             self.c_stop_tracking_order(order_id)
 */
      if (unlikely(__pyx_cur_scope->__pyx_v_self->_in_flight_orders == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
        __PYX_ERR(0, 809, __pyx_L10_except_error)
      }
      __pyx_t_15 = __Pyx_PyDict_GetItemDefault(__pyx_cur_scope->__pyx_v_self->_in_flight_orders, __pyx_cur_scope->__pyx_v_order_id, Py_None); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 809, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tracked_order);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_15);
      __pyx_t_15 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":810
 *         except Exception:
 *             tracked_order = self._in_flight_orders.get(order_id)
 *             tracked_order.last_state = "FAILURE"             # <<<<<<<<<<<<<<
 *             self.c_stop_tracking_order(order_id)
 *             order_type_str = order_type.name.lower()
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_last_state, __pyx_n_u_FAILURE) < 0) __PYX_ERR(0, 810, __pyx_L10_except_error)

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":811
 *             tracked_order = self._in_flight_orders.get(order_id)
 *             tracked_order.last_state = "FAILURE"
 *             self.c_stop_tracking_order(order_id)             # <<<<<<<<<<<<<<
 *             order_type_str = order_type.name.lower()
 *             self.logger().network(
 */
      __pyx_t_15 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_stop_tracking_order(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), __pyx_cur_scope->__pyx_v_order_id); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 811, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":812
 *             tracked_order.last_state = "FAILURE"
 *             self.c_stop_tracking_order(order_id)
 *             order_type_str = order_type.name.lower()             # <<<<<<<<<<<<<<
 *             self.logger().network(
 *                 f"Error submitting buy {order_type_str} order to Bittrex for "
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order_type, __pyx_n_s_name_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 812, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_lower); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 812, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = NULL;
      __pyx_t_12 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_16);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_16, function);
          __pyx_t_12 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_11, };
        __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_12, 0+__pyx_t_12);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 812, __pyx_L10_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order_type_str);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order_type_str, __pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_15);
      __pyx_t_15 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":813
 *             self.c_stop_tracking_order(order_id)
 *             order_type_str = order_type.name.lower()
 *             self.logger().network(             # <<<<<<<<<<<<<<
 *                 f"Error submitting buy {order_type_str} order to Bittrex for "
 *                 f"{decimal_amount} {trading_pair} "
 */
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 813, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_11 = NULL;
      __pyx_t_12 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_16);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_16, function);
          __pyx_t_12 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_11, };
        __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_12, 0+__pyx_t_12);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 813, __pyx_L10_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      }
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_network); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 813, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":814
 *             order_type_str = order_type.name.lower()
 *             self.logger().network(
 *                 f"Error submitting buy {order_type_str} order to Bittrex for "             # <<<<<<<<<<<<<<
 *                 f"{decimal_amount} {trading_pair} "
 *                 f"{decimal_price if order_type in [OrderType.LIMIT, OrderType.LIMIT_MAKER] else ''}.",
 */
      __pyx_t_15 = PyTuple_New(9); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 814, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_6 = 0;
      __pyx_t_7 = 127;
      __Pyx_INCREF(__pyx_kp_u_Error_submitting_buy);
      __pyx_t_6 += 21;
      __Pyx_GIVEREF(__pyx_kp_u_Error_submitting_buy);
      PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_kp_u_Error_submitting_buy);
      __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_order_type_str, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 814, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_7;
      __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_INCREF(__pyx_kp_u_order_to_Bittrex_for);
      __pyx_t_6 += 22;
      __Pyx_GIVEREF(__pyx_kp_u_order_to_Bittrex_for);
      PyTuple_SET_ITEM(__pyx_t_15, 2, __pyx_kp_u_order_to_Bittrex_for);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":815
 *             self.logger().network(
 *                 f"Error submitting buy {order_type_str} order to Bittrex for "
 *                 f"{decimal_amount} {trading_pair} "             # <<<<<<<<<<<<<<
 *                 f"{decimal_price if order_type in [OrderType.LIMIT, OrderType.LIMIT_MAKER] else ''}.",
 *                 exc_info=True,
 */
      __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_decimal_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 815, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_7;
      __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_15, 3, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_INCREF(__pyx_kp_u__12);
      __pyx_t_6 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__12);
      PyTuple_SET_ITEM(__pyx_t_15, 4, __pyx_kp_u__12);
      __pyx_t_11 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_trading_pair); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 815, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_7;
      __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_15, 5, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_INCREF(__pyx_kp_u__12);
      __pyx_t_6 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__12);
      PyTuple_SET_ITEM(__pyx_t_15, 6, __pyx_kp_u__12);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":816
 *                 f"Error submitting buy {order_type_str} order to Bittrex for "
 *                 f"{decimal_amount} {trading_pair} "
 *                 f"{decimal_price if order_type in [OrderType.LIMIT, OrderType.LIMIT_MAKER] else ''}.",             # <<<<<<<<<<<<<<
 *                 exc_info=True,
 *                 app_warning_msg=f"Failed to submit buy order to Bittrex. Check API key and network connection."
 */
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_type);
      __pyx_t_17 = __pyx_cur_scope->__pyx_v_order_type;
      __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 816, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 816, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_18 = PyObject_RichCompare(__pyx_t_17, __pyx_t_19, Py_EQ); __Pyx_XGOTREF(__pyx_t_18); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 816, __pyx_L10_except_error)
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_18); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 816, __pyx_L10_except_error)
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      if (!__pyx_t_5) {
      } else {
        __pyx_t_2 = __pyx_t_5;
        goto __pyx_L25_bool_binop_done;
      }
      __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 816, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_LIMIT_MAKER); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 816, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_18 = PyObject_RichCompare(__pyx_t_17, __pyx_t_19, Py_EQ); __Pyx_XGOTREF(__pyx_t_18); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 816, __pyx_L10_except_error)
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_18); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 816, __pyx_L10_except_error)
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_2 = __pyx_t_5;
      __pyx_L25_bool_binop_done:;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      if ((__pyx_t_2 != 0)) {
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_decimal_price);
        __pyx_t_11 = __pyx_cur_scope->__pyx_v_decimal_price;
      } else {
        __Pyx_INCREF(__pyx_kp_u_);
        __pyx_t_11 = __pyx_kp_u_;
      }
      __pyx_t_17 = __Pyx_PyObject_FormatSimple(__pyx_t_11, __pyx_empty_unicode); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 816, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) : __pyx_t_7;
      __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_17);
      __Pyx_GIVEREF(__pyx_t_17);
      PyTuple_SET_ITEM(__pyx_t_15, 7, __pyx_t_17);
      __pyx_t_17 = 0;
      __Pyx_INCREF(__pyx_kp_u__10);
      __pyx_t_6 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__10);
      PyTuple_SET_ITEM(__pyx_t_15, 8, __pyx_kp_u__10);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":814
 *             order_type_str = order_type.name.lower()
 *             self.logger().network(
 *                 f"Error submitting buy {order_type_str} order to Bittrex for "             # <<<<<<<<<<<<<<
 *                 f"{decimal_amount} {trading_pair} "
 *                 f"{decimal_price if order_type in [OrderType.LIMIT, OrderType.LIMIT_MAKER] else ''}.",
 */
      __pyx_t_17 = __Pyx_PyUnicode_Join(__pyx_t_15, 9, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 814, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":813
 *             self.c_stop_tracking_order(order_id)
 *             order_type_str = order_type.name.lower()
 *             self.logger().network(             # <<<<<<<<<<<<<<
 *                 f"Error submitting buy {order_type_str} order to Bittrex for "
 *                 f"{decimal_amount} {trading_pair} "
 */
      __pyx_t_15 = PyTuple_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 813, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_17);
      PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_17);
      __pyx_t_17 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":817
 *                 f"{decimal_amount} {trading_pair} "
 *                 f"{decimal_price if order_type in [OrderType.LIMIT, OrderType.LIMIT_MAKER] else ''}.",
 *                 exc_info=True,             # <<<<<<<<<<<<<<
 *                 app_warning_msg=f"Failed to submit buy order to Bittrex. Check API key and network connection."
 *             )
 */
      __pyx_t_17 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 817, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_17);
      if (PyDict_SetItem(__pyx_t_17, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 817, __pyx_L10_except_error)
      if (PyDict_SetItem(__pyx_t_17, __pyx_n_s_app_warning_msg, __pyx_kp_u_Failed_to_submit_buy_order_to_Bi) < 0) __PYX_ERR(0, 817, __pyx_L10_except_error)

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":813
 *             self.c_stop_tracking_order(order_id)
 *             order_type_str = order_type.name.lower()
 *             self.logger().network(             # <<<<<<<<<<<<<<
 *                 f"Error submitting buy {order_type_str} order to Bittrex for "
 *                 f"{decimal_amount} {trading_pair} "
 */
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_15, __pyx_t_17); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 813, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":820
 *                 app_warning_msg=f"Failed to submit buy order to Bittrex. Check API key and network connection."
 *             )
 *             self.c_trigger_event(self.MARKET_ORDER_FAILURE_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                  MarketOrderFailureEvent(
 *                                      self._current_timestamp,
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 820, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_14 = __Pyx_PyInt_As_int64_t(__pyx_t_11); if (unlikely((__pyx_t_14 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 820, __pyx_L10_except_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":821
 *             )
 *             self.c_trigger_event(self.MARKET_ORDER_FAILURE_EVENT_TAG,
 *                                  MarketOrderFailureEvent(             # <<<<<<<<<<<<<<
 *                                      self._current_timestamp,
 *                                      order_id,
 */
      __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_MarketOrderFailureEvent); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 821, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_17);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":822
 *             self.c_trigger_event(self.MARKET_ORDER_FAILURE_EVENT_TAG,
 *                                  MarketOrderFailureEvent(
 *                                      self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                      order_id,
 *                                      order_type
 */
      __pyx_t_15 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 822, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_15);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":824
 *                                      self._current_timestamp,
 *                                      order_id,
 *                                      order_type             # <<<<<<<<<<<<<<
 *                                  ))
 * 
 */
      __pyx_t_16 = NULL;
      __pyx_t_12 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
        __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_17);
        if (likely(__pyx_t_16)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
          __Pyx_INCREF(__pyx_t_16);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_17, function);
          __pyx_t_12 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[4] = {__pyx_t_16, __pyx_t_15, __pyx_cur_scope->__pyx_v_order_id, __pyx_cur_scope->__pyx_v_order_type};
        __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_17, __pyx_callargs+1-__pyx_t_12, 3+__pyx_t_12);
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 821, __pyx_L10_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":820
 *                 app_warning_msg=f"Failed to submit buy order to Bittrex. Check API key and network connection."
 *             )
 *             self.c_trigger_event(self.MARKET_ORDER_FAILURE_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                  MarketOrderFailureEvent(
 *                                      self._current_timestamp,
 */
      __pyx_t_17 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_14, __pyx_t_11); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 820, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      goto __pyx_L9_exception_handled;
    }
    goto __pyx_L10_except_error;
    __pyx_L10_except_error:;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":767
 *                              f"{trading_rule.min_order_size}.")
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             order_result = None
 *             self.c_start_tracking_order(
 */
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
    goto __pyx_L1_error;
    __pyx_L9_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
    __pyx_L13_try_end:;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":743
 *         return api_response
 * 
 *     async def execute_buy(self,             # <<<<<<<<<<<<<<
 *                           order_id: str,
 *                           trading_pair: str,
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("execute_buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":827
 *                                  ))
 * 
 *     cdef str c_buy(self,             # <<<<<<<<<<<<<<
 *                    str trading_pair,
 *                    object amount,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_buy(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_buy *__pyx_optional_args) {
  PyObject *__pyx_v_order_type = __pyx_k__26;
  PyObject *__pyx_v_price = __pyx_k__27;
  int64_t __pyx_v_tracking_nonce;
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int64_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_buy", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_order_type = __pyx_optional_args->order_type;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_price = __pyx_optional_args->price;
      }
    }
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":834
 *                    dict kwargs={}):
 *         cdef:
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()             # <<<<<<<<<<<<<<
 *             str order_id = str(f"buy-{trading_pair}-{tracking_nonce}")
 *         safe_ensure_future(self.execute_buy(order_id, trading_pair, amount, order_type, price))
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_get_tracking_nonce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 834, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_5 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 834, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_tracking_nonce = ((int64_t)__pyx_t_5);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":835
 *         cdef:
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()
 *             str order_id = str(f"buy-{trading_pair}-{tracking_nonce}")             # <<<<<<<<<<<<<<
 *         safe_ensure_future(self.execute_buy(order_id, trading_pair, amount, order_type, price))
 *         return order_id
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = 0;
  __pyx_t_7 = 127;
  __Pyx_INCREF(__pyx_kp_u_buy);
  __pyx_t_6 += 4;
  __Pyx_GIVEREF(__pyx_kp_u_buy);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_buy);
  __pyx_t_2 = __Pyx_PyUnicode_Unicode(__pyx_v_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_7;
  __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_kp_u__11);
  __pyx_t_6 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__11);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__11);
  __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_tracking_nonce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
  __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Str(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 835, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_order_id = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":836
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()
 *             str order_id = str(f"buy-{trading_pair}-{tracking_nonce}")
 *         safe_ensure_future(self.execute_buy(order_id, trading_pair, amount, order_type, price))             # <<<<<<<<<<<<<<
 *         return order_id
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_execute_buy); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 836, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[6] = {__pyx_t_9, __pyx_v_order_id, __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 5+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __pyx_t_8 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 836, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":837
 *             str order_id = str(f"buy-{trading_pair}-{tracking_nonce}")
 *         safe_ensure_future(self.execute_buy(order_id, trading_pair, amount, order_type, price))
 *         return order_id             # <<<<<<<<<<<<<<
 * 
 *     async def execute_sell(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_order_id);
  __pyx_r = __pyx_v_order_id;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":827
 *                                  ))
 * 
 *     cdef str c_buy(self,             # <<<<<<<<<<<<<<
 *                    str trading_pair,
 *                    object amount,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.c_buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_49generator11(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":839
 *         return order_id
 * 
 *     async def execute_sell(self,             # <<<<<<<<<<<<<<
 *                            order_id: str,
 *                            trading_pair: str,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_48execute_sell(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_48execute_sell = {"execute_sell", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_48execute_sell, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_48execute_sell(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_price = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_sell (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_id,&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_order_id,&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    #endif
    PyObject* values[5] = {0,0,0,0,0};
    values[3] = __pyx_k__28;
    values[4] = __pyx_k__29;
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_id)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 839, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 839, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("execute_sell", 0, 3, 5, 1); __PYX_ERR(0, 839, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_amount)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 839, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("execute_sell", 0, 3, 5, 2); __PYX_ERR(0, 839, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_type);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 839, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_price);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 839, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "execute_sell") < 0)) __PYX_ERR(0, 839, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_order_id = ((PyObject*)values[0]);
    __pyx_v_trading_pair = ((PyObject*)values[1]);
    __pyx_v_amount = values[2];
    __pyx_v_order_type = values[3];
    __pyx_v_price = values[4];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("execute_sell", 0, 3, 5, __pyx_nargs); __PYX_ERR(0, 839, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.execute_sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order_id), (&PyUnicode_Type), 1, "order_id", 1))) __PYX_ERR(0, 840, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 841, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_47execute_sell(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), __pyx_v_order_id, __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_47execute_sell(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_order_id, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("execute_sell", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 839, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_order_id = __pyx_v_order_id;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_id);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_id);
  __pyx_cur_scope->__pyx_v_trading_pair = __pyx_v_trading_pair;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __pyx_cur_scope->__pyx_v_amount = __pyx_v_amount;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_amount);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_amount);
  __pyx_cur_scope->__pyx_v_order_type = __pyx_v_order_type;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_type);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_type);
  __pyx_cur_scope->__pyx_v_price = __pyx_v_price;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_price);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_price);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_49generator11, __pyx_codeobj__30, (PyObject *) __pyx_cur_scope, __pyx_n_s_execute_sell, __pyx_n_s_BittrexExchange_execute_sell, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 839, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.execute_sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_49generator11(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  int64_t __pyx_t_14;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_sell", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L17_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 839, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":846
 *                            price: Optional[Decimal] = NaN):
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]             # <<<<<<<<<<<<<<
 *             double quote_amount
 *             object decimal_amount
 */
  if (unlikely(__pyx_cur_scope->__pyx_v_self->_trading_rules == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 846, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyDict_GetItem(__pyx_cur_scope->__pyx_v_self->_trading_rules, __pyx_cur_scope->__pyx_v_trading_pair); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule))))) __PYX_ERR(0, 846, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_trading_rule = ((struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":853
 *             object tracked_order
 * 
 *         decimal_amount = self.c_quantize_order_amount(trading_pair, amount)             # <<<<<<<<<<<<<<
 *         if order_type is OrderType.LIMIT or order_type is OrderType.LIMIT_MAKER:
 *             decimal_price = self.c_quantize_order_price(trading_pair, price)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_quantize_order_amount(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_amount, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 853, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_decimal_amount = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":854
 * 
 *         decimal_amount = self.c_quantize_order_amount(trading_pair, amount)
 *         if order_type is OrderType.LIMIT or order_type is OrderType.LIMIT_MAKER:             # <<<<<<<<<<<<<<
 *             decimal_price = self.c_quantize_order_price(trading_pair, price)
 *         else:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__pyx_cur_scope->__pyx_v_order_type == __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_LIMIT_MAKER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 854, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = (__pyx_cur_scope->__pyx_v_order_type == __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_2 = __pyx_t_4;
  __pyx_L5_bool_binop_done:;
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":855
 *         decimal_amount = self.c_quantize_order_amount(trading_pair, amount)
 *         if order_type is OrderType.LIMIT or order_type is OrderType.LIMIT_MAKER:
 *             decimal_price = self.c_quantize_order_price(trading_pair, price)             # <<<<<<<<<<<<<<
 *         else:
 *             decimal_price = s_decimal_0
 */
    __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_quantize_order_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_v_decimal_price = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":854
 * 
 *         decimal_amount = self.c_quantize_order_amount(trading_pair, amount)
 *         if order_type is OrderType.LIMIT or order_type is OrderType.LIMIT_MAKER:             # <<<<<<<<<<<<<<
 *             decimal_price = self.c_quantize_order_price(trading_pair, price)
 *         else:
 */
    goto __pyx_L4;
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":857
 *             decimal_price = self.c_quantize_order_price(trading_pair, price)
 *         else:
 *             decimal_price = s_decimal_0             # <<<<<<<<<<<<<<
 * 
 *         if decimal_amount < trading_rule.min_order_size:
 */
  /*else*/ {
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 857, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_v_decimal_price = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_L4:;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":859
 *             decimal_price = s_decimal_0
 * 
 *         if decimal_amount < trading_rule.min_order_size:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Sell order amount {decimal_amount} is lower than the minimum order size "
 *                              f"{trading_rule.min_order_size}")
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_cur_scope->__pyx_v_decimal_amount, __pyx_cur_scope->__pyx_v_trading_rule->min_order_size, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 859, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 859, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2)) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":860
 * 
 *         if decimal_amount < trading_rule.min_order_size:
 *             raise ValueError(f"Sell order amount {decimal_amount} is lower than the minimum order size "             # <<<<<<<<<<<<<<
 *                              f"{trading_rule.min_order_size}")
 * 
 */
    __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = 0;
    __pyx_t_7 = 127;
    __Pyx_INCREF(__pyx_kp_u_Sell_order_amount);
    __pyx_t_6 += 18;
    __Pyx_GIVEREF(__pyx_kp_u_Sell_order_amount);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Sell_order_amount);
    __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_decimal_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
    __pyx_t_3 = 0;
    __Pyx_INCREF(__pyx_kp_u_is_lower_than_the_minimum_order);
    __pyx_t_6 += 38;
    __Pyx_GIVEREF(__pyx_kp_u_is_lower_than_the_minimum_order);
    PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_is_lower_than_the_minimum_order);

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":861
 *         if decimal_amount < trading_rule.min_order_size:
 *             raise ValueError(f"Sell order amount {decimal_amount} is lower than the minimum order size "
 *                              f"{trading_rule.min_order_size}")             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
    __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_trading_rule->min_order_size, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
    __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":860
 * 
 *         if decimal_amount < trading_rule.min_order_size:
 *             raise ValueError(f"Sell order amount {decimal_amount} is lower than the minimum order size "             # <<<<<<<<<<<<<<
 *                              f"{trading_rule.min_order_size}")
 * 
 */
    __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 860, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":859
 *             decimal_price = s_decimal_0
 * 
 *         if decimal_amount < trading_rule.min_order_size:             # <<<<<<<<<<<<<<
 *             raise ValueError(f"Sell order amount {decimal_amount} is lower than the minimum order size "
 *                              f"{trading_rule.min_order_size}")
 */
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":863
 *                              f"{trading_rule.min_order_size}")
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             order_result = None
 * 
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
    __Pyx_XGOTREF(__pyx_t_8);
    __Pyx_XGOTREF(__pyx_t_9);
    __Pyx_XGOTREF(__pyx_t_10);
    /*try:*/ {

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":864
 * 
 *         try:
 *             order_result = None             # <<<<<<<<<<<<<<
 * 
 *             self.c_start_tracking_order(
 */
      __Pyx_INCREF(Py_None);
      __Pyx_GIVEREF(Py_None);
      __pyx_cur_scope->__pyx_v_order_result = Py_None;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":871
 *                 trading_pair,
 *                 order_type,
 *                 TradeType.SELL,             # <<<<<<<<<<<<<<
 *                 decimal_price,
 *                 decimal_amount
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 871, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_SELL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 871, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":866
 *             order_result = None
 * 
 *             self.c_start_tracking_order(             # <<<<<<<<<<<<<<
 *                 order_id,
 *                 None,
 */
      __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->c_start_tracking_order(__pyx_cur_scope->__pyx_v_self, __pyx_cur_scope->__pyx_v_order_id, ((PyObject*)Py_None), __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_order_type, __pyx_t_3, __pyx_cur_scope->__pyx_v_decimal_price, __pyx_cur_scope->__pyx_v_decimal_amount); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 866, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":876
 *             )
 * 
 *             if order_type is OrderType.LIMIT or order_type is OrderType.LIMIT_MAKER:             # <<<<<<<<<<<<<<
 *                 order_result = await self.place_order(order_id,
 *                                                       trading_pair,
 */
      __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 876, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 876, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_4 = (__pyx_cur_scope->__pyx_v_order_type == __pyx_t_3);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = (__pyx_t_4 != 0);
      if (!__pyx_t_5) {
      } else {
        __pyx_t_2 = __pyx_t_5;
        goto __pyx_L15_bool_binop_done;
      }
      __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 876, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_LIMIT_MAKER); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 876, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = (__pyx_cur_scope->__pyx_v_order_type == __pyx_t_1);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_4 = (__pyx_t_5 != 0);
      __pyx_t_2 = __pyx_t_4;
      __pyx_L15_bool_binop_done:;
      if (likely(__pyx_t_2)) {

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":877
 * 
 *             if order_type is OrderType.LIMIT or order_type is OrderType.LIMIT_MAKER:
 *                 order_result = await self.place_order(order_id,             # <<<<<<<<<<<<<<
 *                                                       trading_pair,
 *                                                       decimal_amount,
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_place_order); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 877, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":882
 *                                                       False,
 *                                                       order_type,
 *                                                       decimal_price)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(f"Invalid OrderType {order_type}. Aborting.")
 */
        __pyx_t_11 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_12 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[7] = {__pyx_t_11, __pyx_cur_scope->__pyx_v_order_id, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_decimal_amount, Py_False, __pyx_cur_scope->__pyx_v_order_type, __pyx_cur_scope->__pyx_v_decimal_price};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_12, 6+__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 877, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_8);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_8;
          __Pyx_XGIVEREF(__pyx_t_9);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_9;
          __Pyx_XGIVEREF(__pyx_t_10);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_10;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 1;
          return __pyx_r;
          __pyx_L17_resume_from_await:;
          __pyx_t_8 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_8);
          __pyx_t_9 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_9);
          __pyx_t_10 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_10);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 877, __pyx_L8_error)
          __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
        } else {
          __pyx_t_1 = NULL;
          if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 877, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_order_result);
        __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_order_result, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":876
 *             )
 * 
 *             if order_type is OrderType.LIMIT or order_type is OrderType.LIMIT_MAKER:             # <<<<<<<<<<<<<<
 *                 order_result = await self.place_order(order_id,
 *                                                       trading_pair,
 */
        goto __pyx_L14;
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":884
 *                                                       decimal_price)
 *             else:
 *                 raise ValueError(f"Invalid OrderType {order_type}. Aborting.")             # <<<<<<<<<<<<<<
 * 
 *             exchange_order_id = order_result["id"]
 */
      /*else*/ {
        __pyx_t_1 = PyTuple_New(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 884, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = 0;
        __pyx_t_7 = 127;
        __Pyx_INCREF(__pyx_kp_u_Invalid_OrderType);
        __pyx_t_6 += 18;
        __Pyx_GIVEREF(__pyx_kp_u_Invalid_OrderType);
        PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_Invalid_OrderType);
        __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_order_type, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 884, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_INCREF(__pyx_kp_u_Aborting);
        __pyx_t_6 += 11;
        __Pyx_GIVEREF(__pyx_kp_u_Aborting);
        PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u_Aborting);
        __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 3, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 884, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_builtin_ValueError, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 884, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_Raise(__pyx_t_1, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __PYX_ERR(0, 884, __pyx_L8_error)
      }
      __pyx_L14:;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":886
 *                 raise ValueError(f"Invalid OrderType {order_type}. Aborting.")
 * 
 *             exchange_order_id = order_result["id"]             # <<<<<<<<<<<<<<
 *             tracked_order = self._in_flight_orders.get(order_id)
 *             if tracked_order is not None and exchange_order_id:
 */
      __pyx_t_1 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_order_result, __pyx_n_u_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 886, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_1);
      if (!(likely(PyUnicode_CheckExact(__pyx_t_1))||((__pyx_t_1) == Py_None) || __Pyx_RaiseUnexpectedTypeError("unicode", __pyx_t_1))) __PYX_ERR(0, 886, __pyx_L8_error)
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_v_exchange_order_id = ((PyObject*)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":887
 * 
 *             exchange_order_id = order_result["id"]
 *             tracked_order = self._in_flight_orders.get(order_id)             # <<<<<<<<<<<<<<
 *             if tracked_order is not None and exchange_order_id:
 *                 tracked_order.update_exchange_order_id(exchange_order_id)
 */
      if (unlikely(__pyx_cur_scope->__pyx_v_self->_in_flight_orders == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
        __PYX_ERR(0, 887, __pyx_L8_error)
      }
      __pyx_t_1 = __Pyx_PyDict_GetItemDefault(__pyx_cur_scope->__pyx_v_self->_in_flight_orders, __pyx_cur_scope->__pyx_v_order_id, Py_None); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 887, __pyx_L8_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_cur_scope->__pyx_v_tracked_order = __pyx_t_1;
      __pyx_t_1 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":888
 *             exchange_order_id = order_result["id"]
 *             tracked_order = self._in_flight_orders.get(order_id)
 *             if tracked_order is not None and exchange_order_id:             # <<<<<<<<<<<<<<
 *                 tracked_order.update_exchange_order_id(exchange_order_id)
 *                 order_type_str = order_type.name.lower()
 */
      __pyx_t_4 = (__pyx_cur_scope->__pyx_v_tracked_order != Py_None);
      __pyx_t_5 = (__pyx_t_4 != 0);
      if (__pyx_t_5) {
      } else {
        __pyx_t_2 = __pyx_t_5;
        goto __pyx_L19_bool_binop_done;
      }
      __pyx_t_5 = (__pyx_cur_scope->__pyx_v_exchange_order_id != Py_None)&&(__Pyx_PyUnicode_IS_TRUE(__pyx_cur_scope->__pyx_v_exchange_order_id) != 0);
      __pyx_t_2 = __pyx_t_5;
      __pyx_L19_bool_binop_done:;
      if (__pyx_t_2) {

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":889
 *             tracked_order = self._in_flight_orders.get(order_id)
 *             if tracked_order is not None and exchange_order_id:
 *                 tracked_order.update_exchange_order_id(exchange_order_id)             # <<<<<<<<<<<<<<
 *                 order_type_str = order_type.name.lower()
 *                 self.logger().info(f"Created {order_type_str} sell order {order_id} for "
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_update_exchange_order_id); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 889, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_12 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_cur_scope->__pyx_v_exchange_order_id};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_12, 1+__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 889, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":890
 *             if tracked_order is not None and exchange_order_id:
 *                 tracked_order.update_exchange_order_id(exchange_order_id)
 *                 order_type_str = order_type.name.lower()             # <<<<<<<<<<<<<<
 *                 self.logger().info(f"Created {order_type_str} sell order {order_id} for "
 *                                    f"{decimal_amount} {trading_pair}.")
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order_type, __pyx_n_s_name_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 890, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_lower); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 890, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_11))) {
          __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_11);
          if (likely(__pyx_t_3)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
            __Pyx_INCREF(__pyx_t_3);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_11, function);
            __pyx_t_12 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_3, };
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_12, 0+__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 890, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_cur_scope->__pyx_v_order_type_str = __pyx_t_1;
        __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":891
 *                 tracked_order.update_exchange_order_id(exchange_order_id)
 *                 order_type_str = order_type.name.lower()
 *                 self.logger().info(f"Created {order_type_str} sell order {order_id} for "             # <<<<<<<<<<<<<<
 *                                    f"{decimal_amount} {trading_pair}.")
 *                 self.c_trigger_event(self.MARKET_SELL_ORDER_CREATED_EVENT_TAG,
 */
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 891, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_13 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_13)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_13);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_12 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_13, };
          __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_12, 0+__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 891, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_info); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 891, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyTuple_New(9); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 891, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_11);
        __pyx_t_6 = 0;
        __pyx_t_7 = 127;
        __Pyx_INCREF(__pyx_kp_u_Created);
        __pyx_t_6 += 8;
        __Pyx_GIVEREF(__pyx_kp_u_Created);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_kp_u_Created);
        __pyx_t_13 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_order_type_str, __pyx_empty_unicode); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 891, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_11, 1, __pyx_t_13);
        __pyx_t_13 = 0;
        __Pyx_INCREF(__pyx_kp_u_sell_order);
        __pyx_t_6 += 12;
        __Pyx_GIVEREF(__pyx_kp_u_sell_order);
        PyTuple_SET_ITEM(__pyx_t_11, 2, __pyx_kp_u_sell_order);
        __pyx_t_13 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_order_id); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 891, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_11, 3, __pyx_t_13);
        __pyx_t_13 = 0;
        __Pyx_INCREF(__pyx_kp_u_for);
        __pyx_t_6 += 5;
        __Pyx_GIVEREF(__pyx_kp_u_for);
        PyTuple_SET_ITEM(__pyx_t_11, 4, __pyx_kp_u_for);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":892
 *                 order_type_str = order_type.name.lower()
 *                 self.logger().info(f"Created {order_type_str} sell order {order_id} for "
 *                                    f"{decimal_amount} {trading_pair}.")             # <<<<<<<<<<<<<<
 *                 self.c_trigger_event(self.MARKET_SELL_ORDER_CREATED_EVENT_TAG,
 *                                      SellOrderCreatedEvent(
 */
        __pyx_t_13 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_decimal_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 892, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_11, 5, __pyx_t_13);
        __pyx_t_13 = 0;
        __Pyx_INCREF(__pyx_kp_u__12);
        __pyx_t_6 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__12);
        PyTuple_SET_ITEM(__pyx_t_11, 6, __pyx_kp_u__12);
        __pyx_t_13 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_trading_pair); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 892, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_13) : __pyx_t_7;
        __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_13);
        PyTuple_SET_ITEM(__pyx_t_11, 7, __pyx_t_13);
        __pyx_t_13 = 0;
        __Pyx_INCREF(__pyx_kp_u__10);
        __pyx_t_6 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__10);
        PyTuple_SET_ITEM(__pyx_t_11, 8, __pyx_kp_u__10);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":891
 *                 tracked_order.update_exchange_order_id(exchange_order_id)
 *                 order_type_str = order_type.name.lower()
 *                 self.logger().info(f"Created {order_type_str} sell order {order_id} for "             # <<<<<<<<<<<<<<
 *                                    f"{decimal_amount} {trading_pair}.")
 *                 self.c_trigger_event(self.MARKET_SELL_ORDER_CREATED_EVENT_TAG,
 */
        __pyx_t_13 = __Pyx_PyUnicode_Join(__pyx_t_11, 9, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 891, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_12 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_t_13};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_12, 1+__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 891, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":893
 *                 self.logger().info(f"Created {order_type_str} sell order {order_id} for "
 *                                    f"{decimal_amount} {trading_pair}.")
 *                 self.c_trigger_event(self.MARKET_SELL_ORDER_CREATED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                      SellOrderCreatedEvent(
 *                                          self._current_timestamp,
 */
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_14 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_14 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 893, __pyx_L8_error)
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":894
 *                                    f"{decimal_amount} {trading_pair}.")
 *                 self.c_trigger_event(self.MARKET_SELL_ORDER_CREATED_EVENT_TAG,
 *                                      SellOrderCreatedEvent(             # <<<<<<<<<<<<<<
 *                                          self._current_timestamp,
 *                                          order_type,
 */
        __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_SellOrderCreatedEvent); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 894, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":895
 *                 self.c_trigger_event(self.MARKET_SELL_ORDER_CREATED_EVENT_TAG,
 *                                      SellOrderCreatedEvent(
 *                                          self._current_timestamp,             # <<<<<<<<<<<<<<
 *                                          order_type,
 *                                          trading_pair,
 */
        __pyx_t_13 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 895, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_13);

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":900
 *                                          decimal_amount,
 *                                          decimal_price,
 *                                          order_id             # <<<<<<<<<<<<<<
 *                                      ))
 *         except asyncio.CancelledError:
 */
        __pyx_t_11 = NULL;
        __pyx_t_12 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
          __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_3);
          if (likely(__pyx_t_11)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
            __Pyx_INCREF(__pyx_t_11);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_3, function);
            __pyx_t_12 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[7] = {__pyx_t_11, __pyx_t_13, __pyx_cur_scope->__pyx_v_order_type, __pyx_cur_scope->__pyx_v_trading_pair, __pyx_cur_scope->__pyx_v_decimal_amount, __pyx_cur_scope->__pyx_v_decimal_price, __pyx_cur_scope->__pyx_v_order_id};
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_12, 6+__pyx_t_12);
          __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 894, __pyx_L8_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        }

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":893
 *                 self.logger().info(f"Created {order_type_str} sell order {order_id} for "
 *                                    f"{decimal_amount} {trading_pair}.")
 *                 self.c_trigger_event(self.MARKET_SELL_ORDER_CREATED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                      SellOrderCreatedEvent(
 *                                          self._current_timestamp,
 */
        __pyx_t_3 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_14, __pyx_t_1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 893, __pyx_L8_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":888
 *             exchange_order_id = order_result["id"]
 *             tracked_order = self._in_flight_orders.get(order_id)
 *             if tracked_order is not None and exchange_order_id:             # <<<<<<<<<<<<<<
 *                 tracked_order.update_exchange_order_id(exchange_order_id)
 *                 order_type_str = order_type.name.lower()
 */
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":863
 *                              f"{trading_rule.min_order_size}")
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             order_result = None
 * 
 */
    }
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    goto __pyx_L13_try_end;
    __pyx_L8_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":902
 *                                          order_id
 *                                      ))
 *         except asyncio.CancelledError:             # <<<<<<<<<<<<<<
 *             raise
 *         except Exception:
 */
    __Pyx_ErrFetch(&__pyx_t_3, &__pyx_t_1, &__pyx_t_13);
    __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 902, __pyx_L10_except_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_CancelledError); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 902, __pyx_L10_except_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __pyx_t_12 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_3, __pyx_t_15);
    __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_ErrRestore(__pyx_t_3, __pyx_t_1, __pyx_t_13);
    __pyx_t_3 = 0; __pyx_t_1 = 0; __pyx_t_13 = 0;
    if (__pyx_t_12) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.execute_sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_13, &__pyx_t_1, &__pyx_t_3) < 0) __PYX_ERR(0, 902, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_3);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":903
 *                                      ))
 *         except asyncio.CancelledError:
 *             raise             # <<<<<<<<<<<<<<
 *         except Exception:
 *             tracked_order = self._in_flight_orders.get(order_id)
 */
      __Pyx_GIVEREF(__pyx_t_13);
      __Pyx_GIVEREF(__pyx_t_1);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_ErrRestoreWithState(__pyx_t_13, __pyx_t_1, __pyx_t_3);
      __pyx_t_13 = 0; __pyx_t_1 = 0; __pyx_t_3 = 0; 
      __PYX_ERR(0, 903, __pyx_L10_except_error)
    }

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":904
 *         except asyncio.CancelledError:
 *             raise
 *         except Exception:             # <<<<<<<<<<<<<<
 *             tracked_order = self._in_flight_orders.get(order_id)
 *             tracked_order.last_state = "FAILURE"
 */
    __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_12) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.execute_sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_1, &__pyx_t_13) < 0) __PYX_ERR(0, 904, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_13);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":905
 *             raise
 *         except Exception:
 *             tracked_order = self._in_flight_orders.get(order_id)             # <<<<<<<<<<<<<<
 *             tracked_order.last_state = "FAILURE"
 *             self.c_stop_tracking_order(order_id)
 */
      if (unlikely(__pyx_cur_scope->__pyx_v_self->_in_flight_orders == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
        __PYX_ERR(0, 905, __pyx_L10_except_error)
      }
      __pyx_t_15 = __Pyx_PyDict_GetItemDefault(__pyx_cur_scope->__pyx_v_self->_in_flight_orders, __pyx_cur_scope->__pyx_v_order_id, Py_None); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 905, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_tracked_order);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_15);
      __pyx_t_15 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":906
 *         except Exception:
 *             tracked_order = self._in_flight_orders.get(order_id)
 *             tracked_order.last_state = "FAILURE"             # <<<<<<<<<<<<<<
 *             self.c_stop_tracking_order(order_id)
 *             order_type_str = order_type.name.lower()
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_last_state, __pyx_n_u_FAILURE) < 0) __PYX_ERR(0, 906, __pyx_L10_except_error)

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":907
 *             tracked_order = self._in_flight_orders.get(order_id)
 *             tracked_order.last_state = "FAILURE"
 *             self.c_stop_tracking_order(order_id)             # <<<<<<<<<<<<<<
 *             order_type_str = order_type.name.lower()
 *             self.logger().network(
 */
      __pyx_t_15 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_stop_tracking_order(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), __pyx_cur_scope->__pyx_v_order_id); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 907, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":908
 *             tracked_order.last_state = "FAILURE"
 *             self.c_stop_tracking_order(order_id)
 *             order_type_str = order_type.name.lower()             # <<<<<<<<<<<<<<
 *             self.logger().network(
 *                 f"Error submitting sell {order_type_str} order to Bittrex for "
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_order_type, __pyx_n_s_name_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 908, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_lower); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 908, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_11 = NULL;
      __pyx_t_12 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_16);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_16, function);
          __pyx_t_12 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_11, };
        __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_12, 0+__pyx_t_12);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 908, __pyx_L10_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      }
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order_type_str);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order_type_str, __pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_15);
      __pyx_t_15 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":909
 *             self.c_stop_tracking_order(order_id)
 *             order_type_str = order_type.name.lower()
 *             self.logger().network(             # <<<<<<<<<<<<<<
 *                 f"Error submitting sell {order_type_str} order to Bittrex for "
 *                 f"{decimal_amount} {trading_pair} "
 */
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 909, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_16);
      __pyx_t_11 = NULL;
      __pyx_t_12 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_16))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_16);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_16);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_16, function);
          __pyx_t_12 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_11, };
        __pyx_t_15 = __Pyx_PyObject_FastCall(__pyx_t_16, __pyx_callargs+1-__pyx_t_12, 0+__pyx_t_12);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 909, __pyx_L10_except_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      }
      __pyx_t_16 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_network); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 909, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_16);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":910
 *             order_type_str = order_type.name.lower()
 *             self.logger().network(
 *                 f"Error submitting sell {order_type_str} order to Bittrex for "             # <<<<<<<<<<<<<<
 *                 f"{decimal_amount} {trading_pair} "
 *                 f"{decimal_price if order_type in [OrderType.LIMIT, OrderType.LIMIT_MAKER] else ''}.",
 */
      __pyx_t_15 = PyTuple_New(9); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 910, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_6 = 0;
      __pyx_t_7 = 127;
      __Pyx_INCREF(__pyx_kp_u_Error_submitting_sell);
      __pyx_t_6 += 22;
      __Pyx_GIVEREF(__pyx_kp_u_Error_submitting_sell);
      PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_kp_u_Error_submitting_sell);
      __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_order_type_str, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 910, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_7;
      __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_15, 1, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_INCREF(__pyx_kp_u_order_to_Bittrex_for);
      __pyx_t_6 += 22;
      __Pyx_GIVEREF(__pyx_kp_u_order_to_Bittrex_for);
      PyTuple_SET_ITEM(__pyx_t_15, 2, __pyx_kp_u_order_to_Bittrex_for);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":911
 *             self.logger().network(
 *                 f"Error submitting sell {order_type_str} order to Bittrex for "
 *                 f"{decimal_amount} {trading_pair} "             # <<<<<<<<<<<<<<
 *                 f"{decimal_price if order_type in [OrderType.LIMIT, OrderType.LIMIT_MAKER] else ''}.",
 *                 exc_info=True,
 */
      __pyx_t_11 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_decimal_amount, __pyx_empty_unicode); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 911, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_7;
      __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_15, 3, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_INCREF(__pyx_kp_u__12);
      __pyx_t_6 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__12);
      PyTuple_SET_ITEM(__pyx_t_15, 4, __pyx_kp_u__12);
      __pyx_t_11 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_trading_pair); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 911, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_11) : __pyx_t_7;
      __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      PyTuple_SET_ITEM(__pyx_t_15, 5, __pyx_t_11);
      __pyx_t_11 = 0;
      __Pyx_INCREF(__pyx_kp_u__12);
      __pyx_t_6 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__12);
      PyTuple_SET_ITEM(__pyx_t_15, 6, __pyx_kp_u__12);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":912
 *                 f"Error submitting sell {order_type_str} order to Bittrex for "
 *                 f"{decimal_amount} {trading_pair} "
 *                 f"{decimal_price if order_type in [OrderType.LIMIT, OrderType.LIMIT_MAKER] else ''}.",             # <<<<<<<<<<<<<<
 *                 exc_info=True,
 *                 app_warning_msg=f"Failed to submit sell order to Bittrex. Check API key and network connection."
 */
      __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_type);
      __pyx_t_17 = __pyx_cur_scope->__pyx_v_order_type;
      __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 912, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 912, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_18 = PyObject_RichCompare(__pyx_t_17, __pyx_t_19, Py_EQ); __Pyx_XGOTREF(__pyx_t_18); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 912, __pyx_L10_except_error)
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_18); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 912, __pyx_L10_except_error)
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      if (!__pyx_t_5) {
      } else {
        __pyx_t_2 = __pyx_t_5;
        goto __pyx_L25_bool_binop_done;
      }
      __Pyx_GetModuleGlobalName(__pyx_t_18, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 912, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_18);
      __pyx_t_19 = __Pyx_PyObject_GetAttrStr(__pyx_t_18, __pyx_n_s_LIMIT_MAKER); if (unlikely(!__pyx_t_19)) __PYX_ERR(0, 912, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_19);
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_18 = PyObject_RichCompare(__pyx_t_17, __pyx_t_19, Py_EQ); __Pyx_XGOTREF(__pyx_t_18); if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 912, __pyx_L10_except_error)
      __Pyx_DECREF(__pyx_t_19); __pyx_t_19 = 0;
      __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_18); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 912, __pyx_L10_except_error)
      __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
      __pyx_t_2 = __pyx_t_5;
      __pyx_L25_bool_binop_done:;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      if ((__pyx_t_2 != 0)) {
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_decimal_price);
        __pyx_t_11 = __pyx_cur_scope->__pyx_v_decimal_price;
      } else {
        __Pyx_INCREF(__pyx_kp_u_);
        __pyx_t_11 = __pyx_kp_u_;
      }
      __pyx_t_17 = __Pyx_PyObject_FormatSimple(__pyx_t_11, __pyx_empty_unicode); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 912, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) : __pyx_t_7;
      __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_17);
      __Pyx_GIVEREF(__pyx_t_17);
      PyTuple_SET_ITEM(__pyx_t_15, 7, __pyx_t_17);
      __pyx_t_17 = 0;
      __Pyx_INCREF(__pyx_kp_u__10);
      __pyx_t_6 += 1;
      __Pyx_GIVEREF(__pyx_kp_u__10);
      PyTuple_SET_ITEM(__pyx_t_15, 8, __pyx_kp_u__10);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":910
 *             order_type_str = order_type.name.lower()
 *             self.logger().network(
 *                 f"Error submitting sell {order_type_str} order to Bittrex for "             # <<<<<<<<<<<<<<
 *                 f"{decimal_amount} {trading_pair} "
 *                 f"{decimal_price if order_type in [OrderType.LIMIT, OrderType.LIMIT_MAKER] else ''}.",
 */
      __pyx_t_17 = __Pyx_PyUnicode_Join(__pyx_t_15, 9, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 910, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":909
 *             self.c_stop_tracking_order(order_id)
 *             order_type_str = order_type.name.lower()
 *             self.logger().network(             # <<<<<<<<<<<<<<
 *                 f"Error submitting sell {order_type_str} order to Bittrex for "
 *                 f"{decimal_amount} {trading_pair} "
 */
      __pyx_t_15 = PyTuple_New(1); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 909, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_GIVEREF(__pyx_t_17);
      PyTuple_SET_ITEM(__pyx_t_15, 0, __pyx_t_17);
      __pyx_t_17 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":913
 *                 f"{decimal_amount} {trading_pair} "
 *                 f"{decimal_price if order_type in [OrderType.LIMIT, OrderType.LIMIT_MAKER] else ''}.",
 *                 exc_info=True,             # <<<<<<<<<<<<<<
 *                 app_warning_msg=f"Failed to submit sell order to Bittrex. Check API key and network connection."
 *             )
 */
      __pyx_t_17 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 913, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_17);
      if (PyDict_SetItem(__pyx_t_17, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 913, __pyx_L10_except_error)
      if (PyDict_SetItem(__pyx_t_17, __pyx_n_s_app_warning_msg, __pyx_kp_u_Failed_to_submit_sell_order_to_B) < 0) __PYX_ERR(0, 913, __pyx_L10_except_error)

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":909
 *             self.c_stop_tracking_order(order_id)
 *             order_type_str = order_type.name.lower()
 *             self.logger().network(             # <<<<<<<<<<<<<<
 *                 f"Error submitting sell {order_type_str} order to Bittrex for "
 *                 f"{decimal_amount} {trading_pair} "
 */
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_16, __pyx_t_15, __pyx_t_17); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 909, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":916
 *                 app_warning_msg=f"Failed to submit sell order to Bittrex. Check API key and network connection."
 *             )
 *             self.c_trigger_event(self.MARKET_ORDER_FAILURE_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                  MarketOrderFailureEvent(self._current_timestamp, order_id, order_type))
 * 
 */
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 916, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_14 = __Pyx_PyInt_As_int64_t(__pyx_t_11); if (unlikely((__pyx_t_14 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 916, __pyx_L10_except_error)
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":917
 *             )
 *             self.c_trigger_event(self.MARKET_ORDER_FAILURE_EVENT_TAG,
 *                                  MarketOrderFailureEvent(self._current_timestamp, order_id, order_type))             # <<<<<<<<<<<<<<
 * 
 *     cdef str c_sell(self,
 */
      __Pyx_GetModuleGlobalName(__pyx_t_17, __pyx_n_s_MarketOrderFailureEvent); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 917, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_17);
      __pyx_t_15 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 917, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_15);
      __pyx_t_16 = NULL;
      __pyx_t_12 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_17))) {
        __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_17);
        if (likely(__pyx_t_16)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_17);
          __Pyx_INCREF(__pyx_t_16);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_17, function);
          __pyx_t_12 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[4] = {__pyx_t_16, __pyx_t_15, __pyx_cur_scope->__pyx_v_order_id, __pyx_cur_scope->__pyx_v_order_type};
        __pyx_t_11 = __Pyx_PyObject_FastCall(__pyx_t_17, __pyx_callargs+1-__pyx_t_12, 3+__pyx_t_12);
        __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 917, __pyx_L10_except_error)
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":916
 *                 app_warning_msg=f"Failed to submit sell order to Bittrex. Check API key and network connection."
 *             )
 *             self.c_trigger_event(self.MARKET_ORDER_FAILURE_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                  MarketOrderFailureEvent(self._current_timestamp, order_id, order_type))
 * 
 */
      __pyx_t_17 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_14, __pyx_t_11); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 916, __pyx_L10_except_error)
      __Pyx_GOTREF(__pyx_t_17);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      goto __pyx_L9_exception_handled;
    }
    goto __pyx_L10_except_error;
    __pyx_L10_except_error:;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":863
 *                              f"{trading_rule.min_order_size}")
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             order_result = None
 * 
 */
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
    goto __pyx_L1_error;
    __pyx_L9_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_8);
    __Pyx_XGIVEREF(__pyx_t_9);
    __Pyx_XGIVEREF(__pyx_t_10);
    __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
    __pyx_L13_try_end:;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":839
 *         return order_id
 * 
 *     async def execute_sell(self,             # <<<<<<<<<<<<<<
 *                            order_id: str,
 *                            trading_pair: str,
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_XDECREF(__pyx_t_18);
  __Pyx_XDECREF(__pyx_t_19);
  __Pyx_AddTraceback("execute_sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":919
 *                                  MarketOrderFailureEvent(self._current_timestamp, order_id, order_type))
 * 
 *     cdef str c_sell(self,             # <<<<<<<<<<<<<<
 *                     str trading_pair,
 *                     object amount,
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_sell(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, struct __pyx_opt_args_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_sell *__pyx_optional_args) {
  PyObject *__pyx_v_order_type = __pyx_k__31;
  PyObject *__pyx_v_price = ((PyObject *)__pyx_float_0_0);
  int64_t __pyx_v_tracking_nonce;
  PyObject *__pyx_v_order_id = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int64_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  Py_UCS4 __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_sell", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_order_type = __pyx_optional_args->order_type;
      if (__pyx_optional_args->__pyx_n > 1) {
        __pyx_v_price = __pyx_optional_args->price;
      }
    }
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":926
 *                     dict kwargs={}):
 *         cdef:
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()             # <<<<<<<<<<<<<<
 *             str order_id = str(f"sell-{trading_pair}-{tracking_nonce}")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_get_tracking_nonce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 926, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __pyx_t_5 = __Pyx_PyInt_As_int64_t(__pyx_t_1); if (unlikely((__pyx_t_5 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 926, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_tracking_nonce = ((int64_t)__pyx_t_5);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":927
 *         cdef:
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()
 *             str order_id = str(f"sell-{trading_pair}-{tracking_nonce}")             # <<<<<<<<<<<<<<
 * 
 *         safe_ensure_future(self.execute_sell(order_id, trading_pair, amount, order_type, price))
 */
  __pyx_t_1 = PyTuple_New(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = 0;
  __pyx_t_7 = 127;
  __Pyx_INCREF(__pyx_kp_u_sell);
  __pyx_t_6 += 5;
  __Pyx_GIVEREF(__pyx_kp_u_sell);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_kp_u_sell);
  __pyx_t_2 = __Pyx_PyUnicode_Unicode(__pyx_v_trading_pair); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_2) : __pyx_t_7;
  __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_INCREF(__pyx_kp_u__11);
  __pyx_t_6 += 1;
  __Pyx_GIVEREF(__pyx_kp_u__11);
  PyTuple_SET_ITEM(__pyx_t_1, 2, __pyx_kp_u__11);
  __pyx_t_2 = __Pyx_PyInt_From_int64_t(__pyx_v_tracking_nonce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_2, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_7) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_7;
  __pyx_t_6 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_1, 3, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_1, 4, __pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Str(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 927, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_order_id = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":929
 *             str order_id = str(f"sell-{trading_pair}-{tracking_nonce}")
 * 
 *         safe_ensure_future(self.execute_sell(order_id, trading_pair, amount, order_type, price))             # <<<<<<<<<<<<<<
 *         return order_id
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_execute_sell); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 929, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
    if (likely(__pyx_t_9)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_8, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[6] = {__pyx_t_9, __pyx_v_order_id, __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_4, 5+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 929, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __pyx_t_8 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_8)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_2};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 929, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":930
 * 
 *         safe_ensure_future(self.execute_sell(order_id, trading_pair, amount, order_type, price))
 *         return order_id             # <<<<<<<<<<<<<<
 * 
 *     async def execute_cancel(self, trading_pair: str, order_id: str):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_order_id);
  __pyx_r = __pyx_v_order_id;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":919
 *                                  MarketOrderFailureEvent(self._current_timestamp, order_id, order_type))
 * 
 *     cdef str c_sell(self,             # <<<<<<<<<<<<<<
 *                     str trading_pair,
 *                     object amount,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.c_sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_order_id);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_52generator12(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":932
 *         return order_id
 * 
 *     async def execute_cancel(self, trading_pair: str, order_id: str):             # <<<<<<<<<<<<<<
 *         try:
 *             tracked_order = self._in_flight_orders.get(order_id)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_51execute_cancel(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_51execute_cancel = {"execute_cancel", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_51execute_cancel, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_51execute_cancel(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_order_id = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_cancel (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_order_id,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_order_id,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_id)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("execute_cancel", 1, 2, 2, 1); __PYX_ERR(0, 932, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "execute_cancel") < 0)) __PYX_ERR(0, 932, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_order_id = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("execute_cancel", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 932, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.execute_cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 932, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_order_id), (&PyUnicode_Type), 1, "order_id", 1))) __PYX_ERR(0, 932, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_50execute_cancel(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_order_id);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_50execute_cancel(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_order_id) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("execute_cancel", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 932, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_trading_pair = __pyx_v_trading_pair;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_trading_pair);
  __pyx_cur_scope->__pyx_v_order_id = __pyx_v_order_id;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_order_id);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_order_id);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_52generator12, __pyx_codeobj__32, (PyObject *) __pyx_cur_scope, __pyx_n_s_execute_cancel, __pyx_n_s_BittrexExchange_execute_cancel, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 932, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.execute_cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_52generator12(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  Py_UCS4 __pyx_t_12;
  int64_t __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  int __pyx_t_18;
  char const *__pyx_t_19;
  PyObject *__pyx_t_20 = NULL;
  PyObject *__pyx_t_21 = NULL;
  PyObject *__pyx_t_22 = NULL;
  PyObject *__pyx_t_23 = NULL;
  PyObject *__pyx_t_24 = NULL;
  PyObject *__pyx_t_25 = NULL;
  PyObject *__pyx_t_26 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("execute_cancel", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L11_resume_from_await;
    case 2: goto __pyx_L24_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 932, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":933
 * 
 *     async def execute_cancel(self, trading_pair: str, order_id: str):
 *         try:             # <<<<<<<<<<<<<<
 *             tracked_order = self._in_flight_orders.get(order_id)
 * 
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":934
 *     async def execute_cancel(self, trading_pair: str, order_id: str):
 *         try:
 *             tracked_order = self._in_flight_orders.get(order_id)             # <<<<<<<<<<<<<<
 * 
 *             if tracked_order is None:
 */
      if (unlikely(__pyx_cur_scope->__pyx_v_self->_in_flight_orders == Py_None)) {
        PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "get");
        __PYX_ERR(0, 934, __pyx_L4_error)
      }
      __pyx_t_4 = __Pyx_PyDict_GetItemDefault(__pyx_cur_scope->__pyx_v_self->_in_flight_orders, __pyx_cur_scope->__pyx_v_order_id, Py_None); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 934, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_cur_scope->__pyx_v_tracked_order = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":936
 *             tracked_order = self._in_flight_orders.get(order_id)
 * 
 *             if tracked_order is None:             # <<<<<<<<<<<<<<
 *                 self.logger().error(f"The order {order_id} is not tracked. ")
 *                 raise ValueError
 */
      __pyx_t_5 = (__pyx_cur_scope->__pyx_v_tracked_order == Py_None);
      __pyx_t_6 = (__pyx_t_5 != 0);
      if (unlikely(__pyx_t_6)) {

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":937
 * 
 *             if tracked_order is None:
 *                 self.logger().error(f"The order {order_id} is not tracked. ")             # <<<<<<<<<<<<<<
 *                 raise ValueError
 *             path_url = f"/orders/{tracked_order.exchange_order_id}"
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 937, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = NULL;
        __pyx_t_10 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_9)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_9);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_10 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_9, };
          __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, 0+__pyx_t_10);
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 937, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_7);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_error); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 937, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 937, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_11 = 0;
        __pyx_t_12 = 127;
        __Pyx_INCREF(__pyx_kp_u_The_order);
        __pyx_t_11 += 10;
        __Pyx_GIVEREF(__pyx_kp_u_The_order);
        PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_kp_u_The_order);
        __pyx_t_9 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_order_id); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 937, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_9) : __pyx_t_12;
        __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_9);
        __pyx_t_9 = 0;
        __Pyx_INCREF(__pyx_kp_u_is_not_tracked);
        __pyx_t_11 += 17;
        __Pyx_GIVEREF(__pyx_kp_u_is_not_tracked);
        PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_kp_u_is_not_tracked);
        __pyx_t_9 = __Pyx_PyUnicode_Join(__pyx_t_7, 3, __pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 937, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = NULL;
        __pyx_t_10 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
            __pyx_t_10 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_t_9};
          __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 937, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":938
 *             if tracked_order is None:
 *                 self.logger().error(f"The order {order_id} is not tracked. ")
 *                 raise ValueError             # <<<<<<<<<<<<<<
 *             path_url = f"/orders/{tracked_order.exchange_order_id}"
 * 
 */
        __Pyx_Raise(__pyx_builtin_ValueError, 0, 0, 0);
        __PYX_ERR(0, 938, __pyx_L4_error)

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":936
 *             tracked_order = self._in_flight_orders.get(order_id)
 * 
 *             if tracked_order is None:             # <<<<<<<<<<<<<<
 *                 self.logger().error(f"The order {order_id} is not tracked. ")
 *                 raise ValueError
 */
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":939
 *                 self.logger().error(f"The order {order_id} is not tracked. ")
 *                 raise ValueError
 *             path_url = f"/orders/{tracked_order.exchange_order_id}"             # <<<<<<<<<<<<<<
 * 
 *             cancel_result = await self._api_request("DELETE", path_url=path_url)
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_exchange_order_id); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 939, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_t_4, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 939, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyUnicode_Concat(__pyx_kp_u_orders_2, __pyx_t_8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 939, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GIVEREF(__pyx_t_4);
      __pyx_cur_scope->__pyx_v_path_url = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":941
 *             path_url = f"/orders/{tracked_order.exchange_order_id}"
 * 
 *             cancel_result = await self._api_request("DELETE", path_url=path_url)             # <<<<<<<<<<<<<<
 *             if cancel_result["status"] == "CLOSED":
 *                 self.logger().info(f"Successfully cancelled order {order_id}.")
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 941, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 941, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_8);
      if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_path_url, __pyx_cur_scope->__pyx_v_path_url) < 0) __PYX_ERR(0, 941, __pyx_L4_error)
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__33, __pyx_t_8); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 941, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_9);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XGOTREF(__pyx_r);
      if (likely(__pyx_r)) {
        __Pyx_XGIVEREF(__pyx_t_1);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
        __Pyx_XGIVEREF(__pyx_t_2);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
        __Pyx_XGIVEREF(__pyx_t_3);
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, awaiting value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L11_resume_from_await:;
        __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_1);
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_2);
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = 0;
        __Pyx_XGOTREF(__pyx_t_3);
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 941, __pyx_L4_error)
        __pyx_t_9 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_9);
      } else {
        __pyx_t_9 = NULL;
        if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_9) < 0) __PYX_ERR(0, 941, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_GIVEREF(__pyx_t_9);
      __pyx_cur_scope->__pyx_v_cancel_result = __pyx_t_9;
      __pyx_t_9 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":942
 * 
 *             cancel_result = await self._api_request("DELETE", path_url=path_url)
 *             if cancel_result["status"] == "CLOSED":             # <<<<<<<<<<<<<<
 *                 self.logger().info(f"Successfully cancelled order {order_id}.")
 *                 tracked_order.last_state = "CANCELLED"
 */
      __pyx_t_9 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_cancel_result, __pyx_n_u_status); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 942, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_t_9, __pyx_n_u_CLOSED, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 942, __pyx_L4_error)
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (__pyx_t_6) {

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":943
 *             cancel_result = await self._api_request("DELETE", path_url=path_url)
 *             if cancel_result["status"] == "CLOSED":
 *                 self.logger().info(f"Successfully cancelled order {order_id}.")             # <<<<<<<<<<<<<<
 *                 tracked_order.last_state = "CANCELLED"
 *                 self.c_stop_tracking_order(order_id)
 */
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 943, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = NULL;
        __pyx_t_10 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_10 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_7, };
          __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_10, 0+__pyx_t_10);
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 943, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_info); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 943, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 943, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_11 = 0;
        __pyx_t_12 = 127;
        __Pyx_INCREF(__pyx_kp_u_Successfully_cancelled_order);
        __pyx_t_11 += 29;
        __Pyx_GIVEREF(__pyx_kp_u_Successfully_cancelled_order);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_Successfully_cancelled_order);
        __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_order_id); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 943, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_12;
        __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_7);
        __pyx_t_7 = 0;
        __Pyx_INCREF(__pyx_kp_u__10);
        __pyx_t_11 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__10);
        PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u__10);
        __pyx_t_7 = __Pyx_PyUnicode_Join(__pyx_t_8, 3, __pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 943, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = NULL;
        __pyx_t_10 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_10 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_7};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 943, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":944
 *             if cancel_result["status"] == "CLOSED":
 *                 self.logger().info(f"Successfully cancelled order {order_id}.")
 *                 tracked_order.last_state = "CANCELLED"             # <<<<<<<<<<<<<<
 *                 self.c_stop_tracking_order(order_id)
 *                 self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 */
        if (__Pyx_PyObject_SetAttrStr(__pyx_cur_scope->__pyx_v_tracked_order, __pyx_n_s_last_state, __pyx_n_u_CANCELLED) < 0) __PYX_ERR(0, 944, __pyx_L4_error)

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":945
 *                 self.logger().info(f"Successfully cancelled order {order_id}.")
 *                 tracked_order.last_state = "CANCELLED"
 *                 self.c_stop_tracking_order(order_id)             # <<<<<<<<<<<<<<
 *                 self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                      OrderCancelledEvent(self._current_timestamp, order_id))
 */
        __pyx_t_9 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_stop_tracking_order(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), __pyx_cur_scope->__pyx_v_order_id); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 945, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":946
 *                 tracked_order.last_state = "CANCELLED"
 *                 self.c_stop_tracking_order(order_id)
 *                 self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                      OrderCancelledEvent(self._current_timestamp, order_id))
 *                 return order_id
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 946, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_13 = __Pyx_PyInt_As_int64_t(__pyx_t_9); if (unlikely((__pyx_t_13 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 946, __pyx_L4_error)
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":947
 *                 self.c_stop_tracking_order(order_id)
 *                 self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                      OrderCancelledEvent(self._current_timestamp, order_id))             # <<<<<<<<<<<<<<
 *                 return order_id
 *         except asyncio.CancelledError:
 */
        __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 947, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_7 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 947, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = NULL;
        __pyx_t_10 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
            __pyx_t_10 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_t_7, __pyx_cur_scope->__pyx_v_order_id};
          __pyx_t_9 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_10, 2+__pyx_t_10);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 947, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        }

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":946
 *                 tracked_order.last_state = "CANCELLED"
 *                 self.c_stop_tracking_order(order_id)
 *                 self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                      OrderCancelledEvent(self._current_timestamp, order_id))
 *                 return order_id
 */
        __pyx_t_4 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_13, __pyx_t_9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 946, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":948
 *                 self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                      OrderCancelledEvent(self._current_timestamp, order_id))
 *                 return order_id             # <<<<<<<<<<<<<<
 *         except asyncio.CancelledError:
 *             raise
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_cur_scope->__pyx_v_order_id);
        goto __pyx_L8_try_return;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":942
 * 
 *             cancel_result = await self._api_request("DELETE", path_url=path_url)
 *             if cancel_result["status"] == "CLOSED":             # <<<<<<<<<<<<<<
 *                 self.logger().info(f"Successfully cancelled order {order_id}.")
 *                 tracked_order.last_state = "CANCELLED"
 */
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":933
 * 
 *     async def execute_cancel(self, trading_pair: str, order_id: str):
 *         try:             # <<<<<<<<<<<<<<
 *             tracked_order = self._in_flight_orders.get(order_id)
 * 
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":949
 *                                      OrderCancelledEvent(self._current_timestamp, order_id))
 *                 return order_id
 *         except asyncio.CancelledError:             # <<<<<<<<<<<<<<
 *             raise
 *         except Exception as err:
 */
    __Pyx_ErrFetch(&__pyx_t_4, &__pyx_t_9, &__pyx_t_7);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 949, __pyx_L6_except_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_CancelledError); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 949, __pyx_L6_except_error)
    __Pyx_GOTREF(__pyx_t_14);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_10 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_4, __pyx_t_14);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_ErrRestore(__pyx_t_4, __pyx_t_9, __pyx_t_7);
    __pyx_t_4 = 0; __pyx_t_9 = 0; __pyx_t_7 = 0;
    if (__pyx_t_10) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.execute_cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_9, &__pyx_t_4) < 0) __PYX_ERR(0, 949, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_4);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":950
 *                 return order_id
 *         except asyncio.CancelledError:
 *             raise             # <<<<<<<<<<<<<<
 *         except Exception as err:
 *             if "NOT_FOUND" in str(err):
 */
      __Pyx_GIVEREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ErrRestoreWithState(__pyx_t_7, __pyx_t_9, __pyx_t_4);
      __pyx_t_7 = 0; __pyx_t_9 = 0; __pyx_t_4 = 0; 
      __PYX_ERR(0, 950, __pyx_L6_except_error)
    }

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":951
 *         except asyncio.CancelledError:
 *             raise
 *         except Exception as err:             # <<<<<<<<<<<<<<
 *             if "NOT_FOUND" in str(err):
 *                 # The order was never there to begin with. So cancelling it is a no-op but semantically successful.
 */
    __pyx_t_10 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_10) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.execute_cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_9, &__pyx_t_7) < 0) __PYX_ERR(0, 951, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_9);
      __pyx_cur_scope->__pyx_v_err = __pyx_t_9;
      /*try:*/ {

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":952
 *             raise
 *         except Exception as err:
 *             if "NOT_FOUND" in str(err):             # <<<<<<<<<<<<<<
 *                 # The order was never there to begin with. So cancelling it is a no-op but semantically successful.
 *                 self.logger().info(f"The order {order_id} does not exist on Bittrex. No cancellation needed.")
 */
        __pyx_t_14 = __Pyx_PyObject_Str(__pyx_cur_scope->__pyx_v_err); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 952, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_6 = (__Pyx_PyUnicode_ContainsTF(__pyx_n_u_NOT_FOUND, __pyx_t_14, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 952, __pyx_L20_error)
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        __pyx_t_5 = (__pyx_t_6 != 0);
        if (__pyx_t_5) {

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":954
 *             if "NOT_FOUND" in str(err):
 *                 # The order was never there to begin with. So cancelling it is a no-op but semantically successful.
 *                 self.logger().info(f"The order {order_id} does not exist on Bittrex. No cancellation needed.")             # <<<<<<<<<<<<<<
 *                 self.c_stop_tracking_order(order_id)
 *                 self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 */
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 954, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_16 = NULL;
          __pyx_t_10 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_16 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_16)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_16);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
              __pyx_t_10 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_16, };
            __pyx_t_8 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_10, 0+__pyx_t_10);
            __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 954, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_8);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          }
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_info); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 954, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = PyTuple_New(3); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 954, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_11 = 0;
          __pyx_t_12 = 127;
          __Pyx_INCREF(__pyx_kp_u_The_order);
          __pyx_t_11 += 10;
          __Pyx_GIVEREF(__pyx_kp_u_The_order);
          PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_kp_u_The_order);
          __pyx_t_16 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_order_id); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 954, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_16) : __pyx_t_12;
          __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_16);
          __Pyx_GIVEREF(__pyx_t_16);
          PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_16);
          __pyx_t_16 = 0;
          __Pyx_INCREF(__pyx_kp_u_does_not_exist_on_Bittrex_No_ca);
          __pyx_t_11 += 51;
          __Pyx_GIVEREF(__pyx_kp_u_does_not_exist_on_Bittrex_No_ca);
          PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_kp_u_does_not_exist_on_Bittrex_No_ca);
          __pyx_t_16 = __Pyx_PyUnicode_Join(__pyx_t_8, 3, __pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 954, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_8 = NULL;
          __pyx_t_10 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
              __pyx_t_10 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_t_16};
            __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 954, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          }
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":955
 *                 # The order was never there to begin with. So cancelling it is a no-op but semantically successful.
 *                 self.logger().info(f"The order {order_id} does not exist on Bittrex. No cancellation needed.")
 *                 self.c_stop_tracking_order(order_id)             # <<<<<<<<<<<<<<
 *                 self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                      OrderCancelledEvent(self._current_timestamp, order_id))
 */
          __pyx_t_14 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_stop_tracking_order(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_cur_scope->__pyx_v_self), __pyx_cur_scope->__pyx_v_order_id); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 955, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":956
 *                 self.logger().info(f"The order {order_id} does not exist on Bittrex. No cancellation needed.")
 *                 self.c_stop_tracking_order(order_id)
 *                 self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                      OrderCancelledEvent(self._current_timestamp, order_id))
 *                 return order_id
 */
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 956, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_13 = __Pyx_PyInt_As_int64_t(__pyx_t_14); if (unlikely((__pyx_t_13 == ((int64_t)-1)) && PyErr_Occurred())) __PYX_ERR(0, 956, __pyx_L20_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":957
 *                 self.c_stop_tracking_order(order_id)
 *                 self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                      OrderCancelledEvent(self._current_timestamp, order_id))             # <<<<<<<<<<<<<<
 *                 return order_id
 * 
 */
          __Pyx_GetModuleGlobalName(__pyx_t_15, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 957, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_16 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base._current_timestamp); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 957, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_8 = NULL;
          __pyx_t_10 = 0;
          if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
              __pyx_t_10 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_t_16, __pyx_cur_scope->__pyx_v_order_id};
            __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_10, 2+__pyx_t_10);
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
            if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 957, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          }

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":956
 *                 self.logger().info(f"The order {order_id} does not exist on Bittrex. No cancellation needed.")
 *                 self.c_stop_tracking_order(order_id)
 *                 self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,             # <<<<<<<<<<<<<<
 *                                      OrderCancelledEvent(self._current_timestamp, order_id))
 *                 return order_id
 */
          __pyx_t_15 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_trigger_event(((struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub *)__pyx_cur_scope->__pyx_v_self), __pyx_t_13, __pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 956, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":958
 *                 self.c_trigger_event(self.MARKET_ORDER_CANCELLED_EVENT_TAG,
 *                                      OrderCancelledEvent(self._current_timestamp, order_id))
 *                 return order_id             # <<<<<<<<<<<<<<
 * 
 *             if "ORDER_NOT_OPEN" in str(err):
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_cur_scope->__pyx_v_order_id);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          goto __pyx_L19_return;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":952
 *             raise
 *         except Exception as err:
 *             if "NOT_FOUND" in str(err):             # <<<<<<<<<<<<<<
 *                 # The order was never there to begin with. So cancelling it is a no-op but semantically successful.
 *                 self.logger().info(f"The order {order_id} does not exist on Bittrex. No cancellation needed.")
 */
        }

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":960
 *                 return order_id
 * 
 *             if "ORDER_NOT_OPEN" in str(err):             # <<<<<<<<<<<<<<
 *                 state_result = await self._api_request("GET", path_url=path_url)
 *                 self.logger().error(  # this indicates a potential error
 */
        __pyx_t_15 = __Pyx_PyObject_Str(__pyx_cur_scope->__pyx_v_err); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 960, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_5 = (__Pyx_PyUnicode_ContainsTF(__pyx_n_u_ORDER_NOT_OPEN, __pyx_t_15, Py_EQ)); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 960, __pyx_L20_error)
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __pyx_t_6 = (__pyx_t_5 != 0);
        if (__pyx_t_6) {

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":961
 * 
 *             if "ORDER_NOT_OPEN" in str(err):
 *                 state_result = await self._api_request("GET", path_url=path_url)             # <<<<<<<<<<<<<<
 *                 self.logger().error(  # this indicates a potential error
 *                     f"Tried to cancel order {order_id} which is already closed. Order details: {state_result}."
 */
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 961, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_14 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 961, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_14);
          if (unlikely(!__pyx_cur_scope->__pyx_v_path_url)) { __Pyx_RaiseUnboundLocalError("path_url"); __PYX_ERR(0, 961, __pyx_L20_error) }
          if (PyDict_SetItem(__pyx_t_14, __pyx_n_s_path_url, __pyx_cur_scope->__pyx_v_path_url) < 0) __PYX_ERR(0, 961, __pyx_L20_error)
          __pyx_t_16 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_tuple__4, __pyx_t_14); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 961, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_16);
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_1);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
            __Pyx_XGIVEREF(__pyx_t_2);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
            __Pyx_XGIVEREF(__pyx_t_3);
            __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
            __Pyx_XGIVEREF(__pyx_t_4);
            __pyx_cur_scope->__pyx_t_3 = __pyx_t_4;
            __Pyx_XGIVEREF(__pyx_t_7);
            __pyx_cur_scope->__pyx_t_4 = __pyx_t_7;
            __Pyx_XGIVEREF(__pyx_t_9);
            __pyx_cur_scope->__pyx_t_5 = __pyx_t_9;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_SwapException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 2;
            return __pyx_r;
            __pyx_L24_resume_from_await:;
            __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_1);
            __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_2);
            __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
            __pyx_cur_scope->__pyx_t_2 = 0;
            __Pyx_XGOTREF(__pyx_t_3);
            __pyx_t_4 = __pyx_cur_scope->__pyx_t_3;
            __pyx_cur_scope->__pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_t_4);
            __pyx_t_7 = __pyx_cur_scope->__pyx_t_4;
            __pyx_cur_scope->__pyx_t_4 = 0;
            __Pyx_XGOTREF(__pyx_t_7);
            __pyx_t_9 = __pyx_cur_scope->__pyx_t_5;
            __pyx_cur_scope->__pyx_t_5 = 0;
            __Pyx_XGOTREF(__pyx_t_9);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 961, __pyx_L20_error)
            __pyx_t_16 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_16);
          } else {
            __pyx_t_16 = NULL;
            if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_16) < 0) __PYX_ERR(0, 961, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_16);
          }
          __Pyx_GIVEREF(__pyx_t_16);
          __pyx_cur_scope->__pyx_v_state_result = __pyx_t_16;
          __pyx_t_16 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":962
 *             if "ORDER_NOT_OPEN" in str(err):
 *                 state_result = await self._api_request("GET", path_url=path_url)
 *                 self.logger().error(  # this indicates a potential error             # <<<<<<<<<<<<<<
 *                     f"Tried to cancel order {order_id} which is already closed. Order details: {state_result}."
 *                 )
 */
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 962, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_8 = NULL;
          __pyx_t_10 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_8)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_8);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
              __pyx_t_10 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_8, };
            __pyx_t_14 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_10, 0+__pyx_t_10);
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 962, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          }
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_n_s_error); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 962, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":963
 *                 state_result = await self._api_request("GET", path_url=path_url)
 *                 self.logger().error(  # this indicates a potential error
 *                     f"Tried to cancel order {order_id} which is already closed. Order details: {state_result}."             # <<<<<<<<<<<<<<
 *                 )
 *                 if state_result["status"] == "CLOSED":
 */
          __pyx_t_14 = PyTuple_New(5); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 963, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_11 = 0;
          __pyx_t_12 = 127;
          __Pyx_INCREF(__pyx_kp_u_Tried_to_cancel_order);
          __pyx_t_11 += 22;
          __Pyx_GIVEREF(__pyx_kp_u_Tried_to_cancel_order);
          PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_kp_u_Tried_to_cancel_order);
          __pyx_t_8 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_order_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 963, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_12;
          __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_8);
          __pyx_t_8 = 0;
          __Pyx_INCREF(__pyx_kp_u_which_is_already_closed_Order_d);
          __pyx_t_11 += 41;
          __Pyx_GIVEREF(__pyx_kp_u_which_is_already_closed_Order_d);
          PyTuple_SET_ITEM(__pyx_t_14, 2, __pyx_kp_u_which_is_already_closed_Order_d);
          __pyx_t_8 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_state_result, __pyx_empty_unicode); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 963, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_12;
          __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_8);
          PyTuple_SET_ITEM(__pyx_t_14, 3, __pyx_t_8);
          __pyx_t_8 = 0;
          __Pyx_INCREF(__pyx_kp_u__10);
          __pyx_t_11 += 1;
          __Pyx_GIVEREF(__pyx_kp_u__10);
          PyTuple_SET_ITEM(__pyx_t_14, 4, __pyx_kp_u__10);
          __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_14, 5, __pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 963, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_14 = NULL;
          __pyx_t_10 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_14 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_14)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_14);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
              __pyx_t_10 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[2] = {__pyx_t_14, __pyx_t_8};
            __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_10, 1+__pyx_t_10);
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
            if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 962, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_16);
            __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          }
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":965
 *                     f"Tried to cancel order {order_id} which is already closed. Order details: {state_result}."
 *                 )
 *                 if state_result["status"] == "CLOSED":             # <<<<<<<<<<<<<<
 *                     self._process_api_closed(state_result, tracked_order)
 *                 return order_id
 */
          __pyx_t_16 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_state_result, __pyx_n_u_status); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 965, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_16);
          __pyx_t_6 = (__Pyx_PyUnicode_Equals(__pyx_t_16, __pyx_n_u_CLOSED, Py_EQ)); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 965, __pyx_L20_error)
          __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
          if (__pyx_t_6) {

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":966
 *                 )
 *                 if state_result["status"] == "CLOSED":
 *                     self._process_api_closed(state_result, tracked_order)             # <<<<<<<<<<<<<<
 *                 return order_id
 * 
 */
            __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_process_api_closed); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 966, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_15);
            if (unlikely(!__pyx_cur_scope->__pyx_v_tracked_order)) { __Pyx_RaiseUnboundLocalError("tracked_order"); __PYX_ERR(0, 966, __pyx_L20_error) }
            __pyx_t_8 = NULL;
            __pyx_t_10 = 0;
            if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
              __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_15);
              if (likely(__pyx_t_8)) {
                PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
                __Pyx_INCREF(__pyx_t_8);
                __Pyx_INCREF(function);
                __Pyx_DECREF_SET(__pyx_t_15, function);
                __pyx_t_10 = 1;
              }
            }
            {
              PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_cur_scope->__pyx_v_state_result, __pyx_cur_scope->__pyx_v_tracked_order};
              __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_10, 2+__pyx_t_10);
              __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
              if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 966, __pyx_L20_error)
              __Pyx_GOTREF(__pyx_t_16);
              __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
            }
            __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":965
 *                     f"Tried to cancel order {order_id} which is already closed. Order details: {state_result}."
 *                 )
 *                 if state_result["status"] == "CLOSED":             # <<<<<<<<<<<<<<
 *                     self._process_api_closed(state_result, tracked_order)
 *                 return order_id
 */
          }

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":967
 *                 if state_result["status"] == "CLOSED":
 *                     self._process_api_closed(state_result, tracked_order)
 *                 return order_id             # <<<<<<<<<<<<<<
 * 
 *             self.logger().network(
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_cur_scope->__pyx_v_order_id);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          goto __pyx_L19_return;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":960
 *                 return order_id
 * 
 *             if "ORDER_NOT_OPEN" in str(err):             # <<<<<<<<<<<<<<
 *                 state_result = await self._api_request("GET", path_url=path_url)
 *                 self.logger().error(  # this indicates a potential error
 */
        }

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":969
 *                 return order_id
 * 
 *             self.logger().network(             # <<<<<<<<<<<<<<
 *                 f"Failed to cancel order {order_id}: {str(err)}.",
 *                 exc_info=True,
 */
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 969, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_15);
        __pyx_t_8 = NULL;
        __pyx_t_10 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_15))) {
          __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_15);
          if (likely(__pyx_t_8)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
            __Pyx_INCREF(__pyx_t_8);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_15, function);
            __pyx_t_10 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_8, };
          __pyx_t_16 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+1-__pyx_t_10, 0+__pyx_t_10);
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 969, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_16);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        }
        __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_16, __pyx_n_s_network); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 969, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_15);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":970
 * 
 *             self.logger().network(
 *                 f"Failed to cancel order {order_id}: {str(err)}.",             # <<<<<<<<<<<<<<
 *                 exc_info=True,
 *                 app_warning_msg=f"Failed to cancel the order {order_id} on Bittrex. "
 */
        __pyx_t_16 = PyTuple_New(5); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 970, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_11 = 0;
        __pyx_t_12 = 127;
        __Pyx_INCREF(__pyx_kp_u_Failed_to_cancel_order);
        __pyx_t_11 += 23;
        __Pyx_GIVEREF(__pyx_kp_u_Failed_to_cancel_order);
        PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_kp_u_Failed_to_cancel_order);
        __pyx_t_8 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_order_id); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 970, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_12;
        __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_16, 1, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_INCREF(__pyx_kp_u__9);
        __pyx_t_11 += 2;
        __Pyx_GIVEREF(__pyx_kp_u__9);
        PyTuple_SET_ITEM(__pyx_t_16, 2, __pyx_kp_u__9);
        __pyx_t_8 = __Pyx_PyObject_Str(__pyx_cur_scope->__pyx_v_err); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 970, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_8) : __pyx_t_12;
        __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_16, 3, __pyx_t_8);
        __pyx_t_8 = 0;
        __Pyx_INCREF(__pyx_kp_u__10);
        __pyx_t_11 += 1;
        __Pyx_GIVEREF(__pyx_kp_u__10);
        PyTuple_SET_ITEM(__pyx_t_16, 4, __pyx_kp_u__10);
        __pyx_t_8 = __Pyx_PyUnicode_Join(__pyx_t_16, 5, __pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 970, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":969
 *                 return order_id
 * 
 *             self.logger().network(             # <<<<<<<<<<<<<<
 *                 f"Failed to cancel order {order_id}: {str(err)}.",
 *                 exc_info=True,
 */
        __pyx_t_16 = PyTuple_New(1); if (unlikely(!__pyx_t_16)) __PYX_ERR(0, 969, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_16);
        __Pyx_GIVEREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_16, 0, __pyx_t_8);
        __pyx_t_8 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":971
 *             self.logger().network(
 *                 f"Failed to cancel order {order_id}: {str(err)}.",
 *                 exc_info=True,             # <<<<<<<<<<<<<<
 *                 app_warning_msg=f"Failed to cancel the order {order_id} on Bittrex. "
 *                                 f"Check API key and network connection."
 */
        __pyx_t_8 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 971, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_8);
        if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_exc_info, Py_True) < 0) __PYX_ERR(0, 971, __pyx_L20_error)

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":972
 *                 f"Failed to cancel order {order_id}: {str(err)}.",
 *                 exc_info=True,
 *                 app_warning_msg=f"Failed to cancel the order {order_id} on Bittrex. "             # <<<<<<<<<<<<<<
 *                                 f"Check API key and network connection."
 *             )
 */
        __pyx_t_14 = PyTuple_New(3); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 972, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_14);
        __pyx_t_11 = 0;
        __pyx_t_12 = 127;
        __Pyx_INCREF(__pyx_kp_u_Failed_to_cancel_the_order);
        __pyx_t_11 += 27;
        __Pyx_GIVEREF(__pyx_kp_u_Failed_to_cancel_the_order);
        PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_kp_u_Failed_to_cancel_the_order);
        __pyx_t_17 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_order_id); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 972, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_12 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) > __pyx_t_12) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_17) : __pyx_t_12;
        __pyx_t_11 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_17);
        __Pyx_GIVEREF(__pyx_t_17);
        PyTuple_SET_ITEM(__pyx_t_14, 1, __pyx_t_17);
        __pyx_t_17 = 0;
        __Pyx_INCREF(__pyx_kp_u_on_Bittrex_Check_API_key_and_ne);
        __pyx_t_11 += 50;
        __Pyx_GIVEREF(__pyx_kp_u_on_Bittrex_Check_API_key_and_ne);
        PyTuple_SET_ITEM(__pyx_t_14, 2, __pyx_kp_u_on_Bittrex_Check_API_key_and_ne);
        __pyx_t_17 = __Pyx_PyUnicode_Join(__pyx_t_14, 3, __pyx_t_11, __pyx_t_12); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 972, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
        if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_app_warning_msg, __pyx_t_17) < 0) __PYX_ERR(0, 971, __pyx_L20_error)
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;

        /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":969
 *                 return order_id
 * 
 *             self.logger().network(             # <<<<<<<<<<<<<<
 *                 f"Failed to cancel order {order_id}: {str(err)}.",
 *                 exc_info=True,
 */
        __pyx_t_17 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_16, __pyx_t_8); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 969, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_17);
        __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":951
 *         except asyncio.CancelledError:
 *             raise
 *         except Exception as err:             # <<<<<<<<<<<<<<
 *             if "NOT_FOUND" in str(err):
 *                 # The order was never there to begin with. So cancelling it is a no-op but semantically successful.
 */
      /*finally:*/ {
        /*normal exit:*/{
          __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_err);
          __Pyx_DECREF(__pyx_cur_scope->__pyx_v_err); __pyx_cur_scope->__pyx_v_err = 0;
          goto __pyx_L21;
        }
        __pyx_L20_error:;
        /*exception exit:*/{
          __Pyx_PyThreadState_assign
          __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0;
          __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
          __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
          __Pyx_XDECREF(__pyx_t_17); __pyx_t_17 = 0;
          __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_23, &__pyx_t_24, &__pyx_t_25);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22) < 0)) __Pyx_ErrFetch(&__pyx_t_20, &__pyx_t_21, &__pyx_t_22);
          __Pyx_XGOTREF(__pyx_t_20);
          __Pyx_XGOTREF(__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_22);
          __Pyx_XGOTREF(__pyx_t_23);
          __Pyx_XGOTREF(__pyx_t_24);
          __Pyx_XGOTREF(__pyx_t_25);
          __pyx_t_10 = __pyx_lineno; __pyx_t_18 = __pyx_clineno; __pyx_t_19 = __pyx_filename;
          {
            __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_err);
            __Pyx_DECREF(__pyx_cur_scope->__pyx_v_err); __pyx_cur_scope->__pyx_v_err = 0;
          }
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_23);
            __Pyx_XGIVEREF(__pyx_t_24);
            __Pyx_XGIVEREF(__pyx_t_25);
            __Pyx_ExceptionReset(__pyx_t_23, __pyx_t_24, __pyx_t_25);
          }
          __Pyx_XGIVEREF(__pyx_t_20);
          __Pyx_XGIVEREF(__pyx_t_21);
          __Pyx_XGIVEREF(__pyx_t_22);
          __Pyx_ErrRestore(__pyx_t_20, __pyx_t_21, __pyx_t_22);
          __pyx_t_20 = 0; __pyx_t_21 = 0; __pyx_t_22 = 0; __pyx_t_23 = 0; __pyx_t_24 = 0; __pyx_t_25 = 0;
          __pyx_lineno = __pyx_t_10; __pyx_clineno = __pyx_t_18; __pyx_filename = __pyx_t_19;
          goto __pyx_L6_except_error;
        }
        __pyx_L19_return: {
          __Pyx_PyThreadState_assign
          __pyx_t_25 = 0; __pyx_t_24 = 0; __pyx_t_23 = 0; __pyx_t_22 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0;
          if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_22, &__pyx_t_21, &__pyx_t_20);
          if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_25, &__pyx_t_24, &__pyx_t_23) < 0)) __Pyx_ErrFetch(&__pyx_t_25, &__pyx_t_24, &__pyx_t_23);
          __Pyx_XGOTREF(__pyx_t_25);
          __Pyx_XGOTREF(__pyx_t_24);
          __Pyx_XGOTREF(__pyx_t_23);
          __Pyx_XGOTREF(__pyx_t_22);
          __Pyx_XGOTREF(__pyx_t_21);
          __Pyx_XGOTREF(__pyx_t_20);
          __pyx_t_26 = __pyx_r;
          __pyx_r = 0;
          __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_err);
          __Pyx_DECREF(__pyx_cur_scope->__pyx_v_err); __pyx_cur_scope->__pyx_v_err = 0;
          __pyx_r = __pyx_t_26;
          __pyx_t_26 = 0;
          if (PY_MAJOR_VERSION >= 3) {
            __Pyx_XGIVEREF(__pyx_t_22);
            __Pyx_XGIVEREF(__pyx_t_21);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_ExceptionReset(__pyx_t_22, __pyx_t_21, __pyx_t_20);
          }
          __Pyx_XGIVEREF(__pyx_t_25);
          __Pyx_XGIVEREF(__pyx_t_24);
          __Pyx_XGIVEREF(__pyx_t_23);
          __Pyx_ErrRestore(__pyx_t_25, __pyx_t_24, __pyx_t_23);
          __pyx_t_25 = 0; __pyx_t_24 = 0; __pyx_t_23 = 0; __pyx_t_22 = 0; __pyx_t_21 = 0; __pyx_t_20 = 0;
          goto __pyx_L7_except_return;
        }
        __pyx_L21:;
      }
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L5_exception_handled;
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":933
 * 
 *     async def execute_cancel(self, trading_pair: str, order_id: str):
 *         try:             # <<<<<<<<<<<<<<
 *             tracked_order = self._in_flight_orders.get(order_id)
 * 
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L7_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L5_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L9_try_end:;
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":975
 *                                 f"Check API key and network connection."
 *             )
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     cdef c_cancel(self, str trading_pair, str order_id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = NULL;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":932
 *         return order_id
 * 
 *     async def execute_cancel(self, trading_pair: str, order_id: str):             # <<<<<<<<<<<<<<
 *         try:
 *             tracked_order = self._in_flight_orders.get(order_id)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_XDECREF(__pyx_t_17);
  __Pyx_AddTraceback("execute_cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":977
 *         return None
 * 
 *     cdef c_cancel(self, str trading_pair, str order_id):             # <<<<<<<<<<<<<<
 *         safe_ensure_future(self.execute_cancel(trading_pair, order_id))
 *         return order_id
 */

static PyObject *__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_cancel(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_order_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("c_cancel", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":978
 * 
 *     cdef c_cancel(self, str trading_pair, str order_id):
 *         safe_ensure_future(self.execute_cancel(trading_pair, order_id))             # <<<<<<<<<<<<<<
 *         return order_id
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_execute_cancel); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 978, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_v_trading_pair, __pyx_v_order_id};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 2+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_t_4 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_6, 1+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 978, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":979
 *     cdef c_cancel(self, str trading_pair, str order_id):
 *         safe_ensure_future(self.execute_cancel(trading_pair, order_id))
 *         return order_id             # <<<<<<<<<<<<<<
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_order_id);
  __pyx_r = __pyx_v_order_id;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":977
 *         return None
 * 
 *     cdef c_cancel(self, str trading_pair, str order_id):             # <<<<<<<<<<<<<<
 *         safe_ensure_future(self.execute_cancel(trading_pair, order_id))
 *         return order_id
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.c_cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_55generator13(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":981
 *         return order_id
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:             # <<<<<<<<<<<<<<
 *         incomplete_orders = [order for order in self._in_flight_orders.values() if not order.is_done]
 *         tasks = [self.execute_cancel(o.trading_pair, o.client_order_id) for o in incomplete_orders]
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_54cancel_all(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_54cancel_all = {"cancel_all", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_54cancel_all, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_54cancel_all(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  double __pyx_v_timeout_seconds;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_all (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timeout_seconds,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_timeout_seconds,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_timeout_seconds)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 981, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "cancel_all") < 0)) __PYX_ERR(0, 981, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_timeout_seconds = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_timeout_seconds == (double)-1) && PyErr_Occurred())) __PYX_ERR(0, 981, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cancel_all", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 981, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.cancel_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_53cancel_all(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), __pyx_v_timeout_seconds);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_53cancel_all(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, double __pyx_v_timeout_seconds) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cancel_all", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 981, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_timeout_seconds = __pyx_v_timeout_seconds;
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_55generator13, __pyx_codeobj__34, (PyObject *) __pyx_cur_scope, __pyx_n_s_cancel_all, __pyx_n_s_BittrexExchange_cancel_all, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 981, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.cancel_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_55generator13(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  PyObject *__pyx_t_19 = NULL;
  PyObject *__pyx_t_20 = NULL;
  PyObject *(*__pyx_t_21)(PyObject *);
  int __pyx_t_22;
  PyObject *__pyx_t_23 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel_all", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L18_resume_from_await;
    case 2: goto __pyx_L28_resume_from_await;
    case 3: goto __pyx_L35_resume_from_await;
    case 4: goto __pyx_L36_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 981, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":982
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:
 *         incomplete_orders = [order for order in self._in_flight_orders.values() if not order.is_done]             # <<<<<<<<<<<<<<
 *         tasks = [self.execute_cancel(o.trading_pair, o.client_order_id) for o in incomplete_orders]
 *         order_id_set = set([o.client_order_id for o in incomplete_orders])
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 982, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = 0;
    if (unlikely(__pyx_cur_scope->__pyx_v_self->_in_flight_orders == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "values");
      __PYX_ERR(0, 982, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_dict_iterator(__pyx_cur_scope->__pyx_v_self->_in_flight_orders, 1, __pyx_n_s_values, (&__pyx_t_4), (&__pyx_t_5)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 982, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_6;
    __pyx_t_6 = 0;
    while (1) {
      __pyx_t_7 = __Pyx_dict_iter_next(__pyx_t_2, __pyx_t_4, &__pyx_t_3, NULL, &__pyx_t_6, NULL, __pyx_t_5);
      if (unlikely(__pyx_t_7 == 0)) break;
      if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 982, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_8genexpr7__pyx_v_order);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_8genexpr7__pyx_v_order, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_8genexpr7__pyx_v_order, __pyx_n_s_is_done); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 982, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_8 < 0))) __PYX_ERR(0, 982, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_9 = ((!__pyx_t_8) != 0);
      if (__pyx_t_9) {
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_cur_scope->__pyx_8genexpr7__pyx_v_order))) __PYX_ERR(0, 982, __pyx_L1_error)
      }
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } /* exit inner scope */
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_incomplete_orders = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":983
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:
 *         incomplete_orders = [order for order in self._in_flight_orders.values() if not order.is_done]
 *         tasks = [self.execute_cancel(o.trading_pair, o.client_order_id) for o in incomplete_orders]             # <<<<<<<<<<<<<<
 *         order_id_set = set([o.client_order_id for o in incomplete_orders])
 *         successful_cancellation = []
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_incomplete_orders; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    for (;;) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_6 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 983, __pyx_L1_error)
      #else
      __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 983, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_8genexpr8__pyx_v_o);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_8genexpr8__pyx_v_o, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_execute_cancel); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 983, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_8genexpr8__pyx_v_o, __pyx_n_s_trading_pair); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 983, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_8genexpr8__pyx_v_o, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 983, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_13 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_10))) {
        __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_10);
        if (likely(__pyx_t_13)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_10);
          __Pyx_INCREF(__pyx_t_13);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_10, function);
          __pyx_t_5 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_13, __pyx_t_11, __pyx_t_12};
        __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 983, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 983, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } /* exit inner scope */
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_cur_scope->__pyx_v_tasks = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":984
 *         incomplete_orders = [order for order in self._in_flight_orders.values() if not order.is_done]
 *         tasks = [self.execute_cancel(o.trading_pair, o.client_order_id) for o in incomplete_orders]
 *         order_id_set = set([o.client_order_id for o in incomplete_orders])             # <<<<<<<<<<<<<<
 *         successful_cancellation = []
 * 
 */
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 984, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_cur_scope->__pyx_v_incomplete_orders; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    for (;;) {
      if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
      __pyx_t_6 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 984, __pyx_L1_error)
      #else
      __pyx_t_6 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 984, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      #endif
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_8genexpr9__pyx_v_o);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_8genexpr9__pyx_v_o, __pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_8genexpr9__pyx_v_o, __pyx_n_s_client_order_id); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 984, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(0, 984, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  } /* exit inner scope */
  __pyx_t_2 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 984, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_order_id_set = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":985
 *         tasks = [self.execute_cancel(o.trading_pair, o.client_order_id) for o in incomplete_orders]
 *         order_id_set = set([o.client_order_id for o in incomplete_orders])
 *         successful_cancellation = []             # <<<<<<<<<<<<<<
 * 
 *         try:
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 985, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_successful_cancellation = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":987
 *         successful_cancellation = []
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             async with timeout(timeout_seconds):
 *                 api_responses = await safe_gather(*tasks, return_exceptions=True)
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
    __Pyx_XGOTREF(__pyx_t_14);
    __Pyx_XGOTREF(__pyx_t_15);
    __Pyx_XGOTREF(__pyx_t_16);
    /*try:*/ {

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":988
 * 
 *         try:
 *             async with timeout(timeout_seconds):             # <<<<<<<<<<<<<<
 *                 api_responses = await safe_gather(*tasks, return_exceptions=True)
 *                 for order_id in api_responses:
 */
      /*with:*/ {
        __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_timeout); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 988, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_6 = PyFloat_FromDouble(__pyx_cur_scope->__pyx_v_timeout_seconds); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 988, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_10 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_1);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_1, function);
            __pyx_t_5 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_t_6};
          __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 1+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 988, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_2);
          __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        }
        __pyx_t_17 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_aexit); if (unlikely(!__pyx_t_17)) __PYX_ERR(0, 988, __pyx_L11_error)
        __Pyx_GOTREF(__pyx_t_17);
        __pyx_t_6 = __Pyx_PyObject_LookupSpecial(__pyx_t_2, __pyx_n_s_aenter); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 988, __pyx_L17_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_10 = NULL;
        __pyx_t_5 = 0;
        if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_6))) {
          __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_6);
          if (likely(__pyx_t_10)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
            __Pyx_INCREF(__pyx_t_10);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_6, function);
            __pyx_t_5 = 1;
          }
        }
        {
          PyObject *__pyx_callargs[1] = {__pyx_t_10, };
          __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
          __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
          if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 988, __pyx_L17_error)
          __Pyx_GOTREF(__pyx_t_1);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        }
        __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_1);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_r);
        if (likely(__pyx_r)) {
          __Pyx_XGIVEREF(__pyx_t_2);
          __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
          __Pyx_XGIVEREF(__pyx_t_14);
          __pyx_cur_scope->__pyx_t_1 = __pyx_t_14;
          __Pyx_XGIVEREF(__pyx_t_15);
          __pyx_cur_scope->__pyx_t_2 = __pyx_t_15;
          __Pyx_XGIVEREF(__pyx_t_16);
          __pyx_cur_scope->__pyx_t_3 = __pyx_t_16;
          __Pyx_XGIVEREF(__pyx_t_17);
          __pyx_cur_scope->__pyx_t_4 = __pyx_t_17;
          __Pyx_XGIVEREF(__pyx_r);
          __Pyx_RefNannyFinishContext();
          __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
          /* return from generator, awaiting value */
          __pyx_generator->resume_label = 1;
          return __pyx_r;
          __pyx_L18_resume_from_await:;
          __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
          __pyx_cur_scope->__pyx_t_0 = 0;
          __Pyx_XGOTREF(__pyx_t_2);
          __pyx_t_14 = __pyx_cur_scope->__pyx_t_1;
          __pyx_cur_scope->__pyx_t_1 = 0;
          __Pyx_XGOTREF(__pyx_t_14);
          __pyx_t_15 = __pyx_cur_scope->__pyx_t_2;
          __pyx_cur_scope->__pyx_t_2 = 0;
          __Pyx_XGOTREF(__pyx_t_15);
          __pyx_t_16 = __pyx_cur_scope->__pyx_t_3;
          __pyx_cur_scope->__pyx_t_3 = 0;
          __Pyx_XGOTREF(__pyx_t_16);
          __pyx_t_17 = __pyx_cur_scope->__pyx_t_4;
          __pyx_cur_scope->__pyx_t_4 = 0;
          __Pyx_XGOTREF(__pyx_t_17);
          if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 988, __pyx_L17_error)
          __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
        } else {
          __pyx_t_1 = NULL;
          if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 988, __pyx_L17_error)
          __Pyx_GOTREF(__pyx_t_1);
        }
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        /*try:*/ {
          {
            __Pyx_ExceptionSave(&__pyx_t_18, &__pyx_t_19, &__pyx_t_20);
            __Pyx_XGOTREF(__pyx_t_18);
            __Pyx_XGOTREF(__pyx_t_19);
            __Pyx_XGOTREF(__pyx_t_20);
            /*try:*/ {

              /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":989
 *         try:
 *             async with timeout(timeout_seconds):
 *                 api_responses = await safe_gather(*tasks, return_exceptions=True)             # <<<<<<<<<<<<<<
 *                 for order_id in api_responses:
 *                     if order_id:
 */
              __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_safe_gather); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 989, __pyx_L22_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_1 = PySequence_Tuple(__pyx_cur_scope->__pyx_v_tasks); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 989, __pyx_L22_error)
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_6 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 989, __pyx_L22_error)
              __Pyx_GOTREF(__pyx_t_6);
              if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_return_exceptions, Py_True) < 0) __PYX_ERR(0, 989, __pyx_L22_error)
              __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 989, __pyx_L22_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
              __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_10);
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_XGOTREF(__pyx_r);
              if (likely(__pyx_r)) {
                __Pyx_XGIVEREF(__pyx_t_14);
                __pyx_cur_scope->__pyx_t_0 = __pyx_t_14;
                __Pyx_XGIVEREF(__pyx_t_15);
                __pyx_cur_scope->__pyx_t_1 = __pyx_t_15;
                __Pyx_XGIVEREF(__pyx_t_16);
                __pyx_cur_scope->__pyx_t_2 = __pyx_t_16;
                __Pyx_XGIVEREF(__pyx_t_17);
                __pyx_cur_scope->__pyx_t_3 = __pyx_t_17;
                __Pyx_XGIVEREF(__pyx_t_18);
                __pyx_cur_scope->__pyx_t_4 = __pyx_t_18;
                __Pyx_XGIVEREF(__pyx_t_19);
                __pyx_cur_scope->__pyx_t_5 = __pyx_t_19;
                __Pyx_XGIVEREF(__pyx_t_20);
                __pyx_cur_scope->__pyx_t_6 = __pyx_t_20;
                __Pyx_XGIVEREF(__pyx_r);
                __Pyx_RefNannyFinishContext();
                __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
                /* return from generator, awaiting value */
                __pyx_generator->resume_label = 2;
                return __pyx_r;
                __pyx_L28_resume_from_await:;
                __pyx_t_14 = __pyx_cur_scope->__pyx_t_0;
                __pyx_cur_scope->__pyx_t_0 = 0;
                __Pyx_XGOTREF(__pyx_t_14);
                __pyx_t_15 = __pyx_cur_scope->__pyx_t_1;
                __pyx_cur_scope->__pyx_t_1 = 0;
                __Pyx_XGOTREF(__pyx_t_15);
                __pyx_t_16 = __pyx_cur_scope->__pyx_t_2;
                __pyx_cur_scope->__pyx_t_2 = 0;
                __Pyx_XGOTREF(__pyx_t_16);
                __pyx_t_17 = __pyx_cur_scope->__pyx_t_3;
                __pyx_cur_scope->__pyx_t_3 = 0;
                __Pyx_XGOTREF(__pyx_t_17);
                __pyx_t_18 = __pyx_cur_scope->__pyx_t_4;
                __pyx_cur_scope->__pyx_t_4 = 0;
                __Pyx_XGOTREF(__pyx_t_18);
                __pyx_t_19 = __pyx_cur_scope->__pyx_t_5;
                __pyx_cur_scope->__pyx_t_5 = 0;
                __Pyx_XGOTREF(__pyx_t_19);
                __pyx_t_20 = __pyx_cur_scope->__pyx_t_6;
                __pyx_cur_scope->__pyx_t_6 = 0;
                __Pyx_XGOTREF(__pyx_t_20);
                if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 989, __pyx_L22_error)
                __pyx_t_10 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_10);
              } else {
                __pyx_t_10 = NULL;
                if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_10) < 0) __PYX_ERR(0, 989, __pyx_L22_error)
                __Pyx_GOTREF(__pyx_t_10);
              }
              __Pyx_GIVEREF(__pyx_t_10);
              __pyx_cur_scope->__pyx_v_api_responses = __pyx_t_10;
              __pyx_t_10 = 0;

              /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":990
 *             async with timeout(timeout_seconds):
 *                 api_responses = await safe_gather(*tasks, return_exceptions=True)
 *                 for order_id in api_responses:             # <<<<<<<<<<<<<<
 *                     if order_id:
 *                         order_id_set.remove(order_id)
 */
              if (likely(PyList_CheckExact(__pyx_cur_scope->__pyx_v_api_responses)) || PyTuple_CheckExact(__pyx_cur_scope->__pyx_v_api_responses)) {
                __pyx_t_10 = __pyx_cur_scope->__pyx_v_api_responses; __Pyx_INCREF(__pyx_t_10); __pyx_t_4 = 0;
                __pyx_t_21 = NULL;
              } else {
                __pyx_t_4 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_cur_scope->__pyx_v_api_responses); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 990, __pyx_L22_error)
                __Pyx_GOTREF(__pyx_t_10);
                __pyx_t_21 = __Pyx_PyObject_GetIterNextFunc(__pyx_t_10); if (unlikely(!__pyx_t_21)) __PYX_ERR(0, 990, __pyx_L22_error)
              }
              for (;;) {
                if (likely(!__pyx_t_21)) {
                  if (likely(PyList_CheckExact(__pyx_t_10))) {
                    if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_10)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_6 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 990, __pyx_L22_error)
                    #else
                    __pyx_t_6 = PySequence_ITEM(__pyx_t_10, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 990, __pyx_L22_error)
                    __Pyx_GOTREF(__pyx_t_6);
                    #endif
                  } else {
                    if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
                    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                    __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely((0 < 0))) __PYX_ERR(0, 990, __pyx_L22_error)
                    #else
                    __pyx_t_6 = PySequence_ITEM(__pyx_t_10, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 990, __pyx_L22_error)
                    __Pyx_GOTREF(__pyx_t_6);
                    #endif
                  }
                } else {
                  __pyx_t_6 = __pyx_t_21(__pyx_t_10);
                  if (unlikely(!__pyx_t_6)) {
                    PyObject* exc_type = PyErr_Occurred();
                    if (exc_type) {
                      if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                      else __PYX_ERR(0, 990, __pyx_L22_error)
                    }
                    break;
                  }
                  __Pyx_GOTREF(__pyx_t_6);
                }
                __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_order_id);
                __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_order_id, __pyx_t_6);
                __Pyx_GIVEREF(__pyx_t_6);
                __pyx_t_6 = 0;

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":991
 *                 api_responses = await safe_gather(*tasks, return_exceptions=True)
 *                 for order_id in api_responses:
 *                     if order_id:             # <<<<<<<<<<<<<<
 *                         order_id_set.remove(order_id)
 *                         successful_cancellation.append(CancellationResult(order_id, True))
 */
                __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_order_id); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 991, __pyx_L22_error)
                if (__pyx_t_9) {

                  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":992
 *                 for order_id in api_responses:
 *                     if order_id:
 *                         order_id_set.remove(order_id)             # <<<<<<<<<<<<<<
 *                         successful_cancellation.append(CancellationResult(order_id, True))
 *         except Exception:
 */
                  __pyx_t_22 = __Pyx_PySet_Remove(__pyx_cur_scope->__pyx_v_order_id_set, __pyx_cur_scope->__pyx_v_order_id); if (unlikely(__pyx_t_22 == ((int)-1))) __PYX_ERR(0, 992, __pyx_L22_error)

                  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":993
 *                     if order_id:
 *                         order_id_set.remove(order_id)
 *                         successful_cancellation.append(CancellationResult(order_id, True))             # <<<<<<<<<<<<<<
 *         except Exception:
 *             self.logger().network(
 */
                  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_CancellationResult); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 993, __pyx_L22_error)
                  __Pyx_GOTREF(__pyx_t_1);
                  __pyx_t_2 = NULL;
                  __pyx_t_5 = 0;
                  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_1))) {
                    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_1);
                    if (likely(__pyx_t_2)) {
                      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
                      __Pyx_INCREF(__pyx_t_2);
                      __Pyx_INCREF(function);
                      __Pyx_DECREF_SET(__pyx_t_1, function);
                      __pyx_t_5 = 1;
                    }
                  }
                  {
                    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_cur_scope->__pyx_v_order_id, Py_True};
                    __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_1, __pyx_callargs+1-__pyx_t_5, 2+__pyx_t_5);
                    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
                    if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 993, __pyx_L22_error)
                    __Pyx_GOTREF(__pyx_t_6);
                    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
                  }
                  __pyx_t_22 = __Pyx_PyList_Append(__pyx_cur_scope->__pyx_v_successful_cancellation, __pyx_t_6); if (unlikely(__pyx_t_22 == ((int)-1))) __PYX_ERR(0, 993, __pyx_L22_error)
                  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

                  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":991
 *                 api_responses = await safe_gather(*tasks, return_exceptions=True)
 *                 for order_id in api_responses:
 *                     if order_id:             # <<<<<<<<<<<<<<
 *                         order_id_set.remove(order_id)
 *                         successful_cancellation.append(CancellationResult(order_id, True))
 */
                }

                /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":990
 *             async with timeout(timeout_seconds):
 *                 api_responses = await safe_gather(*tasks, return_exceptions=True)
 *                 for order_id in api_responses:             # <<<<<<<<<<<<<<
 *                     if order_id:
 *                         order_id_set.remove(order_id)
 */
              }
              __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

              /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":988
 * 
 *         try:
 *             async with timeout(timeout_seconds):             # <<<<<<<<<<<<<<
 *                 api_responses = await safe_gather(*tasks, return_exceptions=True)
 *                 for order_id in api_responses:
 */
            }
            __Pyx_XDECREF(__pyx_t_18); __pyx_t_18 = 0;
            __Pyx_XDECREF(__pyx_t_19); __pyx_t_19 = 0;
            __Pyx_XDECREF(__pyx_t_20); __pyx_t_20 = 0;
            goto __pyx_L27_try_end;
            __pyx_L22_error:;
            __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
            __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
            __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
            __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
            __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
            /*except:*/ {
              __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.cancel_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
              if (__Pyx_GetException(&__pyx_t_10, &__pyx_t_6, &__pyx_t_1) < 0) __PYX_ERR(0, 988, __pyx_L24_except_error)
              __Pyx_GOTREF(__pyx_t_10);
              __Pyx_GOTREF(__pyx_t_6);
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_2 = PyTuple_Pack(3, __pyx_t_10, __pyx_t_6, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 988, __pyx_L24_except_error)
              __Pyx_GOTREF(__pyx_t_2);
              __pyx_t_23 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_t_2, NULL);
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
              if (unlikely(!__pyx_t_23)) __PYX_ERR(0, 988, __pyx_L24_except_error)
              __Pyx_GOTREF(__pyx_t_23);
              __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_23);
              __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
              __Pyx_XGOTREF(__pyx_r);
              if (likely(__pyx_r)) {
                __Pyx_XGIVEREF(__pyx_t_1);
                __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
                __Pyx_XGIVEREF(__pyx_t_6);
                __pyx_cur_scope->__pyx_t_1 = __pyx_t_6;
                __Pyx_XGIVEREF(__pyx_t_10);
                __pyx_cur_scope->__pyx_t_2 = __pyx_t_10;
                __Pyx_XGIVEREF(__pyx_t_14);
                __pyx_cur_scope->__pyx_t_3 = __pyx_t_14;
                __Pyx_XGIVEREF(__pyx_t_15);
                __pyx_cur_scope->__pyx_t_4 = __pyx_t_15;
                __Pyx_XGIVEREF(__pyx_t_16);
                __pyx_cur_scope->__pyx_t_5 = __pyx_t_16;
                __Pyx_XGIVEREF(__pyx_t_17);
                __pyx_cur_scope->__pyx_t_6 = __pyx_t_17;
                __Pyx_XGIVEREF(__pyx_t_18);
                __pyx_cur_scope->__pyx_t_7 = __pyx_t_18;
                __Pyx_XGIVEREF(__pyx_t_19);
                __pyx_cur_scope->__pyx_t_8 = __pyx_t_19;
                __Pyx_XGIVEREF(__pyx_t_20);
                __pyx_cur_scope->__pyx_t_9 = __pyx_t_20;
                __Pyx_XGIVEREF(__pyx_t_23);
                __pyx_cur_scope->__pyx_t_10 = __pyx_t_23;
                __Pyx_XGIVEREF(__pyx_r);
                __Pyx_RefNannyFinishContext();
                __Pyx_Coroutine_SwapException(__pyx_generator);
                /* return from generator, awaiting value */
                __pyx_generator->resume_label = 3;
                return __pyx_r;
                __pyx_L35_resume_from_await:;
                __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
                __pyx_cur_scope->__pyx_t_0 = 0;
                __Pyx_XGOTREF(__pyx_t_1);
                __pyx_t_6 = __pyx_cur_scope->__pyx_t_1;
                __pyx_cur_scope->__pyx_t_1 = 0;
                __Pyx_XGOTREF(__pyx_t_6);
                __pyx_t_10 = __pyx_cur_scope->__pyx_t_2;
                __pyx_cur_scope->__pyx_t_2 = 0;
                __Pyx_XGOTREF(__pyx_t_10);
                __pyx_t_14 = __pyx_cur_scope->__pyx_t_3;
                __pyx_cur_scope->__pyx_t_3 = 0;
                __Pyx_XGOTREF(__pyx_t_14);
                __pyx_t_15 = __pyx_cur_scope->__pyx_t_4;
                __pyx_cur_scope->__pyx_t_4 = 0;
                __Pyx_XGOTREF(__pyx_t_15);
                __pyx_t_16 = __pyx_cur_scope->__pyx_t_5;
                __pyx_cur_scope->__pyx_t_5 = 0;
                __Pyx_XGOTREF(__pyx_t_16);
                __pyx_t_17 = __pyx_cur_scope->__pyx_t_6;
                __pyx_cur_scope->__pyx_t_6 = 0;
                __Pyx_XGOTREF(__pyx_t_17);
                __pyx_t_18 = __pyx_cur_scope->__pyx_t_7;
                __pyx_cur_scope->__pyx_t_7 = 0;
                __Pyx_XGOTREF(__pyx_t_18);
                __pyx_t_19 = __pyx_cur_scope->__pyx_t_8;
                __pyx_cur_scope->__pyx_t_8 = 0;
                __Pyx_XGOTREF(__pyx_t_19);
                __pyx_t_20 = __pyx_cur_scope->__pyx_t_9;
                __pyx_cur_scope->__pyx_t_9 = 0;
                __Pyx_XGOTREF(__pyx_t_20);
                __pyx_t_23 = __pyx_cur_scope->__pyx_t_10;
                __pyx_cur_scope->__pyx_t_10 = 0;
                __Pyx_XGOTREF(__pyx_t_23);
                if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 988, __pyx_L24_except_error)
                __pyx_t_2 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_2);
              } else {
                __pyx_t_2 = NULL;
                if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_2) < 0) __PYX_ERR(0, 988, __pyx_L24_except_error)
                __Pyx_GOTREF(__pyx_t_2);
              }
              __pyx_t_23 = __pyx_t_2;
              __pyx_t_2 = 0;
              __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_23);
              __Pyx_DECREF(__pyx_t_23); __pyx_t_23 = 0;
              if (__pyx_t_9 < 0) __PYX_ERR(0, 988, __pyx_L24_except_error)
              __pyx_t_8 = ((!(__pyx_t_9 != 0)) != 0);
              if (unlikely(__pyx_t_8)) {
                __Pyx_GIVEREF(__pyx_t_10);
                __Pyx_GIVEREF(__pyx_t_6);
                __Pyx_XGIVEREF(__pyx_t_1);
                __Pyx_ErrRestoreWithState(__pyx_t_10, __pyx_t_6, __pyx_t_1);
                __pyx_t_10 = 0; __pyx_t_6 = 0; __pyx_t_1 = 0; 
                __PYX_ERR(0, 988, __pyx_L24_except_error)
              }
              __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
              __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
              __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
              goto __pyx_L23_exception_handled;
            }
            __pyx_L24_except_error:;
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
            goto __pyx_L11_error;
            __pyx_L23_exception_handled:;
            __Pyx_XGIVEREF(__pyx_t_18);
            __Pyx_XGIVEREF(__pyx_t_19);
            __Pyx_XGIVEREF(__pyx_t_20);
            __Pyx_ExceptionReset(__pyx_t_18, __pyx_t_19, __pyx_t_20);
            __pyx_L27_try_end:;
          }
        }
        /*finally:*/ {
          /*normal exit:*/{
            if (__pyx_t_17) {
              __pyx_t_20 = __Pyx_PyObject_Call(__pyx_t_17, __pyx_tuple__35, NULL);
              __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
              if (unlikely(!__pyx_t_20)) __PYX_ERR(0, 988, __pyx_L11_error)
              __Pyx_GOTREF(__pyx_t_20);
              __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_20);
              __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
              __Pyx_XGOTREF(__pyx_r);
              if (likely(__pyx_r)) {
                __Pyx_XGIVEREF(__pyx_t_14);
                __pyx_cur_scope->__pyx_t_0 = __pyx_t_14;
                __Pyx_XGIVEREF(__pyx_t_15);
                __pyx_cur_scope->__pyx_t_1 = __pyx_t_15;
                __Pyx_XGIVEREF(__pyx_t_16);
                __pyx_cur_scope->__pyx_t_2 = __pyx_t_16;
                __Pyx_XGIVEREF(__pyx_t_17);
                __pyx_cur_scope->__pyx_t_3 = __pyx_t_17;
                __Pyx_XGIVEREF(__pyx_t_20);
                __pyx_cur_scope->__pyx_t_4 = __pyx_t_20;
                __Pyx_XGIVEREF(__pyx_r);
                __Pyx_RefNannyFinishContext();
                __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
                /* return from generator, awaiting value */
                __pyx_generator->resume_label = 4;
                return __pyx_r;
                __pyx_L36_resume_from_await:;
                __pyx_t_14 = __pyx_cur_scope->__pyx_t_0;
                __pyx_cur_scope->__pyx_t_0 = 0;
                __Pyx_XGOTREF(__pyx_t_14);
                __pyx_t_15 = __pyx_cur_scope->__pyx_t_1;
                __pyx_cur_scope->__pyx_t_1 = 0;
                __Pyx_XGOTREF(__pyx_t_15);
                __pyx_t_16 = __pyx_cur_scope->__pyx_t_2;
                __pyx_cur_scope->__pyx_t_2 = 0;
                __Pyx_XGOTREF(__pyx_t_16);
                __pyx_t_17 = __pyx_cur_scope->__pyx_t_3;
                __pyx_cur_scope->__pyx_t_3 = 0;
                __Pyx_XGOTREF(__pyx_t_17);
                __pyx_t_20 = __pyx_cur_scope->__pyx_t_4;
                __pyx_cur_scope->__pyx_t_4 = 0;
                __Pyx_XGOTREF(__pyx_t_20);
                if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 988, __pyx_L11_error)
                __pyx_t_1 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_1);
              } else {
                __pyx_t_1 = NULL;
                if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_1) < 0) __PYX_ERR(0, 988, __pyx_L11_error)
                __Pyx_GOTREF(__pyx_t_1);
              }
              __pyx_t_20 = __pyx_t_1;
              __pyx_t_1 = 0;
              __Pyx_DECREF(__pyx_t_20); __pyx_t_20 = 0;
            }
            goto __pyx_L21;
          }
          __pyx_L21:;
        }
        goto __pyx_L37;
        __pyx_L17_error:;
        __Pyx_DECREF(__pyx_t_17); __pyx_t_17 = 0;
        goto __pyx_L11_error;
        __pyx_L37:;
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":987
 *         successful_cancellation = []
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             async with timeout(timeout_seconds):
 *                 api_responses = await safe_gather(*tasks, return_exceptions=True)
 */
    }
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
    __Pyx_XDECREF(__pyx_t_16); __pyx_t_16 = 0;
    goto __pyx_L16_try_end;
    __pyx_L11_error:;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
    __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":994
 *                         order_id_set.remove(order_id)
 *                         successful_cancellation.append(CancellationResult(order_id, True))
 *         except Exception:             # <<<<<<<<<<<<<<
 *             self.logger().network(
 *                 f"Unexpected error cancelling orders.",
 */
    __pyx_t_5 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_5) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.cancel_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_6, &__pyx_t_10) < 0) __PYX_ERR(0, 994, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_10);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":995
 *                         successful_cancellation.append(CancellationResult(order_id, True))
 *         except Exception:
 *             self.logger().network(             # <<<<<<<<<<<<<<
 *                 f"Unexpected error cancelling orders.",
 *                 app_warning_msg="Failed to cancel order on Bittrex. Check API key and network connection."
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_logger); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 995, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_11 = NULL;
      __pyx_t_5 = 0;
      if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_12))) {
        __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_12);
        if (likely(__pyx_t_11)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
          __Pyx_INCREF(__pyx_t_11);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_12, function);
          __pyx_t_5 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[1] = {__pyx_t_11, };
        __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+1-__pyx_t_5, 0+__pyx_t_5);
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 995, __pyx_L13_except_error)
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      }
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_network); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 995, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":997
 *             self.logger().network(
 *                 f"Unexpected error cancelling orders.",
 *                 app_warning_msg="Failed to cancel order on Bittrex. Check API key and network connection."             # <<<<<<<<<<<<<<
 *             )
 * 
 */
      __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 997, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_app_warning_msg, __pyx_kp_u_Failed_to_cancel_order_on_Bittre) < 0) __PYX_ERR(0, 997, __pyx_L13_except_error)

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":995
 *                         successful_cancellation.append(CancellationResult(order_id, True))
 *         except Exception:
 *             self.logger().network(             # <<<<<<<<<<<<<<
 *                 f"Unexpected error cancelling orders.",
 *                 app_warning_msg="Failed to cancel order on Bittrex. Check API key and network connection."
 */
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_tuple__36, __pyx_t_2); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 995, __pyx_L13_except_error)
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L12_exception_handled;
    }
    goto __pyx_L13_except_error;
    __pyx_L13_except_error:;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":987
 *         successful_cancellation = []
 * 
 *         try:             # <<<<<<<<<<<<<<
 *             async with timeout(timeout_seconds):
 *                 api_responses = await safe_gather(*tasks, return_exceptions=True)
 */
    __Pyx_XGIVEREF(__pyx_t_14);
    __Pyx_XGIVEREF(__pyx_t_15);
    __Pyx_XGIVEREF(__pyx_t_16);
    __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
    goto __pyx_L1_error;
    __pyx_L12_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_14);
    __Pyx_XGIVEREF(__pyx_t_15);
    __Pyx_XGIVEREF(__pyx_t_16);
    __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
    __pyx_L16_try_end:;
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1000
 *             )
 * 
 *         failed_cancellation = [CancellationResult(oid, False) for oid in order_id_set]             # <<<<<<<<<<<<<<
 *         return successful_cancellation + failed_cancellation
 * 
 */
  { /* enter inner scope */
    __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1000, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_set_iterator(__pyx_cur_scope->__pyx_v_order_id_set, 1, (&__pyx_t_3), (&__pyx_t_5)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1000, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF(__pyx_t_6);
    __pyx_t_6 = __pyx_t_1;
    __pyx_t_1 = 0;
    while (1) {
      __pyx_t_7 = __Pyx_set_iter_next(__pyx_t_6, __pyx_t_3, &__pyx_t_4, &__pyx_t_1, __pyx_t_5);
      if (unlikely(__pyx_t_7 == 0)) break;
      if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(0, 1000, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XGOTREF(__pyx_cur_scope->__pyx_9genexpr10__pyx_v_oid);
      __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_9genexpr10__pyx_v_oid, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      __pyx_t_1 = 0;
      __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_n_s_CancellationResult); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1000, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_2 = NULL;
      __pyx_t_7 = 0;
      if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_11))) {
        __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_11);
        if (likely(__pyx_t_2)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_11);
          __Pyx_INCREF(__pyx_t_2);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_11, function);
          __pyx_t_7 = 1;
        }
      }
      {
        PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_cur_scope->__pyx_9genexpr10__pyx_v_oid, Py_False};
        __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+1-__pyx_t_7, 2+__pyx_t_7);
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1000, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_10, (PyObject*)__pyx_t_1))) __PYX_ERR(0, 1000, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  } /* exit inner scope */
  __Pyx_GIVEREF(__pyx_t_10);
  __pyx_cur_scope->__pyx_v_failed_cancellation = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1001
 * 
 *         failed_cancellation = [CancellationResult(oid, False) for oid in order_id_set]
 *         return successful_cancellation + failed_cancellation             # <<<<<<<<<<<<<<
 * 
 *     async def _http_client(self) -> aiohttp.ClientSession:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_10 = PyNumber_Add(__pyx_cur_scope->__pyx_v_successful_cancellation, __pyx_cur_scope->__pyx_v_failed_cancellation); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":981
 *         return order_id
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:             # <<<<<<<<<<<<<<
 *         incomplete_orders = [order for order in self._in_flight_orders.values() if not order.is_done]
 *         tasks = [self.execute_cancel(o.trading_pair, o.client_order_id) for o in incomplete_orders]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("cancel_all", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_58generator14(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1003
 *         return successful_cancellation + failed_cancellation
 * 
 *     async def _http_client(self) -> aiohttp.ClientSession:             # <<<<<<<<<<<<<<
 *         if self._shared_client is None:
 *             self._shared_client = aiohttp.ClientSession()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_57_http_client(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_57_http_client = {"_http_client", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_57_http_client, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_57_http_client(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_http_client (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_http_client", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_http_client", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_56_http_client(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_56_http_client(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_http_client", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1003, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_58generator14, __pyx_codeobj__37, (PyObject *) __pyx_cur_scope, __pyx_n_s_http_client, __pyx_n_s_BittrexExchange__http_client, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 1003, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._http_client", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_58generator14(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_http_client", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1003, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1004
 * 
 *     async def _http_client(self) -> aiohttp.ClientSession:
 *         if self._shared_client is None:             # <<<<<<<<<<<<<<
 *             self._shared_client = aiohttp.ClientSession()
 *         return self._shared_client
 */
  __pyx_t_1 = (__pyx_cur_scope->__pyx_v_self->_shared_client == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1005
 *     async def _http_client(self) -> aiohttp.ClientSession:
 *         if self._shared_client is None:
 *             self._shared_client = aiohttp.ClientSession()             # <<<<<<<<<<<<<<
 *         return self._shared_client
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_aiohttp); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1005, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_ClientSession); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1005, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_4, };
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1005, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_shared_client);
    __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_shared_client);
    __pyx_cur_scope->__pyx_v_self->_shared_client = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1004
 * 
 *     async def _http_client(self) -> aiohttp.ClientSession:
 *         if self._shared_client is None:             # <<<<<<<<<<<<<<
 *             self._shared_client = aiohttp.ClientSession()
 *         return self._shared_client
 */
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1006
 *         if self._shared_client is None:
 *             self._shared_client = aiohttp.ClientSession()
 *         return self._shared_client             # <<<<<<<<<<<<<<
 * 
 *     async def _api_request(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_cur_scope->__pyx_v_self->_shared_client);
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1003
 *         return successful_cancellation + failed_cancellation
 * 
 *     async def _http_client(self) -> aiohttp.ClientSession:             # <<<<<<<<<<<<<<
 *         if self._shared_client is None:
 *             self._shared_client = aiohttp.ClientSession()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("_http_client", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_61generator15(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1008
 *         return self._shared_client
 * 
 *     async def _api_request(self,             # <<<<<<<<<<<<<<
 *                            http_method: str,
 *                            path_url: str = None,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_60_api_request(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_60_api_request = {"_api_request", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_60_api_request, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_60_api_request(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_http_method = 0;
  PyObject *__pyx_v_path_url = 0;
  PyObject *__pyx_v_params = 0;
  PyObject *__pyx_v_body = 0;
  PyObject *__pyx_v_subaccount_id = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_api_request (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_http_method,&__pyx_n_s_path_url,&__pyx_n_s_params,&__pyx_n_s_body,&__pyx_n_s_subaccount_id,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_http_method,&__pyx_n_s_path_url,&__pyx_n_s_params,&__pyx_n_s_body,&__pyx_n_s_subaccount_id,0};
    #endif
    PyObject* values[5] = {0,0,0,0,0};

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1010
 *     async def _api_request(self,
 *                            http_method: str,
 *                            path_url: str = None,             # <<<<<<<<<<<<<<
 *                            params: Dict[str, any] = None,
 *                            body: Dict[str, any] = None,
 */
    values[1] = ((PyObject*)Py_None);

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1011
 *                            http_method: str,
 *                            path_url: str = None,
 *                            params: Dict[str, any] = None,             # <<<<<<<<<<<<<<
 *                            body: Dict[str, any] = None,
 *                            subaccount_id: str = '') -> Dict[str, Any]:
 */
    values[2] = ((PyObject *)Py_None);

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1012
 *                            path_url: str = None,
 *                            params: Dict[str, any] = None,
 *                            body: Dict[str, any] = None,             # <<<<<<<<<<<<<<
 *                            subaccount_id: str = '') -> Dict[str, Any]:
 *         assert path_url is not None
 */
    values[3] = ((PyObject *)Py_None);
    values[4] = ((PyObject*)__pyx_kp_u_);
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_http_method)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1008, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_path_url);
          if (value) { values[1] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1008, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_params);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1008, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_body);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1008, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_subaccount_id);
          if (value) { values[4] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1008, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "_api_request") < 0)) __PYX_ERR(0, 1008, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_http_method = ((PyObject*)values[0]);
    __pyx_v_path_url = ((PyObject*)values[1]);
    __pyx_v_params = values[2];
    __pyx_v_body = values[3];
    __pyx_v_subaccount_id = ((PyObject*)values[4]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_api_request", 0, 1, 5, __pyx_nargs); __PYX_ERR(0, 1008, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._api_request", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_http_method), (&PyUnicode_Type), 1, "http_method", 1))) __PYX_ERR(0, 1009, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path_url), (&PyUnicode_Type), 1, "path_url", 1))) __PYX_ERR(0, 1010, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_subaccount_id), (&PyUnicode_Type), 1, "subaccount_id", 1))) __PYX_ERR(0, 1013, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_59_api_request(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), __pyx_v_http_method, __pyx_v_path_url, __pyx_v_params, __pyx_v_body, __pyx_v_subaccount_id);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1008
 *         return self._shared_client
 * 
 *     async def _api_request(self,             # <<<<<<<<<<<<<<
 *                            http_method: str,
 *                            path_url: str = None,
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_59_api_request(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_http_method, PyObject *__pyx_v_path_url, PyObject *__pyx_v_params, PyObject *__pyx_v_body, PyObject *__pyx_v_subaccount_id) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_api_request", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1008, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __pyx_cur_scope->__pyx_v_http_method = __pyx_v_http_method;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_http_method);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_http_method);
  __pyx_cur_scope->__pyx_v_path_url = __pyx_v_path_url;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_path_url);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_path_url);
  __pyx_cur_scope->__pyx_v_params = __pyx_v_params;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_params);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_params);
  __pyx_cur_scope->__pyx_v_body = __pyx_v_body;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_body);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_body);
  __pyx_cur_scope->__pyx_v_subaccount_id = __pyx_v_subaccount_id;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_subaccount_id);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_subaccount_id);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_61generator15, __pyx_codeobj__38, (PyObject *) __pyx_cur_scope, __pyx_n_s_api_request, __pyx_n_s_BittrexExchange__api_request, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 1008, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._api_request", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_61generator15(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  Py_UCS4 __pyx_t_13;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *__pyx_t_16 = NULL;
  PyObject *__pyx_t_17 = NULL;
  PyObject *__pyx_t_18 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_api_request", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L5_resume_from_await;
    case 2: goto __pyx_L7_resume_from_await;
    case 3: goto __pyx_L17_resume_from_await;
    case 4: goto __pyx_L24_resume_from_await;
    case 5: goto __pyx_L25_resume_from_await;
    case 6: goto __pyx_L26_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1008, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1014
 *                            body: Dict[str, any] = None,
 *                            subaccount_id: str = '') -> Dict[str, Any]:
 *         assert path_url is not None             # <<<<<<<<<<<<<<
 * 
 *         url = f"{self.BITTREX_API_ENDPOINT}{path_url}"
 */
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(!Py_OptimizeFlag)) {
    __pyx_t_1 = (__pyx_cur_scope->__pyx_v_path_url != ((PyObject*)Py_None));
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(0, 1014, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1014, __pyx_L1_error)
  #endif

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1016
 *         assert path_url is not None
 * 
 *         url = f"{self.BITTREX_API_ENDPOINT}{path_url}"             # <<<<<<<<<<<<<<
 * 
 *         auth_dict = self.bittrex_auth.generate_auth_dict(http_method, url, params, body, subaccount_id)
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_BITTREX_API_ENDPOINT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_FormatSimple(__pyx_t_3, __pyx_empty_unicode); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_path_url); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyUnicode_ConcatInPlace(__pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_url = ((PyObject*)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1018
 *         url = f"{self.BITTREX_API_ENDPOINT}{path_url}"
 * 
 *         auth_dict = self.bittrex_auth.generate_auth_dict(http_method, url, params, body, subaccount_id)             # <<<<<<<<<<<<<<
 * 
 *         # Updates the headers and params accordingly
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_bittrex_auth); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_generate_auth_dict); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1018, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[6] = {__pyx_t_3, __pyx_cur_scope->__pyx_v_http_method, __pyx_cur_scope->__pyx_v_url, __pyx_cur_scope->__pyx_v_params, __pyx_cur_scope->__pyx_v_body, __pyx_cur_scope->__pyx_v_subaccount_id};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 5+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1018, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_auth_dict = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1021
 * 
 *         # Updates the headers and params accordingly
 *         headers = auth_dict["headers"]             # <<<<<<<<<<<<<<
 * 
 *         if body:
 */
  __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_auth_dict, __pyx_n_u_headers); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_headers = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1023
 *         headers = auth_dict["headers"]
 * 
 *         if body:             # <<<<<<<<<<<<<<
 *             body = auth_dict["body"]  # Ensures the body is the same as that signed in Api-Content-Hash
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_cur_scope->__pyx_v_body); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 1023, __pyx_L1_error)
  if (__pyx_t_2) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1024
 * 
 *         if body:
 *             body = auth_dict["body"]  # Ensures the body is the same as that signed in Api-Content-Hash             # <<<<<<<<<<<<<<
 * 
 *         client = await self._http_client()
 */
    __pyx_t_5 = __Pyx_PyObject_Dict_GetItem(__pyx_cur_scope->__pyx_v_auth_dict, __pyx_n_u_body); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1024, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_body);
    __Pyx_DECREF_SET(__pyx_cur_scope->__pyx_v_body, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1023
 *         headers = auth_dict["headers"]
 * 
 *         if body:             # <<<<<<<<<<<<<<
 *             body = auth_dict["body"]  # Ensures the body is the same as that signed in Api-Content-Hash
 * 
 */
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1026
 *             body = auth_dict["body"]  # Ensures the body is the same as that signed in Api-Content-Hash
 * 
 *         client = await self._http_client()             # <<<<<<<<<<<<<<
 *         async with client.request(http_method,
 *                                   url=url,
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_http_client); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = NULL;
  __pyx_t_6 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
      __pyx_t_6 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_XGOTREF(__pyx_r);
  if (likely(__pyx_r)) {
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
    /* return from generator, awaiting value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L5_resume_from_await:;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1026, __pyx_L1_error)
    __pyx_t_5 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_5);
  } else {
    __pyx_t_5 = NULL;
    if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_5) < 0) __PYX_ERR(0, 1026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  }
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_cur_scope->__pyx_v_client = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1027
 * 
 *         client = await self._http_client()
 *         async with client.request(http_method,             # <<<<<<<<<<<<<<
 *                                   url=url,
 *                                   headers=headers,
 */
  /*with:*/ {
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_client, __pyx_n_s_request); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_cur_scope->__pyx_v_http_method);
    __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_http_method);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_cur_scope->__pyx_v_http_method);

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1028
 *         client = await self._http_client()
 *         async with client.request(http_method,
 *                                   url=url,             # <<<<<<<<<<<<<<
 *                                   headers=headers,
 *                                   params=params,
 */
    __pyx_t_3 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1028, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_url, __pyx_cur_scope->__pyx_v_url) < 0) __PYX_ERR(0, 1028, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1029
 *         async with client.request(http_method,
 *                                   url=url,
 *                                   headers=headers,             # <<<<<<<<<<<<<<
 *                                   params=params,
 *                                   data=body,
 */
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_headers, __pyx_cur_scope->__pyx_v_headers) < 0) __PYX_ERR(0, 1028, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1030
 *                                   url=url,
 *                                   headers=headers,
 *                                   params=params,             # <<<<<<<<<<<<<<
 *                                   data=body,
 *                                   timeout=self.API_CALL_TIMEOUT) as response:
 */
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_params, __pyx_cur_scope->__pyx_v_params) < 0) __PYX_ERR(0, 1028, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1031
 *                                   headers=headers,
 *                                   params=params,
 *                                   data=body,             # <<<<<<<<<<<<<<
 *                                   timeout=self.API_CALL_TIMEOUT) as response:
 *             data = await response.json()
 */
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_data, __pyx_cur_scope->__pyx_v_body) < 0) __PYX_ERR(0, 1028, __pyx_L1_error)

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1032
 *                                   params=params,
 *                                   data=body,
 *                                   timeout=self.API_CALL_TIMEOUT) as response:             # <<<<<<<<<<<<<<
 *             data = await response.json()
 *             if response.status not in [200, 201]:  # HTTP Response code of 20X generally means it is successful
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_API_CALL_TIMEOUT); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1032, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_timeout, __pyx_t_7) < 0) __PYX_ERR(0, 1028, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1027
 * 
 *         client = await self._http_client()
 *         async with client.request(http_method,             # <<<<<<<<<<<<<<
 *                                   url=url,
 *                                   headers=headers,
 */
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, __pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_8 = __Pyx_PyObject_LookupSpecial(__pyx_t_7, __pyx_n_s_aexit); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_4 = __Pyx_PyObject_LookupSpecial(__pyx_t_7, __pyx_n_s_aenter); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1027, __pyx_L6_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_5, };
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1027, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XGOTREF(__pyx_r);
    if (likely(__pyx_r)) {
      __Pyx_XGIVEREF(__pyx_t_7);
      __pyx_cur_scope->__pyx_t_0 = __pyx_t_7;
      __Pyx_XGIVEREF(__pyx_t_8);
      __pyx_cur_scope->__pyx_t_1 = __pyx_t_8;
      __Pyx_XGIVEREF(__pyx_r);
      __Pyx_RefNannyFinishContext();
      __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
      /* return from generator, awaiting value */
      __pyx_generator->resume_label = 2;
      return __pyx_r;
      __pyx_L7_resume_from_await:;
      __pyx_t_7 = __pyx_cur_scope->__pyx_t_0;
      __pyx_cur_scope->__pyx_t_0 = 0;
      __Pyx_XGOTREF(__pyx_t_7);
      __pyx_t_8 = __pyx_cur_scope->__pyx_t_1;
      __pyx_cur_scope->__pyx_t_1 = 0;
      __Pyx_XGOTREF(__pyx_t_8);
      if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1027, __pyx_L6_error)
      __pyx_t_3 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_3);
    } else {
      __pyx_t_3 = NULL;
      if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_3) < 0) __PYX_ERR(0, 1027, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    __pyx_t_4 = __pyx_t_3;
    __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    /*try:*/ {
      {
        __Pyx_ExceptionSave(&__pyx_t_9, &__pyx_t_10, &__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_11);
        /*try:*/ {
          __Pyx_GIVEREF(__pyx_t_4);
          __pyx_cur_scope->__pyx_v_response = __pyx_t_4;
          __pyx_t_4 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1033
 *                                   data=body,
 *                                   timeout=self.API_CALL_TIMEOUT) as response:
 *             data = await response.json()             # <<<<<<<<<<<<<<
 *             if response.status not in [200, 201]:  # HTTP Response code of 20X generally means it is successful
 *                 raise IOError(f"Error fetching response from {http_method}-{url}. HTTP Status Code {response.status}: "
 */
          __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_response, __pyx_n_s_json); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1033, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_3 = NULL;
          __pyx_t_6 = 0;
          if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_7))) {
            __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_7);
            if (likely(__pyx_t_3)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
              __Pyx_INCREF(__pyx_t_3);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_7, function);
              __pyx_t_6 = 1;
            }
          }
          {
            PyObject *__pyx_callargs[1] = {__pyx_t_3, };
            __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+1-__pyx_t_6, 0+__pyx_t_6);
            __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
            if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1033, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          }
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_4);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_8);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_8;
            __Pyx_XGIVEREF(__pyx_t_9);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_9;
            __Pyx_XGIVEREF(__pyx_t_10);
            __pyx_cur_scope->__pyx_t_2 = __pyx_t_10;
            __Pyx_XGIVEREF(__pyx_t_11);
            __pyx_cur_scope->__pyx_t_3 = __pyx_t_11;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 3;
            return __pyx_r;
            __pyx_L17_resume_from_await:;
            __pyx_t_8 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_8);
            __pyx_t_9 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_9);
            __pyx_t_10 = __pyx_cur_scope->__pyx_t_2;
            __pyx_cur_scope->__pyx_t_2 = 0;
            __Pyx_XGOTREF(__pyx_t_10);
            __pyx_t_11 = __pyx_cur_scope->__pyx_t_3;
            __pyx_cur_scope->__pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_t_11);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1033, __pyx_L11_error)
            __pyx_t_4 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_4);
          } else {
            __pyx_t_4 = NULL;
            if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_4) < 0) __PYX_ERR(0, 1033, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_4);
          }
          __Pyx_GIVEREF(__pyx_t_4);
          __pyx_cur_scope->__pyx_v_data = __pyx_t_4;
          __pyx_t_4 = 0;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1034
 *                                   timeout=self.API_CALL_TIMEOUT) as response:
 *             data = await response.json()
 *             if response.status not in [200, 201]:  # HTTP Response code of 20X generally means it is successful             # <<<<<<<<<<<<<<
 *                 raise IOError(f"Error fetching response from {http_method}-{url}. HTTP Status Code {response.status}: "
 *                               f"{data}")
 */
          __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_response, __pyx_n_s_status); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1034, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_7 = __Pyx_PyInt_NeObjC(__pyx_t_4, __pyx_int_200, 0xC8, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1034, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1034, __pyx_L11_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          if (__pyx_t_1) {
          } else {
            __pyx_t_2 = __pyx_t_1;
            goto __pyx_L19_bool_binop_done;
          }
          __pyx_t_7 = __Pyx_PyInt_NeObjC(__pyx_t_4, __pyx_int_201, 0xC9, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1034, __pyx_L11_error)
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_7); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 1034, __pyx_L11_error)
          __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
          __pyx_t_2 = __pyx_t_1;
          __pyx_L19_bool_binop_done:;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_1 = (__pyx_t_2 != 0);
          if (unlikely(__pyx_t_1)) {

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1035
 *             data = await response.json()
 *             if response.status not in [200, 201]:  # HTTP Response code of 20X generally means it is successful
 *                 raise IOError(f"Error fetching response from {http_method}-{url}. HTTP Status Code {response.status}: "             # <<<<<<<<<<<<<<
 *                               f"{data}")
 *             return data
 */
            __pyx_t_4 = PyTuple_New(8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1035, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_4);
            __pyx_t_12 = 0;
            __pyx_t_13 = 127;
            __Pyx_INCREF(__pyx_kp_u_Error_fetching_response_from);
            __pyx_t_12 += 29;
            __Pyx_GIVEREF(__pyx_kp_u_Error_fetching_response_from);
            PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_kp_u_Error_fetching_response_from);
            __pyx_t_7 = __Pyx_PyUnicode_Unicode(__pyx_cur_scope->__pyx_v_http_method); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1035, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_7) : __pyx_t_13;
            __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_7);
            __Pyx_GIVEREF(__pyx_t_7);
            PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_7);
            __pyx_t_7 = 0;
            __Pyx_INCREF(__pyx_kp_u__11);
            __pyx_t_12 += 1;
            __Pyx_GIVEREF(__pyx_kp_u__11);
            PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_kp_u__11);
            __Pyx_INCREF(__pyx_cur_scope->__pyx_v_url);
            __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_cur_scope->__pyx_v_url) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_cur_scope->__pyx_v_url) : __pyx_t_13;
            __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_cur_scope->__pyx_v_url);
            __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_url);
            PyTuple_SET_ITEM(__pyx_t_4, 3, __pyx_cur_scope->__pyx_v_url);
            __Pyx_INCREF(__pyx_kp_u_HTTP_Status_Code);
            __pyx_t_12 += 19;
            __Pyx_GIVEREF(__pyx_kp_u_HTTP_Status_Code);
            PyTuple_SET_ITEM(__pyx_t_4, 4, __pyx_kp_u_HTTP_Status_Code);
            __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_response, __pyx_n_s_status); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1035, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_7);
            __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_t_7, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1035, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
            __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_13;
            __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_4, 5, __pyx_t_3);
            __pyx_t_3 = 0;
            __Pyx_INCREF(__pyx_kp_u__9);
            __pyx_t_12 += 2;
            __Pyx_GIVEREF(__pyx_kp_u__9);
            PyTuple_SET_ITEM(__pyx_t_4, 6, __pyx_kp_u__9);

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1036
 *             if response.status not in [200, 201]:  # HTTP Response code of 20X generally means it is successful
 *                 raise IOError(f"Error fetching response from {http_method}-{url}. HTTP Status Code {response.status}: "
 *                               f"{data}")             # <<<<<<<<<<<<<<
 *             return data
 * 
 */
            __pyx_t_3 = __Pyx_PyObject_FormatSimple(__pyx_cur_scope->__pyx_v_data, __pyx_empty_unicode); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1036, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_13 = (__Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) > __pyx_t_13) ? __Pyx_PyUnicode_MAX_CHAR_VALUE(__pyx_t_3) : __pyx_t_13;
            __pyx_t_12 += __Pyx_PyUnicode_GET_LENGTH(__pyx_t_3);
            __Pyx_GIVEREF(__pyx_t_3);
            PyTuple_SET_ITEM(__pyx_t_4, 7, __pyx_t_3);
            __pyx_t_3 = 0;

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1035
 *             data = await response.json()
 *             if response.status not in [200, 201]:  # HTTP Response code of 20X generally means it is successful
 *                 raise IOError(f"Error fetching response from {http_method}-{url}. HTTP Status Code {response.status}: "             # <<<<<<<<<<<<<<
 *                               f"{data}")
 *             return data
 */
            __pyx_t_3 = __Pyx_PyUnicode_Join(__pyx_t_4, 8, __pyx_t_12, __pyx_t_13); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1035, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_builtin_IOError, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1035, __pyx_L11_error)
            __Pyx_GOTREF(__pyx_t_4);
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __Pyx_Raise(__pyx_t_4, 0, 0, 0);
            __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
            __PYX_ERR(0, 1035, __pyx_L11_error)

            /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1034
 *                                   timeout=self.API_CALL_TIMEOUT) as response:
 *             data = await response.json()
 *             if response.status not in [200, 201]:  # HTTP Response code of 20X generally means it is successful             # <<<<<<<<<<<<<<
 *                 raise IOError(f"Error fetching response from {http_method}-{url}. HTTP Status Code {response.status}: "
 *                               f"{data}")
 */
          }

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1037
 *                 raise IOError(f"Error fetching response from {http_method}-{url}. HTTP Status Code {response.status}: "
 *                               f"{data}")
 *             return data             # <<<<<<<<<<<<<<
 * 
 *     async def check_network(self) -> NetworkStatus:
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_cur_scope->__pyx_v_data);
          goto __pyx_L15_try_return;

          /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1027
 * 
 *         client = await self._http_client()
 *         async with client.request(http_method,             # <<<<<<<<<<<<<<
 *                                   url=url,
 *                                   headers=headers,
 */
        }
        __pyx_L11_error:;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        /*except:*/ {
          __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._api_request", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_3, &__pyx_t_7) < 0) __PYX_ERR(0, 1027, __pyx_L13_except_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_GOTREF(__pyx_t_7);
          __pyx_t_5 = PyTuple_Pack(3, __pyx_t_4, __pyx_t_3, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1027, __pyx_L13_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_5, NULL);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1027, __pyx_L13_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_14);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_3);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_3;
            __Pyx_XGIVEREF(__pyx_t_4);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_4;
            __Pyx_XGIVEREF(__pyx_t_7);
            __pyx_cur_scope->__pyx_t_2 = __pyx_t_7;
            __Pyx_XGIVEREF(__pyx_t_8);
            __pyx_cur_scope->__pyx_t_3 = __pyx_t_8;
            __Pyx_XGIVEREF(__pyx_t_9);
            __pyx_cur_scope->__pyx_t_4 = __pyx_t_9;
            __Pyx_XGIVEREF(__pyx_t_10);
            __pyx_cur_scope->__pyx_t_5 = __pyx_t_10;
            __Pyx_XGIVEREF(__pyx_t_11);
            __pyx_cur_scope->__pyx_t_6 = __pyx_t_11;
            __Pyx_XGIVEREF(__pyx_t_14);
            __pyx_cur_scope->__pyx_t_7 = __pyx_t_14;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_SwapException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 4;
            return __pyx_r;
            __pyx_L24_resume_from_await:;
            __pyx_t_3 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_3);
            __pyx_t_4 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_4);
            __pyx_t_7 = __pyx_cur_scope->__pyx_t_2;
            __pyx_cur_scope->__pyx_t_2 = 0;
            __Pyx_XGOTREF(__pyx_t_7);
            __pyx_t_8 = __pyx_cur_scope->__pyx_t_3;
            __pyx_cur_scope->__pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_t_8);
            __pyx_t_9 = __pyx_cur_scope->__pyx_t_4;
            __pyx_cur_scope->__pyx_t_4 = 0;
            __Pyx_XGOTREF(__pyx_t_9);
            __pyx_t_10 = __pyx_cur_scope->__pyx_t_5;
            __pyx_cur_scope->__pyx_t_5 = 0;
            __Pyx_XGOTREF(__pyx_t_10);
            __pyx_t_11 = __pyx_cur_scope->__pyx_t_6;
            __pyx_cur_scope->__pyx_t_6 = 0;
            __Pyx_XGOTREF(__pyx_t_11);
            __pyx_t_14 = __pyx_cur_scope->__pyx_t_7;
            __pyx_cur_scope->__pyx_t_7 = 0;
            __Pyx_XGOTREF(__pyx_t_14);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1027, __pyx_L13_except_error)
            __pyx_t_5 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_5);
          } else {
            __pyx_t_5 = NULL;
            if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_5) < 0) __PYX_ERR(0, 1027, __pyx_L13_except_error)
            __Pyx_GOTREF(__pyx_t_5);
          }
          __pyx_t_14 = __pyx_t_5;
          __pyx_t_5 = 0;
          __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          if (__pyx_t_1 < 0) __PYX_ERR(0, 1027, __pyx_L13_except_error)
          __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
          if (unlikely(__pyx_t_2)) {
            __Pyx_GIVEREF(__pyx_t_4);
            __Pyx_GIVEREF(__pyx_t_3);
            __Pyx_XGIVEREF(__pyx_t_7);
            __Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_3, __pyx_t_7);
            __pyx_t_4 = 0; __pyx_t_3 = 0; __pyx_t_7 = 0; 
            __PYX_ERR(0, 1027, __pyx_L13_except_error)
          }
          __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
          goto __pyx_L12_exception_handled;
        }
        __pyx_L13_except_error:;
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        goto __pyx_L1_error;
        __pyx_L15_try_return:;
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
        goto __pyx_L8_return;
        __pyx_L12_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_ExceptionReset(__pyx_t_9, __pyx_t_10, __pyx_t_11);
      }
    }
    /*finally:*/ {
      /*normal exit:*/{
        if (__pyx_t_8) {
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__35, NULL);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 1027, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_11);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_8);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_8;
            __Pyx_XGIVEREF(__pyx_t_11);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_11;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 5;
            return __pyx_r;
            __pyx_L25_resume_from_await:;
            __pyx_t_8 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_8);
            __pyx_t_11 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_11);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1027, __pyx_L1_error)
            __pyx_t_7 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_7);
          } else {
            __pyx_t_7 = NULL;
            if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_7) < 0) __PYX_ERR(0, 1027, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
          }
          __pyx_t_11 = __pyx_t_7;
          __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        goto __pyx_L10;
      }
      __pyx_L8_return: {
        __Pyx_PyThreadState_assign
        __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_9 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0;
        if (PY_MAJOR_VERSION >= 3) __Pyx_ExceptionSwap(&__pyx_t_14, &__pyx_t_15, &__pyx_t_16);
        if ((PY_MAJOR_VERSION < 3) || unlikely(__Pyx_GetException(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9) < 0)) __Pyx_ErrFetch(&__pyx_t_11, &__pyx_t_10, &__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_14);
        __Pyx_XGOTREF(__pyx_t_15);
        __Pyx_XGOTREF(__pyx_t_16);
        __pyx_t_17 = __pyx_r;
        __pyx_r = 0;
        if (__pyx_t_8) {
          __pyx_t_18 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__35, NULL);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          if (unlikely(!__pyx_t_18)) __PYX_ERR(0, 1027, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_18);
          __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_18);
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
          __Pyx_XGOTREF(__pyx_r);
          if (likely(__pyx_r)) {
            __Pyx_XGIVEREF(__pyx_t_8);
            __pyx_cur_scope->__pyx_t_0 = __pyx_t_8;
            __Pyx_XGIVEREF(__pyx_t_9);
            __pyx_cur_scope->__pyx_t_1 = __pyx_t_9;
            __Pyx_XGIVEREF(__pyx_t_10);
            __pyx_cur_scope->__pyx_t_2 = __pyx_t_10;
            __Pyx_XGIVEREF(__pyx_t_11);
            __pyx_cur_scope->__pyx_t_3 = __pyx_t_11;
            __Pyx_XGIVEREF(__pyx_t_14);
            __pyx_cur_scope->__pyx_t_4 = __pyx_t_14;
            __Pyx_XGIVEREF(__pyx_t_15);
            __pyx_cur_scope->__pyx_t_5 = __pyx_t_15;
            __Pyx_XGIVEREF(__pyx_t_16);
            __pyx_cur_scope->__pyx_t_6 = __pyx_t_16;
            __Pyx_XGIVEREF(__pyx_t_17);
            __pyx_cur_scope->__pyx_t_7 = __pyx_t_17;
            __Pyx_XGIVEREF(__pyx_t_18);
            __pyx_cur_scope->__pyx_t_8 = __pyx_t_18;
            __Pyx_XGIVEREF(__pyx_r);
            __Pyx_RefNannyFinishContext();
            __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
            /* return from generator, awaiting value */
            __pyx_generator->resume_label = 6;
            return __pyx_r;
            __pyx_L26_resume_from_await:;
            __pyx_t_8 = __pyx_cur_scope->__pyx_t_0;
            __pyx_cur_scope->__pyx_t_0 = 0;
            __Pyx_XGOTREF(__pyx_t_8);
            __pyx_t_9 = __pyx_cur_scope->__pyx_t_1;
            __pyx_cur_scope->__pyx_t_1 = 0;
            __Pyx_XGOTREF(__pyx_t_9);
            __pyx_t_10 = __pyx_cur_scope->__pyx_t_2;
            __pyx_cur_scope->__pyx_t_2 = 0;
            __Pyx_XGOTREF(__pyx_t_10);
            __pyx_t_11 = __pyx_cur_scope->__pyx_t_3;
            __pyx_cur_scope->__pyx_t_3 = 0;
            __Pyx_XGOTREF(__pyx_t_11);
            __pyx_t_14 = __pyx_cur_scope->__pyx_t_4;
            __pyx_cur_scope->__pyx_t_4 = 0;
            __Pyx_XGOTREF(__pyx_t_14);
            __pyx_t_15 = __pyx_cur_scope->__pyx_t_5;
            __pyx_cur_scope->__pyx_t_5 = 0;
            __Pyx_XGOTREF(__pyx_t_15);
            __pyx_t_16 = __pyx_cur_scope->__pyx_t_6;
            __pyx_cur_scope->__pyx_t_6 = 0;
            __Pyx_XGOTREF(__pyx_t_16);
            __pyx_t_17 = __pyx_cur_scope->__pyx_t_7;
            __pyx_cur_scope->__pyx_t_7 = 0;
            __Pyx_XGOTREF(__pyx_t_17);
            __pyx_t_18 = __pyx_cur_scope->__pyx_t_8;
            __pyx_cur_scope->__pyx_t_8 = 0;
            __Pyx_XGOTREF(__pyx_t_18);
            if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1027, __pyx_L1_error)
            __pyx_t_7 = __pyx_sent_value; __Pyx_INCREF(__pyx_t_7);
          } else {
            __pyx_t_7 = NULL;
            if (__Pyx_PyGen_FetchStopIterationValue(&__pyx_t_7) < 0) __PYX_ERR(0, 1027, __pyx_L1_error)
            __Pyx_GOTREF(__pyx_t_7);
          }
          __pyx_t_18 = __pyx_t_7;
          __pyx_t_7 = 0;
          __Pyx_DECREF(__pyx_t_18); __pyx_t_18 = 0;
        }
        __pyx_r = __pyx_t_17;
        __pyx_t_17 = 0;
        if (PY_MAJOR_VERSION >= 3) {
          __Pyx_XGIVEREF(__pyx_t_14);
          __Pyx_XGIVEREF(__pyx_t_15);
          __Pyx_XGIVEREF(__pyx_t_16);
          __Pyx_ExceptionReset(__pyx_t_14, __pyx_t_15, __pyx_t_16);
        }
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_ErrRestore(__pyx_t_11, __pyx_t_10, __pyx_t_9);
        __pyx_t_11 = 0; __pyx_t_10 = 0; __pyx_t_9 = 0; __pyx_t_14 = 0; __pyx_t_15 = 0; __pyx_t_16 = 0;
        goto __pyx_L0;
      }
      __pyx_L10:;
    }
    goto __pyx_L27;
    __pyx_L6_error:;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    goto __pyx_L1_error;
    __pyx_L27:;
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1008
 *         return self._shared_client
 * 
 *     async def _api_request(self,             # <<<<<<<<<<<<<<
 *                            http_method: str,
 *                            path_url: str = None,
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("_api_request", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_64generator16(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1039
 *             return data
 * 
 *     async def check_network(self) -> NetworkStatus:             # <<<<<<<<<<<<<<
 *         try:
 *             await self._api_request("GET", path_url="/ping")
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_63check_network(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_63check_network = {"check_network", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_63check_network, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_63check_network(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_network (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("check_network", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "check_network", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_62check_network(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_62check_network(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("check_network", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1039, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_64generator16, __pyx_codeobj__39, (PyObject *) __pyx_cur_scope, __pyx_n_s_check_network, __pyx_n_s_BittrexExchange_check_network, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 1039, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.check_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_64generator16(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("check_network", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L10_resume_from_await;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1039, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1040
 * 
 *     async def check_network(self) -> NetworkStatus:
 *         try:             # <<<<<<<<<<<<<<
 *             await self._api_request("GET", path_url="/ping")
 *         except asyncio.CancelledError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1041
 *     async def check_network(self) -> NetworkStatus:
 *         try:
 *             await self._api_request("GET", path_url="/ping")             # <<<<<<<<<<<<<<
 *         except asyncio.CancelledError:
 *             raise
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_api_request); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1041, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1041, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_path_url, __pyx_kp_u_ping) < 0) __PYX_ERR(0, 1041, __pyx_L4_error)
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1041, __pyx_L4_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __Pyx_Coroutine_Yield_From(__pyx_generator, __pyx_t_6);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XGOTREF(__pyx_r);
      if (likely(__pyx_r)) {
        __Pyx_XGIVEREF(__pyx_t_1);
        __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
        __Pyx_XGIVEREF(__pyx_t_2);
        __pyx_cur_scope->__pyx_t_1 = __pyx_t_2;
        __Pyx_XGIVEREF(__pyx_t_3);
        __pyx_cur_scope->__pyx_t_2 = __pyx_t_3;
        __Pyx_XGIVEREF(__pyx_r);
        __Pyx_RefNannyFinishContext();
        __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
        /* return from generator, awaiting value */
        __pyx_generator->resume_label = 1;
        return __pyx_r;
        __pyx_L10_resume_from_await:;
        __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
        __pyx_cur_scope->__pyx_t_0 = 0;
        __Pyx_XGOTREF(__pyx_t_1);
        __pyx_t_2 = __pyx_cur_scope->__pyx_t_1;
        __pyx_cur_scope->__pyx_t_1 = 0;
        __Pyx_XGOTREF(__pyx_t_2);
        __pyx_t_3 = __pyx_cur_scope->__pyx_t_2;
        __pyx_cur_scope->__pyx_t_2 = 0;
        __Pyx_XGOTREF(__pyx_t_3);
        if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1041, __pyx_L4_error)
      } else {
        PyObject* exc_type = __Pyx_PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || (exc_type != PyExc_GeneratorExit && __Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)))) PyErr_Clear();
          else __PYX_ERR(0, 1041, __pyx_L4_error)
        }
      }

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1040
 * 
 *     async def check_network(self) -> NetworkStatus:
 *         try:             # <<<<<<<<<<<<<<
 *             await self._api_request("GET", path_url="/ping")
 *         except asyncio.CancelledError:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L9_try_end;
    __pyx_L4_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1042
 *         try:
 *             await self._api_request("GET", path_url="/ping")
 *         except asyncio.CancelledError:             # <<<<<<<<<<<<<<
 *             raise
 *         except Exception:
 */
    __Pyx_ErrFetch(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_n_s_asyncio); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1042, __pyx_L6_except_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_CancelledError); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1042, __pyx_L6_except_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_9 = __Pyx_PyErr_GivenExceptionMatches(__pyx_t_6, __pyx_t_8);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_ErrRestore(__pyx_t_6, __pyx_t_5, __pyx_t_4);
    __pyx_t_6 = 0; __pyx_t_5 = 0; __pyx_t_4 = 0;
    if (__pyx_t_9) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.check_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_6) < 0) __PYX_ERR(0, 1042, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1043
 *             await self._api_request("GET", path_url="/ping")
 *         except asyncio.CancelledError:
 *             raise             # <<<<<<<<<<<<<<
 *         except Exception:
 *             return NetworkStatus.NOT_CONNECTED
 */
      __Pyx_GIVEREF(__pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_5);
      __Pyx_XGIVEREF(__pyx_t_6);
      __Pyx_ErrRestoreWithState(__pyx_t_4, __pyx_t_5, __pyx_t_6);
      __pyx_t_4 = 0; __pyx_t_5 = 0; __pyx_t_6 = 0; 
      __PYX_ERR(0, 1043, __pyx_L6_except_error)
    }

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1044
 *         except asyncio.CancelledError:
 *             raise
 *         except Exception:             # <<<<<<<<<<<<<<
 *             return NetworkStatus.NOT_CONNECTED
 *         return NetworkStatus.CONNECTED
 */
    __pyx_t_9 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_9) {
      __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.check_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_5, &__pyx_t_4) < 0) __PYX_ERR(0, 1044, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);

      /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1045
 *             raise
 *         except Exception:
 *             return NetworkStatus.NOT_CONNECTED             # <<<<<<<<<<<<<<
 *         return NetworkStatus.CONNECTED
 * 
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1045, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_NOT_CONNECTED); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1045, __pyx_L6_except_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      goto __pyx_L7_except_return;
    }
    goto __pyx_L6_except_error;
    __pyx_L6_except_error:;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1040
 * 
 *     async def check_network(self) -> NetworkStatus:
 *         try:             # <<<<<<<<<<<<<<
 *             await self._api_request("GET", path_url="/ping")
 *         except asyncio.CancelledError:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L9_try_end:;
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1046
 *         except Exception:
 *             return NetworkStatus.NOT_CONNECTED
 *         return NetworkStatus.CONNECTED             # <<<<<<<<<<<<<<
 * 
 *     def _stop_network(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_CONNECTED); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = NULL; __Pyx_ReturnWithStopIteration(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  goto __pyx_L0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1039
 *             return data
 * 
 *     async def check_network(self) -> NetworkStatus:             # <<<<<<<<<<<<<<
 *         try:
 *             await self._api_request("GET", path_url="/ping")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("check_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1048
 *         return NetworkStatus.CONNECTED
 * 
 *     def _stop_network(self):             # <<<<<<<<<<<<<<
 *         self._order_book_tracker.stop()
 *         if self._status_polling_task is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_66_stop_network(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_66_stop_network = {"_stop_network", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_66_stop_network, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_66_stop_network(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_stop_network (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("_stop_network", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_stop_network", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_65_stop_network(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_65_stop_network(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_stop_network", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1049
 * 
 *     def _stop_network(self):
 *         self._order_book_tracker.stop()             # <<<<<<<<<<<<<<
 *         if self._status_polling_task is not None:
 *             self._status_polling_task.cancel()
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_stop); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1049, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1050
 *     def _stop_network(self):
 *         self._order_book_tracker.stop()
 *         if self._status_polling_task is not None:             # <<<<<<<<<<<<<<
 *             self._status_polling_task.cancel()
 *         if self._user_stream_tracker_task is not None:
 */
  __pyx_t_5 = (__pyx_v_self->_status_polling_task != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1051
 *         self._order_book_tracker.stop()
 *         if self._status_polling_task is not None:
 *             self._status_polling_task.cancel()             # <<<<<<<<<<<<<<
 *         if self._user_stream_tracker_task is not None:
 *             self._user_stream_tracker_task.cancel()
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_status_polling_task, __pyx_n_s_cancel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1051, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_3, };
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1051, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1050
 *     def _stop_network(self):
 *         self._order_book_tracker.stop()
 *         if self._status_polling_task is not None:             # <<<<<<<<<<<<<<
 *             self._status_polling_task.cancel()
 *         if self._user_stream_tracker_task is not None:
 */
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1052
 *         if self._status_polling_task is not None:
 *             self._status_polling_task.cancel()
 *         if self._user_stream_tracker_task is not None:             # <<<<<<<<<<<<<<
 *             self._user_stream_tracker_task.cancel()
 *         if self._user_stream_event_listener_task is not None:
 */
  __pyx_t_6 = (__pyx_v_self->_user_stream_tracker_task != Py_None);
  __pyx_t_5 = (__pyx_t_6 != 0);
  if (__pyx_t_5) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1053
 *             self._status_polling_task.cancel()
 *         if self._user_stream_tracker_task is not None:
 *             self._user_stream_tracker_task.cancel()             # <<<<<<<<<<<<<<
 *         if self._user_stream_event_listener_task is not None:
 *             self._user_stream_event_listener_task.cancel()
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_user_stream_tracker_task, __pyx_n_s_cancel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1053, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_3, };
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1053, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1052
 *         if self._status_polling_task is not None:
 *             self._status_polling_task.cancel()
 *         if self._user_stream_tracker_task is not None:             # <<<<<<<<<<<<<<
 *             self._user_stream_tracker_task.cancel()
 *         if self._user_stream_event_listener_task is not None:
 */
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1054
 *         if self._user_stream_tracker_task is not None:
 *             self._user_stream_tracker_task.cancel()
 *         if self._user_stream_event_listener_task is not None:             # <<<<<<<<<<<<<<
 *             self._user_stream_event_listener_task.cancel()
 *         self._status_polling_task = self._user_stream_tracker_task = \
 */
  __pyx_t_5 = (__pyx_v_self->_user_stream_event_listener_task != Py_None);
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1055
 *             self._user_stream_tracker_task.cancel()
 *         if self._user_stream_event_listener_task is not None:
 *             self._user_stream_event_listener_task.cancel()             # <<<<<<<<<<<<<<
 *         self._status_polling_task = self._user_stream_tracker_task = \
 *             self._user_stream_event_listener_task = None
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self->_user_stream_event_listener_task, __pyx_n_s_cancel); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1055, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_3, };
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1055, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1054
 *         if self._user_stream_tracker_task is not None:
 *             self._user_stream_tracker_task.cancel()
 *         if self._user_stream_event_listener_task is not None:             # <<<<<<<<<<<<<<
 *             self._user_stream_event_listener_task.cancel()
 *         self._status_polling_task = self._user_stream_tracker_task = \
 */
  }

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1056
 *         if self._user_stream_event_listener_task is not None:
 *             self._user_stream_event_listener_task.cancel()
 *         self._status_polling_task = self._user_stream_tracker_task = \             # <<<<<<<<<<<<<<
 *             self._user_stream_event_listener_task = None
 * 
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_status_polling_task);
  __Pyx_DECREF(__pyx_v_self->_status_polling_task);
  __pyx_v_self->_status_polling_task = Py_None;
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_user_stream_tracker_task);
  __Pyx_DECREF(__pyx_v_self->_user_stream_tracker_task);
  __pyx_v_self->_user_stream_tracker_task = Py_None;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1057
 *             self._user_stream_event_listener_task.cancel()
 *         self._status_polling_task = self._user_stream_tracker_task = \
 *             self._user_stream_event_listener_task = None             # <<<<<<<<<<<<<<
 * 
 *     async def stop_network(self):
 */
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_user_stream_event_listener_task);
  __Pyx_DECREF(__pyx_v_self->_user_stream_event_listener_task);
  __pyx_v_self->_user_stream_event_listener_task = Py_None;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1048
 *         return NetworkStatus.CONNECTED
 * 
 *     def _stop_network(self):             # <<<<<<<<<<<<<<
 *         self._order_book_tracker.stop()
 *         if self._status_polling_task is not None:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange._stop_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_69generator17(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1059
 *             self._user_stream_event_listener_task = None
 * 
 *     async def stop_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_68stop_network(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_68stop_network = {"stop_network", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_68stop_network, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_68stop_network(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop_network (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("stop_network", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "stop_network", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_67stop_network(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_67stop_network(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stop_network", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1059, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_69generator17, __pyx_codeobj__40, (PyObject *) __pyx_cur_scope, __pyx_n_s_stop_network, __pyx_n_s_BittrexExchange_stop_network, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 1059, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.stop_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_69generator17(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stop_network", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1059, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1060
 * 
 *     async def stop_network(self):
 *         self._stop_network()             # <<<<<<<<<<<<<<
 * 
 *     async def start_network(self):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_stop_network_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1060, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1060, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1059
 *             self._user_stream_event_listener_task = None
 * 
 *     async def stop_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 * 
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("stop_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_72generator18(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value); /* proto */

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1062
 *         self._stop_network()
 * 
 *     async def start_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 *         self._order_book_tracker.start()
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_71start_network(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_71start_network = {"start_network", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_71start_network, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_71start_network(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start_network (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("start_network", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "start_network", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_70start_network(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_70start_network(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("start_network", 0);
  __pyx_cur_scope = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network *)Py_None);
    __Pyx_INCREF(Py_None);
    __PYX_ERR(0, 1062, __pyx_L1_error)
  } else {
    __Pyx_GOTREF((PyObject *)__pyx_cur_scope);
  }
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_self);
  {
    __pyx_CoroutineObject *gen = __Pyx_Coroutine_New((__pyx_coroutine_body_t) __pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_72generator18, __pyx_codeobj__41, (PyObject *) __pyx_cur_scope, __pyx_n_s_start_network, __pyx_n_s_BittrexExchange_start_network, __pyx_n_s_hummingbot_connector_exchange_bi); if (unlikely(!gen)) __PYX_ERR(0, 1062, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.start_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF((PyObject *)__pyx_cur_scope);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_72generator18(__pyx_CoroutineObject *__pyx_generator, CYTHON_UNUSED PyThreadState *__pyx_tstate, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network *__pyx_cur_scope = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("start_network", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(0, 1062, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1063
 * 
 *     async def start_network(self):
 *         self._stop_network()             # <<<<<<<<<<<<<<
 *         self._order_book_tracker.start()
 *         self._trading_rules_polling_task = safe_ensure_future(self._trading_rules_polling_loop())
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_stop_network_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1063, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1063, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1064
 *     async def start_network(self):
 *         self._stop_network()
 *         self._order_book_tracker.start()             # <<<<<<<<<<<<<<
 *         self._trading_rules_polling_task = safe_ensure_future(self._trading_rules_polling_loop())
 *         if self._trading_required:
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->__pyx_base._order_book_tracker, __pyx_n_s_start); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_3, };
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1064, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1065
 *         self._stop_network()
 *         self._order_book_tracker.start()
 *         self._trading_rules_polling_task = safe_ensure_future(self._trading_rules_polling_loop())             # <<<<<<<<<<<<<<
 *         if self._trading_required:
 *             self._status_polling_task = safe_ensure_future(self._status_polling_loop())
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_trading_rules_polling_loop); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1065, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_6)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[1] = {__pyx_t_6, };
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_3};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1065, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_trading_rules_polling_task);
  __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_trading_rules_polling_task);
  __pyx_cur_scope->__pyx_v_self->_trading_rules_polling_task = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1066
 *         self._order_book_tracker.start()
 *         self._trading_rules_polling_task = safe_ensure_future(self._trading_rules_polling_loop())
 *         if self._trading_required:             # <<<<<<<<<<<<<<
 *             self._status_polling_task = safe_ensure_future(self._status_polling_loop())
 *             self._user_stream_tracker_task = safe_ensure_future(self._user_stream_tracker.start())
 */
  __pyx_t_7 = (__pyx_cur_scope->__pyx_v_self->__pyx_base.__pyx_base._trading_required != 0);
  if (__pyx_t_7) {

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1067
 *         self._trading_rules_polling_task = safe_ensure_future(self._trading_rules_polling_loop())
 *         if self._trading_required:
 *             self._status_polling_task = safe_ensure_future(self._status_polling_loop())             # <<<<<<<<<<<<<<
 *             self._user_stream_tracker_task = safe_ensure_future(self._user_stream_tracker.start())
 *             self._user_stream_event_listener_task = safe_ensure_future(self._user_stream_event_listener())
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_status_polling_loop); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1067, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_6, };
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1067, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1067, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_status_polling_task);
    __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_status_polling_task);
    __pyx_cur_scope->__pyx_v_self->_status_polling_task = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1068
 *         if self._trading_required:
 *             self._status_polling_task = safe_ensure_future(self._status_polling_loop())
 *             self._user_stream_tracker_task = safe_ensure_future(self._user_stream_tracker.start())             # <<<<<<<<<<<<<<
 *             self._user_stream_event_listener_task = safe_ensure_future(self._user_stream_event_listener())
 * 
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self->_user_stream_tracker, __pyx_n_s_start); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1068, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_6, };
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1068, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1068, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_user_stream_tracker_task);
    __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_user_stream_tracker_task);
    __pyx_cur_scope->__pyx_v_self->_user_stream_tracker_task = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1069
 *             self._status_polling_task = safe_ensure_future(self._status_polling_loop())
 *             self._user_stream_tracker_task = safe_ensure_future(self._user_stream_tracker.start())
 *             self._user_stream_event_listener_task = safe_ensure_future(self._user_stream_event_listener())             # <<<<<<<<<<<<<<
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:
 */
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1069, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_self), __pyx_n_s_user_stream_event_listener); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1069, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[1] = {__pyx_t_6, };
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+1-__pyx_t_4, 0+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1069, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __pyx_t_5 = NULL;
    __pyx_t_4 = 0;
    if (CYTHON_UNPACK_METHODS && unlikely(PyMethod_Check(__pyx_t_2))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_2, function);
        __pyx_t_4 = 1;
      }
    }
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_t_3};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_2, __pyx_callargs+1-__pyx_t_4, 1+__pyx_t_4);
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1069, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    }
    __Pyx_GIVEREF(__pyx_t_1);
    __Pyx_GOTREF(__pyx_cur_scope->__pyx_v_self->_user_stream_event_listener_task);
    __Pyx_DECREF(__pyx_cur_scope->__pyx_v_self->_user_stream_event_listener_task);
    __pyx_cur_scope->__pyx_v_self->_user_stream_event_listener_task = __pyx_t_1;
    __pyx_t_1 = 0;

    /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1066
 *         self._order_book_tracker.start()
 *         self._trading_rules_polling_task = safe_ensure_future(self._trading_rules_polling_loop())
 *         if self._trading_required:             # <<<<<<<<<<<<<<
 *             self._status_polling_task = safe_ensure_future(self._status_polling_loop())
 *             self._user_stream_tracker_task = safe_ensure_future(self._user_stream_tracker.start())
 */
  }
  CYTHON_MAYBE_UNUSED_VAR(__pyx_cur_scope);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1062
 *         self._stop_network()
 * 
 *     async def start_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 *         self._order_book_tracker.start()
 */

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_Generator_Replace_StopIteration(0);
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("start_network", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  #if !CYTHON_USE_EXC_INFO_STACK
  __Pyx_Coroutine_ResetAndClearException(__pyx_generator);
  #endif
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1071
 *             self._user_stream_event_listener_task = safe_ensure_future(self._user_stream_event_listener())
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_74get_price(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_74get_price = {"get_price", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_74get_price, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_74get_price(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_is_buy = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_price (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_is_buy,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_is_buy,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1071, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_is_buy)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1071, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_price", 1, 2, 2, 1); __PYX_ERR(0, 1071, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_price") < 0)) __PYX_ERR(0, 1071, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_is_buy = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_price", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1071, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.get_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 1071, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_73get_price(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_is_buy);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_73get_price(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_is_buy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_price", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1072
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:
 *         return self.c_get_price(trading_pair, is_buy)             # <<<<<<<<<<<<<<
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_is_buy); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1072, __pyx_L1_error)
  __pyx_t_2 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_get_price(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1072, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1071
 *             self._user_stream_event_listener_task = safe_ensure_future(self._user_stream_event_listener())
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.get_price", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1074
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_76buy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_76buy = {"buy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_76buy, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_76buy(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("buy (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    #endif
    PyObject* values[4] = {0,0,0,0};
    values[2] = __pyx_k__42;
    values[3] = __pyx_k__43;
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1074, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_amount)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1074, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("buy", 0, 2, 4, 1); __PYX_ERR(0, 1074, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_type);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1074, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_price);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1074, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, kwd_pos_args, "buy") < 0)) __PYX_ERR(0, 1074, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_amount = values[1];
    __pyx_v_order_type = values[2];
    __pyx_v_price = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("buy", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 1074, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 1074, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_75buy(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_75buy(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("buy", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1076
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 3;
  __pyx_t_2.order_type = __pyx_v_order_type;
  __pyx_t_2.price = __pyx_v_price;
  __pyx_t_2.kwargs = __pyx_v_kwargs;
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_buy(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_amount, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1074
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.buy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1078
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_78sell(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_78sell = {"sell", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_78sell, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_78sell(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_price = 0;
  PyObject *__pyx_v_kwargs = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sell (wrapper)", 0);
  __pyx_v_kwargs = PyDict_New(); if (unlikely(!__pyx_v_kwargs)) return NULL;
  __Pyx_GOTREF(__pyx_v_kwargs);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_amount,&__pyx_n_s_order_type,&__pyx_n_s_price,0};
    #endif
    PyObject* values[4] = {0,0,0,0};
    values[2] = __pyx_k__44;
    values[3] = __pyx_k__45;
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_amount)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("sell", 0, 2, 4, 1); __PYX_ERR(0, 1078, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_type);
          if (value) { values[2] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_price);
          if (value) { values[3] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1078, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, __pyx_v_kwargs, values + 0, kwd_pos_args, "sell") < 0)) __PYX_ERR(0, 1078, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_amount = values[1];
    __pyx_v_order_type = values[2];
    __pyx_v_price = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sell", 0, 2, 4, __pyx_nargs); __PYX_ERR(0, 1078, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_DECREF(__pyx_v_kwargs); __pyx_v_kwargs = 0;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 1078, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_77sell(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_amount, __pyx_v_order_type, __pyx_v_price, __pyx_v_kwargs);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_kwargs);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_77sell(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_amount, PyObject *__pyx_v_order_type, PyObject *__pyx_v_price, PyObject *__pyx_v_kwargs) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sell", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1080
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)             # <<<<<<<<<<<<<<
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 3;
  __pyx_t_2.order_type = __pyx_v_order_type;
  __pyx_t_2.price = __pyx_v_price;
  __pyx_t_2.kwargs = __pyx_v_kwargs;
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_sell(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_amount, &__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1080, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1078
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.sell", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1082
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):             # <<<<<<<<<<<<<<
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_80cancel(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_80cancel = {"cancel", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_80cancel, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_80cancel(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_trading_pair = 0;
  PyObject *__pyx_v_client_order_id = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cancel (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_client_order_id,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,&__pyx_n_s_client_order_id,0};
    #endif
    PyObject* values[2] = {0,0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1082, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_client_order_id)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1082, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("cancel", 1, 2, 2, 1); __PYX_ERR(0, 1082, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "cancel") < 0)) __PYX_ERR(0, 1082, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
      values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
    __pyx_v_client_order_id = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cancel", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1082, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 1082, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_client_order_id), (&PyUnicode_Type), 1, "client_order_id", 1))) __PYX_ERR(0, 1082, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_79cancel(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_client_order_id);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_79cancel(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair, PyObject *__pyx_v_client_order_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cancel", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1083
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):
 *         return self.c_cancel(trading_pair, client_order_id)             # <<<<<<<<<<<<<<
 * 
 *     def get_fee(self,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.__pyx_base.c_cancel(((struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *)__pyx_v_self), __pyx_v_trading_pair, __pyx_v_client_order_id); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1083, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1082
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):             # <<<<<<<<<<<<<<
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.cancel", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1085
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 *     def get_fee(self,             # <<<<<<<<<<<<<<
 *                 base_currency: str,
 *                 quote_currency: str,
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_82get_fee(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_82get_fee = {"get_fee", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_82get_fee, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_82get_fee(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_base_currency = 0;
  PyObject *__pyx_v_quote_currency = 0;
  PyObject *__pyx_v_order_type = 0;
  PyObject *__pyx_v_order_side = 0;
  PyObject *__pyx_v_amount = 0;
  PyObject *__pyx_v_price = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_fee (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_base_currency,&__pyx_n_s_quote_currency,&__pyx_n_s_order_type,&__pyx_n_s_order_side,&__pyx_n_s_amount,&__pyx_n_s_price,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_base_currency,&__pyx_n_s_quote_currency,&__pyx_n_s_order_type,&__pyx_n_s_order_side,&__pyx_n_s_amount,&__pyx_n_s_price,0};
    #endif
    PyObject* values[6] = {0,0,0,0,0,0};
    values[5] = __pyx_k__46;
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        CYTHON_FALLTHROUGH;
        case  4: values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        CYTHON_FALLTHROUGH;
        case  3: values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        CYTHON_FALLTHROUGH;
        case  2: values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        CYTHON_FALLTHROUGH;
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_base_currency)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1085, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
        CYTHON_FALLTHROUGH;
        case  1:
        if (likely((values[1] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_quote_currency)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1085, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, 1); __PYX_ERR(0, 1085, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  2:
        if (likely((values[2] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_type)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1085, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, 2); __PYX_ERR(0, 1085, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  3:
        if (likely((values[3] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_order_side)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1085, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, 3); __PYX_ERR(0, 1085, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  4:
        if (likely((values[4] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_amount)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1085, __pyx_L3_error)
        else {
          __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, 4); __PYX_ERR(0, 1085, __pyx_L3_error)
        }
        CYTHON_FALLTHROUGH;
        case  5:
        if (kw_args > 0) {
          PyObject* value = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_price);
          if (value) { values[5] = value; kw_args--; }
          else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1085, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_fee") < 0)) __PYX_ERR(0, 1085, __pyx_L3_error)
      }
    } else {
      switch (__pyx_nargs) {
        case  6: values[5] = __Pyx_Arg_FASTCALL(__pyx_args, 5);
        CYTHON_FALLTHROUGH;
        case  5: values[4] = __Pyx_Arg_FASTCALL(__pyx_args, 4);
        values[3] = __Pyx_Arg_FASTCALL(__pyx_args, 3);
        values[2] = __Pyx_Arg_FASTCALL(__pyx_args, 2);
        values[1] = __Pyx_Arg_FASTCALL(__pyx_args, 1);
        values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_base_currency = ((PyObject*)values[0]);
    __pyx_v_quote_currency = ((PyObject*)values[1]);
    __pyx_v_order_type = values[2];
    __pyx_v_order_side = values[3];
    __pyx_v_amount = values[4];
    __pyx_v_price = values[5];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_fee", 0, 5, 6, __pyx_nargs); __PYX_ERR(0, 1085, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.get_fee", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_base_currency), (&PyUnicode_Type), 1, "base_currency", 1))) __PYX_ERR(0, 1086, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_quote_currency), (&PyUnicode_Type), 1, "quote_currency", 1))) __PYX_ERR(0, 1087, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_81get_fee(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), __pyx_v_base_currency, __pyx_v_quote_currency, __pyx_v_order_type, __pyx_v_order_side, __pyx_v_amount, __pyx_v_price);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_81get_fee(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_base_currency, PyObject *__pyx_v_quote_currency, PyObject *__pyx_v_order_type, PyObject *__pyx_v_order_side, PyObject *__pyx_v_amount, PyObject *__pyx_v_price) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_fee", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1092
 *                 amount: Decimal,
 *                 price: Decimal = s_decimal_NaN) -> TradeFee:
 *         return self.c_get_fee(base_currency, quote_currency, order_type, order_side, amount, price)             # <<<<<<<<<<<<<<
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_fee(((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_self), __pyx_v_base_currency, __pyx_v_quote_currency, __pyx_v_order_type, __pyx_v_order_side, __pyx_v_amount, __pyx_v_price); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1092, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1085
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 *     def get_fee(self,             # <<<<<<<<<<<<<<
 *                 base_currency: str,
 *                 quote_currency: str,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.get_fee", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1094
 *         return self.c_get_fee(base_currency, quote_currency, order_type, order_side, amount, price)
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:             # <<<<<<<<<<<<<<
 *         return self.c_get_order_book(trading_pair)
 */

/* Python wrapper */
static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_84get_order_book(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_84get_order_book = {"get_order_book", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_84get_order_book, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_84get_order_book(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_trading_pair = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_order_book (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_trading_pair,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_trading_pair)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1094, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "get_order_book") < 0)) __PYX_ERR(0, 1094, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v_trading_pair = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_order_book", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1094, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.get_order_book", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_trading_pair), (&PyUnicode_Type), 1, "trading_pair", 1))) __PYX_ERR(0, 1094, __pyx_L1_error)
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_83get_order_book(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), __pyx_v_trading_pair);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_83get_order_book(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_trading_pair) {
  struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_order_book", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1095
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:
 *         return self.c_get_order_book(trading_pair)             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab)->__pyx_base.c_get_order_book(((struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *)__pyx_v_self), __pyx_v_trading_pair)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = ((struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1094
 *         return self.c_get_fee(base_currency, quote_currency, order_type, order_side, amount, price)
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:             # <<<<<<<<<<<<<<
 *         return self.c_get_order_book(trading_pair)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.get_order_book", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pxd":21
 *         double _poll_interval
 *         dict _trading_rules
 *         public object _coro_scheduler_task             # <<<<<<<<<<<<<<
 *         public object _shared_client
 *         public object _status_polling_task
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_coro_scheduler_task_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_coro_scheduler_task_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_coro_scheduler_task___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_coro_scheduler_task___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_coro_scheduler_task);
  __pyx_r = __pyx_v_self->_coro_scheduler_task;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_coro_scheduler_task_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_coro_scheduler_task_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_coro_scheduler_task_2__set__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_coro_scheduler_task_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_coro_scheduler_task);
  __Pyx_DECREF(__pyx_v_self->_coro_scheduler_task);
  __pyx_v_self->_coro_scheduler_task = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_coro_scheduler_task_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_coro_scheduler_task_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_coro_scheduler_task_4__del__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_coro_scheduler_task_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_coro_scheduler_task);
  __Pyx_DECREF(__pyx_v_self->_coro_scheduler_task);
  __pyx_v_self->_coro_scheduler_task = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pxd":22
 *         dict _trading_rules
 *         public object _coro_scheduler_task
 *         public object _shared_client             # <<<<<<<<<<<<<<
 *         public object _status_polling_task
 *         public object _trading_rules_polling_task
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_shared_client_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_shared_client_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_shared_client___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_shared_client___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_shared_client);
  __pyx_r = __pyx_v_self->_shared_client;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_shared_client_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_shared_client_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_shared_client_2__set__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_shared_client_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_shared_client);
  __Pyx_DECREF(__pyx_v_self->_shared_client);
  __pyx_v_self->_shared_client = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_shared_client_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_shared_client_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_shared_client_4__del__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_shared_client_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_shared_client);
  __Pyx_DECREF(__pyx_v_self->_shared_client);
  __pyx_v_self->_shared_client = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pxd":23
 *         public object _coro_scheduler_task
 *         public object _shared_client
 *         public object _status_polling_task             # <<<<<<<<<<<<<<
 *         public object _trading_rules_polling_task
 *         public object _user_stream_event_listener_task
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_status_polling_task_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_status_polling_task_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_status_polling_task___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_status_polling_task___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_status_polling_task);
  __pyx_r = __pyx_v_self->_status_polling_task;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_status_polling_task_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_status_polling_task_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_status_polling_task_2__set__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_status_polling_task_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_status_polling_task);
  __Pyx_DECREF(__pyx_v_self->_status_polling_task);
  __pyx_v_self->_status_polling_task = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_status_polling_task_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_status_polling_task_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_status_polling_task_4__del__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_status_polling_task_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_status_polling_task);
  __Pyx_DECREF(__pyx_v_self->_status_polling_task);
  __pyx_v_self->_status_polling_task = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pxd":24
 *         public object _shared_client
 *         public object _status_polling_task
 *         public object _trading_rules_polling_task             # <<<<<<<<<<<<<<
 *         public object _user_stream_event_listener_task
 *         public object _user_stream_tracker_task
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27_trading_rules_polling_task_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27_trading_rules_polling_task_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27_trading_rules_polling_task___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27_trading_rules_polling_task___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_trading_rules_polling_task);
  __pyx_r = __pyx_v_self->_trading_rules_polling_task;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27_trading_rules_polling_task_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27_trading_rules_polling_task_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27_trading_rules_polling_task_2__set__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27_trading_rules_polling_task_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_trading_rules_polling_task);
  __Pyx_DECREF(__pyx_v_self->_trading_rules_polling_task);
  __pyx_v_self->_trading_rules_polling_task = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27_trading_rules_polling_task_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27_trading_rules_polling_task_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27_trading_rules_polling_task_4__del__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27_trading_rules_polling_task_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_trading_rules_polling_task);
  __Pyx_DECREF(__pyx_v_self->_trading_rules_polling_task);
  __pyx_v_self->_trading_rules_polling_task = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pxd":25
 *         public object _status_polling_task
 *         public object _trading_rules_polling_task
 *         public object _user_stream_event_listener_task             # <<<<<<<<<<<<<<
 *         public object _user_stream_tracker_task
 *         TransactionTracker _tx_tracker
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_user_stream_event_listener_task_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_user_stream_event_listener_task_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_user_stream_event_listener_task___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_user_stream_event_listener_task___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_user_stream_event_listener_task);
  __pyx_r = __pyx_v_self->_user_stream_event_listener_task;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_user_stream_event_listener_task_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_user_stream_event_listener_task_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_user_stream_event_listener_task_2__set__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_user_stream_event_listener_task_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_user_stream_event_listener_task);
  __Pyx_DECREF(__pyx_v_self->_user_stream_event_listener_task);
  __pyx_v_self->_user_stream_event_listener_task = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_user_stream_event_listener_task_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_user_stream_event_listener_task_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_user_stream_event_listener_task_4__del__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_user_stream_event_listener_task_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_user_stream_event_listener_task);
  __Pyx_DECREF(__pyx_v_self->_user_stream_event_listener_task);
  __pyx_v_self->_user_stream_event_listener_task = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pxd":26
 *         public object _trading_rules_polling_task
 *         public object _user_stream_event_listener_task
 *         public object _user_stream_tracker_task             # <<<<<<<<<<<<<<
 *         TransactionTracker _tx_tracker
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_user_stream_tracker_task_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_user_stream_tracker_task_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_user_stream_tracker_task___get__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_user_stream_tracker_task___get__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self->_user_stream_tracker_task);
  __pyx_r = __pyx_v_self->_user_stream_tracker_task;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_user_stream_tracker_task_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_user_stream_tracker_task_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_user_stream_tracker_task_2__set__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_user_stream_tracker_task_2__set__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(__pyx_v_self->_user_stream_tracker_task);
  __Pyx_DECREF(__pyx_v_self->_user_stream_tracker_task);
  __pyx_v_self->_user_stream_tracker_task = __pyx_v_value;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_user_stream_tracker_task_5__del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_user_stream_tracker_task_5__del__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_user_stream_tracker_task_4__del__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_user_stream_tracker_task_4__del__(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(__pyx_v_self->_user_stream_tracker_task);
  __Pyx_DECREF(__pyx_v_self->_user_stream_tracker_task);
  __pyx_v_self->_user_stream_tracker_task = Py_None;

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_86__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_86__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_86__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_86__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  if (unlikely(__pyx_nargs > 0)) {
    __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL;}
  if (unlikely(__pyx_kwds) && __Pyx_NumKwargs_FASTCALL(__pyx_kwds) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__reduce_cython__", 0))) return NULL;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_85__reduce_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_85__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__events_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */

/* Python wrapper */
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_88__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_88__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_88__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_88__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED const Py_ssize_t __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  {
    #if CYTHON_COMPILING_IN_LIMITED_API
    PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #else
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pyx_state,0};
    #endif
    PyObject* values[1] = {0};
    if (__pyx_kwds) {
      Py_ssize_t kw_args;
      switch (__pyx_nargs) {
        case  1: values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = __Pyx_NumKwargs_FASTCALL(__pyx_kwds);
      switch (__pyx_nargs) {
        case  0:
        if (likely((values[0] = __Pyx_GetKwValue_FASTCALL(__pyx_kwds, __pyx_kwvalues, __pyx_n_s_pyx_state)) != 0)) kw_args--;
        else if (unlikely(PyErr_Occurred())) __PYX_ERR(1, 3, __pyx_L3_error)
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        const Py_ssize_t kwd_pos_args = __pyx_nargs;
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values + 0, kwd_pos_args, "__setstate_cython__") < 0)) __PYX_ERR(1, 3, __pyx_L3_error)
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_Arg_FASTCALL(__pyx_args, 0);
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_87__setstate_cython__(((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_87__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"             # <<<<<<<<<<<<<<
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_self__events_cannot_be_converted, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":246
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_7ndarray_4base_base(PyArrayObject *__pyx_v_self) {
  PyObject *__pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":249
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 *             return PyArray_BASE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_BASE(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":246
 * 
 *         @property
 *         cdef inline PyObject* base(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a borrowed reference to the object owning the data/memory.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":252
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

static CYTHON_INLINE PyArray_Descr *__pyx_f_5numpy_7ndarray_5descr_descr(PyArrayObject *__pyx_v_self) {
  PyArray_Descr *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyArray_Descr *__pyx_t_1;
  __Pyx_RefNannySetupContext("descr", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":255
 *             """Returns an owned reference to the dtype of the array.
 *             """
 *             return <dtype>PyArray_DESCR(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __pyx_t_1 = PyArray_DESCR(__pyx_v_self);
  __Pyx_INCREF((PyObject *)((PyArray_Descr *)__pyx_t_1));
  __pyx_r = ((PyArray_Descr *)__pyx_t_1);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":252
 * 
 *         @property
 *         cdef inline dtype descr(self):             # <<<<<<<<<<<<<<
 *             """Returns an owned reference to the dtype of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":258
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

static CYTHON_INLINE int __pyx_f_5numpy_7ndarray_4ndim_ndim(PyArrayObject *__pyx_v_self) {
  int __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":261
 *             """Returns the number of dimensions in the array.
 *             """
 *             return PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_NDIM(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":258
 * 
 *         @property
 *         cdef inline int ndim(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the number of dimensions in the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":264
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_5shape_shape(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":269
 *             Can return NULL for 0-dimensional arrays.
 *             """
 *             return PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_DIMS(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":264
 * 
 *         @property
 *         cdef inline npy_intp *shape(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the dimensions/shape of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":272
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

static CYTHON_INLINE npy_intp *__pyx_f_5numpy_7ndarray_7strides_strides(PyArrayObject *__pyx_v_self) {
  npy_intp *__pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":276
 *             The number of elements matches the number of dimensions of the array (ndim).
 *             """
 *             return PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_STRIDES(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":272
 * 
 *         @property
 *         cdef inline npy_intp *strides(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns a pointer to the strides of the array.
 *             The number of elements matches the number of dimensions of the array (ndim).
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":279
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

static CYTHON_INLINE npy_intp __pyx_f_5numpy_7ndarray_4size_size(PyArrayObject *__pyx_v_self) {
  npy_intp __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":282
 *             """Returns the total size (in number of elements) of the array.
 *             """
 *             return PyArray_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *         @property
 */
  __pyx_r = PyArray_SIZE(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":279
 * 
 *         @property
 *         cdef inline npy_intp size(self) nogil:             # <<<<<<<<<<<<<<
 *             """Returns the total size (in number of elements) of the array.
 *             """
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":285
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

static CYTHON_INLINE char *__pyx_f_5numpy_7ndarray_4data_data(PyArrayObject *__pyx_v_self) {
  char *__pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":291
 *             of `PyArray_DATA()` instead, which returns a 'void*'.
 *             """
 *             return PyArray_BYTES(self)             # <<<<<<<<<<<<<<
 * 
 *     ctypedef unsigned char      npy_bool
 */
  __pyx_r = PyArray_BYTES(__pyx_v_self);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":285
 * 
 *         @property
 *         cdef inline char* data(self) nogil:             # <<<<<<<<<<<<<<
 *             """The pointer to the data buffer as a char*.
 *             This is provided for legacy reasons to avoid direct struct field access.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":777
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":777
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":780
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 781, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":780
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":783
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":784
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 784, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":783
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":786
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":787
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 787, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":786
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":789
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":790
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 790, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":789
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":792
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyDataType_SHAPE(PyArray_Descr *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("PyDataType_SHAPE", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":793
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  __pyx_t_1 = (PyDataType_HASSUBARRAY(__pyx_v_d) != 0);
  if (__pyx_t_1) {

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":794
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape             # <<<<<<<<<<<<<<
 *     else:
 *         return ()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject*)__pyx_v_d->subarray->shape));
    __pyx_r = ((PyObject*)__pyx_v_d->subarray->shape);
    goto __pyx_L0;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":793
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):
 *     if PyDataType_HASSUBARRAY(d):             # <<<<<<<<<<<<<<
 *         return <tuple>d.subarray.shape
 *     else:
 */
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":796
 *         return <tuple>d.subarray.shape
 *     else:
 *         return ()             # <<<<<<<<<<<<<<
 * 
 * 
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_empty_tuple);
    __pyx_r = __pyx_empty_tuple;
    goto __pyx_L0;
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":792
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline tuple PyDataType_SHAPE(dtype d):             # <<<<<<<<<<<<<<
 *     if PyDataType_HASSUBARRAY(d):
 *         return <tuple>d.subarray.shape
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":973
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":974
 * 
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!             # <<<<<<<<<<<<<<
 *     PyArray_SetBaseObject(arr, base)
 * 
 */
  Py_INCREF(__pyx_v_base);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":975
 * cdef inline void set_array_base(ndarray arr, object base):
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  (void)(PyArray_SetBaseObject(__pyx_v_arr, __pyx_v_base));

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":973
 *     int _import_umath() except -1
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *     Py_INCREF(base) # important to do this before stealing the reference below!
 *     PyArray_SetBaseObject(arr, base)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":977
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_v_base;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":978
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)             # <<<<<<<<<<<<<<
 *     if base is NULL:
 *         return None
 */
  __pyx_v_base = PyArray_BASE(__pyx_v_arr);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":979
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  __pyx_t_1 = ((__pyx_v_base == NULL) != 0);
  if (__pyx_t_1) {

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":980
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     return <object>base
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":979
 * cdef inline object get_array_base(ndarray arr):
 *     base = PyArray_BASE(arr)
 *     if base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     return <object>base
 */
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":981
 *     if base is NULL:
 *         return None
 *     return <object>base             # <<<<<<<<<<<<<<
 * 
 * # Versions of the import_* functions which are more suitable for
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_base));
  __pyx_r = ((PyObject *)__pyx_v_base);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":977
 *     PyArray_SetBaseObject(arr, base)
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     base = PyArray_BASE(arr)
 *     if base is NULL:
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_array(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_array", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":987
 * cdef inline int import_array() except -1:
 *     try:
 *         __pyx_import_array()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")
 */
      __pyx_t_4 = _import_array(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 987, __pyx_L3_error)

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":988
 *     try:
 *         __pyx_import_array()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 988, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":989
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__47, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 989, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 989, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":986
 * # Cython code.
 * cdef inline int import_array() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         __pyx_import_array()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":985
 * # Versions of the import_* functions which are more suitable for
 * # Cython code.
 * cdef inline int import_array() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         __pyx_import_array()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_array", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_umath(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_umath", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":993
 * cdef inline int import_umath() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 993, __pyx_L3_error)

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":994
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 994, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 995, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 995, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":992
 * 
 * cdef inline int import_umath() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":991
 *         raise ImportError("numpy.core.multiarray failed to import")
 * 
 * cdef inline int import_umath() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_umath", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

static CYTHON_INLINE int __pyx_f_5numpy_import_ufunc(void) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("import_ufunc", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":999
 * cdef inline int import_ufunc() except -1:
 *     try:
 *         _import_umath()             # <<<<<<<<<<<<<<
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")
 */
      __pyx_t_4 = _import_umath(); if (unlikely(__pyx_t_4 == ((int)-1))) __PYX_ERR(2, 999, __pyx_L3_error)

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L8_try_end;
    __pyx_L3_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1000
 *     try:
 *         _import_umath()
 *     except Exception:             # <<<<<<<<<<<<<<
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 */
    __pyx_t_4 = __Pyx_PyErr_ExceptionMatches(((PyObject *)(&((PyTypeObject*)PyExc_Exception)[0])));
    if (__pyx_t_4) {
      __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7) < 0) __PYX_ERR(2, 1000, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);

      /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1001
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ImportError, __pyx_tuple__48, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 1001, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(2, 1001, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":998
 * 
 * cdef inline int import_ufunc() except -1:
 *     try:             # <<<<<<<<<<<<<<
 *         _import_umath()
 *     except Exception:
 */
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L8_try_end:;
  }

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":997
 *         raise ImportError("numpy.core.umath failed to import")
 * 
 * cdef inline int import_ufunc() except -1:             # <<<<<<<<<<<<<<
 *     try:
 *         _import_umath()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.import_ufunc", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1004
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_timedelta64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_timedelta64_object", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1016
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyTimedeltaArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyTimedeltaArrType_Type));
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1004
 * 
 * 
 * cdef inline bint is_timedelta64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.timedelta64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1019
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

static CYTHON_INLINE int __pyx_f_5numpy_is_datetime64_object(PyObject *__pyx_v_obj) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_datetime64_object", 0);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1031
 *     bool
 *     """
 *     return PyObject_TypeCheck(obj, &PyDatetimeArrType_Type)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = PyObject_TypeCheck(__pyx_v_obj, (&PyDatetimeArrType_Type));
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1019
 * 
 * 
 * cdef inline bint is_datetime64_object(object obj):             # <<<<<<<<<<<<<<
 *     """
 *     Cython equivalent of `isinstance(obj, np.datetime64)`
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1034
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

static CYTHON_INLINE npy_datetime __pyx_f_5numpy_get_datetime64_value(PyObject *__pyx_v_obj) {
  npy_datetime __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1041
 *     also needed.  That can be found using `get_datetime64_unit`.
 *     """
 *     return (<PyDatetimeScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyDatetimeScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1034
 * 
 * 
 * cdef inline npy_datetime get_datetime64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy datetime64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1044
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

static CYTHON_INLINE npy_timedelta __pyx_f_5numpy_get_timedelta64_value(PyObject *__pyx_v_obj) {
  npy_timedelta __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1048
 *     returns the int64 value underlying scalar numpy timedelta64 object
 *     """
 *     return (<PyTimedeltaScalarObject*>obj).obval             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = ((PyTimedeltaScalarObject *)__pyx_v_obj)->obval;
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1044
 * 
 * 
 * cdef inline npy_timedelta get_timedelta64_value(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the int64 value underlying scalar numpy timedelta64 object
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1051
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

static CYTHON_INLINE NPY_DATETIMEUNIT __pyx_f_5numpy_get_datetime64_unit(PyObject *__pyx_v_obj) {
  NPY_DATETIMEUNIT __pyx_r;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1055
 *     returns the unit part of the dtype for a numpy datetime64 object.
 *     """
 *     return <NPY_DATETIMEUNIT>(<PyDatetimeScalarObject*>obj).obmeta.base             # <<<<<<<<<<<<<<
 */
  __pyx_r = ((NPY_DATETIMEUNIT)((PyDatetimeScalarObject *)__pyx_v_obj)->obmeta.base);
  goto __pyx_L0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1051
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}
static struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange __pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *p;
  #if CYTHON_COMPILING_IN_LIMITED_API
  newfunc new_func = (newfunc)PyType_GetSlot(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase, Py_tp_new);
  PyObject *o = new_func(t, a, k);
  #else
  PyObject *o = __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_new(t, a, k);
  #endif
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub*)__pyx_vtabptr_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange;
  p->_account_id = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_bittrex_auth = Py_None; Py_INCREF(Py_None);
  p->_coro_queue = Py_None; Py_INCREF(Py_None);
  p->_ev_loop = Py_None; Py_INCREF(Py_None);
  p->_in_flight_orders = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_order_not_found_records = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_user_stream_tracker = Py_None; Py_INCREF(Py_None);
  p->_poll_notifier = Py_None; Py_INCREF(Py_None);
  p->_trading_rules = ((PyObject*)Py_None); Py_INCREF(Py_None);
  p->_coro_scheduler_task = Py_None; Py_INCREF(Py_None);
  p->_shared_client = Py_None; Py_INCREF(Py_None);
  p->_status_polling_task = Py_None; Py_INCREF(Py_None);
  p->_trading_rules_polling_task = Py_None; Py_INCREF(Py_None);
  p->_user_stream_event_listener_task = Py_None; Py_INCREF(Py_None);
  p->_user_stream_tracker_task = Py_None; Py_INCREF(Py_None);
  p->_tx_tracker = ((struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *)Py_None); Py_INCREF(Py_None);
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_account_id);
  Py_CLEAR(p->_bittrex_auth);
  Py_CLEAR(p->_coro_queue);
  Py_CLEAR(p->_ev_loop);
  Py_CLEAR(p->_in_flight_orders);
  Py_CLEAR(p->_order_not_found_records);
  Py_CLEAR(p->_user_stream_tracker);
  Py_CLEAR(p->_poll_notifier);
  Py_CLEAR(p->_trading_rules);
  Py_CLEAR(p->_coro_scheduler_task);
  Py_CLEAR(p->_shared_client);
  Py_CLEAR(p->_status_polling_task);
  Py_CLEAR(p->_trading_rules_polling_task);
  Py_CLEAR(p->_user_stream_event_listener_task);
  Py_CLEAR(p->_user_stream_tracker_task);
  Py_CLEAR(p->_tx_tracker);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase)) __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)o;
  e = ((likely(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase)) ? ((__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_traverse) ? __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange)); if (e) return e;
  if (p->_bittrex_auth) {
    e = (*v)(p->_bittrex_auth, a); if (e) return e;
  }
  if (p->_coro_queue) {
    e = (*v)(p->_coro_queue, a); if (e) return e;
  }
  if (p->_ev_loop) {
    e = (*v)(p->_ev_loop, a); if (e) return e;
  }
  if (p->_in_flight_orders) {
    e = (*v)(p->_in_flight_orders, a); if (e) return e;
  }
  if (p->_order_not_found_records) {
    e = (*v)(p->_order_not_found_records, a); if (e) return e;
  }
  if (p->_user_stream_tracker) {
    e = (*v)(p->_user_stream_tracker, a); if (e) return e;
  }
  if (p->_poll_notifier) {
    e = (*v)(p->_poll_notifier, a); if (e) return e;
  }
  if (p->_trading_rules) {
    e = (*v)(p->_trading_rules, a); if (e) return e;
  }
  if (p->_coro_scheduler_task) {
    e = (*v)(p->_coro_scheduler_task, a); if (e) return e;
  }
  if (p->_shared_client) {
    e = (*v)(p->_shared_client, a); if (e) return e;
  }
  if (p->_status_polling_task) {
    e = (*v)(p->_status_polling_task, a); if (e) return e;
  }
  if (p->_trading_rules_polling_task) {
    e = (*v)(p->_trading_rules_polling_task, a); if (e) return e;
  }
  if (p->_user_stream_event_listener_task) {
    e = (*v)(p->_user_stream_event_listener_task, a); if (e) return e;
  }
  if (p->_user_stream_tracker_task) {
    e = (*v)(p->_user_stream_tracker_task, a); if (e) return e;
  }
  if (p->_tx_tracker) {
    e = (*v)(((PyObject *)p->_tx_tracker), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)o;
  if (likely(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase)) { if (__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_clear) __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);
  tmp = ((PyObject*)p->_bittrex_auth);
  p->_bittrex_auth = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_coro_queue);
  p->_coro_queue = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_ev_loop);
  p->_ev_loop = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_in_flight_orders);
  p->_in_flight_orders = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_order_not_found_records);
  p->_order_not_found_records = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_user_stream_tracker);
  p->_user_stream_tracker = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_poll_notifier);
  p->_poll_notifier = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_trading_rules);
  p->_trading_rules = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_coro_scheduler_task);
  p->_coro_scheduler_task = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_shared_client);
  p->_shared_client = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_status_polling_task);
  p->_status_polling_task = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_trading_rules_polling_task);
  p->_trading_rules_polling_task = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_user_stream_event_listener_task);
  p->_user_stream_event_listener_task = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_user_stream_tracker_task);
  p->_user_stream_tracker_task = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->_tx_tracker);
  p->_tx_tracker = ((struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_4name_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_order_books(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_11order_books_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_bittrex_auth(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_12bittrex_auth_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_status_dict(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_11status_dict_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_ready(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_5ready_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_limit_orders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_12limit_orders_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_tracking_states(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_15tracking_states_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_in_flight_orders(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_16in_flight_orders_1__get__(o);
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__coro_scheduler_task(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_coro_scheduler_task_1__get__(o);
}

static int __pyx_setprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__coro_scheduler_task(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_coro_scheduler_task_3__set__(o, v);
  }
  else {
    return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_coro_scheduler_task_5__del__(o);
  }
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__shared_client(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_shared_client_1__get__(o);
}

static int __pyx_setprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__shared_client(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_shared_client_3__set__(o, v);
  }
  else {
    return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_14_shared_client_5__del__(o);
  }
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__status_polling_task(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_status_polling_task_1__get__(o);
}

static int __pyx_setprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__status_polling_task(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_status_polling_task_3__set__(o, v);
  }
  else {
    return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_20_status_polling_task_5__del__(o);
  }
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__trading_rules_polling_task(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27_trading_rules_polling_task_1__get__(o);
}

static int __pyx_setprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__trading_rules_polling_task(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27_trading_rules_polling_task_3__set__(o, v);
  }
  else {
    return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_27_trading_rules_polling_task_5__del__(o);
  }
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__user_stream_event_listener_task(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_user_stream_event_listener_task_1__get__(o);
}

static int __pyx_setprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__user_stream_event_listener_task(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_user_stream_event_listener_task_3__set__(o, v);
  }
  else {
    return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_user_stream_event_listener_task_5__del__(o);
  }
}

static PyObject *__pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__user_stream_tracker_task(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_user_stream_tracker_task_1__get__(o);
}

static int __pyx_setprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__user_stream_tracker_task(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_user_stream_tracker_task_3__set__(o, v);
  }
  else {
    return __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_25_user_stream_tracker_task_5__del__(o);
  }
}

static PyMethodDef __pyx_methods_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange[] = {
  {"logger", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_1logger, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"restore_tracking_states", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_5restore_tracking_states, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_active_exchange_markets", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_7get_active_exchange_markets, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_update_balances", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_10_update_balances, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_format_trading_rules", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_13_format_trading_rules, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_update_trading_rules", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_15_update_trading_rules, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"list_orders", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_18list_orders, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_17list_orders},
  {"_update_order_status", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_21_update_order_status, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_process_api_closed", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_24_process_api_closed, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_iter_user_stream_queue", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_26_iter_user_stream_queue, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_user_stream_event_listener", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_29_user_stream_event_listener, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_status_polling_loop", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_status_polling_loop, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_trading_rules_polling_loop", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_35_trading_rules_polling_loop, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"start_tracking_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_38start_tracking_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, __pyx_doc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_37start_tracking_order},
  {"supported_order_types", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_40supported_order_types, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"place_order", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_42place_order, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"execute_buy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_45execute_buy, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"execute_sell", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_48execute_sell, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"execute_cancel", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_51execute_cancel, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"cancel_all", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_54cancel_all, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_http_client", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_57_http_client, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_api_request", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_60_api_request, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"check_network", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_63check_network, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_stop_network", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_66_stop_network, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"stop_network", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_68stop_network, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"start_network", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_71start_network, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_price", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_74get_price, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"buy", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_76buy, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"sell", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_78sell, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"cancel", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_80cancel, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_fee", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_82get_fee, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_order_book", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_84get_order_book, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_86__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_88__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange[] = {
  {(char *)"name", __pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_name, 0, (char *)0, 0},
  {(char *)"order_books", __pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_order_books, 0, (char *)0, 0},
  {(char *)"bittrex_auth", __pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_bittrex_auth, 0, (char *)0, 0},
  {(char *)"status_dict", __pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_status_dict, 0, (char *)0, 0},
  {(char *)"ready", __pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_ready, 0, (char *)0, 0},
  {(char *)"limit_orders", __pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_limit_orders, 0, (char *)0, 0},
  {(char *)"tracking_states", __pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_tracking_states, 0, (char *)0, 0},
  {(char *)"in_flight_orders", __pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_in_flight_orders, 0, (char *)0, 0},
  {(char *)"_coro_scheduler_task", __pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__coro_scheduler_task, __pyx_setprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__coro_scheduler_task, (char *)0, 0},
  {(char *)"_shared_client", __pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__shared_client, __pyx_setprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__shared_client, (char *)0, 0},
  {(char *)"_status_polling_task", __pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__status_polling_task, __pyx_setprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__status_polling_task, (char *)0, 0},
  {(char *)"_trading_rules_polling_task", __pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__trading_rules_polling_task, __pyx_setprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__trading_rules_polling_task, (char *)0, 0},
  {(char *)"_user_stream_event_listener_task", __pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__user_stream_event_listener_task, __pyx_setprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__user_stream_event_listener_task, (char *)0, 0},
  {(char *)"_user_stream_tracker_task", __pyx_getprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__user_stream_tracker_task, __pyx_setprop_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange__user_stream_tracker_task, (char *)0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange},
  {Py_tp_methods, (void *)__pyx_methods_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange},
  {Py_tp_getset, (void *)__pyx_getsets_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange},
  {Py_tp_init, (void *)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_3__init__},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchange",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""BittrexExchange", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker __pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *p;
  #if CYTHON_COMPILING_IN_LIMITED_API
  newfunc new_func = (newfunc)PyType_GetSlot(__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker, Py_tp_new);
  PyObject *o = new_func(t, a, k);
  #else
  PyObject *o = __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->tp_new(t, a, k);
  #endif
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *)o);
  p->__pyx_base.__pyx_base.__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub*)__pyx_vtabptr_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker;
  p->_owner = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)Py_None); Py_INCREF(Py_None);
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *)o;
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->_owner);
  PyObject_GC_Track(o);
  if (likely(__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker)) __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->tp_dealloc(o); else __Pyx_call_next_tp_dealloc(o, __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker);
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *)o;
  e = ((likely(__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker)) ? ((__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->tp_traverse) ? __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker)); if (e) return e;
  if (p->_owner) {
    e = (*v)(((PyObject *)p->_owner), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker *)o;
  if (likely(__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker)) { if (__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->tp_clear) __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker);
  tmp = ((PyObject*)p->_owner);
  p->_owner = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyMethodDef __pyx_methods_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker[] = {
  {"__reduce_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void*)(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker},
  {Py_tp_clear, (void *)__pyx_tp_clear_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker},
  {Py_tp_methods, (void *)__pyx_methods_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker},
  {Py_tp_init, (void *)__pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_1__init__},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.BittrexExchangeTransactionTracker",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""BittrexExchangeTransactionTracker", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker, /*tp_traverse*/
  __pyx_tp_clear_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct__get_active_exchange_markets",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct__get_active_exchange_markets", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_account_balances);
  Py_CLEAR(p->__pyx_v_account_info);
  Py_CLEAR(p->__pyx_v_asset_name);
  Py_CLEAR(p->__pyx_v_asset_names_to_remove);
  Py_CLEAR(p->__pyx_v_available_balance);
  Py_CLEAR(p->__pyx_v_balance_entry);
  Py_CLEAR(p->__pyx_v_balances);
  Py_CLEAR(p->__pyx_v_local_asset_names);
  Py_CLEAR(p->__pyx_v_path_url);
  Py_CLEAR(p->__pyx_v_remote_asset_names);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_total_balance);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances *)o;
  if (p->__pyx_v_account_balances) {
    e = (*v)(p->__pyx_v_account_balances, a); if (e) return e;
  }
  if (p->__pyx_v_account_info) {
    e = (*v)(p->__pyx_v_account_info, a); if (e) return e;
  }
  if (p->__pyx_v_asset_names_to_remove) {
    e = (*v)(p->__pyx_v_asset_names_to_remove, a); if (e) return e;
  }
  if (p->__pyx_v_available_balance) {
    e = (*v)(p->__pyx_v_available_balance, a); if (e) return e;
  }
  if (p->__pyx_v_balance_entry) {
    e = (*v)(p->__pyx_v_balance_entry, a); if (e) return e;
  }
  if (p->__pyx_v_balances) {
    e = (*v)(p->__pyx_v_balances, a); if (e) return e;
  }
  if (p->__pyx_v_local_asset_names) {
    e = (*v)(p->__pyx_v_local_asset_names, a); if (e) return e;
  }
  if (p->__pyx_v_remote_asset_names) {
    e = (*v)(p->__pyx_v_remote_asset_names, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_total_balance) {
    e = (*v)(p->__pyx_v_total_balance, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct_1__update_balances",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct_1__update_balances", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_8genexpr3__pyx_v_item);
  Py_CLEAR(p->__pyx_v_item);
  Py_CLEAR(p->__pyx_8genexpr4__pyx_v_market);
  Py_CLEAR(p->__pyx_8genexpr5__pyx_v_market);
  Py_CLEAR(p->__pyx_v_market_list);
  Py_CLEAR(p->__pyx_v_market_path_url);
  Py_CLEAR(p->__pyx_v_result_list);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_ticker_data);
  Py_CLEAR(p->__pyx_v_ticker_list);
  Py_CLEAR(p->__pyx_v_ticker_path_url);
  Py_CLEAR(p->__pyx_v_trading_rule);
  Py_CLEAR(p->__pyx_v_trading_rules_list);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules *)o;
  if (p->__pyx_8genexpr3__pyx_v_item) {
    e = (*v)(p->__pyx_8genexpr3__pyx_v_item, a); if (e) return e;
  }
  if (p->__pyx_v_item) {
    e = (*v)(p->__pyx_v_item, a); if (e) return e;
  }
  if (p->__pyx_8genexpr4__pyx_v_market) {
    e = (*v)(p->__pyx_8genexpr4__pyx_v_market, a); if (e) return e;
  }
  if (p->__pyx_8genexpr5__pyx_v_market) {
    e = (*v)(p->__pyx_8genexpr5__pyx_v_market, a); if (e) return e;
  }
  if (p->__pyx_v_market_list) {
    e = (*v)(p->__pyx_v_market_list, a); if (e) return e;
  }
  if (p->__pyx_v_result_list) {
    e = (*v)(p->__pyx_v_result_list, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_ticker_data) {
    e = (*v)(p->__pyx_v_ticker_data, a); if (e) return e;
  }
  if (p->__pyx_v_ticker_list) {
    e = (*v)(p->__pyx_v_ticker_list, a); if (e) return e;
  }
  if (p->__pyx_v_trading_rule) {
    e = (*v)(p->__pyx_v_trading_rule, a); if (e) return e;
  }
  if (p->__pyx_v_trading_rules_list) {
    e = (*v)(p->__pyx_v_trading_rules_list, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct_2__update_trading_rules",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct_2__update_trading_rules", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_path_url);
  Py_CLEAR(p->__pyx_v_result);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders *)o;
  if (p->__pyx_v_result) {
    e = (*v)(p->__pyx_v_result, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct_3_list_orders",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct_3_list_orders", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_client_order_id);
  Py_CLEAR(p->__pyx_v_exchange_order_id);
  Py_CLEAR(p->__pyx_v_executed_amount_diff);
  Py_CLEAR(p->__pyx_v_executed_price);
  Py_CLEAR(p->__pyx_v_genexpr);
  Py_CLEAR(p->__pyx_v_new_confirmed_amount);
  Py_CLEAR(p->__pyx_v_open_orders);
  Py_CLEAR(p->__pyx_v_order);
  Py_CLEAR(p->__pyx_v_order_state);
  Py_CLEAR(p->__pyx_v_order_type);
  Py_CLEAR(p->__pyx_v_order_type_description);
  Py_CLEAR(p->__pyx_v_remaining_size);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_tracked_order);
  Py_CLEAR(p->__pyx_v_tracked_orders);
  Py_CLEAR(p->__pyx_v_trade_type);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status *)o;
  if (p->__pyx_v_client_order_id) {
    e = (*v)(p->__pyx_v_client_order_id, a); if (e) return e;
  }
  if (p->__pyx_v_exchange_order_id) {
    e = (*v)(p->__pyx_v_exchange_order_id, a); if (e) return e;
  }
  if (p->__pyx_v_executed_amount_diff) {
    e = (*v)(p->__pyx_v_executed_amount_diff, a); if (e) return e;
  }
  if (p->__pyx_v_executed_price) {
    e = (*v)(p->__pyx_v_executed_price, a); if (e) return e;
  }
  if (p->__pyx_v_genexpr) {
    e = (*v)(p->__pyx_v_genexpr, a); if (e) return e;
  }
  if (p->__pyx_v_new_confirmed_amount) {
    e = (*v)(p->__pyx_v_new_confirmed_amount, a); if (e) return e;
  }
  if (p->__pyx_v_open_orders) {
    e = (*v)(p->__pyx_v_open_orders, a); if (e) return e;
  }
  if (p->__pyx_v_order) {
    e = (*v)(p->__pyx_v_order, a); if (e) return e;
  }
  if (p->__pyx_v_order_state) {
    e = (*v)(p->__pyx_v_order_state, a); if (e) return e;
  }
  if (p->__pyx_v_order_type) {
    e = (*v)(p->__pyx_v_order_type, a); if (e) return e;
  }
  if (p->__pyx_v_order_type_description) {
    e = (*v)(p->__pyx_v_order_type_description, a); if (e) return e;
  }
  if (p->__pyx_v_remaining_size) {
    e = (*v)(p->__pyx_v_remaining_size, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_tracked_order) {
    e = (*v)(p->__pyx_v_tracked_order, a); if (e) return e;
  }
  if (p->__pyx_v_tracked_orders) {
    e = (*v)(p->__pyx_v_tracked_orders, a); if (e) return e;
  }
  if (p->__pyx_v_trade_type) {
    e = (*v)(p->__pyx_v_trade_type, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct_4__update_order_status",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct_4__update_order_status", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_entry);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject *)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_entry) {
    e = (*v)(p->__pyx_v_entry, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct_5_genexpr",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct_5_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct_6__iter_user_stream_queue",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct_6__iter_user_stream_queue", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_asset_name);
  Py_CLEAR(p->__pyx_v_available_balance);
  Py_CLEAR(p->__pyx_v_balance_delta);
  Py_CLEAR(p->__pyx_v_content);
  Py_CLEAR(p->__pyx_v_event_type);
  Py_CLEAR(p->__pyx_v_exchange_order_id);
  Py_CLEAR(p->__pyx_v_execute_price);
  Py_CLEAR(p->__pyx_v_executed_amount_diff);
  Py_CLEAR(p->__pyx_v_new_confirmed_amount);
  Py_CLEAR(p->__pyx_v_o);
  Py_CLEAR(p->__pyx_v_order);
  Py_CLEAR(p->__pyx_v_order_id);
  Py_CLEAR(p->__pyx_v_order_status);
  Py_CLEAR(p->__pyx_v_order_type_description);
  Py_CLEAR(p->__pyx_v_remaining_size);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_stream_message);
  Py_CLEAR(p->__pyx_v_total_balance);
  Py_CLEAR(p->__pyx_v_tracked_order);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  Py_CLEAR(p->__pyx_t_8);
  Py_CLEAR(p->__pyx_t_9);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener *)o;
  if (p->__pyx_v_asset_name) {
    e = (*v)(p->__pyx_v_asset_name, a); if (e) return e;
  }
  if (p->__pyx_v_available_balance) {
    e = (*v)(p->__pyx_v_available_balance, a); if (e) return e;
  }
  if (p->__pyx_v_balance_delta) {
    e = (*v)(p->__pyx_v_balance_delta, a); if (e) return e;
  }
  if (p->__pyx_v_content) {
    e = (*v)(p->__pyx_v_content, a); if (e) return e;
  }
  if (p->__pyx_v_event_type) {
    e = (*v)(p->__pyx_v_event_type, a); if (e) return e;
  }
  if (p->__pyx_v_exchange_order_id) {
    e = (*v)(p->__pyx_v_exchange_order_id, a); if (e) return e;
  }
  if (p->__pyx_v_execute_price) {
    e = (*v)(p->__pyx_v_execute_price, a); if (e) return e;
  }
  if (p->__pyx_v_executed_amount_diff) {
    e = (*v)(p->__pyx_v_executed_amount_diff, a); if (e) return e;
  }
  if (p->__pyx_v_new_confirmed_amount) {
    e = (*v)(p->__pyx_v_new_confirmed_amount, a); if (e) return e;
  }
  if (p->__pyx_v_o) {
    e = (*v)(p->__pyx_v_o, a); if (e) return e;
  }
  if (p->__pyx_v_order) {
    e = (*v)(p->__pyx_v_order, a); if (e) return e;
  }
  if (p->__pyx_v_order_id) {
    e = (*v)(p->__pyx_v_order_id, a); if (e) return e;
  }
  if (p->__pyx_v_order_status) {
    e = (*v)(p->__pyx_v_order_status, a); if (e) return e;
  }
  if (p->__pyx_v_order_type_description) {
    e = (*v)(p->__pyx_v_order_type_description, a); if (e) return e;
  }
  if (p->__pyx_v_remaining_size) {
    e = (*v)(p->__pyx_v_remaining_size, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_stream_message) {
    e = (*v)(p->__pyx_v_stream_message, a); if (e) return e;
  }
  if (p->__pyx_v_total_balance) {
    e = (*v)(p->__pyx_v_total_balance, a); if (e) return e;
  }
  if (p->__pyx_v_tracked_order) {
    e = (*v)(p->__pyx_v_tracked_order, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  if (p->__pyx_t_8) {
    e = (*v)(p->__pyx_t_8, a); if (e) return e;
  }
  if (p->__pyx_t_9) {
    e = (*v)(p->__pyx_t_9, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct_7__user_stream_event_listener",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct_7__user_stream_event_listener", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct_8__status_polling_loop",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct_8__status_polling_loop", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct_9__trading_rules_polling_loop",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct_9__trading_rules_polling_loop", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_amount);
  Py_CLEAR(p->__pyx_v_api_response);
  Py_CLEAR(p->__pyx_v_body);
  Py_CLEAR(p->__pyx_v_is_buy);
  Py_CLEAR(p->__pyx_v_order_id);
  Py_CLEAR(p->__pyx_v_order_type);
  Py_CLEAR(p->__pyx_v_path_url);
  Py_CLEAR(p->__pyx_v_price);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_trading_pair);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order *)o;
  if (p->__pyx_v_amount) {
    e = (*v)(p->__pyx_v_amount, a); if (e) return e;
  }
  if (p->__pyx_v_api_response) {
    e = (*v)(p->__pyx_v_api_response, a); if (e) return e;
  }
  if (p->__pyx_v_body) {
    e = (*v)(p->__pyx_v_body, a); if (e) return e;
  }
  if (p->__pyx_v_is_buy) {
    e = (*v)(p->__pyx_v_is_buy, a); if (e) return e;
  }
  if (p->__pyx_v_order_type) {
    e = (*v)(p->__pyx_v_order_type, a); if (e) return e;
  }
  if (p->__pyx_v_price) {
    e = (*v)(p->__pyx_v_price, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct_10_place_order",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct_10_place_order", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_amount);
  Py_CLEAR(p->__pyx_v_decimal_amount);
  Py_CLEAR(p->__pyx_v_decimal_price);
  Py_CLEAR(p->__pyx_v_exchange_order_id);
  Py_CLEAR(p->__pyx_v_order_id);
  Py_CLEAR(p->__pyx_v_order_result);
  Py_CLEAR(p->__pyx_v_order_type);
  Py_CLEAR(p->__pyx_v_order_type_str);
  Py_CLEAR(p->__pyx_v_price);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_tracked_order);
  Py_CLEAR(p->__pyx_v_trading_pair);
  Py_CLEAR(p->__pyx_v_trading_rule);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy *)o;
  if (p->__pyx_v_amount) {
    e = (*v)(p->__pyx_v_amount, a); if (e) return e;
  }
  if (p->__pyx_v_decimal_amount) {
    e = (*v)(p->__pyx_v_decimal_amount, a); if (e) return e;
  }
  if (p->__pyx_v_decimal_price) {
    e = (*v)(p->__pyx_v_decimal_price, a); if (e) return e;
  }
  if (p->__pyx_v_order_result) {
    e = (*v)(p->__pyx_v_order_result, a); if (e) return e;
  }
  if (p->__pyx_v_order_type) {
    e = (*v)(p->__pyx_v_order_type, a); if (e) return e;
  }
  if (p->__pyx_v_order_type_str) {
    e = (*v)(p->__pyx_v_order_type_str, a); if (e) return e;
  }
  if (p->__pyx_v_price) {
    e = (*v)(p->__pyx_v_price, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_tracked_order) {
    e = (*v)(p->__pyx_v_tracked_order, a); if (e) return e;
  }
  if (p->__pyx_v_trading_rule) {
    e = (*v)(((PyObject *)p->__pyx_v_trading_rule), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct_11_execute_buy",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct_11_execute_buy", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_amount);
  Py_CLEAR(p->__pyx_v_decimal_amount);
  Py_CLEAR(p->__pyx_v_decimal_price);
  Py_CLEAR(p->__pyx_v_exchange_order_id);
  Py_CLEAR(p->__pyx_v_order_id);
  Py_CLEAR(p->__pyx_v_order_result);
  Py_CLEAR(p->__pyx_v_order_type);
  Py_CLEAR(p->__pyx_v_order_type_str);
  Py_CLEAR(p->__pyx_v_price);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_tracked_order);
  Py_CLEAR(p->__pyx_v_trading_pair);
  Py_CLEAR(p->__pyx_v_trading_rule);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell *)o;
  if (p->__pyx_v_amount) {
    e = (*v)(p->__pyx_v_amount, a); if (e) return e;
  }
  if (p->__pyx_v_decimal_amount) {
    e = (*v)(p->__pyx_v_decimal_amount, a); if (e) return e;
  }
  if (p->__pyx_v_decimal_price) {
    e = (*v)(p->__pyx_v_decimal_price, a); if (e) return e;
  }
  if (p->__pyx_v_order_result) {
    e = (*v)(p->__pyx_v_order_result, a); if (e) return e;
  }
  if (p->__pyx_v_order_type) {
    e = (*v)(p->__pyx_v_order_type, a); if (e) return e;
  }
  if (p->__pyx_v_order_type_str) {
    e = (*v)(p->__pyx_v_order_type_str, a); if (e) return e;
  }
  if (p->__pyx_v_price) {
    e = (*v)(p->__pyx_v_price, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_tracked_order) {
    e = (*v)(p->__pyx_v_tracked_order, a); if (e) return e;
  }
  if (p->__pyx_v_trading_rule) {
    e = (*v)(((PyObject *)p->__pyx_v_trading_rule), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct_12_execute_sell",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct_12_execute_sell", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_cancel_result);
  Py_CLEAR(p->__pyx_v_err);
  Py_CLEAR(p->__pyx_v_order_id);
  Py_CLEAR(p->__pyx_v_path_url);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_state_result);
  Py_CLEAR(p->__pyx_v_tracked_order);
  Py_CLEAR(p->__pyx_v_trading_pair);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel *)o;
  if (p->__pyx_v_cancel_result) {
    e = (*v)(p->__pyx_v_cancel_result, a); if (e) return e;
  }
  if (p->__pyx_v_err) {
    e = (*v)(p->__pyx_v_err, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_state_result) {
    e = (*v)(p->__pyx_v_state_result, a); if (e) return e;
  }
  if (p->__pyx_v_tracked_order) {
    e = (*v)(p->__pyx_v_tracked_order, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct_13_execute_cancel",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct_13_execute_cancel", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_api_responses);
  Py_CLEAR(p->__pyx_v_failed_cancellation);
  Py_CLEAR(p->__pyx_v_incomplete_orders);
  Py_CLEAR(p->__pyx_8genexpr8__pyx_v_o);
  Py_CLEAR(p->__pyx_8genexpr9__pyx_v_o);
  Py_CLEAR(p->__pyx_9genexpr10__pyx_v_oid);
  Py_CLEAR(p->__pyx_8genexpr7__pyx_v_order);
  Py_CLEAR(p->__pyx_v_order_id);
  Py_CLEAR(p->__pyx_v_order_id_set);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_successful_cancellation);
  Py_CLEAR(p->__pyx_v_tasks);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  Py_CLEAR(p->__pyx_t_6);
  Py_CLEAR(p->__pyx_t_7);
  Py_CLEAR(p->__pyx_t_8);
  Py_CLEAR(p->__pyx_t_9);
  Py_CLEAR(p->__pyx_t_10);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all *)o;
  if (p->__pyx_v_api_responses) {
    e = (*v)(p->__pyx_v_api_responses, a); if (e) return e;
  }
  if (p->__pyx_v_failed_cancellation) {
    e = (*v)(p->__pyx_v_failed_cancellation, a); if (e) return e;
  }
  if (p->__pyx_v_incomplete_orders) {
    e = (*v)(p->__pyx_v_incomplete_orders, a); if (e) return e;
  }
  if (p->__pyx_8genexpr8__pyx_v_o) {
    e = (*v)(p->__pyx_8genexpr8__pyx_v_o, a); if (e) return e;
  }
  if (p->__pyx_8genexpr9__pyx_v_o) {
    e = (*v)(p->__pyx_8genexpr9__pyx_v_o, a); if (e) return e;
  }
  if (p->__pyx_9genexpr10__pyx_v_oid) {
    e = (*v)(p->__pyx_9genexpr10__pyx_v_oid, a); if (e) return e;
  }
  if (p->__pyx_8genexpr7__pyx_v_order) {
    e = (*v)(p->__pyx_8genexpr7__pyx_v_order, a); if (e) return e;
  }
  if (p->__pyx_v_order_id) {
    e = (*v)(p->__pyx_v_order_id, a); if (e) return e;
  }
  if (p->__pyx_v_order_id_set) {
    e = (*v)(p->__pyx_v_order_id_set, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_v_successful_cancellation) {
    e = (*v)(p->__pyx_v_successful_cancellation, a); if (e) return e;
  }
  if (p->__pyx_v_tasks) {
    e = (*v)(p->__pyx_v_tasks, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  if (p->__pyx_t_6) {
    e = (*v)(p->__pyx_t_6, a); if (e) return e;
  }
  if (p->__pyx_t_7) {
    e = (*v)(p->__pyx_t_7, a); if (e) return e;
  }
  if (p->__pyx_t_8) {
    e = (*v)(p->__pyx_t_8, a); if (e) return e;
  }
  if (p->__pyx_t_9) {
    e = (*v)(p->__pyx_t_9, a); if (e) return e;
  }
  if (p->__pyx_t_10) {
    e = (*v)(p->__pyx_t_10, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct_14_cancel_all",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct_14_cancel_all", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct_15__http_client",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct_15__http_client", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_auth_dict);
  Py_CLEAR(p->__pyx_v_body);
  Py_CLEAR(p->__pyx_v_client);
  Py_CLEAR(p->__pyx_v_data);
  Py_CLEAR(p->__pyx_v_headers);
  Py_CLEAR(p->__pyx_v_http_method);
  Py_CLEAR(p->__pyx_v_params);
  Py_CLEAR(p->__pyx_v_path_url);
  Py_CLEAR(p->__pyx_v_response);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_v_subaccount_id);
  Py_CLEAR(p->__pyx_v_url);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  Py_CLEAR(p->__pyx_t_3);
  Py_CLEAR(p->__pyx_t_4);
  Py_CLEAR(p->__pyx_t_5);
  Py_CLEAR(p->__pyx_t_6);
  Py_CLEAR(p->__pyx_t_7);
  Py_CLEAR(p->__pyx_t_8);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request *)o;
  if (p->__pyx_v_auth_dict) {
    e = (*v)(p->__pyx_v_auth_dict, a); if (e) return e;
  }
  if (p->__pyx_v_body) {
    e = (*v)(p->__pyx_v_body, a); if (e) return e;
  }
  if (p->__pyx_v_client) {
    e = (*v)(p->__pyx_v_client, a); if (e) return e;
  }
  if (p->__pyx_v_data) {
    e = (*v)(p->__pyx_v_data, a); if (e) return e;
  }
  if (p->__pyx_v_headers) {
    e = (*v)(p->__pyx_v_headers, a); if (e) return e;
  }
  if (p->__pyx_v_params) {
    e = (*v)(p->__pyx_v_params, a); if (e) return e;
  }
  if (p->__pyx_v_response) {
    e = (*v)(p->__pyx_v_response, a); if (e) return e;
  }
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  if (p->__pyx_t_3) {
    e = (*v)(p->__pyx_t_3, a); if (e) return e;
  }
  if (p->__pyx_t_4) {
    e = (*v)(p->__pyx_t_4, a); if (e) return e;
  }
  if (p->__pyx_t_5) {
    e = (*v)(p->__pyx_t_5, a); if (e) return e;
  }
  if (p->__pyx_t_6) {
    e = (*v)(p->__pyx_t_6, a); if (e) return e;
  }
  if (p->__pyx_t_7) {
    e = (*v)(p->__pyx_t_7, a); if (e) return e;
  }
  if (p->__pyx_t_8) {
    e = (*v)(p->__pyx_t_8, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct_16__api_request",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct_16__api_request", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  Py_CLEAR(p->__pyx_t_0);
  Py_CLEAR(p->__pyx_t_1);
  Py_CLEAR(p->__pyx_t_2);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  if (p->__pyx_t_1) {
    e = (*v)(p->__pyx_t_1, a); if (e) return e;
  }
  if (p->__pyx_t_2) {
    e = (*v)(p->__pyx_t_2, a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct_17_check_network",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct_17_check_network", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct_18_stop_network",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct_18_stop_network", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network *__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network[8];
static int __pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network = 0;

static PyObject *__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network)))) {
    o = (PyObject*)__pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network[--__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network];
    memset(o, 0, sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  #endif
  return o;
}

#if !CYTHON_COMPILING_IN_LIMITED_API
static void __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network(PyObject *o) {
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network)))) {
    __pyx_freelist_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network[__pyx_freecount_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network++] = ((struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}
#endif

static int __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network *p = (struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network *)o;
  if (p->__pyx_v_self) {
    e = (*v)(((PyObject *)p->__pyx_v_self), a); if (e) return e;
  }
  return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network_slots[] = {
  {Py_tp_getattro, (void *)PyObject_GenericGetAttr},
  {Py_tp_traverse, (void *)__pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network},
  {Py_tp_new, (void *)__pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network},
  {0, 0},
};
static PyType_Spec __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network_spec = {
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.__pyx_scope_struct_19_start_network",
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC,
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network_slots,
};
#else

static PyTypeObject __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network = {
  PyVarObject_HEAD_INIT(0, 0)
  "hummingbot.connector.exchange.bittrex.bittrex_exchange.""__pyx_scope_struct_19_start_network", /*tp_name*/
  sizeof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1
  0, /*tp_vectorcall*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
  0, /*tp_print*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif
/* #### Code section: pystring_table ### */

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  #if CYTHON_COMPILING_IN_LIMITED_API
  {0, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {0, __pyx_k_0_0005, sizeof(__pyx_k_0_0005), 0, 1, 0, 0},
  {0, __pyx_k_1_01, sizeof(__pyx_k_1_01), 0, 1, 0, 0},
  {0, __pyx_k_1e, sizeof(__pyx_k_1e), 0, 1, 0, 0},
  {0, __pyx_k_API_CALL_TIMEOUT, sizeof(__pyx_k_API_CALL_TIMEOUT), 0, 0, 1, 1},
  {0, __pyx_k_Aborting, sizeof(__pyx_k_Aborting), 0, 1, 0, 0},
  {0, __pyx_k_Any, sizeof(__pyx_k_Any), 0, 0, 1, 1},
  {0, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
  {0, __pyx_k_AsyncIterable, sizeof(__pyx_k_AsyncIterable), 0, 0, 1, 1},
  {0, __pyx_k_AsyncIterable_Dict_str_Any, sizeof(__pyx_k_AsyncIterable_Dict_str_Any), 0, 0, 1, 0},
  {0, __pyx_k_BITTREX_API_ENDPOINT, sizeof(__pyx_k_BITTREX_API_ENDPOINT), 0, 0, 1, 1},
  {0, __pyx_k_BTC, sizeof(__pyx_k_BTC), 0, 1, 0, 1},
  {0, __pyx_k_BTC_USD, sizeof(__pyx_k_BTC_USD), 0, 1, 0, 0},
  {0, __pyx_k_BTC_USDT, sizeof(__pyx_k_BTC_USDT), 0, 1, 0, 0},
  {0, __pyx_k_BUY, sizeof(__pyx_k_BUY), 0, 0, 1, 1},
  {0, __pyx_k_BUY, sizeof(__pyx_k_BUY), 0, 1, 0, 1},
  {0, __pyx_k_BittrexAPIOrderBookDataSource, sizeof(__pyx_k_BittrexAPIOrderBookDataSource), 0, 0, 1, 1},
  {0, __pyx_k_BittrexAuth, sizeof(__pyx_k_BittrexAuth), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange, sizeof(__pyx_k_BittrexExchange), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchangeTransactionTracke, sizeof(__pyx_k_BittrexExchangeTransactionTracke), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchangeTransactionTracke_2, sizeof(__pyx_k_BittrexExchangeTransactionTracke_2), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchangeTransactionTracke_3, sizeof(__pyx_k_BittrexExchangeTransactionTracke_3), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange___reduce_cython, sizeof(__pyx_k_BittrexExchange___reduce_cython), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange___setstate_cytho, sizeof(__pyx_k_BittrexExchange___setstate_cytho), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange__api_request, sizeof(__pyx_k_BittrexExchange__api_request), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange__format_trading, sizeof(__pyx_k_BittrexExchange__format_trading), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange__http_client, sizeof(__pyx_k_BittrexExchange__http_client), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange__iter_user_strea, sizeof(__pyx_k_BittrexExchange__iter_user_strea), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange__process_api_clo, sizeof(__pyx_k_BittrexExchange__process_api_clo), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange__status_polling, sizeof(__pyx_k_BittrexExchange__status_polling), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange__stop_network, sizeof(__pyx_k_BittrexExchange__stop_network), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange__trading_rules_p, sizeof(__pyx_k_BittrexExchange__trading_rules_p), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange__update_balances, sizeof(__pyx_k_BittrexExchange__update_balances), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange__update_order_st, sizeof(__pyx_k_BittrexExchange__update_order_st), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange__update_trading, sizeof(__pyx_k_BittrexExchange__update_trading), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange__user_stream_eve, sizeof(__pyx_k_BittrexExchange__user_stream_eve), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_buy, sizeof(__pyx_k_BittrexExchange_buy), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_cancel, sizeof(__pyx_k_BittrexExchange_cancel), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_cancel_all, sizeof(__pyx_k_BittrexExchange_cancel_all), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_check_network, sizeof(__pyx_k_BittrexExchange_check_network), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_execute_buy, sizeof(__pyx_k_BittrexExchange_execute_buy), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_execute_cancel, sizeof(__pyx_k_BittrexExchange_execute_cancel), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_execute_sell, sizeof(__pyx_k_BittrexExchange_execute_sell), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_get_active_excha, sizeof(__pyx_k_BittrexExchange_get_active_excha), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_get_fee, sizeof(__pyx_k_BittrexExchange_get_fee), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_get_order_book, sizeof(__pyx_k_BittrexExchange_get_order_book), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_get_price, sizeof(__pyx_k_BittrexExchange_get_price), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_list_orders, sizeof(__pyx_k_BittrexExchange_list_orders), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_logger, sizeof(__pyx_k_BittrexExchange_logger), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_place_order, sizeof(__pyx_k_BittrexExchange_place_order), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_restore_tracking, sizeof(__pyx_k_BittrexExchange_restore_tracking), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_sell, sizeof(__pyx_k_BittrexExchange_sell), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_start_network, sizeof(__pyx_k_BittrexExchange_start_network), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_start_tracking_o, sizeof(__pyx_k_BittrexExchange_start_tracking_o), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_stop_network, sizeof(__pyx_k_BittrexExchange_stop_network), 0, 0, 1, 1},
  {0, __pyx_k_BittrexExchange_supported_order, sizeof(__pyx_k_BittrexExchange_supported_order), 0, 0, 1, 1},
  {0, __pyx_k_BittrexInFlightOrder, sizeof(__pyx_k_BittrexInFlightOrder), 0, 0, 1, 1},
  {0, __pyx_k_BittrexOrderBookTracker, sizeof(__pyx_k_BittrexOrderBookTracker), 0, 0, 1, 1},
  {0, __pyx_k_BittrexUserStreamTracker, sizeof(__pyx_k_BittrexUserStreamTracker), 0, 0, 1, 1},
  {0, __pyx_k_BuyOrderCompleted, sizeof(__pyx_k_BuyOrderCompleted), 0, 0, 1, 1},
  {0, __pyx_k_BuyOrderCompletedEvent, sizeof(__pyx_k_BuyOrderCompletedEvent), 0, 0, 1, 1},
  {0, __pyx_k_BuyOrderCreated, sizeof(__pyx_k_BuyOrderCreated), 0, 0, 1, 1},
  {0, __pyx_k_BuyOrderCreatedEvent, sizeof(__pyx_k_BuyOrderCreatedEvent), 0, 0, 1, 1},
  {0, __pyx_k_Buy_order_amount, sizeof(__pyx_k_Buy_order_amount), 0, 1, 0, 0},
  {0, __pyx_k_CANCELLED, sizeof(__pyx_k_CANCELLED), 0, 1, 0, 1},
  {0, __pyx_k_CELO, sizeof(__pyx_k_CELO), 0, 1, 0, 0},
  {0, __pyx_k_CGLD, sizeof(__pyx_k_CGLD), 0, 1, 0, 0},
  {0, __pyx_k_CLOSED, sizeof(__pyx_k_CLOSED), 0, 1, 0, 1},
  {0, __pyx_k_CONNECTED, sizeof(__pyx_k_CONNECTED), 0, 0, 1, 1},
  {0, __pyx_k_CancellationResult, sizeof(__pyx_k_CancellationResult), 0, 0, 1, 1},
  {0, __pyx_k_CancelledError, sizeof(__pyx_k_CancelledError), 0, 0, 1, 1},
  {0, __pyx_k_Check_API_key_and_network_conne, sizeof(__pyx_k_Check_API_key_and_network_conne), 0, 1, 0, 0},
  {0, __pyx_k_ClientSession, sizeof(__pyx_k_ClientSession), 0, 0, 1, 1},
  {0, __pyx_k_Could_not_fetch_updates_for_the, sizeof(__pyx_k_Could_not_fetch_updates_for_the), 0, 1, 0, 0},
  {0, __pyx_k_Could_not_fetch_updates_from_Bit, sizeof(__pyx_k_Could_not_fetch_updates_from_Bit), 0, 1, 0, 0},
  {0, __pyx_k_Could_not_fetch_updates_from_Bit_2, sizeof(__pyx_k_Could_not_fetch_updates_from_Bit_2), 0, 1, 0, 0},
  {0, __pyx_k_Created, sizeof(__pyx_k_Created), 0, 1, 0, 0},
  {0, __pyx_k_DELETE, sizeof(__pyx_k_DELETE), 0, 1, 0, 1},
  {0, __pyx_k_Decimal, sizeof(__pyx_k_Decimal), 0, 0, 1, 1},
  {0, __pyx_k_Dict, sizeof(__pyx_k_Dict), 0, 0, 1, 1},
  {0, __pyx_k_Dict_str_Any, sizeof(__pyx_k_Dict_str_Any), 0, 0, 1, 0},
  {0, __pyx_k_Dict_str_any, sizeof(__pyx_k_Dict_str_any), 0, 0, 1, 0},
  {0, __pyx_k_ETH, sizeof(__pyx_k_ETH), 0, 1, 0, 1},
  {0, __pyx_k_ETH_BTC, sizeof(__pyx_k_ETH_BTC), 0, 1, 0, 0},
  {0, __pyx_k_Error_fetching_response_from, sizeof(__pyx_k_Error_fetching_response_from), 0, 1, 0, 0},
  {0, __pyx_k_Error_fetching_status_update_for, sizeof(__pyx_k_Error_fetching_status_update_for), 0, 1, 0, 0},
  {0, __pyx_k_Error_parsing_the_trading_pair_r, sizeof(__pyx_k_Error_parsing_the_trading_pair_r), 0, 1, 0, 0},
  {0, __pyx_k_Error_submitting_buy, sizeof(__pyx_k_Error_submitting_buy), 0, 1, 0, 0},
  {0, __pyx_k_Error_submitting_sell, sizeof(__pyx_k_Error_submitting_sell), 0, 1, 0, 0},
  {0, __pyx_k_Event, sizeof(__pyx_k_Event), 0, 0, 1, 1},
  {0, __pyx_k_ExchangeBase, sizeof(__pyx_k_ExchangeBase), 0, 0, 1, 1},
  {0, __pyx_k_Exchange_order_ID_never_updated, sizeof(__pyx_k_Exchange_order_ID_never_updated), 0, 1, 0, 0},
  {0, __pyx_k_FAILURE, sizeof(__pyx_k_FAILURE), 0, 1, 0, 1},
  {0, __pyx_k_Failed_to_cancel_order, sizeof(__pyx_k_Failed_to_cancel_order), 0, 1, 0, 0},
  {0, __pyx_k_Failed_to_cancel_order_on_Bittre, sizeof(__pyx_k_Failed_to_cancel_order_on_Bittre), 0, 1, 0, 0},
  {0, __pyx_k_Failed_to_cancel_the_order, sizeof(__pyx_k_Failed_to_cancel_the_order), 0, 1, 0, 0},
  {0, __pyx_k_Failed_to_submit_buy_order_to_Bi, sizeof(__pyx_k_Failed_to_submit_buy_order_to_Bi), 0, 1, 0, 0},
  {0, __pyx_k_Failed_to_submit_sell_order_to_B, sizeof(__pyx_k_Failed_to_submit_sell_order_to_B), 0, 1, 0, 0},
  {0, __pyx_k_Filled, sizeof(__pyx_k_Filled), 0, 1, 0, 0},
  {0, __pyx_k_GET, sizeof(__pyx_k_GET), 0, 1, 0, 1},
  {0, __pyx_k_GOOD_TIL_CANCELLED, sizeof(__pyx_k_GOOD_TIL_CANCELLED), 0, 1, 0, 1},
  {0, __pyx_k_HTTP_Status_Code, sizeof(__pyx_k_HTTP_Status_Code), 0, 1, 0, 0},
  {0, __pyx_k_HummingbotLogger, sizeof(__pyx_k_HummingbotLogger), 0, 0, 1, 1},
  {0, __pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 0, 1, 1},
  {0, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {0, __pyx_k_Invalid_OrderType, sizeof(__pyx_k_Invalid_OrderType), 0, 1, 0, 0},
  {0, __pyx_k_LIMIT, sizeof(__pyx_k_LIMIT), 0, 0, 1, 1},
  {0, __pyx_k_LIMIT, sizeof(__pyx_k_LIMIT), 0, 1, 0, 1},
  {0, __pyx_k_LIMIT_MAKER, sizeof(__pyx_k_LIMIT_MAKER), 0, 0, 1, 1},
  {0, __pyx_k_LimitOrder, sizeof(__pyx_k_LimitOrder), 0, 0, 1, 1},
  {0, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {0, __pyx_k_List_Any, sizeof(__pyx_k_List_Any), 0, 0, 1, 0},
  {0, __pyx_k_List_CancellationResult, sizeof(__pyx_k_List_CancellationResult), 0, 0, 1, 0},
  {0, __pyx_k_List_TradingRule, sizeof(__pyx_k_List_TradingRule), 0, 0, 1, 0},
  {0, __pyx_k_MARKET, sizeof(__pyx_k_MARKET), 0, 0, 1, 1},
  {0, __pyx_k_MARKET_BUY_ORDER_COMPLETED_EVENT, sizeof(__pyx_k_MARKET_BUY_ORDER_COMPLETED_EVENT), 0, 0, 1, 1},
  {0, __pyx_k_MARKET_BUY_ORDER_CREATED_EVENT_T, sizeof(__pyx_k_MARKET_BUY_ORDER_CREATED_EVENT_T), 0, 0, 1, 1},
  {0, __pyx_k_MARKET_ORDER_CANCELLED_EVENT_TAG, sizeof(__pyx_k_MARKET_ORDER_CANCELLED_EVENT_TAG), 0, 0, 1, 1},
  {0, __pyx_k_MARKET_ORDER_FAILURE_EVENT_TAG, sizeof(__pyx_k_MARKET_ORDER_FAILURE_EVENT_TAG), 0, 0, 1, 1},
  {0, __pyx_k_MARKET_ORDER_FILLED_EVENT_TAG, sizeof(__pyx_k_MARKET_ORDER_FILLED_EVENT_TAG), 0, 0, 1, 1},
  {0, __pyx_k_MARKET_RECEIVED_ASSET_EVENT_TAG, sizeof(__pyx_k_MARKET_RECEIVED_ASSET_EVENT_TAG), 0, 0, 1, 1},
  {0, __pyx_k_MARKET_SELL_ORDER_COMPLETED_EVEN, sizeof(__pyx_k_MARKET_SELL_ORDER_COMPLETED_EVEN), 0, 0, 1, 1},
  {0, __pyx_k_MARKET_SELL_ORDER_CREATED_EVENT, sizeof(__pyx_k_MARKET_SELL_ORDER_CREATED_EVENT), 0, 0, 1, 1},
  {0, __pyx_k_MARKET_TRANSACTION_FAILURE_EVENT, sizeof(__pyx_k_MARKET_TRANSACTION_FAILURE_EVENT), 0, 0, 1, 1},
  {0, __pyx_k_MarketEvent, sizeof(__pyx_k_MarketEvent), 0, 0, 1, 1},
  {0, __pyx_k_MarketOrderFailureEvent, sizeof(__pyx_k_MarketOrderFailureEvent), 0, 0, 1, 1},
  {0, __pyx_k_MarketTransactionFailureEvent, sizeof(__pyx_k_MarketTransactionFailureEvent), 0, 0, 1, 1},
  {0, __pyx_k_NOT_CONNECTED, sizeof(__pyx_k_NOT_CONNECTED), 0, 0, 1, 1},
  {0, __pyx_k_NOT_FOUND, sizeof(__pyx_k_NOT_FOUND), 0, 1, 0, 1},
  {0, __pyx_k_NaN, sizeof(__pyx_k_NaN), 0, 0, 1, 1},
  {0, __pyx_k_NaN, sizeof(__pyx_k_NaN), 0, 1, 0, 1},
  {0, __pyx_k_NetworkStatus, sizeof(__pyx_k_NetworkStatus), 0, 0, 1, 1},
  {0, __pyx_k_No_exchange_ID_found_for, sizeof(__pyx_k_No_exchange_ID_found_for), 0, 1, 0, 0},
  {0, __pyx_k_No_order_book_exists_for, sizeof(__pyx_k_No_order_book_exists_for), 0, 1, 0, 0},
  {0, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {0, __pyx_k_OFFLINE, sizeof(__pyx_k_OFFLINE), 0, 1, 0, 1},
  {0, __pyx_k_ORDER_NOT_EXIST_CONFIRMATION_COU, sizeof(__pyx_k_ORDER_NOT_EXIST_CONFIRMATION_COU), 0, 0, 1, 1},
  {0, __pyx_k_ORDER_NOT_OPEN, sizeof(__pyx_k_ORDER_NOT_OPEN), 0, 1, 0, 1},
  {0, __pyx_k_Optional, sizeof(__pyx_k_Optional), 0, 0, 1, 1},
  {0, __pyx_k_Optional_Decimal, sizeof(__pyx_k_Optional_Decimal), 0, 0, 1, 0},
  {0, __pyx_k_OrderBook, sizeof(__pyx_k_OrderBook), 0, 0, 1, 1},
  {0, __pyx_k_OrderCancelled, sizeof(__pyx_k_OrderCancelled), 0, 0, 1, 1},
  {0, __pyx_k_OrderCancelledEvent, sizeof(__pyx_k_OrderCancelledEvent), 0, 0, 1, 1},
  {0, __pyx_k_OrderFailure, sizeof(__pyx_k_OrderFailure), 0, 0, 1, 1},
  {0, __pyx_k_OrderFilled, sizeof(__pyx_k_OrderFilled), 0, 0, 1, 1},
  {0, __pyx_k_OrderFilledEvent, sizeof(__pyx_k_OrderFilledEvent), 0, 0, 1, 1},
  {0, __pyx_k_OrderType, sizeof(__pyx_k_OrderType), 0, 0, 1, 1},
  {0, __pyx_k_POST, sizeof(__pyx_k_POST), 0, 1, 0, 1},
  {0, __pyx_k_POST_ONLY_GOOD_TIL_CANCELLED, sizeof(__pyx_k_POST_ONLY_GOOD_TIL_CANCELLED), 0, 1, 0, 1},
  {0, __pyx_k_ReceivedAsset, sizeof(__pyx_k_ReceivedAsset), 0, 0, 1, 1},
  {0, __pyx_k_SELL, sizeof(__pyx_k_SELL), 0, 0, 1, 1},
  {0, __pyx_k_SELL, sizeof(__pyx_k_SELL), 0, 1, 0, 1},
  {0, __pyx_k_SellOrderCompleted, sizeof(__pyx_k_SellOrderCompleted), 0, 0, 1, 1},
  {0, __pyx_k_SellOrderCompletedEvent, sizeof(__pyx_k_SellOrderCompletedEvent), 0, 0, 1, 1},
  {0, __pyx_k_SellOrderCreated, sizeof(__pyx_k_SellOrderCreated), 0, 0, 1, 1},
  {0, __pyx_k_SellOrderCreatedEvent, sizeof(__pyx_k_SellOrderCreatedEvent), 0, 0, 1, 1},
  {0, __pyx_k_Sell_order_amount, sizeof(__pyx_k_Sell_order_amount), 0, 1, 0, 0},
  {0, __pyx_k_Skipping, sizeof(__pyx_k_Skipping), 0, 1, 0, 0},
  {0, __pyx_k_Successfully_cancelled_order, sizeof(__pyx_k_Successfully_cancelled_order), 0, 1, 0, 0},
  {0, __pyx_k_The, sizeof(__pyx_k_The), 0, 1, 0, 0},
  {0, __pyx_k_The_BUY_order, sizeof(__pyx_k_The_BUY_order), 0, 1, 0, 0},
  {0, __pyx_k_The_SELL_order, sizeof(__pyx_k_The_SELL_order), 0, 1, 0, 0},
  {0, __pyx_k_The_order, sizeof(__pyx_k_The_order), 0, 1, 0, 0},
  {0, __pyx_k_TimeoutError, sizeof(__pyx_k_TimeoutError), 0, 0, 1, 1},
  {0, __pyx_k_TradeFee, sizeof(__pyx_k_TradeFee), 0, 0, 1, 1},
  {0, __pyx_k_TradeType, sizeof(__pyx_k_TradeType), 0, 0, 1, 1},
  {0, __pyx_k_TransactionFailure, sizeof(__pyx_k_TransactionFailure), 0, 0, 1, 1},
  {0, __pyx_k_Tried_to_cancel_order, sizeof(__pyx_k_Tried_to_cancel_order), 0, 1, 0, 0},
  {0, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {0, __pyx_k_UPDATE_ORDERS_INTERVAL, sizeof(__pyx_k_UPDATE_ORDERS_INTERVAL), 0, 0, 1, 1},
  {0, __pyx_k_USD, sizeof(__pyx_k_USD), 0, 1, 0, 1},
  {0, __pyx_k_USDT, sizeof(__pyx_k_USDT), 0, 1, 0, 1},
  {0, __pyx_k_Unexpected_error_cancelling_orde, sizeof(__pyx_k_Unexpected_error_cancelling_orde), 0, 1, 0, 0},
  {0, __pyx_k_Unexpected_error_in_user_stream, sizeof(__pyx_k_Unexpected_error_in_user_stream), 0, 1, 0, 0},
  {0, __pyx_k_Unexpected_error_while_fetching, sizeof(__pyx_k_Unexpected_error_while_fetching), 0, 1, 0, 0},
  {0, __pyx_k_Unexpected_error_while_polling_u, sizeof(__pyx_k_Unexpected_error_while_polling_u), 0, 1, 0, 0},
  {0, __pyx_k_Unknown_error_Retrying_after_1_s, sizeof(__pyx_k_Unknown_error_Retrying_after_1_s), 0, 1, 0, 0},
  {0, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {0, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 0},
  {0, __pyx_k__108, sizeof(__pyx_k__108), 0, 0, 1, 1},
  {0, __pyx_k__11, sizeof(__pyx_k__11), 0, 1, 0, 0},
  {0, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 0},
  {0, __pyx_k__21, sizeof(__pyx_k__21), 0, 1, 0, 0},
  {0, __pyx_k__49, sizeof(__pyx_k__49), 0, 0, 1, 1},
  {0, __pyx_k__9, sizeof(__pyx_k__9), 0, 1, 0, 0},
  {0, __pyx_k_account_balance, sizeof(__pyx_k_account_balance), 0, 1, 0, 1},
  {0, __pyx_k_account_balances, sizeof(__pyx_k_account_balances), 0, 0, 1, 1},
  {0, __pyx_k_account_info, sizeof(__pyx_k_account_info), 0, 0, 1, 1},
  {0, __pyx_k_aenter, sizeof(__pyx_k_aenter), 0, 0, 1, 1},
  {0, __pyx_k_aexit, sizeof(__pyx_k_aexit), 0, 0, 1, 1},
  {0, __pyx_k_aiohttp, sizeof(__pyx_k_aiohttp), 0, 0, 1, 1},
  {0, __pyx_k_aiohttp_ClientSession, sizeof(__pyx_k_aiohttp_ClientSession), 0, 0, 1, 0},
  {0, __pyx_k_aiter, sizeof(__pyx_k_aiter), 0, 0, 1, 1},
  {0, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {0, __pyx_k_amount, sizeof(__pyx_k_amount), 0, 0, 1, 1},
  {0, __pyx_k_anext, sizeof(__pyx_k_anext), 0, 0, 1, 1},
  {0, __pyx_k_api_request, sizeof(__pyx_k_api_request), 0, 0, 1, 1},
  {0, __pyx_k_api_response, sizeof(__pyx_k_api_response), 0, 0, 1, 1},
  {0, __pyx_k_api_responses, sizeof(__pyx_k_api_responses), 0, 0, 1, 1},
  {0, __pyx_k_app_warning_msg, sizeof(__pyx_k_app_warning_msg), 0, 0, 1, 1},
  {0, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {0, __pyx_k_asset_name, sizeof(__pyx_k_asset_name), 0, 0, 1, 1},
  {0, __pyx_k_asset_names_to_remove, sizeof(__pyx_k_asset_names_to_remove), 0, 0, 1, 1},
  {0, __pyx_k_async_timeout, sizeof(__pyx_k_async_timeout), 0, 0, 1, 1},
  {0, __pyx_k_asyncio, sizeof(__pyx_k_asyncio), 0, 0, 1, 1},
  {0, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {0, __pyx_k_asyncio_tasks, sizeof(__pyx_k_asyncio_tasks), 0, 0, 1, 1},
  {0, __pyx_k_auth_dict, sizeof(__pyx_k_auth_dict), 0, 0, 1, 1},
  {0, __pyx_k_available, sizeof(__pyx_k_available), 0, 1, 0, 1},
  {0, __pyx_k_available_balance, sizeof(__pyx_k_available_balance), 0, 0, 1, 1},
  {0, __pyx_k_await, sizeof(__pyx_k_await), 0, 0, 1, 1},
  {0, __pyx_k_balance, sizeof(__pyx_k_balance), 0, 1, 0, 1},
  {0, __pyx_k_balance_delta, sizeof(__pyx_k_balance_delta), 0, 0, 1, 1},
  {0, __pyx_k_balance_entry, sizeof(__pyx_k_balance_entry), 0, 0, 1, 1},
  {0, __pyx_k_balances, sizeof(__pyx_k_balances), 0, 1, 0, 0},
  {0, __pyx_k_balances_2, sizeof(__pyx_k_balances_2), 0, 0, 1, 1},
  {0, __pyx_k_base_asset, sizeof(__pyx_k_base_asset), 0, 0, 1, 1},
  {0, __pyx_k_base_currency, sizeof(__pyx_k_base_currency), 0, 0, 1, 1},
  {0, __pyx_k_bittrex, sizeof(__pyx_k_bittrex), 0, 1, 0, 1},
  {0, __pyx_k_bittrex_api_key, sizeof(__pyx_k_bittrex_api_key), 0, 0, 1, 1},
  {0, __pyx_k_bittrex_auth, sizeof(__pyx_k_bittrex_auth), 0, 0, 1, 1},
  {0, __pyx_k_bittrex_secret_key, sizeof(__pyx_k_bittrex_secret_key), 0, 0, 1, 1},
  {0, __pyx_k_bm_logger, sizeof(__pyx_k_bm_logger), 0, 0, 1, 1},
  {0, __pyx_k_body, sizeof(__pyx_k_body), 0, 0, 1, 1},
  {0, __pyx_k_body, sizeof(__pyx_k_body), 0, 1, 0, 1},
  {0, __pyx_k_bool, sizeof(__pyx_k_bool), 0, 0, 1, 1},
  {0, __pyx_k_btc_usd_price, sizeof(__pyx_k_btc_usd_price), 0, 0, 1, 1},
  {0, __pyx_k_btc_usdt_price, sizeof(__pyx_k_btc_usdt_price), 0, 0, 1, 1},
  {0, __pyx_k_buy, sizeof(__pyx_k_buy), 0, 1, 0, 0},
  {0, __pyx_k_buy_2, sizeof(__pyx_k_buy_2), 0, 0, 1, 1},
  {0, __pyx_k_buy_order, sizeof(__pyx_k_buy_order), 0, 1, 0, 0},
  {0, __pyx_k_cancel, sizeof(__pyx_k_cancel), 0, 0, 1, 1},
  {0, __pyx_k_cancel_all, sizeof(__pyx_k_cancel_all), 0, 0, 1, 1},
  {0, __pyx_k_cancel_result, sizeof(__pyx_k_cancel_result), 0, 0, 1, 1},
  {0, __pyx_k_cancelled, sizeof(__pyx_k_cancelled), 0, 1, 0, 1},
  {0, __pyx_k_check_network, sizeof(__pyx_k_check_network), 0, 0, 1, 1},
  {0, __pyx_k_client, sizeof(__pyx_k_client), 0, 0, 1, 1},
  {0, __pyx_k_client_order_id, sizeof(__pyx_k_client_order_id), 0, 0, 1, 1},
  {0, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {0, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {0, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
  {0, __pyx_k_commission, sizeof(__pyx_k_commission), 0, 1, 0, 1},
  {0, __pyx_k_content, sizeof(__pyx_k_content), 0, 0, 1, 1},
  {0, __pyx_k_content, sizeof(__pyx_k_content), 0, 1, 0, 1},
  {0, __pyx_k_currencySymbol, sizeof(__pyx_k_currencySymbol), 0, 1, 0, 1},
  {0, __pyx_k_current_tick, sizeof(__pyx_k_current_tick), 0, 0, 1, 1},
  {0, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {0, __pyx_k_decimal, sizeof(__pyx_k_decimal), 0, 0, 1, 1},
  {0, __pyx_k_decimal_amount, sizeof(__pyx_k_decimal_amount), 0, 0, 1, 1},
  {0, __pyx_k_decimal_price, sizeof(__pyx_k_decimal_price), 0, 0, 1, 1},
  {0, __pyx_k_delta, sizeof(__pyx_k_delta), 0, 1, 0, 1},
  {0, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {0, __pyx_k_difference, sizeof(__pyx_k_difference), 0, 0, 1, 1},
  {0, __pyx_k_direction, sizeof(__pyx_k_direction), 0, 1, 0, 1},
  {0, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
  {0, __pyx_k_does_not_exist_on_Bittrex_No_ca, sizeof(__pyx_k_does_not_exist_on_Bittrex_No_ca), 0, 1, 0, 0},
  {0, __pyx_k_done, sizeof(__pyx_k_done), 0, 1, 0, 1},
  {0, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
  {0, __pyx_k_err, sizeof(__pyx_k_err), 0, 0, 1, 1},
  {0, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {0, __pyx_k_estimate_fee, sizeof(__pyx_k_estimate_fee), 0, 0, 1, 1},
  {0, __pyx_k_eth_btc_price, sizeof(__pyx_k_eth_btc_price), 0, 0, 1, 1},
  {0, __pyx_k_event_type, sizeof(__pyx_k_event_type), 0, 0, 1, 1},
  {0, __pyx_k_event_type, sizeof(__pyx_k_event_type), 0, 1, 0, 1},
  {0, __pyx_k_exc_info, sizeof(__pyx_k_exc_info), 0, 0, 1, 1},
  {0, __pyx_k_exchange_order_id, sizeof(__pyx_k_exchange_order_id), 0, 0, 1, 1},
  {0, __pyx_k_execute_buy, sizeof(__pyx_k_execute_buy), 0, 0, 1, 1},
  {0, __pyx_k_execute_cancel, sizeof(__pyx_k_execute_cancel), 0, 0, 1, 1},
  {0, __pyx_k_execute_price, sizeof(__pyx_k_execute_price), 0, 0, 1, 1},
  {0, __pyx_k_execute_sell, sizeof(__pyx_k_execute_sell), 0, 0, 1, 1},
  {0, __pyx_k_executed_amount_base, sizeof(__pyx_k_executed_amount_base), 0, 0, 1, 1},
  {0, __pyx_k_executed_amount_diff, sizeof(__pyx_k_executed_amount_diff), 0, 0, 1, 1},
  {0, __pyx_k_executed_amount_quote, sizeof(__pyx_k_executed_amount_quote), 0, 0, 1, 1},
  {0, __pyx_k_executed_price, sizeof(__pyx_k_executed_price), 0, 0, 1, 1},
  {0, __pyx_k_f, sizeof(__pyx_k_f), 0, 1, 0, 1},
  {0, __pyx_k_failed_cancellation, sizeof(__pyx_k_failed_cancellation), 0, 0, 1, 1},
  {0, __pyx_k_fee_asset, sizeof(__pyx_k_fee_asset), 0, 0, 1, 1},
  {0, __pyx_k_fee_paid, sizeof(__pyx_k_fee_paid), 0, 0, 1, 1},
  {0, __pyx_k_fillQuantity, sizeof(__pyx_k_fillQuantity), 0, 1, 0, 1},
  {0, __pyx_k_float, sizeof(__pyx_k_float), 0, 0, 1, 1},
  {0, __pyx_k_for, sizeof(__pyx_k_for), 0, 1, 0, 0},
  {0, __pyx_k_format_trading_rules, sizeof(__pyx_k_format_trading_rules), 0, 0, 1, 1},
  {0, __pyx_k_from_json, sizeof(__pyx_k_from_json), 0, 0, 1, 1},
  {0, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
  {0, __pyx_k_generate_auth_dict, sizeof(__pyx_k_generate_auth_dict), 0, 0, 1, 1},
  {0, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {0, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {0, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {0, __pyx_k_get_active_exchange_markets, sizeof(__pyx_k_get_active_exchange_markets), 0, 0, 1, 1},
  {0, __pyx_k_get_event_loop, sizeof(__pyx_k_get_event_loop), 0, 0, 1, 1},
  {0, __pyx_k_get_exchange_order_id, sizeof(__pyx_k_get_exchange_order_id), 0, 0, 1, 1},
  {0, __pyx_k_get_fee, sizeof(__pyx_k_get_fee), 0, 0, 1, 1},
  {0, __pyx_k_get_order_book, sizeof(__pyx_k_get_order_book), 0, 0, 1, 1},
  {0, __pyx_k_get_price, sizeof(__pyx_k_get_price), 0, 0, 1, 1},
  {0, __pyx_k_get_tracking_nonce, sizeof(__pyx_k_get_tracking_nonce), 0, 0, 1, 1},
  {0, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {0, __pyx_k_has_been_cancelled_according_to, sizeof(__pyx_k_has_been_cancelled_according_to), 0, 1, 0, 0},
  {0, __pyx_k_has_been_cancelled_according_to_2, sizeof(__pyx_k_has_been_cancelled_according_to_2), 0, 1, 0, 0},
  {0, __pyx_k_has_completed_according_to_Bitt, sizeof(__pyx_k_has_completed_according_to_Bitt), 0, 1, 0, 0},
  {0, __pyx_k_has_completed_according_to_Orde, sizeof(__pyx_k_has_completed_according_to_Orde), 0, 1, 0, 0},
  {0, __pyx_k_has_completed_according_to_orde, sizeof(__pyx_k_has_completed_according_to_orde), 0, 1, 0, 0},
  {0, __pyx_k_headers, sizeof(__pyx_k_headers), 0, 0, 1, 1},
  {0, __pyx_k_headers, sizeof(__pyx_k_headers), 0, 1, 0, 1},
  {0, __pyx_k_http_client, sizeof(__pyx_k_http_client), 0, 0, 1, 1},
  {0, __pyx_k_http_method, sizeof(__pyx_k_http_method), 0, 0, 1, 1},
  {0, __pyx_k_https_api_bittrex_com_v3, sizeof(__pyx_k_https_api_bittrex_com_v3), 0, 1, 0, 0},
  {0, __pyx_k_hummingbot_connector_exchange_ba, sizeof(__pyx_k_hummingbot_connector_exchange_ba), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_connector_exchange_bi, sizeof(__pyx_k_hummingbot_connector_exchange_bi), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_connector_exchange_bi_2, sizeof(__pyx_k_hummingbot_connector_exchange_bi_2), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_connector_exchange_bi_3, sizeof(__pyx_k_hummingbot_connector_exchange_bi_3), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_connector_exchange_bi_4, sizeof(__pyx_k_hummingbot_connector_exchange_bi_4), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_connector_exchange_bi_5, sizeof(__pyx_k_hummingbot_connector_exchange_bi_5), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_connector_exchange_bi_6, sizeof(__pyx_k_hummingbot_connector_exchange_bi_6), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_connector_exchange_bi_7, sizeof(__pyx_k_hummingbot_connector_exchange_bi_7), 0, 0, 1, 0},
  {0, __pyx_k_hummingbot_core_data_type_cancel, sizeof(__pyx_k_hummingbot_core_data_type_cancel), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_data_type_limit, sizeof(__pyx_k_hummingbot_core_data_type_limit), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_event_events, sizeof(__pyx_k_hummingbot_core_event_events), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_network_iterator, sizeof(__pyx_k_hummingbot_core_network_iterator), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_utils_async_util, sizeof(__pyx_k_hummingbot_core_utils_async_util), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_utils_estimate_f, sizeof(__pyx_k_hummingbot_core_utils_estimate_f), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_core_utils_tracking_n, sizeof(__pyx_k_hummingbot_core_utils_tracking_n), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_logger, sizeof(__pyx_k_hummingbot_logger), 0, 0, 1, 1},
  {0, __pyx_k_hummingbot_market_market_base, sizeof(__pyx_k_hummingbot_market_market_base), 0, 0, 1, 1},
  {0, __pyx_k_id, sizeof(__pyx_k_id), 0, 1, 0, 1},
  {0, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {0, __pyx_k_incomplete_orders, sizeof(__pyx_k_incomplete_orders), 0, 0, 1, 1},
  {0, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {0, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {0, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {0, __pyx_k_inspect, sizeof(__pyx_k_inspect), 0, 0, 1, 1},
  {0, __pyx_k_is_buy, sizeof(__pyx_k_is_buy), 0, 0, 1, 1},
  {0, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {0, __pyx_k_is_done, sizeof(__pyx_k_is_done), 0, 0, 1, 1},
  {0, __pyx_k_is_lower_than_the_minimum_order, sizeof(__pyx_k_is_lower_than_the_minimum_order), 0, 1, 0, 0},
  {0, __pyx_k_is_not_tracked, sizeof(__pyx_k_is_not_tracked), 0, 1, 0, 0},
  {0, __pyx_k_is_set, sizeof(__pyx_k_is_set), 0, 0, 1, 1},
  {0, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
  {0, __pyx_k_item, sizeof(__pyx_k_item), 0, 0, 1, 1},
  {0, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {0, __pyx_k_iter_user_stream_queue, sizeof(__pyx_k_iter_user_stream_queue), 0, 0, 1, 1},
  {0, __pyx_k_json, sizeof(__pyx_k_json), 0, 0, 1, 1},
  {0, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {0, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {0, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {0, __pyx_k_lastTradeRate, sizeof(__pyx_k_lastTradeRate), 0, 1, 0, 1},
  {0, __pyx_k_last_state, sizeof(__pyx_k_last_state), 0, 0, 1, 1},
  {0, __pyx_k_last_tick, sizeof(__pyx_k_last_tick), 0, 0, 1, 1},
  {0, __pyx_k_last_trade_rate, sizeof(__pyx_k_last_trade_rate), 0, 0, 1, 1},
  {0, __pyx_k_limit, sizeof(__pyx_k_limit), 0, 1, 0, 1},
  {0, __pyx_k_list_orders, sizeof(__pyx_k_list_orders), 0, 0, 1, 1},
  {0, __pyx_k_local_asset_names, sizeof(__pyx_k_local_asset_names), 0, 0, 1, 1},
  {0, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {0, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {0, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {0, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {0, __pyx_k_market, sizeof(__pyx_k_market), 0, 0, 1, 1},
  {0, __pyx_k_marketSymbol, sizeof(__pyx_k_marketSymbol), 0, 1, 0, 1},
  {0, __pyx_k_market_dict, sizeof(__pyx_k_market_dict), 0, 0, 1, 1},
  {0, __pyx_k_market_list, sizeof(__pyx_k_market_list), 0, 0, 1, 1},
  {0, __pyx_k_market_path_url, sizeof(__pyx_k_market_path_url), 0, 0, 1, 1},
  {0, __pyx_k_markets, sizeof(__pyx_k_markets), 0, 1, 0, 0},
  {0, __pyx_k_markets_tickers, sizeof(__pyx_k_markets_tickers), 0, 1, 0, 0},
  {0, __pyx_k_minTradeSize, sizeof(__pyx_k_minTradeSize), 0, 1, 0, 1},
  {0, __pyx_k_min_base_amount_increment, sizeof(__pyx_k_min_base_amount_increment), 0, 0, 1, 1},
  {0, __pyx_k_min_btc_value, sizeof(__pyx_k_min_btc_value), 0, 0, 1, 1},
  {0, __pyx_k_min_order_size, sizeof(__pyx_k_min_order_size), 0, 0, 1, 1},
  {0, __pyx_k_min_order_value, sizeof(__pyx_k_min_order_value), 0, 0, 1, 1},
  {0, __pyx_k_min_price_increment, sizeof(__pyx_k_min_price_increment), 0, 0, 1, 1},
  {0, __pyx_k_min_quote_amount_increment, sizeof(__pyx_k_min_quote_amount_increment), 0, 0, 1, 1},
  {0, __pyx_k_min_trade_size, sizeof(__pyx_k_min_trade_size), 0, 0, 1, 1},
  {0, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {0, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {0, __pyx_k_network, sizeof(__pyx_k_network), 0, 0, 1, 1},
  {0, __pyx_k_new_confirmed_amount, sizeof(__pyx_k_new_confirmed_amount), 0, 0, 1, 1},
  {0, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {0, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {0, __pyx_k_o, sizeof(__pyx_k_o), 0, 0, 1, 1},
  {0, __pyx_k_of_the, sizeof(__pyx_k_of_the), 0, 1, 0, 0},
  {0, __pyx_k_oid, sizeof(__pyx_k_oid), 0, 0, 1, 1},
  {0, __pyx_k_on_Bittrex_Check_API_key_and_ne, sizeof(__pyx_k_on_Bittrex_Check_API_key_and_ne), 0, 1, 0, 0},
  {0, __pyx_k_on_order_status_update_Order_no, sizeof(__pyx_k_on_order_status_update_Order_no), 0, 1, 0, 0},
  {0, __pyx_k_open_orders, sizeof(__pyx_k_open_orders), 0, 0, 1, 1},
  {0, __pyx_k_order, sizeof(__pyx_k_order), 0, 1, 0, 0},
  {0, __pyx_k_order_2, sizeof(__pyx_k_order_2), 0, 0, 1, 1},
  {0, __pyx_k_order_2, sizeof(__pyx_k_order_2), 0, 1, 0, 1},
  {0, __pyx_k_order_book_initialized, sizeof(__pyx_k_order_book_initialized), 0, 1, 0, 1},
  {0, __pyx_k_order_books, sizeof(__pyx_k_order_books), 0, 0, 1, 1},
  {0, __pyx_k_order_id, sizeof(__pyx_k_order_id), 0, 0, 1, 1},
  {0, __pyx_k_order_id_set, sizeof(__pyx_k_order_id_set), 0, 0, 1, 1},
  {0, __pyx_k_order_result, sizeof(__pyx_k_order_result), 0, 0, 1, 1},
  {0, __pyx_k_order_side, sizeof(__pyx_k_order_side), 0, 0, 1, 1},
  {0, __pyx_k_order_state, sizeof(__pyx_k_order_state), 0, 0, 1, 1},
  {0, __pyx_k_order_status, sizeof(__pyx_k_order_status), 0, 0, 1, 1},
  {0, __pyx_k_order_to_Bittrex_for, sizeof(__pyx_k_order_to_Bittrex_for), 0, 1, 0, 0},
  {0, __pyx_k_order_type, sizeof(__pyx_k_order_type), 0, 0, 1, 1},
  {0, __pyx_k_order_type_description, sizeof(__pyx_k_order_type_description), 0, 0, 1, 1},
  {0, __pyx_k_order_type_str, sizeof(__pyx_k_order_type_str), 0, 0, 1, 1},
  {0, __pyx_k_orders, sizeof(__pyx_k_orders), 0, 1, 0, 0},
  {0, __pyx_k_orders_2, sizeof(__pyx_k_orders_2), 0, 1, 0, 0},
  {0, __pyx_k_orders_open, sizeof(__pyx_k_orders_open), 0, 1, 0, 0},
  {0, __pyx_k_out_of, sizeof(__pyx_k_out_of), 0, 1, 0, 0},
  {0, __pyx_k_owner, sizeof(__pyx_k_owner), 0, 0, 1, 1},
  {0, __pyx_k_pandas, sizeof(__pyx_k_pandas), 0, 0, 1, 1},
  {0, __pyx_k_params, sizeof(__pyx_k_params), 0, 0, 1, 1},
  {0, __pyx_k_path_url, sizeof(__pyx_k_path_url), 0, 0, 1, 1},
  {0, __pyx_k_pd, sizeof(__pyx_k_pd), 0, 0, 1, 1},
  {0, __pyx_k_pd_DataFrame, sizeof(__pyx_k_pd_DataFrame), 0, 0, 1, 0},
  {0, __pyx_k_ping, sizeof(__pyx_k_ping), 0, 1, 0, 0},
  {0, __pyx_k_place_order, sizeof(__pyx_k_place_order), 0, 0, 1, 1},
  {0, __pyx_k_poll_interval, sizeof(__pyx_k_poll_interval), 0, 0, 1, 1},
  {0, __pyx_k_precision, sizeof(__pyx_k_precision), 0, 0, 1, 1},
  {0, __pyx_k_precision, sizeof(__pyx_k_precision), 0, 1, 0, 1},
  {0, __pyx_k_price, sizeof(__pyx_k_price), 0, 0, 1, 1},
  {0, __pyx_k_process_api_closed, sizeof(__pyx_k_process_api_closed), 0, 0, 1, 1},
  {0, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {0, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {0, __pyx_k_quantity, sizeof(__pyx_k_quantity), 0, 1, 0, 1},
  {0, __pyx_k_quoteCurrencySymbol, sizeof(__pyx_k_quoteCurrencySymbol), 0, 1, 0, 1},
  {0, __pyx_k_quote_amount, sizeof(__pyx_k_quote_amount), 0, 0, 1, 1},
  {0, __pyx_k_quote_asset, sizeof(__pyx_k_quote_asset), 0, 0, 1, 1},
  {0, __pyx_k_quote_currency, sizeof(__pyx_k_quote_currency), 0, 0, 1, 1},
  {0, __pyx_k_ready, sizeof(__pyx_k_ready), 0, 0, 1, 1},
  {0, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {0, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {0, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {0, __pyx_k_remaining_size, sizeof(__pyx_k_remaining_size), 0, 0, 1, 1},
  {0, __pyx_k_remote_asset_names, sizeof(__pyx_k_remote_asset_names), 0, 0, 1, 1},
  {0, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
  {0, __pyx_k_request, sizeof(__pyx_k_request), 0, 0, 1, 1},
  {0, __pyx_k_response, sizeof(__pyx_k_response), 0, 0, 1, 1},
  {0, __pyx_k_restore_tracking_states, sizeof(__pyx_k_restore_tracking_states), 0, 0, 1, 1},
  {0, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {0, __pyx_k_result_list, sizeof(__pyx_k_result_list), 0, 0, 1, 1},
  {0, __pyx_k_return, sizeof(__pyx_k_return), 0, 0, 1, 1},
  {0, __pyx_k_return_exceptions, sizeof(__pyx_k_return_exceptions), 0, 0, 1, 1},
  {0, __pyx_k_retval, sizeof(__pyx_k_retval), 0, 0, 1, 1},
  {0, __pyx_k_s_decimal_0, sizeof(__pyx_k_s_decimal_0), 0, 0, 1, 1},
  {0, __pyx_k_s_decimal_NaN, sizeof(__pyx_k_s_decimal_NaN), 0, 0, 1, 1},
  {0, __pyx_k_safe_ensure_future, sizeof(__pyx_k_safe_ensure_future), 0, 0, 1, 1},
  {0, __pyx_k_safe_gather, sizeof(__pyx_k_safe_gather), 0, 0, 1, 1},
  {0, __pyx_k_saved_states, sizeof(__pyx_k_saved_states), 0, 0, 1, 1},
  {0, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {0, __pyx_k_self__events_cannot_be_converted, sizeof(__pyx_k_self__events_cannot_be_converted), 0, 0, 1, 0},
  {0, __pyx_k_sell, sizeof(__pyx_k_sell), 0, 1, 0, 0},
  {0, __pyx_k_sell_2, sizeof(__pyx_k_sell_2), 0, 0, 1, 1},
  {0, __pyx_k_sell_order, sizeof(__pyx_k_sell_order), 0, 1, 0, 0},
  {0, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {0, __pyx_k_set, sizeof(__pyx_k_set), 0, 0, 1, 1},
  {0, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {0, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {0, __pyx_k_sleep, sizeof(__pyx_k_sleep), 0, 0, 1, 1},
  {0, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {0, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {0, __pyx_k_start_network, sizeof(__pyx_k_start_network), 0, 0, 1, 1},
  {0, __pyx_k_start_tracking_order, sizeof(__pyx_k_start_tracking_order), 0, 0, 1, 1},
  {0, __pyx_k_state_result, sizeof(__pyx_k_state_result), 0, 0, 1, 1},
  {0, __pyx_k_status, sizeof(__pyx_k_status), 0, 0, 1, 1},
  {0, __pyx_k_status, sizeof(__pyx_k_status), 0, 1, 0, 1},
  {0, __pyx_k_status_dict, sizeof(__pyx_k_status_dict), 0, 0, 1, 1},
  {0, __pyx_k_status_polling_loop, sizeof(__pyx_k_status_polling_loop), 0, 0, 1, 1},
  {0, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {0, __pyx_k_stop_network, sizeof(__pyx_k_stop_network), 0, 0, 1, 1},
  {0, __pyx_k_stop_network_2, sizeof(__pyx_k_stop_network_2), 0, 0, 1, 1},
  {0, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {0, __pyx_k_stream_message, sizeof(__pyx_k_stream_message), 0, 0, 1, 1},
  {0, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {0, __pyx_k_subaccount_id, sizeof(__pyx_k_subaccount_id), 0, 0, 1, 1},
  {0, __pyx_k_successful_cancellation, sizeof(__pyx_k_successful_cancellation), 0, 0, 1, 1},
  {0, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {0, __pyx_k_supported_order_types, sizeof(__pyx_k_supported_order_types), 0, 0, 1, 1},
  {0, __pyx_k_symbol, sizeof(__pyx_k_symbol), 0, 1, 0, 1},
  {0, __pyx_k_tasks, sizeof(__pyx_k_tasks), 0, 0, 1, 1},
  {0, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {0, __pyx_k_ticker_data, sizeof(__pyx_k_ticker_data), 0, 0, 1, 1},
  {0, __pyx_k_ticker_list, sizeof(__pyx_k_ticker_list), 0, 0, 1, 1},
  {0, __pyx_k_ticker_path_url, sizeof(__pyx_k_ticker_path_url), 0, 0, 1, 1},
  {0, __pyx_k_timeInForce, sizeof(__pyx_k_timeInForce), 0, 1, 0, 1},
  {0, __pyx_k_timeout, sizeof(__pyx_k_timeout), 0, 0, 1, 1},
  {0, __pyx_k_timeout_seconds, sizeof(__pyx_k_timeout_seconds), 0, 0, 1, 1},
  {0, __pyx_k_to_json, sizeof(__pyx_k_to_json), 0, 0, 1, 1},
  {0, __pyx_k_to_limit_order, sizeof(__pyx_k_to_limit_order), 0, 0, 1, 1},
  {0, __pyx_k_total, sizeof(__pyx_k_total), 0, 1, 0, 1},
  {0, __pyx_k_total_balance, sizeof(__pyx_k_total_balance), 0, 0, 1, 1},
  {0, __pyx_k_tracked_order, sizeof(__pyx_k_tracked_order), 0, 0, 1, 1},
  {0, __pyx_k_tracked_orders, sizeof(__pyx_k_tracked_orders), 0, 0, 1, 1},
  {0, __pyx_k_trade_type, sizeof(__pyx_k_trade_type), 0, 0, 1, 1},
  {0, __pyx_k_trading_pair, sizeof(__pyx_k_trading_pair), 0, 0, 1, 1},
  {0, __pyx_k_trading_pairs, sizeof(__pyx_k_trading_pairs), 0, 0, 1, 1},
  {0, __pyx_k_trading_required, sizeof(__pyx_k_trading_required), 0, 0, 1, 1},
  {0, __pyx_k_trading_rule, sizeof(__pyx_k_trading_rule), 0, 0, 1, 1},
  {0, __pyx_k_trading_rule_initialized, sizeof(__pyx_k_trading_rule_initialized), 0, 1, 0, 1},
  {0, __pyx_k_trading_rules_list, sizeof(__pyx_k_trading_rules_list), 0, 0, 1, 1},
  {0, __pyx_k_trading_rules_polling_loop, sizeof(__pyx_k_trading_rules_polling_loop), 0, 0, 1, 1},
  {0, __pyx_k_type, sizeof(__pyx_k_type), 0, 1, 0, 1},
  {0, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {0, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {0, __pyx_k_update_balances, sizeof(__pyx_k_update_balances), 0, 0, 1, 1},
  {0, __pyx_k_update_exchange_order_id, sizeof(__pyx_k_update_exchange_order_id), 0, 0, 1, 1},
  {0, __pyx_k_update_order_status, sizeof(__pyx_k_update_order_status), 0, 0, 1, 1},
  {0, __pyx_k_update_order_status_locals_gene, sizeof(__pyx_k_update_order_status_locals_gene), 0, 0, 1, 1},
  {0, __pyx_k_update_trading_rules, sizeof(__pyx_k_update_trading_rules), 0, 0, 1, 1},
  {0, __pyx_k_url, sizeof(__pyx_k_url), 0, 0, 1, 1},
  {0, __pyx_k_user_stream, sizeof(__pyx_k_user_stream), 0, 0, 1, 1},
  {0, __pyx_k_user_stream_event_listener, sizeof(__pyx_k_user_stream_event_listener), 0, 0, 1, 1},
  {0, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {0, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {0, __pyx_k_wait, sizeof(__pyx_k_wait), 0, 0, 1, 1},
  {0, __pyx_k_warning, sizeof(__pyx_k_warning), 0, 0, 1, 1},
  {0, __pyx_k_which_is_already_closed_Order_d, sizeof(__pyx_k_which_is_already_closed_Order_d), 0, 1, 0, 0},
  {0, __pyx_k_ws, sizeof(__pyx_k_ws), 0, 1, 0, 0},
  #else
  {&__pyx_kp_u_, __pyx_k_, sizeof(__pyx_k_), 0, 1, 0, 0},
  {&__pyx_kp_u_0_0005, __pyx_k_0_0005, sizeof(__pyx_k_0_0005), 0, 1, 0, 0},
  {&__pyx_kp_u_1_01, __pyx_k_1_01, sizeof(__pyx_k_1_01), 0, 1, 0, 0},
  {&__pyx_kp_u_1e, __pyx_k_1e, sizeof(__pyx_k_1e), 0, 1, 0, 0},
  {&__pyx_n_s_API_CALL_TIMEOUT, __pyx_k_API_CALL_TIMEOUT, sizeof(__pyx_k_API_CALL_TIMEOUT), 0, 0, 1, 1},
  {&__pyx_kp_u_Aborting, __pyx_k_Aborting, sizeof(__pyx_k_Aborting), 0, 1, 0, 0},
  {&__pyx_n_s_Any, __pyx_k_Any, sizeof(__pyx_k_Any), 0, 0, 1, 1},
  {&__pyx_n_s_AssertionError, __pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 0, 1, 1},
  {&__pyx_n_s_AsyncIterable, __pyx_k_AsyncIterable, sizeof(__pyx_k_AsyncIterable), 0, 0, 1, 1},
  {&__pyx_kp_s_AsyncIterable_Dict_str_Any, __pyx_k_AsyncIterable_Dict_str_Any, sizeof(__pyx_k_AsyncIterable_Dict_str_Any), 0, 0, 1, 0},
  {&__pyx_n_s_BITTREX_API_ENDPOINT, __pyx_k_BITTREX_API_ENDPOINT, sizeof(__pyx_k_BITTREX_API_ENDPOINT), 0, 0, 1, 1},
  {&__pyx_n_u_BTC, __pyx_k_BTC, sizeof(__pyx_k_BTC), 0, 1, 0, 1},
  {&__pyx_kp_u_BTC_USD, __pyx_k_BTC_USD, sizeof(__pyx_k_BTC_USD), 0, 1, 0, 0},
  {&__pyx_kp_u_BTC_USDT, __pyx_k_BTC_USDT, sizeof(__pyx_k_BTC_USDT), 0, 1, 0, 0},
  {&__pyx_n_s_BUY, __pyx_k_BUY, sizeof(__pyx_k_BUY), 0, 0, 1, 1},
  {&__pyx_n_u_BUY, __pyx_k_BUY, sizeof(__pyx_k_BUY), 0, 1, 0, 1},
  {&__pyx_n_s_BittrexAPIOrderBookDataSource, __pyx_k_BittrexAPIOrderBookDataSource, sizeof(__pyx_k_BittrexAPIOrderBookDataSource), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexAuth, __pyx_k_BittrexAuth, sizeof(__pyx_k_BittrexAuth), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange, __pyx_k_BittrexExchange, sizeof(__pyx_k_BittrexExchange), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchangeTransactionTracke, __pyx_k_BittrexExchangeTransactionTracke, sizeof(__pyx_k_BittrexExchangeTransactionTracke), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchangeTransactionTracke_2, __pyx_k_BittrexExchangeTransactionTracke_2, sizeof(__pyx_k_BittrexExchangeTransactionTracke_2), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchangeTransactionTracke_3, __pyx_k_BittrexExchangeTransactionTracke_3, sizeof(__pyx_k_BittrexExchangeTransactionTracke_3), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange___reduce_cython, __pyx_k_BittrexExchange___reduce_cython, sizeof(__pyx_k_BittrexExchange___reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange___setstate_cytho, __pyx_k_BittrexExchange___setstate_cytho, sizeof(__pyx_k_BittrexExchange___setstate_cytho), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange__api_request, __pyx_k_BittrexExchange__api_request, sizeof(__pyx_k_BittrexExchange__api_request), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange__format_trading, __pyx_k_BittrexExchange__format_trading, sizeof(__pyx_k_BittrexExchange__format_trading), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange__http_client, __pyx_k_BittrexExchange__http_client, sizeof(__pyx_k_BittrexExchange__http_client), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange__iter_user_strea, __pyx_k_BittrexExchange__iter_user_strea, sizeof(__pyx_k_BittrexExchange__iter_user_strea), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange__process_api_clo, __pyx_k_BittrexExchange__process_api_clo, sizeof(__pyx_k_BittrexExchange__process_api_clo), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange__status_polling, __pyx_k_BittrexExchange__status_polling, sizeof(__pyx_k_BittrexExchange__status_polling), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange__stop_network, __pyx_k_BittrexExchange__stop_network, sizeof(__pyx_k_BittrexExchange__stop_network), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange__trading_rules_p, __pyx_k_BittrexExchange__trading_rules_p, sizeof(__pyx_k_BittrexExchange__trading_rules_p), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange__update_balances, __pyx_k_BittrexExchange__update_balances, sizeof(__pyx_k_BittrexExchange__update_balances), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange__update_order_st, __pyx_k_BittrexExchange__update_order_st, sizeof(__pyx_k_BittrexExchange__update_order_st), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange__update_trading, __pyx_k_BittrexExchange__update_trading, sizeof(__pyx_k_BittrexExchange__update_trading), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange__user_stream_eve, __pyx_k_BittrexExchange__user_stream_eve, sizeof(__pyx_k_BittrexExchange__user_stream_eve), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_buy, __pyx_k_BittrexExchange_buy, sizeof(__pyx_k_BittrexExchange_buy), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_cancel, __pyx_k_BittrexExchange_cancel, sizeof(__pyx_k_BittrexExchange_cancel), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_cancel_all, __pyx_k_BittrexExchange_cancel_all, sizeof(__pyx_k_BittrexExchange_cancel_all), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_check_network, __pyx_k_BittrexExchange_check_network, sizeof(__pyx_k_BittrexExchange_check_network), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_execute_buy, __pyx_k_BittrexExchange_execute_buy, sizeof(__pyx_k_BittrexExchange_execute_buy), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_execute_cancel, __pyx_k_BittrexExchange_execute_cancel, sizeof(__pyx_k_BittrexExchange_execute_cancel), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_execute_sell, __pyx_k_BittrexExchange_execute_sell, sizeof(__pyx_k_BittrexExchange_execute_sell), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_get_active_excha, __pyx_k_BittrexExchange_get_active_excha, sizeof(__pyx_k_BittrexExchange_get_active_excha), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_get_fee, __pyx_k_BittrexExchange_get_fee, sizeof(__pyx_k_BittrexExchange_get_fee), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_get_order_book, __pyx_k_BittrexExchange_get_order_book, sizeof(__pyx_k_BittrexExchange_get_order_book), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_get_price, __pyx_k_BittrexExchange_get_price, sizeof(__pyx_k_BittrexExchange_get_price), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_list_orders, __pyx_k_BittrexExchange_list_orders, sizeof(__pyx_k_BittrexExchange_list_orders), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_logger, __pyx_k_BittrexExchange_logger, sizeof(__pyx_k_BittrexExchange_logger), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_place_order, __pyx_k_BittrexExchange_place_order, sizeof(__pyx_k_BittrexExchange_place_order), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_restore_tracking, __pyx_k_BittrexExchange_restore_tracking, sizeof(__pyx_k_BittrexExchange_restore_tracking), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_sell, __pyx_k_BittrexExchange_sell, sizeof(__pyx_k_BittrexExchange_sell), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_start_network, __pyx_k_BittrexExchange_start_network, sizeof(__pyx_k_BittrexExchange_start_network), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_start_tracking_o, __pyx_k_BittrexExchange_start_tracking_o, sizeof(__pyx_k_BittrexExchange_start_tracking_o), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_stop_network, __pyx_k_BittrexExchange_stop_network, sizeof(__pyx_k_BittrexExchange_stop_network), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexExchange_supported_order, __pyx_k_BittrexExchange_supported_order, sizeof(__pyx_k_BittrexExchange_supported_order), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexInFlightOrder, __pyx_k_BittrexInFlightOrder, sizeof(__pyx_k_BittrexInFlightOrder), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexOrderBookTracker, __pyx_k_BittrexOrderBookTracker, sizeof(__pyx_k_BittrexOrderBookTracker), 0, 0, 1, 1},
  {&__pyx_n_s_BittrexUserStreamTracker, __pyx_k_BittrexUserStreamTracker, sizeof(__pyx_k_BittrexUserStreamTracker), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCompleted, __pyx_k_BuyOrderCompleted, sizeof(__pyx_k_BuyOrderCompleted), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCompletedEvent, __pyx_k_BuyOrderCompletedEvent, sizeof(__pyx_k_BuyOrderCompletedEvent), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCreated, __pyx_k_BuyOrderCreated, sizeof(__pyx_k_BuyOrderCreated), 0, 0, 1, 1},
  {&__pyx_n_s_BuyOrderCreatedEvent, __pyx_k_BuyOrderCreatedEvent, sizeof(__pyx_k_BuyOrderCreatedEvent), 0, 0, 1, 1},
  {&__pyx_kp_u_Buy_order_amount, __pyx_k_Buy_order_amount, sizeof(__pyx_k_Buy_order_amount), 0, 1, 0, 0},
  {&__pyx_n_u_CANCELLED, __pyx_k_CANCELLED, sizeof(__pyx_k_CANCELLED), 0, 1, 0, 1},
  {&__pyx_kp_u_CELO, __pyx_k_CELO, sizeof(__pyx_k_CELO), 0, 1, 0, 0},
  {&__pyx_kp_u_CGLD, __pyx_k_CGLD, sizeof(__pyx_k_CGLD), 0, 1, 0, 0},
  {&__pyx_n_u_CLOSED, __pyx_k_CLOSED, sizeof(__pyx_k_CLOSED), 0, 1, 0, 1},
  {&__pyx_n_s_CONNECTED, __pyx_k_CONNECTED, sizeof(__pyx_k_CONNECTED), 0, 0, 1, 1},
  {&__pyx_n_s_CancellationResult, __pyx_k_CancellationResult, sizeof(__pyx_k_CancellationResult), 0, 0, 1, 1},
  {&__pyx_n_s_CancelledError, __pyx_k_CancelledError, sizeof(__pyx_k_CancelledError), 0, 0, 1, 1},
  {&__pyx_kp_u_Check_API_key_and_network_conne, __pyx_k_Check_API_key_and_network_conne, sizeof(__pyx_k_Check_API_key_and_network_conne), 0, 1, 0, 0},
  {&__pyx_n_s_ClientSession, __pyx_k_ClientSession, sizeof(__pyx_k_ClientSession), 0, 0, 1, 1},
  {&__pyx_kp_u_Could_not_fetch_updates_for_the, __pyx_k_Could_not_fetch_updates_for_the, sizeof(__pyx_k_Could_not_fetch_updates_for_the), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_fetch_updates_from_Bit, __pyx_k_Could_not_fetch_updates_from_Bit, sizeof(__pyx_k_Could_not_fetch_updates_from_Bit), 0, 1, 0, 0},
  {&__pyx_kp_u_Could_not_fetch_updates_from_Bit_2, __pyx_k_Could_not_fetch_updates_from_Bit_2, sizeof(__pyx_k_Could_not_fetch_updates_from_Bit_2), 0, 1, 0, 0},
  {&__pyx_kp_u_Created, __pyx_k_Created, sizeof(__pyx_k_Created), 0, 1, 0, 0},
  {&__pyx_n_u_DELETE, __pyx_k_DELETE, sizeof(__pyx_k_DELETE), 0, 1, 0, 1},
  {&__pyx_n_s_Decimal, __pyx_k_Decimal, sizeof(__pyx_k_Decimal), 0, 0, 1, 1},
  {&__pyx_n_s_Dict, __pyx_k_Dict, sizeof(__pyx_k_Dict), 0, 0, 1, 1},
  {&__pyx_kp_s_Dict_str_Any, __pyx_k_Dict_str_Any, sizeof(__pyx_k_Dict_str_Any), 0, 0, 1, 0},
  {&__pyx_kp_s_Dict_str_any, __pyx_k_Dict_str_any, sizeof(__pyx_k_Dict_str_any), 0, 0, 1, 0},
  {&__pyx_n_u_ETH, __pyx_k_ETH, sizeof(__pyx_k_ETH), 0, 1, 0, 1},
  {&__pyx_kp_u_ETH_BTC, __pyx_k_ETH_BTC, sizeof(__pyx_k_ETH_BTC), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_fetching_response_from, __pyx_k_Error_fetching_response_from, sizeof(__pyx_k_Error_fetching_response_from), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_fetching_status_update_for, __pyx_k_Error_fetching_status_update_for, sizeof(__pyx_k_Error_fetching_status_update_for), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_parsing_the_trading_pair_r, __pyx_k_Error_parsing_the_trading_pair_r, sizeof(__pyx_k_Error_parsing_the_trading_pair_r), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_submitting_buy, __pyx_k_Error_submitting_buy, sizeof(__pyx_k_Error_submitting_buy), 0, 1, 0, 0},
  {&__pyx_kp_u_Error_submitting_sell, __pyx_k_Error_submitting_sell, sizeof(__pyx_k_Error_submitting_sell), 0, 1, 0, 0},
  {&__pyx_n_s_Event, __pyx_k_Event, sizeof(__pyx_k_Event), 0, 0, 1, 1},
  {&__pyx_n_s_ExchangeBase, __pyx_k_ExchangeBase, sizeof(__pyx_k_ExchangeBase), 0, 0, 1, 1},
  {&__pyx_kp_u_Exchange_order_ID_never_updated, __pyx_k_Exchange_order_ID_never_updated, sizeof(__pyx_k_Exchange_order_ID_never_updated), 0, 1, 0, 0},
  {&__pyx_n_u_FAILURE, __pyx_k_FAILURE, sizeof(__pyx_k_FAILURE), 0, 1, 0, 1},
  {&__pyx_kp_u_Failed_to_cancel_order, __pyx_k_Failed_to_cancel_order, sizeof(__pyx_k_Failed_to_cancel_order), 0, 1, 0, 0},
  {&__pyx_kp_u_Failed_to_cancel_order_on_Bittre, __pyx_k_Failed_to_cancel_order_on_Bittre, sizeof(__pyx_k_Failed_to_cancel_order_on_Bittre), 0, 1, 0, 0},
  {&__pyx_kp_u_Failed_to_cancel_the_order, __pyx_k_Failed_to_cancel_the_order, sizeof(__pyx_k_Failed_to_cancel_the_order), 0, 1, 0, 0},
  {&__pyx_kp_u_Failed_to_submit_buy_order_to_Bi, __pyx_k_Failed_to_submit_buy_order_to_Bi, sizeof(__pyx_k_Failed_to_submit_buy_order_to_Bi), 0, 1, 0, 0},
  {&__pyx_kp_u_Failed_to_submit_sell_order_to_B, __pyx_k_Failed_to_submit_sell_order_to_B, sizeof(__pyx_k_Failed_to_submit_sell_order_to_B), 0, 1, 0, 0},
  {&__pyx_kp_u_Filled, __pyx_k_Filled, sizeof(__pyx_k_Filled), 0, 1, 0, 0},
  {&__pyx_n_u_GET, __pyx_k_GET, sizeof(__pyx_k_GET), 0, 1, 0, 1},
  {&__pyx_n_u_GOOD_TIL_CANCELLED, __pyx_k_GOOD_TIL_CANCELLED, sizeof(__pyx_k_GOOD_TIL_CANCELLED), 0, 1, 0, 1},
  {&__pyx_kp_u_HTTP_Status_Code, __pyx_k_HTTP_Status_Code, sizeof(__pyx_k_HTTP_Status_Code), 0, 1, 0, 0},
  {&__pyx_n_s_HummingbotLogger, __pyx_k_HummingbotLogger, sizeof(__pyx_k_HummingbotLogger), 0, 0, 1, 1},
  {&__pyx_n_s_IOError, __pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 0, 1, 1},
  {&__pyx_n_s_ImportError, __pyx_k_ImportError, sizeof(__pyx_k_ImportError), 0, 0, 1, 1},
  {&__pyx_kp_u_Invalid_OrderType, __pyx_k_Invalid_OrderType, sizeof(__pyx_k_Invalid_OrderType), 0, 1, 0, 0},
  {&__pyx_n_s_LIMIT, __pyx_k_LIMIT, sizeof(__pyx_k_LIMIT), 0, 0, 1, 1},
  {&__pyx_n_u_LIMIT, __pyx_k_LIMIT, sizeof(__pyx_k_LIMIT), 0, 1, 0, 1},
  {&__pyx_n_s_LIMIT_MAKER, __pyx_k_LIMIT_MAKER, sizeof(__pyx_k_LIMIT_MAKER), 0, 0, 1, 1},
  {&__pyx_n_s_LimitOrder, __pyx_k_LimitOrder, sizeof(__pyx_k_LimitOrder), 0, 0, 1, 1},
  {&__pyx_n_s_List, __pyx_k_List, sizeof(__pyx_k_List), 0, 0, 1, 1},
  {&__pyx_kp_s_List_Any, __pyx_k_List_Any, sizeof(__pyx_k_List_Any), 0, 0, 1, 0},
  {&__pyx_kp_s_List_CancellationResult, __pyx_k_List_CancellationResult, sizeof(__pyx_k_List_CancellationResult), 0, 0, 1, 0},
  {&__pyx_kp_s_List_TradingRule, __pyx_k_List_TradingRule, sizeof(__pyx_k_List_TradingRule), 0, 0, 1, 0},
  {&__pyx_n_s_MARKET, __pyx_k_MARKET, sizeof(__pyx_k_MARKET), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT, __pyx_k_MARKET_BUY_ORDER_COMPLETED_EVENT, sizeof(__pyx_k_MARKET_BUY_ORDER_COMPLETED_EVENT), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T, __pyx_k_MARKET_BUY_ORDER_CREATED_EVENT_T, sizeof(__pyx_k_MARKET_BUY_ORDER_CREATED_EVENT_T), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG, __pyx_k_MARKET_ORDER_CANCELLED_EVENT_TAG, sizeof(__pyx_k_MARKET_ORDER_CANCELLED_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG, __pyx_k_MARKET_ORDER_FAILURE_EVENT_TAG, sizeof(__pyx_k_MARKET_ORDER_FAILURE_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG, __pyx_k_MARKET_ORDER_FILLED_EVENT_TAG, sizeof(__pyx_k_MARKET_ORDER_FILLED_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_RECEIVED_ASSET_EVENT_TAG, __pyx_k_MARKET_RECEIVED_ASSET_EVENT_TAG, sizeof(__pyx_k_MARKET_RECEIVED_ASSET_EVENT_TAG), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN, __pyx_k_MARKET_SELL_ORDER_COMPLETED_EVEN, sizeof(__pyx_k_MARKET_SELL_ORDER_COMPLETED_EVEN), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT, __pyx_k_MARKET_SELL_ORDER_CREATED_EVENT, sizeof(__pyx_k_MARKET_SELL_ORDER_CREATED_EVENT), 0, 0, 1, 1},
  {&__pyx_n_s_MARKET_TRANSACTION_FAILURE_EVENT, __pyx_k_MARKET_TRANSACTION_FAILURE_EVENT, sizeof(__pyx_k_MARKET_TRANSACTION_FAILURE_EVENT), 0, 0, 1, 1},
  {&__pyx_n_s_MarketEvent, __pyx_k_MarketEvent, sizeof(__pyx_k_MarketEvent), 0, 0, 1, 1},
  {&__pyx_n_s_MarketOrderFailureEvent, __pyx_k_MarketOrderFailureEvent, sizeof(__pyx_k_MarketOrderFailureEvent), 0, 0, 1, 1},
  {&__pyx_n_s_MarketTransactionFailureEvent, __pyx_k_MarketTransactionFailureEvent, sizeof(__pyx_k_MarketTransactionFailureEvent), 0, 0, 1, 1},
  {&__pyx_n_s_NOT_CONNECTED, __pyx_k_NOT_CONNECTED, sizeof(__pyx_k_NOT_CONNECTED), 0, 0, 1, 1},
  {&__pyx_n_u_NOT_FOUND, __pyx_k_NOT_FOUND, sizeof(__pyx_k_NOT_FOUND), 0, 1, 0, 1},
  {&__pyx_n_s_NaN, __pyx_k_NaN, sizeof(__pyx_k_NaN), 0, 0, 1, 1},
  {&__pyx_n_u_NaN, __pyx_k_NaN, sizeof(__pyx_k_NaN), 0, 1, 0, 1},
  {&__pyx_n_s_NetworkStatus, __pyx_k_NetworkStatus, sizeof(__pyx_k_NetworkStatus), 0, 0, 1, 1},
  {&__pyx_kp_u_No_exchange_ID_found_for, __pyx_k_No_exchange_ID_found_for, sizeof(__pyx_k_No_exchange_ID_found_for), 0, 1, 0, 0},
  {&__pyx_kp_u_No_order_book_exists_for, __pyx_k_No_order_book_exists_for, sizeof(__pyx_k_No_order_book_exists_for), 0, 1, 0, 0},
  {&__pyx_kp_u_None, __pyx_k_None, sizeof(__pyx_k_None), 0, 1, 0, 0},
  {&__pyx_n_u_OFFLINE, __pyx_k_OFFLINE, sizeof(__pyx_k_OFFLINE), 0, 1, 0, 1},
  {&__pyx_n_s_ORDER_NOT_EXIST_CONFIRMATION_COU, __pyx_k_ORDER_NOT_EXIST_CONFIRMATION_COU, sizeof(__pyx_k_ORDER_NOT_EXIST_CONFIRMATION_COU), 0, 0, 1, 1},
  {&__pyx_n_u_ORDER_NOT_OPEN, __pyx_k_ORDER_NOT_OPEN, sizeof(__pyx_k_ORDER_NOT_OPEN), 0, 1, 0, 1},
  {&__pyx_n_s_Optional, __pyx_k_Optional, sizeof(__pyx_k_Optional), 0, 0, 1, 1},
  {&__pyx_kp_s_Optional_Decimal, __pyx_k_Optional_Decimal, sizeof(__pyx_k_Optional_Decimal), 0, 0, 1, 0},
  {&__pyx_n_s_OrderBook, __pyx_k_OrderBook, sizeof(__pyx_k_OrderBook), 0, 0, 1, 1},
  {&__pyx_n_s_OrderCancelled, __pyx_k_OrderCancelled, sizeof(__pyx_k_OrderCancelled), 0, 0, 1, 1},
  {&__pyx_n_s_OrderCancelledEvent, __pyx_k_OrderCancelledEvent, sizeof(__pyx_k_OrderCancelledEvent), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFailure, __pyx_k_OrderFailure, sizeof(__pyx_k_OrderFailure), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFilled, __pyx_k_OrderFilled, sizeof(__pyx_k_OrderFilled), 0, 0, 1, 1},
  {&__pyx_n_s_OrderFilledEvent, __pyx_k_OrderFilledEvent, sizeof(__pyx_k_OrderFilledEvent), 0, 0, 1, 1},
  {&__pyx_n_s_OrderType, __pyx_k_OrderType, sizeof(__pyx_k_OrderType), 0, 0, 1, 1},
  {&__pyx_n_u_POST, __pyx_k_POST, sizeof(__pyx_k_POST), 0, 1, 0, 1},
  {&__pyx_n_u_POST_ONLY_GOOD_TIL_CANCELLED, __pyx_k_POST_ONLY_GOOD_TIL_CANCELLED, sizeof(__pyx_k_POST_ONLY_GOOD_TIL_CANCELLED), 0, 1, 0, 1},
  {&__pyx_n_s_ReceivedAsset, __pyx_k_ReceivedAsset, sizeof(__pyx_k_ReceivedAsset), 0, 0, 1, 1},
  {&__pyx_n_s_SELL, __pyx_k_SELL, sizeof(__pyx_k_SELL), 0, 0, 1, 1},
  {&__pyx_n_u_SELL, __pyx_k_SELL, sizeof(__pyx_k_SELL), 0, 1, 0, 1},
  {&__pyx_n_s_SellOrderCompleted, __pyx_k_SellOrderCompleted, sizeof(__pyx_k_SellOrderCompleted), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCompletedEvent, __pyx_k_SellOrderCompletedEvent, sizeof(__pyx_k_SellOrderCompletedEvent), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCreated, __pyx_k_SellOrderCreated, sizeof(__pyx_k_SellOrderCreated), 0, 0, 1, 1},
  {&__pyx_n_s_SellOrderCreatedEvent, __pyx_k_SellOrderCreatedEvent, sizeof(__pyx_k_SellOrderCreatedEvent), 0, 0, 1, 1},
  {&__pyx_kp_u_Sell_order_amount, __pyx_k_Sell_order_amount, sizeof(__pyx_k_Sell_order_amount), 0, 1, 0, 0},
  {&__pyx_kp_u_Skipping, __pyx_k_Skipping, sizeof(__pyx_k_Skipping), 0, 1, 0, 0},
  {&__pyx_kp_u_Successfully_cancelled_order, __pyx_k_Successfully_cancelled_order, sizeof(__pyx_k_Successfully_cancelled_order), 0, 1, 0, 0},
  {&__pyx_kp_u_The, __pyx_k_The, sizeof(__pyx_k_The), 0, 1, 0, 0},
  {&__pyx_kp_u_The_BUY_order, __pyx_k_The_BUY_order, sizeof(__pyx_k_The_BUY_order), 0, 1, 0, 0},
  {&__pyx_kp_u_The_SELL_order, __pyx_k_The_SELL_order, sizeof(__pyx_k_The_SELL_order), 0, 1, 0, 0},
  {&__pyx_kp_u_The_order, __pyx_k_The_order, sizeof(__pyx_k_The_order), 0, 1, 0, 0},
  {&__pyx_n_s_TimeoutError, __pyx_k_TimeoutError, sizeof(__pyx_k_TimeoutError), 0, 0, 1, 1},
  {&__pyx_n_s_TradeFee, __pyx_k_TradeFee, sizeof(__pyx_k_TradeFee), 0, 0, 1, 1},
  {&__pyx_n_s_TradeType, __pyx_k_TradeType, sizeof(__pyx_k_TradeType), 0, 0, 1, 1},
  {&__pyx_n_s_TransactionFailure, __pyx_k_TransactionFailure, sizeof(__pyx_k_TransactionFailure), 0, 0, 1, 1},
  {&__pyx_kp_u_Tried_to_cancel_order, __pyx_k_Tried_to_cancel_order, sizeof(__pyx_k_Tried_to_cancel_order), 0, 1, 0, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_n_s_UPDATE_ORDERS_INTERVAL, __pyx_k_UPDATE_ORDERS_INTERVAL, sizeof(__pyx_k_UPDATE_ORDERS_INTERVAL), 0, 0, 1, 1},
  {&__pyx_n_u_USD, __pyx_k_USD, sizeof(__pyx_k_USD), 0, 1, 0, 1},
  {&__pyx_n_u_USDT, __pyx_k_USDT, sizeof(__pyx_k_USDT), 0, 1, 0, 1},
  {&__pyx_kp_u_Unexpected_error_cancelling_orde, __pyx_k_Unexpected_error_cancelling_orde, sizeof(__pyx_k_Unexpected_error_cancelling_orde), 0, 1, 0, 0},
  {&__pyx_kp_u_Unexpected_error_in_user_stream, __pyx_k_Unexpected_error_in_user_stream, sizeof(__pyx_k_Unexpected_error_in_user_stream), 0, 1, 0, 0},
  {&__pyx_kp_u_Unexpected_error_while_fetching, __pyx_k_Unexpected_error_while_fetching, sizeof(__pyx_k_Unexpected_error_while_fetching), 0, 1, 0, 0},
  {&__pyx_kp_u_Unexpected_error_while_polling_u, __pyx_k_Unexpected_error_while_polling_u, sizeof(__pyx_k_Unexpected_error_while_polling_u), 0, 1, 0, 0},
  {&__pyx_kp_u_Unknown_error_Retrying_after_1_s, __pyx_k_Unknown_error_Retrying_after_1_s, sizeof(__pyx_k_Unknown_error_Retrying_after_1_s), 0, 1, 0, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_u__10, __pyx_k__10, sizeof(__pyx_k__10), 0, 1, 0, 0},
  {&__pyx_n_s__108, __pyx_k__108, sizeof(__pyx_k__108), 0, 0, 1, 1},
  {&__pyx_kp_u__11, __pyx_k__11, sizeof(__pyx_k__11), 0, 1, 0, 0},
  {&__pyx_kp_u__12, __pyx_k__12, sizeof(__pyx_k__12), 0, 1, 0, 0},
  {&__pyx_kp_u__21, __pyx_k__21, sizeof(__pyx_k__21), 0, 1, 0, 0},
  {&__pyx_n_s__49, __pyx_k__49, sizeof(__pyx_k__49), 0, 0, 1, 1},
  {&__pyx_kp_u__9, __pyx_k__9, sizeof(__pyx_k__9), 0, 1, 0, 0},
  {&__pyx_n_u_account_balance, __pyx_k_account_balance, sizeof(__pyx_k_account_balance), 0, 1, 0, 1},
  {&__pyx_n_s_account_balances, __pyx_k_account_balances, sizeof(__pyx_k_account_balances), 0, 0, 1, 1},
  {&__pyx_n_s_account_info, __pyx_k_account_info, sizeof(__pyx_k_account_info), 0, 0, 1, 1},
  {&__pyx_n_s_aenter, __pyx_k_aenter, sizeof(__pyx_k_aenter), 0, 0, 1, 1},
  {&__pyx_n_s_aexit, __pyx_k_aexit, sizeof(__pyx_k_aexit), 0, 0, 1, 1},
  {&__pyx_n_s_aiohttp, __pyx_k_aiohttp, sizeof(__pyx_k_aiohttp), 0, 0, 1, 1},
  {&__pyx_kp_s_aiohttp_ClientSession, __pyx_k_aiohttp_ClientSession, sizeof(__pyx_k_aiohttp_ClientSession), 0, 0, 1, 0},
  {&__pyx_n_s_aiter, __pyx_k_aiter, sizeof(__pyx_k_aiter), 0, 0, 1, 1},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_amount, __pyx_k_amount, sizeof(__pyx_k_amount), 0, 0, 1, 1},
  {&__pyx_n_s_anext, __pyx_k_anext, sizeof(__pyx_k_anext), 0, 0, 1, 1},
  {&__pyx_n_s_api_request, __pyx_k_api_request, sizeof(__pyx_k_api_request), 0, 0, 1, 1},
  {&__pyx_n_s_api_response, __pyx_k_api_response, sizeof(__pyx_k_api_response), 0, 0, 1, 1},
  {&__pyx_n_s_api_responses, __pyx_k_api_responses, sizeof(__pyx_k_api_responses), 0, 0, 1, 1},
  {&__pyx_n_s_app_warning_msg, __pyx_k_app_warning_msg, sizeof(__pyx_k_app_warning_msg), 0, 0, 1, 1},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_asset_name, __pyx_k_asset_name, sizeof(__pyx_k_asset_name), 0, 0, 1, 1},
  {&__pyx_n_s_asset_names_to_remove, __pyx_k_asset_names_to_remove, sizeof(__pyx_k_asset_names_to_remove), 0, 0, 1, 1},
  {&__pyx_n_s_async_timeout, __pyx_k_async_timeout, sizeof(__pyx_k_async_timeout), 0, 0, 1, 1},
  {&__pyx_n_s_asyncio, __pyx_k_asyncio, sizeof(__pyx_k_asyncio), 0, 0, 1, 1},
  {&__pyx_n_s_asyncio_coroutines, __pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 0, 1, 1},
  {&__pyx_n_s_asyncio_tasks, __pyx_k_asyncio_tasks, sizeof(__pyx_k_asyncio_tasks), 0, 0, 1, 1},
  {&__pyx_n_s_auth_dict, __pyx_k_auth_dict, sizeof(__pyx_k_auth_dict), 0, 0, 1, 1},
  {&__pyx_n_u_available, __pyx_k_available, sizeof(__pyx_k_available), 0, 1, 0, 1},
  {&__pyx_n_s_available_balance, __pyx_k_available_balance, sizeof(__pyx_k_available_balance), 0, 0, 1, 1},
  {&__pyx_n_s_await, __pyx_k_await, sizeof(__pyx_k_await), 0, 0, 1, 1},
  {&__pyx_n_u_balance, __pyx_k_balance, sizeof(__pyx_k_balance), 0, 1, 0, 1},
  {&__pyx_n_s_balance_delta, __pyx_k_balance_delta, sizeof(__pyx_k_balance_delta), 0, 0, 1, 1},
  {&__pyx_n_s_balance_entry, __pyx_k_balance_entry, sizeof(__pyx_k_balance_entry), 0, 0, 1, 1},
  {&__pyx_kp_u_balances, __pyx_k_balances, sizeof(__pyx_k_balances), 0, 1, 0, 0},
  {&__pyx_n_s_balances_2, __pyx_k_balances_2, sizeof(__pyx_k_balances_2), 0, 0, 1, 1},
  {&__pyx_n_s_base_asset, __pyx_k_base_asset, sizeof(__pyx_k_base_asset), 0, 0, 1, 1},
  {&__pyx_n_s_base_currency, __pyx_k_base_currency, sizeof(__pyx_k_base_currency), 0, 0, 1, 1},
  {&__pyx_n_u_bittrex, __pyx_k_bittrex, sizeof(__pyx_k_bittrex), 0, 1, 0, 1},
  {&__pyx_n_s_bittrex_api_key, __pyx_k_bittrex_api_key, sizeof(__pyx_k_bittrex_api_key), 0, 0, 1, 1},
  {&__pyx_n_s_bittrex_auth, __pyx_k_bittrex_auth, sizeof(__pyx_k_bittrex_auth), 0, 0, 1, 1},
  {&__pyx_n_s_bittrex_secret_key, __pyx_k_bittrex_secret_key, sizeof(__pyx_k_bittrex_secret_key), 0, 0, 1, 1},
  {&__pyx_n_s_bm_logger, __pyx_k_bm_logger, sizeof(__pyx_k_bm_logger), 0, 0, 1, 1},
  {&__pyx_n_s_body, __pyx_k_body, sizeof(__pyx_k_body), 0, 0, 1, 1},
  {&__pyx_n_u_body, __pyx_k_body, sizeof(__pyx_k_body), 0, 1, 0, 1},
  {&__pyx_n_s_bool, __pyx_k_bool, sizeof(__pyx_k_bool), 0, 0, 1, 1},
  {&__pyx_n_s_btc_usd_price, __pyx_k_btc_usd_price, sizeof(__pyx_k_btc_usd_price), 0, 0, 1, 1},
  {&__pyx_n_s_btc_usdt_price, __pyx_k_btc_usdt_price, sizeof(__pyx_k_btc_usdt_price), 0, 0, 1, 1},
  {&__pyx_kp_u_buy, __pyx_k_buy, sizeof(__pyx_k_buy), 0, 1, 0, 0},
  {&__pyx_n_s_buy_2, __pyx_k_buy_2, sizeof(__pyx_k_buy_2), 0, 0, 1, 1},
  {&__pyx_kp_u_buy_order, __pyx_k_buy_order, sizeof(__pyx_k_buy_order), 0, 1, 0, 0},
  {&__pyx_n_s_cancel, __pyx_k_cancel, sizeof(__pyx_k_cancel), 0, 0, 1, 1},
  {&__pyx_n_s_cancel_all, __pyx_k_cancel_all, sizeof(__pyx_k_cancel_all), 0, 0, 1, 1},
  {&__pyx_n_s_cancel_result, __pyx_k_cancel_result, sizeof(__pyx_k_cancel_result), 0, 0, 1, 1},
  {&__pyx_n_u_cancelled, __pyx_k_cancelled, sizeof(__pyx_k_cancelled), 0, 1, 0, 1},
  {&__pyx_n_s_check_network, __pyx_k_check_network, sizeof(__pyx_k_check_network), 0, 0, 1, 1},
  {&__pyx_n_s_client, __pyx_k_client, sizeof(__pyx_k_client), 0, 0, 1, 1},
  {&__pyx_n_s_client_order_id, __pyx_k_client_order_id, sizeof(__pyx_k_client_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_cline_in_traceback, __pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_cls, __pyx_k_cls, sizeof(__pyx_k_cls), 0, 0, 1, 1},
  {&__pyx_n_u_commission, __pyx_k_commission, sizeof(__pyx_k_commission), 0, 1, 0, 1},
  {&__pyx_n_s_content, __pyx_k_content, sizeof(__pyx_k_content), 0, 0, 1, 1},
  {&__pyx_n_u_content, __pyx_k_content, sizeof(__pyx_k_content), 0, 1, 0, 1},
  {&__pyx_n_u_currencySymbol, __pyx_k_currencySymbol, sizeof(__pyx_k_currencySymbol), 0, 1, 0, 1},
  {&__pyx_n_s_current_tick, __pyx_k_current_tick, sizeof(__pyx_k_current_tick), 0, 0, 1, 1},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_decimal, __pyx_k_decimal, sizeof(__pyx_k_decimal), 0, 0, 1, 1},
  {&__pyx_n_s_decimal_amount, __pyx_k_decimal_amount, sizeof(__pyx_k_decimal_amount), 0, 0, 1, 1},
  {&__pyx_n_s_decimal_price, __pyx_k_decimal_price, sizeof(__pyx_k_decimal_price), 0, 0, 1, 1},
  {&__pyx_n_u_delta, __pyx_k_delta, sizeof(__pyx_k_delta), 0, 1, 0, 1},
  {&__pyx_n_s_dict, __pyx_k_dict, sizeof(__pyx_k_dict), 0, 0, 1, 1},
  {&__pyx_n_s_difference, __pyx_k_difference, sizeof(__pyx_k_difference), 0, 0, 1, 1},
  {&__pyx_n_u_direction, __pyx_k_direction, sizeof(__pyx_k_direction), 0, 1, 0, 1},
  {&__pyx_kp_u_disable, __pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0, 0},
  {&__pyx_kp_u_does_not_exist_on_Bittrex_No_ca, __pyx_k_does_not_exist_on_Bittrex_No_ca, sizeof(__pyx_k_does_not_exist_on_Bittrex_No_ca), 0, 1, 0, 0},
  {&__pyx_n_u_done, __pyx_k_done, sizeof(__pyx_k_done), 0, 1, 0, 1},
  {&__pyx_kp_u_enable, __pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0, 0},
  {&__pyx_n_s_err, __pyx_k_err, sizeof(__pyx_k_err), 0, 0, 1, 1},
  {&__pyx_n_s_error, __pyx_k_error, sizeof(__pyx_k_error), 0, 0, 1, 1},
  {&__pyx_n_s_estimate_fee, __pyx_k_estimate_fee, sizeof(__pyx_k_estimate_fee), 0, 0, 1, 1},
  {&__pyx_n_s_eth_btc_price, __pyx_k_eth_btc_price, sizeof(__pyx_k_eth_btc_price), 0, 0, 1, 1},
  {&__pyx_n_s_event_type, __pyx_k_event_type, sizeof(__pyx_k_event_type), 0, 0, 1, 1},
  {&__pyx_n_u_event_type, __pyx_k_event_type, sizeof(__pyx_k_event_type), 0, 1, 0, 1},
  {&__pyx_n_s_exc_info, __pyx_k_exc_info, sizeof(__pyx_k_exc_info), 0, 0, 1, 1},
  {&__pyx_n_s_exchange_order_id, __pyx_k_exchange_order_id, sizeof(__pyx_k_exchange_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_execute_buy, __pyx_k_execute_buy, sizeof(__pyx_k_execute_buy), 0, 0, 1, 1},
  {&__pyx_n_s_execute_cancel, __pyx_k_execute_cancel, sizeof(__pyx_k_execute_cancel), 0, 0, 1, 1},
  {&__pyx_n_s_execute_price, __pyx_k_execute_price, sizeof(__pyx_k_execute_price), 0, 0, 1, 1},
  {&__pyx_n_s_execute_sell, __pyx_k_execute_sell, sizeof(__pyx_k_execute_sell), 0, 0, 1, 1},
  {&__pyx_n_s_executed_amount_base, __pyx_k_executed_amount_base, sizeof(__pyx_k_executed_amount_base), 0, 0, 1, 1},
  {&__pyx_n_s_executed_amount_diff, __pyx_k_executed_amount_diff, sizeof(__pyx_k_executed_amount_diff), 0, 0, 1, 1},
  {&__pyx_n_s_executed_amount_quote, __pyx_k_executed_amount_quote, sizeof(__pyx_k_executed_amount_quote), 0, 0, 1, 1},
  {&__pyx_n_s_executed_price, __pyx_k_executed_price, sizeof(__pyx_k_executed_price), 0, 0, 1, 1},
  {&__pyx_n_u_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 1, 0, 1},
  {&__pyx_n_s_failed_cancellation, __pyx_k_failed_cancellation, sizeof(__pyx_k_failed_cancellation), 0, 0, 1, 1},
  {&__pyx_n_s_fee_asset, __pyx_k_fee_asset, sizeof(__pyx_k_fee_asset), 0, 0, 1, 1},
  {&__pyx_n_s_fee_paid, __pyx_k_fee_paid, sizeof(__pyx_k_fee_paid), 0, 0, 1, 1},
  {&__pyx_n_u_fillQuantity, __pyx_k_fillQuantity, sizeof(__pyx_k_fillQuantity), 0, 1, 0, 1},
  {&__pyx_n_s_float, __pyx_k_float, sizeof(__pyx_k_float), 0, 0, 1, 1},
  {&__pyx_kp_u_for, __pyx_k_for, sizeof(__pyx_k_for), 0, 1, 0, 0},
  {&__pyx_n_s_format_trading_rules, __pyx_k_format_trading_rules, sizeof(__pyx_k_format_trading_rules), 0, 0, 1, 1},
  {&__pyx_n_s_from_json, __pyx_k_from_json, sizeof(__pyx_k_from_json), 0, 0, 1, 1},
  {&__pyx_kp_u_gc, __pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0, 0},
  {&__pyx_n_s_generate_auth_dict, __pyx_k_generate_auth_dict, sizeof(__pyx_k_generate_auth_dict), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get, __pyx_k_get, sizeof(__pyx_k_get), 0, 0, 1, 1},
  {&__pyx_n_s_getLogger, __pyx_k_getLogger, sizeof(__pyx_k_getLogger), 0, 0, 1, 1},
  {&__pyx_n_s_get_active_exchange_markets, __pyx_k_get_active_exchange_markets, sizeof(__pyx_k_get_active_exchange_markets), 0, 0, 1, 1},
  {&__pyx_n_s_get_event_loop, __pyx_k_get_event_loop, sizeof(__pyx_k_get_event_loop), 0, 0, 1, 1},
  {&__pyx_n_s_get_exchange_order_id, __pyx_k_get_exchange_order_id, sizeof(__pyx_k_get_exchange_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_get_fee, __pyx_k_get_fee, sizeof(__pyx_k_get_fee), 0, 0, 1, 1},
  {&__pyx_n_s_get_order_book, __pyx_k_get_order_book, sizeof(__pyx_k_get_order_book), 0, 0, 1, 1},
  {&__pyx_n_s_get_price, __pyx_k_get_price, sizeof(__pyx_k_get_price), 0, 0, 1, 1},
  {&__pyx_n_s_get_tracking_nonce, __pyx_k_get_tracking_nonce, sizeof(__pyx_k_get_tracking_nonce), 0, 0, 1, 1},
  {&__pyx_n_s_getstate, __pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 0, 1, 1},
  {&__pyx_kp_u_has_been_cancelled_according_to, __pyx_k_has_been_cancelled_according_to, sizeof(__pyx_k_has_been_cancelled_according_to), 0, 1, 0, 0},
  {&__pyx_kp_u_has_been_cancelled_according_to_2, __pyx_k_has_been_cancelled_according_to_2, sizeof(__pyx_k_has_been_cancelled_according_to_2), 0, 1, 0, 0},
  {&__pyx_kp_u_has_completed_according_to_Bitt, __pyx_k_has_completed_according_to_Bitt, sizeof(__pyx_k_has_completed_according_to_Bitt), 0, 1, 0, 0},
  {&__pyx_kp_u_has_completed_according_to_Orde, __pyx_k_has_completed_according_to_Orde, sizeof(__pyx_k_has_completed_according_to_Orde), 0, 1, 0, 0},
  {&__pyx_kp_u_has_completed_according_to_orde, __pyx_k_has_completed_according_to_orde, sizeof(__pyx_k_has_completed_according_to_orde), 0, 1, 0, 0},
  {&__pyx_n_s_headers, __pyx_k_headers, sizeof(__pyx_k_headers), 0, 0, 1, 1},
  {&__pyx_n_u_headers, __pyx_k_headers, sizeof(__pyx_k_headers), 0, 1, 0, 1},
  {&__pyx_n_s_http_client, __pyx_k_http_client, sizeof(__pyx_k_http_client), 0, 0, 1, 1},
  {&__pyx_n_s_http_method, __pyx_k_http_method, sizeof(__pyx_k_http_method), 0, 0, 1, 1},
  {&__pyx_kp_u_https_api_bittrex_com_v3, __pyx_k_https_api_bittrex_com_v3, sizeof(__pyx_k_https_api_bittrex_com_v3), 0, 1, 0, 0},
  {&__pyx_n_s_hummingbot_connector_exchange_ba, __pyx_k_hummingbot_connector_exchange_ba, sizeof(__pyx_k_hummingbot_connector_exchange_ba), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_bi, __pyx_k_hummingbot_connector_exchange_bi, sizeof(__pyx_k_hummingbot_connector_exchange_bi), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_bi_2, __pyx_k_hummingbot_connector_exchange_bi_2, sizeof(__pyx_k_hummingbot_connector_exchange_bi_2), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_bi_3, __pyx_k_hummingbot_connector_exchange_bi_3, sizeof(__pyx_k_hummingbot_connector_exchange_bi_3), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_bi_4, __pyx_k_hummingbot_connector_exchange_bi_4, sizeof(__pyx_k_hummingbot_connector_exchange_bi_4), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_bi_5, __pyx_k_hummingbot_connector_exchange_bi_5, sizeof(__pyx_k_hummingbot_connector_exchange_bi_5), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_connector_exchange_bi_6, __pyx_k_hummingbot_connector_exchange_bi_6, sizeof(__pyx_k_hummingbot_connector_exchange_bi_6), 0, 0, 1, 1},
  {&__pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_k_hummingbot_connector_exchange_bi_7, sizeof(__pyx_k_hummingbot_connector_exchange_bi_7), 0, 0, 1, 0},
  {&__pyx_n_s_hummingbot_core_data_type_cancel, __pyx_k_hummingbot_core_data_type_cancel, sizeof(__pyx_k_hummingbot_core_data_type_cancel), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_data_type_limit, __pyx_k_hummingbot_core_data_type_limit, sizeof(__pyx_k_hummingbot_core_data_type_limit), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_event_events, __pyx_k_hummingbot_core_event_events, sizeof(__pyx_k_hummingbot_core_event_events), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_network_iterator, __pyx_k_hummingbot_core_network_iterator, sizeof(__pyx_k_hummingbot_core_network_iterator), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_utils_async_util, __pyx_k_hummingbot_core_utils_async_util, sizeof(__pyx_k_hummingbot_core_utils_async_util), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_utils_estimate_f, __pyx_k_hummingbot_core_utils_estimate_f, sizeof(__pyx_k_hummingbot_core_utils_estimate_f), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_core_utils_tracking_n, __pyx_k_hummingbot_core_utils_tracking_n, sizeof(__pyx_k_hummingbot_core_utils_tracking_n), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_logger, __pyx_k_hummingbot_logger, sizeof(__pyx_k_hummingbot_logger), 0, 0, 1, 1},
  {&__pyx_n_s_hummingbot_market_market_base, __pyx_k_hummingbot_market_market_base, sizeof(__pyx_k_hummingbot_market_market_base), 0, 0, 1, 1},
  {&__pyx_n_u_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 1, 0, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_incomplete_orders, __pyx_k_incomplete_orders, sizeof(__pyx_k_incomplete_orders), 0, 0, 1, 1},
  {&__pyx_n_s_info, __pyx_k_info, sizeof(__pyx_k_info), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_initializing, __pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 0, 1, 1},
  {&__pyx_n_s_inspect, __pyx_k_inspect, sizeof(__pyx_k_inspect), 0, 0, 1, 1},
  {&__pyx_n_s_is_buy, __pyx_k_is_buy, sizeof(__pyx_k_is_buy), 0, 0, 1, 1},
  {&__pyx_n_s_is_coroutine, __pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 0, 1, 1},
  {&__pyx_n_s_is_done, __pyx_k_is_done, sizeof(__pyx_k_is_done), 0, 0, 1, 1},
  {&__pyx_kp_u_is_lower_than_the_minimum_order, __pyx_k_is_lower_than_the_minimum_order, sizeof(__pyx_k_is_lower_than_the_minimum_order), 0, 1, 0, 0},
  {&__pyx_kp_u_is_not_tracked, __pyx_k_is_not_tracked, sizeof(__pyx_k_is_not_tracked), 0, 1, 0, 0},
  {&__pyx_n_s_is_set, __pyx_k_is_set, sizeof(__pyx_k_is_set), 0, 0, 1, 1},
  {&__pyx_kp_u_isenabled, __pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0, 0},
  {&__pyx_n_s_item, __pyx_k_item, sizeof(__pyx_k_item), 0, 0, 1, 1},
  {&__pyx_n_s_items, __pyx_k_items, sizeof(__pyx_k_items), 0, 0, 1, 1},
  {&__pyx_n_s_iter_user_stream_queue, __pyx_k_iter_user_stream_queue, sizeof(__pyx_k_iter_user_stream_queue), 0, 0, 1, 1},
  {&__pyx_n_s_json, __pyx_k_json, sizeof(__pyx_k_json), 0, 0, 1, 1},
  {&__pyx_n_s_key, __pyx_k_key, sizeof(__pyx_k_key), 0, 0, 1, 1},
  {&__pyx_n_s_keys, __pyx_k_keys, sizeof(__pyx_k_keys), 0, 0, 1, 1},
  {&__pyx_n_s_kwargs, __pyx_k_kwargs, sizeof(__pyx_k_kwargs), 0, 0, 1, 1},
  {&__pyx_n_u_lastTradeRate, __pyx_k_lastTradeRate, sizeof(__pyx_k_lastTradeRate), 0, 1, 0, 1},
  {&__pyx_n_s_last_state, __pyx_k_last_state, sizeof(__pyx_k_last_state), 0, 0, 1, 1},
  {&__pyx_n_s_last_tick, __pyx_k_last_tick, sizeof(__pyx_k_last_tick), 0, 0, 1, 1},
  {&__pyx_n_s_last_trade_rate, __pyx_k_last_trade_rate, sizeof(__pyx_k_last_trade_rate), 0, 0, 1, 1},
  {&__pyx_n_u_limit, __pyx_k_limit, sizeof(__pyx_k_limit), 0, 1, 0, 1},
  {&__pyx_n_s_list_orders, __pyx_k_list_orders, sizeof(__pyx_k_list_orders), 0, 0, 1, 1},
  {&__pyx_n_s_local_asset_names, __pyx_k_local_asset_names, sizeof(__pyx_k_local_asset_names), 0, 0, 1, 1},
  {&__pyx_n_s_logger, __pyx_k_logger, sizeof(__pyx_k_logger), 0, 0, 1, 1},
  {&__pyx_n_s_logging, __pyx_k_logging, sizeof(__pyx_k_logging), 0, 0, 1, 1},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_market, __pyx_k_market, sizeof(__pyx_k_market), 0, 0, 1, 1},
  {&__pyx_n_u_marketSymbol, __pyx_k_marketSymbol, sizeof(__pyx_k_marketSymbol), 0, 1, 0, 1},
  {&__pyx_n_s_market_dict, __pyx_k_market_dict, sizeof(__pyx_k_market_dict), 0, 0, 1, 1},
  {&__pyx_n_s_market_list, __pyx_k_market_list, sizeof(__pyx_k_market_list), 0, 0, 1, 1},
  {&__pyx_n_s_market_path_url, __pyx_k_market_path_url, sizeof(__pyx_k_market_path_url), 0, 0, 1, 1},
  {&__pyx_kp_u_markets, __pyx_k_markets, sizeof(__pyx_k_markets), 0, 1, 0, 0},
  {&__pyx_kp_u_markets_tickers, __pyx_k_markets_tickers, sizeof(__pyx_k_markets_tickers), 0, 1, 0, 0},
  {&__pyx_n_u_minTradeSize, __pyx_k_minTradeSize, sizeof(__pyx_k_minTradeSize), 0, 1, 0, 1},
  {&__pyx_n_s_min_base_amount_increment, __pyx_k_min_base_amount_increment, sizeof(__pyx_k_min_base_amount_increment), 0, 0, 1, 1},
  {&__pyx_n_s_min_btc_value, __pyx_k_min_btc_value, sizeof(__pyx_k_min_btc_value), 0, 0, 1, 1},
  {&__pyx_n_s_min_order_size, __pyx_k_min_order_size, sizeof(__pyx_k_min_order_size), 0, 0, 1, 1},
  {&__pyx_n_s_min_order_value, __pyx_k_min_order_value, sizeof(__pyx_k_min_order_value), 0, 0, 1, 1},
  {&__pyx_n_s_min_price_increment, __pyx_k_min_price_increment, sizeof(__pyx_k_min_price_increment), 0, 0, 1, 1},
  {&__pyx_n_s_min_quote_amount_increment, __pyx_k_min_quote_amount_increment, sizeof(__pyx_k_min_quote_amount_increment), 0, 0, 1, 1},
  {&__pyx_n_s_min_trade_size, __pyx_k_min_trade_size, sizeof(__pyx_k_min_trade_size), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 1},
  {&__pyx_n_s_network, __pyx_k_network, sizeof(__pyx_k_network), 0, 0, 1, 1},
  {&__pyx_n_s_new_confirmed_amount, __pyx_k_new_confirmed_amount, sizeof(__pyx_k_new_confirmed_amount), 0, 0, 1, 1},
  {&__pyx_kp_u_numpy_core_multiarray_failed_to, __pyx_k_numpy_core_multiarray_failed_to, sizeof(__pyx_k_numpy_core_multiarray_failed_to), 0, 1, 0, 0},
  {&__pyx_kp_u_numpy_core_umath_failed_to_impor, __pyx_k_numpy_core_umath_failed_to_impor, sizeof(__pyx_k_numpy_core_umath_failed_to_impor), 0, 1, 0, 0},
  {&__pyx_n_s_o, __pyx_k_o, sizeof(__pyx_k_o), 0, 0, 1, 1},
  {&__pyx_kp_u_of_the, __pyx_k_of_the, sizeof(__pyx_k_of_the), 0, 1, 0, 0},
  {&__pyx_n_s_oid, __pyx_k_oid, sizeof(__pyx_k_oid), 0, 0, 1, 1},
  {&__pyx_kp_u_on_Bittrex_Check_API_key_and_ne, __pyx_k_on_Bittrex_Check_API_key_and_ne, sizeof(__pyx_k_on_Bittrex_Check_API_key_and_ne), 0, 1, 0, 0},
  {&__pyx_kp_u_on_order_status_update_Order_no, __pyx_k_on_order_status_update_Order_no, sizeof(__pyx_k_on_order_status_update_Order_no), 0, 1, 0, 0},
  {&__pyx_n_s_open_orders, __pyx_k_open_orders, sizeof(__pyx_k_open_orders), 0, 0, 1, 1},
  {&__pyx_kp_u_order, __pyx_k_order, sizeof(__pyx_k_order), 0, 1, 0, 0},
  {&__pyx_n_s_order_2, __pyx_k_order_2, sizeof(__pyx_k_order_2), 0, 0, 1, 1},
  {&__pyx_n_u_order_2, __pyx_k_order_2, sizeof(__pyx_k_order_2), 0, 1, 0, 1},
  {&__pyx_n_u_order_book_initialized, __pyx_k_order_book_initialized, sizeof(__pyx_k_order_book_initialized), 0, 1, 0, 1},
  {&__pyx_n_s_order_books, __pyx_k_order_books, sizeof(__pyx_k_order_books), 0, 0, 1, 1},
  {&__pyx_n_s_order_id, __pyx_k_order_id, sizeof(__pyx_k_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_order_id_set, __pyx_k_order_id_set, sizeof(__pyx_k_order_id_set), 0, 0, 1, 1},
  {&__pyx_n_s_order_result, __pyx_k_order_result, sizeof(__pyx_k_order_result), 0, 0, 1, 1},
  {&__pyx_n_s_order_side, __pyx_k_order_side, sizeof(__pyx_k_order_side), 0, 0, 1, 1},
  {&__pyx_n_s_order_state, __pyx_k_order_state, sizeof(__pyx_k_order_state), 0, 0, 1, 1},
  {&__pyx_n_s_order_status, __pyx_k_order_status, sizeof(__pyx_k_order_status), 0, 0, 1, 1},
  {&__pyx_kp_u_order_to_Bittrex_for, __pyx_k_order_to_Bittrex_for, sizeof(__pyx_k_order_to_Bittrex_for), 0, 1, 0, 0},
  {&__pyx_n_s_order_type, __pyx_k_order_type, sizeof(__pyx_k_order_type), 0, 0, 1, 1},
  {&__pyx_n_s_order_type_description, __pyx_k_order_type_description, sizeof(__pyx_k_order_type_description), 0, 0, 1, 1},
  {&__pyx_n_s_order_type_str, __pyx_k_order_type_str, sizeof(__pyx_k_order_type_str), 0, 0, 1, 1},
  {&__pyx_kp_u_orders, __pyx_k_orders, sizeof(__pyx_k_orders), 0, 1, 0, 0},
  {&__pyx_kp_u_orders_2, __pyx_k_orders_2, sizeof(__pyx_k_orders_2), 0, 1, 0, 0},
  {&__pyx_kp_u_orders_open, __pyx_k_orders_open, sizeof(__pyx_k_orders_open), 0, 1, 0, 0},
  {&__pyx_kp_u_out_of, __pyx_k_out_of, sizeof(__pyx_k_out_of), 0, 1, 0, 0},
  {&__pyx_n_s_owner, __pyx_k_owner, sizeof(__pyx_k_owner), 0, 0, 1, 1},
  {&__pyx_n_s_pandas, __pyx_k_pandas, sizeof(__pyx_k_pandas), 0, 0, 1, 1},
  {&__pyx_n_s_params, __pyx_k_params, sizeof(__pyx_k_params), 0, 0, 1, 1},
  {&__pyx_n_s_path_url, __pyx_k_path_url, sizeof(__pyx_k_path_url), 0, 0, 1, 1},
  {&__pyx_n_s_pd, __pyx_k_pd, sizeof(__pyx_k_pd), 0, 0, 1, 1},
  {&__pyx_kp_s_pd_DataFrame, __pyx_k_pd_DataFrame, sizeof(__pyx_k_pd_DataFrame), 0, 0, 1, 0},
  {&__pyx_kp_u_ping, __pyx_k_ping, sizeof(__pyx_k_ping), 0, 1, 0, 0},
  {&__pyx_n_s_place_order, __pyx_k_place_order, sizeof(__pyx_k_place_order), 0, 0, 1, 1},
  {&__pyx_n_s_poll_interval, __pyx_k_poll_interval, sizeof(__pyx_k_poll_interval), 0, 0, 1, 1},
  {&__pyx_n_s_precision, __pyx_k_precision, sizeof(__pyx_k_precision), 0, 0, 1, 1},
  {&__pyx_n_u_precision, __pyx_k_precision, sizeof(__pyx_k_precision), 0, 1, 0, 1},
  {&__pyx_n_s_price, __pyx_k_price, sizeof(__pyx_k_price), 0, 0, 1, 1},
  {&__pyx_n_s_process_api_closed, __pyx_k_process_api_closed, sizeof(__pyx_k_process_api_closed), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_state, __pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_u_quantity, __pyx_k_quantity, sizeof(__pyx_k_quantity), 0, 1, 0, 1},
  {&__pyx_n_u_quoteCurrencySymbol, __pyx_k_quoteCurrencySymbol, sizeof(__pyx_k_quoteCurrencySymbol), 0, 1, 0, 1},
  {&__pyx_n_s_quote_amount, __pyx_k_quote_amount, sizeof(__pyx_k_quote_amount), 0, 0, 1, 1},
  {&__pyx_n_s_quote_asset, __pyx_k_quote_asset, sizeof(__pyx_k_quote_asset), 0, 0, 1, 1},
  {&__pyx_n_s_quote_currency, __pyx_k_quote_currency, sizeof(__pyx_k_quote_currency), 0, 0, 1, 1},
  {&__pyx_n_s_ready, __pyx_k_ready, sizeof(__pyx_k_ready), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_cython, __pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 0, 1, 1},
  {&__pyx_n_s_reduce_ex, __pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 0, 1, 1},
  {&__pyx_n_s_remaining_size, __pyx_k_remaining_size, sizeof(__pyx_k_remaining_size), 0, 0, 1, 1},
  {&__pyx_n_s_remote_asset_names, __pyx_k_remote_asset_names, sizeof(__pyx_k_remote_asset_names), 0, 0, 1, 1},
  {&__pyx_n_s_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
  {&__pyx_n_s_request, __pyx_k_request, sizeof(__pyx_k_request), 0, 0, 1, 1},
  {&__pyx_n_s_response, __pyx_k_response, sizeof(__pyx_k_response), 0, 0, 1, 1},
  {&__pyx_n_s_restore_tracking_states, __pyx_k_restore_tracking_states, sizeof(__pyx_k_restore_tracking_states), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_result_list, __pyx_k_result_list, sizeof(__pyx_k_result_list), 0, 0, 1, 1},
  {&__pyx_n_s_return, __pyx_k_return, sizeof(__pyx_k_return), 0, 0, 1, 1},
  {&__pyx_n_s_return_exceptions, __pyx_k_return_exceptions, sizeof(__pyx_k_return_exceptions), 0, 0, 1, 1},
  {&__pyx_n_s_retval, __pyx_k_retval, sizeof(__pyx_k_retval), 0, 0, 1, 1},
  {&__pyx_n_s_s_decimal_0, __pyx_k_s_decimal_0, sizeof(__pyx_k_s_decimal_0), 0, 0, 1, 1},
  {&__pyx_n_s_s_decimal_NaN, __pyx_k_s_decimal_NaN, sizeof(__pyx_k_s_decimal_NaN), 0, 0, 1, 1},
  {&__pyx_n_s_safe_ensure_future, __pyx_k_safe_ensure_future, sizeof(__pyx_k_safe_ensure_future), 0, 0, 1, 1},
  {&__pyx_n_s_safe_gather, __pyx_k_safe_gather, sizeof(__pyx_k_safe_gather), 0, 0, 1, 1},
  {&__pyx_n_s_saved_states, __pyx_k_saved_states, sizeof(__pyx_k_saved_states), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_kp_s_self__events_cannot_be_converted, __pyx_k_self__events_cannot_be_converted, sizeof(__pyx_k_self__events_cannot_be_converted), 0, 0, 1, 0},
  {&__pyx_kp_u_sell, __pyx_k_sell, sizeof(__pyx_k_sell), 0, 1, 0, 0},
  {&__pyx_n_s_sell_2, __pyx_k_sell_2, sizeof(__pyx_k_sell_2), 0, 0, 1, 1},
  {&__pyx_kp_u_sell_order, __pyx_k_sell_order, sizeof(__pyx_k_sell_order), 0, 1, 0, 0},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_set, __pyx_k_set, sizeof(__pyx_k_set), 0, 0, 1, 1},
  {&__pyx_n_s_setstate, __pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 0, 1, 1},
  {&__pyx_n_s_setstate_cython, __pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 0, 1, 1},
  {&__pyx_n_s_sleep, __pyx_k_sleep, sizeof(__pyx_k_sleep), 0, 0, 1, 1},
  {&__pyx_n_s_spec, __pyx_k_spec, sizeof(__pyx_k_spec), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_start_network, __pyx_k_start_network, sizeof(__pyx_k_start_network), 0, 0, 1, 1},
  {&__pyx_n_s_start_tracking_order, __pyx_k_start_tracking_order, sizeof(__pyx_k_start_tracking_order), 0, 0, 1, 1},
  {&__pyx_n_s_state_result, __pyx_k_state_result, sizeof(__pyx_k_state_result), 0, 0, 1, 1},
  {&__pyx_n_s_status, __pyx_k_status, sizeof(__pyx_k_status), 0, 0, 1, 1},
  {&__pyx_n_u_status, __pyx_k_status, sizeof(__pyx_k_status), 0, 1, 0, 1},
  {&__pyx_n_s_status_dict, __pyx_k_status_dict, sizeof(__pyx_k_status_dict), 0, 0, 1, 1},
  {&__pyx_n_s_status_polling_loop, __pyx_k_status_polling_loop, sizeof(__pyx_k_status_polling_loop), 0, 0, 1, 1},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_s_stop_network, __pyx_k_stop_network, sizeof(__pyx_k_stop_network), 0, 0, 1, 1},
  {&__pyx_n_s_stop_network_2, __pyx_k_stop_network_2, sizeof(__pyx_k_stop_network_2), 0, 0, 1, 1},
  {&__pyx_n_s_str, __pyx_k_str, sizeof(__pyx_k_str), 0, 0, 1, 1},
  {&__pyx_n_s_stream_message, __pyx_k_stream_message, sizeof(__pyx_k_stream_message), 0, 0, 1, 1},
  {&__pyx_kp_s_stringsource, __pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 0, 1, 0},
  {&__pyx_n_s_subaccount_id, __pyx_k_subaccount_id, sizeof(__pyx_k_subaccount_id), 0, 0, 1, 1},
  {&__pyx_n_s_successful_cancellation, __pyx_k_successful_cancellation, sizeof(__pyx_k_successful_cancellation), 0, 0, 1, 1},
  {&__pyx_n_s_super, __pyx_k_super, sizeof(__pyx_k_super), 0, 0, 1, 1},
  {&__pyx_n_s_supported_order_types, __pyx_k_supported_order_types, sizeof(__pyx_k_supported_order_types), 0, 0, 1, 1},
  {&__pyx_n_u_symbol, __pyx_k_symbol, sizeof(__pyx_k_symbol), 0, 1, 0, 1},
  {&__pyx_n_s_tasks, __pyx_k_tasks, sizeof(__pyx_k_tasks), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_ticker_data, __pyx_k_ticker_data, sizeof(__pyx_k_ticker_data), 0, 0, 1, 1},
  {&__pyx_n_s_ticker_list, __pyx_k_ticker_list, sizeof(__pyx_k_ticker_list), 0, 0, 1, 1},
  {&__pyx_n_s_ticker_path_url, __pyx_k_ticker_path_url, sizeof(__pyx_k_ticker_path_url), 0, 0, 1, 1},
  {&__pyx_n_u_timeInForce, __pyx_k_timeInForce, sizeof(__pyx_k_timeInForce), 0, 1, 0, 1},
  {&__pyx_n_s_timeout, __pyx_k_timeout, sizeof(__pyx_k_timeout), 0, 0, 1, 1},
  {&__pyx_n_s_timeout_seconds, __pyx_k_timeout_seconds, sizeof(__pyx_k_timeout_seconds), 0, 0, 1, 1},
  {&__pyx_n_s_to_json, __pyx_k_to_json, sizeof(__pyx_k_to_json), 0, 0, 1, 1},
  {&__pyx_n_s_to_limit_order, __pyx_k_to_limit_order, sizeof(__pyx_k_to_limit_order), 0, 0, 1, 1},
  {&__pyx_n_u_total, __pyx_k_total, sizeof(__pyx_k_total), 0, 1, 0, 1},
  {&__pyx_n_s_total_balance, __pyx_k_total_balance, sizeof(__pyx_k_total_balance), 0, 0, 1, 1},
  {&__pyx_n_s_tracked_order, __pyx_k_tracked_order, sizeof(__pyx_k_tracked_order), 0, 0, 1, 1},
  {&__pyx_n_s_tracked_orders, __pyx_k_tracked_orders, sizeof(__pyx_k_tracked_orders), 0, 0, 1, 1},
  {&__pyx_n_s_trade_type, __pyx_k_trade_type, sizeof(__pyx_k_trade_type), 0, 0, 1, 1},
  {&__pyx_n_s_trading_pair, __pyx_k_trading_pair, sizeof(__pyx_k_trading_pair), 0, 0, 1, 1},
  {&__pyx_n_s_trading_pairs, __pyx_k_trading_pairs, sizeof(__pyx_k_trading_pairs), 0, 0, 1, 1},
  {&__pyx_n_s_trading_required, __pyx_k_trading_required, sizeof(__pyx_k_trading_required), 0, 0, 1, 1},
  {&__pyx_n_s_trading_rule, __pyx_k_trading_rule, sizeof(__pyx_k_trading_rule), 0, 0, 1, 1},
  {&__pyx_n_u_trading_rule_initialized, __pyx_k_trading_rule_initialized, sizeof(__pyx_k_trading_rule_initialized), 0, 1, 0, 1},
  {&__pyx_n_s_trading_rules_list, __pyx_k_trading_rules_list, sizeof(__pyx_k_trading_rules_list), 0, 0, 1, 1},
  {&__pyx_n_s_trading_rules_polling_loop, __pyx_k_trading_rules_polling_loop, sizeof(__pyx_k_trading_rules_polling_loop), 0, 0, 1, 1},
  {&__pyx_n_u_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 1, 0, 1},
  {&__pyx_n_s_typing, __pyx_k_typing, sizeof(__pyx_k_typing), 0, 0, 1, 1},
  {&__pyx_n_s_update, __pyx_k_update, sizeof(__pyx_k_update), 0, 0, 1, 1},
  {&__pyx_n_s_update_balances, __pyx_k_update_balances, sizeof(__pyx_k_update_balances), 0, 0, 1, 1},
  {&__pyx_n_s_update_exchange_order_id, __pyx_k_update_exchange_order_id, sizeof(__pyx_k_update_exchange_order_id), 0, 0, 1, 1},
  {&__pyx_n_s_update_order_status, __pyx_k_update_order_status, sizeof(__pyx_k_update_order_status), 0, 0, 1, 1},
  {&__pyx_n_s_update_order_status_locals_gene, __pyx_k_update_order_status_locals_gene, sizeof(__pyx_k_update_order_status_locals_gene), 0, 0, 1, 1},
  {&__pyx_n_s_update_trading_rules, __pyx_k_update_trading_rules, sizeof(__pyx_k_update_trading_rules), 0, 0, 1, 1},
  {&__pyx_n_s_url, __pyx_k_url, sizeof(__pyx_k_url), 0, 0, 1, 1},
  {&__pyx_n_s_user_stream, __pyx_k_user_stream, sizeof(__pyx_k_user_stream), 0, 0, 1, 1},
  {&__pyx_n_s_user_stream_event_listener, __pyx_k_user_stream_event_listener, sizeof(__pyx_k_user_stream_event_listener), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_n_s_values, __pyx_k_values, sizeof(__pyx_k_values), 0, 0, 1, 1},
  {&__pyx_n_s_wait, __pyx_k_wait, sizeof(__pyx_k_wait), 0, 0, 1, 1},
  {&__pyx_n_s_warning, __pyx_k_warning, sizeof(__pyx_k_warning), 0, 0, 1, 1},
  {&__pyx_kp_u_which_is_already_closed_Order_d, __pyx_k_which_is_already_closed_Order_d, sizeof(__pyx_k_which_is_already_closed_Order_d), 0, 1, 0, 0},
  {&__pyx_kp_u_ws, __pyx_k_ws, sizeof(__pyx_k_ws), 0, 1, 0, 0},
  #endif
  {0, 0, 0, 0, 0, 0, 0}
};
/* #### Code section: cached_builtins ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_super = __Pyx_GetBuiltinName(__pyx_n_s_super); if (!__pyx_builtin_super) __PYX_ERR(0, 47, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_all = __Pyx_GetBuiltinName(__pyx_n_s_all); if (!__pyx_builtin_all) __PYX_ERR(0, 131, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 642, __pyx_L1_error)
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_n_s_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(0, 1014, __pyx_L1_error)
  __pyx_builtin_IOError = __Pyx_GetBuiltinName(__pyx_n_s_IOError); if (!__pyx_builtin_IOError) __PYX_ERR(0, 1035, __pyx_L1_error)
  __pyx_builtin_ImportError = __Pyx_GetBuiltinName(__pyx_n_s_ImportError); if (!__pyx_builtin_ImportError) __PYX_ERR(2, 989, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":209
 * 
 *         path_url = "/balances"
 *         account_balances = await self._api_request("GET", path_url=path_url)             # <<<<<<<<<<<<<<
 * 
 *         for balance_entry in account_balances:
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_n_u_GET); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(0, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":284
 *             # I think this will be rectified by Bittrex soon.
 *             for item in ticker_list:
 *                 item["symbol"] = item["symbol"].replace("CGLD-", "CELO-")             # <<<<<<<<<<<<<<
 *             ticker_data = {item["symbol"]: item for item in ticker_list}
 * 
 */
  __pyx_tuple__6 = PyTuple_Pack(2, __pyx_kp_u_CGLD, __pyx_kp_u_CELO); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(0, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":485
 *                 raise
 *             except Exception:
 *                 self.logger().error("Unknown error. Retrying after 1 second.", exc_info=True)             # <<<<<<<<<<<<<<
 *                 await asyncio.sleep(1.0)
 * 
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_u_Unknown_error_Retrying_after_1_s); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(0, 485, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":600
 *                 raise
 *             except Exception:
 *                 self.logger().error("Unexpected error in user stream listener loop.", exc_info=True)             # <<<<<<<<<<<<<<
 *                 await asyncio.sleep(5.0)
 * 
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_u_Unexpected_error_in_user_stream); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(0, 600, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":617
 *                 raise
 *             except Exception:
 *                 self.logger().network("Unexpected error while polling updates.",             # <<<<<<<<<<<<<<
 *                                       exc_info=True,
 *                                       app_warning_msg=f"Could not fetch updates from Bittrex. "
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_u_Unexpected_error_while_polling_u); if (unlikely(!__pyx_tuple__18)) __PYX_ERR(0, 617, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":631
 *                 raise
 *             except Exception:
 *                 self.logger().network("Unexpected error while fetching trading rule updates.",             # <<<<<<<<<<<<<<
 *                                       exc_info=True,
 *                                       app_warning_msg=f"Could not fetch updates from Bitrrex. "
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_u_Unexpected_error_while_fetching); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(0, 631, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":740
 *                 "timeInForce": "POST_ONLY_GOOD_TIL_CANCELLED"
 *             }
 *         api_response = await self._api_request("POST", path_url=path_url, body=body)             # <<<<<<<<<<<<<<
 *         return api_response
 * 
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_n_u_POST); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":941
 *             path_url = f"/orders/{tracked_order.exchange_order_id}"
 * 
 *             cancel_result = await self._api_request("DELETE", path_url=path_url)             # <<<<<<<<<<<<<<
 *             if cancel_result["status"] == "CLOSED":
 *                 self.logger().info(f"Successfully cancelled order {order_id}.")
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_n_u_DELETE); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(0, 941, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":988
 * 
 *         try:
 *             async with timeout(timeout_seconds):             # <<<<<<<<<<<<<<
 *                 api_responses = await safe_gather(*tasks, return_exceptions=True)
 *                 for order_id in api_responses:
 */
  __pyx_tuple__35 = PyTuple_Pack(3, Py_None, Py_None, Py_None); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(0, 988, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":995
 *                         successful_cancellation.append(CancellationResult(order_id, True))
 *         except Exception:
 *             self.logger().network(             # <<<<<<<<<<<<<<
 *                 f"Unexpected error cancelling orders.",
 *                 app_warning_msg="Failed to cancel order on Bittrex. Check API key and network connection."
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_u_Unexpected_error_cancelling_orde); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(0, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":989
 *         __pyx_import_array()
 *     except Exception:
 *         raise ImportError("numpy.core.multiarray failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_umath() except -1:
 */
  __pyx_tuple__47 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_multiarray_failed_to); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(2, 989, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":995
 *         _import_umath()
 *     except Exception:
 *         raise ImportError("numpy.core.umath failed to import")             # <<<<<<<<<<<<<<
 * 
 * cdef inline int import_ufunc() except -1:
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_kp_u_numpy_core_umath_failed_to_impor); if (unlikely(!__pyx_tuple__48)) __PYX_ERR(2, 995, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":38
 * 
 * bm_logger = None
 * s_decimal_0 = Decimal(0)             # <<<<<<<<<<<<<<
 * s_decimal_NaN = Decimal("NaN")
 * 
 */
  __pyx_tuple__50 = PyTuple_Pack(1, __pyx_int_0); if (unlikely(!__pyx_tuple__50)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":39
 * bm_logger = None
 * s_decimal_0 = Decimal(0)
 * s_decimal_NaN = Decimal("NaN")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_n_u_NaN); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__52 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__52)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __pyx_tuple__54 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__54)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__54);
  __Pyx_GIVEREF(__pyx_tuple__54);
  __pyx_codeobj__55 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__54, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__55)) __PYX_ERR(1, 3, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":71
 *     BITTREX_API_ENDPOINT = "https://api.bittrex.com/v3"
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls) -> HummingbotLogger:
 *         global bm_logger
 */
  __pyx_tuple__56 = PyTuple_Pack(1, __pyx_n_s_cls); if (unlikely(!__pyx_tuple__56)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__56);
  __Pyx_GIVEREF(__pyx_tuple__56);
  __pyx_codeobj__57 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__56, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_logger, 71, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__57)) __PYX_ERR(0, 71, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":151
 *         return self._in_flight_orders
 * 
 *     def restore_tracking_states(self, saved_states: Dict[str, any]):             # <<<<<<<<<<<<<<
 *         self._in_flight_orders.update({
 *             key: BittrexInFlightOrder.from_json(value)
 */
  __pyx_tuple__58 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_saved_states, __pyx_n_s_key, __pyx_n_s_value); if (unlikely(!__pyx_tuple__58)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__58);
  __Pyx_GIVEREF(__pyx_tuple__58);
  __pyx_codeobj__59 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 4, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__58, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_restore_tracking_states, 151, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__59)) __PYX_ERR(0, 151, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":157
 *         })
 * 
 *     async def get_active_exchange_markets(self) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         return await BittrexAPIOrderBookDataSource.get_active_exchange_markets()
 * 
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);
  __pyx_codeobj__2 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__60, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_get_active_exchange_markets, 157, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__2)) __PYX_ERR(0, 157, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":199
 *         return estimate_fee("bittrex", is_maker)
 * 
 *     async def _update_balances(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             dict account_info
 */
  __pyx_tuple__61 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_account_info, __pyx_n_s_balances_2, __pyx_n_s_asset_name, __pyx_n_s_local_asset_names, __pyx_n_s_remote_asset_names, __pyx_n_s_asset_names_to_remove, __pyx_n_s_path_url, __pyx_n_s_account_balances, __pyx_n_s_balance_entry, __pyx_n_s_available_balance, __pyx_n_s_total_balance); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);
  __pyx_codeobj__3 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__61, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_update_balances, 199, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__3)) __PYX_ERR(0, 199, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":224
 *             del self._account_balances[asset_name]
 * 
 *     def _format_trading_rules(self, market_dict: Dict[str, Any]) -> List[TradingRule]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list retval = []
 */
  __pyx_tuple__62 = PyTuple_Pack(13, __pyx_n_s_self, __pyx_n_s_market_dict, __pyx_n_s_retval, __pyx_n_s_min_btc_value, __pyx_n_s_eth_btc_price, __pyx_n_s_btc_usd_price, __pyx_n_s_btc_usdt_price, __pyx_n_s_market, __pyx_n_s_trading_pair, __pyx_n_s_min_trade_size, __pyx_n_s_precision, __pyx_n_s_last_trade_rate, __pyx_n_s_min_order_value); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);
  __pyx_codeobj__63 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__62, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_format_trading_rules, 224, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__63)) __PYX_ERR(0, 224, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":269
 *         return retval
 * 
 *     async def _update_trading_rules(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             # The poll interval for withdraw rules is 60 seconds.
 */
  __pyx_tuple__64 = PyTuple_Pack(15, __pyx_n_s_self, __pyx_n_s_last_tick, __pyx_n_s_current_tick, __pyx_n_s_market_path_url, __pyx_n_s_ticker_path_url, __pyx_n_s_market_list, __pyx_n_s_ticker_list, __pyx_n_s_item, __pyx_n_s_ticker_data, __pyx_n_s_result_list, __pyx_n_s_trading_rules_list, __pyx_n_s_trading_rule, __pyx_n_s_item, __pyx_n_s_market, __pyx_n_s_market); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);
  __pyx_codeobj__5 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 15, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__64, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_update_trading_rules, 269, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__5)) __PYX_ERR(0, 269, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":300
 *                 self._trading_rules[trading_rule.trading_pair] = trading_rule
 * 
 *     async def list_orders(self) -> List[Any]:             # <<<<<<<<<<<<<<
 *         """
 *         Only a list of all currently open orders(does not include filled orders)
 */
  __pyx_tuple__65 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_path_url, __pyx_n_s_result); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);
  __pyx_codeobj__7 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__65, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_list_orders, 300, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__7)) __PYX_ERR(0, 300, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":334
 *         return result
 * 
 *     async def _update_order_status(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             # This is intended to be a backup measure to close straggler orders, in case Bittrex's user stream events
 */
  __pyx_tuple__66 = PyTuple_Pack(19, __pyx_n_s_self, __pyx_n_s_last_tick, __pyx_n_s_current_tick, __pyx_n_s_tracked_orders, __pyx_n_s_open_orders, __pyx_n_s_tracked_order, __pyx_n_s_exchange_order_id, __pyx_n_s_client_order_id, __pyx_n_s_order_2, __pyx_n_s_order_state, __pyx_n_s_order_type, __pyx_n_s_trade_type, __pyx_n_s_order_type_description, __pyx_n_s_executed_price, __pyx_n_s_executed_amount_diff, __pyx_n_s_remaining_size, __pyx_n_s_new_confirmed_amount, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__8 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 19, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_update_order_status, 334, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__8)) __PYX_ERR(0, 334, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":433
 *                     self._process_api_closed(order, tracked_order)
 * 
 *     def _process_api_closed(self, order: Dict, tracked_order: BittrexInFlightOrder):             # <<<<<<<<<<<<<<
 *         order_type = tracked_order.order_type
 *         trade_type = tracked_order.trade_type
 */
  __pyx_tuple__67 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_order_2, __pyx_n_s_tracked_order, __pyx_n_s_order_type, __pyx_n_s_trade_type, __pyx_n_s_client_order_id); if (unlikely(!__pyx_tuple__67)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__67);
  __Pyx_GIVEREF(__pyx_tuple__67);
  __pyx_codeobj__68 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__67, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_process_api_closed, 433, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__68)) __PYX_ERR(0, 433, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":478
 *         self.c_stop_tracking_order(client_order_id)
 * 
 *     async def _iter_user_stream_queue(self) -> AsyncIterable[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */
  __pyx_tuple__69 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__69)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__69);
  __Pyx_GIVEREF(__pyx_tuple__69);
  __pyx_codeobj__13 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__69, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_iter_user_stream_queue, 478, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__13)) __PYX_ERR(0, 478, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":488
 *                 await asyncio.sleep(1.0)
 * 
 *     async def _user_stream_event_listener(self):             # <<<<<<<<<<<<<<
 *         async for stream_message in self._iter_user_stream_queue():
 *             try:
 */
  __pyx_tuple__70 = PyTuple_Pack(19, __pyx_n_s_self, __pyx_n_s_stream_message, __pyx_n_s_content, __pyx_n_s_event_type, __pyx_n_s_balance_delta, __pyx_n_s_asset_name, __pyx_n_s_total_balance, __pyx_n_s_available_balance, __pyx_n_s_order_2, __pyx_n_s_order_status, __pyx_n_s_order_id, __pyx_n_s_tracked_order, __pyx_n_s_o, __pyx_n_s_exchange_order_id, __pyx_n_s_order_type_description, __pyx_n_s_execute_price, __pyx_n_s_executed_amount_diff, __pyx_n_s_remaining_size, __pyx_n_s_new_confirmed_amount); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__15 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 19, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_user_stream_event_listener, 488, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__15)) __PYX_ERR(0, 488, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":603
 *                 await asyncio.sleep(5.0)
 * 
 *     async def _status_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */
  __pyx_tuple__71 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__71)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__71);
  __Pyx_GIVEREF(__pyx_tuple__71);
  __pyx_codeobj__17 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__71, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_status_polling_loop, 603, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__17)) __PYX_ERR(0, 603, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":623
 *                 await asyncio.sleep(5.0)
 * 
 *     async def _trading_rules_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__19 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_trading_rules_polling_loop, 623, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__19)) __PYX_ERR(0, 623, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":645
 *         return order_books[trading_pair]
 * 
 *     def start_tracking_order(self,             # <<<<<<<<<<<<<<
 *                              order_id: str,
 *                              exchange_order_id: str,
 */
  __pyx_tuple__73 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_order_id, __pyx_n_s_exchange_order_id, __pyx_n_s_trading_pair, __pyx_n_s_order_type, __pyx_n_s_trade_type, __pyx_n_s_price, __pyx_n_s_amount); if (unlikely(!__pyx_tuple__73)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__73);
  __Pyx_GIVEREF(__pyx_tuple__73);
  __pyx_codeobj__74 = (PyObject*)__Pyx_PyCode_New(8, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__73, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_start_tracking_order, 645, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__74)) __PYX_ERR(0, 645, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":706
 *         return quantized_amount
 * 
 *     def supported_order_types(self):             # <<<<<<<<<<<<<<
 *         return [OrderType.LIMIT, OrderType.LIMIT_MAKER]
 * 
 */
  __pyx_tuple__75 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__75)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__75);
  __Pyx_GIVEREF(__pyx_tuple__75);
  __pyx_codeobj__76 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__75, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_supported_order_types, 706, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__76)) __PYX_ERR(0, 706, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":709
 *         return [OrderType.LIMIT, OrderType.LIMIT_MAKER]
 * 
 *     async def place_order(self,             # <<<<<<<<<<<<<<
 *                           order_id: str,
 *                           trading_pair: str,
 */
  __pyx_tuple__77 = PyTuple_Pack(10, __pyx_n_s_self, __pyx_n_s_order_id, __pyx_n_s_trading_pair, __pyx_n_s_amount, __pyx_n_s_is_buy, __pyx_n_s_order_type, __pyx_n_s_price, __pyx_n_s_path_url, __pyx_n_s_body, __pyx_n_s_api_response); if (unlikely(!__pyx_tuple__77)) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__77);
  __Pyx_GIVEREF(__pyx_tuple__77);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 10, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__77, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_place_order, 709, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) __PYX_ERR(0, 709, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":743
 *         return api_response
 * 
 *     async def execute_buy(self,             # <<<<<<<<<<<<<<
 *                           order_id: str,
 *                           trading_pair: str,
 */
  __pyx_tuple__78 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_order_id, __pyx_n_s_trading_pair, __pyx_n_s_amount, __pyx_n_s_order_type, __pyx_n_s_price, __pyx_n_s_trading_rule, __pyx_n_s_quote_amount, __pyx_n_s_decimal_amount, __pyx_n_s_decimal_price, __pyx_n_s_exchange_order_id, __pyx_n_s_tracked_order, __pyx_n_s_order_result, __pyx_n_s_order_type_str); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__25 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 14, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_execute_buy, 743, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__25)) __PYX_ERR(0, 743, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":839
 *         return order_id
 * 
 *     async def execute_sell(self,             # <<<<<<<<<<<<<<
 *                            order_id: str,
 *                            trading_pair: str,
 */
  __pyx_tuple__80 = PyTuple_Pack(14, __pyx_n_s_self, __pyx_n_s_order_id, __pyx_n_s_trading_pair, __pyx_n_s_amount, __pyx_n_s_order_type, __pyx_n_s_price, __pyx_n_s_trading_rule, __pyx_n_s_quote_amount, __pyx_n_s_decimal_amount, __pyx_n_s_decimal_price, __pyx_n_s_exchange_order_id, __pyx_n_s_tracked_order, __pyx_n_s_order_result, __pyx_n_s_order_type_str); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__30 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 14, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_execute_sell, 839, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__30)) __PYX_ERR(0, 839, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":932
 *         return order_id
 * 
 *     async def execute_cancel(self, trading_pair: str, order_id: str):             # <<<<<<<<<<<<<<
 *         try:
 *             tracked_order = self._in_flight_orders.get(order_id)
 */
  __pyx_tuple__82 = PyTuple_Pack(8, __pyx_n_s_self, __pyx_n_s_trading_pair, __pyx_n_s_order_id, __pyx_n_s_tracked_order, __pyx_n_s_path_url, __pyx_n_s_cancel_result, __pyx_n_s_err, __pyx_n_s_state_result); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__32 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 8, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_execute_cancel, 932, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__32)) __PYX_ERR(0, 932, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":981
 *         return order_id
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:             # <<<<<<<<<<<<<<
 *         incomplete_orders = [order for order in self._in_flight_orders.values() if not order.is_done]
 *         tasks = [self.execute_cancel(o.trading_pair, o.client_order_id) for o in incomplete_orders]
 */
  __pyx_tuple__83 = PyTuple_Pack(13, __pyx_n_s_self, __pyx_n_s_timeout_seconds, __pyx_n_s_incomplete_orders, __pyx_n_s_tasks, __pyx_n_s_order_id_set, __pyx_n_s_successful_cancellation, __pyx_n_s_api_responses, __pyx_n_s_order_id, __pyx_n_s_failed_cancellation, __pyx_n_s_order_2, __pyx_n_s_o, __pyx_n_s_o, __pyx_n_s_oid); if (unlikely(!__pyx_tuple__83)) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__83);
  __Pyx_GIVEREF(__pyx_tuple__83);
  __pyx_codeobj__34 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 13, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__83, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_cancel_all, 981, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__34)) __PYX_ERR(0, 981, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1003
 *         return successful_cancellation + failed_cancellation
 * 
 *     async def _http_client(self) -> aiohttp.ClientSession:             # <<<<<<<<<<<<<<
 *         if self._shared_client is None:
 *             self._shared_client = aiohttp.ClientSession()
 */
  __pyx_tuple__84 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(0, 1003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__37 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_http_client, 1003, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__37)) __PYX_ERR(0, 1003, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1008
 *         return self._shared_client
 * 
 *     async def _api_request(self,             # <<<<<<<<<<<<<<
 *                            http_method: str,
 *                            path_url: str = None,
 */
  __pyx_tuple__85 = PyTuple_Pack(12, __pyx_n_s_self, __pyx_n_s_http_method, __pyx_n_s_path_url, __pyx_n_s_params, __pyx_n_s_body, __pyx_n_s_subaccount_id, __pyx_n_s_url, __pyx_n_s_auth_dict, __pyx_n_s_headers, __pyx_n_s_client, __pyx_n_s_response, __pyx_n_s_data); if (unlikely(!__pyx_tuple__85)) __PYX_ERR(0, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__85);
  __Pyx_GIVEREF(__pyx_tuple__85);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(6, 0, 0, 12, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__85, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_api_request, 1008, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) __PYX_ERR(0, 1008, __pyx_L1_error)
  __pyx_tuple__86 = PyTuple_Pack(4, Py_None, Py_None, Py_None, __pyx_kp_u_); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(0, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1039
 *             return data
 * 
 *     async def check_network(self) -> NetworkStatus:             # <<<<<<<<<<<<<<
 *         try:
 *             await self._api_request("GET", path_url="/ping")
 */
  __pyx_tuple__87 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__87)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__87);
  __Pyx_GIVEREF(__pyx_tuple__87);
  __pyx_codeobj__39 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__87, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_check_network, 1039, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__39)) __PYX_ERR(0, 1039, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1048
 *         return NetworkStatus.CONNECTED
 * 
 *     def _stop_network(self):             # <<<<<<<<<<<<<<
 *         self._order_book_tracker.stop()
 *         if self._status_polling_task is not None:
 */
  __pyx_tuple__88 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_stop_network_2, 1048, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(0, 1048, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1059
 *             self._user_stream_event_listener_task = None
 * 
 *     async def stop_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 * 
 */
  __pyx_tuple__90 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  __pyx_codeobj__40 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_stop_network, 1059, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__40)) __PYX_ERR(0, 1059, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1062
 *         self._stop_network()
 * 
 *     async def start_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 *         self._order_book_tracker.start()
 */
  __pyx_tuple__91 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__91)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__91);
  __Pyx_GIVEREF(__pyx_tuple__91);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__91, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_start_network, 1062, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) __PYX_ERR(0, 1062, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1071
 *             self._user_stream_event_listener_task = safe_ensure_future(self._user_stream_event_listener())
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 */
  __pyx_tuple__92 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_trading_pair, __pyx_n_s_is_buy); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_get_price, 1071, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(0, 1071, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1074
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 */
  __pyx_tuple__94 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_trading_pair, __pyx_n_s_amount, __pyx_n_s_order_type, __pyx_n_s_price, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);
  __pyx_codeobj__95 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__94, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_buy_2, 1074, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__95)) __PYX_ERR(0, 1074, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1078
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 */
  __pyx_tuple__96 = PyTuple_Pack(6, __pyx_n_s_self, __pyx_n_s_trading_pair, __pyx_n_s_amount, __pyx_n_s_order_type, __pyx_n_s_price, __pyx_n_s_kwargs); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);
  __pyx_codeobj__97 = (PyObject*)__Pyx_PyCode_New(5, 0, 0, 6, 0, CO_OPTIMIZED|CO_NEWLOCALS|CO_VARKEYWORDS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__96, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_sell_2, 1078, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__97)) __PYX_ERR(0, 1078, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1082
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):             # <<<<<<<<<<<<<<
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 */
  __pyx_tuple__98 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_trading_pair, __pyx_n_s_client_order_id); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);
  __pyx_codeobj__99 = (PyObject*)__Pyx_PyCode_New(3, 0, 0, 3, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__98, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_cancel, 1082, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__99)) __PYX_ERR(0, 1082, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1085
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 *     def get_fee(self,             # <<<<<<<<<<<<<<
 *                 base_currency: str,
 *                 quote_currency: str,
 */
  __pyx_tuple__100 = PyTuple_Pack(7, __pyx_n_s_self, __pyx_n_s_base_currency, __pyx_n_s_quote_currency, __pyx_n_s_order_type, __pyx_n_s_order_side, __pyx_n_s_amount, __pyx_n_s_price); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);
  __pyx_codeobj__101 = (PyObject*)__Pyx_PyCode_New(7, 0, 0, 7, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__100, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_get_fee, 1085, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__101)) __PYX_ERR(0, 1085, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1094
 *         return self.c_get_fee(base_currency, quote_currency, order_type, order_side, amount, price)
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:             # <<<<<<<<<<<<<<
 *         return self.c_get_order_book(trading_pair)
 */
  __pyx_tuple__102 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_trading_pair); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_hummingbot_connector_exchange_bi_7, __pyx_n_s_get_order_book, 1094, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 1094, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_tuple__104 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(1, 0, 0, 1, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_reduce_cython, 1, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(1, 1, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __pyx_tuple__106 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_pyx_state); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(2, 0, 0, 2, 0, CO_OPTIMIZED|CO_NEWLOCALS, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_stringsource, __pyx_n_s_setstate_cython, 3, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_globals ### */

static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void) {
  __pyx_umethod_PyDict_Type_get.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_get.method_name = &__pyx_n_s_get;
  __pyx_umethod_PyDict_Type_keys.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_keys.method_name = &__pyx_n_s_keys;
  __pyx_umethod_PyDict_Type_values.type = (PyObject*)&PyDict_Type;
  __pyx_umethod_PyDict_Type_values.method_name = &__pyx_n_s_values;
  __pyx_umethod_PySet_Type_difference.type = (PyObject*)&PySet_Type;
  __pyx_umethod_PySet_Type_difference.method_name = &__pyx_n_s_difference;
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_InitString(__pyx_string_tab[0], &__pyx_kp_u_) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[1], &__pyx_kp_u_0_0005) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[2], &__pyx_kp_u_1_01) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[3], &__pyx_kp_u_1e) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[4], &__pyx_n_s_API_CALL_TIMEOUT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[5], &__pyx_kp_u_Aborting) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[6], &__pyx_n_s_Any) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[7], &__pyx_n_s_AssertionError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[8], &__pyx_n_s_AsyncIterable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[9], &__pyx_kp_s_AsyncIterable_Dict_str_Any) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[10], &__pyx_n_s_BITTREX_API_ENDPOINT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[11], &__pyx_n_u_BTC) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[12], &__pyx_kp_u_BTC_USD) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[13], &__pyx_kp_u_BTC_USDT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[14], &__pyx_n_s_BUY) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[15], &__pyx_n_u_BUY) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[16], &__pyx_n_s_BittrexAPIOrderBookDataSource) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[17], &__pyx_n_s_BittrexAuth) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[18], &__pyx_n_s_BittrexExchange) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[19], &__pyx_n_s_BittrexExchangeTransactionTracke) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[20], &__pyx_n_s_BittrexExchangeTransactionTracke_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[21], &__pyx_n_s_BittrexExchangeTransactionTracke_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[22], &__pyx_n_s_BittrexExchange___reduce_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[23], &__pyx_n_s_BittrexExchange___setstate_cytho) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[24], &__pyx_n_s_BittrexExchange__api_request) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[25], &__pyx_n_s_BittrexExchange__format_trading) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[26], &__pyx_n_s_BittrexExchange__http_client) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[27], &__pyx_n_s_BittrexExchange__iter_user_strea) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[28], &__pyx_n_s_BittrexExchange__process_api_clo) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[29], &__pyx_n_s_BittrexExchange__status_polling) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[30], &__pyx_n_s_BittrexExchange__stop_network) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[31], &__pyx_n_s_BittrexExchange__trading_rules_p) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[32], &__pyx_n_s_BittrexExchange__update_balances) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[33], &__pyx_n_s_BittrexExchange__update_order_st) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[34], &__pyx_n_s_BittrexExchange__update_trading) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[35], &__pyx_n_s_BittrexExchange__user_stream_eve) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[36], &__pyx_n_s_BittrexExchange_buy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[37], &__pyx_n_s_BittrexExchange_cancel) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[38], &__pyx_n_s_BittrexExchange_cancel_all) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[39], &__pyx_n_s_BittrexExchange_check_network) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[40], &__pyx_n_s_BittrexExchange_execute_buy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[41], &__pyx_n_s_BittrexExchange_execute_cancel) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[42], &__pyx_n_s_BittrexExchange_execute_sell) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[43], &__pyx_n_s_BittrexExchange_get_active_excha) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[44], &__pyx_n_s_BittrexExchange_get_fee) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[45], &__pyx_n_s_BittrexExchange_get_order_book) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[46], &__pyx_n_s_BittrexExchange_get_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[47], &__pyx_n_s_BittrexExchange_list_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[48], &__pyx_n_s_BittrexExchange_logger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[49], &__pyx_n_s_BittrexExchange_place_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[50], &__pyx_n_s_BittrexExchange_restore_tracking) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[51], &__pyx_n_s_BittrexExchange_sell) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[52], &__pyx_n_s_BittrexExchange_start_network) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[53], &__pyx_n_s_BittrexExchange_start_tracking_o) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[54], &__pyx_n_s_BittrexExchange_stop_network) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[55], &__pyx_n_s_BittrexExchange_supported_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[56], &__pyx_n_s_BittrexInFlightOrder) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[57], &__pyx_n_s_BittrexOrderBookTracker) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[58], &__pyx_n_s_BittrexUserStreamTracker) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[59], &__pyx_n_s_BuyOrderCompleted) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[60], &__pyx_n_s_BuyOrderCompletedEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[61], &__pyx_n_s_BuyOrderCreated) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[62], &__pyx_n_s_BuyOrderCreatedEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[63], &__pyx_kp_u_Buy_order_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[64], &__pyx_n_u_CANCELLED) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[65], &__pyx_kp_u_CELO) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[66], &__pyx_kp_u_CGLD) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[67], &__pyx_n_u_CLOSED) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[68], &__pyx_n_s_CONNECTED) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[69], &__pyx_n_s_CancellationResult) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[70], &__pyx_n_s_CancelledError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[71], &__pyx_kp_u_Check_API_key_and_network_conne) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[72], &__pyx_n_s_ClientSession) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[73], &__pyx_kp_u_Could_not_fetch_updates_for_the) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[74], &__pyx_kp_u_Could_not_fetch_updates_from_Bit) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[75], &__pyx_kp_u_Could_not_fetch_updates_from_Bit_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[76], &__pyx_kp_u_Created) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[77], &__pyx_n_u_DELETE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[78], &__pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[79], &__pyx_n_s_Dict) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[80], &__pyx_kp_s_Dict_str_Any) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[81], &__pyx_kp_s_Dict_str_any) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[82], &__pyx_n_u_ETH) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[83], &__pyx_kp_u_ETH_BTC) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[84], &__pyx_kp_u_Error_fetching_response_from) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[85], &__pyx_kp_u_Error_fetching_status_update_for) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[86], &__pyx_kp_u_Error_parsing_the_trading_pair_r) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[87], &__pyx_kp_u_Error_submitting_buy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[88], &__pyx_kp_u_Error_submitting_sell) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[89], &__pyx_n_s_Event) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[90], &__pyx_n_s_ExchangeBase) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[91], &__pyx_kp_u_Exchange_order_ID_never_updated) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[92], &__pyx_n_u_FAILURE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[93], &__pyx_kp_u_Failed_to_cancel_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[94], &__pyx_kp_u_Failed_to_cancel_order_on_Bittre) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[95], &__pyx_kp_u_Failed_to_cancel_the_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[96], &__pyx_kp_u_Failed_to_submit_buy_order_to_Bi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[97], &__pyx_kp_u_Failed_to_submit_sell_order_to_B) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[98], &__pyx_kp_u_Filled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[99], &__pyx_n_u_GET) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[100], &__pyx_n_u_GOOD_TIL_CANCELLED) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[101], &__pyx_kp_u_HTTP_Status_Code) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[102], &__pyx_n_s_HummingbotLogger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[103], &__pyx_n_s_IOError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[104], &__pyx_n_s_ImportError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[105], &__pyx_kp_u_Invalid_OrderType) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[106], &__pyx_n_s_LIMIT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[107], &__pyx_n_u_LIMIT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[108], &__pyx_n_s_LIMIT_MAKER) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[109], &__pyx_n_s_LimitOrder) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[110], &__pyx_n_s_List) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[111], &__pyx_kp_s_List_Any) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[112], &__pyx_kp_s_List_CancellationResult) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[113], &__pyx_kp_s_List_TradingRule) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[114], &__pyx_n_s_MARKET) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[115], &__pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[116], &__pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[117], &__pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[118], &__pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[119], &__pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[120], &__pyx_n_s_MARKET_RECEIVED_ASSET_EVENT_TAG) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[121], &__pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[122], &__pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[123], &__pyx_n_s_MARKET_TRANSACTION_FAILURE_EVENT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[124], &__pyx_n_s_MarketEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[125], &__pyx_n_s_MarketOrderFailureEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[126], &__pyx_n_s_MarketTransactionFailureEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[127], &__pyx_n_s_NOT_CONNECTED) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[128], &__pyx_n_u_NOT_FOUND) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[129], &__pyx_n_s_NaN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[130], &__pyx_n_u_NaN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[131], &__pyx_n_s_NetworkStatus) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[132], &__pyx_kp_u_No_exchange_ID_found_for) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[133], &__pyx_kp_u_No_order_book_exists_for) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[134], &__pyx_kp_u_None) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[135], &__pyx_n_u_OFFLINE) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[136], &__pyx_n_s_ORDER_NOT_EXIST_CONFIRMATION_COU) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[137], &__pyx_n_u_ORDER_NOT_OPEN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[138], &__pyx_n_s_Optional) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[139], &__pyx_kp_s_Optional_Decimal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[140], &__pyx_n_s_OrderBook) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[141], &__pyx_n_s_OrderCancelled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[142], &__pyx_n_s_OrderCancelledEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[143], &__pyx_n_s_OrderFailure) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[144], &__pyx_n_s_OrderFilled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[145], &__pyx_n_s_OrderFilledEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[146], &__pyx_n_s_OrderType) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[147], &__pyx_n_u_POST) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[148], &__pyx_n_u_POST_ONLY_GOOD_TIL_CANCELLED) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[149], &__pyx_n_s_ReceivedAsset) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[150], &__pyx_n_s_SELL) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[151], &__pyx_n_u_SELL) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[152], &__pyx_n_s_SellOrderCompleted) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[153], &__pyx_n_s_SellOrderCompletedEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[154], &__pyx_n_s_SellOrderCreated) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[155], &__pyx_n_s_SellOrderCreatedEvent) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[156], &__pyx_kp_u_Sell_order_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[157], &__pyx_kp_u_Skipping) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[158], &__pyx_kp_u_Successfully_cancelled_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[159], &__pyx_kp_u_The) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[160], &__pyx_kp_u_The_BUY_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[161], &__pyx_kp_u_The_SELL_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[162], &__pyx_kp_u_The_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[163], &__pyx_n_s_TimeoutError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[164], &__pyx_n_s_TradeFee) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[165], &__pyx_n_s_TradeType) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[166], &__pyx_n_s_TransactionFailure) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[167], &__pyx_kp_u_Tried_to_cancel_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[168], &__pyx_n_s_TypeError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[169], &__pyx_n_s_UPDATE_ORDERS_INTERVAL) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[170], &__pyx_n_u_USD) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[171], &__pyx_n_u_USDT) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[172], &__pyx_kp_u_Unexpected_error_cancelling_orde) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[173], &__pyx_kp_u_Unexpected_error_in_user_stream) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[174], &__pyx_kp_u_Unexpected_error_while_fetching) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[175], &__pyx_kp_u_Unexpected_error_while_polling_u) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[176], &__pyx_kp_u_Unknown_error_Retrying_after_1_s) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[177], &__pyx_n_s_ValueError) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[178], &__pyx_kp_u__10) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[179], &__pyx_n_s__108) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[180], &__pyx_kp_u__11) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[181], &__pyx_kp_u__12) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[182], &__pyx_kp_u__21) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[183], &__pyx_n_s__49) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[184], &__pyx_kp_u__9) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[185], &__pyx_n_u_account_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[186], &__pyx_n_s_account_balances) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[187], &__pyx_n_s_account_info) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[188], &__pyx_n_s_aenter) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[189], &__pyx_n_s_aexit) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[190], &__pyx_n_s_aiohttp) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[191], &__pyx_kp_s_aiohttp_ClientSession) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[192], &__pyx_n_s_aiter) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[193], &__pyx_n_s_all) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[194], &__pyx_n_s_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[195], &__pyx_n_s_anext) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[196], &__pyx_n_s_api_request) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[197], &__pyx_n_s_api_response) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[198], &__pyx_n_s_api_responses) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[199], &__pyx_n_s_app_warning_msg) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[200], &__pyx_n_s_args) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[201], &__pyx_n_s_asset_name) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[202], &__pyx_n_s_asset_names_to_remove) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[203], &__pyx_n_s_async_timeout) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[204], &__pyx_n_s_asyncio) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[205], &__pyx_n_s_asyncio_coroutines) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[206], &__pyx_n_s_asyncio_tasks) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[207], &__pyx_n_s_auth_dict) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[208], &__pyx_n_u_available) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[209], &__pyx_n_s_available_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[210], &__pyx_n_s_await) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[211], &__pyx_n_u_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[212], &__pyx_n_s_balance_delta) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[213], &__pyx_n_s_balance_entry) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[214], &__pyx_kp_u_balances) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[215], &__pyx_n_s_balances_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[216], &__pyx_n_s_base_asset) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[217], &__pyx_n_s_base_currency) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[218], &__pyx_n_u_bittrex) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[219], &__pyx_n_s_bittrex_api_key) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[220], &__pyx_n_s_bittrex_auth) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[221], &__pyx_n_s_bittrex_secret_key) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[222], &__pyx_n_s_bm_logger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[223], &__pyx_n_s_body) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[224], &__pyx_n_u_body) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[225], &__pyx_n_s_bool) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[226], &__pyx_n_s_btc_usd_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[227], &__pyx_n_s_btc_usdt_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[228], &__pyx_kp_u_buy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[229], &__pyx_n_s_buy_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[230], &__pyx_kp_u_buy_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[231], &__pyx_n_s_cancel) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[232], &__pyx_n_s_cancel_all) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[233], &__pyx_n_s_cancel_result) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[234], &__pyx_n_u_cancelled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[235], &__pyx_n_s_check_network) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[236], &__pyx_n_s_client) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[237], &__pyx_n_s_client_order_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[238], &__pyx_n_s_cline_in_traceback) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[239], &__pyx_n_s_close) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[240], &__pyx_n_s_cls) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[241], &__pyx_n_u_commission) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[242], &__pyx_n_s_content) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[243], &__pyx_n_u_content) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[244], &__pyx_n_u_currencySymbol) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[245], &__pyx_n_s_current_tick) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[246], &__pyx_n_s_data) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[247], &__pyx_n_s_decimal) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[248], &__pyx_n_s_decimal_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[249], &__pyx_n_s_decimal_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[250], &__pyx_n_u_delta) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[251], &__pyx_n_s_dict) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[252], &__pyx_n_s_difference) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[253], &__pyx_n_u_direction) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[254], &__pyx_kp_u_disable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[255], &__pyx_kp_u_does_not_exist_on_Bittrex_No_ca) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[256], &__pyx_n_u_done) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[257], &__pyx_kp_u_enable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[258], &__pyx_n_s_err) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[259], &__pyx_n_s_error) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[260], &__pyx_n_s_estimate_fee) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[261], &__pyx_n_s_eth_btc_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[262], &__pyx_n_s_event_type) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[263], &__pyx_n_u_event_type) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[264], &__pyx_n_s_exc_info) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[265], &__pyx_n_s_exchange_order_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[266], &__pyx_n_s_execute_buy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[267], &__pyx_n_s_execute_cancel) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[268], &__pyx_n_s_execute_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[269], &__pyx_n_s_execute_sell) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[270], &__pyx_n_s_executed_amount_base) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[271], &__pyx_n_s_executed_amount_diff) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[272], &__pyx_n_s_executed_amount_quote) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[273], &__pyx_n_s_executed_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[274], &__pyx_n_u_f) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[275], &__pyx_n_s_failed_cancellation) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[276], &__pyx_n_s_fee_asset) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[277], &__pyx_n_s_fee_paid) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[278], &__pyx_n_u_fillQuantity) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[279], &__pyx_n_s_float) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[280], &__pyx_kp_u_for) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[281], &__pyx_n_s_format_trading_rules) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[282], &__pyx_n_s_from_json) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[283], &__pyx_kp_u_gc) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[284], &__pyx_n_s_generate_auth_dict) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[285], &__pyx_n_s_genexpr) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[286], &__pyx_n_s_get) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[287], &__pyx_n_s_getLogger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[288], &__pyx_n_s_get_active_exchange_markets) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[289], &__pyx_n_s_get_event_loop) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[290], &__pyx_n_s_get_exchange_order_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[291], &__pyx_n_s_get_fee) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[292], &__pyx_n_s_get_order_book) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[293], &__pyx_n_s_get_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[294], &__pyx_n_s_get_tracking_nonce) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[295], &__pyx_n_s_getstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[296], &__pyx_kp_u_has_been_cancelled_according_to) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[297], &__pyx_kp_u_has_been_cancelled_according_to_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[298], &__pyx_kp_u_has_completed_according_to_Bitt) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[299], &__pyx_kp_u_has_completed_according_to_Orde) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[300], &__pyx_kp_u_has_completed_according_to_orde) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[301], &__pyx_n_s_headers) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[302], &__pyx_n_u_headers) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[303], &__pyx_n_s_http_client) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[304], &__pyx_n_s_http_method) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[305], &__pyx_kp_u_https_api_bittrex_com_v3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[306], &__pyx_n_s_hummingbot_connector_exchange_ba) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[307], &__pyx_n_s_hummingbot_connector_exchange_bi) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[308], &__pyx_n_s_hummingbot_connector_exchange_bi_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[309], &__pyx_n_s_hummingbot_connector_exchange_bi_3) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[310], &__pyx_n_s_hummingbot_connector_exchange_bi_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[311], &__pyx_n_s_hummingbot_connector_exchange_bi_5) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[312], &__pyx_n_s_hummingbot_connector_exchange_bi_6) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[313], &__pyx_kp_s_hummingbot_connector_exchange_bi_7) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[314], &__pyx_n_s_hummingbot_core_data_type_cancel) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[315], &__pyx_n_s_hummingbot_core_data_type_limit) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[316], &__pyx_n_s_hummingbot_core_event_events) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[317], &__pyx_n_s_hummingbot_core_network_iterator) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[318], &__pyx_n_s_hummingbot_core_utils_async_util) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[319], &__pyx_n_s_hummingbot_core_utils_estimate_f) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[320], &__pyx_n_s_hummingbot_core_utils_tracking_n) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[321], &__pyx_n_s_hummingbot_logger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[322], &__pyx_n_s_hummingbot_market_market_base) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[323], &__pyx_n_u_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[324], &__pyx_n_s_import) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[325], &__pyx_n_s_incomplete_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[326], &__pyx_n_s_info) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[327], &__pyx_n_s_init) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[328], &__pyx_n_s_initializing) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[329], &__pyx_n_s_inspect) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[330], &__pyx_n_s_is_buy) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[331], &__pyx_n_s_is_coroutine) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[332], &__pyx_n_s_is_done) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[333], &__pyx_kp_u_is_lower_than_the_minimum_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[334], &__pyx_kp_u_is_not_tracked) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[335], &__pyx_n_s_is_set) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[336], &__pyx_kp_u_isenabled) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[337], &__pyx_n_s_item) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[338], &__pyx_n_s_items) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[339], &__pyx_n_s_iter_user_stream_queue) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[340], &__pyx_n_s_json) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[341], &__pyx_n_s_key) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[342], &__pyx_n_s_keys) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[343], &__pyx_n_s_kwargs) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[344], &__pyx_n_u_lastTradeRate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[345], &__pyx_n_s_last_state) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[346], &__pyx_n_s_last_tick) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[347], &__pyx_n_s_last_trade_rate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[348], &__pyx_n_u_limit) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[349], &__pyx_n_s_list_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[350], &__pyx_n_s_local_asset_names) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[351], &__pyx_n_s_logger) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[352], &__pyx_n_s_logging) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[353], &__pyx_n_s_lower) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[354], &__pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[355], &__pyx_n_s_market) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[356], &__pyx_n_u_marketSymbol) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[357], &__pyx_n_s_market_dict) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[358], &__pyx_n_s_market_list) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[359], &__pyx_n_s_market_path_url) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[360], &__pyx_kp_u_markets) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[361], &__pyx_kp_u_markets_tickers) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[362], &__pyx_n_u_minTradeSize) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[363], &__pyx_n_s_min_base_amount_increment) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[364], &__pyx_n_s_min_btc_value) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[365], &__pyx_n_s_min_order_size) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[366], &__pyx_n_s_min_order_value) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[367], &__pyx_n_s_min_price_increment) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[368], &__pyx_n_s_min_quote_amount_increment) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[369], &__pyx_n_s_min_trade_size) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[370], &__pyx_n_s_name) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[371], &__pyx_n_s_name_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[372], &__pyx_n_s_network) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[373], &__pyx_n_s_new_confirmed_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[374], &__pyx_kp_u_numpy_core_multiarray_failed_to) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[375], &__pyx_kp_u_numpy_core_umath_failed_to_impor) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[376], &__pyx_n_s_o) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[377], &__pyx_kp_u_of_the) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[378], &__pyx_n_s_oid) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[379], &__pyx_kp_u_on_Bittrex_Check_API_key_and_ne) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[380], &__pyx_kp_u_on_order_status_update_Order_no) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[381], &__pyx_n_s_open_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[382], &__pyx_kp_u_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[383], &__pyx_n_s_order_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[384], &__pyx_n_u_order_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[385], &__pyx_n_u_order_book_initialized) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[386], &__pyx_n_s_order_books) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[387], &__pyx_n_s_order_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[388], &__pyx_n_s_order_id_set) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[389], &__pyx_n_s_order_result) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[390], &__pyx_n_s_order_side) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[391], &__pyx_n_s_order_state) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[392], &__pyx_n_s_order_status) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[393], &__pyx_kp_u_order_to_Bittrex_for) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[394], &__pyx_n_s_order_type) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[395], &__pyx_n_s_order_type_description) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[396], &__pyx_n_s_order_type_str) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[397], &__pyx_kp_u_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[398], &__pyx_kp_u_orders_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[399], &__pyx_kp_u_orders_open) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[400], &__pyx_kp_u_out_of) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[401], &__pyx_n_s_owner) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[402], &__pyx_n_s_pandas) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[403], &__pyx_n_s_params) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[404], &__pyx_n_s_path_url) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[405], &__pyx_n_s_pd) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[406], &__pyx_kp_s_pd_DataFrame) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[407], &__pyx_kp_u_ping) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[408], &__pyx_n_s_place_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[409], &__pyx_n_s_poll_interval) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[410], &__pyx_n_s_precision) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[411], &__pyx_n_u_precision) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[412], &__pyx_n_s_price) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[413], &__pyx_n_s_process_api_closed) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[414], &__pyx_n_s_pyx_state) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[415], &__pyx_n_s_pyx_vtable) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[416], &__pyx_n_u_quantity) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[417], &__pyx_n_u_quoteCurrencySymbol) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[418], &__pyx_n_s_quote_amount) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[419], &__pyx_n_s_quote_asset) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[420], &__pyx_n_s_quote_currency) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[421], &__pyx_n_s_ready) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[422], &__pyx_n_s_reduce) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[423], &__pyx_n_s_reduce_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[424], &__pyx_n_s_reduce_ex) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[425], &__pyx_n_s_remaining_size) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[426], &__pyx_n_s_remote_asset_names) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[427], &__pyx_n_s_replace) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[428], &__pyx_n_s_request) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[429], &__pyx_n_s_response) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[430], &__pyx_n_s_restore_tracking_states) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[431], &__pyx_n_s_result) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[432], &__pyx_n_s_result_list) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[433], &__pyx_n_s_return) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[434], &__pyx_n_s_return_exceptions) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[435], &__pyx_n_s_retval) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[436], &__pyx_n_s_s_decimal_0) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[437], &__pyx_n_s_s_decimal_NaN) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[438], &__pyx_n_s_safe_ensure_future) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[439], &__pyx_n_s_safe_gather) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[440], &__pyx_n_s_saved_states) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[441], &__pyx_n_s_self) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[442], &__pyx_kp_s_self__events_cannot_be_converted) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[443], &__pyx_kp_u_sell) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[444], &__pyx_n_s_sell_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[445], &__pyx_kp_u_sell_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[446], &__pyx_n_s_send) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[447], &__pyx_n_s_set) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[448], &__pyx_n_s_setstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[449], &__pyx_n_s_setstate_cython) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[450], &__pyx_n_s_sleep) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[451], &__pyx_n_s_spec) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[452], &__pyx_n_s_start) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[453], &__pyx_n_s_start_network) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[454], &__pyx_n_s_start_tracking_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[455], &__pyx_n_s_state_result) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[456], &__pyx_n_s_status) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[457], &__pyx_n_u_status) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[458], &__pyx_n_s_status_dict) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[459], &__pyx_n_s_status_polling_loop) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[460], &__pyx_n_s_stop) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[461], &__pyx_n_s_stop_network) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[462], &__pyx_n_s_stop_network_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[463], &__pyx_n_s_str) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[464], &__pyx_n_s_stream_message) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[465], &__pyx_kp_s_stringsource) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[466], &__pyx_n_s_subaccount_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[467], &__pyx_n_s_successful_cancellation) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[468], &__pyx_n_s_super) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[469], &__pyx_n_s_supported_order_types) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[470], &__pyx_n_u_symbol) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[471], &__pyx_n_s_tasks) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[472], &__pyx_n_s_test) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[473], &__pyx_n_s_throw) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[474], &__pyx_n_s_ticker_data) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[475], &__pyx_n_s_ticker_list) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[476], &__pyx_n_s_ticker_path_url) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[477], &__pyx_n_u_timeInForce) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[478], &__pyx_n_s_timeout) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[479], &__pyx_n_s_timeout_seconds) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[480], &__pyx_n_s_to_json) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[481], &__pyx_n_s_to_limit_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[482], &__pyx_n_u_total) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[483], &__pyx_n_s_total_balance) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[484], &__pyx_n_s_tracked_order) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[485], &__pyx_n_s_tracked_orders) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[486], &__pyx_n_s_trade_type) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[487], &__pyx_n_s_trading_pair) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[488], &__pyx_n_s_trading_pairs) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[489], &__pyx_n_s_trading_required) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[490], &__pyx_n_s_trading_rule) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[491], &__pyx_n_u_trading_rule_initialized) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[492], &__pyx_n_s_trading_rules_list) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[493], &__pyx_n_s_trading_rules_polling_loop) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[494], &__pyx_n_u_type) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[495], &__pyx_n_s_typing) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[496], &__pyx_n_s_update) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[497], &__pyx_n_s_update_balances) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[498], &__pyx_n_s_update_exchange_order_id) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[499], &__pyx_n_s_update_order_status) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[500], &__pyx_n_s_update_order_status_locals_gene) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[501], &__pyx_n_s_update_trading_rules) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[502], &__pyx_n_s_url) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[503], &__pyx_n_s_user_stream) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[504], &__pyx_n_s_user_stream_event_listener) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[505], &__pyx_n_s_value) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[506], &__pyx_n_s_values) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[507], &__pyx_n_s_wait) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[508], &__pyx_n_s_warning) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[509], &__pyx_kp_u_which_is_already_closed_Order_d) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  if (__Pyx_InitString(__pyx_string_tab[510], &__pyx_kp_u_ws) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #endif
  __pyx_float_0_0 = PyFloat_FromDouble(0.0); if (unlikely(!__pyx_float_0_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_0_5 = PyFloat_FromDouble(0.5); if (unlikely(!__pyx_float_0_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_1_0 = PyFloat_FromDouble(1.0); if (unlikely(!__pyx_float_1_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_5_0 = PyFloat_FromDouble(5.0); if (unlikely(!__pyx_float_5_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_float_10_0 = PyFloat_FromDouble(10.0); if (unlikely(!__pyx_float_10_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_200 = PyInt_FromLong(200); if (unlikely(!__pyx_int_200)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_201 = PyInt_FromLong(201); if (unlikely(!__pyx_int_201)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_300 = PyInt_FromLong(300); if (unlikely(!__pyx_int_300)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_module ### */

static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(void); /*proto*/

static int __Pyx_modinit_global_init_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.exchange_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.exchange_base", "ExchangeBase", sizeof(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase = (struct __pyx_vtabstruct_10hummingbot_9connector_13exchange_base_ExchangeBase*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase); if (unlikely(!__pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange = &__pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange;
  __pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.__pyx_base = *__pyx_vtabptr_10hummingbot_9connector_13exchange_base_ExchangeBase;
  __pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_start = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, struct __pyx_obj_10hummingbot_4core_5clock_Clock *, double))__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_start;
  __pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.__pyx_base.__pyx_base.__pyx_base.__pyx_base.c_tick = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator *, double))__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_tick;
  __pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.__pyx_base.__pyx_base.c_buy = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_buy *__pyx_optional_args))__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_buy;
  __pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.__pyx_base.__pyx_base.c_sell = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_sell *__pyx_optional_args))__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_sell;
  __pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.__pyx_base.__pyx_base.c_cancel = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_cancel;
  __pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.__pyx_base.__pyx_base.c_stop_tracking_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_stop_tracking_order;
  __pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.__pyx_base.__pyx_base.c_get_order_price_quantum = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_get_order_price_quantum;
  __pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.__pyx_base.__pyx_base.c_get_order_size_quantum = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_get_order_size_quantum;
  __pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.__pyx_base.__pyx_base.c_quantize_order_amount = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase *, PyObject *, PyObject *, struct __pyx_opt_args_10hummingbot_9connector_14connector_base_13ConnectorBase_c_quantize_order_amount *__pyx_optional_args))__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_quantize_order_amount;
  __pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.__pyx_base.c_get_order_book = (struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook *(*)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_get_order_book;
  __pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.__pyx_base.c_get_fee = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_13exchange_base_ExchangeBase *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_get_fee;
  __pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.c_start_tracking_order = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_start_tracking_order;
  __pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.c_did_timeout_tx = (PyObject *(*)(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_c_did_timeout_tx;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_2 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange = PyType_FromSpecWithBases(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange_spec, __pyx_t_2); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
  #else
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.tp_base = __pyx_ptype_10hummingbot_9connector_13exchange_base_ExchangeBase;
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange, __pyx_vtabptr_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.tp_dict, __pyx_vtabptr_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  if (__Pyx_MergeVtables(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BittrexExchange, __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BittrexExchange, (PyObject *)&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  #endif
  if (__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.tp_weaklistoffset == 0) __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange, __pyx_base.__pyx_base.__pyx_base.__pyx_base.__pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange) < 0) __PYX_ERR(0, 54, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange;
  #endif
  __pyx_t_2 = PyImport_ImportModule("hummingbot.core.data_type.transaction_tracker"); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker = __Pyx_ImportType(__pyx_t_2, "hummingbot.core.data_type.transaction_tracker", "TransactionTracker", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker = (struct __pyx_vtabstruct_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker = &__pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker;
  __pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker.__pyx_base = *__pyx_vtabptr_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker;
  __pyx_vtable_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker.__pyx_base.c_did_timeout_tx = (PyObject *(*)(struct __pyx_obj_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker *, PyObject *))__pyx_f_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_c_did_timeout_tx;
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_3 = PyTuple_Pack(1, (PyObject *)__pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker = PyType_FromSpecWithBases(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker_spec, __pyx_t_3); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
  #else
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker.tp_base = __pyx_ptype_10hummingbot_4core_9data_type_19transaction_tracker_TransactionTracker;
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker.tp_getattro = __Pyx_PyObject_GenericGetAttr;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker, __pyx_vtabptr_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  #else
  if (__Pyx_SetVtable(__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker.tp_dict, __pyx_vtabptr_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  if (__Pyx_MergeVtables(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BittrexExchangeTransactionTracke, __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  #else
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s_BittrexExchangeTransactionTracke, (PyObject *)&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  #endif
  if (__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker.tp_weaklistoffset == 0) __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker.tp_weaklistoffset = offsetof(struct __pyx_obj_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker, __pyx_base.__pyx_base.__pyx_base.__weakref__);
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if (__Pyx_setup_reduce((PyObject*)&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker) < 0) __PYX_ERR(0, 42, __pyx_L1_error)
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchangeTransactionTracker;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets)) __PYX_ERR(0, 157, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets) < 0) __PYX_ERR(0, 157, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct__get_active_exchange_markets;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances)) __PYX_ERR(0, 199, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_1__update_balances;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules)) __PYX_ERR(0, 269, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules) < 0) __PYX_ERR(0, 269, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_2__update_trading_rules;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders)) __PYX_ERR(0, 300, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders) < 0) __PYX_ERR(0, 300, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_3_list_orders;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status)) __PYX_ERR(0, 334, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status) < 0) __PYX_ERR(0, 334, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_4__update_order_status;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr)) __PYX_ERR(0, 347, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr) < 0) __PYX_ERR(0, 347, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_5_genexpr;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue)) __PYX_ERR(0, 478, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue) < 0) __PYX_ERR(0, 478, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_6__iter_user_stream_queue;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener)) __PYX_ERR(0, 488, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener) < 0) __PYX_ERR(0, 488, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_7__user_stream_event_listener;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop)) __PYX_ERR(0, 603, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop) < 0) __PYX_ERR(0, 603, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_8__status_polling_loop;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop)) __PYX_ERR(0, 623, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop) < 0) __PYX_ERR(0, 623, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_9__trading_rules_polling_loop;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order)) __PYX_ERR(0, 709, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order) < 0) __PYX_ERR(0, 709, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_10_place_order;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy)) __PYX_ERR(0, 743, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy) < 0) __PYX_ERR(0, 743, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_11_execute_buy;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell)) __PYX_ERR(0, 839, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell) < 0) __PYX_ERR(0, 839, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_12_execute_sell;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel)) __PYX_ERR(0, 932, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel) < 0) __PYX_ERR(0, 932, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_13_execute_cancel;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all)) __PYX_ERR(0, 981, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all) < 0) __PYX_ERR(0, 981, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_14_cancel_all;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client)) __PYX_ERR(0, 1003, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client) < 0) __PYX_ERR(0, 1003, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_15__http_client;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request)) __PYX_ERR(0, 1008, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request) < 0) __PYX_ERR(0, 1008, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_16__api_request;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network)) __PYX_ERR(0, 1039, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network) < 0) __PYX_ERR(0, 1039, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_17_check_network;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network)) __PYX_ERR(0, 1059, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network) < 0) __PYX_ERR(0, 1059, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_18_stop_network;
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network = PyType_FromSpec(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network_spec); if (unlikely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network)) __PYX_ERR(0, 1062, __pyx_L1_error)
  #else
  if (__Pyx_PyType_Ready(&__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network) < 0) __PYX_ERR(0, 1062, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3
  __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network.tp_print = 0;
  #endif
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network.tp_dictoffset && __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network.tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
  }
  #endif
  #if CYTHON_COMPILING_IN_LIMITED_API
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network = (PyTypeObject *)__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network;
  #else
  __pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network = &__pyx_type_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange___pyx_scope_struct_19_start_network;
  #endif
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(void) {
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.pubsub"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 17, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_6pubsub_PubSub = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.pubsub", "PubSub", sizeof(struct __pyx_obj_10hummingbot_4core_6pubsub_PubSub), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_6pubsub_PubSub) __PYX_ERR(3, 17, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub = (struct __pyx_vtabstruct_10hummingbot_4core_6pubsub_PubSub*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_6pubsub_PubSub); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_6pubsub_PubSub)) __PYX_ERR(3, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_listener"); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_listener", "EventListener", sizeof(struct __pyx_obj_10hummingbot_4core_5event_14event_listener_EventListener), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener) __PYX_ERR(4, 6, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_listener_EventListener*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_14event_listener_EventListener); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_14event_listener_EventListener)) __PYX_ERR(4, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_reporter"); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_reporter", "EventReporter", sizeof(struct __pyx_obj_10hummingbot_4core_5event_14event_reporter_EventReporter), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter) __PYX_ERR(5, 4, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter = (struct __pyx_vtabstruct_10hummingbot_4core_5event_14event_reporter_EventReporter*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_14event_reporter_EventReporter); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_14event_reporter_EventReporter)) __PYX_ERR(5, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.event.event_logger"); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.event.event_logger", "EventLogger", sizeof(struct __pyx_obj_10hummingbot_4core_5event_12event_logger_EventLogger), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger) __PYX_ERR(6, 4, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger = (struct __pyx_vtabstruct_10hummingbot_4core_5event_12event_logger_EventLogger*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_5event_12event_logger_EventLogger); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_5event_12event_logger_EventLogger)) __PYX_ERR(6, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.order_book_query_result"); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book_query_result", "OrderBookQueryResult", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_OrderBookQueryResult) __PYX_ERR(7, 3, __pyx_L1_error)
  __pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book_query_result", "ClientOrderBookQueryResult", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_23order_book_query_result_ClientOrderBookQueryResult) __PYX_ERR(7, 11, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type", 
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_7cpython_4type_type) __PYX_ERR(8, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("numpy"); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 203, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType(__pyx_t_1, "numpy", "dtype", sizeof(PyArray_Descr), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_dtype) __PYX_ERR(2, 203, __pyx_L1_error)
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType(__pyx_t_1, "numpy", "flatiter", sizeof(PyArrayIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_flatiter) __PYX_ERR(2, 226, __pyx_L1_error)
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType(__pyx_t_1, "numpy", "broadcast", sizeof(PyArrayMultiIterObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_broadcast) __PYX_ERR(2, 230, __pyx_L1_error)
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType(__pyx_t_1, "numpy", "ndarray", sizeof(PyArrayObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ndarray) __PYX_ERR(2, 239, __pyx_L1_error)
  __pyx_ptype_5numpy_generic = __Pyx_ImportType(__pyx_t_1, "numpy", "generic", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_generic) __PYX_ERR(2, 813, __pyx_L1_error)
  __pyx_ptype_5numpy_number = __Pyx_ImportType(__pyx_t_1, "numpy", "number", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_number) __PYX_ERR(2, 815, __pyx_L1_error)
  __pyx_ptype_5numpy_integer = __Pyx_ImportType(__pyx_t_1, "numpy", "integer", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_integer) __PYX_ERR(2, 817, __pyx_L1_error)
  __pyx_ptype_5numpy_signedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "signedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_signedinteger) __PYX_ERR(2, 819, __pyx_L1_error)
  __pyx_ptype_5numpy_unsignedinteger = __Pyx_ImportType(__pyx_t_1, "numpy", "unsignedinteger", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_unsignedinteger) __PYX_ERR(2, 821, __pyx_L1_error)
  __pyx_ptype_5numpy_inexact = __Pyx_ImportType(__pyx_t_1, "numpy", "inexact", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_inexact) __PYX_ERR(2, 823, __pyx_L1_error)
  __pyx_ptype_5numpy_floating = __Pyx_ImportType(__pyx_t_1, "numpy", "floating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_floating) __PYX_ERR(2, 825, __pyx_L1_error)
  __pyx_ptype_5numpy_complexfloating = __Pyx_ImportType(__pyx_t_1, "numpy", "complexfloating", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_complexfloating) __PYX_ERR(2, 827, __pyx_L1_error)
  __pyx_ptype_5numpy_flexible = __Pyx_ImportType(__pyx_t_1, "numpy", "flexible", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_flexible) __PYX_ERR(2, 829, __pyx_L1_error)
  __pyx_ptype_5numpy_character = __Pyx_ImportType(__pyx_t_1, "numpy", "character", sizeof(PyObject), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_5numpy_character) __PYX_ERR(2, 831, __pyx_L1_error)
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType(__pyx_t_1, "numpy", "ufunc", sizeof(PyUFuncObject), __Pyx_ImportType_CheckSize_Ignore);
   if (!__pyx_ptype_5numpy_ufunc) __PYX_ERR(2, 869, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.data_type.order_book"); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.data_type.order_book", "OrderBook", sizeof(struct __pyx_obj_10hummingbot_4core_9data_type_10order_book_OrderBook), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook) __PYX_ERR(9, 12, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook = (struct __pyx_vtabstruct_10hummingbot_4core_9data_type_10order_book_OrderBook*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_9data_type_10order_book_OrderBook); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_9data_type_10order_book_OrderBook)) __PYX_ERR(9, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.clock"); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_5clock_Clock = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.clock", "Clock", sizeof(struct __pyx_obj_10hummingbot_4core_5clock_Clock), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_5clock_Clock) __PYX_ERR(10, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.time_iterator"); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.time_iterator", "TimeIterator", sizeof(struct __pyx_obj_10hummingbot_4core_13time_iterator_TimeIterator), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator) __PYX_ERR(11, 7, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator = (struct __pyx_vtabstruct_10hummingbot_4core_13time_iterator_TimeIterator*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_13time_iterator_TimeIterator); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_13time_iterator_TimeIterator)) __PYX_ERR(11, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.core.network_iterator"); if (unlikely(!__pyx_t_1)) __PYX_ERR(12, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator = __Pyx_ImportType(__pyx_t_1, "hummingbot.core.network_iterator", "NetworkIterator", sizeof(struct __pyx_obj_10hummingbot_4core_16network_iterator_NetworkIterator), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator) __PYX_ERR(12, 6, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator = (struct __pyx_vtabstruct_10hummingbot_4core_16network_iterator_NetworkIterator*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_4core_16network_iterator_NetworkIterator); if (unlikely(!__pyx_vtabptr_10hummingbot_4core_16network_iterator_NetworkIterator)) __PYX_ERR(12, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.connector_base"); if (unlikely(!__pyx_t_1)) __PYX_ERR(13, 5, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.connector_base", "ConnectorBase", sizeof(struct __pyx_obj_10hummingbot_9connector_14connector_base_ConnectorBase), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase) __PYX_ERR(13, 5, __pyx_L1_error)
  __pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase = (struct __pyx_vtabstruct_10hummingbot_9connector_14connector_base_ConnectorBase*)__Pyx_GetVtable(__pyx_ptype_10hummingbot_9connector_14connector_base_ConnectorBase); if (unlikely(!__pyx_vtabptr_10hummingbot_9connector_14connector_base_ConnectorBase)) __PYX_ERR(13, 5, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("hummingbot.connector.trading_rule"); if (unlikely(!__pyx_t_1)) __PYX_ERR(14, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule = __Pyx_ImportType(__pyx_t_1, "hummingbot.connector.trading_rule", "TradingRule", sizeof(struct __pyx_obj_10hummingbot_9connector_12trading_rule_TradingRule), __Pyx_ImportType_CheckSize_Warn);
   if (!__pyx_ptype_10hummingbot_9connector_12trading_rule_TradingRule) __PYX_ERR(14, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}


#if PY_MAJOR_VERSION >= 3
#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_bittrex_exchange(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_bittrex_exchange},
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "bittrex_exchange",
      0, /* m_doc */
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      0, /* m_size */
    #elif CYTHON_COMPILING_IN_LIMITED_API
      sizeof(__pyx_mstate), /* m_size */
    #else
      -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_COMPILING_IN_LIMITED_API
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif
#endif

#ifndef CYTHON_NO_PYINIT_EXPORT
#define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#elif PY_MAJOR_VERSION < 3
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" void
#else
#define __Pyx_PyMODINIT_FUNC void
#endif
#else
#ifdef __cplusplus
#define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
#else
#define __Pyx_PyMODINIT_FUNC PyObject *
#endif
#endif


#if PY_MAJOR_VERSION < 3
__Pyx_PyMODINIT_FUNC initbittrex_exchange(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC initbittrex_exchange(void)
#else
__Pyx_PyMODINIT_FUNC PyInit_bittrex_exchange(void) CYTHON_SMALL_CODE; /*proto*/
__Pyx_PyMODINIT_FUNC PyInit_bittrex_exchange(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    #if PY_VERSION_HEX >= 0x030700A1
    static PY_INT64_T main_interpreter_id = -1;
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return (unlikely(current_id == -1)) ? -1 : 0;
    } else if (unlikely(main_interpreter_id != current_id))
    #else
    static PyInterpreterState *main_interpreter = NULL;
    PyInterpreterState *current_interpreter = PyThreadState_Get()->interp;
    if (!main_interpreter) {
        main_interpreter = current_interpreter;
    } else if (unlikely(main_interpreter != current_interpreter))
    #endif
    {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *module, const char* from_name, const char* to_name, int allow_none)
#else
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
#endif
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
#if CYTHON_COMPILING_IN_LIMITED_API
            result = PyModule_AddObject(module, to_name, value);
#else
            result = PyDict_SetItemString(moddict, to_name, value);
#endif
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    if (__Pyx_check_single_interpreter())
        return NULL;
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    moddict = module;
#else
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
#endif
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_bittrex_exchange(PyObject *__pyx_pyinit_module)
#endif
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'bittrex_exchange' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #elif PY_MAJOR_VERSION >= 3
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_m = __pyx_pyinit_module;
  Py_INCREF(__pyx_m);
  #else
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("bittrex_exchange", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #elif CYTHON_COMPILING_IN_LIMITED_API
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely((PyState_AddModule(__pyx_t_1, &__pyx_moduledef) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #endif
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_b);
  __pyx_cython_runtime = PyImport_AddModule((char *) "cython_runtime"); if (unlikely(!__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_cython_runtime);
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif
  __Pyx_RefNannySetupContext("__Pyx_PyMODINIT_FUNC PyInit_bittrex_exchange(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(WITH_THREAD) && PY_VERSION_HEX < 0x030700F0 && defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  PyEval_InitThreads();
  #endif
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_hummingbot__connector__exchange__bittrex__bittrex_exchange) {
    if (PyObject_SetAttr(__pyx_m, __pyx_n_s_name, __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "hummingbot.connector.exchange.bittrex.bittrex_exchange")) {
      if (unlikely((PyDict_SetItemString(modules, "hummingbot.connector.exchange.bittrex.bittrex_exchange", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code();
  (void)__Pyx_modinit_variable_export_code();
  (void)__Pyx_modinit_function_export_code();
  if (unlikely((__Pyx_modinit_type_init_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code() < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code();
  (void)__Pyx_modinit_function_import_code();
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1
 * import asyncio             # <<<<<<<<<<<<<<
 * import logging
 * from decimal import Decimal
 */
  __pyx_t_1 = __Pyx_patch_asyncio(__Pyx_ImportDottedModule(__pyx_n_s_asyncio, NULL)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_asyncio, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":2
 * import asyncio
 * import logging             # <<<<<<<<<<<<<<
 * from decimal import Decimal
 * from typing import Optional, List, Dict, Any, AsyncIterable
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_logging, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logging, __pyx_t_1) < 0) __PYX_ERR(0, 2, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":3
 * import asyncio
 * import logging
 * from decimal import Decimal             # <<<<<<<<<<<<<<
 * from typing import Optional, List, Dict, Any, AsyncIterable
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_Decimal);
  __Pyx_GIVEREF(__pyx_n_s_Decimal);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_Decimal);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_decimal, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Decimal, __pyx_t_1) < 0) __PYX_ERR(0, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":4
 * import logging
 * from decimal import Decimal
 * from typing import Optional, List, Dict, Any, AsyncIterable             # <<<<<<<<<<<<<<
 * 
 * import aiohttp
 */
  __pyx_t_2 = PyList_New(5); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_Optional);
  __Pyx_GIVEREF(__pyx_n_s_Optional);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_Optional);
  __Pyx_INCREF(__pyx_n_s_List);
  __Pyx_GIVEREF(__pyx_n_s_List);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_List);
  __Pyx_INCREF(__pyx_n_s_Dict);
  __Pyx_GIVEREF(__pyx_n_s_Dict);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_Dict);
  __Pyx_INCREF(__pyx_n_s_Any);
  __Pyx_GIVEREF(__pyx_n_s_Any);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_Any);
  __Pyx_INCREF(__pyx_n_s_AsyncIterable);
  __Pyx_GIVEREF(__pyx_n_s_AsyncIterable);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_AsyncIterable);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_typing, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Optional); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Optional, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_List); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_List, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Dict); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Dict, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_Any); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Any, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_AsyncIterable); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_AsyncIterable, __pyx_t_2) < 0) __PYX_ERR(0, 4, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":6
 * from typing import Optional, List, Dict, Any, AsyncIterable
 * 
 * import aiohttp             # <<<<<<<<<<<<<<
 * import pandas as pd
 * from async_timeout import timeout
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_aiohttp, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_aiohttp, __pyx_t_1) < 0) __PYX_ERR(0, 6, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":7
 * 
 * import aiohttp
 * import pandas as pd             # <<<<<<<<<<<<<<
 * from async_timeout import timeout
 * from libc.stdint cimport int64_t
 */
  __pyx_t_1 = __Pyx_ImportDottedModule(__pyx_n_s_pandas, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pd, __pyx_t_1) < 0) __PYX_ERR(0, 7, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":8
 * import aiohttp
 * import pandas as pd
 * from async_timeout import timeout             # <<<<<<<<<<<<<<
 * from libc.stdint cimport int64_t
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_timeout);
  __Pyx_GIVEREF(__pyx_n_s_timeout);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_timeout);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_async_timeout, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_timeout); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_timeout, __pyx_t_1) < 0) __PYX_ERR(0, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":12
 * 
 * from hummingbot.core.clock cimport Clock
 * from hummingbot.core.data_type.cancellation_result import CancellationResult             # <<<<<<<<<<<<<<
 * from hummingbot.core.data_type.limit_order import LimitOrder
 * from hummingbot.core.data_type.order_book cimport OrderBook
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_CancellationResult);
  __Pyx_GIVEREF(__pyx_n_s_CancellationResult);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_CancellationResult);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_data_type_cancel, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_CancellationResult); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_CancellationResult, __pyx_t_2) < 0) __PYX_ERR(0, 12, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":13
 * from hummingbot.core.clock cimport Clock
 * from hummingbot.core.data_type.cancellation_result import CancellationResult
 * from hummingbot.core.data_type.limit_order import LimitOrder             # <<<<<<<<<<<<<<
 * from hummingbot.core.data_type.order_book cimport OrderBook
 * from hummingbot.core.event.events import (
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_LimitOrder);
  __Pyx_GIVEREF(__pyx_n_s_LimitOrder);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_LimitOrder);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_data_type_limit, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_LimitOrder); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_LimitOrder, __pyx_t_1) < 0) __PYX_ERR(0, 13, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":16
 * from hummingbot.core.data_type.order_book cimport OrderBook
 * from hummingbot.core.event.events import (
 *     MarketEvent,             # <<<<<<<<<<<<<<
 *     OrderType,
 *     OrderFilledEvent,
 */
  __pyx_t_2 = PyList_New(12); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_MarketEvent);
  __Pyx_GIVEREF(__pyx_n_s_MarketEvent);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_MarketEvent);
  __Pyx_INCREF(__pyx_n_s_OrderType);
  __Pyx_GIVEREF(__pyx_n_s_OrderType);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_OrderType);
  __Pyx_INCREF(__pyx_n_s_OrderFilledEvent);
  __Pyx_GIVEREF(__pyx_n_s_OrderFilledEvent);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_OrderFilledEvent);
  __Pyx_INCREF(__pyx_n_s_TradeType);
  __Pyx_GIVEREF(__pyx_n_s_TradeType);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_TradeType);
  __Pyx_INCREF(__pyx_n_s_TradeFee);
  __Pyx_GIVEREF(__pyx_n_s_TradeFee);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_TradeFee);
  __Pyx_INCREF(__pyx_n_s_BuyOrderCompletedEvent);
  __Pyx_GIVEREF(__pyx_n_s_BuyOrderCompletedEvent);
  PyList_SET_ITEM(__pyx_t_2, 5, __pyx_n_s_BuyOrderCompletedEvent);
  __Pyx_INCREF(__pyx_n_s_SellOrderCompletedEvent);
  __Pyx_GIVEREF(__pyx_n_s_SellOrderCompletedEvent);
  PyList_SET_ITEM(__pyx_t_2, 6, __pyx_n_s_SellOrderCompletedEvent);
  __Pyx_INCREF(__pyx_n_s_OrderCancelledEvent);
  __Pyx_GIVEREF(__pyx_n_s_OrderCancelledEvent);
  PyList_SET_ITEM(__pyx_t_2, 7, __pyx_n_s_OrderCancelledEvent);
  __Pyx_INCREF(__pyx_n_s_MarketTransactionFailureEvent);
  __Pyx_GIVEREF(__pyx_n_s_MarketTransactionFailureEvent);
  PyList_SET_ITEM(__pyx_t_2, 8, __pyx_n_s_MarketTransactionFailureEvent);
  __Pyx_INCREF(__pyx_n_s_MarketOrderFailureEvent);
  __Pyx_GIVEREF(__pyx_n_s_MarketOrderFailureEvent);
  PyList_SET_ITEM(__pyx_t_2, 9, __pyx_n_s_MarketOrderFailureEvent);
  __Pyx_INCREF(__pyx_n_s_SellOrderCreatedEvent);
  __Pyx_GIVEREF(__pyx_n_s_SellOrderCreatedEvent);
  PyList_SET_ITEM(__pyx_t_2, 10, __pyx_n_s_SellOrderCreatedEvent);
  __Pyx_INCREF(__pyx_n_s_BuyOrderCreatedEvent);
  __Pyx_GIVEREF(__pyx_n_s_BuyOrderCreatedEvent);
  PyList_SET_ITEM(__pyx_t_2, 11, __pyx_n_s_BuyOrderCreatedEvent);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":15
 * from hummingbot.core.data_type.limit_order import LimitOrder
 * from hummingbot.core.data_type.order_book cimport OrderBook
 * from hummingbot.core.event.events import (             # <<<<<<<<<<<<<<
 *     MarketEvent,
 *     OrderType,
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_event_events, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MarketEvent, __pyx_t_2) < 0) __PYX_ERR(0, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderType, __pyx_t_2) < 0) __PYX_ERR(0, 17, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderFilledEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderFilledEvent, __pyx_t_2) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_TradeType); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TradeType, __pyx_t_2) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_TradeFee); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TradeFee, __pyx_t_2) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_BuyOrderCompletedEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BuyOrderCompletedEvent, __pyx_t_2) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_SellOrderCompletedEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SellOrderCompletedEvent, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_OrderCancelledEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_OrderCancelledEvent, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_MarketTransactionFailureEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MarketTransactionFailureEvent, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_MarketOrderFailureEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MarketOrderFailureEvent, __pyx_t_2) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_SellOrderCreatedEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_SellOrderCreatedEvent, __pyx_t_2) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_BuyOrderCreatedEvent); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 15, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BuyOrderCreatedEvent, __pyx_t_2) < 0) __PYX_ERR(0, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":23
 *     SellOrderCompletedEvent, OrderCancelledEvent, MarketTransactionFailureEvent,
 *     MarketOrderFailureEvent, SellOrderCreatedEvent, BuyOrderCreatedEvent)
 * from hummingbot.core.network_iterator import NetworkStatus             # <<<<<<<<<<<<<<
 * from hummingbot.core.utils.async_utils import safe_ensure_future, safe_gather
 * from hummingbot.logger import HummingbotLogger
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_NetworkStatus);
  __Pyx_GIVEREF(__pyx_n_s_NetworkStatus);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_NetworkStatus);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_network_iterator, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_NetworkStatus); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NetworkStatus, __pyx_t_1) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":24
 *     MarketOrderFailureEvent, SellOrderCreatedEvent, BuyOrderCreatedEvent)
 * from hummingbot.core.network_iterator import NetworkStatus
 * from hummingbot.core.utils.async_utils import safe_ensure_future, safe_gather             # <<<<<<<<<<<<<<
 * from hummingbot.logger import HummingbotLogger
 * from hummingbot.connector.exchange.bittrex.bittrex_api_order_book_data_source import BittrexAPIOrderBookDataSource
 */
  __pyx_t_2 = PyList_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_safe_ensure_future);
  __Pyx_GIVEREF(__pyx_n_s_safe_ensure_future);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_safe_ensure_future);
  __Pyx_INCREF(__pyx_n_s_safe_gather);
  __Pyx_GIVEREF(__pyx_n_s_safe_gather);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_safe_gather);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_utils_async_util, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_safe_ensure_future); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_safe_ensure_future, __pyx_t_2) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_safe_gather); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_safe_gather, __pyx_t_2) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":25
 * from hummingbot.core.network_iterator import NetworkStatus
 * from hummingbot.core.utils.async_utils import safe_ensure_future, safe_gather
 * from hummingbot.logger import HummingbotLogger             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange.bittrex.bittrex_api_order_book_data_source import BittrexAPIOrderBookDataSource
 * from hummingbot.connector.exchange.bittrex.bittrex_auth import BittrexAuth
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_HummingbotLogger);
  __Pyx_GIVEREF(__pyx_n_s_HummingbotLogger);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_HummingbotLogger);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_logger, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_HummingbotLogger); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_HummingbotLogger, __pyx_t_1) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":26
 * from hummingbot.core.utils.async_utils import safe_ensure_future, safe_gather
 * from hummingbot.logger import HummingbotLogger
 * from hummingbot.connector.exchange.bittrex.bittrex_api_order_book_data_source import BittrexAPIOrderBookDataSource             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange.bittrex.bittrex_auth import BittrexAuth
 * from hummingbot.connector.exchange.bittrex.bittrex_in_flight_order import BittrexInFlightOrder
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_BittrexAPIOrderBookDataSource);
  __Pyx_GIVEREF(__pyx_n_s_BittrexAPIOrderBookDataSource);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_BittrexAPIOrderBookDataSource);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_bi_2, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_BittrexAPIOrderBookDataSource); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BittrexAPIOrderBookDataSource, __pyx_t_2) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":27
 * from hummingbot.logger import HummingbotLogger
 * from hummingbot.connector.exchange.bittrex.bittrex_api_order_book_data_source import BittrexAPIOrderBookDataSource
 * from hummingbot.connector.exchange.bittrex.bittrex_auth import BittrexAuth             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange.bittrex.bittrex_in_flight_order import BittrexInFlightOrder
 * from hummingbot.connector.exchange.bittrex.bittrex_order_book_tracker import BittrexOrderBookTracker
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_BittrexAuth);
  __Pyx_GIVEREF(__pyx_n_s_BittrexAuth);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_BittrexAuth);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_bi_3, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_BittrexAuth); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BittrexAuth, __pyx_t_1) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":28
 * from hummingbot.connector.exchange.bittrex.bittrex_api_order_book_data_source import BittrexAPIOrderBookDataSource
 * from hummingbot.connector.exchange.bittrex.bittrex_auth import BittrexAuth
 * from hummingbot.connector.exchange.bittrex.bittrex_in_flight_order import BittrexInFlightOrder             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange.bittrex.bittrex_order_book_tracker import BittrexOrderBookTracker
 * from hummingbot.connector.exchange.bittrex.bittrex_user_stream_tracker import BittrexUserStreamTracker
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_BittrexInFlightOrder);
  __Pyx_GIVEREF(__pyx_n_s_BittrexInFlightOrder);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_BittrexInFlightOrder);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_bi_4, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_BittrexInFlightOrder); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BittrexInFlightOrder, __pyx_t_2) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":29
 * from hummingbot.connector.exchange.bittrex.bittrex_auth import BittrexAuth
 * from hummingbot.connector.exchange.bittrex.bittrex_in_flight_order import BittrexInFlightOrder
 * from hummingbot.connector.exchange.bittrex.bittrex_order_book_tracker import BittrexOrderBookTracker             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange.bittrex.bittrex_user_stream_tracker import BittrexUserStreamTracker
 * from hummingbot.market.market_base import NaN
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_BittrexOrderBookTracker);
  __Pyx_GIVEREF(__pyx_n_s_BittrexOrderBookTracker);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_BittrexOrderBookTracker);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_bi_5, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_BittrexOrderBookTracker); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BittrexOrderBookTracker, __pyx_t_1) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":30
 * from hummingbot.connector.exchange.bittrex.bittrex_in_flight_order import BittrexInFlightOrder
 * from hummingbot.connector.exchange.bittrex.bittrex_order_book_tracker import BittrexOrderBookTracker
 * from hummingbot.connector.exchange.bittrex.bittrex_user_stream_tracker import BittrexUserStreamTracker             # <<<<<<<<<<<<<<
 * from hummingbot.market.market_base import NaN
 * from hummingbot.connector.trading_rule cimport TradingRule
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_BittrexUserStreamTracker);
  __Pyx_GIVEREF(__pyx_n_s_BittrexUserStreamTracker);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_BittrexUserStreamTracker);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_bi_6, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_BittrexUserStreamTracker); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_BittrexUserStreamTracker, __pyx_t_2) < 0) __PYX_ERR(0, 30, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":31
 * from hummingbot.connector.exchange.bittrex.bittrex_order_book_tracker import BittrexOrderBookTracker
 * from hummingbot.connector.exchange.bittrex.bittrex_user_stream_tracker import BittrexUserStreamTracker
 * from hummingbot.market.market_base import NaN             # <<<<<<<<<<<<<<
 * from hummingbot.connector.trading_rule cimport TradingRule
 * from hummingbot.core.utils.tracking_nonce import get_tracking_nonce
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_NaN);
  __Pyx_GIVEREF(__pyx_n_s_NaN);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_NaN);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_market_market_base, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_NaN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_NaN, __pyx_t_1) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":33
 * from hummingbot.market.market_base import NaN
 * from hummingbot.connector.trading_rule cimport TradingRule
 * from hummingbot.core.utils.tracking_nonce import get_tracking_nonce             # <<<<<<<<<<<<<<
 * from hummingbot.core.utils.estimate_fee import estimate_fee
 * from hummingbot.connector.exchange_base import ExchangeBase
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_get_tracking_nonce);
  __Pyx_GIVEREF(__pyx_n_s_get_tracking_nonce);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_get_tracking_nonce);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_core_utils_tracking_n, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_get_tracking_nonce); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_get_tracking_nonce, __pyx_t_2) < 0) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":34
 * from hummingbot.connector.trading_rule cimport TradingRule
 * from hummingbot.core.utils.tracking_nonce import get_tracking_nonce
 * from hummingbot.core.utils.estimate_fee import estimate_fee             # <<<<<<<<<<<<<<
 * from hummingbot.connector.exchange_base import ExchangeBase
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_estimate_fee);
  __Pyx_GIVEREF(__pyx_n_s_estimate_fee);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_estimate_fee);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_hummingbot_core_utils_estimate_f, __pyx_t_1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_estimate_fee); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_estimate_fee, __pyx_t_1) < 0) __PYX_ERR(0, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":35
 * from hummingbot.core.utils.tracking_nonce import get_tracking_nonce
 * from hummingbot.core.utils.estimate_fee import estimate_fee
 * from hummingbot.connector.exchange_base import ExchangeBase             # <<<<<<<<<<<<<<
 * 
 * bm_logger = None
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_ExchangeBase);
  __Pyx_GIVEREF(__pyx_n_s_ExchangeBase);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_ExchangeBase);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_hummingbot_connector_exchange_ba, __pyx_t_2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":37
 * from hummingbot.connector.exchange_base import ExchangeBase
 * 
 * bm_logger = None             # <<<<<<<<<<<<<<
 * s_decimal_0 = Decimal(0)
 * s_decimal_NaN = Decimal("NaN")
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_bm_logger, Py_None) < 0) __PYX_ERR(0, 37, __pyx_L1_error)

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":38
 * 
 * bm_logger = None
 * s_decimal_0 = Decimal(0)             # <<<<<<<<<<<<<<
 * s_decimal_NaN = Decimal("NaN")
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__50, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_s_decimal_0, __pyx_t_2) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":39
 * bm_logger = None
 * s_decimal_0 = Decimal(0)
 * s_decimal_NaN = Decimal("NaN")             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__51, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_s_decimal_NaN, __pyx_t_1) < 0) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BittrexExchangeTransactionTracke_2, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__53)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_33BittrexExchangeTransactionTracker_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BittrexExchangeTransactionTracke_3, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__55)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":55
 * 
 * cdef class BittrexExchange(ExchangeBase):
 *     MARKET_RECEIVED_ASSET_EVENT_TAG = MarketEvent.ReceivedAsset.value             # <<<<<<<<<<<<<<
 *     MARKET_BUY_ORDER_COMPLETED_EVENT_TAG = MarketEvent.BuyOrderCompleted.value
 *     MARKET_SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_ReceivedAsset); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_MARKET_RECEIVED_ASSET_EVENT_TAG, __pyx_t_1) < 0) __PYX_ERR(0, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":56
 * cdef class BittrexExchange(ExchangeBase):
 *     MARKET_RECEIVED_ASSET_EVENT_TAG = MarketEvent.ReceivedAsset.value
 *     MARKET_BUY_ORDER_COMPLETED_EVENT_TAG = MarketEvent.BuyOrderCompleted.value             # <<<<<<<<<<<<<<
 *     MARKET_SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value
 *     MARKET_ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_BuyOrderCompleted); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_MARKET_BUY_ORDER_COMPLETED_EVENT, __pyx_t_1) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":57
 *     MARKET_RECEIVED_ASSET_EVENT_TAG = MarketEvent.ReceivedAsset.value
 *     MARKET_BUY_ORDER_COMPLETED_EVENT_TAG = MarketEvent.BuyOrderCompleted.value
 *     MARKET_SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value             # <<<<<<<<<<<<<<
 *     MARKET_ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value
 *     MARKET_TRANSACTION_FAILURE_EVENT_TAG = MarketEvent.TransactionFailure.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_SellOrderCompleted); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_MARKET_SELL_ORDER_COMPLETED_EVEN, __pyx_t_1) < 0) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":58
 *     MARKET_BUY_ORDER_COMPLETED_EVENT_TAG = MarketEvent.BuyOrderCompleted.value
 *     MARKET_SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value
 *     MARKET_ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value             # <<<<<<<<<<<<<<
 *     MARKET_TRANSACTION_FAILURE_EVENT_TAG = MarketEvent.TransactionFailure.value
 *     MARKET_ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_OrderCancelled); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_MARKET_ORDER_CANCELLED_EVENT_TAG, __pyx_t_1) < 0) __PYX_ERR(0, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":59
 *     MARKET_SELL_ORDER_COMPLETED_EVENT_TAG = MarketEvent.SellOrderCompleted.value
 *     MARKET_ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value
 *     MARKET_TRANSACTION_FAILURE_EVENT_TAG = MarketEvent.TransactionFailure.value             # <<<<<<<<<<<<<<
 *     MARKET_ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value
 *     MARKET_ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_TransactionFailure); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_MARKET_TRANSACTION_FAILURE_EVENT, __pyx_t_1) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":60
 *     MARKET_ORDER_CANCELLED_EVENT_TAG = MarketEvent.OrderCancelled.value
 *     MARKET_TRANSACTION_FAILURE_EVENT_TAG = MarketEvent.TransactionFailure.value
 *     MARKET_ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value             # <<<<<<<<<<<<<<
 *     MARKET_ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value
 *     MARKET_BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_OrderFailure); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_MARKET_ORDER_FAILURE_EVENT_TAG, __pyx_t_1) < 0) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":61
 *     MARKET_TRANSACTION_FAILURE_EVENT_TAG = MarketEvent.TransactionFailure.value
 *     MARKET_ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value
 *     MARKET_ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value             # <<<<<<<<<<<<<<
 *     MARKET_BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value
 *     MARKET_SELL_ORDER_CREATED_EVENT_TAG = MarketEvent.SellOrderCreated.value
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_OrderFilled); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_MARKET_ORDER_FILLED_EVENT_TAG, __pyx_t_1) < 0) __PYX_ERR(0, 61, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":62
 *     MARKET_ORDER_FAILURE_EVENT_TAG = MarketEvent.OrderFailure.value
 *     MARKET_ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value
 *     MARKET_BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value             # <<<<<<<<<<<<<<
 *     MARKET_SELL_ORDER_CREATED_EVENT_TAG = MarketEvent.SellOrderCreated.value
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_BuyOrderCreated); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_MARKET_BUY_ORDER_CREATED_EVENT_T, __pyx_t_1) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":63
 *     MARKET_ORDER_FILLED_EVENT_TAG = MarketEvent.OrderFilled.value
 *     MARKET_BUY_ORDER_CREATED_EVENT_TAG = MarketEvent.BuyOrderCreated.value
 *     MARKET_SELL_ORDER_CREATED_EVENT_TAG = MarketEvent.SellOrderCreated.value             # <<<<<<<<<<<<<<
 * 
 *     API_CALL_TIMEOUT = 10.0
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_MarketEvent); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_SellOrderCreated); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_MARKET_SELL_ORDER_CREATED_EVENT, __pyx_t_1) < 0) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":65
 *     MARKET_SELL_ORDER_CREATED_EVENT_TAG = MarketEvent.SellOrderCreated.value
 * 
 *     API_CALL_TIMEOUT = 10.0             # <<<<<<<<<<<<<<
 *     UPDATE_ORDERS_INTERVAL = 10.0
 *     ORDER_NOT_EXIST_CONFIRMATION_COUNT = 3
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_API_CALL_TIMEOUT, __pyx_float_10_0) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":66
 * 
 *     API_CALL_TIMEOUT = 10.0
 *     UPDATE_ORDERS_INTERVAL = 10.0             # <<<<<<<<<<<<<<
 *     ORDER_NOT_EXIST_CONFIRMATION_COUNT = 3
 * 
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_UPDATE_ORDERS_INTERVAL, __pyx_float_10_0) < 0) __PYX_ERR(0, 66, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":67
 *     API_CALL_TIMEOUT = 10.0
 *     UPDATE_ORDERS_INTERVAL = 10.0
 *     ORDER_NOT_EXIST_CONFIRMATION_COUNT = 3             # <<<<<<<<<<<<<<
 * 
 *     BITTREX_API_ENDPOINT = "https://api.bittrex.com/v3"
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_ORDER_NOT_EXIST_CONFIRMATION_COU, __pyx_int_3) < 0) __PYX_ERR(0, 67, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":69
 *     ORDER_NOT_EXIST_CONFIRMATION_COUNT = 3
 * 
 *     BITTREX_API_ENDPOINT = "https://api.bittrex.com/v3"             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_BITTREX_API_ENDPOINT, __pyx_kp_u_https_api_bittrex_com_v3) < 0) __PYX_ERR(0, 69, __pyx_L1_error)
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":71
 *     BITTREX_API_ENDPOINT = "https://api.bittrex.com/v3"
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def logger(cls) -> HummingbotLogger:
 *         global bm_logger
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_n_s_HummingbotLogger) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_1logger, __Pyx_CYFUNCTION_CLASSMETHOD | __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BittrexExchange_logger, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__57)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_logger, __pyx_t_2) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);
  __Pyx_GetNameInClass(__pyx_t_2, (PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange, __pyx_n_s_logger); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_logger, __pyx_t_1) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":151
 *         return self._in_flight_orders
 * 
 *     def restore_tracking_states(self, saved_states: Dict[str, any]):             # <<<<<<<<<<<<<<
 *         self._in_flight_orders.update({
 *             key: BittrexInFlightOrder.from_json(value)
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_saved_states, __pyx_kp_s_Dict_str_any) < 0) __PYX_ERR(0, 151, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_5restore_tracking_states, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BittrexExchange_restore_tracking, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__59)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_restore_tracking_states, __pyx_t_2) < 0) __PYX_ERR(0, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":157
 *         })
 * 
 *     async def get_active_exchange_markets(self) -> pd.DataFrame:             # <<<<<<<<<<<<<<
 *         return await BittrexAPIOrderBookDataSource.get_active_exchange_markets()
 * 
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_kp_s_pd_DataFrame) < 0) __PYX_ERR(0, 157, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_7get_active_exchange_markets, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BittrexExchange_get_active_excha, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__2)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_get_active_exchange_markets, __pyx_t_1) < 0) __PYX_ERR(0, 157, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":199
 *         return estimate_fee("bittrex", is_maker)
 * 
 *     async def _update_balances(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             dict account_info
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_10_update_balances, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BittrexExchange__update_balances, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__3)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_update_balances, __pyx_t_1) < 0) __PYX_ERR(0, 199, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":224
 *             del self._account_balances[asset_name]
 * 
 *     def _format_trading_rules(self, market_dict: Dict[str, Any]) -> List[TradingRule]:             # <<<<<<<<<<<<<<
 *         cdef:
 *             list retval = []
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_market_dict, __pyx_kp_s_Dict_str_Any) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_kp_s_List_TradingRule) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_13_format_trading_rules, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BittrexExchange__format_trading, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__63)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_format_trading_rules, __pyx_t_2) < 0) __PYX_ERR(0, 224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":269
 *         return retval
 * 
 *     async def _update_trading_rules(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             # The poll interval for withdraw rules is 60 seconds.
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_15_update_trading_rules, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BittrexExchange__update_trading, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__5)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_update_trading_rules, __pyx_t_2) < 0) __PYX_ERR(0, 269, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":300
 *                 self._trading_rules[trading_rule.trading_pair] = trading_rule
 * 
 *     async def list_orders(self) -> List[Any]:             # <<<<<<<<<<<<<<
 *         """
 *         Only a list of all currently open orders(does not include filled orders)
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_kp_s_List_Any) < 0) __PYX_ERR(0, 300, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_18list_orders, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BittrexExchange_list_orders, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__7)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_list_orders, __pyx_t_1) < 0) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":334
 *         return result
 * 
 *     async def _update_order_status(self):             # <<<<<<<<<<<<<<
 *         cdef:
 *             # This is intended to be a backup measure to close straggler orders, in case Bittrex's user stream events
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_21_update_order_status, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BittrexExchange__update_order_st, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__8)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_update_order_status, __pyx_t_1) < 0) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":433
 *                     self._process_api_closed(order, tracked_order)
 * 
 *     def _process_api_closed(self, order: Dict, tracked_order: BittrexInFlightOrder):             # <<<<<<<<<<<<<<
 *         order_type = tracked_order.order_type
 *         trade_type = tracked_order.trade_type
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order_2, __pyx_n_s_Dict) < 0) __PYX_ERR(0, 433, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_tracked_order, __pyx_n_s_BittrexInFlightOrder) < 0) __PYX_ERR(0, 433, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_24_process_api_closed, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BittrexExchange__process_api_clo, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__68)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_process_api_closed, __pyx_t_2) < 0) __PYX_ERR(0, 433, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":478
 *         self.c_stop_tracking_order(client_order_id)
 * 
 *     async def _iter_user_stream_queue(self) -> AsyncIterable[Dict[str, Any]]:             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_kp_s_AsyncIterable_Dict_str_Any) < 0) __PYX_ERR(0, 478, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_26_iter_user_stream_queue, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BittrexExchange__iter_user_strea, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__13)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_iter_user_stream_queue, __pyx_t_1) < 0) __PYX_ERR(0, 478, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":488
 *                 await asyncio.sleep(1.0)
 * 
 *     async def _user_stream_event_listener(self):             # <<<<<<<<<<<<<<
 *         async for stream_message in self._iter_user_stream_queue():
 *             try:
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_29_user_stream_event_listener, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BittrexExchange__user_stream_eve, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__15)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_user_stream_event_listener, __pyx_t_1) < 0) __PYX_ERR(0, 488, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":603
 *                 await asyncio.sleep(5.0)
 * 
 *     async def _status_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_32_status_polling_loop, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BittrexExchange__status_polling, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__17)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_status_polling_loop, __pyx_t_1) < 0) __PYX_ERR(0, 603, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":623
 *                 await asyncio.sleep(5.0)
 * 
 *     async def _trading_rules_polling_loop(self):             # <<<<<<<<<<<<<<
 *         while True:
 *             try:
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_35_trading_rules_polling_loop, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BittrexExchange__trading_rules_p, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__19)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_trading_rules_polling_loop, __pyx_t_1) < 0) __PYX_ERR(0, 623, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":645
 *         return order_books[trading_pair]
 * 
 *     def start_tracking_order(self,             # <<<<<<<<<<<<<<
 *                              order_id: str,
 *                              exchange_order_id: str,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order_id, __pyx_n_s_str) < 0) __PYX_ERR(0, 645, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_exchange_order_id, __pyx_n_s_str) < 0) __PYX_ERR(0, 645, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_trading_pair, __pyx_n_s_str) < 0) __PYX_ERR(0, 645, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order_type, __pyx_n_s_OrderType) < 0) __PYX_ERR(0, 645, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_trade_type, __pyx_n_s_TradeType) < 0) __PYX_ERR(0, 645, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_price, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 645, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_amount, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 645, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_38start_tracking_order, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BittrexExchange_start_tracking_o, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__74)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_start_tracking_order, __pyx_t_2) < 0) __PYX_ERR(0, 645, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":706
 *         return quantized_amount
 * 
 *     def supported_order_types(self):             # <<<<<<<<<<<<<<
 *         return [OrderType.LIMIT, OrderType.LIMIT_MAKER]
 * 
 */
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_40supported_order_types, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BittrexExchange_supported_order, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__76)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_supported_order_types, __pyx_t_2) < 0) __PYX_ERR(0, 706, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":709
 *         return [OrderType.LIMIT, OrderType.LIMIT_MAKER]
 * 
 *     async def place_order(self,             # <<<<<<<<<<<<<<
 *                           order_id: str,
 *                           trading_pair: str,
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_order_id, __pyx_n_s_str) < 0) __PYX_ERR(0, 709, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_trading_pair, __pyx_n_s_str) < 0) __PYX_ERR(0, 709, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_amount, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 709, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_is_buy, __pyx_n_s_bool) < 0) __PYX_ERR(0, 709, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_order_type, __pyx_n_s_OrderType) < 0) __PYX_ERR(0, 709, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_price, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 709, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_kp_s_Dict_str_Any) < 0) __PYX_ERR(0, 709, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_42place_order, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BittrexExchange_place_order, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_place_order, __pyx_t_1) < 0) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":748
 *                           amount: Decimal,
 *                           order_type: OrderType,
 *                           price: Optional[Decimal] = s_decimal_0):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__24 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":743
 *         return api_response
 * 
 *     async def execute_buy(self,             # <<<<<<<<<<<<<<
 *                           order_id: str,
 *                           trading_pair: str,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order_id, __pyx_n_s_str) < 0) __PYX_ERR(0, 743, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_trading_pair, __pyx_n_s_str) < 0) __PYX_ERR(0, 743, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_amount, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 743, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order_type, __pyx_n_s_OrderType) < 0) __PYX_ERR(0, 743, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_price, __pyx_kp_s_Optional_Decimal) < 0) __PYX_ERR(0, 743, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_45execute_buy, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BittrexExchange_execute_buy, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__25)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_execute_buy, __pyx_t_3) < 0) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":830
 *                    str trading_pair,
 *                    object amount,
 *                    object order_type=OrderType.LIMIT,             # <<<<<<<<<<<<<<
 *                    object price=NaN,
 *                    dict kwargs={}):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_k__26 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":831
 *                    object amount,
 *                    object order_type=OrderType.LIMIT,
 *                    object price=NaN,             # <<<<<<<<<<<<<<
 *                    dict kwargs={}):
 *         cdef:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_NaN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 831, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__27 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":832
 *                    object order_type=OrderType.LIMIT,
 *                    object price=NaN,
 *                    dict kwargs={}):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__79 = ((PyObject*)__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":843
 *                            trading_pair: str,
 *                            amount: Decimal,
 *                            order_type: OrderType = OrderType.LIMIT,             # <<<<<<<<<<<<<<
 *                            price: Optional[Decimal] = NaN):
 *         cdef:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__28 = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":844
 *                            amount: Decimal,
 *                            order_type: OrderType = OrderType.LIMIT,
 *                            price: Optional[Decimal] = NaN):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_NaN); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_k__29 = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":843
 *                            trading_pair: str,
 *                            amount: Decimal,
 *                            order_type: OrderType = OrderType.LIMIT,             # <<<<<<<<<<<<<<
 *                            price: Optional[Decimal] = NaN):
 *         cdef:
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":844
 *                            amount: Decimal,
 *                            order_type: OrderType = OrderType.LIMIT,
 *                            price: Optional[Decimal] = NaN):             # <<<<<<<<<<<<<<
 *         cdef:
 *             TradingRule trading_rule = self._trading_rules[trading_pair]
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_NaN); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 844, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":839
 *         return order_id
 * 
 *     async def execute_sell(self,             # <<<<<<<<<<<<<<
 *                            order_id: str,
 *                            trading_pair: str,
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_order_id, __pyx_n_s_str) < 0) __PYX_ERR(0, 839, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_trading_pair, __pyx_n_s_str) < 0) __PYX_ERR(0, 839, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_amount, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 839, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_order_type, __pyx_n_s_OrderType) < 0) __PYX_ERR(0, 839, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_price, __pyx_kp_s_Optional_Decimal) < 0) __PYX_ERR(0, 839, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_48execute_sell, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BittrexExchange_execute_sell, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__30)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_1, __pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_execute_sell, __pyx_t_1) < 0) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":922
 *                     str trading_pair,
 *                     object amount,
 *                     object order_type=OrderType.LIMIT,             # <<<<<<<<<<<<<<
 *                     object price=0.0,
 *                     dict kwargs={}):
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_LIMIT); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 922, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_k__31 = __pyx_t_3;
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":924
 *                     object order_type=OrderType.LIMIT,
 *                     object price=0.0,
 *                     dict kwargs={}):             # <<<<<<<<<<<<<<
 *         cdef:
 *             int64_t tracking_nonce = <int64_t> get_tracking_nonce()
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 924, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_k__81 = ((PyObject*)__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":932
 *         return order_id
 * 
 *     async def execute_cancel(self, trading_pair: str, order_id: str):             # <<<<<<<<<<<<<<
 *         try:
 *             tracked_order = self._in_flight_orders.get(order_id)
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_trading_pair, __pyx_n_s_str) < 0) __PYX_ERR(0, 932, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_order_id, __pyx_n_s_str) < 0) __PYX_ERR(0, 932, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_51execute_cancel, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BittrexExchange_execute_cancel, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__32)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_execute_cancel, __pyx_t_1) < 0) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":981
 *         return order_id
 * 
 *     async def cancel_all(self, timeout_seconds: float) -> List[CancellationResult]:             # <<<<<<<<<<<<<<
 *         incomplete_orders = [order for order in self._in_flight_orders.values() if not order.is_done]
 *         tasks = [self.execute_cancel(o.trading_pair, o.client_order_id) for o in incomplete_orders]
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_timeout_seconds, __pyx_n_s_float) < 0) __PYX_ERR(0, 981, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_kp_s_List_CancellationResult) < 0) __PYX_ERR(0, 981, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_54cancel_all, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BittrexExchange_cancel_all, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__34)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_cancel_all, __pyx_t_3) < 0) __PYX_ERR(0, 981, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1003
 *         return successful_cancellation + failed_cancellation
 * 
 *     async def _http_client(self) -> aiohttp.ClientSession:             # <<<<<<<<<<<<<<
 *         if self._shared_client is None:
 *             self._shared_client = aiohttp.ClientSession()
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return, __pyx_kp_s_aiohttp_ClientSession) < 0) __PYX_ERR(0, 1003, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_57_http_client, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BittrexExchange__http_client, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__37)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1003, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_http_client, __pyx_t_1) < 0) __PYX_ERR(0, 1003, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1008
 *         return self._shared_client
 * 
 *     async def _api_request(self,             # <<<<<<<<<<<<<<
 *                            http_method: str,
 *                            path_url: str = None,
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(6); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_http_method, __pyx_n_s_str) < 0) __PYX_ERR(0, 1008, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_path_url, __pyx_n_s_str) < 0) __PYX_ERR(0, 1008, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_params, __pyx_kp_s_Dict_str_any) < 0) __PYX_ERR(0, 1008, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_body, __pyx_kp_s_Dict_str_any) < 0) __PYX_ERR(0, 1008, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_subaccount_id, __pyx_n_s_str) < 0) __PYX_ERR(0, 1008, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_kp_s_Dict_str_Any) < 0) __PYX_ERR(0, 1008, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_60_api_request, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BittrexExchange__api_request, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__38)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1008, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_tuple__86);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_api_request, __pyx_t_3) < 0) __PYX_ERR(0, 1008, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1039
 *             return data
 * 
 *     async def check_network(self) -> NetworkStatus:             # <<<<<<<<<<<<<<
 *         try:
 *             await self._api_request("GET", path_url="/ping")
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_return, __pyx_n_s_NetworkStatus) < 0) __PYX_ERR(0, 1039, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_63check_network, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BittrexExchange_check_network, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__39)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_check_network, __pyx_t_1) < 0) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1048
 *         return NetworkStatus.CONNECTED
 * 
 *     def _stop_network(self):             # <<<<<<<<<<<<<<
 *         self._order_book_tracker.stop()
 *         if self._status_polling_task is not None:
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_66_stop_network, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BittrexExchange__stop_network, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__89)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_stop_network_2, __pyx_t_1) < 0) __PYX_ERR(0, 1048, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1059
 *             self._user_stream_event_listener_task = None
 * 
 *     async def stop_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_68stop_network, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BittrexExchange_stop_network, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__40)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_stop_network, __pyx_t_1) < 0) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1062
 *         self._stop_network()
 * 
 *     async def start_network(self):             # <<<<<<<<<<<<<<
 *         self._stop_network()
 *         self._order_book_tracker.start()
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_71start_network, __Pyx_CYFUNCTION_CCLASS | __Pyx_CYFUNCTION_COROUTINE, __pyx_n_s_BittrexExchange_start_network, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_start_network, __pyx_t_1) < 0) __PYX_ERR(0, 1062, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1071
 *             self._user_stream_event_listener_task = safe_ensure_future(self._user_stream_event_listener())
 * 
 *     def get_price(self, trading_pair: str, is_buy: bool) -> Decimal:             # <<<<<<<<<<<<<<
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_trading_pair, __pyx_n_s_str) < 0) __PYX_ERR(0, 1071, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_is_buy, __pyx_n_s_bool) < 0) __PYX_ERR(0, 1071, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1071, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_74get_price, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BittrexExchange_get_price, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__93)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_get_price, __pyx_t_3) < 0) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1074
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_k__42 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1075
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:             # <<<<<<<<<<<<<<
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_NaN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__43 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1074
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1075
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:             # <<<<<<<<<<<<<<
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_NaN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1075, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1074
 *         return self.c_get_price(trading_pair, is_buy)
 * 
 *     def buy(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *             price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_trading_pair, __pyx_n_s_str) < 0) __PYX_ERR(0, 1074, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_amount, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1074, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_price, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1074, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_n_s_str) < 0) __PYX_ERR(0, 1074, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_76buy, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BittrexExchange_buy, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__95)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_buy_2, __pyx_t_3) < 0) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1078
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_k__44 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1079
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:             # <<<<<<<<<<<<<<
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_NaN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__45 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1078
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_OrderType); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_MARKET); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1079
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:             # <<<<<<<<<<<<<<
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_NaN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1078
 *         return self.c_buy(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def sell(self, trading_pair: str, amount: Decimal, order_type=OrderType.MARKET,             # <<<<<<<<<<<<<<
 *              price: Decimal = s_decimal_NaN, **kwargs) -> str:
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __pyx_t_3 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_trading_pair, __pyx_n_s_str) < 0) __PYX_ERR(0, 1078, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_amount, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1078, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_price, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1078, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_n_s_str) < 0) __PYX_ERR(0, 1078, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_78sell, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BittrexExchange_sell, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__97)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_3, __pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_sell_2, __pyx_t_3) < 0) __PYX_ERR(0, 1078, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1082
 *         return self.c_sell(trading_pair, amount, order_type, price, kwargs)
 * 
 *     def cancel(self, trading_pair: str, client_order_id: str):             # <<<<<<<<<<<<<<
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 */
  __pyx_t_3 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_trading_pair, __pyx_n_s_str) < 0) __PYX_ERR(0, 1082, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_3, __pyx_n_s_client_order_id, __pyx_n_s_str) < 0) __PYX_ERR(0, 1082, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_80cancel, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BittrexExchange_cancel, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__99)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_cancel, __pyx_t_1) < 0) __PYX_ERR(0, 1082, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1091
 *                 order_side: TradeType,
 *                 amount: Decimal,
 *                 price: Decimal = s_decimal_NaN) -> TradeFee:             # <<<<<<<<<<<<<<
 *         return self.c_get_fee(base_currency, quote_currency, order_type, order_side, amount, price)
 * 
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_NaN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_k__46 = __pyx_t_1;
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1085
 *         return self.c_cancel(trading_pair, client_order_id)
 * 
 *     def get_fee(self,             # <<<<<<<<<<<<<<
 *                 base_currency: str,
 *                 quote_currency: str,
 */
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_n_s_s_decimal_NaN); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyDict_NewPresized(7); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_base_currency, __pyx_n_s_str) < 0) __PYX_ERR(0, 1085, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_quote_currency, __pyx_n_s_str) < 0) __PYX_ERR(0, 1085, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order_type, __pyx_n_s_OrderType) < 0) __PYX_ERR(0, 1085, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_order_side, __pyx_n_s_TradeType) < 0) __PYX_ERR(0, 1085, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_amount, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1085, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_price, __pyx_n_s_Decimal) < 0) __PYX_ERR(0, 1085, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_return, __pyx_n_s_TradeFee) < 0) __PYX_ERR(0, 1085, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_82get_fee, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BittrexExchange_get_fee, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__101)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_2, __pyx_t_3);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_get_fee, __pyx_t_2) < 0) __PYX_ERR(0, 1085, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1094
 *         return self.c_get_fee(base_currency, quote_currency, order_type, order_side, amount, price)
 * 
 *     def get_order_book(self, trading_pair: str) -> OrderBook:             # <<<<<<<<<<<<<<
 *         return self.c_get_order_book(trading_pair)
 */
  __pyx_t_2 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_trading_pair, __pyx_n_s_str) < 0) __PYX_ERR(0, 1094, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_return, __pyx_n_s_OrderBook) < 0) __PYX_ERR(0, 1094, __pyx_L1_error)
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_84get_order_book, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BittrexExchange_get_order_book, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1094, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_1, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange->tp_dict, __pyx_n_s_get_order_book, __pyx_t_1) < 0) __PYX_ERR(0, 1094, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_BittrexExchange);

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_86__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BittrexExchange___reduce_cython, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__105)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_reduce_cython, __pyx_t_1) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "self._events cannot be converted to a Python object for pickling"
 */
  __pyx_t_1 = __Pyx_CyFunction_New(&__pyx_mdef_10hummingbot_9connector_8exchange_7bittrex_16bittrex_exchange_15BittrexExchange_88__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_n_s_BittrexExchange___setstate_cytho, NULL, __pyx_n_s_hummingbot_connector_exchange_bi, __pyx_d, ((PyObject *)__pyx_codeobj__107)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_setstate_cython, __pyx_t_1) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "hummingbot/connector/exchange/bittrex/bittrex_exchange.pyx":1
 * import asyncio             # <<<<<<<<<<<<<<
 * import logging
 * from decimal import Decimal
 */
  __pyx_t_1 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "../anaconda3/envs/hummingbot/lib/site-packages/numpy/__init__.cython-30.pxd":1051
 * 
 * 
 * cdef inline NPY_DATETIMEUNIT get_datetime64_unit(object obj) nogil:             # <<<<<<<<<<<<<<
 *     """
 *     returns the unit part of the dtype for a numpy datetime64 object.
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init hummingbot.connector.exchange.bittrex.bittrex_exchange", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(__pyx_m);
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init hummingbot.connector.exchange.bittrex.bittrex_exchange");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #elif PY_MAJOR_VERSION >= 3
  return __pyx_m;
  #else
  return;
  #endif
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    if (unlikely(PyTuple_Check(err)))
        return __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    return __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS && PY_VERSION_HEX >= 0x030700B1
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* TupleAndListFromArray */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        Py_INCREF(__pyx_empty_tuple);
        return __pyx_empty_tuple;
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
        #if CYTHON_PEP393_ENABLED
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
        #else
            hash1 = ((PyUnicodeObject*)s1)->hash;
            hash2 = ((PyUnicodeObject*)s2)->hash;
        #endif
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        #if PY_MAJOR_VERSION < 3
        Py_XDECREF(owned_ref);
        #endif
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = PyTuple_GET_SIZE(kwnames);
    for (i = 0; i < n; i++)
    {
        if (s == PyTuple_GET_ITEM(kwnames, i)) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        int eq = __Pyx_PyUnicode_Equals(s, PyTuple_GET_ITEM(kwnames, i), Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;  // error
            return kwvalues[i];
        }
    }
    return NULL;  // not found (no exception set)
}
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject *const *kwvalues,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    int kwds_is_tuple = CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds));
    while (1) {
        if (kwds_is_tuple) {
            if (pos >= PyTuple_GET_SIZE(kwds)) break;
            key = PyTuple_GET_ITEM(kwds, pos);
            value = kwvalues[pos];
            pos++;
        }
        else
        {
            if (!PyDict_Next(kwds, &pos, &key, &value)) break;
        }
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (__Pyx_PyUnicode_GET_LENGTH(**name) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key)
                );
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (__Pyx_PyUnicode_GET_LENGTH(**argname) != __Pyx_PyUnicode_GET_LENGTH(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (exact) {
        #if PY_MAJOR_VERSION == 2
        if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    }
    type_name = __Pyx_PyType_GetName(type);
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")", name, type_name, obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject **args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject **args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
#if PY_MAJOR_VERSION >= 3
    PyObject *kwdefs;
#endif
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object"))) {
        return NULL;
    }
    if (
#if PY_MAJOR_VERSION >= 3
            co->co_kwonlyargcount == 0 &&
#endif
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
#if PY_MAJOR_VERSION >= 3
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
#endif
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
#if PY_MAJOR_VERSION >= 3
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
#else
    result = PyEval_EvalCodeEx(co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, closure);
#endif
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject **args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]);
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
    Py_DECREF(argstuple);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject **args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
#ifdef __Pyx_CyFunction_USED
        if (__Pyx_IsCyOrPyCFunction(func))
#else
        if (PyCFunction_Check(func))
#endif
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
                return __Pyx_PyObject_CallMethO(func, NULL);
            }
        }
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (PyCFunction_Check(func))
        {
            if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
                return __Pyx_PyObject_CallMethO(func, args[0]);
            }
        }
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    #if PY_VERSION_HEX >= 0x030700A1
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    #if CYTHON_VECTORCALL
    vectorcallfunc f = _PyVectorcall_Function(func);
    if (f) {
        return f(func, args, (size_t)nargs, kwargs);
    }
    #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
    if (__Pyx_CyFunction_CheckExact(func)) {
        __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
        if (f) return f(func, args, (size_t)nargs, kwargs);
    }
    #endif
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_empty_tuple, kwargs);
    }
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
}

/* KeywordStringCheck */
static int __Pyx_CheckKeywordStrings(
    PyObject *kw,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kw, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kw))) {
        if (unlikely(PyTuple_GET_SIZE(kw) == 0))
            return 1;
        if (!kw_allowed) {
            key = PyTuple_GET_ITEM(kw, 0);
            goto invalid_keyword;
        }
#if PY_VERSION_HEX < 0x03090000
        for (pos = 0; pos < PyTuple_GET_SIZE(kw); pos++) {
            key = PyTuple_GET_ITEM(kw, pos);
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
        }
#endif
        return 1;
    }
    while (PyDict_Next(kw, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if (!kw_allowed && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    #if PY_MAJOR_VERSION < 3
    PyErr_Format(PyExc_TypeError,
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* RaiseException */
#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    __Pyx_PyThreadState_declare
    CYTHON_UNUSED_VAR(cause);
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY ||  CYTHON_COMPILING_IN_LIMITED_API
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if !CYTHON_AVOID_BORROWED_REFS
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030500A1
    result = _PyDict_GetItem_KnownHash(__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    } else if (unlikely(PyErr_Occurred())) {
        return NULL;
    }
#elif CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
#else
    result = PyDict_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
#endif
#else
    result = PyObject_GetItem(__pyx_d, name);
    __PYX_UPDATE_DICT_CACHE(__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* IterFinish */
static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_FAST_THREAD_STATE
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg = NULL;
    return __Pyx_PyObject_FastCall(func, (&arg)+1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#elif PY_MAJOR_VERSION >= 3
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
}

/* RaiseNeedMoreValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* RaiseTooManyValuesToUnpack */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* UnpackItemEndCheck */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* RaiseNoneIterError */
static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

/* UnpackTupleError */
static void __Pyx_UnpackTupleError(PyObject *t, Py_ssize_t index) {
    if (t == Py_None) {
      __Pyx_RaiseNoneNotIterableError();
    } else if (PyTuple_GET_SIZE(t) < index) {
      __Pyx_RaiseNeedMoreValuesError(PyTuple_GET_SIZE(t));
    } else {
      __Pyx_RaiseTooManyValuesError(index);
    }
}

/* UnpackTuple2 */
static CYTHON_INLINE int __Pyx_unpack_tuple2_exact(
        PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2, int decref_tuple) {
    PyObject *value1 = NULL, *value2 = NULL;
#if CYTHON_COMPILING_IN_PYPY
    value1 = PySequence_ITEM(tuple, 0);  if (unlikely(!value1)) goto bad;
    value2 = PySequence_ITEM(tuple, 1);  if (unlikely(!value2)) goto bad;
#else
    value1 = PyTuple_GET_ITEM(tuple, 0);  Py_INCREF(value1);
    value2 = PyTuple_GET_ITEM(tuple, 1);  Py_INCREF(value2);
#endif
    if (decref_tuple) {
        Py_DECREF(tuple);
    }
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
#if CYTHON_COMPILING_IN_PYPY
bad:
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
#endif
}
static int __Pyx_unpack_tuple2_generic(PyObject* tuple, PyObject** pvalue1, PyObject** pvalue2,
                                       int has_known_size, int decref_tuple) {
    Py_ssize_t index;
    PyObject *value1 = NULL, *value2 = NULL, *iter = NULL;
    iternextfunc iternext;
    iter = PyObject_GetIter(tuple);
    if (unlikely(!iter)) goto bad;
    if (decref_tuple) { Py_DECREF(tuple); tuple = NULL; }
    iternext = __Pyx_PyObject_GetIterNextFunc(iter);
    value1 = iternext(iter); if (unlikely(!value1)) { index = 0; goto unpacking_failed; }
    value2 = iternext(iter); if (unlikely(!value2)) { index = 1; goto unpacking_failed; }
    if (!has_known_size && unlikely(__Pyx_IternextUnpackEndCheck(iternext(iter), 2))) goto bad;
    Py_DECREF(iter);
    *pvalue1 = value1;
    *pvalue2 = value2;
    return 0;
unpacking_failed:
    if (!has_known_size && __Pyx_IterFinish() == 0)
        __Pyx_RaiseNeedMoreValuesError(index);
bad:
    Py_XDECREF(iter);
    Py_XDECREF(value1);
    Py_XDECREF(value2);
    if (decref_tuple) { Py_XDECREF(tuple); }
    return -1;
}

/* dict_iter */
static CYTHON_INLINE PyObject* __Pyx_dict_iterator(PyObject* iterable, int is_dict, PyObject* method_name,
                                                   Py_ssize_t* p_orig_length, int* p_source_is_dict) {
    is_dict = is_dict || likely(PyDict_CheckExact(iterable));
    *p_source_is_dict = is_dict;
    if (is_dict) {
#if !CYTHON_COMPILING_IN_PYPY
        *p_orig_length = PyDict_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
#elif PY_MAJOR_VERSION >= 3
        static PyObject *py_items = NULL, *py_keys = NULL, *py_values = NULL;
        PyObject **pp = NULL;
        if (method_name) {
            const char *name = PyUnicode_AsUTF8(method_name);
            if (strcmp(name, "iteritems") == 0) pp = &py_items;
            else if (strcmp(name, "iterkeys") == 0) pp = &py_keys;
            else if (strcmp(name, "itervalues") == 0) pp = &py_values;
            if (pp) {
                if (!*pp) {
                    *pp = PyUnicode_FromString(name + 4);
                    if (!*pp)
                        return NULL;
                }
                method_name = *pp;
            }
        }
#endif
    }
    *p_orig_length = 0;
    if (method_name) {
        PyObject* iter;
        iterable = __Pyx_PyObject_CallMethod0(iterable, method_name);
        if (!iterable)
            return NULL;
#if !CYTHON_COMPILING_IN_PYPY
        if (PyTuple_CheckExact(iterable) || PyList_CheckExact(iterable))
            return iterable;
#endif
        iter = PyObject_GetIter(iterable);
        Py_DECREF(iterable);
        return iter;
    }
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_dict_iter_next(
        PyObject* iter_obj, CYTHON_NCP_UNUSED Py_ssize_t orig_length, CYTHON_NCP_UNUSED Py_ssize_t* ppos,
        PyObject** pkey, PyObject** pvalue, PyObject** pitem, int source_is_dict) {
    PyObject* next_item;
#if !CYTHON_COMPILING_IN_PYPY
    if (source_is_dict) {
        PyObject *key, *value;
        if (unlikely(orig_length != PyDict_Size(iter_obj))) {
            PyErr_SetString(PyExc_RuntimeError, "dictionary changed size during iteration");
            return -1;
        }
        if (unlikely(!PyDict_Next(iter_obj, ppos, &key, &value))) {
            return 0;
        }
        if (pitem) {
            PyObject* tuple = PyTuple_New(2);
            if (unlikely(!tuple)) {
                return -1;
            }
            Py_INCREF(key);
            Py_INCREF(value);
            PyTuple_SET_ITEM(tuple, 0, key);
            PyTuple_SET_ITEM(tuple, 1, value);
            *pitem = tuple;
        } else {
            if (pkey) {
                Py_INCREF(key);
                *pkey = key;
            }
            if (pvalue) {
                Py_INCREF(value);
                *pvalue = value;
            }
        }
        return 1;
    } else if (PyTuple_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyTuple_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyTuple_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else if (PyList_CheckExact(iter_obj)) {
        Py_ssize_t pos = *ppos;
        if (unlikely(pos >= PyList_GET_SIZE(iter_obj))) return 0;
        *ppos = pos + 1;
        next_item = PyList_GET_ITEM(iter_obj, pos);
        Py_INCREF(next_item);
    } else
#endif
    {
        next_item = PyIter_Next(iter_obj);
        if (unlikely(!next_item)) {
            return __Pyx_IterFinish();
        }
    }
    if (pitem) {
        *pitem = next_item;
    } else if (pkey && pvalue) {
        if (__Pyx_unpack_tuple2(next_item, pkey, pvalue, source_is_dict, source_is_dict, 1))
            return -1;
    } else if (pkey) {
        *pkey = next_item;
    } else {
        *pvalue = next_item;
    }
    return 1;
}

/* FetchCommonType */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    PyObject *abi_module = PyImport_AddModule((char*) __PYX_ABI_MODULE_NAME);
    if (!abi_module) return NULL;
    Py_INCREF(abi_module);
    return abi_module;
}
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t basicsize,
                               Py_ssize_t expected_basicsize) {
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* abi_module;
    PyTypeObject *cached_type = NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = (PyTypeObject*) PyObject_GetAttrString(abi_module, type->tp_name);
    if (cached_type) {
        if (__Pyx_VerifyCachedType(
              (PyObject *)cached_type,
              type->tp_name,
              cached_type->tp_basicsize,
              type->tp_basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    if (PyType_Ready(type) < 0) goto bad;
    if (PyObject_SetAttrString(abi_module, type->tp_name, (PyObject *)type) < 0)
        goto bad;
    Py_INCREF(type);
    cached_type = type;
done:
    Py_DECREF(abi_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module, *py_basicsize, *cached_type = NULL;
    Py_ssize_t basicsize;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) return NULL;
    cached_type = PyObject_GetAttrString(abi_module, spec->name);
    if (cached_type) {
        py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
        if (!py_basicsize) goto bad;
        basicsize = PyLong_AsSsize_t(py_basicsize);
        Py_DECREF(py_basicsize);
        py_basicsize = 0;
        if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred()) goto bad;
        if (__Pyx_VerifyCachedType(
              cached_type,
              spec->name,
              basicsize,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    }
    if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
    PyErr_Clear();
    cached_type = PyType_FromSpecWithBases(spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (PyObject_SetAttrString(abi_module, spec->name, cached_type) < 0) goto bad;
done:
    Py_DECREF(abi_module);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}
#endif

/* GetTopmostException */
#if CYTHON_USE_EXC_INFO_STACK
static _PyErr_StackItem *
__Pyx_PyErr_GetTopmostException(PyThreadState *tstate)
{
    _PyErr_StackItem *exc_info = tstate->exc_info;
    while ((exc_info->exc_type == NULL || exc_info->exc_type == Py_None) &&
           exc_info->previous_item != NULL)
    {
        exc_info = exc_info->previous_item;
    }
    return exc_info;
}
#endif

/* SaveResetException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = __Pyx_PyErr_GetTopmostException(tstate);
    *type = exc_info->exc_type;
    *value = exc_info->exc_value;
    *tb = exc_info->exc_traceback;
    #else
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    #endif
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = type;
    exc_info->exc_value = value;
    exc_info->exc_traceback = tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* SwapException */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    #if CYTHON_USE_EXC_INFO_STACK
    _PyErr_StackItem *exc_info = tstate->exc_info;
    tmp_type = exc_info->exc_type;
    tmp_value = exc_info->exc_value;
    tmp_tb = exc_info->exc_traceback;
    exc_info->exc_type = *type;
    exc_info->exc_value = *value;
    exc_info->exc_traceback = *tb;
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    #endif
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCallMethod1 */
static PyObject* __Pyx__PyObject_CallMethod1(PyObject* method, PyObject* arg) {
    PyObject *result = __Pyx_PyObject_CallOneArg(method, arg);
    Py_DECREF(method);
    return result;
}
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method = NULL, *result;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_Call2Args(method, obj, arg);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) return NULL;
    return __Pyx__PyObject_CallMethod1(method, arg);
}

/* CoroutineBase */
#include <structmember.h>
#include <frameobject.h>
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
static int __Pyx_PyGen__FetchStopIterationValue(PyThreadState *__pyx_tstate, PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    CYTHON_UNUSED_VAR(__pyx_tstate);
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
        if (!ev) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#if PY_VERSION_HEX >= 0x030300A0
        else if (likely(__Pyx_IS_TYPE(ev, (PyTypeObject*)PyExc_StopIteration))) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
        }
#endif
        else if (unlikely(PyTuple_Check(ev))) {
            if (PyTuple_GET_SIZE(ev) >= 1) {
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                value = PyTuple_GET_ITEM(ev, 0);
                Py_INCREF(value);
#else
                value = PySequence_ITEM(ev, 0);
#endif
            } else {
                Py_INCREF(Py_None);
                value = Py_None;
            }
            Py_DECREF(ev);
        }
        else if (!__Pyx_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            value = ev;
        }
        if (likely(value)) {
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
    } else if (!__Pyx_PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *t, *v, *tb;
    t = exc_state->exc_type;
    v = exc_state->exc_value;
    tb = exc_state->exc_traceback;
    exc_state->exc_type = NULL;
    exc_state->exc_value = NULL;
    exc_state->exc_traceback = NULL;
    Py_XDECREF(t);
    Py_XDECREF(v);
    Py_XDECREF(tb);
}
#define __Pyx_Coroutine_AlreadyRunningError(gen)  (__Pyx__Coroutine_AlreadyRunningError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyRunningError(__pyx_CoroutineObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check((PyObject*)gen)) {
        msg = "coroutine already executing";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact((PyObject*)gen)) {
        msg = "async generator already executing";
    #endif
    } else {
        msg = "generator already executing";
    }
    PyErr_SetString(PyExc_ValueError, msg);
}
#define __Pyx_Coroutine_NotStartedError(gen)  (__Pyx__Coroutine_NotStartedError(gen), (PyObject*)NULL)
static void __Pyx__Coroutine_NotStartedError(PyObject *gen) {
    const char *msg;
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if ((0)) {
    #ifdef __Pyx_Coroutine_USED
    } else if (__Pyx_Coroutine_Check(gen)) {
        msg = "can't send non-None value to a just-started coroutine";
    #endif
    #ifdef __Pyx_AsyncGen_USED
    } else if (__Pyx_AsyncGen_CheckExact(gen)) {
        msg = "can't send non-None value to a just-started async generator";
    #endif
    } else {
        msg = "can't send non-None value to a just-started generator";
    }
    PyErr_SetString(PyExc_TypeError, msg);
}
#define __Pyx_Coroutine_AlreadyTerminatedError(gen, value, closing)  (__Pyx__Coroutine_AlreadyTerminatedError(gen, value, closing), (PyObject*)NULL)
static void __Pyx__Coroutine_AlreadyTerminatedError(PyObject *gen, PyObject *value, int closing) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    CYTHON_MAYBE_UNUSED_VAR(closing);
    #ifdef __Pyx_Coroutine_USED
    if (!closing && __Pyx_Coroutine_Check(gen)) {
        PyErr_SetString(PyExc_RuntimeError, "cannot reuse already awaited coroutine");
    } else
    #endif
    if (value) {
        #ifdef __Pyx_AsyncGen_USED
        if (__Pyx_AsyncGen_CheckExact(gen))
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
        else
        #endif
        PyErr_SetNone(PyExc_StopIteration);
    }
}
static
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value, int closing) {
    __Pyx_PyThreadState_declare
    PyThreadState *tstate;
    __Pyx_ExcInfoStruct *exc_state;
    PyObject *retval;
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            return __Pyx_Coroutine_NotStartedError((PyObject*)self);
        }
    }
    if (unlikely(self->resume_label == -1)) {
        return __Pyx_Coroutine_AlreadyTerminatedError((PyObject*)self, value, closing);
    }
#if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    tstate = __pyx_tstate;
#else
    tstate = __Pyx_PyThreadState_Current;
#endif
    exc_state = &self->gi_exc_state;
    if (exc_state->exc_type) {
        #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
        #else
        if (exc_state->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) exc_state->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = tstate->frame;
        }
        #endif
    }
#if CYTHON_USE_EXC_INFO_STACK
    exc_state->previous_item = tstate->exc_info;
    tstate->exc_info = exc_state;
#else
    if (exc_state->exc_type) {
        __Pyx_ExceptionSwap(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(exc_state);
        __Pyx_ExceptionSave(&exc_state->exc_type, &exc_state->exc_value, &exc_state->exc_traceback);
    }
#endif
    self->is_running = 1;
    retval = self->body(self, tstate, value);
    self->is_running = 0;
#if CYTHON_USE_EXC_INFO_STACK
    exc_state = &self->gi_exc_state;
    tstate->exc_info = exc_state->previous_item;
    exc_state->previous_item = NULL;
    __Pyx_Coroutine_ResetFrameBackpointer(exc_state);
#endif
    return retval;
}
static CYTHON_INLINE void __Pyx_Coroutine_ResetFrameBackpointer(__Pyx_ExcInfoStruct *exc_state) {
    PyObject *exc_tb = exc_state->exc_traceback;
    if (likely(exc_tb)) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_PYSTON
#else
        PyTracebackObject *tb = (PyTracebackObject *) exc_tb;
        PyFrameObject *f = tb->tb_frame;
        Py_CLEAR(f->f_back);
#endif
    }
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject* gen, PyObject *retval) {
    CYTHON_MAYBE_UNUSED_VAR(gen);
    if (unlikely(!retval)) {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        if (!__Pyx_PyErr_Occurred()) {
            PyObject *exc = PyExc_StopIteration;
            #ifdef __Pyx_AsyncGen_USED
            if (__Pyx_AsyncGen_CheckExact(gen))
                exc = __Pyx_PyExc_StopAsyncIteration;
            #endif
            __Pyx_PyErr_SetNone(exc);
        }
    }
    return retval;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
static CYTHON_INLINE
PyObject *__Pyx_PyGen_Send(PyGenObject *gen, PyObject *arg) {
#if PY_VERSION_HEX <= 0x030A00A1
    return _PyGen_Send(gen, arg);
#else
    PyObject *result;
    if (PyIter_Send((PyObject*)gen, arg ? arg : Py_None, &result) == PYGEN_RETURN) {
        if (PyAsyncGen_CheckExact(gen)) {
            assert(result == Py_None);
            PyErr_SetNone(PyExc_StopAsyncIteration);
        }
        else if (result == Py_None) {
            PyErr_SetNone(PyExc_StopIteration);
        }
        else {
            _PyGen_SetStopIterationValue(result);
        }
        Py_CLEAR(result);
    }
    return result;
#endif
}
#endif
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen__FetchStopIterationValue(__Pyx_PyThreadState_Current, &val);
    ret = __Pyx_Coroutine_SendEx(gen, val, 0);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_AsyncGen_USED
        if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
            ret = __Pyx_async_gen_asend_send(yf, value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03050000 && defined(PyCoro_CheckExact) && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyCoro_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, value == Py_None ? NULL : value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = __Pyx_PyObject_GetIterNextFunc(yf)(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value, 0);
    }
    return __Pyx_Coroutine_MethodReturn(self, retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    if (__Pyx_CoroutineAwait_CheckExact(yf)) {
        retval = __Pyx_CoroutineAwait_Close((__pyx_CoroutineAwaitObject*)yf, NULL);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_AsyncGen_USED
    if (__pyx_PyAsyncGenASend_CheckExact(yf)) {
        retval = __Pyx_async_gen_asend_close(yf, NULL);
    } else
    if (__pyx_PyAsyncGenAThrow_CheckExact(yf)) {
        retval = __Pyx_async_gen_athrow_close(yf, NULL);
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (unlikely(PyErr_Occurred())) {
                PyErr_WriteUnraisable(yf);
            }
        } else {
            retval = __Pyx_PyObject_CallNoArg(meth);
            Py_DECREF(meth);
            if (unlikely(!retval))
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Generator_Next(yf);
        } else
        #endif
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03030000 && (defined(__linux__) || PY_VERSION_HEX >= 0x030600B3)
        if (PyGen_CheckExact(yf)) {
            ret = __Pyx_PyGen_Send((PyGenObject*)yf, NULL);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_Check(yf)) {
            ret = __Pyx_Coroutine_Send(yf, Py_None);
        } else
        #endif
            ret = __Pyx_PyObject_GetIterNextFunc(yf)(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None, 0);
}
static PyObject *__Pyx_Coroutine_Close_Method(PyObject *self, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    return __Pyx_Coroutine_Close(self);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL, 1);
    if (unlikely(retval)) {
        const char *msg;
        Py_DECREF(retval);
        if ((0)) {
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_Coroutine_Check(self)) {
            msg = "coroutine ignored GeneratorExit";
        #endif
        #ifdef __Pyx_AsyncGen_USED
        } else if (__Pyx_AsyncGen_CheckExact(self)) {
#if PY_VERSION_HEX < 0x03060000
            msg = "async generator ignored GeneratorExit - might require Python 3.6+ finalisation (PEP 525)";
#else
            msg = "async generator ignored GeneratorExit";
#endif
        #endif
        } else {
            msg = "generator ignored GeneratorExit";
        }
        PyErr_SetString(PyExc_RuntimeError, msg);
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (likely(!raised_exception || __Pyx_PyErr_GivenExceptionMatches2(raised_exception, PyExc_GeneratorExit, PyExc_StopIteration))) {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx__Coroutine_Throw(PyObject *self, PyObject *typ, PyObject *val, PyObject *tb,
                                        PyObject *args, int close_on_genexit) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(gen->is_running))
        return __Pyx_Coroutine_AlreadyRunningError(gen);
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (__Pyx_PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit) && close_on_genexit) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
            goto throw_here;
        }
        gen->is_running = 1;
        if (0
        #ifdef __Pyx_Generator_USED
            || __Pyx_Generator_CheckExact(yf)
        #endif
        #ifdef __Pyx_Coroutine_USED
            || __Pyx_Coroutine_Check(yf)
        #endif
            ) {
            ret = __Pyx__Coroutine_Throw(yf, typ, val, tb, args, close_on_genexit);
        #ifdef __Pyx_Coroutine_USED
        } else if (__Pyx_CoroutineAwait_CheckExact(yf)) {
            ret = __Pyx__Coroutine_Throw(((__pyx_CoroutineAwaitObject*)yf)->coroutine, typ, val, tb, args, close_on_genexit);
        #endif
        } else {
            PyObject *meth = __Pyx_PyObject_GetAttrStrNoError(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (unlikely(PyErr_Occurred())) {
                    gen->is_running = 0;
                    return NULL;
                }
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            if (likely(args)) {
                ret = __Pyx_PyObject_Call(meth, args, NULL);
            } else {
                PyObject *cargs[4] = {NULL, typ, val, tb};
                ret = __Pyx_PyObject_FastCall(meth, cargs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
            }
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(self, ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(self, __Pyx_Coroutine_SendEx(gen, NULL, 0));
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    PyObject *typ;
    PyObject *val = NULL;
    PyObject *tb = NULL;
    if (unlikely(!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb)))
        return NULL;
    return __Pyx__Coroutine_Throw(self, typ, val, tb, args, 1);
}
static CYTHON_INLINE int __Pyx_Coroutine_traverse_excstate(__Pyx_ExcInfoStruct *exc_state, visitproc visit, void *arg) {
    Py_VISIT(exc_state->exc_type);
    Py_VISIT(exc_state->exc_value);
    Py_VISIT(exc_state->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_traverse(__pyx_CoroutineObject *gen, visitproc visit, void *arg) {
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    return __Pyx_Coroutine_traverse_excstate(&gen->gi_exc_state, visit, arg);
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    __Pyx_Coroutine_ExceptionClear(&gen->gi_exc_state);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        Py_CLEAR(((__pyx_PyAsyncGenObject*)gen)->ag_finalizer);
    }
#endif
    Py_CLEAR(gen->gi_code);
    Py_CLEAR(gen->gi_frame);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    Py_CLEAR(gen->gi_modulename);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label >= 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1 && CYTHON_USE_TP_FINALIZE
        if (unlikely(PyObject_CallFinalizerFromDealloc(self)))
#else
        Py_TYPE(gen)->tp_del(self);
        if (unlikely(Py_REFCNT(self) > 0))
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        /* We have to handle this case for asynchronous generators
           right here, because this code has to be between UNTRACK
           and GC_Del. */
        Py_CLEAR(((__pyx_PyAsyncGenObject*)self)->ag_finalizer);
    }
#endif
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label < 0) {
        return;
    }
#if !CYTHON_USE_TP_FINALIZE
    assert(self->ob_refcnt == 0);
    __Pyx_SET_REFCNT(self, 1);
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(self)) {
        __pyx_PyAsyncGenObject *agen = (__pyx_PyAsyncGenObject*)self;
        PyObject *finalizer = agen->ag_finalizer;
        if (finalizer && !agen->ag_closed) {
            PyObject *res = __Pyx_PyObject_CallOneArg(finalizer, self);
            if (unlikely(!res)) {
                PyErr_WriteUnraisable(self);
            } else {
                Py_DECREF(res);
            }
            __Pyx_ErrRestore(error_type, error_value, error_traceback);
            return;
        }
    }
#endif
    if (unlikely(gen->resume_label == 0 && !error_value)) {
#ifdef __Pyx_Coroutine_USED
#ifdef __Pyx_Generator_USED
    if (!__Pyx_Generator_CheckExact(self))
#endif
        {
        PyObject_GC_UnTrack(self);
#if PY_MAJOR_VERSION >= 3  || defined(PyErr_WarnFormat)
        if (unlikely(PyErr_WarnFormat(PyExc_RuntimeWarning, 1, "coroutine '%.50S' was never awaited", gen->gi_qualname) < 0))
            PyErr_WriteUnraisable(self);
#else
        {PyObject *msg;
        char *cmsg;
        #if CYTHON_COMPILING_IN_PYPY
        msg = NULL;
        cmsg = (char*) "coroutine was never awaited";
        #else
        char *cname;
        PyObject *qualname;
        qualname = gen->gi_qualname;
        cname = PyString_AS_STRING(qualname);
        msg = PyString_FromFormat("coroutine '%.50s' was never awaited", cname);
        if (unlikely(!msg)) {
            PyErr_Clear();
            cmsg = (char*) "coroutine was never awaited";
        } else {
            cmsg = PyString_AS_STRING(msg);
        }
        #endif
        if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, cmsg, 1) < 0))
            PyErr_WriteUnraisable(self);
        Py_XDECREF(msg);}
#endif
        PyObject_GC_Track(self);
        }
#endif
    } else {
        PyObject *res = __Pyx_Coroutine_Close(self);
        if (unlikely(!res)) {
            if (PyErr_Occurred())
                PyErr_WriteUnraisable(self);
        } else {
            Py_DECREF(res);
        }
    }
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if !CYTHON_USE_TP_FINALIZE
    assert(Py_REFCNT(self) > 0);
    if (likely(--self->ob_refcnt == 0)) {
        return;
    }
    {
        Py_ssize_t refcnt = Py_REFCNT(self);
        _Py_NewReference(self);
        __Pyx_SET_REFCNT(self, refcnt);
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(Py_TYPE(self)) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_name;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_name, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self, void *context)
{
    PyObject *name = self->gi_qualname;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!name)) name = Py_None;
    Py_INCREF(name);
    return name;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(self->gi_qualname, value);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_frame(__pyx_CoroutineObject *self, void *context)
{
    PyObject *frame = self->gi_frame;
    CYTHON_UNUSED_VAR(context);
    if (!frame) {
        if (unlikely(!self->gi_code)) {
            Py_RETURN_NONE;
        }
        frame = (PyObject *) PyFrame_New(
            PyThreadState_Get(),            /*PyThreadState *tstate,*/
            (PyCodeObject*) self->gi_code,  /*PyCodeObject *code,*/
            __pyx_d,                 /*PyObject *globals,*/
            0                               /*PyObject *locals*/
        );
        if (unlikely(!frame))
            return NULL;
        self->gi_frame = frame;
    }
    Py_INCREF(frame);
    return frame;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(
            PyTypeObject* type, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (unlikely(!gen))
        return NULL;
    return __Pyx__Coroutine_NewInit(gen, body, code, closure, name, qualname, module_name);
}
static __pyx_CoroutineObject *__Pyx__Coroutine_NewInit(
            __pyx_CoroutineObject *gen, __pyx_coroutine_body_t body, PyObject *code, PyObject *closure,
            PyObject *name, PyObject *qualname, PyObject *module_name) {
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->gi_exc_state.exc_type = NULL;
    gen->gi_exc_state.exc_value = NULL;
    gen->gi_exc_state.exc_traceback = NULL;
#if CYTHON_USE_EXC_INFO_STACK
    gen->gi_exc_state.previous_item = NULL;
#endif
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    Py_XINCREF(module_name);
    gen->gi_modulename = module_name;
    Py_XINCREF(code);
    gen->gi_code = code;
    gen->gi_frame = NULL;
    PyObject_GC_Track(gen);
    return gen;
}

/* PyObject_GenericGetAttrNoDict */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject *__Pyx_RaiseGenericGetAttributeError(PyTypeObject *tp, PyObject *attr_name) {
    __Pyx_TypeName type_name = __Pyx_PyType_GetName(tp);
    PyErr_Format(PyExc_AttributeError,
#if PY_MAJOR_VERSION >= 3
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, attr_name);
#else
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%.400s'",
                 type_name, PyString_AS_STRING(attr_name));
#endif
    __Pyx_DECREF_TypeName(type_name);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_GenericGetAttrNoDict(PyObject* obj, PyObject* attr_name) {
    PyObject *descr;
    PyTypeObject *tp = Py_TYPE(obj);
    if (unlikely(!PyString_Check(attr_name))) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    assert(!tp->tp_dictoffset);
    descr = _PyType_Lookup(tp, attr_name);
    if (unlikely(!descr)) {
        return __Pyx_RaiseGenericGetAttributeError(tp, attr_name);
    }
    Py_INCREF(descr);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_HAVE_CLASS)))
    #endif
    {
        descrgetfunc f = Py_TYPE(descr)->tp_descr_get;
        if (unlikely(f)) {
            PyObject *res = f(descr, obj, (PyObject *)tp);
            Py_DECREF(descr);
            return res;
        }
    }
    return descr;
}
#endif

/* PatchModuleWithCoroutine */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
#ifndef CYTHON_REGISTER_ABCS
#define CYTHON_REGISTER_ABCS 1
#endif
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (CYTHON_REGISTER_ABCS && !abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_MAJOR_VERSION >= 3) ? "collections.abc" : "collections");
        if (unlikely(!module)) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_MAJOR_VERSION >= 3) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if ((0)) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Coroutine */
static void __Pyx_CoroutineAwait_dealloc(PyObject *self) {
    PyObject_GC_UnTrack(self);
    Py_CLEAR(((__pyx_CoroutineAwaitObject*)self)->coroutine);
    PyObject_GC_Del(self);
}
static int __Pyx_CoroutineAwait_traverse(__pyx_CoroutineAwaitObject *self, visitproc visit, void *arg) {
    Py_VISIT(self->coroutine);
    return 0;
}
static int __Pyx_CoroutineAwait_clear(__pyx_CoroutineAwaitObject *self) {
    Py_CLEAR(self->coroutine);
    return 0;
}
static PyObject *__Pyx_CoroutineAwait_Next(__pyx_CoroutineAwaitObject *self) {
    return __Pyx_Generator_Next(self->coroutine);
}
static PyObject *__Pyx_CoroutineAwait_Send(__pyx_CoroutineAwaitObject *self, PyObject *value) {
    return __Pyx_Coroutine_Send(self->coroutine, value);
}
static PyObject *__Pyx_CoroutineAwait_Throw(__pyx_CoroutineAwaitObject *self, PyObject *args) {
    return __Pyx_Coroutine_Throw(self->coroutine, args);
}
static PyObject *__Pyx_CoroutineAwait_Close(__pyx_CoroutineAwaitObject *self, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    return __Pyx_Coroutine_Close(self->coroutine);
}
static PyObject *__Pyx_CoroutineAwait_self(PyObject *self) {
    Py_INCREF(self);
    return self;
}
#if !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_CoroutineAwait_no_new(PyTypeObject *type, PyObject *args, PyObject *kwargs) {
    CYTHON_UNUSED_VAR(type);
    CYTHON_UNUSED_VAR(args);
    CYTHON_UNUSED_VAR(kwargs);
    PyErr_SetString(PyExc_TypeError, "cannot instantiate type, use 'await coroutine' instead");
    return NULL;
}
#endif
static PyMethodDef __pyx_CoroutineAwait_methods[] = {
    {"send", (PyCFunction) __Pyx_CoroutineAwait_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into coroutine,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_CoroutineAwait_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in coroutine,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_CoroutineAwait_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside coroutine.")},
    {0, 0, 0, 0}
};
static PyTypeObject __pyx_CoroutineAwaitType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "coroutine_wrapper",
    sizeof(__pyx_CoroutineAwaitObject),
    0,
    (destructor) __Pyx_CoroutineAwait_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    PyDoc_STR("A wrapper object implementing __await__ for coroutines."),
    (traverseproc) __Pyx_CoroutineAwait_traverse,
    (inquiry) __Pyx_CoroutineAwait_clear,
    0,
    0,
    __Pyx_CoroutineAwait_self,
    (iternextfunc) __Pyx_CoroutineAwait_Next,
    __pyx_CoroutineAwait_methods,
    0                         ,
    0                      ,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if !CYTHON_COMPILING_IN_PYPY
    __Pyx_CoroutineAwait_no_new,
#else
    0,
#endif
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
#if PY_VERSION_HEX < 0x030500B1 || defined(__Pyx_IterableCoroutine_USED) || CYTHON_USE_ASYNC_SLOTS
static CYTHON_INLINE PyObject *__Pyx__Coroutine_await(PyObject *coroutine) {
    __pyx_CoroutineAwaitObject *await = PyObject_GC_New(__pyx_CoroutineAwaitObject, __pyx_CoroutineAwaitType);
    if (unlikely(!await)) return NULL;
    Py_INCREF(coroutine);
    await->coroutine = coroutine;
    PyObject_GC_Track(await);
    return (PyObject*)await;
}
#endif
#if PY_VERSION_HEX < 0x030500B1
static PyObject *__Pyx_Coroutine_await_method(PyObject *coroutine, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    return __Pyx__Coroutine_await(coroutine);
}
#endif
#if defined(__Pyx_IterableCoroutine_USED) || CYTHON_USE_ASYNC_SLOTS
static PyObject *__Pyx_Coroutine_await(PyObject *coroutine) {
    if (unlikely(!coroutine || !__Pyx_Coroutine_Check(coroutine))) {
        PyErr_SetString(PyExc_TypeError, "invalid input, expected coroutine");
        return NULL;
    }
    return __Pyx__Coroutine_await(coroutine);
}
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3 && PY_VERSION_HEX < 0x030500B1
static PyObject *__Pyx_Coroutine_compare(PyObject *obj, PyObject *other, int op) {
    PyObject* result;
    switch (op) {
        case Py_EQ: result = (other == obj) ? Py_True : Py_False; break;
        case Py_NE: result = (other != obj) ? Py_True : Py_False; break;
        default:
            result = Py_NotImplemented;
    }
    Py_INCREF(result);
    return result;
}
#endif
static PyMethodDef __pyx_Coroutine_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into coroutine,\nreturn next iterated value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in coroutine,\nreturn next iterated value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside coroutine.")},
#if PY_VERSION_HEX < 0x030500B1
    {"__await__", (PyCFunction) __Pyx_Coroutine_await_method, METH_NOARGS,
     (char*) PyDoc_STR("__await__() -> return an iterator to be used in await expression.")},
#endif
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Coroutine_memberlist[] = {
    {(char *) "cr_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "cr_await", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being awaited, or None")},
    {(char*) "cr_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_modulename), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Coroutine_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the coroutine"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the coroutine"), 0},
    {(char *) "cr_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the coroutine"), 0},
    {0, 0, 0, 0, 0}
};
#if CYTHON_USE_ASYNC_SLOTS
static __Pyx_PyAsyncMethodsStruct __pyx_Coroutine_as_async = {
    __Pyx_Coroutine_await,
    0,
    0,
};
#endif
static PyTypeObject __pyx_CoroutineType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "coroutine",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
#if CYTHON_USE_ASYNC_SLOTS
    &__pyx_Coroutine_as_async,
#else
    0,
#endif
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
#if CYTHON_USE_ASYNC_SLOTS && CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3 && PY_VERSION_HEX < 0x030500B1
    __Pyx_Coroutine_compare,
#else
    0,
#endif
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    0,
    __pyx_Coroutine_methods,
    __pyx_Coroutine_memberlist,
    __pyx_Coroutine_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
static int __pyx_Coroutine_init(void) {
    __pyx_CoroutineType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_CoroutineType = __Pyx_FetchCommonType(&__pyx_CoroutineType_type);
    if (unlikely(!__pyx_CoroutineType))
        return -1;
#ifdef __Pyx_IterableCoroutine_USED
    if (unlikely(__pyx_IterableCoroutine_init() == -1))
        return -1;
#endif
    __pyx_CoroutineAwaitType = __Pyx_FetchCommonType(&__pyx_CoroutineAwaitType_type);
    if (unlikely(!__pyx_CoroutineAwaitType))
        return -1;
    return 0;
}

/* GetAwaitIter */
static CYTHON_INLINE PyObject *__Pyx_Coroutine_GetAwaitableIter(PyObject *o) {
#ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_Check(o)) {
        return __Pyx_NewRef(o);
    }
#endif
    return __Pyx__Coroutine_GetAwaitableIter(o);
}
static void __Pyx_Coroutine_AwaitableIterError(PyObject *source) {
#if PY_VERSION_HEX >= 0x030600B3 || defined(_PyErr_FormatFromCause)
    __Pyx_TypeName source_type_name = __Pyx_PyType_GetName(Py_TYPE(source));
    _PyErr_FormatFromCause(PyExc_TypeError,
        "'async for' received an invalid object from __anext__: " __Pyx_FMT_TYPENAME, source_type_name);
    __Pyx_DECREF_TypeName(source_type_name);
#elif PY_MAJOR_VERSION >= 3
    PyObject *exc, *val, *val2, *tb;
    __Pyx_TypeName source_type_name = __Pyx_PyType_GetName(Py_TYPE(source));
    assert(PyErr_Occurred());
    PyErr_Fetch(&exc, &val, &tb);
    PyErr_NormalizeException(&exc, &val, &tb);
    if (tb != NULL) {
        PyException_SetTraceback(val, tb);
        Py_DECREF(tb);
    }
    Py_DECREF(exc);
    assert(!PyErr_Occurred());
    PyErr_Format(PyExc_TypeError,
        "'async for' received an invalid object from __anext__: " __Pyx_FMT_TYPENAME, source_type_name);
    __Pyx_DECREF_TypeName(source_type_name);
    PyErr_Fetch(&exc, &val2, &tb);
    PyErr_NormalizeException(&exc, &val2, &tb);
    Py_INCREF(val);
    PyException_SetCause(val2, val);
    PyException_SetContext(val2, val);
    PyErr_Restore(exc, val2, tb);
#else
    source++;
#endif
}
static PyObject *__Pyx__Coroutine_GetAwaitableIter(PyObject *obj) {
    PyObject *res;
#if CYTHON_USE_ASYNC_SLOTS
    __Pyx_PyAsyncMethodsStruct* am = __Pyx_PyType_AsAsync(obj);
    if (likely(am && am->am_await)) {
        res = (*am->am_await)(obj);
    } else
#endif
#if PY_VERSION_HEX >= 0x030500B2 || defined(PyCoro_CheckExact)
    if (PyCoro_CheckExact(obj)) {
        return __Pyx_NewRef(obj);
    } else
#endif
#if CYTHON_COMPILING_IN_CPYTHON && defined(CO_ITERABLE_COROUTINE)
    if (PyGen_CheckExact(obj) && ((PyGenObject*)obj)->gi_code && ((PyCodeObject *)((PyGenObject*)obj)->gi_code)->co_flags & CO_ITERABLE_COROUTINE) {
        return __Pyx_NewRef(obj);
    } else
#endif
    {
        PyObject *method = NULL;
        int is_method = __Pyx_PyObject_GetMethod(obj, __pyx_n_s_await, &method);
        if (likely(is_method)) {
            res = __Pyx_PyObject_CallOneArg(method, obj);
        } else if (likely(method)) {
            res = __Pyx_PyObject_CallNoArg(method);
        } else
            goto slot_error;
        Py_DECREF(method);
    }
    if (unlikely(!res)) {
        __Pyx_Coroutine_AwaitableIterError(obj);
        goto bad;
    }
    if (unlikely(!PyIter_Check(res))) {
        __Pyx_TypeName res_type_name = __Pyx_PyType_GetName(Py_TYPE(res));
        PyErr_Format(PyExc_TypeError,
            "__await__() returned non-iterator of type '" __Pyx_FMT_TYPENAME "'", res_type_name);
        __Pyx_DECREF_TypeName(res_type_name);
        Py_CLEAR(res);
    } else {
        int is_coroutine = 0;
        #ifdef __Pyx_Coroutine_USED
        is_coroutine |= __Pyx_Coroutine_Check(res);
        #endif
        #if PY_VERSION_HEX >= 0x030500B2 || defined(PyCoro_CheckExact)
        is_coroutine |= PyCoro_CheckExact(res);
        #endif
        if (unlikely(is_coroutine)) {
            /* __await__ must return an *iterator*, not
               a coroutine or another awaitable (see PEP 492) */
            PyErr_SetString(PyExc_TypeError,
                            "__await__() returned a coroutine");
            Py_CLEAR(res);
        }
    }
    return res;
slot_error:
    {
        __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
        PyErr_Format(PyExc_TypeError,
            "object " __Pyx_FMT_TYPENAME " can't be used in 'await' expression", obj_type_name);
        __Pyx_DECREF_TypeName(obj_type_name);
    }
bad:
    return NULL;
}

/* CoroutineYieldFrom */
static PyObject* __Pyx__Coroutine_Yield_From_Generic(__pyx_CoroutineObject *gen, PyObject *source) {
    PyObject *retval;
    PyObject *source_gen = __Pyx__Coroutine_GetAwaitableIter(source);
    if (unlikely(!source_gen)) {
        return NULL;
    }
    if (__Pyx_Coroutine_Check(source_gen)) {
        retval = __Pyx_Generator_Next(source_gen);
    } else {
        retval = __Pyx_PyObject_GetIterNextFunc(source_gen)(source_gen);
    }
    if (retval) {
        gen->yieldfrom = source_gen;
        return retval;
    }
    Py_DECREF(source_gen);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_Coroutine_Yield_From(__pyx_CoroutineObject *gen, PyObject *source) {
    PyObject *retval;
    if (__Pyx_Coroutine_Check(source)) {
        if (unlikely(((__pyx_CoroutineObject*)source)->yieldfrom)) {
            PyErr_SetString(
                PyExc_RuntimeError,
                "coroutine is being awaited already");
            return NULL;
        }
        retval = __Pyx_Generator_Next(source);
#ifdef __Pyx_AsyncGen_USED
    } else if (__pyx_PyAsyncGenASend_CheckExact(source)) {
        retval = __Pyx_async_gen_asend_iternext(source);
#endif
    } else {
        return __Pyx__Coroutine_Yield_From_Generic(gen, source);
    }
    if (retval) {
        Py_INCREF(source);
        gen->yieldfrom = source;
    }
    return retval;
}

/* ReturnWithStopIteration */
static void __Pyx__ReturnWithStopIteration(PyObject* value) {
    PyObject *exc, *args;
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_PYSTON
    __Pyx_PyThreadState_declare
    if ((PY_VERSION_HEX >= 0x03030000 && PY_VERSION_HEX < 0x030500B1)
            || unlikely(PyTuple_Check(value) || PyExceptionInstance_Check(value))) {
        args = PyTuple_New(1);
        if (unlikely(!args)) return;
        Py_INCREF(value);
        PyTuple_SET_ITEM(args, 0, value);
        exc = PyType_Type.tp_call(PyExc_StopIteration, args, NULL);
        Py_DECREF(args);
        if (!exc) return;
    } else {
        Py_INCREF(value);
        exc = value;
    }
    #if CYTHON_FAST_THREAD_STATE
    __Pyx_PyThreadState_assign
    #if CYTHON_USE_EXC_INFO_STACK
    if (!__pyx_tstate->exc_info->exc_type)
    #else
    if (!__pyx_tstate->exc_type)
    #endif
    {
        Py_INCREF(PyExc_StopIteration);
        __Pyx_ErrRestore(PyExc_StopIteration, exc, NULL);
        return;
    }
    #endif
#else
    args = PyTuple_Pack(1, value);
    if (unlikely(!args)) return;
    exc = PyObject_Call(PyExc_StopIteration, args, NULL);
    Py_DECREF(args);
    if (unlikely(!exc)) return;
#endif
    PyErr_SetObject(PyExc_StopIteration, exc);
    Py_DECREF(exc);
}

/* GetException */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb)
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb)
#endif
{
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_FAST_THREAD_STATE
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_FAST_THREAD_STATE
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_FAST_THREAD_STATE
    #if CYTHON_USE_EXC_INFO_STACK
    {
        _PyErr_StackItem *exc_info = tstate->exc_info;
        tmp_type = exc_info->exc_type;
        tmp_value = exc_info->exc_value;
        tmp_tb = exc_info->exc_traceback;
        exc_info->exc_type = local_type;
        exc_info->exc_value = local_value;
        exc_info->exc_traceback = local_tb;
    }
    #else
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    #endif
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* pep479 */
static void __Pyx_Generator_Replace_StopIteration(int in_async_gen) {
    PyObject *exc, *val, *tb, *cur_exc;
    __Pyx_PyThreadState_declare
    #ifdef __Pyx_StopAsyncIteration_USED
    int is_async_stopiteration = 0;
    #endif
    CYTHON_MAYBE_UNUSED_VAR(in_async_gen);
    cur_exc = PyErr_Occurred();
    if (likely(!__Pyx_PyErr_GivenExceptionMatches(cur_exc, PyExc_StopIteration))) {
        #ifdef __Pyx_StopAsyncIteration_USED
        if (in_async_gen && unlikely(__Pyx_PyErr_GivenExceptionMatches(cur_exc, __Pyx_PyExc_StopAsyncIteration))) {
            is_async_stopiteration = 1;
        } else
        #endif
            return;
    }
    __Pyx_PyThreadState_assign
    __Pyx_GetException(&exc, &val, &tb);
    Py_XDECREF(exc);
    Py_XDECREF(val);
    Py_XDECREF(tb);
    PyErr_SetString(PyExc_RuntimeError,
        #ifdef __Pyx_StopAsyncIteration_USED
        is_async_stopiteration ? "async generator raised StopAsyncIteration" :
        in_async_gen ? "async generator raised StopIteration" :
        #endif
        "generator raised StopIteration");
}

/* UnpackUnboundCMethod */
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    target->method = method;
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION >= 3
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    #endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    }
#endif
    return 0;
}

/* CallUnboundCMethod0 */
static PyObject* __Pyx__CallUnboundCMethod0(__Pyx_CachedCFunction* cfunc, PyObject* self) {
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_ASSUME_SAFE_MACROS
    args = PyTuple_New(1);
    if (unlikely(!args)) goto bad;
    Py_INCREF(self);
    PyTuple_SET_ITEM(args, 0, self);
#else
    args = PyTuple_Pack(1, self);
    if (unlikely(!args)) goto bad;
#endif
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    Py_DECREF(args);
bad:
    return result;
}

/* py_dict_keys */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Keys(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_keys, d);
    else
        return PyDict_Keys(d);
}

/* DictGetItem */
#if PY_MAJOR_VERSION >= 3 && !CYTHON_COMPILING_IN_PYPY
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            if (unlikely(PyTuple_Check(key))) {
                PyObject* args = PyTuple_Pack(1, key);
                if (likely(args)) {
                    PyErr_SetObject(PyExc_KeyError, args);
                    Py_DECREF(args);
                }
            } else {
                PyErr_SetObject(PyExc_KeyError, key);
            }
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#endif

/* RaiseUnexpectedTypeError */
static int
__Pyx_RaiseUnexpectedTypeError(const char *expected, PyObject *obj)
{
    __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError, "Expected %s, got " __Pyx_FMT_TYPENAME,
                 expected, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* CallUnboundCMethod1 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg) {
    if (likely(cfunc->func)) {
        int flag = cfunc->flag;
        if (flag == METH_O) {
            return (*(cfunc->func))(self, arg);
        } else if ((PY_VERSION_HEX >= 0x030600B1) && flag == METH_FASTCALL) {
            if ((PY_VERSION_HEX >= 0x030700A0)) {
                return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, &arg, 1);
            } else {
                return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
            }
        } else if ((PY_VERSION_HEX >= 0x030700A0) && flag == (METH_FASTCALL | METH_KEYWORDS)) {
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, &arg, 1, NULL);
        }
    }
    return __Pyx__CallUnboundCMethod1(cfunc, self, arg);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod1(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 0, arg);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg);
        PyTuple_SET_ITEM(args, 1, arg);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(2, self, arg);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* set_iter */
static CYTHON_INLINE PyObject* __Pyx_set_iterator(PyObject* iterable, int is_set,
                                                  Py_ssize_t* p_orig_length, int* p_source_is_set) {
#if CYTHON_COMPILING_IN_CPYTHON
    is_set = is_set || likely(PySet_CheckExact(iterable) || PyFrozenSet_CheckExact(iterable));
    *p_source_is_set = is_set;
    if (likely(is_set)) {
        *p_orig_length = PySet_Size(iterable);
        Py_INCREF(iterable);
        return iterable;
    }
#else
    (void)is_set;
    *p_source_is_set = 0;
#endif
    *p_orig_length = 0;
    return PyObject_GetIter(iterable);
}
static CYTHON_INLINE int __Pyx_set_iter_next(
        PyObject* iter_obj, Py_ssize_t orig_length,
        Py_ssize_t* ppos, PyObject **value,
        int source_is_set) {
    if (!CYTHON_COMPILING_IN_CPYTHON || unlikely(!source_is_set)) {
        *value = PyIter_Next(iter_obj);
        if (unlikely(!*value)) {
            return __Pyx_IterFinish();
        }
        (void)orig_length;
        (void)ppos;
        return 1;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(PySet_GET_SIZE(iter_obj) != orig_length)) {
        PyErr_SetString(
            PyExc_RuntimeError,
            "set changed size during iteration");
        return -1;
    }
    {
        Py_hash_t hash;
        int ret = _PySet_NextEntry(iter_obj, ppos, value, &hash);
        assert (ret != -1);
        if (likely(ret)) {
            Py_INCREF(*value);
            return 1;
        }
    }
#endif
    return 0;
}

/* PyIntCompare */
static CYTHON_INLINE PyObject* __Pyx_PyInt_NeObjC(PyObject *op1, PyObject *op2, long intval, long inplace) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_UNUSED_VAR(inplace);
    if (op1 == op2) {
        Py_RETURN_FALSE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a != b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        int unequal;
        unsigned long uintval;
        Py_ssize_t size = Py_SIZE(op1);
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        if (intval == 0) {
            if (size != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
        } else if (intval < 0) {
            if (size >= 0)
                Py_RETURN_TRUE;
            intval = -intval;
            size = -size;
        } else {
            if (size <= 0)
                Py_RETURN_TRUE;
        }
        uintval = (unsigned long) intval;
#if PyLong_SHIFT * 4 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 4)) {
            unequal = (size != 5) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[4] != ((uintval >> (4 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 3 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 3)) {
            unequal = (size != 4) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[3] != ((uintval >> (3 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 2 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 2)) {
            unequal = (size != 3) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK)) | (digits[2] != ((uintval >> (2 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
#if PyLong_SHIFT * 1 < SIZEOF_LONG*8
        if (uintval >> (PyLong_SHIFT * 1)) {
            unequal = (size != 2) || (digits[0] != (uintval & (unsigned long) PyLong_MASK))
                 | (digits[1] != ((uintval >> (1 * PyLong_SHIFT)) & (unsigned long) PyLong_MASK));
        } else
#endif
            unequal = (size != 1) || (((unsigned long) digits[0]) != (uintval & (unsigned long) PyLong_MASK));
        if (unequal != 0) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
        if ((double)a != (double)b) Py_RETURN_TRUE; else Py_RETURN_FALSE;
    }
    return (
        PyObject_RichCompare(op1, op2, Py_NE));
}

/* JoinPyUnicode */
static PyObject* __Pyx_PyUnicode_Join(PyObject* value_tuple, Py_ssize_t value_count, Py_ssize_t result_ulength,
                                      Py_UCS4 max_char) {
#if CYTHON_USE_UNICODE_INTERNALS && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    PyObject *result_uval;
    int result_ukind, kind_shift;
    Py_ssize_t i, char_pos;
    void *result_udata;
    CYTHON_MAYBE_UNUSED_VAR(max_char);
#if CYTHON_PEP393_ENABLED
    result_uval = PyUnicode_New(result_ulength, max_char);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = (max_char <= 255) ? PyUnicode_1BYTE_KIND : (max_char <= 65535) ? PyUnicode_2BYTE_KIND : PyUnicode_4BYTE_KIND;
    kind_shift = (result_ukind == PyUnicode_4BYTE_KIND) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_DATA(result_uval);
#else
    result_uval = PyUnicode_FromUnicode(NULL, result_ulength);
    if (unlikely(!result_uval)) return NULL;
    result_ukind = sizeof(Py_UNICODE);
    kind_shift = (result_ukind == 4) ? 2 : result_ukind - 1;
    result_udata = PyUnicode_AS_UNICODE(result_uval);
#endif
    assert(kind_shift == 2 || kind_shift == 1 || kind_shift == 0);
    char_pos = 0;
    for (i=0; i < value_count; i++) {
        int ukind;
        Py_ssize_t ulength;
        void *udata;
        PyObject *uval = PyTuple_GET_ITEM(value_tuple, i);
        if (unlikely(__Pyx_PyUnicode_READY(uval)))
            goto bad;
        ulength = __Pyx_PyUnicode_GET_LENGTH(uval);
        if (unlikely(!ulength))
            continue;
        if (unlikely((PY_SSIZE_T_MAX >> kind_shift) - ulength < char_pos))
            goto overflow;
        ukind = __Pyx_PyUnicode_KIND(uval);
        udata = __Pyx_PyUnicode_DATA(uval);
        if (!CYTHON_PEP393_ENABLED || ukind == result_ukind) {
            memcpy((char *)result_udata + (char_pos << kind_shift), udata, (size_t) (ulength << kind_shift));
        } else {
            #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030300F0 || defined(_PyUnicode_FastCopyCharacters)
            _PyUnicode_FastCopyCharacters(result_uval, char_pos, uval, 0, ulength);
            #else
            Py_ssize_t j;
            for (j=0; j < ulength; j++) {
                Py_UCS4 uchar = __Pyx_PyUnicode_READ(ukind, udata, j);
                __Pyx_PyUnicode_WRITE(result_ukind, result_udata, char_pos+j, uchar);
            }
            #endif
        }
        char_pos += ulength;
    }
    return result_uval;
overflow:
    PyErr_SetString(PyExc_OverflowError, "join() result is too long for a Python string");
bad:
    Py_DECREF(result_uval);
    return NULL;
#else
    CYTHON_UNUSED_VAR(max_char);
    CYTHON_UNUSED_VAR(result_ulength);
    CYTHON_UNUSED_VAR(value_count);
    return PyUnicode_Join(__pyx_empty_unicode, value_tuple);
#endif
}

/* RaiseMappingExpected */
static void __Pyx_RaiseMappingExpectedError(PyObject* arg) {
    __Pyx_TypeName arg_type_name = __Pyx_PyType_GetName(Py_TYPE(arg));
    PyErr_Format(PyExc_TypeError,
        "'" __Pyx_FMT_TYPENAME "' object is not a mapping", arg_type_name);
    __Pyx_DECREF_TypeName(arg_type_name);
}

/* None */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* py_dict_values */
static CYTHON_INLINE PyObject* __Pyx_PyDict_Values(PyObject* d) {
    if (PY_MAJOR_VERSION >= 3)
        return __Pyx_CallUnboundCMethod0(&__pyx_umethod_PyDict_Type_values, d);
    else
        return PyDict_Values(d);
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = a->tp_base;
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
#if PY_MAJOR_VERSION == 2
static int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject* exc_type2) {
    PyObject *exception, *value, *tb;
    int res;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&exception, &value, &tb);
    res = exc_type1 ? PyObject_IsSubclass(err, exc_type1) : 0;
    if (unlikely(res == -1)) {
        PyErr_WriteUnraisable(err);
        res = 0;
    }
    if (!res) {
        res = PyObject_IsSubclass(err, exc_type2);
        if (unlikely(res == -1)) {
            PyErr_WriteUnraisable(err);
            res = 0;
        }
    }
    __Pyx_ErrRestore(exception, value, tb);
    return res;
}
#else
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
#endif
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
#if PY_MAJOR_VERSION >= 3
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
#endif
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        #if PY_MAJOR_VERSION < 3
        if (likely(exc_type == t)) return 1;
        #endif
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* None */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030600B1
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    if (likely(cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            #if PY_VERSION_HEX >= 0x030700A0
            return (*(__Pyx_PyCFunctionFast)(void*)(PyCFunction)cfunc->func)(self, args, 2);
            #else
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
            #endif
        }
        #if PY_VERSION_HEX >= 0x030700A0
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return (*(__Pyx_PyCFunctionFastWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, 2, NULL);
        #endif
    }
    return __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    PyObject *args, *result = NULL;
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        args = PyTuple_New(2);
        if (unlikely(!args)) goto bad;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = (*(PyCFunctionWithKeywords)(void*)(PyCFunction)cfunc->func)(self, args, NULL);
        else
            result = (*cfunc->func)(self, args);
    } else {
        args = PyTuple_New(3);
        if (unlikely(!args)) goto bad;
        Py_INCREF(self);
        PyTuple_SET_ITEM(args, 0, self);
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 1, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 2, arg2);
        result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
    }
#else
    args = PyTuple_Pack(3, self, arg1, arg2);
    if (unlikely(!args)) goto bad;
    result = __Pyx_PyObject_Call(cfunc->method, args, NULL);
#endif
bad:
    Py_XDECREF(args);
    return result;
}

/* dict_getitem_default */
static PyObject* __Pyx_PyDict_GetItemDefault(PyObject* d, PyObject* key, PyObject* default_value) {
    PyObject* value;
#if PY_MAJOR_VERSION >= 3 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000)
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (unlikely(PyErr_Occurred()))
            return NULL;
        value = default_value;
    }
    Py_INCREF(value);
    if ((1));
#else
    if (PyString_CheckExact(key) || PyUnicode_CheckExact(key) || PyInt_CheckExact(key)) {
        value = PyDict_GetItem(d, key);
        if (unlikely(!value)) {
            value = default_value;
        }
        Py_INCREF(value);
    }
#endif
    else {
        if (default_value == Py_None)
            value = __Pyx_CallUnboundCMethod1(&__pyx_umethod_PyDict_Type_get, d, key);
        else
            value = __Pyx_CallUnboundCMethod2(&__pyx_umethod_PyDict_Type_get, d, key, default_value);
    }
    return value;
}

/* PyIntBinop */
#if !CYTHON_COMPILING_IN_PYPY
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace, int zerodivision_check) {
    CYTHON_MAYBE_UNUSED_VAR(intval);
    CYTHON_MAYBE_UNUSED_VAR(inplace);
    CYTHON_UNUSED_VAR(zerodivision_check);
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
        
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
#ifdef HAVE_LONG_LONG
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
#endif
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (unlikely(size == 0)) {
            return __Pyx_NewRef(op2);
        }
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    #ifdef HAVE_LONG_LONG
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    #endif
                    }
                    CYTHON_FALLTHROUGH;
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
#ifdef HAVE_LONG_LONG
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
#endif
        
        
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
#if CYTHON_COMPILING_IN_LIMITED_API
        double a = __pyx_PyFloat_AsDouble(op1);
#else
        double a = PyFloat_AS_DOUBLE(op1);
#endif
            double result;
            
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* StopAsyncIteration */
#if PY_VERSION_HEX < 0x030500B1
static PyTypeObject __Pyx__PyExc_StopAsyncIteration_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "StopAsyncIteration",
    sizeof(PyBaseExceptionObject),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_BASETYPE | Py_TPFLAGS_HAVE_GC,
    PyDoc_STR("Signal the end from iterator.__anext__()."),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
#endif
static int __pyx_StopAsyncIteration_init(void) {
#if PY_VERSION_HEX >= 0x030500B1
    __Pyx_PyExc_StopAsyncIteration = PyExc_StopAsyncIteration;
#else
    PyObject *builtins = PyEval_GetBuiltins();
    if (likely(builtins)) {
        PyObject *exc = PyMapping_GetItemString(builtins, (char*) "StopAsyncIteration");
        if (exc) {
            __Pyx_PyExc_StopAsyncIteration = exc;
            return 0;
        }
    }
    PyErr_Clear();
    __Pyx__PyExc_StopAsyncIteration_type.tp_traverse = ((PyTypeObject*)PyExc_BaseException)->tp_traverse;
    __Pyx__PyExc_StopAsyncIteration_type.tp_clear = ((PyTypeObject*)PyExc_BaseException)->tp_clear;
    __Pyx__PyExc_StopAsyncIteration_type.tp_dictoffset = ((PyTypeObject*)PyExc_BaseException)->tp_dictoffset;
    __Pyx__PyExc_StopAsyncIteration_type.tp_base = (PyTypeObject*)PyExc_Exception;
    __Pyx_PyExc_StopAsyncIteration = (PyObject*) __Pyx_FetchCommonType(&__Pyx__PyExc_StopAsyncIteration_type);
    if (unlikely(!__Pyx_PyExc_StopAsyncIteration))
        return -1;
    if (likely(builtins) && unlikely(PyMapping_SetItemString(builtins, (char*) "StopAsyncIteration", __Pyx_PyExc_StopAsyncIteration) < 0))
        return -1;
#endif
    return 0;
}

/* AsyncIter */
static PyObject *__Pyx_Coroutine_GetAsyncIter_Generic(PyObject *obj) {
    __Pyx_TypeName obj_type_name;
#if PY_VERSION_HEX < 0x030500B1
    {
        PyObject *iter = __Pyx_PyObject_CallMethod0(obj, __pyx_n_s_aiter);
        if (likely(iter))
            return iter;
        if (!PyErr_ExceptionMatches(PyExc_AttributeError))
            return NULL;
    }
#else
    if ((0)) (void) __Pyx_PyObject_CallMethod0(obj, __pyx_n_s_aiter);
#endif
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
                 "'async for' requires an object with __aiter__ method, got " __Pyx_FMT_TYPENAME, obj_type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_Coroutine_GetAsyncIter(PyObject *obj) {
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(obj)) {
        return __Pyx_NewRef(obj);
    }
#endif
#if CYTHON_USE_ASYNC_SLOTS
    {
        __Pyx_PyAsyncMethodsStruct* am = __Pyx_PyType_AsAsync(obj);
        if (likely(am && am->am_aiter)) {
            return (*am->am_aiter)(obj);
        }
    }
#endif
    return __Pyx_Coroutine_GetAsyncIter_Generic(obj);
}
static PyObject *__Pyx__Coroutine_AsyncIterNext(PyObject *obj) {
#if PY_VERSION_HEX < 0x030500B1
    {
        PyObject *value = __Pyx_PyObject_CallMethod0(obj, __pyx_n_s_anext);
        if (likely(value))
            return value;
    }
    if (PyErr_ExceptionMatches(PyExc_AttributeError))
#endif
    {
        __Pyx_TypeName obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
        PyErr_Format(PyExc_TypeError,
            "'async for' requires an object with __anext__ method, got " __Pyx_FMT_TYPENAME, obj_type_name);
        __Pyx_DECREF_TypeName(obj_type_name);
    }
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_Coroutine_AsyncIterNext(PyObject *obj) {
#ifdef __Pyx_AsyncGen_USED
    if (__Pyx_AsyncGen_CheckExact(obj)) {
        return __Pyx_async_gen_anext(obj);
    }
#endif
#if CYTHON_USE_ASYNC_SLOTS
    {
        __Pyx_PyAsyncMethodsStruct* am = __Pyx_PyType_AsAsync(obj);
        if (likely(am && am->am_anext)) {
            return (*am->am_anext)(obj);
        }
    }
#endif
    return __Pyx__Coroutine_AsyncIterNext(obj);
}

/* PyUnicode_Unicode */
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_Unicode(PyObject *obj) {
    if (unlikely(obj == Py_None))
        obj = __pyx_kp_u_None;
    return __Pyx_NewRef(obj);
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* PyObjectFormat */
#if CYTHON_USE_UNICODE_WRITER
static PyObject* __Pyx_PyObject_Format(PyObject* obj, PyObject* format_spec) {
    int ret;
    _PyUnicodeWriter writer;
    if (likely(PyFloat_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyFloat_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else if (likely(PyLong_CheckExact(obj))) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x03040000
        _PyUnicodeWriter_Init(&writer, 0);
#else
        _PyUnicodeWriter_Init(&writer);
#endif
        ret = _PyLong_FormatAdvancedWriter(
            &writer,
            obj,
            format_spec, 0, PyUnicode_GET_LENGTH(format_spec));
    } else {
        return PyObject_Format(obj, format_spec);
    }
    if (unlikely(ret == -1)) {
        _PyUnicodeWriter_Dealloc(&writer);
        return NULL;
    }
    return _PyUnicodeWriter_Finish(&writer);
}
#endif

/* PyObjectLookupSpecial */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
#if PY_MAJOR_VERSION < 3
    if (unlikely(PyInstance_Check(obj)))
        return with_error ? __Pyx_PyObject_GetAttrStr(obj, attr_name) : __Pyx_PyObject_GetAttrStrNoError(obj, attr_name);
#endif
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else if (with_error) {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#endif

/* pyfrozenset_new */
static CYTHON_INLINE PyObject* __Pyx_PyFrozenSet_New(PyObject* it) {
    if (it) {
        PyObject* result;
#if CYTHON_COMPILING_IN_PYPY
        PyObject* args;
        args = PyTuple_Pack(1, it);
        if (unlikely(!args))
            return NULL;
        result = PyObject_Call((PyObject*)&PyFrozenSet_Type, args, NULL);
        Py_DECREF(args);
        return result;
#else
        if (PyFrozenSet_CheckExact(it)) {
            Py_INCREF(it);
            return it;
        }
        result = PyFrozenSet_New(it);
        if (unlikely(!result))
            return NULL;
        if ((PY_VERSION_HEX >= 0x031000A1) || likely(PySet_GET_SIZE(result)))
            return result;
        Py_DECREF(result);
#endif
    }
#if CYTHON_USE_TYPE_SLOTS
    return PyFrozenSet_Type.tp_new(&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#else
    return PyObject_Call((PyObject*)&PyFrozenSet_Type, __pyx_empty_tuple, NULL);
#endif
}

/* py_set_discard_unhashable */
static int __Pyx_PySet_DiscardUnhashable(PyObject *set, PyObject *key) {
    PyObject *tmpkey;
    int rv;
    if (likely(!PySet_Check(key) || !PyErr_ExceptionMatches(PyExc_TypeError)))
        return -1;
    PyErr_Clear();
    tmpkey = __Pyx_PyFrozenSet_New(key);
    if (tmpkey == NULL)
        return -1;
    rv = PySet_Discard(set, tmpkey);
    Py_DECREF(tmpkey);
    return rv;
}

/* py_set_remove */
static int __Pyx_PySet_RemoveNotFound(PyObject *set, PyObject *key, int found) {
    if (unlikely(found < 0)) {
        found = __Pyx_PySet_DiscardUnhashable(set, key);
    }
    if (likely(found == 0)) {
        PyObject *tup;
        tup = PyTuple_Pack(1, key);
        if (!tup)
            return -1;
        PyErr_SetObject(PyExc_KeyError, tup);
        Py_DECREF(tup);
        return -1;
    }
    return found;
}
static CYTHON_INLINE int __Pyx_PySet_Remove(PyObject *set, PyObject *key) {
    int found = PySet_Discard(set, key);
    if (unlikely(found != 1)) {
        return __Pyx_PySet_RemoveNotFound(set, key, found);
    }
    return 0;
}

/* UnicodeConcatInPlace */
# if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
static int
__Pyx_unicode_modifiable(PyObject *unicode)
{
    if (Py_REFCNT(unicode) != 1)
        return 0;
    if (!PyUnicode_CheckExact(unicode))
        return 0;
    if (PyUnicode_CHECK_INTERNED(unicode))
        return 0;
    return 1;
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_ConcatInPlaceImpl(PyObject **p_left, PyObject *right
        #if CYTHON_REFNANNY
        , void* __pyx_refnanny
        #endif
    ) {
    PyObject *left = *p_left;
    Py_ssize_t left_len, right_len, new_len;
    if (unlikely(__Pyx_PyUnicode_READY(left) == -1))
        return NULL;
    if (unlikely(__Pyx_PyUnicode_READY(right) == -1))
        return NULL;
    left_len = PyUnicode_GET_LENGTH(left);
    if (left_len == 0) {
        Py_INCREF(right);
        return right;
    }
    right_len = PyUnicode_GET_LENGTH(right);
    if (right_len == 0) {
        Py_INCREF(left);
        return left;
    }
    if (unlikely(left_len > PY_SSIZE_T_MAX - right_len)) {
        PyErr_SetString(PyExc_OverflowError,
                        "strings are too large to concat");
        return NULL;
    }
    new_len = left_len + right_len;
    if (__Pyx_unicode_modifiable(left)
            && PyUnicode_CheckExact(right)
            && PyUnicode_KIND(right) <= PyUnicode_KIND(left)
            && !(PyUnicode_IS_ASCII(left) && !PyUnicode_IS_ASCII(right))) {
        __Pyx_GIVEREF(*p_left);
        if (unlikely(PyUnicode_Resize(p_left, new_len) != 0)) {
            __Pyx_GOTREF(*p_left);
            return NULL;
        }
        __Pyx_INCREF(*p_left);
        _PyUnicode_FastCopyCharacters(*p_left, left_len, right, 0, right_len);
        return *p_left;
    } else {
        return __Pyx_PyUnicode_Concat(left, right);
    }
  }
#endif

/* CallNextTpDealloc */
static void __Pyx_call_next_tp_dealloc(PyObject* obj, destructor current_tp_dealloc) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_dealloc != current_tp_dealloc)
        type = type->tp_base;
    while (type && type->tp_dealloc == current_tp_dealloc)
        type = type->tp_base;
    if (type)
        type->tp_dealloc(obj);
}

/* CallNextTpTraverse */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(PyObject *module, const char *module_name, const char *class_name,
    size_t size, enum __Pyx_ImportType_CheckSize check_size)
{
    PyObject *result = 0;
    char warning[200];
    Py_ssize_t basicsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if ((size_t)basicsize < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error && (size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_n_s_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_n_s_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* PyType_Ready */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_PyType_Ready(PyTypeObject *t) {
    int r;
    PyObject *bases = t->tp_bases;
    if (bases)
    {
        Py_ssize_t i, n = PyTuple_GET_SIZE(bases);
        for (i = 1; i < n; i++)
        {
            PyObject *b0 = PyTuple_GET_ITEM(bases, i);
            PyTypeObject *b;
#if PY_MAJOR_VERSION < 3
            if (PyClass_Check(b0))
            {
                PyErr_Format(PyExc_TypeError, "base class '%.200s' is an old-style class",
                             PyString_AS_STRING(((PyClassObject*)b0)->cl_name));
                return -1;
            }
#endif
            b = (PyTypeObject*)b0;
            if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
            {
                __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                PyErr_Format(PyExc_TypeError,
                    "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
                __Pyx_DECREF_TypeName(b_name);
                return -1;
            }
            if (t->tp_dictoffset == 0 && b->tp_dictoffset)
            {
                __Pyx_TypeName t_name = __Pyx_PyType_GetName(t);
                __Pyx_TypeName b_name = __Pyx_PyType_GetName(b);
                PyErr_Format(PyExc_TypeError,
                    "extension type '" __Pyx_FMT_TYPENAME "' has no __dict__ slot, "
                    "but base type '" __Pyx_FMT_TYPENAME "' has: "
                    "either add 'cdef dict __dict__' to the extension type "
                    "or add '__slots__ = [...]' to the base type",
                    t_name, b_name);
                __Pyx_DECREF_TypeName(t_name);
                __Pyx_DECREF_TypeName(b_name);
                return -1;
            }
        }
    }
#if PY_VERSION_HEX >= 0x03050000
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if PY_VERSION_HEX >= 0x030700a1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400)
        gc = PyImport_GetModule(__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if PY_VERSION_HEX >= 0x03050000
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
}
#endif

/* PyObject_GenericGetAttr */
#if CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP && PY_VERSION_HEX < 0x03070000
static PyObject* __Pyx_PyObject_GenericGetAttr(PyObject* obj, PyObject* attr_name) {
    if (unlikely(Py_TYPE(obj)->tp_dictoffset)) {
        return PyObject_GenericGetAttr(obj, attr_name);
    }
    return __Pyx_PyObject_GenericGetAttrNoDict(obj, attr_name);
}
#endif

/* SetVTable */
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_SetVtable(PyObject *type, void *vtable) {
#else
static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#endif
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (!ob)
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (PyObject_SetAttr(type, __pyx_n_s_pyx_vtable, ob) < 0)
#else
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* MergeVTables */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i;
    void** base_vtables;
    __Pyx_TypeName tp_base_name;
    __Pyx_TypeName base_name;
    void* unknown = (void*)-1;
    PyObject* bases = type->tp_bases;
    int base_depth = 0;
    {
        PyTypeObject* base = type->tp_base;
        while (base) {
            base_depth += 1;
            base = base->tp_base;
        }
    }
    base_vtables = (void**) malloc(sizeof(void*) * (base_depth + 1));
    base_vtables[0] = unknown;
    for (i = 1; i < PyTuple_GET_SIZE(bases); i++) {
        void* base_vtable = __Pyx_GetVtable(((PyTypeObject*)PyTuple_GET_ITEM(bases, i)));
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = type->tp_base;
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = base->tp_base;
            }
        }
    }
    PyErr_Clear();
    free(base_vtables);
    return 0;
bad:
    tp_base_name = __Pyx_PyType_GetName(type->tp_base);
    base_name = __Pyx_PyType_GetName((PyTypeObject*)PyTuple_GET_ITEM(bases, i));
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
    free(base_vtables);
    return -1;
}
#endif

/* SetupReduce */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_n_s_name);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    if (_PyType_Lookup((PyTypeObject*)type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#else
    if (PyObject_HasAttr(type_obj, __pyx_n_s_getstate)) goto __PYX_GOOD;
#endif
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_n_s_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_n_s_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_n_s_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_reduce_cython);
            if (likely(reduce_cython)) {
                ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_n_s_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_n_s_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = PyDict_SetItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = PyDict_DelItem(((PyTypeObject*)type_obj)->tp_dict, __pyx_n_s_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}
#endif

/* Import */
  static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    #if PY_MAJOR_VERSION < 3
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (unlikely(!py_import))
        goto bad;
    if (!from_list) {
        empty_list = PyList_New(0);
        if (unlikely(!empty_list))
            goto bad;
        from_list = empty_list;
    }
    #endif
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if ((1) && (strchr(__Pyx_MODULE_NAME, '.'))) {
                #if CYTHON_COMPILING_IN_LIMITED_API
                module = PyImport_ImportModuleLevelObject(
                    name, empty_dict, empty_dict, from_list, 1);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, __pyx_d, empty_dict, from_list, 1);
                #endif
                if (unlikely(!module)) {
                    if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_MAJOR_VERSION < 3
            PyObject *py_level = PyInt_FromLong(level);
            if (unlikely(!py_level))
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, __pyx_d, empty_dict, from_list, py_level, (PyObject *)NULL);
            Py_DECREF(py_level);
            #else
            #if CYTHON_COMPILING_IN_LIMITED_API
            module = PyImport_ImportModuleLevelObject(
                name, empty_dict, empty_dict, from_list, level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_d, empty_dict, from_list, level);
            #endif
            #endif
        }
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(py_import);
    #endif
    return module;
}

/* ImportDottedModule */
  #if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
    if (likely(PyTuple_GET_SIZE(parts_tuple) == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
#if PY_MAJOR_VERSION < 3
        PyExc_ImportError,
        "No module named '%s'", PyString_AS_STRING(partial_name));
#else
#if PY_VERSION_HEX >= 0x030600B1
        PyExc_ModuleNotFoundError,
#else
        PyExc_ImportError,
#endif
        "No module named '%U'", partial_name);
#endif
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
#endif
#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if PY_VERSION_HEX < 0x030700A1 || (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400)
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
#endif
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if PY_MAJOR_VERSION < 3
    PyObject *module, *from_list, *star = __pyx_n_s__49;
    CYTHON_UNUSED_VAR(parts_tuple);
    from_list = PyList_New(1);
    if (unlikely(!from_list))
        return NULL;
    Py_INCREF(star);
    PyList_SET_ITEM(from_list, 0, star);
    module = __Pyx_Import(name, from_list, 0);
    Py_DECREF(from_list);
    return module;
#else
    Py_ssize_t i, nparts;
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    nparts = PyTuple_GET_SIZE(parts_tuple);
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = PySequence_ITEM(parts_tuple, i);
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (likely(module))
        return module;
    return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
#endif
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030400B1
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_n_s_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_n_s_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* PatchInspect */
  static PyObject* __Pyx_patch_inspect(PyObject* module) {
#if defined(__Pyx_Generator_USED) && (!defined(CYTHON_PATCH_INSPECT) || CYTHON_PATCH_INSPECT)
    static int inspect_patched = 0;
    if (unlikely((!inspect_patched) && module)) {
        module = __Pyx_Coroutine_patch_module(
            module, ""
"old_types = getattr(_module.isgenerator, '_cython_generator_types', None)\n"
"if old_types is None or not isinstance(old_types, set):\n"
"    old_types = set()\n"
"    def cy_wrap(orig_func, type=type, cython_generator_types=old_types):\n"
"        def cy_isgenerator(obj): return type(obj) in cython_generator_types or orig_func(obj)\n"
"        cy_isgenerator._cython_generator_types = cython_generator_types\n"
"        return cy_isgenerator\n"
"    _module.isgenerator = cy_wrap(_module.isgenerator)\n"
"old_types.add(_cython_generator_type)\n"
        );
        inspect_patched = 1;
    }
#else
    if ((0)) return __Pyx_Coroutine_patch_module(module, NULL);
#endif
    return module;
}

/* PatchAsyncIO */
  static PyObject* __Pyx_patch_asyncio(PyObject* module) {
#if PY_VERSION_HEX < 0x030500B2 &&\
        (defined(__Pyx_Coroutine_USED) || defined(__Pyx_Generator_USED)) &&\
        (!defined(CYTHON_PATCH_ASYNCIO) || CYTHON_PATCH_ASYNCIO)
    PyObject *patch_module = NULL;
    static int asyncio_patched = 0;
    if (unlikely((!asyncio_patched) && module)) {
        PyObject *package;
        package = __Pyx_Import(__pyx_n_s_asyncio_coroutines, NULL, 0);
        if (package) {
            patch_module = __Pyx_Coroutine_patch_module(
                PyObject_GetAttrString(package, "coroutines"), ""
"try:\n"
"    coro_types = _module._COROUTINE_TYPES\n"
"except AttributeError: pass\n"
"else:\n"
"    if _cython_coroutine_type is not None and _cython_coroutine_type not in coro_types:\n"
"        coro_types = tuple(coro_types) + (_cython_coroutine_type,)\n"
"    if _cython_generator_type is not None and _cython_generator_type not in coro_types:\n"
"        coro_types = tuple(coro_types) + (_cython_generator_type,)\n"
"_module._COROUTINE_TYPES = coro_types\n"
            );
        } else {
            PyErr_Clear();
            package = __Pyx_Import(__pyx_n_s_asyncio_tasks, NULL, 0);
            if (unlikely(!package)) goto asyncio_done;
            patch_module = __Pyx_Coroutine_patch_module(
                PyObject_GetAttrString(package, "tasks"), ""
"if hasattr(_module, 'iscoroutine'):\n"
"    old_types = getattr(_module.iscoroutine, '_cython_coroutine_types', None)\n"
"    if old_types is None or not isinstance(old_types, set):\n"
"        old_types = set()\n"
"        def cy_wrap(orig_func, type=type, cython_coroutine_types=old_types):\n"
"            def cy_iscoroutine(obj): return type(obj) in cython_coroutine_types or orig_func(obj)\n"
"            cy_iscoroutine._cython_coroutine_types = cython_coroutine_types\n"
"            return cy_iscoroutine\n"
"        _module.iscoroutine = cy_wrap(_module.iscoroutine)\n"
"    if _cython_coroutine_type is not None:\n"
"        old_types.add(_cython_coroutine_type)\n"
"    if _cython_generator_type is not None:\n"
"        old_types.add(_cython_generator_type)\n"
            );
        }
        Py_DECREF(package);
        if (unlikely(!patch_module)) goto ignore;
asyncio_done:
        PyErr_Clear();
        asyncio_patched = 1;
#ifdef __Pyx_Generator_USED
        {
            PyObject *inspect_module;
            if (patch_module) {
                inspect_module = PyObject_GetAttr(patch_module, __pyx_n_s_inspect);
                Py_DECREF(patch_module);
            } else {
                inspect_module = __Pyx_Import(__pyx_n_s_inspect, NULL, 0);
            }
            if (unlikely(!inspect_module)) goto ignore;
            inspect_module = __Pyx_patch_inspect(inspect_module);
            if (unlikely(!inspect_module)) {
                Py_DECREF(module);
                module = NULL;
            }
            Py_XDECREF(inspect_module);
        }
#else
        if ((0)) return __Pyx_patch_inspect(module);
#endif
    }
    return module;
ignore:
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch asyncio package with custom generator type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    if ((0)) return __Pyx_patch_inspect(__Pyx_Coroutine_patch_module(module, NULL));
#endif
    return module;
}

/* ImportFrom */
  static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* PyVectorcallFastCallDict */
  #if CYTHON_METH_FASTCALL
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &= Py_TYPE(key)->tp_flags;
        Py_INCREF(key);
        Py_INCREF(value);
        PyTuple_SET_ITEM(kwnames, i, key);
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    if (likely(kw == NULL) || PyDict_GET_SIZE(kw) == 0) {
        return vc(func, args, nargs, NULL);
    }
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
  #include <structmember.h>
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure)
{
    CYTHON_UNUSED_VAR(closure);
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value)))
#else
    if (unlikely(value == NULL || !PyString_Check(value)))
#endif
    {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_tuple;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->defaults_kwdict;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = op->func_annotations;
    CYTHON_UNUSED_VAR(context);
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    int is_coroutine;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
#if PY_VERSION_HEX >= 0x03050000
    if (is_coroutine) {
        PyObject *module, *fromlist, *marker = __pyx_n_s_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
        PyList_SET_ITEM(fromlist, 0, marker);
        module = PyImport_ImportModuleLevelObject(__pyx_n_s_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        op->func_is_coroutine = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(op->func_is_coroutine)) {
            return __Pyx_NewRef(op->func_is_coroutine);
        }
ignore:
        PyErr_Clear();
    }
#endif
    op->func_is_coroutine = __Pyx_PyBool_FromLong(is_coroutine);
    return __Pyx_NewRef(op->func_is_coroutine);
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {(char *) "_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), PY_WRITE_RESTRICTED, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {(char *) "__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if PY_VERSION_HEX < 0x030500A0
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {(char *) "__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    CYTHON_UNUSED_VAR(args);
#if PY_MAJOR_VERSION >= 3
    Py_INCREF(m->func_qualname);
    return m->func_qualname;
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    if (unlikely(op == NULL))
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults_size = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void*)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    return __Pyx_CyFunction_CallMethod(func, ((PyCFunctionObject*)func)->m_self, arg, kw);
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
        argc = PyTuple_GET_SIZE(args);
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            PyErr_Format(PyExc_TypeError, "%.200s() needs an argument",
                         cyfunc->func.m_ml->ml_name);
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(PyTuple_GET_SIZE(kwnames))) {
        PyErr_Format(PyExc_TypeError,
                     "%.200s() takes no keyword arguments", cyfunc->func.m_ml->ml_name);
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
            def->ml_name, nargs);
        return NULL;
    }
    return def->ml_meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyMethodDef* def = cyfunc->func.m_ml;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
        self = cyfunc->func.m_self;
        break;
    default:
        return NULL;
    }
    return ((_PyCFunctionFastWithKeywords)(void(*)(void))def->ml_meth)(self, args, nargs, kwnames);
}
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    __pyx_CyFunctionType_slots
};
#else
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
#if !CYTHON_METH_FASTCALL
    0,
#elif CYTHON_BACKPORT_VECTORCALL
    (printfunc)offsetof(__pyx_CyFunctionObject, func_vectorcall),
#else
    offsetof(__pyx_CyFunctionObject, func.vectorcall),
#endif
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_CallAsMethod,
    0,
    0,
    0,
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#ifdef _Py_TPFLAGS_HAVE_VECTORCALL
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_PyMethod_New,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
#endif
static int __pyx_CyFunction_init(void) {
#if CYTHON_COMPILING_IN_LIMITED_API
    __pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(&__pyx_CyFunctionType_spec, NULL);
#else
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
#endif
    if (unlikely(__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (unlikely(!m->defaults))
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    m->defaults_size = size;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
  static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* ClassMethod */
  static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM <= 0x05080000
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
#if CYTHON_COMPILING_IN_PYSTON || CYTHON_COMPILING_IN_PYPY
    if (PyMethodDescr_Check(method))
#else
    #if PY_MAJOR_VERSION == 2
    static PyTypeObject *methoddescr_type = NULL;
    if (unlikely(methoddescr_type == NULL)) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (unlikely(!meth)) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    #else
    PyTypeObject *methoddescr_type = &PyMethodDescr_Type;
    #endif
    if (__Pyx_TypeCheck(method, methoddescr_type))
#endif
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else {
        return PyClassMethod_New(method);
    }
}

/* GetNameInClass */
  static PyObject *__Pyx__GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    PyObject *dict;
    assert(PyType_Check(nmspace));
#if CYTHON_USE_TYPE_SLOTS
    dict = ((PyTypeObject*)nmspace)->tp_dict;
    Py_XINCREF(dict);
#else
    dict = PyObject_GetAttr(nmspace, __pyx_n_s_dict);
#endif
    if (likely(dict)) {
        result = PyObject_GetItem(dict, name);
        Py_DECREF(dict);
        if (result) {
            return result;
        }
    }
    PyErr_Clear();
    __Pyx_GetModuleGlobalNameUncached(result, name);
    return result;
}

/* CLineInTraceback */
  #ifndef CYTHON_CLINE_IN_TRACEBACK
static int __Pyx_CLineForTraceback(CYTHON_NCP_UNUSED PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    if (unlikely(!__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_n_s_cline_in_traceback))
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        PyObject_SetAttr(__pyx_cython_runtime, __pyx_n_s_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
  #if !CYTHON_COMPILING_IN_LIMITED_API
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}
#endif

/* AddTraceback */
  #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if CYTHON_COMPILING_IN_LIMITED_API
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    if (c_line) {
        (void) __pyx_cfilenm;
        c_line = __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    _PyTraceback_Add(funcname, filename, c_line ? -c_line : py_line);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
  #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sum_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_diff_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prod_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabsf(b.real) >= fabsf(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                float r = b.imag / b.real;
                float s = (float)(1.0) / (b.real + b.imag * r);
                return __pyx_t_float_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            float r = b.real / b.imag;
            float s = (float)(1.0) / (b.imag + b.real * r);
            return __pyx_t_float_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quot_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        if (b.imag == 0) {
            return __pyx_t_float_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            float denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_float_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_neg_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_float(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conj_float(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_abs_float(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_pow_float(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_float(a, a);
                    case 3:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, a);
                    case 4:
                        z = __Pyx_c_prod_float(a, a);
                        return __Pyx_c_prod_float(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = powf(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2f(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_float(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

/* Declarations */
  #if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

/* Arithmetic */
  #if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    #if 1
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else if (fabs(b.real) >= fabs(b.imag)) {
            if (b.real == 0 && b.imag == 0) {
                return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.imag);
            } else {
                double r = b.imag / b.real;
                double s = (double)(1.0) / (b.real + b.imag * r);
                return __pyx_t_double_complex_from_parts(
                    (a.real + a.imag * r) * s, (a.imag - a.real * r) * s);
            }
        } else {
            double r = b.real / b.imag;
            double s = (double)(1.0) / (b.imag + b.real * r);
            return __pyx_t_double_complex_from_parts(
                (a.real * r + a.imag) * s, (a.imag * r - a.real) * s);
        }
    }
    #else
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        if (b.imag == 0) {
            return __pyx_t_double_complex_from_parts(a.real / b.real, a.imag / b.real);
        } else {
            double denom = b.real * b.real + b.imag * b.imag;
            return __pyx_t_double_complex_from_parts(
                (a.real * b.real + a.imag * b.imag) / denom,
                (a.imag * b.real - a.real * b.imag) / denom);
        }
    }
    #endif
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero_double(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj_double(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs_double(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow_double(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        return __Pyx_c_prod_double(a, a);
                    case 3:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, a);
                    case 4:
                        z = __Pyx_c_prod_double(a, a);
                        return __Pyx_c_prod_double(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                } else if (b.imag == 0) {
                    z.real = pow(a.real, b.real);
                    z.imag = 0;
                    return z;
                } else if (a.real > 0) {
                    r = a.real;
                    theta = 0;
                } else {
                    r = -a.real;
                    theta = atan2(0.0, -1.0);
                }
            } else {
                r = __Pyx_c_abs_double(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

/* CIntFromPy */
  static CYTHON_INLINE int64_t __Pyx_PyInt_As_int64_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int64_t) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int64_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int64_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int64_t, digit, digits[0])
                case 2:
                    if ((8 * sizeof(int64_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 2 * PyLong_SHIFT)) {
                            return (int64_t) (((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int64_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 3 * PyLong_SHIFT)) {
                            return (int64_t) (((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int64_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) >= 4 * PyLong_SHIFT)) {
                            return (int64_t) (((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int64_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int64_t) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int64_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int64_t, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int64_t,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(int64_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int64_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (int64_t) ((((((int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int64_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int64_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (int64_t) ((((((((int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int64_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (int64_t) (((int64_t)-1)*(((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int64_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int64_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int64_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (int64_t) ((((((((((int64_t)digits[3]) << PyLong_SHIFT) | (int64_t)digits[2]) << PyLong_SHIFT) | (int64_t)digits[1]) << PyLong_SHIFT) | (int64_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(int64_t) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int64_t) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int64_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            int64_t val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int64_t) -1;
        }
    } else {
        int64_t val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int64_t) -1;
        val = __Pyx_PyInt_As_int64_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int64_t");
    return (int64_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int64_t");
    return (int64_t) -1;
}

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int64_t(int64_t value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int64_t neg_one = (int64_t) -1, const_zero = (int64_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int64_t) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int64_t) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int64_t) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int64_t) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int64_t),
                                     little, !is_unsigned);
    }
}

/* FormatTypeName */
  #if CYTHON_COMPILING_IN_LIMITED_API
static __Pyx_TypeName
__Pyx_PyType_GetName(PyTypeObject* tp)
{
    PyObject *name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_n_s_name);
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) {
        PyErr_Clear();
        Py_XSETREF(name, __Pyx_NewRef(__pyx_n_s__108));
    }
    return name;
}
#endif

/* CIntToPy */
  static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* CIntFromPy */
  static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(long) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(long) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(long) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* CIntFromPy */
  static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if ((sizeof(int) < sizeof(long))) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if ((sizeof(int) <= sizeof(unsigned long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if ((sizeof(int) <= sizeof(long))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
            } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
            }
        }
        {
#if (CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* Generator */
  static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close_Method, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {(char*) "gi_code", T_OBJECT, offsetof(__pyx_CoroutineObject, gi_code), READONLY, NULL},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {(char *) "gi_frame", (getter)__Pyx_Coroutine_get_frame, NULL,
     (char*) PyDoc_STR("Frame of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __PYX_TYPE_MODULE_PREFIX "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* AsyncGeneratorInitFinalizer */
  #if PY_VERSION_HEX < 0x030600B0
static int __Pyx_async_gen_init_hooks(__pyx_PyAsyncGenObject *o) {
#if 0
    PyThreadState *tstate;
    PyObject *finalizer;
    PyObject *firstiter;
#endif
    if (likely(o->ag_hooks_inited)) {
        return 0;
    }
    o->ag_hooks_inited = 1;
#if 0
    tstate = __Pyx_PyThreadState_Current;
    finalizer = tstate->async_gen_finalizer;
    if (finalizer) {
        Py_INCREF(finalizer);
        o->ag_finalizer = finalizer;
    }
    firstiter = tstate->async_gen_firstiter;
    if (firstiter) {
        PyObject *res;
        Py_INCREF(firstiter);
        res = __Pyx_PyObject_CallOneArg(firstiter, (PyObject*)o);
        Py_DECREF(firstiter);
        if (res == NULL) {
            return 1;
        }
        Py_DECREF(res);
    }
#endif
    return 0;
}
#endif

/* AsyncGenerator */
  PyDoc_STRVAR(__Pyx_async_gen_send_doc,
"send(arg) -> send 'arg' into generator,\n\
return next yielded value or raise StopIteration.");
PyDoc_STRVAR(__Pyx_async_gen_close_doc,
"close() -> raise GeneratorExit inside generator.");
PyDoc_STRVAR(__Pyx_async_gen_throw_doc,
"throw(typ[,val[,tb]]) -> raise exception in generator,\n\
return next yielded value or raise StopIteration.");
PyDoc_STRVAR(__Pyx_async_gen_await_doc,
"__await__() -> return a representation that can be passed into the 'await' expression.");
static PyObject *__Pyx_async_gen_asend_new(__pyx_PyAsyncGenObject *, PyObject *);
static PyObject *__Pyx_async_gen_athrow_new(__pyx_PyAsyncGenObject *, PyObject *);
static const char *__Pyx_NON_INIT_CORO_MSG = "can't send non-None value to a just-started coroutine";
static const char *__Pyx_ASYNC_GEN_IGNORED_EXIT_MSG = "async generator ignored GeneratorExit";
static const char *__Pyx_ASYNC_GEN_CANNOT_REUSE_SEND_MSG = "cannot reuse already awaited __anext__()/asend()";
static const char *__Pyx_ASYNC_GEN_CANNOT_REUSE_CLOSE_MSG = "cannot reuse already awaited aclose()/athrow()";
typedef enum {
    __PYX_AWAITABLE_STATE_INIT,
    __PYX_AWAITABLE_STATE_ITER,
    __PYX_AWAITABLE_STATE_CLOSED,
} __pyx_AwaitableState;
typedef struct {
    PyObject_HEAD
    __pyx_PyAsyncGenObject *ags_gen;
    PyObject *ags_sendval;
    __pyx_AwaitableState ags_state;
} __pyx_PyAsyncGenASend;
typedef struct {
    PyObject_HEAD
    __pyx_PyAsyncGenObject *agt_gen;
    PyObject *agt_args;
    __pyx_AwaitableState agt_state;
} __pyx_PyAsyncGenAThrow;
typedef struct {
    PyObject_HEAD
    PyObject *agw_val;
} __pyx__PyAsyncGenWrappedValue;
#ifndef _PyAsyncGen_MAXFREELIST
#define _PyAsyncGen_MAXFREELIST 80
#endif
static __pyx__PyAsyncGenWrappedValue *__Pyx_ag_value_freelist[_PyAsyncGen_MAXFREELIST];
static int __Pyx_ag_value_freelist_free = 0;
static __pyx_PyAsyncGenASend *__Pyx_ag_asend_freelist[_PyAsyncGen_MAXFREELIST];
static int __Pyx_ag_asend_freelist_free = 0;
#define __pyx__PyAsyncGenWrappedValue_CheckExact(o)\
                    __Pyx_IS_TYPE(o, __pyx__PyAsyncGenWrappedValueType)
static int
__Pyx_async_gen_traverse(__pyx_PyAsyncGenObject *gen, visitproc visit, void *arg)
{
    Py_VISIT(gen->ag_finalizer);
    return __Pyx_Coroutine_traverse((__pyx_CoroutineObject*)gen, visit, arg);
}
static PyObject *
__Pyx_async_gen_repr(__pyx_CoroutineObject *o)
{
    return PyUnicode_FromFormat("<async_generator object %S at %p>",
                                o->gi_qualname ? o->gi_qualname : Py_None, o);
}
#if PY_VERSION_HEX >= 0x030600B0
static int
__Pyx_async_gen_init_hooks(__pyx_PyAsyncGenObject *o)
{
    PyThreadState *tstate;
    PyObject *finalizer;
    PyObject *firstiter;
    if (o->ag_hooks_inited) {
        return 0;
    }
    o->ag_hooks_inited = 1;
    tstate = __Pyx_PyThreadState_Current;
    finalizer = tstate->async_gen_finalizer;
    if (finalizer) {
        Py_INCREF(finalizer);
        o->ag_finalizer = finalizer;
    }
    firstiter = tstate->async_gen_firstiter;
    if (firstiter) {
        PyObject *res;
#if CYTHON_UNPACK_METHODS
        PyObject *self;
#endif
        Py_INCREF(firstiter);
#if CYTHON_UNPACK_METHODS
        if (likely(PyMethod_Check(firstiter)) && likely((self = PyMethod_GET_SELF(firstiter)) != NULL)) {
            PyObject *function = PyMethod_GET_FUNCTION(firstiter);
            res = __Pyx_PyObject_Call2Args(function, self, (PyObject*)o);
        } else
#endif
        res = __Pyx_PyObject_CallOneArg(firstiter, (PyObject*)o);
        Py_DECREF(firstiter);
        if (unlikely(res == NULL)) {
            return 1;
        }
        Py_DECREF(res);
    }
    return 0;
}
#endif
static PyObject *
__Pyx_async_gen_anext(PyObject *g)
{
    __pyx_PyAsyncGenObject *o = (__pyx_PyAsyncGenObject*) g;
    if (unlikely(__Pyx_async_gen_init_hooks(o))) {
        return NULL;
    }
    return __Pyx_async_gen_asend_new(o, NULL);
}
static PyObject *
__Pyx_async_gen_anext_method(PyObject *g, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    return __Pyx_async_gen_anext(g);
}
static PyObject *
__Pyx_async_gen_asend(__pyx_PyAsyncGenObject *o, PyObject *arg)
{
    if (unlikely(__Pyx_async_gen_init_hooks(o))) {
        return NULL;
    }
    return __Pyx_async_gen_asend_new(o, arg);
}
static PyObject *
__Pyx_async_gen_aclose(__pyx_PyAsyncGenObject *o, PyObject *arg)
{
    CYTHON_UNUSED_VAR(arg);
    if (unlikely(__Pyx_async_gen_init_hooks(o))) {
        return NULL;
    }
    return __Pyx_async_gen_athrow_new(o, NULL);
}
static PyObject *
__Pyx_async_gen_athrow(__pyx_PyAsyncGenObject *o, PyObject *args)
{
    if (unlikely(__Pyx_async_gen_init_hooks(o))) {
        return NULL;
    }
    return __Pyx_async_gen_athrow_new(o, args);
}
static PyObject *
__Pyx_async_gen_self_method(PyObject *g, PyObject *arg) {
    CYTHON_UNUSED_VAR(arg);
    return __Pyx_NewRef(g);
}
static PyGetSetDef __Pyx_async_gen_getsetlist[] = {
    {(char*) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the async generator"), 0},
    {(char*) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the async generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __Pyx_async_gen_memberlist[] = {
    {(char*) "ag_running", T_BOOL,   offsetof(__pyx_PyAsyncGenObject, ag_running_async), READONLY, NULL},
    {(char*) "ag_await", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being awaited on, or None")},
    {0, 0, 0, 0, 0}
};
PyDoc_STRVAR(__Pyx_async_aclose_doc,
"aclose() -> raise GeneratorExit inside generator.");
PyDoc_STRVAR(__Pyx_async_asend_doc,
"asend(v) -> send 'v' in generator.");
PyDoc_STRVAR(__Pyx_async_athrow_doc,
"athrow(typ[,val[,tb]]) -> raise exception in generator.");
PyDoc_STRVAR(__Pyx_async_aiter_doc,
"__aiter__(v) -> return an asynchronous iterator.");
PyDoc_STRVAR(__Pyx_async_anext_doc,
"__anext__(v) -> continue asynchronous iteration and return the next element.");
static PyMethodDef __Pyx_async_gen_methods[] = {
    {"asend", (PyCFunction)__Pyx_async_gen_asend, METH_O, __Pyx_async_asend_doc},
    {"athrow",(PyCFunction)__Pyx_async_gen_athrow, METH_VARARGS, __Pyx_async_athrow_doc},
    {"aclose", (PyCFunction)__Pyx_async_gen_aclose, METH_NOARGS, __Pyx_async_aclose_doc},
    {"__aiter__", (PyCFunction)__Pyx_async_gen_self_method, METH_NOARGS, __Pyx_async_aiter_doc},
    {"__anext__", (PyCFunction)__Pyx_async_gen_anext_method, METH_NOARGS, __Pyx_async_anext_doc},
    {0, 0, 0, 0}
};
#if CYTHON_USE_ASYNC_SLOTS
static __Pyx_PyAsyncMethodsStruct __Pyx_async_gen_as_async = {
    0,
    PyObject_SelfIter,
    (unaryfunc)__Pyx_async_gen_anext
};
#endif
static PyTypeObject __pyx_AsyncGenType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "async_generator",
    sizeof(__pyx_PyAsyncGenObject),
    0,
    (destructor)__Pyx_Coroutine_dealloc,
    0,
    0,
    0,
#if CYTHON_USE_ASYNC_SLOTS
    &__Pyx_async_gen_as_async,
#else
    0,
#endif
    (reprfunc)__Pyx_async_gen_repr,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC |
        Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc)__Pyx_async_gen_traverse,
    0,
#if CYTHON_USE_ASYNC_SLOTS && CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3 && PY_VERSION_HEX < 0x030500B1
    __Pyx_Coroutine_compare,
#else
    0,
#endif
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    0,
    __Pyx_async_gen_methods,
    __Pyx_async_gen_memberlist,
    __Pyx_async_gen_getsetlist,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if CYTHON_USE_TP_FINALIZE
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if CYTHON_USE_TP_FINALIZE
    __Pyx_Coroutine_del,
#elif PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
static int
__Pyx_PyAsyncGen_ClearFreeLists(void)
{
    int ret = __Pyx_ag_value_freelist_free + __Pyx_ag_asend_freelist_free;
    while (__Pyx_ag_value_freelist_free) {
        __pyx__PyAsyncGenWrappedValue *o;
        o = __Pyx_ag_value_freelist[--__Pyx_ag_value_freelist_free];
        assert(__pyx__PyAsyncGenWrappedValue_CheckExact(o));
        PyObject_GC_Del(o);
    }
    while (__Pyx_ag_asend_freelist_free) {
        __pyx_PyAsyncGenASend *o;
        o = __Pyx_ag_asend_freelist[--__Pyx_ag_asend_freelist_free];
        assert(__Pyx_IS_TYPE(o, __pyx__PyAsyncGenASendType));
        PyObject_GC_Del(o);
    }
    return ret;
}
static void
__Pyx_PyAsyncGen_Fini(void)
{
    __Pyx_PyAsyncGen_ClearFreeLists();
}
static PyObject *
__Pyx_async_gen_unwrap_value(__pyx_PyAsyncGenObject *gen, PyObject *result)
{
    if (result == NULL) {
        PyObject *exc_type = PyErr_Occurred();
        if (!exc_type) {
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
            gen->ag_closed = 1;
        } else if (__Pyx_PyErr_GivenExceptionMatches2(exc_type, __Pyx_PyExc_StopAsyncIteration, PyExc_GeneratorExit)) {
            gen->ag_closed = 1;
        }
        gen->ag_running_async = 0;
        return NULL;
    }
    if (__pyx__PyAsyncGenWrappedValue_CheckExact(result)) {
        __Pyx_ReturnWithStopIteration(((__pyx__PyAsyncGenWrappedValue*)result)->agw_val);
        Py_DECREF(result);
        gen->ag_running_async = 0;
        return NULL;
    }
    return result;
}
static void
__Pyx_async_gen_asend_dealloc(__pyx_PyAsyncGenASend *o)
{
    PyObject_GC_UnTrack((PyObject *)o);
    Py_CLEAR(o->ags_gen);
    Py_CLEAR(o->ags_sendval);
    if (likely(__Pyx_ag_asend_freelist_free < _PyAsyncGen_MAXFREELIST)) {
        assert(__pyx_PyAsyncGenASend_CheckExact(o));
        __Pyx_ag_asend_freelist[__Pyx_ag_asend_freelist_free++] = o;
    } else {
        PyObject_GC_Del(o);
    }
}
static int
__Pyx_async_gen_asend_traverse(__pyx_PyAsyncGenASend *o, visitproc visit, void *arg)
{
    Py_VISIT(o->ags_gen);
    Py_VISIT(o->ags_sendval);
    return 0;
}
static PyObject *
__Pyx_async_gen_asend_send(PyObject *g, PyObject *arg)
{
    __pyx_PyAsyncGenASend *o = (__pyx_PyAsyncGenASend*) g;
    PyObject *result;
    if (unlikely(o->ags_state == __PYX_AWAITABLE_STATE_CLOSED)) {
        PyErr_SetString(PyExc_RuntimeError, __Pyx_ASYNC_GEN_CANNOT_REUSE_SEND_MSG);
        return NULL;
    }
    if (o->ags_state == __PYX_AWAITABLE_STATE_INIT) {
        if (unlikely(o->ags_gen->ag_running_async)) {
            PyErr_SetString(
                PyExc_RuntimeError,
                "anext(): asynchronous generator is already running");
            return NULL;
        }
        if (arg == NULL || arg == Py_None) {
            arg = o->ags_sendval ? o->ags_sendval : Py_None;
        }
        o->ags_state = __PYX_AWAITABLE_STATE_ITER;
    }
    o->ags_gen->ag_running_async = 1;
    result = __Pyx_Coroutine_Send((PyObject*)o->ags_gen, arg);
    result = __Pyx_async_gen_unwrap_value(o->ags_gen, result);
    if (result == NULL) {
        o->ags_state = __PYX_AWAITABLE_STATE_CLOSED;
    }
    return result;
}
static CYTHON_INLINE PyObject *
__Pyx_async_gen_asend_iternext(PyObject *o)
{
    return __Pyx_async_gen_asend_send(o, Py_None);
}
static PyObject *
__Pyx_async_gen_asend_throw(__pyx_PyAsyncGenASend *o, PyObject *args)
{
    PyObject *result;
    if (unlikely(o->ags_state == __PYX_AWAITABLE_STATE_CLOSED)) {
        PyErr_SetString(PyExc_RuntimeError, __Pyx_ASYNC_GEN_CANNOT_REUSE_SEND_MSG);
        return NULL;
    }
    result = __Pyx_Coroutine_Throw((PyObject*)o->ags_gen, args);
    result = __Pyx_async_gen_unwrap_value(o->ags_gen, result);
    if (result == NULL) {
        o->ags_state = __PYX_AWAITABLE_STATE_CLOSED;
    }
    return result;
}
static PyObject *
__Pyx_async_gen_asend_close(PyObject *g, PyObject *args)
{
    __pyx_PyAsyncGenASend *o = (__pyx_PyAsyncGenASend*) g;
    CYTHON_UNUSED_VAR(args);
    o->ags_state = __PYX_AWAITABLE_STATE_CLOSED;
    Py_RETURN_NONE;
}
static PyMethodDef __Pyx_async_gen_asend_methods[] = {
    {"send", (PyCFunction)__Pyx_async_gen_asend_send, METH_O, __Pyx_async_gen_send_doc},
    {"throw", (PyCFunction)__Pyx_async_gen_asend_throw, METH_VARARGS, __Pyx_async_gen_throw_doc},
    {"close", (PyCFunction)__Pyx_async_gen_asend_close, METH_NOARGS, __Pyx_async_gen_close_doc},
    {"__await__", (PyCFunction)__Pyx_async_gen_self_method, METH_NOARGS, __Pyx_async_gen_await_doc},
    {0, 0, 0, 0}
};
#if CYTHON_USE_ASYNC_SLOTS
static __Pyx_PyAsyncMethodsStruct __Pyx_async_gen_asend_as_async = {
    PyObject_SelfIter,
    0,
    0
};
#endif
static PyTypeObject __pyx__PyAsyncGenASendType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "async_generator_asend",
    sizeof(__pyx_PyAsyncGenASend),
    0,
    (destructor)__Pyx_async_gen_asend_dealloc,
    0,
    0,
    0,
#if CYTHON_USE_ASYNC_SLOTS
    &__Pyx_async_gen_asend_as_async,
#else
    0,
#endif
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc)__Pyx_async_gen_asend_traverse,
    0,
#if CYTHON_USE_ASYNC_SLOTS && CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3 && PY_VERSION_HEX < 0x030500B1
    __Pyx_Coroutine_compare,
#else
    0,
#endif
    0,
    PyObject_SelfIter,
    (iternextfunc)__Pyx_async_gen_asend_iternext,
    __Pyx_async_gen_asend_methods,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
static PyObject *
__Pyx_async_gen_asend_new(__pyx_PyAsyncGenObject *gen, PyObject *sendval)
{
    __pyx_PyAsyncGenASend *o;
    if (likely(__Pyx_ag_asend_freelist_free)) {
        __Pyx_ag_asend_freelist_free--;
        o = __Pyx_ag_asend_freelist[__Pyx_ag_asend_freelist_free];
        _Py_NewReference((PyObject *)o);
    } else {
        o = PyObject_GC_New(__pyx_PyAsyncGenASend, __pyx__PyAsyncGenASendType);
        if (unlikely(o == NULL)) {
            return NULL;
        }
    }
    Py_INCREF(gen);
    o->ags_gen = gen;
    Py_XINCREF(sendval);
    o->ags_sendval = sendval;
    o->ags_state = __PYX_AWAITABLE_STATE_INIT;
    PyObject_GC_Track((PyObject*)o);
    return (PyObject*)o;
}
static void
__Pyx_async_gen_wrapped_val_dealloc(__pyx__PyAsyncGenWrappedValue *o)
{
    PyObject_GC_UnTrack((PyObject *)o);
    Py_CLEAR(o->agw_val);
    if (likely(__Pyx_ag_value_freelist_free < _PyAsyncGen_MAXFREELIST)) {
        assert(__pyx__PyAsyncGenWrappedValue_CheckExact(o));
        __Pyx_ag_value_freelist[__Pyx_ag_value_freelist_free++] = o;
    } else {
        PyObject_GC_Del(o);
    }
}
static int
__Pyx_async_gen_wrapped_val_traverse(__pyx__PyAsyncGenWrappedValue *o,
                                     visitproc visit, void *arg)
{
    Py_VISIT(o->agw_val);
    return 0;
}
static PyTypeObject __pyx__PyAsyncGenWrappedValueType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "async_generator_wrapped_value",
    sizeof(__pyx__PyAsyncGenWrappedValue),
    0,
    (destructor)__Pyx_async_gen_wrapped_val_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc)__Pyx_async_gen_wrapped_val_traverse,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
static PyObject *
__Pyx__PyAsyncGenValueWrapperNew(PyObject *val)
{
    __pyx__PyAsyncGenWrappedValue *o;
    assert(val);
    if (likely(__Pyx_ag_value_freelist_free)) {
        __Pyx_ag_value_freelist_free--;
        o = __Pyx_ag_value_freelist[__Pyx_ag_value_freelist_free];
        assert(__pyx__PyAsyncGenWrappedValue_CheckExact(o));
        _Py_NewReference((PyObject*)o);
    } else {
        o = PyObject_GC_New(__pyx__PyAsyncGenWrappedValue, __pyx__PyAsyncGenWrappedValueType);
        if (unlikely(!o)) {
            Py_DECREF(val);
            return NULL;
        }
    }
    o->agw_val = val;
    PyObject_GC_Track((PyObject*)o);
    return (PyObject*)o;
}
static void
__Pyx_async_gen_athrow_dealloc(__pyx_PyAsyncGenAThrow *o)
{
    PyObject_GC_UnTrack((PyObject *)o);
    Py_CLEAR(o->agt_gen);
    Py_CLEAR(o->agt_args);
    PyObject_GC_Del(o);
}
static int
__Pyx_async_gen_athrow_traverse(__pyx_PyAsyncGenAThrow *o, visitproc visit, void *arg)
{
    Py_VISIT(o->agt_gen);
    Py_VISIT(o->agt_args);
    return 0;
}
static PyObject *
__Pyx_async_gen_athrow_send(__pyx_PyAsyncGenAThrow *o, PyObject *arg)
{
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*)o->agt_gen;
    PyObject *retval, *exc_type;
    if (unlikely(o->agt_state == __PYX_AWAITABLE_STATE_CLOSED)) {
        PyErr_SetString(PyExc_RuntimeError, __Pyx_ASYNC_GEN_CANNOT_REUSE_CLOSE_MSG);
        return NULL;
    }
    if (unlikely(gen->resume_label == -1)) {
        o->agt_state = __PYX_AWAITABLE_STATE_CLOSED;
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    if (o->agt_state == __PYX_AWAITABLE_STATE_INIT) {
        if (unlikely(o->agt_gen->ag_running_async)) {
            o->agt_state = __PYX_AWAITABLE_STATE_CLOSED;
            if (o->agt_args == NULL) {
                PyErr_SetString(
                    PyExc_RuntimeError,
                    "aclose(): asynchronous generator is already running");
            } else {
                PyErr_SetString(
                    PyExc_RuntimeError,
                    "athrow(): asynchronous generator is already running");
            }
            return NULL;
        }
        if (unlikely(o->agt_gen->ag_closed)) {
            o->agt_state = __PYX_AWAITABLE_STATE_CLOSED;
            PyErr_SetNone(__Pyx_PyExc_StopAsyncIteration);
            return NULL;
        }
        if (unlikely(arg != Py_None)) {
            PyErr_SetString(PyExc_RuntimeError, __Pyx_NON_INIT_CORO_MSG);
            return NULL;
        }
        o->agt_state = __PYX_AWAITABLE_STATE_ITER;
        o->agt_gen->ag_running_async = 1;
        if (o->agt_args == NULL) {
            o->agt_gen->ag_closed = 1;
            retval = __Pyx__Coroutine_Throw((PyObject*)gen,
                PyExc_GeneratorExit, NULL, NULL, NULL, 0);
            if (retval && __pyx__PyAsyncGenWrappedValue_CheckExact(retval)) {
                Py_DECREF(retval);
                goto yield_close;
            }
        } else {
            PyObject *typ;
            PyObject *tb = NULL;
            PyObject *val = NULL;
            if (unlikely(!PyArg_UnpackTuple(o->agt_args, "athrow", 1, 3, &typ, &val, &tb))) {
                return NULL;
            }
            retval = __Pyx__Coroutine_Throw((PyObject*)gen,
                typ, val, tb, o->agt_args, 0);
            retval = __Pyx_async_gen_unwrap_value(o->agt_gen, retval);
        }
        if (retval == NULL) {
            goto check_error;
        }
        return retval;
    }
    assert (o->agt_state == __PYX_AWAITABLE_STATE_ITER);
    retval = __Pyx_Coroutine_Send((PyObject *)gen, arg);
    if (o->agt_args) {
        return __Pyx_async_gen_unwrap_value(o->agt_gen, retval);
    } else {
        if (retval) {
            if (unlikely(__pyx__PyAsyncGenWrappedValue_CheckExact(retval))) {
                Py_DECREF(retval);
                goto yield_close;
            }
            else {
                return retval;
            }
        }
        else {
            goto check_error;
        }
    }
yield_close:
    o->agt_gen->ag_running_async = 0;
    o->agt_state = __PYX_AWAITABLE_STATE_CLOSED;
    PyErr_SetString(
        PyExc_RuntimeError, __Pyx_ASYNC_GEN_IGNORED_EXIT_MSG);
    return NULL;
check_error:
    o->agt_gen->ag_running_async = 0;
    o->agt_state = __PYX_AWAITABLE_STATE_CLOSED;
    exc_type = PyErr_Occurred();
    if (__Pyx_PyErr_GivenExceptionMatches2(exc_type, __Pyx_PyExc_StopAsyncIteration, PyExc_GeneratorExit)) {
        if (o->agt_args == NULL) {
            PyErr_Clear();
            PyErr_SetNone(PyExc_StopIteration);
        }
    }
    return NULL;
}
static PyObject *
__Pyx_async_gen_athrow_throw(__pyx_PyAsyncGenAThrow *o, PyObject *args)
{
    PyObject *retval;
    if (unlikely(o->agt_state == __PYX_AWAITABLE_STATE_CLOSED)) {
        PyErr_SetString(PyExc_RuntimeError, __Pyx_ASYNC_GEN_CANNOT_REUSE_CLOSE_MSG);
        return NULL;
    }
    retval = __Pyx_Coroutine_Throw((PyObject*)o->agt_gen, args);
    if (o->agt_args) {
        return __Pyx_async_gen_unwrap_value(o->agt_gen, retval);
    } else {
        PyObject *exc_type;
        if (unlikely(retval && __pyx__PyAsyncGenWrappedValue_CheckExact(retval))) {
            o->agt_gen->ag_running_async = 0;
            o->agt_state = __PYX_AWAITABLE_STATE_CLOSED;
            Py_DECREF(retval);
            PyErr_SetString(PyExc_RuntimeError, __Pyx_ASYNC_GEN_IGNORED_EXIT_MSG);
            return NULL;
        }
        exc_type = PyErr_Occurred();
        if (__Pyx_PyErr_GivenExceptionMatches2(exc_type, __Pyx_PyExc_StopAsyncIteration, PyExc_GeneratorExit)) {
            PyErr_Clear();
            PyErr_SetNone(PyExc_StopIteration);
        }
        return retval;
    }
}
static PyObject *
__Pyx_async_gen_athrow_iternext(__pyx_PyAsyncGenAThrow *o)
{
    return __Pyx_async_gen_athrow_send(o, Py_None);
}
static PyObject *
__Pyx_async_gen_athrow_close(PyObject *g, PyObject *args)
{
    __pyx_PyAsyncGenAThrow *o = (__pyx_PyAsyncGenAThrow*) g;
    CYTHON_UNUSED_VAR(args);
    o->agt_state = __PYX_AWAITABLE_STATE_CLOSED;
    Py_RETURN_NONE;
}
static PyMethodDef __Pyx_async_gen_athrow_methods[] = {
    {"send", (PyCFunction)__Pyx_async_gen_athrow_send, METH_O, __Pyx_async_gen_send_doc},
    {"throw", (PyCFunction)__Pyx_async_gen_athrow_throw, METH_VARARGS, __Pyx_async_gen_throw_doc},
    {"close", (PyCFunction)__Pyx_async_gen_athrow_close, METH_NOARGS, __Pyx_async_gen_close_doc},
    {"__await__", (PyCFunction)__Pyx_async_gen_self_method, METH_NOARGS, __Pyx_async_gen_await_doc},
    {0, 0, 0, 0}
};
#if CYTHON_USE_ASYNC_SLOTS
static __Pyx_PyAsyncMethodsStruct __Pyx_async_gen_athrow_as_async = {
    PyObject_SelfIter,
    0,
    0
};
#endif
static PyTypeObject __pyx__PyAsyncGenAThrowType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "async_generator_athrow",
    sizeof(__pyx_PyAsyncGenAThrow),
    0,
    (destructor)__Pyx_async_gen_athrow_dealloc,
    0,
    0,
    0,
#if CYTHON_USE_ASYNC_SLOTS
    &__Pyx_async_gen_athrow_as_async,
#else
    0,
#endif
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc)__Pyx_async_gen_athrow_traverse,
    0,
#if CYTHON_USE_ASYNC_SLOTS && CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3 && PY_VERSION_HEX < 0x030500B1
    __Pyx_Coroutine_compare,
#else
    0,
#endif
    0,
    PyObject_SelfIter,
    (iternextfunc)__Pyx_async_gen_athrow_iternext,
    __Pyx_async_gen_athrow_methods,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b1
    0,
#endif
#if PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000
    0,
#endif
#if CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM+0 >= 0x06000000
    0,
#endif
};
static PyObject *
__Pyx_async_gen_athrow_new(__pyx_PyAsyncGenObject *gen, PyObject *args)
{
    __pyx_PyAsyncGenAThrow *o;
    o = PyObject_GC_New(__pyx_PyAsyncGenAThrow, __pyx__PyAsyncGenAThrowType);
    if (unlikely(o == NULL)) {
        return NULL;
    }
    o->agt_gen = gen;
    o->agt_args = args;
    o->agt_state = __PYX_AWAITABLE_STATE_INIT;
    Py_INCREF(gen);
    Py_XINCREF(args);
    PyObject_GC_Track((PyObject*)o);
    return (PyObject*)o;
}
static int __pyx_AsyncGen_init(void) {
    __pyx_AsyncGenType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx__PyAsyncGenWrappedValueType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx__PyAsyncGenAThrowType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx__PyAsyncGenASendType_type.tp_getattro = __Pyx_PyObject_GenericGetAttrNoDict;
    __pyx_AsyncGenType = __Pyx_FetchCommonType(&__pyx_AsyncGenType_type);
    if (unlikely(!__pyx_AsyncGenType))
        return -1;
    __pyx__PyAsyncGenAThrowType = __Pyx_FetchCommonType(&__pyx__PyAsyncGenAThrowType_type);
    if (unlikely(!__pyx__PyAsyncGenAThrowType))
        return -1;
    __pyx__PyAsyncGenWrappedValueType = __Pyx_FetchCommonType(&__pyx__PyAsyncGenWrappedValueType_type);
    if (unlikely(!__pyx__PyAsyncGenWrappedValueType))
        return -1;
    __pyx__PyAsyncGenASendType = __Pyx_FetchCommonType(&__pyx__PyAsyncGenASendType_type);
    if (unlikely(!__pyx__PyAsyncGenASendType))
        return -1;
    return 0;
}

/* AsyncGen */
  

/* CheckBinaryVersion */
  static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
  #if PY_MAJOR_VERSION >= 3
static int __Pyx_InitString(__Pyx_StringTabEntry t, PyObject **str) {
    if (t.is_unicode | t.is_str) {
        if (t.intern) {
            *str = PyUnicode_InternFromString(t.s);
        } else if (t.encoding) {
            *str = PyUnicode_Decode(t.s, t.n - 1, t.encoding, NULL);
        } else {
            *str = PyUnicode_FromStringAndSize(t.s, t.n - 1);
        }
    } else {
        *str = PyBytes_FromStringAndSize(t.s, t.n - 1);
    }
    if (!*str)
        return -1;
    if (PyObject_Hash(*str) == -1)
        return -1;
    return 0;
}
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION >= 3
        __Pyx_InitString(*t, t->p);
        #else
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        if (!*t->p)
            return -1;
        if (PyObject_Hash(*t->p) == -1)
            return -1;
        #endif
        ++t;
    }
    return 0;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
#if !CYTHON_PEP393_ENABLED
static const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    char* defenc_c;
    PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
    if (!defenc) return NULL;
    defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    {
        char* end = defenc_c + PyBytes_GET_SIZE(defenc);
        char* c;
        for (c = defenc_c; c < end; c++) {
            if ((unsigned char) (*c) >= 128) {
                PyUnicode_AsASCIIString(o);
                return NULL;
            }
        }
    }
#endif
    *length = PyBytes_GET_SIZE(defenc);
    return defenc_c;
}
#else
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
}
#endif
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY && !CYTHON_COMPILING_IN_LIMITED_API) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_IntOrLongWrongResultType(PyObject* result, const char* type_name) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetName(Py_TYPE(result));
#if PY_MAJOR_VERSION >= 3
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
#endif
    PyErr_Format(PyExc_TypeError,
                 "__%.4s__ returned non-%.4s (type " __Pyx_FMT_TYPENAME ")",
                 type_name, type_name, result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_Check(x) || PyLong_Check(x)))
#else
  if (likely(PyLong_Check(x)))
#endif
    return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  #if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = m->nb_int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = m->nb_long(x);
  }
  #else
  if (likely(m && m->nb_int)) {
    name = "int";
    res = m->nb_int(x);
  }
  #endif
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
    res = PyNumber_Int(x);
  }
#endif
  if (likely(res)) {
#if PY_MAJOR_VERSION < 3
    if (unlikely(!PyInt_Check(res) && !PyLong_Check(res))) {
#else
    if (unlikely(!PyLong_CheckExact(res))) {
#endif
        return __Pyx_PyNumber_IntOrLongWrongResultType(res, name);
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(b);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
#if PY_MAJOR_VERSION < 3
  } else if (likely(PyInt_CheckExact(o))) {
    return PyInt_AS_LONG(o);
#endif
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyInt_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
